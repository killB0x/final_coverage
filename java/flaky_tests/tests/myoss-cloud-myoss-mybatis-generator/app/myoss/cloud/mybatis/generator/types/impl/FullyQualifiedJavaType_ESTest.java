/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:19:04 GMT 2022
 */

package app.myoss.cloud.mybatis.generator.types.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType;
import app.myoss.cloud.mybatis.generator.types.impl.PrimitiveTypeWrapper;
import java.util.List;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FullyQualifiedJavaType_ESTest extends FullyQualifiedJavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("short");
      assertEquals("short", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("short", fullyQualifiedJavaType0.getBaseShortName());
      assertNotNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("double");
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("double", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("double", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("double", string0);
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("double", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("double", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(string0);
      
      List<FullyQualifiedJavaType> list0 = fullyQualifiedJavaType0.getTypeArguments();
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("double", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("double", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(fullyQualifiedJavaType0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jmava+lang.Foat");
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.hashCode();
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType1.addTypeArgument((FullyQualifiedJavaType) null);
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("java.lang.Boolean", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      primitiveTypeWrapper1.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      
      fullyQualifiedJavaType1.addTypeArgument(primitiveTypeWrapper1);
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = new FullyQualifiedJavaType("");
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertEquals("java.util.HashMap", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("HashMap", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType3);
      
      String string0 = fullyQualifiedJavaType2.getBaseQualifiedName();
      assertEquals("", string0);
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("z[~.N:(=?Vo");
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("z[~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("N:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("z[~.N:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("z[~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("N:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("z[~.N:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains("z[~.N:(=?Vo"));
      assertNotNull(list0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("z[~.N:(=?Vo");
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("z[~", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("N:(=?Vo", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("z[~.N:(=?Vo", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotNull(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("z9[B~.Mx:(=?Vo");
      assertEquals("z9[B~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Mx:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("z9[B~.Mx:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewListInstance();
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.List", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getCharacterInstance();
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("charValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Character", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Character", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertEquals("Map", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      String string0 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("z9[B~.Mx:(=?Vo", string0);
      assertEquals("z9[B~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Mx:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("z9[B~.Mx:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      List<FullyQualifiedJavaType> list0 = primitiveTypeWrapper0.getTypeArguments();
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("charValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Character", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Character", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(fullyQualifiedJavaType0));
      assertNotNull(list0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType3);
      
      String string1 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("z9[B~.Mx:(=?Vo", string1);
      assertEquals("z9[B~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Mx:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("z9[B~.Mx:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType4);
      
      fullyQualifiedJavaType4.hashCode();
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getObjectInstance();
      assertEquals("Object", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType5);
      
      String string2 = fullyQualifiedJavaType4.getPackageName();
      assertEquals("java.util", string2);
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotNull(string2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("String", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertEquals("java.lang.String", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType6);
      
      fullyQualifiedJavaType1.hashCode();
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.List", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      
      String string3 = fullyQualifiedJavaType5.getFullyQualifiedName();
      assertEquals("java.lang.Object", string3);
      assertEquals("Object", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType6);
      assertNotNull(string3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType7.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertEquals("java.lang.Object", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType7.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType7);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertEquals("boolean", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType8.getPackageName());
      assertTrue(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertEquals("boolean", fullyQualifiedJavaType8.getBaseShortName());
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType8);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType9.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType9.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType9.getPackageName());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotNull(fullyQualifiedJavaType9);
      
      String string4 = fullyQualifiedJavaType1.getBaseShortName();
      assertEquals("List", string4);
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.List", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotNull(string4);
      
      List<String> list1 = fullyQualifiedJavaType0.getImportList();
      assertEquals("z9[B~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Mx:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("z9[B~.Mx:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertFalse(list1.contains(string0));
      assertNotNull(list1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = fullyQualifiedJavaType0.getPrimitiveTypeWrapper();
      assertEquals("z9[B~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Mx:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("z9[B~.Mx:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertNull(primitiveTypeWrapper1);
      
      boolean boolean0 = fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      assertFalse(boolean0);
      assertEquals("z9[B~", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Mx:(=?Vo", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("z9[B~.Mx:(=?Vo", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getNewListInstance();
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType10.getBaseShortName());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertEquals("java.util.List", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType10);
      
      FullyQualifiedJavaType fullyQualifiedJavaType11 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType11.isWildcardType());
      assertFalse(fullyQualifiedJavaType11.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType11.getPackageName());
      assertTrue(fullyQualifiedJavaType11.isArray());
      assertFalse(fullyQualifiedJavaType11.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType11.isPrimitive());
      assertEquals("Object", fullyQualifiedJavaType11.getBaseShortName());
      assertFalse(fullyQualifiedJavaType11.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType11.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType1);
      assertSame(fullyQualifiedJavaType11, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType11, fullyQualifiedJavaType7);
      assertNotNull(fullyQualifiedJavaType11);
      
      FullyQualifiedJavaType fullyQualifiedJavaType12 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType12.isExplicitlyImported());
      assertEquals("Iterator", fullyQualifiedJavaType12.getBaseShortName());
      assertFalse(fullyQualifiedJavaType12.isWildcardType());
      assertFalse(fullyQualifiedJavaType12.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType12.isArray());
      assertEquals("java.util", fullyQualifiedJavaType12.getPackageName());
      assertFalse(fullyQualifiedJavaType12.isPrimitive());
      assertFalse(fullyQualifiedJavaType12.isExtendsBoundedWildcard());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType12.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType12);
      
      FullyQualifiedJavaType fullyQualifiedJavaType13 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType13.isWildcardType());
      assertTrue(fullyQualifiedJavaType13.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType13.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType13.getPackageName());
      assertEquals("Map", fullyQualifiedJavaType13.getBaseShortName());
      assertFalse(fullyQualifiedJavaType13.isPrimitive());
      assertTrue(fullyQualifiedJavaType13.isArray());
      assertFalse(fullyQualifiedJavaType13.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType13.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType5));
      assertTrue(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType13);
      
      FullyQualifiedJavaType fullyQualifiedJavaType14 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType14.isBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType14.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType14.isArray());
      assertFalse(fullyQualifiedJavaType14.isPrimitive());
      assertEquals("Map", fullyQualifiedJavaType14.getBaseShortName());
      assertFalse(fullyQualifiedJavaType14.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType14.getPackageName());
      assertTrue(fullyQualifiedJavaType14.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType14.isWildcardType());
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType10));
      assertTrue(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType10);
      assertNotNull(fullyQualifiedJavaType14);
      
      boolean boolean1 = fullyQualifiedJavaType14.equals(fullyQualifiedJavaType3);
      assertFalse(boolean1);
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType14.isBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType14.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType14.isArray());
      assertFalse(fullyQualifiedJavaType14.isPrimitive());
      assertEquals("Map", fullyQualifiedJavaType14.getBaseShortName());
      assertFalse(fullyQualifiedJavaType14.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType14.getPackageName());
      assertTrue(fullyQualifiedJavaType14.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType14.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType14));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType10));
      assertTrue(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType14);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType10);
      
      FullyQualifiedJavaType fullyQualifiedJavaType15 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType15.isPrimitive());
      assertFalse(fullyQualifiedJavaType15.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType15.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType15.getBaseShortName());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType15.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType15.isWildcardType());
      assertTrue(fullyQualifiedJavaType15.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType15.isArray());
      assertFalse(fullyQualifiedJavaType15.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType10));
      assertTrue(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType14));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType6));
      assertTrue(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType14);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType15);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getCharacterInstance();
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("Character", primitiveTypeWrapper2.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang.Character", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("charValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType16 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType16.isWildcardType());
      assertEquals("int", fullyQualifiedJavaType16.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType16.isExtendsBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType16.getBaseShortName());
      assertFalse(fullyQualifiedJavaType16.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType16.isArray());
      assertEquals("", fullyQualifiedJavaType16.getPackageName());
      assertTrue(fullyQualifiedJavaType16.isPrimitive());
      assertFalse(fullyQualifiedJavaType16.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType14));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType15));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType16.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType14);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType15);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType16, fullyQualifiedJavaType7);
      assertNotNull(fullyQualifiedJavaType16);
      
      FullyQualifiedJavaType fullyQualifiedJavaType17 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType17.isPrimitive());
      assertFalse(fullyQualifiedJavaType17.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType17.isArray());
      assertFalse(fullyQualifiedJavaType17.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType17.getPackageName());
      assertFalse(fullyQualifiedJavaType17.isWildcardType());
      assertFalse(fullyQualifiedJavaType17.isExtendsBoundedWildcard());
      assertEquals("java.lang.String", fullyQualifiedJavaType17.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType17.getBaseShortName());
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType14));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType15));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType16));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType17.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType14);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType15);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType16);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType17, fullyQualifiedJavaType7);
      assertSame(fullyQualifiedJavaType17, fullyQualifiedJavaType6);
      assertNotNull(fullyQualifiedJavaType17);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      primitiveTypeWrapper0.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      
      primitiveTypeWrapper0.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      
      String string0 = primitiveTypeWrapper0.getShortName();
      assertEquals("Boolean<String, String>", string0);
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertNotNull(primitiveTypeWrapper0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("String<boolean, boolean>", string0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = null;
      try {
        fullyQualifiedJavaType2 = new FullyQualifiedJavaType("String<boolean, boolean>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertNotNull(primitiveTypeWrapper0);
      
      boolean boolean0 = primitiveTypeWrapper0.equals(primitiveTypeWrapper0);
      assertTrue(boolean0);
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      
      Object object0 = new Object();
      boolean boolean1 = primitiveTypeWrapper0.equals(object0);
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(boolean1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType(",@\"YsIje8a(n9huXe<");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jmava+lang.Foat");
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertNotNull(primitiveTypeWrapper0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("?", string0);
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(string0);
      
      String string1 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("jmava+lang.Foat", string1);
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = null;
      try {
        fullyQualifiedJavaType1 = new FullyQualifiedJavaType("u9kqCR>>>R;kVY<W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jmava+lang.Foat");
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("byte");
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertEquals("byte", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("byte", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotNull(fullyQualifiedJavaType1);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertFalse(list0.contains("?jmava+lang.Foat"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = new FullyQualifiedJavaType("extends ");
      assertFalse(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("extends", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("extends", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertNotNull(fullyQualifiedJavaType3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?java.dang.Floau");
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.dang.Floau", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("Floau", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.dang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.dang.Floau", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("Floau", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.dang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains("?java.dang.Floau"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jmava+lang.Foat");
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("char");
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("char", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("char", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotNull(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("char");
      assertEquals("char", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("char", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fullyQualifiedJavaType0.equals(object0);
      assertFalse(boolean0);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewListInstance();
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.util.List", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getFullyQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertNotNull(primitiveTypeWrapper0);
      
      primitiveTypeWrapper0.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType1.addTypeArgument(primitiveTypeWrapper0);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType1.getShortName();
      assertEquals("Object<Boolean<String>>", string0);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      fullyQualifiedJavaType1.hashCode();
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      boolean boolean0 = primitiveTypeWrapper0.isWildcardType();
      assertFalse(boolean0);
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = null;
      try {
        fullyQualifiedJavaType2 = new FullyQualifiedJavaType("Object<Boolean<String>>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType1.addTypeArgument(primitiveTypeWrapper0);
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      primitiveTypeWrapper0.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType1.getShortName();
      assertEquals("String<Boolean<Map>>", string0);
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = null;
      try {
        fullyQualifiedJavaType2 = new FullyQualifiedJavaType("String<Boolean<Map>>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("int<String>", string0);
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = null;
      try {
        fullyQualifiedJavaType2 = new FullyQualifiedJavaType("int<String>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jmava+lang.Foat");
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("?", string0);
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("jmava+lang.Foat", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("jmava+lang", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("byte");
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("byte", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("byte", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getIntInstance();
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertEquals("int", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      List<String> list0 = fullyQualifiedJavaType1.getImportList();
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertEquals("int", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(list0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("Iterator", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertEquals("int", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("Iterator", fullyQualifiedJavaType4.getBaseShortName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = new FullyQualifiedJavaType("byte");
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("byte", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType5.isPrimitive());
      assertEquals("", fullyQualifiedJavaType5.getPackageName());
      assertEquals("byte", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("java.lang.Byte", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("Byte", primitiveTypeWrapper1.getBaseShortName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("byteValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      primitiveTypeWrapper0.hashCode();
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertTrue(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType6.getPackageName());
      assertEquals("int", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType6);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getByteInstance();
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("byteValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertEquals("java.lang.Byte", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("Byte", primitiveTypeWrapper2.getBaseShortName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper2);
      
      boolean boolean0 = fullyQualifiedJavaType6.isWildcardType();
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertTrue(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType6.getPackageName());
      assertEquals("int", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      
      boolean boolean1 = fullyQualifiedJavaType0.isWildcardType();
      assertFalse(boolean1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertEquals("HashMap", fullyQualifiedJavaType7.getBaseShortName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType7);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType(",<>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = null;
      try {
        fullyQualifiedJavaType1 = new FullyQualifiedJavaType(",<>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType("wKp<~}`a@s_@K'Rr");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertNotNull(fullyQualifiedJavaType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isWildcardType();
      assertFalse(boolean0);
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = fullyQualifiedJavaType0.equals(object1);
      assertFalse(boolean1);
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?java.lang.Float");
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("byteValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Byte", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Byte", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertNotNull(primitiveTypeWrapper0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getLongInstance();
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang.Long", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("Long", primitiveTypeWrapper1.getBaseShortName());
      assertEquals("longValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("?", string0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertNotNull(string0);
      
      fullyQualifiedJavaType0.hashCode();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      
      boolean boolean0 = fullyQualifiedJavaType0.isWildcardType();
      assertTrue(boolean0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType3);
      
      fullyQualifiedJavaType1.addTypeArgument(fullyQualifiedJavaType3);
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType1.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      
      String string0 = fullyQualifiedJavaType0.toString();
      assertEquals("java.util.Date", string0);
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      String string1 = fullyQualifiedJavaType3.toString();
      assertEquals("boolean", string1);
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewListInstance();
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("List", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("java.util.List", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fullyQualifiedJavaType4.equals(object0);
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("List", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("java.util.List", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      
      int int0 = fullyQualifiedJavaType1.compareTo(fullyQualifiedJavaType0);
      assertEquals(9, int0);
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertEquals("HashMap", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType5);
      
      int int1 = fullyQualifiedJavaType5.compareTo(fullyQualifiedJavaType0);
      assertEquals(4, int1);
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertEquals("HashMap", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(int1 == int0);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      
      String string2 = fullyQualifiedJavaType3.getFullyQualifiedName();
      assertEquals("boolean", string2);
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotNull(string2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getNewListInstance();
      assertEquals("List", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("java.util.List", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType6);
      
      List<FullyQualifiedJavaType> list0 = fullyQualifiedJavaType6.getTypeArguments();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("List", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("java.util.List", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertFalse(list0.contains(fullyQualifiedJavaType3));
      assertNotNull(list0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewListInstance();
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertEquals("java.util.List", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertEquals("List", fullyQualifiedJavaType7.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertTrue(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertTrue(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType7);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = fullyQualifiedJavaType4.getPrimitiveTypeWrapper();
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("List", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("java.util.List", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertTrue(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertTrue(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNull(primitiveTypeWrapper0);
      
      boolean boolean1 = fullyQualifiedJavaType6.isBoundedWildcard();
      assertFalse(boolean1);
      assertEquals("List", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("java.util.List", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertTrue(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getNewListInstance();
      assertTrue(fullyQualifiedJavaType8.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertEquals("List", fullyQualifiedJavaType8.getBaseShortName());
      assertFalse(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType8.getPackageName());
      assertEquals("java.util.List", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertTrue(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertTrue(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotNull(fullyQualifiedJavaType8);
      
      fullyQualifiedJavaType8.addTypeArgument((FullyQualifiedJavaType) null);
      assertTrue(fullyQualifiedJavaType8.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertEquals("List", fullyQualifiedJavaType8.getBaseShortName());
      assertFalse(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType8.getPackageName());
      assertEquals("java.util.List", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("Map", fullyQualifiedJavaType9.getBaseShortName());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType9.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertTrue(fullyQualifiedJavaType9.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertTrue(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType9);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = fullyQualifiedJavaType6.getPrimitiveTypeWrapper();
      assertEquals("List", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("java.util.List", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertTrue(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNull(primitiveTypeWrapper1);
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType8.equals(fullyQualifiedJavaType5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType1.addTypeArgument(primitiveTypeWrapper0);
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = new FullyQualifiedJavaType("long");
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("long", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("long", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertNotNull(fullyQualifiedJavaType4);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("java.lang.Byte", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("Byte", primitiveTypeWrapper1.getBaseShortName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("byteValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      fullyQualifiedJavaType0.hashCode();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getIntInstance();
      assertTrue(fullyQualifiedJavaType5.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType5.getBaseShortName());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType5);
      
      boolean boolean0 = primitiveTypeWrapper1.isWildcardType();
      assertFalse(boolean0);
      assertEquals("java.lang.Byte", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("Byte", primitiveTypeWrapper1.getBaseShortName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("byteValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      
      boolean boolean1 = fullyQualifiedJavaType3.isWildcardType();
      assertFalse(boolean1);
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("HashMap", fullyQualifiedJavaType6.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType6);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType("long");
      assertEquals("long", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("long", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotNull(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?java.lang.Float");
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("java.lang.Byte", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("byteValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Byte", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertNotNull(primitiveTypeWrapper0);
      
      fullyQualifiedJavaType0.hashCode();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      
      boolean boolean0 = fullyQualifiedJavaType0.isWildcardType();
      assertTrue(boolean0);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.Float", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("Iterator", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?java.dang.Floau");
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Floau", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.dang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.dang.Floau", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.hashCode();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Floau", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.dang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.dang.Floau", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertNotNull(primitiveTypeWrapper0);
      
      primitiveTypeWrapper0.addTypeArgument(fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      
      fullyQualifiedJavaType0.addTypeArgument(primitiveTypeWrapper0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getShortName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewMapInstance();
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertTrue(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType2);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertTrue(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.toString();
      assertEquals("java.util.Map<java.util.Map, java.util.Map>", string0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType1.toString();
      assertEquals("java.lang.Object", string0);
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getStringInstance();
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType3);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType2);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertNotNull(primitiveTypeWrapper0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isArray();
      assertTrue(boolean0);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      
      boolean boolean1 = fullyQualifiedJavaType0.isExplicitlyImported();
      assertTrue(boolean1);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      
      String string1 = fullyQualifiedJavaType0.getShortName();
      assertEquals("Map<String>", string1);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotNull(string1);
      
      String string2 = fullyQualifiedJavaType3.toString();
      assertEquals("java.lang.Object<java.util.Map<java.lang.String>>", string2);
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(string2);
      
      boolean boolean2 = fullyQualifiedJavaType0.isPrimitive();
      assertFalse(boolean2);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType4);
      
      List<FullyQualifiedJavaType> list1 = fullyQualifiedJavaType0.getTypeArguments();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertFalse(list1.contains(fullyQualifiedJavaType0));
      assertTrue(list1.contains(fullyQualifiedJavaType2));
      assertNotNull(list1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewListInstance();
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.util.List", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("List", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("intValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("java.lang.Integer", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("Integer", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      primitiveTypeWrapper0.hashCode();
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      
      boolean boolean3 = fullyQualifiedJavaType5.isArray();
      assertTrue(boolean3);
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.util.List", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("List", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(boolean3 == boolean2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      
      boolean boolean4 = fullyQualifiedJavaType2.isWildcardType();
      assertFalse(boolean4);
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType4);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("boolean", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("boolean", fullyQualifiedJavaType6.getBaseShortName());
      assertTrue(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType6);
      
      String string3 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("java.util.Map", string3);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = fullyQualifiedJavaType0.getPrimitiveTypeWrapper();
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNull(primitiveTypeWrapper0);
      
      fullyQualifiedJavaType0.addTypeArgument((FullyQualifiedJavaType) null);
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getShortName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = null;
      try {
        fullyQualifiedJavaType0 = new FullyQualifiedJavaType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getIntegerInstance();
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertNotNull(primitiveTypeWrapper0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("String<boolean, boolean>", string0);
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      fullyQualifiedJavaType1.hashCode();
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = null;
      try {
        fullyQualifiedJavaType2 = new FullyQualifiedJavaType("String<boolean, boolean>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("boolean", string0);
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertEquals("int", fullyQualifiedJavaType3.getBaseShortName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("int", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType3);
      
      String string1 = fullyQualifiedJavaType1.getFullyQualifiedName();
      assertEquals("java.lang.Object", string1);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getFloatInstance();
      assertEquals("floatValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Float", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("Float", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertNotNull(primitiveTypeWrapper0);
      
      String string2 = fullyQualifiedJavaType1.getShortName();
      assertEquals("Object", string2);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotNull(string2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("String", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertEquals("java.lang.String", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType6);
      
      boolean boolean0 = fullyQualifiedJavaType1.equals(fullyQualifiedJavaType4);
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      
      String string3 = fullyQualifiedJavaType4.getShortName();
      assertEquals("boolean<Object>", string3);
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotNull(string3);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("Integer", primitiveTypeWrapper1.getBaseShortName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("intValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      List<String> list0 = fullyQualifiedJavaType4.getImportList();
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      List<String> list1 = fullyQualifiedJavaType1.getImportList();
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(list1.equals((Object)list0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(list1, list0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertFalse(list1.contains(string0));
      assertNotNull(list1);
      
      boolean boolean1 = fullyQualifiedJavaType2.isPrimitive();
      assertFalse(boolean1);
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getDateInstance();
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType7.getBaseShortName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("java.util.Date", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType7);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getByteInstance();
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertEquals("Byte", primitiveTypeWrapper2.getBaseShortName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("byteValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertEquals("java.lang.Byte", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper2);
      
      boolean boolean2 = fullyQualifiedJavaType7.equals(fullyQualifiedJavaType0);
      assertFalse(boolean2);
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType7.getBaseShortName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("java.util.Date", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType8.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType8.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType8.isPrimitive());
      assertEquals("String", fullyQualifiedJavaType8.getBaseShortName());
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType8);
      
      PrimitiveTypeWrapper primitiveTypeWrapper3 = PrimitiveTypeWrapper.getFloatInstance();
      assertTrue(primitiveTypeWrapper3.isArray());
      assertEquals("java.lang", primitiveTypeWrapper3.getPackageName());
      assertEquals("Float", primitiveTypeWrapper3.getBaseShortName());
      assertFalse(primitiveTypeWrapper3.isBoundedWildcard());
      assertEquals("java.lang.Float", primitiveTypeWrapper3.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper3.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper3.isPrimitive());
      assertEquals("floatValue()", primitiveTypeWrapper3.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper3.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.isWildcardType());
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper2));
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper2);
      assertSame(primitiveTypeWrapper3, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper3);
      
      PrimitiveTypeWrapper primitiveTypeWrapper4 = PrimitiveTypeWrapper.getCharacterInstance();
      assertTrue(primitiveTypeWrapper4.isArray());
      assertFalse(primitiveTypeWrapper4.isBoundedWildcard());
      assertEquals("charValue()", primitiveTypeWrapper4.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper4.getPackageName());
      assertFalse(primitiveTypeWrapper4.isExtendsBoundedWildcard());
      assertEquals("Character", primitiveTypeWrapper4.getBaseShortName());
      assertFalse(primitiveTypeWrapper4.isWildcardType());
      assertFalse(primitiveTypeWrapper4.isExplicitlyImported());
      assertEquals("java.lang.Character", primitiveTypeWrapper4.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper4.isPrimitive());
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper3));
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper3);
      assertNotNull(primitiveTypeWrapper4);
      
      boolean boolean3 = fullyQualifiedJavaType4.isBoundedWildcard();
      assertFalse(boolean3);
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType8);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType9.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType9);
      
      String string4 = fullyQualifiedJavaType5.toString();
      assertEquals("java.lang.Object", string4);
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType9);
      assertSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType7);
      assertNotNull(string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = fullyQualifiedJavaType0.equals(object0);
      assertFalse(boolean4);
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType9);
      assertSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      
      String string5 = fullyQualifiedJavaType5.getShortName();
      assertEquals("Object", string5);
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType9);
      assertSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType7);
      assertNotNull(string5);
      
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType10.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType10.getBaseShortName());
      assertFalse(fullyQualifiedJavaType10.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType10);
      
      String string6 = fullyQualifiedJavaType2.getFullyQualifiedName();
      assertEquals("java.util.ArrayList", string6);
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType9);
      assertNotNull(string6);
      
      fullyQualifiedJavaType9.addTypeArgument(fullyQualifiedJavaType7);
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType7.getBaseShortName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("java.util.Date", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType9.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      
      String string7 = fullyQualifiedJavaType7.getBaseQualifiedName();
      assertEquals("java.util.Date", string7);
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType7.getBaseShortName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("java.util.Date", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotNull(string7);
      
      FullyQualifiedJavaType fullyQualifiedJavaType11 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("java.lang", fullyQualifiedJavaType11.getPackageName());
      assertTrue(fullyQualifiedJavaType11.isArray());
      assertFalse(fullyQualifiedJavaType11.isPrimitive());
      assertEquals("String", fullyQualifiedJavaType11.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType11.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType11.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType11.isWildcardType());
      assertFalse(fullyQualifiedJavaType11.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType11.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType0));
      assertSame(fullyQualifiedJavaType11, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType11, fullyQualifiedJavaType6);
      assertSame(fullyQualifiedJavaType11, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType11);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getIntegerInstance();
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertNotNull(primitiveTypeWrapper0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("String<boolean>", string0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util.Date", fullyQualifiedJavaType0.getBaseQualifiedName());
      
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.getShortName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("booleanValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper1.getBaseShortName());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getIntegerInstance();
      assertEquals("intValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertEquals("java.lang.Integer", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("Integer", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper2);
      
      boolean boolean0 = fullyQualifiedJavaType1.isPrimitive();
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(list0);
      
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("java.util.Map<java.lang.Object>", string0);
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      boolean boolean1 = fullyQualifiedJavaType0.isBoundedWildcard();
      assertFalse(boolean1);
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      String string1 = fullyQualifiedJavaType1.getShortName();
      assertEquals("Object", string1);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string1);
      
      boolean boolean2 = primitiveTypeWrapper1.isExplicitlyImported();
      assertFalse(boolean2);
      assertEquals("booleanValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper1.getBaseShortName());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper2));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper2);
      assertSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      
      List<String> list1 = fullyQualifiedJavaType0.getImportList();
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(list1, list0);
      assertFalse(list1.contains(string1));
      assertNotNull(list1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Iterator", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("HashMap", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewListInstance();
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertEquals("List", fullyQualifiedJavaType5.getBaseShortName());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertEquals("java.util.List", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper3 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper3.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper3.getBaseShortName());
      assertFalse(primitiveTypeWrapper3.isWildcardType());
      assertFalse(primitiveTypeWrapper3.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper3.getPackageName());
      assertTrue(primitiveTypeWrapper3.isArray());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper3.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper3.isExplicitlyImported());
      assertEquals("booleanValue()", primitiveTypeWrapper3.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper2));
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper2);
      assertSame(primitiveTypeWrapper3, primitiveTypeWrapper0);
      assertSame(primitiveTypeWrapper3, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getDateInstance();
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertEquals("Date", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("java.util.Date", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType6);
      
      String string2 = primitiveTypeWrapper0.getPackageName();
      assertEquals("java.lang", string2);
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      assertSame(primitiveTypeWrapper0, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper2);
      assertNotNull(string2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getDateInstance();
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertEquals("java.util.Date", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("Date", fullyQualifiedJavaType7.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType7);
      
      int int0 = primitiveTypeWrapper2.compareTo(fullyQualifiedJavaType4);
      assertEquals((-9), int0);
      assertEquals("intValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertEquals("java.lang.Integer", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("Integer", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("HashMap", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      
      boolean boolean3 = fullyQualifiedJavaType1.isPrimitive();
      assertFalse(boolean3);
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      
      String string3 = fullyQualifiedJavaType2.toString();
      assertEquals("java.util.ArrayList", string3);
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotNull(string3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType8.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertEquals("int", fullyQualifiedJavaType8.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType8.getPackageName());
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotNull(fullyQualifiedJavaType8);
      
      List<FullyQualifiedJavaType> list2 = primitiveTypeWrapper0.getTypeArguments();
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper2));
      assertSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      assertSame(primitiveTypeWrapper0, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper2);
      assertFalse(list2.contains(fullyQualifiedJavaType6));
      assertNotNull(list2);
      
      boolean boolean4 = primitiveTypeWrapper0.isExplicitlyImported();
      assertFalse(boolean4);
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper2));
      assertSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      assertSame(primitiveTypeWrapper0, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fullyQualifiedJavaType0.equals(object0);
      assertFalse(boolean0);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType1.getShortName();
      assertEquals("String", string0);
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      fullyQualifiedJavaType1.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string1 = fullyQualifiedJavaType0.getShortName();
      assertEquals("int", string1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string1);
      
      boolean boolean1 = fullyQualifiedJavaType1.equals(fullyQualifiedJavaType0);
      assertFalse(boolean1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getFloatInstance();
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Float", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("java.lang.Float", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("floatValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getCharacterInstance();
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("charValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("Character", primitiveTypeWrapper2.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang.Character", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper2);
      
      String string2 = fullyQualifiedJavaType1.getFullyQualifiedName();
      assertEquals("java.lang.String<int>", string2);
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string2);
      
      PrimitiveTypeWrapper primitiveTypeWrapper3 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("byteValue()", primitiveTypeWrapper3.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper3.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper3.isWildcardType());
      assertEquals("java.lang.Byte", primitiveTypeWrapper3.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper3.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.isBoundedWildcard());
      assertEquals("Byte", primitiveTypeWrapper3.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper3.getPackageName());
      assertTrue(primitiveTypeWrapper3.isArray());
      assertFalse(primitiveTypeWrapper3.isPrimitive());
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper3);
      
      boolean boolean2 = fullyQualifiedJavaType0.isWildcardType();
      assertFalse(boolean2);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      String string3 = fullyQualifiedJavaType0.getBaseShortName();
      assertEquals("int", string3);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string3);
      
      String string4 = fullyQualifiedJavaType0.getPackageName();
      assertEquals("", string4);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string4);
      
      boolean boolean3 = primitiveTypeWrapper2.isArray();
      assertTrue(boolean3);
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("charValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("Character", primitiveTypeWrapper2.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang.Character", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper3));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      boolean boolean4 = primitiveTypeWrapper0.isPrimitive();
      assertFalse(boolean4);
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(boolean4 == boolean3);
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper3));
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper2));
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = new FullyQualifiedJavaType("");
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotNull(fullyQualifiedJavaType4);
      
      boolean boolean5 = fullyQualifiedJavaType3.equals(fullyQualifiedJavaType4);
      assertFalse(boolean5);
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertEquals("", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(boolean5 == boolean3);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      
      PrimitiveTypeWrapper primitiveTypeWrapper4 = fullyQualifiedJavaType2.getPrimitiveTypeWrapper();
      assertEquals("ArrayList", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNull(primitiveTypeWrapper4);
      
      primitiveTypeWrapper1.addTypeArgument((FullyQualifiedJavaType) null);
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("Float", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("java.lang.Float", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("floatValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      int int0 = fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      assertEquals(0, int0);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType1.getShortName();
      assertEquals("HashMap", string0);
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getIntegerInstance();
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertNotNull(primitiveTypeWrapper0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      String string1 = fullyQualifiedJavaType0.getBaseShortName();
      assertEquals("HashMap", string1);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getIntInstance();
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("int", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType3);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getByteInstance();
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("Byte", primitiveTypeWrapper1.getBaseShortName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("byteValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang.Byte", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      String string2 = fullyQualifiedJavaType1.getBaseShortName();
      assertEquals("HashMap", string2);
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotNull(string2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType4);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getDoubleInstance();
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("Double", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertEquals("java.lang.Double", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("doubleValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper2);
      
      boolean boolean0 = primitiveTypeWrapper0.isExplicitlyImported();
      assertFalse(boolean0);
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper2));
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper2);
      
      fullyQualifiedJavaType1.addTypeArgument(fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      
      boolean boolean1 = fullyQualifiedJavaType2.isArray();
      assertTrue(boolean1);
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(boolean1 == boolean0);
      assertSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      
      boolean boolean2 = fullyQualifiedJavaType3.isExtendsBoundedWildcard();
      assertFalse(boolean2);
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("int", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(boolean2 == boolean1);
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType5);
      
      int int1 = fullyQualifiedJavaType5.compareTo((FullyQualifiedJavaType) primitiveTypeWrapper2);
      assertEquals(9, int1);
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("Double", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertEquals("java.lang.Double", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("doubleValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(int1 == int0);
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      
      boolean boolean3 = fullyQualifiedJavaType1.isBoundedWildcard();
      assertFalse(boolean3);
      assertEquals("HashMap", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType5));
      assertFalse(boolean3 == boolean1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType6);
      
      String string3 = fullyQualifiedJavaType2.getFullyQualifiedName();
      assertEquals("boolean", string3);
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotNull(string3);
      
      int int2 = fullyQualifiedJavaType6.compareTo((FullyQualifiedJavaType) primitiveTypeWrapper1);
      assertEquals(13, int2);
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("Byte", primitiveTypeWrapper1.getBaseShortName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("byteValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang.Byte", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertFalse(fullyQualifiedJavaType7.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType7.getPackageName());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.lang.Object", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType7.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType7);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType8.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType8.getPackageName());
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotNull(fullyQualifiedJavaType8);
      
      List<String> list1 = fullyQualifiedJavaType7.getImportList();
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertFalse(fullyQualifiedJavaType7.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType7.getPackageName());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.lang.Object", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType7.getBaseShortName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType8));
      assertFalse(list1.equals((Object)list0));
      assertSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType8);
      assertNotSame(list1, list0);
      assertFalse(list1.contains(string3));
      assertNotNull(list1);
      
      boolean boolean4 = fullyQualifiedJavaType0.equals(fullyQualifiedJavaType2);
      assertFalse(boolean4);
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("boolean", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(boolean4 == boolean1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType8);
      assertSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("java.lang.String", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType9.getBaseShortName());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotNull(fullyQualifiedJavaType9);
      
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertEquals("HashMap", fullyQualifiedJavaType10.getBaseShortName());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType10);
      
      int int3 = fullyQualifiedJavaType6.compareTo((FullyQualifiedJavaType) primitiveTypeWrapper0);
      assertEquals(6, int3);
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType10));
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType10);
      assertSame(fullyQualifiedJavaType6, fullyQualifiedJavaType7);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType11 = FullyQualifiedJavaType.getDateInstance();
      assertTrue(fullyQualifiedJavaType11.isArray());
      assertFalse(fullyQualifiedJavaType11.isBoundedWildcard());
      assertEquals("Date", fullyQualifiedJavaType11.getBaseShortName());
      assertFalse(fullyQualifiedJavaType11.isPrimitive());
      assertFalse(fullyQualifiedJavaType11.isExtendsBoundedWildcard());
      assertEquals("java.util.Date", fullyQualifiedJavaType11.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType11.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType11.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType11.getPackageName());
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType11);
      
      int int4 = fullyQualifiedJavaType6.compareTo(fullyQualifiedJavaType10);
      assertEquals((-9), int4);
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.lang.Object", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertEquals("HashMap", fullyQualifiedJavaType10.getBaseShortName());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType11));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType10);
      assertSame(fullyQualifiedJavaType6, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType11);
      
      FullyQualifiedJavaType fullyQualifiedJavaType12 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType12.isWildcardType());
      assertFalse(fullyQualifiedJavaType12.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType12.isArray());
      assertFalse(fullyQualifiedJavaType12.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType12.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType12.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType12.getPackageName());
      assertTrue(fullyQualifiedJavaType12.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType12.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType6));
      assertTrue(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType11));
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType11);
      assertNotNull(fullyQualifiedJavaType12);
      
      fullyQualifiedJavaType12.addTypeArgument(fullyQualifiedJavaType4);
      assertFalse(fullyQualifiedJavaType12.isWildcardType());
      assertFalse(fullyQualifiedJavaType12.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType12.isArray());
      assertFalse(fullyQualifiedJavaType12.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType12.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType12.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType12.getPackageName());
      assertTrue(fullyQualifiedJavaType12.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType12.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType8);
      
      List<String> list2 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType9));
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType9);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.contains(string3));
      assertNotNull(list2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType13 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("String", fullyQualifiedJavaType13.getBaseShortName());
      assertFalse(fullyQualifiedJavaType13.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType13.isPrimitive());
      assertFalse(fullyQualifiedJavaType13.isWildcardType());
      assertFalse(fullyQualifiedJavaType13.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType13.isArray());
      assertFalse(fullyQualifiedJavaType13.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType13.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType13.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType11));
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType1);
      assertSame(fullyQualifiedJavaType13, fullyQualifiedJavaType8);
      assertSame(fullyQualifiedJavaType13, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType13);
      
      FullyQualifiedJavaType fullyQualifiedJavaType14 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType14.getBaseShortName());
      assertTrue(fullyQualifiedJavaType14.isPrimitive());
      assertEquals("", fullyQualifiedJavaType14.getPackageName());
      assertFalse(fullyQualifiedJavaType14.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType14.isWildcardType());
      assertFalse(fullyQualifiedJavaType14.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType14.isArray());
      assertEquals("boolean", fullyQualifiedJavaType14.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType14.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType14.equals((Object)fullyQualifiedJavaType9));
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType14, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType14, fullyQualifiedJavaType11);
      assertSame(fullyQualifiedJavaType14, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType14);
      
      PrimitiveTypeWrapper primitiveTypeWrapper3 = fullyQualifiedJavaType13.getPrimitiveTypeWrapper();
      assertEquals("String", fullyQualifiedJavaType13.getBaseShortName());
      assertFalse(fullyQualifiedJavaType13.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType13.isPrimitive());
      assertFalse(fullyQualifiedJavaType13.isWildcardType());
      assertFalse(fullyQualifiedJavaType13.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType13.isArray());
      assertFalse(fullyQualifiedJavaType13.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType13.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType13.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType14));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType13.equals((Object)fullyQualifiedJavaType11));
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType1);
      assertSame(fullyQualifiedJavaType13, fullyQualifiedJavaType8);
      assertSame(fullyQualifiedJavaType13, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType14);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType13, fullyQualifiedJavaType5);
      assertNull(primitiveTypeWrapper3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType15 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType15.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType15.isArray());
      assertEquals("boolean", fullyQualifiedJavaType15.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType15.getPackageName());
      assertFalse(fullyQualifiedJavaType15.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType15.isWildcardType());
      assertFalse(fullyQualifiedJavaType15.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType15.getBaseShortName());
      assertTrue(fullyQualifiedJavaType15.isPrimitive());
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType13));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType15.equals((Object)fullyQualifiedJavaType10));
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType13);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType1);
      assertSame(fullyQualifiedJavaType15, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType7);
      assertSame(fullyQualifiedJavaType15, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType15, fullyQualifiedJavaType14);
      assertNotSame(fullyQualifiedJavaType15, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType15);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      assertEquals("Object", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertNotNull(fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertNotNull(primitiveTypeWrapper0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = new FullyQualifiedJavaType(">");
      assertFalse(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals(">", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals(">", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("Object", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      List<FullyQualifiedJavaType> list0 = fullyQualifiedJavaType0.getTypeArguments();
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertFalse(list0.contains(fullyQualifiedJavaType2));
      assertNotNull(list0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      assertFalse(boolean0);
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType1.getShortName();
      assertEquals("Map", string0);
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang.Short", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("shortValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("Short", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertNotNull(primitiveTypeWrapper0);
      
      String string1 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("java.util.Map", string1);
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getDoubleInstance();
      assertEquals("java.lang.Double", primitiveTypeWrapper1.getBaseQualifiedName());
      assertEquals("doubleValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("Double", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      boolean boolean1 = fullyQualifiedJavaType2.isArray();
      assertTrue(boolean1);
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType1.hashCode();
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      int int0 = fullyQualifiedJavaType2.compareTo(fullyQualifiedJavaType0);
      assertEquals((-5), int0);
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType3);
      
      int int1 = fullyQualifiedJavaType3.hashCode();
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(int1 == int0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType4.getPackageName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertTrue(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertTrue(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType5.getBaseShortName());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType5);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getStringInstance();
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertEquals("java.lang.String", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType6);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertEquals("shortValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("Short", primitiveTypeWrapper2.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("java.lang.Short", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewListInstance();
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util.List", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType7.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType7);
      
      fullyQualifiedJavaType7.addTypeArgument(fullyQualifiedJavaType2);
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertEquals("java.util.List", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("List", fullyQualifiedJavaType7.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertTrue(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertTrue(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertTrue(fullyQualifiedJavaType8.isExplicitlyImported());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertEquals("ArrayList", fullyQualifiedJavaType8.getBaseShortName());
      assertFalse(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType8.getPackageName());
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertTrue(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType8);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertEquals("java.lang.String", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType9.getBaseShortName());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType9);
      
      String string2 = fullyQualifiedJavaType1.toString();
      assertEquals("java.util.Map", string2);
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType4));
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotNull(string2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType10.getBaseShortName());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType10.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType10);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType1.toString();
      assertEquals("java.lang.Object", string0);
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getObjectInstance();
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType3);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType2);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertNotNull(primitiveTypeWrapper0);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isArray();
      assertTrue(boolean0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      
      boolean boolean1 = fullyQualifiedJavaType0.isExplicitlyImported();
      assertTrue(boolean1);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      
      String string1 = fullyQualifiedJavaType0.getShortName();
      assertEquals("Map<String>", string1);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotNull(string1);
      
      String string2 = fullyQualifiedJavaType3.toString();
      assertEquals("java.lang.Object<java.util.Map<java.lang.String>>", string2);
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(string2);
      
      boolean boolean2 = fullyQualifiedJavaType0.isPrimitive();
      assertFalse(boolean2);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType4);
      
      List<FullyQualifiedJavaType> list1 = fullyQualifiedJavaType0.getTypeArguments();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertFalse(list1.contains(fullyQualifiedJavaType4));
      assertTrue(list1.contains(fullyQualifiedJavaType2));
      assertNotNull(list1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewListInstance();
      assertEquals("List", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertEquals("java.util.List", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("intValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      primitiveTypeWrapper0.hashCode();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("booleanValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper0, primitiveTypeWrapper1);
      
      boolean boolean3 = fullyQualifiedJavaType2.isArray();
      assertTrue(boolean3);
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(boolean3 == boolean2);
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      boolean boolean4 = fullyQualifiedJavaType5.isWildcardType();
      assertFalse(boolean4);
      assertEquals("List", fullyQualifiedJavaType5.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertEquals("java.util.List", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType2);
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("boolean", fullyQualifiedJavaType6.getBaseShortName());
      assertTrue(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType6);
      
      List<String> list2 = fullyQualifiedJavaType6.getImportList();
      assertEquals("boolean", fullyQualifiedJavaType6.getBaseShortName());
      assertTrue(fullyQualifiedJavaType6.isPrimitive());
      assertEquals("", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(list2, list0);
      assertFalse(list2.contains(string1));
      assertNotNull(list2);
      
      String string3 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("java.util.Map", string3);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotNull(string3);
      
      String string4 = fullyQualifiedJavaType1.toString();
      assertEquals("java.lang.Object<java.util.Map<java.lang.String>, java.lang.String>", string4);
      assertEquals("Object", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string4);
      
      int int0 = primitiveTypeWrapper1.compareTo(fullyQualifiedJavaType3);
      assertEquals((-6), int0);
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("intValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType3.getPackageName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("Object", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType6);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fullyQualifiedJavaType0.equals(object0);
      assertFalse(boolean0);
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("HashMap", string0);
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(string0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getCharacterInstance();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Character", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertEquals("charValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("java.lang.Character", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertNotNull(primitiveTypeWrapper0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getLongInstance();
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("longValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("Long", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang.Long", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      String string1 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("java.util.HashMap", string1);
      assertEquals("java.util.HashMap", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("int", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getFloatInstance();
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("Float", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("floatValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertEquals("java.lang.Float", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      fullyQualifiedJavaType2.addTypeArgument(primitiveTypeWrapper1);
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("longValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("Long", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang.Long", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType2.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper2));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper2);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType3);
      
      boolean boolean1 = fullyQualifiedJavaType1.isPrimitive();
      assertTrue(boolean1);
      assertEquals("int", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper3 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper3.isWildcardType());
      assertEquals("intValue()", primitiveTypeWrapper3.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper3.isPrimitive());
      assertFalse(primitiveTypeWrapper3.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper3.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper3.getBaseQualifiedName());
      assertEquals("Integer", primitiveTypeWrapper3.getBaseShortName());
      assertTrue(primitiveTypeWrapper3.isArray());
      assertFalse(primitiveTypeWrapper3.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getDateInstance();
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.util.Date", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Date", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType6);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = fullyQualifiedJavaType6.equals(object1);
      assertFalse(boolean2);
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.util.Date", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Date", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotSame(object1, object0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper4 = PrimitiveTypeWrapper.getDoubleInstance();
      assertFalse(primitiveTypeWrapper4.isWildcardType());
      assertTrue(primitiveTypeWrapper4.isArray());
      assertFalse(primitiveTypeWrapper4.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper4.getPackageName());
      assertFalse(primitiveTypeWrapper4.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper4.isPrimitive());
      assertFalse(primitiveTypeWrapper4.isExplicitlyImported());
      assertEquals("Double", primitiveTypeWrapper4.getBaseShortName());
      assertEquals("java.lang.Double", primitiveTypeWrapper4.getBaseQualifiedName());
      assertEquals("doubleValue()", primitiveTypeWrapper4.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper3));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper4);
      
      String string2 = fullyQualifiedJavaType6.getPackageName();
      assertEquals("java.util", string2);
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertEquals("java.util.Date", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("Date", fullyQualifiedJavaType6.getBaseShortName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotNull(string2);
      
      String string3 = fullyQualifiedJavaType4.getShortName();
      assertEquals("boolean", string3);
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotNull(string3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewListInstance();
      assertEquals("java.util.List", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType7.isPrimitive());
      assertEquals("List", fullyQualifiedJavaType7.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertEquals("java.util", fullyQualifiedJavaType7.getPackageName());
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType7);
      
      String string4 = primitiveTypeWrapper1.getBaseQualifiedName();
      assertEquals("java.lang.Long", string4);
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertEquals("longValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("Long", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertEquals("java.lang.Long", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper3));
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper4);
      assertNotNull(string4);
      
      String string5 = primitiveTypeWrapper2.getBaseQualifiedName();
      assertEquals("java.lang.Float", string5);
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertEquals("Float", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("floatValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertEquals("java.lang.Float", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper3));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper4));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper4);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotNull(string5);
      
      boolean boolean3 = fullyQualifiedJavaType4.isWildcardType();
      assertFalse(boolean3);
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertTrue(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertEquals("boolean", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(boolean3 == boolean1);
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType8.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertEquals("int", fullyQualifiedJavaType8.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType8.getPackageName());
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType8);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertEquals("java.lang.Object", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType9.getBaseShortName());
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotNull(fullyQualifiedJavaType9);
      
      String string6 = primitiveTypeWrapper3.toString();
      assertEquals("java.lang.Integer", string6);
      assertFalse(primitiveTypeWrapper3.isWildcardType());
      assertEquals("intValue()", primitiveTypeWrapper3.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper3.isPrimitive());
      assertFalse(primitiveTypeWrapper3.isExplicitlyImported());
      assertEquals("java.lang", primitiveTypeWrapper3.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper3.getBaseQualifiedName());
      assertEquals("Integer", primitiveTypeWrapper3.getBaseShortName());
      assertTrue(primitiveTypeWrapper3.isArray());
      assertFalse(primitiveTypeWrapper3.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper4));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper4);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper0);
      assertNotNull(string6);
      
      boolean boolean4 = fullyQualifiedJavaType5.equals(fullyQualifiedJavaType3);
      assertFalse(boolean4);
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseShortName());
      assertTrue(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("boolean", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(boolean4 == boolean1);
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType7));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType9);
      assertSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType7);
      
      boolean boolean5 = fullyQualifiedJavaType9.isExtendsBoundedWildcard();
      assertFalse(boolean5);
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertEquals("java.lang.Object", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType9.getBaseShortName());
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(boolean5 == boolean1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertEquals("boolean", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType10.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType10.isPrimitive());
      assertEquals("boolean", fullyQualifiedJavaType10.getBaseShortName());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotNull(fullyQualifiedJavaType10);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertTrue(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType1);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("java.util.ArrayList<java.util.ArrayList>", string0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("int", string0);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("Object", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType2);
      
      boolean boolean0 = fullyQualifiedJavaType2.isPrimitive();
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("Object", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = fullyQualifiedJavaType0.getPrimitiveTypeWrapper();
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotNull(primitiveTypeWrapper0);
      
      primitiveTypeWrapper0.hashCode();
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("intValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertEquals("java.lang.Integer", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      
      boolean boolean1 = fullyQualifiedJavaType0.isBoundedWildcard();
      assertFalse(boolean1);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      
      String string1 = fullyQualifiedJavaType2.getBaseShortName();
      assertEquals("Object", string1);
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertEquals("java.lang.Object", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("Object", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotNull(string1);
      
      String string2 = fullyQualifiedJavaType1.toString();
      assertEquals("java.util.ArrayList", string2);
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(string2);
      
      String string3 = fullyQualifiedJavaType0.getShortName();
      assertEquals("int", string3);
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotNull(string3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType3.getBaseShortName());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isPrimitive());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType1.getBaseShortName());
      assertSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertNotNull(fullyQualifiedJavaType0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isWildcardType();
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isArray());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("aVjH-=JQ8#q}R");
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("aVjH-=JQ8#q}R", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("aVjH-=JQ8#q}R", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getByteInstance();
      assertEquals("byteValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Byte", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("Byte", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertNotNull(primitiveTypeWrapper0);
      
      String string0 = primitiveTypeWrapper0.getBaseShortName();
      assertEquals("Byte", string0);
      assertEquals("byteValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("java.lang.Byte", primitiveTypeWrapper0.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("Byte", primitiveTypeWrapper0.getBaseShortName());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("");
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("", string0);
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertNotNull(string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewMapInstance();
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertEquals("java.util.Map", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getIntInstance();
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getCharacterInstance();
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertEquals("charValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertEquals("Character", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("java.lang.Character", primitiveTypeWrapper0.getBaseQualifiedName());
      assertNotNull(primitiveTypeWrapper0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertEquals("java.lang.Short", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertEquals("Short", primitiveTypeWrapper1.getBaseShortName());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("shortValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      List<String> list0 = fullyQualifiedJavaType2.getImportList();
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang.Integer", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("intValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("Integer", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper2);
      
      String string1 = fullyQualifiedJavaType0.getPackageName();
      assertEquals("", string1);
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("ArrayList", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("", fullyQualifiedJavaType5.getPackageName());
      assertFalse(fullyQualifiedJavaType5.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType5.isPrimitive());
      assertFalse(fullyQualifiedJavaType5.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType5.isWildcardType());
      assertTrue(fullyQualifiedJavaType5.isArray());
      assertEquals("boolean", fullyQualifiedJavaType5.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType5.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType5.getBaseShortName());
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType5, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType5);
      
      PrimitiveTypeWrapper primitiveTypeWrapper3 = PrimitiveTypeWrapper.getCharacterInstance();
      assertEquals("charValue()", primitiveTypeWrapper3.getToPrimitiveMethod());
      assertEquals("java.lang", primitiveTypeWrapper3.getPackageName());
      assertFalse(primitiveTypeWrapper3.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper3.isPrimitive());
      assertFalse(primitiveTypeWrapper3.isWildcardType());
      assertEquals("java.lang.Character", primitiveTypeWrapper3.getBaseQualifiedName());
      assertEquals("Character", primitiveTypeWrapper3.getBaseShortName());
      assertFalse(primitiveTypeWrapper3.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper3.isBoundedWildcard());
      assertTrue(primitiveTypeWrapper3.isArray());
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper3.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper3, primitiveTypeWrapper1);
      assertSame(primitiveTypeWrapper3, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper3);
      
      boolean boolean0 = fullyQualifiedJavaType0.equals(fullyQualifiedJavaType3);
      assertFalse(boolean0);
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("ArrayList", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertTrue(fullyQualifiedJavaType6.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType6.isBoundedWildcard());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType6.getBaseQualifiedName());
      assertEquals("HashMap", fullyQualifiedJavaType6.getBaseShortName());
      assertTrue(fullyQualifiedJavaType6.isArray());
      assertFalse(fullyQualifiedJavaType6.isPrimitive());
      assertFalse(fullyQualifiedJavaType6.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType6.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType6.getPackageName());
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType6.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType6, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType6);
      
      PrimitiveTypeWrapper primitiveTypeWrapper4 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper4.isWildcardType());
      assertFalse(primitiveTypeWrapper4.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper4.getBaseShortName());
      assertEquals("booleanValue()", primitiveTypeWrapper4.getToPrimitiveMethod());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper4.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper4.isExtendsBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper4.getPackageName());
      assertTrue(primitiveTypeWrapper4.isArray());
      assertFalse(primitiveTypeWrapper4.isPrimitive());
      assertFalse(primitiveTypeWrapper4.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper3));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper4.equals((Object)primitiveTypeWrapper1));
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper4, primitiveTypeWrapper1);
      assertNotNull(primitiveTypeWrapper4);
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertEquals("", fullyQualifiedJavaType7.getPackageName());
      assertFalse(fullyQualifiedJavaType7.isExplicitlyImported());
      assertEquals("boolean", fullyQualifiedJavaType7.getBaseShortName());
      assertFalse(fullyQualifiedJavaType7.isWildcardType());
      assertTrue(fullyQualifiedJavaType7.isPrimitive());
      assertTrue(fullyQualifiedJavaType7.isArray());
      assertFalse(fullyQualifiedJavaType7.isExtendsBoundedWildcard());
      assertEquals("boolean", fullyQualifiedJavaType7.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType7.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType7.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType7, fullyQualifiedJavaType0);
      assertSame(fullyQualifiedJavaType7, fullyQualifiedJavaType5);
      assertNotNull(fullyQualifiedJavaType7);
      
      FullyQualifiedJavaType fullyQualifiedJavaType8 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType8.isWildcardType());
      assertTrue(fullyQualifiedJavaType8.isExplicitlyImported());
      assertEquals("java.util.Map", fullyQualifiedJavaType8.getBaseQualifiedName());
      assertEquals("Map", fullyQualifiedJavaType8.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType8.getPackageName());
      assertFalse(fullyQualifiedJavaType8.isPrimitive());
      assertFalse(fullyQualifiedJavaType8.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType8.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType8.isArray());
      assertTrue(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType8.equals((Object)fullyQualifiedJavaType3));
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType8, fullyQualifiedJavaType3);
      assertNotNull(fullyQualifiedJavaType8);
      
      PrimitiveTypeWrapper primitiveTypeWrapper5 = PrimitiveTypeWrapper.getBooleanInstance();
      assertFalse(primitiveTypeWrapper5.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper5.isExtendsBoundedWildcard());
      assertEquals("java.lang.Boolean", primitiveTypeWrapper5.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper5.isBoundedWildcard());
      assertEquals("Boolean", primitiveTypeWrapper5.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper5.getPackageName());
      assertTrue(primitiveTypeWrapper5.isArray());
      assertFalse(primitiveTypeWrapper5.isWildcardType());
      assertFalse(primitiveTypeWrapper5.isPrimitive());
      assertEquals("booleanValue()", primitiveTypeWrapper5.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper5.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper5.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper5.equals((Object)primitiveTypeWrapper2));
      assertFalse(primitiveTypeWrapper5.equals((Object)primitiveTypeWrapper3));
      assertNotSame(primitiveTypeWrapper5, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper5, primitiveTypeWrapper0);
      assertSame(primitiveTypeWrapper5, primitiveTypeWrapper4);
      assertNotSame(primitiveTypeWrapper5, primitiveTypeWrapper2);
      assertNotSame(primitiveTypeWrapper5, primitiveTypeWrapper3);
      assertNotNull(primitiveTypeWrapper5);
      
      boolean boolean1 = fullyQualifiedJavaType0.isArray();
      assertFalse(boolean1);
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      String string2 = fullyQualifiedJavaType2.getPackageName();
      assertEquals("", string2);
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(string2);
      
      String string3 = fullyQualifiedJavaType2.getBaseShortName();
      assertEquals("int", string3);
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(string3);
      
      FullyQualifiedJavaType fullyQualifiedJavaType9 = FullyQualifiedJavaType.getStringInstance();
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType9.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType9);
      
      String string4 = fullyQualifiedJavaType9.getFullyQualifiedName();
      assertEquals("java.lang.String", string4);
      assertFalse(fullyQualifiedJavaType9.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType9.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType9.isPrimitive());
      assertTrue(fullyQualifiedJavaType9.isArray());
      assertFalse(fullyQualifiedJavaType9.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType9.getPackageName());
      assertFalse(fullyQualifiedJavaType9.isWildcardType());
      assertEquals("String", fullyQualifiedJavaType9.getBaseShortName());
      assertEquals("java.lang.String", fullyQualifiedJavaType9.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType9.equals((Object)fullyQualifiedJavaType2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType9, fullyQualifiedJavaType2);
      assertNotNull(string4);
      
      boolean boolean2 = fullyQualifiedJavaType4.isExplicitlyImported();
      assertFalse(boolean2);
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType10 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertEquals("HashMap", fullyQualifiedJavaType10.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotNull(fullyQualifiedJavaType10);
      
      boolean boolean3 = fullyQualifiedJavaType10.equals(fullyQualifiedJavaType4);
      assertFalse(boolean3);
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertEquals("HashMap", fullyQualifiedJavaType10.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      
      boolean boolean4 = fullyQualifiedJavaType10.equals(list0);
      assertFalse(boolean4);
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertEquals("HashMap", fullyQualifiedJavaType10.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
      assertFalse(list0.contains(string4));
      
      FullyQualifiedJavaType fullyQualifiedJavaType11 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertFalse(fullyQualifiedJavaType11.isBoundedWildcard());
      assertEquals("Iterator", fullyQualifiedJavaType11.getBaseShortName());
      assertFalse(fullyQualifiedJavaType11.isWildcardType());
      assertTrue(fullyQualifiedJavaType11.isExplicitlyImported());
      assertEquals("java.util.Iterator", fullyQualifiedJavaType11.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType11.getPackageName());
      assertFalse(fullyQualifiedJavaType11.isPrimitive());
      assertFalse(fullyQualifiedJavaType11.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType11.isArray());
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType11.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType11, fullyQualifiedJavaType8);
      assertNotNull(fullyQualifiedJavaType11);
      
      boolean boolean5 = fullyQualifiedJavaType3.isBoundedWildcard();
      assertFalse(boolean5);
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("ArrayList", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      
      boolean boolean6 = primitiveTypeWrapper2.isWildcardType();
      assertFalse(boolean6);
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertEquals("java.lang.Integer", primitiveTypeWrapper2.getBaseQualifiedName());
      assertEquals("intValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("Integer", primitiveTypeWrapper2.getBaseShortName());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper4));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper3));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper5));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper4);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper3);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper5);
      
      boolean boolean7 = fullyQualifiedJavaType0.isWildcardType();
      assertFalse(boolean7);
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isArray());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType12 = FullyQualifiedJavaType.getNewHashMapInstance();
      assertFalse(fullyQualifiedJavaType12.isPrimitive());
      assertFalse(fullyQualifiedJavaType12.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType12.getPackageName());
      assertEquals("HashMap", fullyQualifiedJavaType12.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType12.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType12.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType12.isWildcardType());
      assertFalse(fullyQualifiedJavaType12.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType12.isArray());
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType9));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType8));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType7));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType4));
      assertTrue(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType10));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType0));
      assertTrue(fullyQualifiedJavaType12.equals((Object)fullyQualifiedJavaType6));
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType8);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType10);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType12, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType12);
      
      boolean boolean8 = fullyQualifiedJavaType10.isExtendsBoundedWildcard();
      assertFalse(boolean8);
      assertFalse(fullyQualifiedJavaType10.isWildcardType());
      assertTrue(fullyQualifiedJavaType10.isExplicitlyImported());
      assertEquals("HashMap", fullyQualifiedJavaType10.getBaseShortName());
      assertEquals("java.util.HashMap", fullyQualifiedJavaType10.getBaseQualifiedName());
      assertEquals("java.util", fullyQualifiedJavaType10.getPackageName());
      assertFalse(fullyQualifiedJavaType10.isPrimitive());
      assertTrue(fullyQualifiedJavaType10.isArray());
      assertFalse(fullyQualifiedJavaType10.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType7));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType12));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType5));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType11));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType9));
      assertTrue(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType6));
      assertFalse(fullyQualifiedJavaType10.equals((Object)fullyQualifiedJavaType8));
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType7);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType6);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType5);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType12);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType11);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType9);
      assertNotSame(fullyQualifiedJavaType10, fullyQualifiedJavaType8);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertNotNull(fullyQualifiedJavaType0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isBoundedWildcard();
      assertFalse(boolean0);
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.lang.String", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.hashCode();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType1.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType1.isArray());
      assertFalse(fullyQualifiedJavaType1.isPrimitive());
      assertEquals("java.lang", fullyQualifiedJavaType1.getPackageName());
      assertEquals("String", fullyQualifiedJavaType1.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType1.isWildcardType());
      assertFalse(fullyQualifiedJavaType1.equals((Object)fullyQualifiedJavaType0));
      assertNotSame(fullyQualifiedJavaType1, fullyQualifiedJavaType0);
      assertNotNull(fullyQualifiedJavaType1);
      
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("java.util.ArrayList", string0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string0);
      
      boolean boolean0 = fullyQualifiedJavaType0.isExplicitlyImported();
      assertTrue(boolean0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      
      String string1 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("java.util.ArrayList", string1);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotNull(string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getIntInstance();
      assertTrue(fullyQualifiedJavaType2.isPrimitive());
      assertEquals("int", fullyQualifiedJavaType2.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType2.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType2.isArray());
      assertEquals("", fullyQualifiedJavaType2.getPackageName());
      assertEquals("int", fullyQualifiedJavaType2.getBaseShortName());
      assertFalse(fullyQualifiedJavaType2.isExtendsBoundedWildcard());
      assertFalse(fullyQualifiedJavaType2.isWildcardType());
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType2.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType2, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewMapInstance();
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertEquals("Map", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("java.util.Map", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      assertNotNull(fullyQualifiedJavaType3);
      
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getDoubleInstance();
      assertFalse(primitiveTypeWrapper0.isWildcardType());
      assertEquals("java.lang.Double", primitiveTypeWrapper0.getBaseQualifiedName());
      assertEquals("doubleValue()", primitiveTypeWrapper0.getToPrimitiveMethod());
      assertTrue(primitiveTypeWrapper0.isArray());
      assertEquals("java.lang", primitiveTypeWrapper0.getPackageName());
      assertFalse(primitiveTypeWrapper0.isBoundedWildcard());
      assertEquals("Double", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(primitiveTypeWrapper0.isPrimitive());
      assertFalse(primitiveTypeWrapper0.isExtendsBoundedWildcard());
      assertNotNull(primitiveTypeWrapper0);
      
      fullyQualifiedJavaType3.addTypeArgument(fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType3.isExtendsBoundedWildcard());
      assertEquals("java.util", fullyQualifiedJavaType3.getPackageName());
      assertEquals("Map", fullyQualifiedJavaType3.getBaseShortName());
      assertFalse(fullyQualifiedJavaType3.isPrimitive());
      assertEquals("java.util.Map", fullyQualifiedJavaType3.getBaseQualifiedName());
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType3.isWildcardType());
      assertTrue(fullyQualifiedJavaType3.isArray());
      assertFalse(fullyQualifiedJavaType3.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType3.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType3, fullyQualifiedJavaType2);
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getObjectInstance();
      assertFalse(fullyQualifiedJavaType4.isBoundedWildcard());
      assertTrue(fullyQualifiedJavaType4.isArray());
      assertFalse(fullyQualifiedJavaType4.isWildcardType());
      assertFalse(fullyQualifiedJavaType4.isExtendsBoundedWildcard());
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      assertFalse(fullyQualifiedJavaType4.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType4.isPrimitive());
      assertEquals("java.lang.Object", fullyQualifiedJavaType4.getBaseQualifiedName());
      assertEquals("Object", fullyQualifiedJavaType4.getBaseShortName());
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType2));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType0));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType4.equals((Object)fullyQualifiedJavaType1));
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType2);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType0);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType4, fullyQualifiedJavaType1);
      assertNotNull(fullyQualifiedJavaType4);
      
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getShortInstance();
      assertEquals("shortValue()", primitiveTypeWrapper1.getToPrimitiveMethod());
      assertEquals("Short", primitiveTypeWrapper1.getBaseShortName());
      assertFalse(primitiveTypeWrapper1.isPrimitive());
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper1.isArray());
      assertFalse(primitiveTypeWrapper1.isBoundedWildcard());
      assertEquals("java.lang", primitiveTypeWrapper1.getPackageName());
      assertEquals("java.lang.Short", primitiveTypeWrapper1.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper1.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper1.isWildcardType());
      assertFalse(primitiveTypeWrapper1.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper1, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper1);
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getIntegerInstance();
      assertFalse(primitiveTypeWrapper2.isPrimitive());
      assertEquals("intValue()", primitiveTypeWrapper2.getToPrimitiveMethod());
      assertEquals("Integer", primitiveTypeWrapper2.getBaseShortName());
      assertEquals("java.lang", primitiveTypeWrapper2.getPackageName());
      assertFalse(primitiveTypeWrapper2.isExtendsBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isWildcardType());
      assertEquals("java.lang.Integer", primitiveTypeWrapper2.getBaseQualifiedName());
      assertFalse(primitiveTypeWrapper2.isBoundedWildcard());
      assertFalse(primitiveTypeWrapper2.isExplicitlyImported());
      assertTrue(primitiveTypeWrapper2.isArray());
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper1));
      assertFalse(primitiveTypeWrapper2.equals((Object)primitiveTypeWrapper0));
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper1);
      assertNotSame(primitiveTypeWrapper2, primitiveTypeWrapper0);
      assertNotNull(primitiveTypeWrapper2);
      
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
      assertTrue(list0.contains(string1));
      assertNotNull(list0);
      
      boolean boolean1 = fullyQualifiedJavaType0.isBoundedWildcard();
      assertFalse(boolean1);
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertEquals("java.util.ArrayList", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType1));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType3));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType4));
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType1);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType3);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType4);
      assertNotSame(fullyQualifiedJavaType0, fullyQualifiedJavaType2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.addTypeArgument(fullyQualifiedJavaType0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(fullyQualifiedJavaType0.isExtendsBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType0.isWildcardType());
      assertTrue(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertEquals("int", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isArray());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      fullyQualifiedJavaType1.hashCode();
      PrimitiveTypeWrapper.getDoubleInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getIntegerInstance();
      int int0 = fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals(8, int0);
      
      fullyQualifiedJavaType0.compareTo((FullyQualifiedJavaType) primitiveTypeWrapper0);
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getDoubleInstance();
      assertFalse(primitiveTypeWrapper1.isExplicitlyImported());
      
      String string0 = fullyQualifiedJavaType0.getFullyQualifiedName();
      assertEquals("java.util.Map", string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      Object object0 = new Object();
      boolean boolean0 = fullyQualifiedJavaType2.equals(object0);
      assertFalse(boolean0);
      assertTrue(fullyQualifiedJavaType2.isExplicitlyImported());
      assertEquals("Date", fullyQualifiedJavaType2.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertTrue(fullyQualifiedJavaType1.isExplicitlyImported());
      assertEquals("ArrayList", fullyQualifiedJavaType1.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType1.getPackageName());
      
      fullyQualifiedJavaType0.isPrimitive();
      String string0 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("int", string0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewListInstance();
      assertEquals("List", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      
      String string0 = fullyQualifiedJavaType0.toString();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("List", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util.List", string0);
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      PrimitiveTypeWrapper.getDoubleInstance();
      int int0 = fullyQualifiedJavaType1.compareTo(fullyQualifiedJavaType0);
      assertEquals(8, int0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getNewListInstance();
      assertTrue(fullyQualifiedJavaType2.isArray());
      
      PrimitiveTypeWrapper.getByteInstance();
      fullyQualifiedJavaType0.getImportList();
      fullyQualifiedJavaType0.isPrimitive();
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertTrue(list0.isEmpty());
      
      String string0 = fullyQualifiedJavaType0.toString();
      assertEquals("boolean", string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewMapInstance();
      assertEquals("Map", fullyQualifiedJavaType3.getBaseShortName());
      
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType4.isExplicitlyImported());
      
      boolean boolean0 = fullyQualifiedJavaType1.isExplicitlyImported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getObjectInstance();
      assertTrue(fullyQualifiedJavaType1.isArray());
      
      Object object0 = new Object();
      boolean boolean0 = fullyQualifiedJavaType0.equals(object0);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertFalse(boolean0);
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?jmava+lang.Foat");
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertEquals("?", string0);
      
      fullyQualifiedJavaType0.getBaseQualifiedName();
      fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("Foat", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("java.lang.Boolean");
      fullyQualifiedJavaType0.getTypeArguments();
      assertEquals("Boolean", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getShortInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      boolean boolean0 = primitiveTypeWrapper0.equals(fullyQualifiedJavaType0);
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
      assertFalse(boolean0);
      assertEquals("Iterator", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewHashMapInstance();
      fullyQualifiedJavaType0.getPrimitiveTypeWrapper();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertEquals("HashMap", fullyQualifiedJavaType0.getBaseShortName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewMapInstance();
      fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Map", fullyQualifiedJavaType0.getBaseShortName());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getLongInstance();
      fullyQualifiedJavaType0.getImportList();
      String string0 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("java.lang.String", string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getIntInstance();
      String string1 = fullyQualifiedJavaType1.getShortName();
      assertEquals("int", string1);
      
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getIntInstance();
      PrimitiveTypeWrapper.getDoubleInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getObjectInstance();
      assertEquals("java.lang", fullyQualifiedJavaType4.getPackageName());
      
      List<String> list0 = fullyQualifiedJavaType2.getImportList();
      assertFalse(list0.contains(string1));
      
      FullyQualifiedJavaType.getNewListInstance();
      PrimitiveTypeWrapper primitiveTypeWrapper1 = PrimitiveTypeWrapper.getCharacterInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertTrue(fullyQualifiedJavaType5.equals((Object)fullyQualifiedJavaType3));
      assertTrue(fullyQualifiedJavaType5.isExplicitlyImported());
      
      PrimitiveTypeWrapper primitiveTypeWrapper2 = PrimitiveTypeWrapper.getIntegerInstance();
      fullyQualifiedJavaType1.equals("int");
      fullyQualifiedJavaType0.getPrimitiveTypeWrapper();
      boolean boolean0 = primitiveTypeWrapper2.isExplicitlyImported();
      primitiveTypeWrapper2.getTypeArguments();
      primitiveTypeWrapper0.getPrimitiveTypeWrapper();
      boolean boolean1 = primitiveTypeWrapper0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      primitiveTypeWrapper1.isExtendsBoundedWildcard();
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getNewListInstance();
      assertEquals("List", fullyQualifiedJavaType6.getBaseShortName());
      
      FullyQualifiedJavaType fullyQualifiedJavaType7 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType7.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("super ");
      fullyQualifiedJavaType0.equals("super ");
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.compareTo((FullyQualifiedJavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getObjectInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getIntInstance();
      int int0 = fullyQualifiedJavaType0.compareTo(fullyQualifiedJavaType1);
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals(1, int0);
      assertEquals("Object", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      PrimitiveTypeWrapper.getCharacterInstance();
      // Undeclared exception!
      try { 
        fullyQualifiedJavaType0.compareTo((FullyQualifiedJavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("app.myoss.cloud.mybatis.generator.types.impl.FullyQualifiedJavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType("?java.lang.Float");
      fullyQualifiedJavaType0.getBaseQualifiedName();
      assertEquals("Float", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.isBoundedWildcard());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertTrue(fullyQualifiedJavaType0.isWildcardType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType.getObjectInstance();
      fullyQualifiedJavaType0.hashCode();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getNewArrayListInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getObjectInstance();
      assertNotNull(fullyQualifiedJavaType2);
      
      fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertTrue(list0.isEmpty());
      
      fullyQualifiedJavaType1.getImportList();
      fullyQualifiedJavaType2.isWildcardType();
      assertTrue(fullyQualifiedJavaType2.isArray());
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewArrayListInstance();
      assertTrue(fullyQualifiedJavaType3.isExplicitlyImported());
      
      fullyQualifiedJavaType0.isExtendsBoundedWildcard();
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(fullyQualifiedJavaType0.equals((Object)fullyQualifiedJavaType2));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getBooleanPrimitiveInstance();
      assertNotNull(fullyQualifiedJavaType0);
      
      String string0 = fullyQualifiedJavaType0.getBaseQualifiedName();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewArrayListInstance();
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertEquals("ArrayList", fullyQualifiedJavaType0.getBaseShortName());
      assertFalse(list0.isEmpty());
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getStringInstance();
      List<String> list0 = fullyQualifiedJavaType0.getImportList();
      assertTrue(list0.isEmpty());
      assertEquals("String", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = new FullyQualifiedJavaType(">");
      fullyQualifiedJavaType0.getPackageName();
      assertFalse(fullyQualifiedJavaType0.isPrimitive());
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getIntInstance();
      assertNotNull(fullyQualifiedJavaType0);
      
      fullyQualifiedJavaType0.isBoundedWildcard();
      assertFalse(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("int", fullyQualifiedJavaType0.getBaseQualifiedName());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType1.compareTo(fullyQualifiedJavaType0);
      fullyQualifiedJavaType0.isWildcardType();
      assertEquals("java.util", fullyQualifiedJavaType0.getPackageName());
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Date", fullyQualifiedJavaType0.getBaseShortName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getNewIteratorInstance();
      String string0 = fullyQualifiedJavaType0.getShortName();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      assertEquals("Iterator", string0);
      
      FullyQualifiedJavaType.getStringInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("java.lang.String", fullyQualifiedJavaType1.getBaseQualifiedName());
      assertFalse(fullyQualifiedJavaType1.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PrimitiveTypeWrapper primitiveTypeWrapper0 = PrimitiveTypeWrapper.getByteInstance();
      primitiveTypeWrapper0.hashCode();
      assertEquals("Byte", primitiveTypeWrapper0.getBaseShortName());
      assertFalse(primitiveTypeWrapper0.isExplicitlyImported());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FullyQualifiedJavaType fullyQualifiedJavaType0 = FullyQualifiedJavaType.getDateInstance();
      assertNotNull(fullyQualifiedJavaType0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType1 = FullyQualifiedJavaType.getStringInstance();
      assertNotNull(fullyQualifiedJavaType1);
      
      List<String> list0 = fullyQualifiedJavaType1.getImportList();
      assertTrue(list0.isEmpty());
      
      FullyQualifiedJavaType.getIntInstance();
      FullyQualifiedJavaType fullyQualifiedJavaType2 = FullyQualifiedJavaType.getStringInstance();
      assertEquals("java.lang.String", fullyQualifiedJavaType2.getBaseQualifiedName());
      
      FullyQualifiedJavaType fullyQualifiedJavaType3 = FullyQualifiedJavaType.getNewIteratorInstance();
      assertTrue(fullyQualifiedJavaType3.isArray());
      
      fullyQualifiedJavaType0.getFullyQualifiedName();
      FullyQualifiedJavaType fullyQualifiedJavaType4 = FullyQualifiedJavaType.getDateInstance();
      fullyQualifiedJavaType0.getBaseQualifiedName();
      fullyQualifiedJavaType0.getPackageName();
      assertTrue(fullyQualifiedJavaType0.isExplicitlyImported());
      
      fullyQualifiedJavaType4.isArray();
      FullyQualifiedJavaType fullyQualifiedJavaType5 = FullyQualifiedJavaType.getObjectInstance();
      assertNotNull(fullyQualifiedJavaType5);
      assertEquals("Object", fullyQualifiedJavaType5.getBaseShortName());
      
      String string0 = fullyQualifiedJavaType4.getFullyQualifiedName();
      assertEquals("java.util.Date", string0);
      
      FullyQualifiedJavaType fullyQualifiedJavaType6 = FullyQualifiedJavaType.getIntInstance();
      assertFalse(fullyQualifiedJavaType6.isExplicitlyImported());
      assertNotNull(fullyQualifiedJavaType6);
      assertTrue(fullyQualifiedJavaType6.isPrimitive());
  }
}
