/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 13:20:33 GMT 2022
 */

package app.myoss.cloud.mybatis.generator.db;

import org.junit.Test;
import static org.junit.Assert.*;
import app.myoss.cloud.mybatis.generator.db.IndexInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndexInfo_ESTest extends IndexInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setOrdinalPosition(1);
      indexInfo0.hashCode();
      assertEquals(1, indexInfo0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setType(1);
      indexInfo0.hashCode();
      assertEquals(1, indexInfo0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      indexInfo0.setOrdinalPosition((-386));
      boolean boolean0 = indexInfo1.equals(indexInfo0);
      assertEquals((-386), indexInfo0.getOrdinalPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      indexInfo0.setType((-834));
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertEquals((-834), indexInfo0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setType(1);
      int int0 = indexInfo0.getType();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setType((-836));
      int int0 = indexInfo0.getType();
      assertEquals((-836), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setOrdinalPosition(1);
      int int0 = indexInfo0.getOrdinalPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setOrdinalPosition((-3414));
      int int0 = indexInfo0.getOrdinalPosition();
      assertEquals((-3414), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Boolean boolean0 = Boolean.TRUE;
      indexInfo0.setNonUnique(boolean0);
      Boolean boolean1 = indexInfo0.getNonUnique();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Boolean boolean0 = Boolean.FALSE;
      indexInfo0.setNonUnique(boolean0);
      Boolean boolean1 = indexInfo0.getNonUnique();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setIndexName("k2'98BZUDMnAzXF");
      String string0 = indexInfo0.getIndexName();
      assertEquals("k2'98BZUDMnAzXF", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setIndexName("");
      String string0 = indexInfo0.getIndexName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setColumnName("q{");
      String string0 = indexInfo0.getColumnName();
      assertEquals("q{", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setColumnName("");
      String string0 = indexInfo0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setAscOrDesc("!S,SUS+gPXqhY9");
      String string0 = indexInfo0.getAscOrDesc();
      assertEquals("!S,SUS+gPXqhY9", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setAscOrDesc("");
      String string0 = indexInfo0.getAscOrDesc();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      boolean boolean0 = indexInfo0.canEqual(indexInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Object object0 = new Object();
      boolean boolean0 = indexInfo0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      int int0 = indexInfo0.getOrdinalPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Boolean boolean0 = indexInfo0.getNonUnique();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      int int0 = indexInfo0.getType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      String string0 = indexInfo0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      String string0 = indexInfo0.getAscOrDesc();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      String string0 = indexInfo0.getIndexName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setAscOrDesc("");
      IndexInfo indexInfo1 = new IndexInfo();
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setAscOrDesc("");
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setAscOrDesc("jpW3lb,A6Mf^gNpvnv*");
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setAscOrDesc("o_qca;<8j)Z<");
      IndexInfo indexInfo1 = new IndexInfo();
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertEquals(0, indexInfo1.getOrdinalPosition());
      assertEquals(0, indexInfo1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setColumnName("");
      IndexInfo indexInfo1 = new IndexInfo();
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setColumnName("");
      boolean boolean0 = indexInfo1.equals(indexInfo0);
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setColumnName("tiojWV&s85rGVd8.");
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setColumnName("p`WP<k,i[saC/");
      IndexInfo indexInfo1 = new IndexInfo();
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertEquals(0, indexInfo1.getOrdinalPosition());
      assertEquals(0, indexInfo1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setIndexName("+W");
      IndexInfo indexInfo1 = new IndexInfo();
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setIndexName("+W");
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setIndexName("='LY$#9(");
      IndexInfo indexInfo1 = new IndexInfo();
      boolean boolean0 = indexInfo1.equals(indexInfo0);
      assertFalse(boolean0);
      assertEquals(0, indexInfo1.getOrdinalPosition());
      assertEquals(0, indexInfo1.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setIndexName("o_qca;<8j)Z<");
      boolean boolean0 = indexInfo1.equals(indexInfo0);
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Boolean boolean0 = Boolean.TRUE;
      indexInfo0.setNonUnique(boolean0);
      IndexInfo indexInfo1 = new IndexInfo();
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setNonUnique(boolean0);
      boolean boolean1 = indexInfo1.equals(indexInfo0);
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      
      Boolean boolean0 = Boolean.TRUE;
      indexInfo1.setNonUnique(boolean0);
      boolean boolean1 = indexInfo0.equals(indexInfo1);
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Boolean boolean0 = Boolean.TRUE;
      IndexInfo indexInfo1 = new IndexInfo();
      assertTrue(indexInfo1.equals((Object)indexInfo0));
      
      indexInfo1.setNonUnique(boolean0);
      boolean boolean1 = indexInfo1.equals(indexInfo0);
      assertFalse(indexInfo1.equals((Object)indexInfo0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      IndexInfo indexInfo1 = new IndexInfo();
      indexInfo1.setOrdinalPosition(1177);
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertEquals(1177, indexInfo1.getOrdinalPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      boolean boolean0 = indexInfo0.equals("IndexInfo(nonUnique=null, indexName=o_qca;<8j)Z<, type=0, ordinalPosition=0, columnName=null, ascOrDesc=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      boolean boolean0 = indexInfo0.equals(indexInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setAscOrDesc("IndexInfo(nonUnique=null, indexName=null, type=0, ordinalPosition=1, columnName=null, ascOrDesc=null)");
      indexInfo0.hashCode();
      assertEquals(0, indexInfo0.getType());
      assertEquals(0, indexInfo0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setColumnName("k2'98BZUDMnAzXF");
      indexInfo0.hashCode();
      assertEquals(0, indexInfo0.getType());
      assertEquals(0, indexInfo0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setIndexName("k2'98BZUDMnAzXF");
      indexInfo0.hashCode();
      assertEquals(0, indexInfo0.getOrdinalPosition());
      assertEquals(0, indexInfo0.getType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      Boolean boolean0 = Boolean.FALSE;
      indexInfo0.setNonUnique(boolean0);
      indexInfo0.hashCode();
      assertEquals(0, indexInfo0.getType());
      assertEquals(0, indexInfo0.getOrdinalPosition());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      indexInfo0.setType(1);
      IndexInfo indexInfo1 = new IndexInfo();
      boolean boolean0 = indexInfo0.equals(indexInfo1);
      assertEquals(1, indexInfo0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IndexInfo indexInfo0 = new IndexInfo();
      String string0 = indexInfo0.toString();
      assertEquals("IndexInfo(nonUnique=null, indexName=null, type=0, ordinalPosition=0, columnName=null, ascOrDesc=null)", string0);
  }
}
