/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 22:56:53 GMT 2022
 */

package org.thavam.util.concurrent.blockingMap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap;
import org.thavam.util.concurrent.blockingMap.ObjectLatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActiveBlockingHashMap_ESTest extends ActiveBlockingHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<Thread>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<Thread>, Thread>();
      ObjectLatch<Thread> objectLatch0 = new ObjectLatch<Thread>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Thread thread0 = activeBlockingHashMap0.offer(objectLatch0, (Thread) null, (-21L), timeUnit0);
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveBlockingHashMap<Thread, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, Thread>();
      MockThread mockThread0 = new MockThread();
      Object object0 = activeBlockingHashMap0.get(mockThread0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveBlockingHashMap<Thread, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, ChronoLocalDate>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.put((Thread) null, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate>();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.offer((ChronoLocalDate) null, (ChronoLocalDate) null, (-1L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ActiveBlockingHashMap<Thread, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, Thread>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.offer((Thread) null, (Thread) mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<Thread>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<Thread>, Thread>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.isKeyAvailable((ObjectLatch<Thread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActiveBlockingHashMap<Thread, ObjectLatch<Thread>> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, ObjectLatch<Thread>>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<Thread>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<Thread>, Thread>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ActiveBlockingHashMap<Thread, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, ChronoLocalDate>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ChronoLocalDate chronoLocalDate0 = activeBlockingHashMap0.take((Thread) mockThread0, 0L, timeUnit0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveBlockingHashMap<ChronoLocalDate, ObjectLatch<ChronoLocalDate>> activeBlockingHashMap0 = new ActiveBlockingHashMap<ChronoLocalDate, ObjectLatch<ChronoLocalDate>>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.take((ChronoLocalDate) null, 3260L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<Thread>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<Thread>, Thread>();
      ObjectLatch<Thread> objectLatch0 = new ObjectLatch<Thread>();
      boolean boolean0 = activeBlockingHashMap0.isKeyAvailable(objectLatch0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<Thread>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<Thread>, Thread>();
      int int0 = activeBlockingHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ActiveBlockingHashMap<Thread, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, ChronoLocalDate>();
      activeBlockingHashMap0.put(thread0, (ChronoLocalDate) null);
      boolean boolean0 = activeBlockingHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveBlockingHashMap<Thread, AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>>();
      boolean boolean0 = activeBlockingHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActiveBlockingHashMap<AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>, ChronoLocalDate>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>(mockThread0, localDate0);
      activeBlockingHashMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, localDate0);
      boolean boolean0 = activeBlockingHashMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<ChronoLocalDate>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<ChronoLocalDate>, Thread>();
      activeBlockingHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ActiveBlockingHashMap<AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>, ChronoLocalDate>();
      AbstractMap.SimpleEntry<Thread, ChronoLocalDate> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Thread, ChronoLocalDate>(thread0, (ChronoLocalDate) null);
      AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Thread, ChronoLocalDate>(abstractMap_SimpleEntry0);
      activeBlockingHashMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, (ChronoLocalDate) null);
      boolean boolean0 = activeBlockingHashMap0.containsValue(thread0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate>();
      ObjectLatch<ChronoLocalDate> objectLatch0 = new ObjectLatch<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = activeBlockingHashMap0.remove((Object) objectLatch0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActiveBlockingHashMap<Thread, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, Thread>();
      HashMap<Thread, Thread> hashMap0 = new HashMap<Thread, Thread>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.putAll(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActiveBlockingHashMap<Thread, ObjectLatch<Thread>> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, ObjectLatch<Thread>>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.keySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<ChronoLocalDate>, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<ChronoLocalDate>, ChronoLocalDate>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.entrySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActiveBlockingHashMap<ObjectLatch<Thread>, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<ObjectLatch<Thread>, Thread>();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      boolean boolean0 = activeBlockingHashMap0.containsKey(minguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActiveBlockingHashMap<ChronoLocalDate, AbstractMap.SimpleImmutableEntry<Thread, Thread>> activeBlockingHashMap0 = new ActiveBlockingHashMap<ChronoLocalDate, AbstractMap.SimpleImmutableEntry<Thread, Thread>>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.take((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate> activeBlockingHashMap0 = new ActiveBlockingHashMap<ChronoLocalDate, ChronoLocalDate>();
      // Undeclared exception!
      try { 
        activeBlockingHashMap0.values();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ActiveBlockingHashMap<Thread, Thread> activeBlockingHashMap0 = new ActiveBlockingHashMap<Thread, Thread>();
      MockThread mockThread0 = new MockThread();
      Thread thread0 = activeBlockingHashMap0.offer((Thread) mockThread0, (Thread) mockThread0);
      assertNull(thread0);
  }
}
