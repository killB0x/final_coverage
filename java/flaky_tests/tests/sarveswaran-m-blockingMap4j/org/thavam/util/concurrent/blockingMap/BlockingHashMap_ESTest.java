/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 23:01:34 GMT 2022
 */

package org.thavam.util.concurrent.blockingMap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.thavam.util.concurrent.blockingMap.BlockingHashMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockingHashMap_ESTest extends BlockingHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer((-678));
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Integer integer1 = blockingHashMap0.take(integer0, 0L, timeUnit0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer((-366));
      Integer integer1 = blockingHashMap0.put(integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      blockingHashMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, (Integer) null);
      boolean boolean0 = blockingHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      Object object0 = blockingHashMap0.get(integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      blockingHashMap0.clear();
      // Undeclared exception!
      try { 
        blockingHashMap0.values();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      blockingHashMap0.clear();
      // Undeclared exception!
      try { 
        blockingHashMap0.size();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      blockingHashMap0.clear();
      Integer integer0 = new Integer((-2048));
      // Undeclared exception!
      try { 
        blockingHashMap0.remove((Object) integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      Integer integer0 = new Integer((-171));
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        blockingHashMap0.offer((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, integer0, (-2174L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      blockingHashMap0.clear();
      Integer integer0 = new Integer(1051);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        blockingHashMap0.offer(integer0, integer0, (long) 1051, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.offer((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      blockingHashMap0.clear();
      Integer integer0 = new Integer(723);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        blockingHashMap0.offer(integer0, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.isKeyAvailable((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      blockingHashMap0.clear();
      // Undeclared exception!
      try { 
        blockingHashMap0.containsKey(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      blockingHashMap0.clear();
      // Undeclared exception!
      try { 
        blockingHashMap0.clear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.putAll(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(723);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = blockingHashMap0.offer(integer0, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.values();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = blockingHashMap0.containsKey(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.entrySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      boolean boolean0 = blockingHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer(1051);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Integer integer1 = blockingHashMap0.offer(integer0, integer0, (long) 1051, timeUnit0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-2048));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = blockingHashMap0.remove((Object) integer0);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      int int0 = blockingHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = blockingHashMap0.isKeyAvailable(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      boolean boolean0 = blockingHashMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> blockingHashMap0 = new BlockingHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        blockingHashMap0.take((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      blockingHashMap0.putIfAbsent(integer0, integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = blockingHashMap0.isKeyAvailable(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockingHashMap<Integer, Integer> blockingHashMap0 = new BlockingHashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        blockingHashMap0.keySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.thavam.util.concurrent.blockingMap.ActiveBlockingHashMap", e);
      }
  }
}
