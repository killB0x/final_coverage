/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 23:03:00 GMT 2022
 */

package org.thavam.util.concurrent.blockingMap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import org.thavam.util.concurrent.blockingMap.PassiveHashMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PassiveHashMap_ESTest extends PassiveHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassiveHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> passiveHashMap0 = PassiveHashMap.getInstance();
      PassiveHashMap<Object, Integer> passiveHashMap1 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap1.containsKey(passiveHashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.take((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassiveHashMap<ChronoLocalDate, ChronoLocalDate> passiveHashMap0 = PassiveHashMap.getInstance();
      PassiveHashMap<Object, Comparable<Object>> passiveHashMap1 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap1.offer((Object) passiveHashMap0, (Object) passiveHashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassiveHashMap<Comparable<Integer>, ChronoLocalDate> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.isKeyAvailable((Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        passiveHashMap0.putAll(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassiveHashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> passiveHashMap0 = PassiveHashMap.getInstance();
      PassiveHashMap<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<Object, Integer>> passiveHashMap1 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap1.remove((Object) passiveHashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.size();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.clear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassiveHashMap<Integer, Comparable<Integer>> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.put((Integer) null, (Comparable<Integer>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.keySet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.values();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassiveHashMap<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> passiveHashMap0 = PassiveHashMap.getInstance();
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        passiveHashMap0.offer((Object) integer0, (Object) integer0, (long) 0, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassiveHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> passiveHashMap0 = PassiveHashMap.getInstance();
      Integer integer0 = new Integer(590);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        passiveHashMap0.take((Object) integer0, (long) 590, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassiveHashMap<ChronoLocalDate, ChronoLocalDate> passiveHashMap0 = PassiveHashMap.getInstance();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      // Undeclared exception!
      try { 
        passiveHashMap0.containsValue(minguoDate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassiveHashMap<Comparable<ChronoLocalDate>, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        passiveHashMap0.get(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.entrySet();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassiveHashMap<Integer, Integer> passiveHashMap0 = PassiveHashMap.getInstance();
      // Undeclared exception!
      try { 
        passiveHashMap0.isEmpty();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map Shutdown.Not Active
         //
         verifyException("org.thavam.util.concurrent.blockingMap.PassiveHashMap", e);
      }
  }
}
