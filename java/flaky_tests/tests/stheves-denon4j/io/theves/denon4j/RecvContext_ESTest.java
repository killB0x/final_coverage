/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 15:57:57 GMT 2022
 */

package io.theves.denon4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.theves.denon4j.Condition;
import io.theves.denon4j.RecvContext;
import io.theves.denon4j.net.Event;
import java.time.Duration;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecvContext_ESTest extends RecvContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Condition condition0 = Condition.regex("e,fv9]e&75]{");
      RecvContext recvContext0 = new RecvContext(condition0);
      boolean boolean0 = recvContext0.fulfilled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Condition[] conditionArray0 = new Condition[8];
      Condition condition0 = Condition.anyMatch(conditionArray0);
      conditionArray0[0] = condition0;
      RecvContext recvContext0 = new RecvContext(condition0);
      // Undeclared exception!
      try { 
        recvContext0.fulfilled();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RecvContext recvContext0 = new RecvContext((Condition) null);
      // Undeclared exception!
      try { 
        recvContext0.fulfilled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.RecvContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Condition condition0 = Condition.bool(true);
      RecvContext recvContext0 = new RecvContext(condition0);
      Duration duration0 = recvContext0.duration();
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Condition condition0 = Condition.bool(true);
      RecvContext recvContext0 = new RecvContext(condition0);
      recvContext0.endReceive();
      recvContext0.duration();
      assertFalse(recvContext0.isReceiving());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Condition condition0 = Condition.bool(true);
      RecvContext recvContext0 = new RecvContext(condition0);
      boolean boolean0 = recvContext0.isReceiving();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Condition condition0 = Condition.bool(true);
      RecvContext recvContext0 = new RecvContext(condition0);
      boolean boolean0 = recvContext0.fulfilled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Condition condition0 = Condition.bool(true);
      RecvContext recvContext0 = new RecvContext(condition0);
      List<Event> list0 = recvContext0.received();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Condition condition0 = Condition.bool(true);
      RecvContext recvContext0 = new RecvContext(condition0);
      recvContext0.beginReceive();
      boolean boolean0 = recvContext0.isReceiving();
      assertTrue(boolean0);
  }
}
