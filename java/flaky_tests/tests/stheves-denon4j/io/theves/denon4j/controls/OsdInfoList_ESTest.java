/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:06:27 GMT 2022
 */

package io.theves.denon4j.controls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.theves.denon4j.controls.Line;
import io.theves.denon4j.controls.OsdInfoList;
import io.theves.denon4j.net.Event;
import java.nio.charset.Charset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OsdInfoList_ESTest extends OsdInfoList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      osdInfoList0.addEvent(event0);
      String string0 = osdInfoList0.toString();
      assertEquals("\u0000\u0000\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      osdInfoList0.addEvent(event0);
      Line line0 = osdInfoList0.lineAt(0);
      assertFalse(line0.isCursorSelect());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      osdInfoList0.addEvent(event0);
      List<Line> list0 = osdInfoList0.getLines();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-117);
      Event event0 = Event.create(byteArray0);
      osdInfoList0.addEvent(event0);
      Line line0 = osdInfoList0.cursorLine();
      assertTrue(line0.isPlayable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)25;
      Event event0 = Event.create(byteArray0);
      osdInfoList0.addEvent(event0);
      Line line0 = osdInfoList0.cursorLine();
      assertEquals(0, (int)line0.getIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      // Undeclared exception!
      try { 
        osdInfoList0.addEvent((Event) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)52;
      Event event0 = Event.create(byteArray0);
      // Undeclared exception!
      try { 
        osdInfoList0.addEvent(event0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[0];
      Event event0 = Event.create(byteArray0);
      // Undeclared exception!
      try { 
        osdInfoList0.addEvent(event0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 > 0
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      Line line0 = osdInfoList0.cursorLine();
      assertNull(line0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      byte[] byteArray0 = new byte[6];
      Event event0 = Event.create(byteArray0);
      // Undeclared exception!
      try { 
        osdInfoList0.addEvent(event0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      String string0 = osdInfoList0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      // Undeclared exception!
      try { 
        osdInfoList0.lineAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      OsdInfoList osdInfoList0 = new OsdInfoList(charset0);
      List<Line> list0 = osdInfoList0.getLines();
      assertEquals(0, list0.size());
  }
}
