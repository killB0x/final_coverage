/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 15:54:04 GMT 2022
 */

package io.theves.denon4j.controls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.theves.denon4j.controls.Line;
import io.theves.denon4j.net.Event;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)5;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isPlayable();
      assertFalse(line0.isDirectory());
      assertFalse(line0.isPicture());
      assertFalse(line0.isCursorSelect());
      assertTrue(boolean0);
      assertEquals("\u0005\u0000\u0000\u0000", line0.getDisplayLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-1);
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isDirectory();
      assertTrue(line0.isPicture());
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000", line0.getDisplayLine());
      assertTrue(boolean0);
      assertTrue(line0.isPlayable());
      assertTrue(line0.isCursorSelect());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)12;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isCursorSelect();
      assertEquals("\f\u0000\u0000\u0000\u0000", line0.getDisplayLine());
      assertTrue(boolean0);
      assertFalse(line0.isPlayable());
      assertFalse(line0.isPicture());
      assertFalse(line0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      Integer integer0 = line0.getIndex();
      assertEquals(0, (int)integer0);
      assertEquals("", line0.getDisplayLine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      String string0 = line0.getDisplayLine();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)56;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      line0.compareTo(line0);
      assertFalse(line0.isPlayable());
      assertFalse(line0.isCursorSelect());
      assertEquals("\u0000\u0000\u0000\u0000", line0.getDisplayLine());
      assertFalse(line0.isPicture());
      assertEquals(8, (int)line0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Line line0 = null;
      try {
        line0 = new Line((Event) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = null;
      try {
        line0 = new Line(event0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 > 0
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)56;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      Integer integer0 = line0.getIndex();
      assertFalse(line0.isPlayable());
      assertFalse(line0.isPicture());
      assertFalse(line0.isCursorSelect());
      assertEquals(8, (int)integer0);
      assertEquals("\u0000\u0000\u0000\u0000", line0.getDisplayLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-1);
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isPicture();
      assertEquals("\uFFFD\u0000\u0000", line0.getDisplayLine());
      assertTrue(boolean0);
      assertTrue(line0.isCursorSelect());
      assertTrue(line0.isDirectory());
      assertTrue(line0.isPlayable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      assertEquals("0", line0.getDisplayLine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = new Line(event0, charset0);
      String string0 = line0.getDisplayLine();
      assertFalse(line0.isPlayable());
      assertFalse(line0.isPicture());
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)48;
      Charset charset0 = Charset.defaultCharset();
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      // Undeclared exception!
      try { 
        line0.compareTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isCursorSelect();
      assertFalse(line0.isPlayable());
      assertFalse(line0.isPicture());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", line0.getDisplayLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isPicture();
      assertFalse(line0.isPlayable());
      assertEquals("\u0000\u0000\u0000", line0.getDisplayLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)56;
      Event event0 = Event.create(byteArray0);
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isPlayable();
      assertFalse(boolean0);
      assertFalse(line0.isPicture());
      assertFalse(line0.isCursorSelect());
      assertEquals("\u0000\u0000\u0000\u0000", line0.getDisplayLine());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte)48;
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = new Line(event0, charset0);
      boolean boolean0 = line0.isDirectory();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", line0.getDisplayLine());
      assertFalse(line0.isPlayable());
      assertFalse(line0.isPicture());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Event event0 = Event.create(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Line line0 = null;
      try {
        line0 = new Line(event0, charset0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
