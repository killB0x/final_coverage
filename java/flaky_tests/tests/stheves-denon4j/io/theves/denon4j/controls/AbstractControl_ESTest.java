/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:01:48 GMT 2022
 */

package io.theves.denon4j.controls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.theves.denon4j.Condition;
import io.theves.denon4j.DenonReceiver;
import io.theves.denon4j.controls.Menu;
import io.theves.denon4j.controls.NetUsbIPodControl;
import io.theves.denon4j.controls.Setting;
import io.theves.denon4j.controls.Toggle;
import io.theves.denon4j.controls.Volume;
import io.theves.denon4j.net.Event;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractControl_ESTest extends AbstractControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 0);
      Volume volume0 = denonReceiver0.surroundRightVolume();
      String string0 = volume0.getName();
      assertEquals("Surround Right Volume", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      Volume volume0 = denonReceiver0.surroundBackLeftVolume();
      volume0.setName("");
      String string0 = volume0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 0);
      Volume volume0 = denonReceiver0.surroundRightVolume();
      String string0 = volume0.getCommandPrefix();
      assertEquals("CV", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 0);
      Toggle toggle0 = new Toggle(denonReceiver0, "", " 1|a5'b5B-)-i", "MS\u0000}\u0000\uFFFD\b\u0001'f");
      String string0 = toggle0.getCommandPrefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      Toggle toggle0 = new Toggle(denonReceiver0, "", "", "");
      // Undeclared exception!
      try { 
        toggle0.sendRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Command length must be > 2
         //
         verifyException("io.theves.denon4j.net.Command", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      Volume volume0 = denonReceiver0.frontLeftVolume();
      // Undeclared exception!
      try { 
        volume0.sendRequest("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected.
         //
         verifyException("io.theves.denon4j.net.Tcp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 233);
      Setting setting0 = new Setting(denonReceiver0, "");
      // Undeclared exception!
      try { 
        setting0.sendRequest();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Command length must be > 2
         //
         verifyException("io.theves.denon4j.net.Command", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 0);
      Menu menu0 = denonReceiver0.menu();
      // Undeclared exception!
      try { 
        menu0.sendRequest();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected.
         //
         verifyException("io.theves.denon4j.net.Tcp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      // Undeclared exception!
      try { 
        netUsbIPodControl0.sendAndReceive("CV\r\u0000\u0000\u0000\u0000\uFFFD;H", (Condition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.AbstractControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      NetUsbIPodControl netUsbIPodControl0 = denonReceiver0.netUsb();
      // Undeclared exception!
      try { 
        netUsbIPodControl0.sendAndReceive("", (Condition) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments must not be null
         //
         verifyException("io.theves.denon4j.DenonReceiver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("i|NlwcR~]r", 5);
      Setting setting0 = denonReceiver0.input();
      Condition condition0 = Condition.regex("i|NlwcR~]r");
      // Undeclared exception!
      try { 
        setting0.sendAndReceive("i|NlwcR~]r", condition0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected.
         //
         verifyException("io.theves.denon4j.net.Tcp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      // Undeclared exception!
      try { 
        netUsbIPodControl0.send(", name='");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.AbstractControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      Toggle toggle0 = new Toggle(denonReceiver0, "", "", "");
      // Undeclared exception!
      try { 
        toggle0.send("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Command length must be > 2
         //
         verifyException("io.theves.denon4j.net.Command", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 0);
      Volume volume0 = denonReceiver0.surroundLeftVolume();
      // Undeclared exception!
      try { 
        volume0.send("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected.
         //
         verifyException("io.theves.denon4j.net.Tcp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      Volume volume0 = denonReceiver0.surroundBackLeftVolume();
      // Undeclared exception!
      try { 
        volume0.received((Event) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.AbstractControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("", 3);
      Setting setting0 = new Setting(denonReceiver0, "");
      byte[] byteArray0 = new byte[0];
      Event event0 = Event.create(byteArray0);
      setting0.received(event0);
      assertNull(setting0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      byte[] byteArray0 = new byte[0];
      Event event0 = Event.create(byteArray0);
      netUsbIPodControl0.received(event0);
      assertEquals("", event0.asciiValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DenonReceiver denonReceiver0 = new DenonReceiver("\u0000", 3765);
      Volume volume0 = new Volume(denonReceiver0, "\u0000", "\u0000", "\u0000");
      String string0 = volume0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      netUsbIPodControl0.doHandle((Event) null);
      assertEquals("Network Audio/USB /iPod DIRECT Extended Control", netUsbIPodControl0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      // Undeclared exception!
      try { 
        netUsbIPodControl0.sendRequest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.AbstractControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      String string0 = netUsbIPodControl0.toString();
      assertEquals("Control{commandPrefix='NS', name='Network Audio/USB /iPod DIRECT Extended Control'}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetUsbIPodControl netUsbIPodControl0 = new NetUsbIPodControl((DenonReceiver) null, false);
      // Undeclared exception!
      try { 
        netUsbIPodControl0.sendRequest("[2E@[5=A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.theves.denon4j.controls.AbstractControl", e);
      }
  }
}
