/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:07:05 GMT 2022
 */

package org.xenei.classpathutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xenei.classpathutils.Case;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Case_ESTest extends Case_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      int int0 = case0.checkIndexOf("insensitive", 0, "insensitive");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      boolean boolean0 = case0.INSENSITIVE.checkEquals(" wEryH]dvN8", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      boolean boolean0 = case0.isCaseSensitive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      boolean boolean0 = case0.checkRegionMatches("i", 0, "i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      int int0 = case0.checkIndexOf("=2ISL4", (-393), "i");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      int int0 = case0.SENSITIVE.checkCompareTo("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkStartsWith("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkRegionMatches((String) null, (-9), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      // Undeclared exception!
      case0.checkIndexOf("Insensitive", (-1920825223), "Insensitive");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkIndexOf((String) null, 869, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkEndsWith((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      boolean boolean0 = case0.checkRegionMatches("r/+UlT,", 2437, "r/+UlT,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      int int0 = case0.checkIndexOf("The strings must not be null", (-16), "the sinsensitive not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      int int0 = case0.checkIndexOf(":LT_9", 4, "PK:");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      boolean boolean0 = case0.checkEndsWith("F,iK*!q;5B1", "org.xenei.classpathutils.Case");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      boolean boolean0 = case0.checkEndsWith("lL4|1L7WX fj$R-]Q", "lL4|1L7WX fj$R-]Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      boolean boolean0 = case0.checkStartsWith("lL4|L7WX fj$R]Q", "lL4|L7WX fj$R]Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      boolean boolean0 = case0.checkStartsWith("T", "The strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      boolean boolean0 = case0.checkEquals("T", "The strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkEquals("1)\"xs>Xo-aYG", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      boolean boolean0 = case0.checkEquals("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkEquals((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      int int0 = case0.SENSITIVE.checkCompareTo("\\J", "the sinsensitive not be null");
      assertEquals((-24), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      // Undeclared exception!
      try { 
        case0.INSENSITIVE.checkCompareTo("<Q!['ck", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      int int0 = case0.checkCompareTo("the sinsensitive not be null", "kxf2gur#t");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      // Undeclared exception!
      try { 
        case0.checkCompareTo((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The strings must not be null
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Case.forName("c}&IX}x\"6Fd<Ieq.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Case name: c}&IX}x\"6Fd<Ieq.
         //
         verifyException("org.xenei.classpathutils.Case", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Case case0 = Case.forName("Sensitive");
      assertTrue(case0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Case case0 = Case.forName("Insensitive");
      assertFalse(case0.isCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      String string0 = case0.getName();
      assertEquals("Sensitive", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Case case0 = Case.SENSITIVE;
      boolean boolean0 = case0.isCaseSensitive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Case case0 = Case.INSENSITIVE;
      String string0 = case0.toString();
      assertEquals("Insensitive", string0);
  }
}
