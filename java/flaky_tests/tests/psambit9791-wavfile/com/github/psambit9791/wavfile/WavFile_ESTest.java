/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:18:22 GMT 2022
 */

package com.github.psambit9791.wavfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.psambit9791.wavfile.WavFile;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WavFile_ESTest extends WavFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      int int0 = 19;
      long[] longArray0 = new long[19];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.github.psambit9791.wavfile.WavFileException");
      assertTrue(boolean0);
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Wav Header data, incorrect riff chunk ID
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 0L);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      
      boolean boolean0 = mockFile0.mkdir();
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean0);
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      int int0 = wavFile1.readFrames(intArray0, 1346, (-2222));
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new int[] {8, 10, 10, 10, 10, 10, 10}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-2222), int0);
      
      try { 
        wavFile1.writeFrames(intArray0, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T", "T");
      assertNotNull(mockFile0);
      
      int int0 = 1;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 6, 6);
      assertNotNull(wavFile0);
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("T", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(6, wavFile0.getValidBits());
      assertEquals(6L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((double[]) null, (-1), 1581);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65487, 65487, 65487, 65487);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals("(=*O", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487, wavFile0.getValidBits());
      assertEquals(65487, wavFile0.getNumChannels());
      assertEquals(65487L, wavFile0.getNumFrames());
      
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 65487;
      intArray2[1] = 65487;
      intArray2[2] = (-1073741823);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      wavFile0.writeFrames(intArray1, 0, 4089);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 8, 8, 8);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[1] = doubleArray1;
      WavFile wavFile1 = WavFile.newWavFile(mockFile1, 8, 0, 8, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.getNumChannels();
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(8, int0);
      
      WavFile wavFile2 = WavFile.openWavFile(mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotNull(wavFile2);
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2634L;
      longArray0[1] = (long) 8;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 8;
      int int1 = wavFile2.readFrames(longArray0, 8, (-498));
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {2634L, 8L, 0L, 8L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-498), int1);
      
      int int2 = wavFile2.readFrames((long[]) null, 8, 8);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertEquals(0, int2);
      
      int int3 = wavFile2.readFrames(doubleArray0, 531, 1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int3);
      
      try { 
        wavFile2.writeFrames(doubleArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 2, 2, 2);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(2L, wavFile0.getFramesRemaining());
      assertEquals(2L, wavFile0.getSampleRate());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2L, wavFile0.getNumFrames());
      
      long[] longArray0 = new long[19];
      int int0 = wavFile0.writeFrames(longArray0, 2);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2L, wavFile0.getSampleRate());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2L, wavFile0.getNumFrames());
      assertEquals(19, longArray0.length);
      assertEquals(2, int0);
      
      long long0 = wavFile0.getFramesRemaining();
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2L, wavFile0.getSampleRate());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2L, wavFile0.getNumFrames());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 10, 1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getSampleRate());
      
      boolean boolean0 = mockFile0.setReadOnly();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(boolean0);
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      int int0 = wavFile1.readFrames((long[][]) null, 1, (-1));
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals((-1), int0);
      
      long long0 = wavFile1.getFramesRemaining();
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 0L;
      int int1 = wavFile1.readFrames(doubleArray0, (-1493));
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {10.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1493), int1);
      
      int int2 = wavFile0.writeFrames(doubleArray0, 10);
      assertNotSame(wavFile0, wavFile1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getSampleRate());
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {10.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[][] intArray0 = new int[0][0];
      MockFile mockFile0 = new MockFile("2i~<$x|-u");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 16L, 12, 90L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.exists());
      assertEquals("2i~<$x|-u", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2i~<$x|-u", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(90L, wavFile0.getSampleRate());
      assertEquals(16L, wavFile0.getFramesRemaining());
      assertEquals(16L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2, wavFile0.getNumChannels());
      
      int[] intArray1 = new int[2];
      intArray1[0] = 5;
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = (long) 2;
      longArray1[2] = 711L;
      longArray1[3] = (long) 12;
      longArray1[4] = 90L;
      longArray1[5] = (long) 5;
      longArray1[6] = 0L;
      longArray1[7] = (long) 5;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (long) 8176;
      longArray2[2] = (long) 2;
      longArray2[3] = (long) 5;
      longArray2[4] = (long) 2;
      longArray2[5] = (long) 12;
      longArray2[6] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 12;
      longArray3[1] = 16L;
      longArray3[2] = 711L;
      longArray3[3] = (long) 8176;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 5;
      longArray4[1] = (long) 5;
      longArray4[2] = (long) 5;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray0[5] = longArray6;
      int int0 = wavFile0.writeFrames(longArray0, 5, 2);
      assertTrue(mockFile0.exists());
      assertEquals("2i~<$x|-u", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2i~<$x|-u", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(14L, wavFile0.getFramesRemaining());
      assertEquals(90L, wavFile0.getSampleRate());
      assertEquals(16L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(6, longArray0.length);
      assertEquals(2, int0);
      
      intArray1[1] = 2;
      try { 
        wavFile0.readFrames(intArray1, (-2143));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T", "T");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      double[][] doubleArray1 = new double[5][4];
      int int0 = wavFile0.writeFrames(doubleArray1, 10);
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(5, doubleArray1.length);
      assertEquals(1, int0);
      
      wavFile0.close();
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(46L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(46L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(1L, wavFile1.getFramesRemaining());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(1L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.github.psambit9791.wa:file.WavFilQException", "com.github.psambit9791.wa:file.WavFilQException");
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 65498, 65498, 65498, 65498);
      assertNotNull(wavFile0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(65498L, wavFile0.getFramesRemaining());
      assertEquals(65498L, wavFile0.getSampleRate());
      assertEquals(65498, wavFile0.getValidBits());
      assertEquals(65498L, wavFile0.getNumFrames());
      assertEquals(65498, wavFile0.getNumChannels());
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1678L;
      longArray0[2] = (long) 65498;
      longArray0[3] = (long) 65498;
      longArray0[4] = (long) 65498;
      longArray0[5] = (long) 65498;
      longArray0[6] = (long) 329;
      longArray0[7] = (long) 329;
      longArray0[8] = 107L;
      // Undeclared exception!
      wavFile0.writeFrames(longArray0, 1, 329);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 10, 1);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[7][3];
      int[] intArray1 = new int[1];
      intArray1[0] = 10;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1);
      intArray2[1] = 1397;
      intArray0[2] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[1] = 1397;
      intArray0[3] = intArray3;
      int[] intArray4 = new int[11];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[1] = 0;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 10;
      intArray5[1] = 1;
      intArray5[2] = (-1);
      intArray5[3] = 1;
      intArray1[0] = 10;
      intArray0[5] = intArray1;
      intArray0[6] = intArray1;
      int int0 = wavFile1.readFrames(intArray0, 0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      boolean boolean0 = file0.mkdir();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(44L, file0.length());
      assertTrue(file0.isFile());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean0);
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[6];
      intArray1[0] = 4096;
      intArray1[1] = 255;
      intArray1[2] = 10;
      intArray1[3] = 10;
      intArray1[4] = 10;
      intArray1[5] = 10;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 10;
      intArray2[1] = 255;
      intArray2[2] = 4096;
      intArray2[3] = 255;
      intArray2[4] = 4096;
      intArray2[5] = 4096;
      intArray2[6] = 4096;
      intArray2[7] = 10;
      intArray0[1] = intArray2;
      int int0 = wavFile1.readFrames(intArray0, (-3323), (-1849));
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(2, intArray0.length);
      assertEquals((-1849), int0);
      
      try { 
        WavFile.newWavFile(mockFile0, (-1029), 2741L, 243, 4096);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of channels, valid range 1 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1;
      MockFile mockFile0 = new MockFile("$VALUES", "$VALUES");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 10, 10, 7L);
      assertNotNull(wavFile0);
      assertEquals("/home/user/$VALUES/$VALUES", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("$VALUES", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/$VALUES", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(7L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 7L;
      longArray1[1] = (long) 1;
      longArray1[2] = (long) 1;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 7L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 1;
      longArray3[1] = 7L;
      longArray3[2] = 2078L;
      longArray3[3] = (long) 1;
      longArray3[4] = (long) 10;
      longArray0[2] = longArray3;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 1, 1736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 0L, 5, 0L);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = wavFile0.writeFrames(longArray0, (-3478), 5);
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int1 = wavFile1.readFrames(longArray0, 0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 10, 1);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      int int0 = wavFile1.readFrames((long[][]) null, 521, (-1));
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals((-1), int0);
      
      int int1 = wavFile0.writeFrames(intArray0, 1397);
      assertNotSame(wavFile0, wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 19, 19, 19, 19);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(19L, wavFile0.getSampleRate());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19, wavFile0.getNumChannels());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getNumFrames());
      
      wavFile0.close();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(45L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(19L, wavFile0.getSampleRate());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19, wavFile0.getNumChannels());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[0];
      try { 
        wavFile0.writeFrames(doubleArray0, 1263, 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.equals((Object)mockFile0));
      
      long long0 = 0L;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 10;
      longArray0[3] = (long) 10;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 10L;
      doubleArray0[4] = (double) 10L;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 0L;
      try { 
        wavFile1.writeFrames(doubleArray0, (-71), (-71));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 25, 0L, 25, 25);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(25, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(25L, wavFile0.getSampleRate());
      
      int int0 = wavFile0.writeFrames((double[]) null, 25);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(25, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(25L, wavFile0.getSampleRate());
      assertEquals(0, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(25, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int1 = wavFile1.readFrames((double[]) null, 0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(25, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?WuQNO_vdOB", ",zA?WuQNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1191, 5, 5, 0L);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?WuQNO_vdOB/,zA?WuQNO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?WuQNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?WuQNO_vdOB", mockFile0.getParent());
      assertEquals(1191, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5L, wavFile0.getFramesRemaining());
      
      WavFile wavFile1 = WavFile.newWavFile(mockFile0, 1191, 0L, 24, 5);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?WuQNO_vdOB/,zA?WuQNO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?WuQNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?WuQNO_vdOB", mockFile0.getParent());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(24, wavFile1.getValidBits());
      assertEquals(1191, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(5L, wavFile1.getSampleRate());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-716.3166879534306);
      doubleArray0[1] = (double) 1191;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) 1191;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 24;
      doubleArray0[6] = (double) 1191;
      doubleArray0[7] = (double) 0L;
      boolean boolean0 = mockFile0.setWritable(false, true);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?WuQNO_vdOB/,zA?WuQNO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?WuQNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?WuQNO_vdOB", mockFile0.getParent());
      assertTrue(boolean0);
      
      int int0 = wavFile1.writeFrames(doubleArray0, 9);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?WuQNO_vdOB/,zA?WuQNO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?WuQNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?WuQNO_vdOB", mockFile0.getParent());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(24, wavFile1.getValidBits());
      assertEquals(1191, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(5L, wavFile1.getSampleRate());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new double[] {(-716.3166879534306), 1191.0, 1191.0, 1191.0, 0.0, 24.0, 1191.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      
      long long0 = wavFile0.getSampleRate();
      assertNotSame(wavFile0, wavFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?WuQNO_vdOB/,zA?WuQNO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?WuQNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?WuQNO_vdOB", mockFile0.getParent());
      assertEquals(1191, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2598L;
      doubleArray0[1] = (double) 12;
      doubleArray0[0] = (double) 10;
      int int1 = wavFile1.readFrames(doubleArray0, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {10.0, 12.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2598L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 10;
      longArray0[3] = 0L;
      int int2 = wavFile1.readFrames(longArray0, 10, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new long[] {2598L, 0L, 10L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.readFrames((long[][]) null, (-1505), 234);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0, int3);
      
      int int4 = wavFile1.readFrames(doubleArray0, (-39), 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new double[] {10.0, 12.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int4);
      
      int int5 = wavFile0.writeFrames((long[][]) null, 12, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile0, wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertEquals(0, int5);
      
      int int6 = wavFile1.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(10, int6);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 10;
      longArray0[3] = (long) 10;
      int int1 = wavFile1.readFrames(longArray0, 10, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 10L, 0L, 10L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int1);
      
      long[][] longArray1 = new long[8][8];
      int int2 = wavFile1.readFrames(longArray1, 6);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, longArray1.length);
      assertEquals(0, int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 20;
      double[][] doubleArray1 = new double[3][2];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 10L;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 6;
      doubleArray2[4] = (double) 10;
      doubleArray2[5] = (double) 10;
      doubleArray2[6] = (double) 10L;
      doubleArray2[7] = (double) 20;
      doubleArray2[8] = (double) 20;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      int int3 = wavFile1.readFrames(doubleArray1, 65506, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, int3);
      
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = (double) 10;
      int int4 = wavFile1.readFrames(doubleArray0, 0, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {6.0, 20.0, 20.0, 20.0, 10.0, 0.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65520, 65520, 65520, 65520);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("(=*O", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(65520L, wavFile0.getFramesRemaining());
      assertEquals(65520, wavFile0.getValidBits());
      assertEquals(65520L, wavFile0.getSampleRate());
      assertEquals(65520L, wavFile0.getNumFrames());
      assertEquals(65520, wavFile0.getNumChannels());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 65520;
      doubleArray0[1] = (double) 65520;
      doubleArray0[2] = (double) 65520;
      doubleArray0[3] = (double) 65520;
      // Undeclared exception!
      wavFile0.writeFrames(doubleArray0, 65520);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 25, 0L, 25, 25);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(25, wavFile0.getValidBits());
      assertEquals(25L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(25, wavFile0.getNumChannels());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[2][5];
      int int0 = wavFile1.readFrames(intArray0, 1792, (-2364));
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(2, intArray0.length);
      assertEquals((-2364), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[0][4];
      int int0 = wavFile1.readFrames(intArray0, (-2505));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0, intArray0.length);
      assertEquals((-2505), int0);
      
      WavFile wavFile2 = WavFile.openWavFile(mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotNull(wavFile2);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(10, wavFile2.getNumChannels());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(12, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(2598L, wavFile2.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.equals((Object)mockFile0));
      
      int int0 = 12;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2598L;
      doubleArray0[1] = (double) 12;
      doubleArray0[0] = (double) 10;
      int int2 = wavFile1.readFrames(doubleArray0, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {10.0, 12.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int2);
      
      double[][] doubleArray1 = new double[0][6];
      int int3 = wavFile1.readFrames(doubleArray1, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, int3);
      
      File file1 = MockFile.createTempFile("com.github.psambit9791.wavfile.WavFileException", ",zA?W$]NO_vdOB");
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotNull(file1);
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0,zA?W$]NO_vdOB", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertEquals("/tmp", file1.getParent());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0,zA?W$]NO_vdOB", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      
      int int4 = wavFile1.readFrames((long[][]) null, (-1505), 234);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      WavFile wavFile2 = WavFile.newWavFile(mockFile0, 10, 12, 10, 10);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotNull(wavFile2);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(10L, wavFile2.getSampleRate());
      assertEquals(12L, wavFile2.getFramesRemaining());
      assertEquals(10, wavFile2.getNumChannels());
      assertEquals(12L, wavFile2.getNumFrames());
      assertEquals(10, wavFile2.getValidBits());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      
      try { 
        wavFile2.readFrames((long[][]) null, (-425));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 232, 1327L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1327L, wavFile0.getSampleRate());
      assertEquals(232, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(7L, wavFile0.getNumFrames());
      
      wavFile0.close();
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(45L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1327L, wavFile0.getSampleRate());
      assertEquals(232, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(7L, wavFile0.getNumFrames());
      
      long long0 = wavFile0.getFramesRemaining();
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(45L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1327L, wavFile0.getSampleRate());
      assertEquals(232, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7L, long0);
      
      int[][] intArray0 = new int[4][4];
      int[] intArray1 = new int[8];
      intArray1[0] = (-140);
      intArray1[1] = 7;
      intArray1[2] = 7;
      intArray1[3] = 7;
      intArray1[4] = 7;
      intArray1[5] = 232;
      intArray1[6] = 232;
      intArray1[7] = 7;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-140);
      intArray2[1] = (-140);
      intArray2[2] = 232;
      intArray2[3] = 232;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 232;
      intArray3[1] = 232;
      intArray3[2] = 232;
      intArray3[3] = 232;
      intArray3[4] = (-140);
      intArray3[5] = 232;
      intArray3[6] = (-140);
      intArray3[7] = (-140);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-140);
      intArray4[1] = 232;
      intArray0[3] = intArray4;
      try { 
        wavFile0.readFrames(intArray0, (-1), (-1650));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 0L, 5, 0L);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(5, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      int int0 = wavFile1.readFrames(doubleArray0, 5);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(5, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new double[] {5.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.equals((Object)mockFile0));
      
      int int0 = 12;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2598L;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 10;
      int int2 = wavFile1.readFrames(doubleArray0, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {2598.0, 12.0, 10.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.readFrames((long[][]) null, (-1505), 247);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      WavFile wavFile2 = WavFile.newWavFile(mockFile0, 10, 12, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotNull(wavFile2);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile2.getValidBits());
      assertEquals(10L, wavFile2.getSampleRate());
      assertEquals(12L, wavFile2.getFramesRemaining());
      assertEquals(10, wavFile2.getNumChannels());
      assertEquals(12L, wavFile2.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      
      try { 
        wavFile2.readFrames((long[][]) null, (-425));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 0L, 5, 5);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(5L, wavFile0.getSampleRate());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(5L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[6][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1;
      intArray3[1] = 5;
      intArray3[2] = 5;
      intArray3[3] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 1624;
      intArray4[3] = 5;
      intArray4[4] = 5;
      intArray4[5] = 5;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 5;
      intArray5[1] = 1624;
      intArray5[2] = 1;
      intArray5[3] = 1624;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 5;
      intArray6[1] = 1624;
      intArray6[2] = (-1865);
      intArray6[3] = (-1946);
      intArray6[4] = 5;
      intArray6[5] = 1;
      intArray6[6] = 1;
      intArray0[5] = intArray6;
      int int0 = wavFile1.readFrames(intArray0, 1624);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(5L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 8, 1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.readFrames((long[][]) null, (-1), (-1));
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals((-1), int0);
      
      long long0 = wavFile1.getFramesRemaining();
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = 1635017060L;
      longArray0[3] = (long) 10;
      int int2 = wavFile1.readFrames(longArray0, 10, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new long[] {0L, 10L, 1635017060L, 10L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(10, int3);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 10;
      intArray0[2] = 10;
      double[][] doubleArray0 = new double[0][1];
      long[][] longArray1 = new long[8][8];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[2] = longArray0;
      longArray1[6] = longArray0;
      longArray1[6] = longArray0;
      int int4 = wavFile1.readFrames(longArray1, (-21));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(8, longArray1.length);
      assertEquals((-21), int4);
      
      try { 
        wavFile1.writeFrames(doubleArray0, 10, (-318));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<", "7\"Xx<");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7\"Xx<");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals("/home/user/7\"Xx<", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/7\"Xx</7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 65535;
      intArray1[2] = 1;
      intArray1[3] = 33;
      intArray1[4] = 10;
      intArray1[5] = 3050;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray1[8] = 65535;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 33;
      intArray2[1] = 1;
      intArray2[2] = 3050;
      intArray2[3] = 2329;
      intArray2[4] = 1;
      intArray2[5] = 65535;
      intArray2[6] = 1;
      intArray0[1] = intArray2;
      int int0 = wavFile0.writeFrames(intArray0, 1, 625);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals("/home/user/7\"Xx<", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/7\"Xx</7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sp");
      assertNotNull(mockFile0);
      
      String string0 = mockFile0.getAbsolutePath();
      assertNotNull(string0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("sp", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("sp", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/sp", string0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 0L, 2, 2);
      assertNotNull(wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("sp", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("sp", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2L, wavFile0.getSampleRate());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("sp", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("sp", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2, wavFile1.getNumChannels());
      assertEquals(2, wavFile1.getValidBits());
      assertEquals(2L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.readFrames((long[]) null, 2, (-2618));
      assertNotSame(wavFile1, wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("sp", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("sp", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2, wavFile1.getNumChannels());
      assertEquals(2, wavFile1.getValidBits());
      assertEquals(2L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals((-2618), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(&pN");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65505, 65505, 65505, 65505);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("(&pN", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("(&pN", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(65505L, wavFile0.getNumFrames());
      assertEquals(65505, wavFile0.getNumChannels());
      assertEquals(65505, wavFile0.getValidBits());
      assertEquals(65505L, wavFile0.getSampleRate());
      assertEquals(65505L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[4];
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      wavFile0.writeFrames(intArray1, 65505);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f_=?G/xMcU8[u)n52/!");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1;
      long[] longArray0 = new long[22];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = 1347L;
      longArray0[4] = (long) 1;
      int int0 = wavFile0.writeFrames(longArray0, (-2925));
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(22, longArray0.length);
      assertEquals((-2925), int0);
      
      int int1 = wavFile0.writeFrames(longArray0, 0, 22);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertFalse(int1 == int0);
      assertEquals(22, longArray0.length);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<");
      assertNotNull(mockFile0);
      
      int int0 = 10;
      int int1 = 1;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 10;
      int int2 = 65535;
      int int3 = 2417;
      int[] intArray0 = new int[9];
      intArray0[0] = 2417;
      intArray0[1] = 1;
      intArray0[0] = 1;
      intArray0[4] = 2417;
      intArray0[5] = 65535;
      intArray0[6] = 2417;
      intArray0[7] = 65535;
      int int4 = (-2309);
      intArray0[8] = (-2309);
      int int5 = wavFile0.writeFrames(intArray0, 1, 1);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertArrayEquals(new int[] {1, 1, 0, 0, 2417, 65535, 2417, 65535, (-2309)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1, int5);
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Header chunk size (38) does not match file size (44)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1di1P)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2061, 2061, 2061, 2061);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getNumFrames());
      
      wavFile0.close();
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[0];
      try { 
        wavFile0.writeFrames(doubleArray0, 2061);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      int int0 = wavFile0.writeFrames(doubleArray0, 1, 8);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int0);
      
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean0 = mockFile0.delete();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertTrue(boolean0);
      
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      int int1 = wavFile0.writeFrames(doubleArray1, 1, 1846);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray1.length);
      assertEquals(0, int1);
      
      try { 
        wavFile0.readFrames(doubleArray0, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 25, 0L, 25, 25);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(25L, wavFile0.getSampleRate());
      assertEquals(25, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(25, wavFile0.getValidBits());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(25, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[2][5];
      int int0 = wavFile1.readFrames(intArray0, 25, 25);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(25, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 10;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 10;
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 65535;
      longArray1[1] = (long) 65535;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 65535;
      longArray2[1] = (long) 1;
      longArray2[2] = (long) 65535;
      longArray2[3] = (long) 65535;
      longArray2[4] = (long) 1;
      longArray2[5] = (long) 2245;
      longArray2[6] = (long) 10;
      longArray2[7] = 24L;
      longArray2[5] = (long) 1;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 65535;
      doubleArray0[1] = (double) 24L;
      longArray3[2] = 24L;
      longArray3[3] = (long) 65535;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 24L;
      longArray0[3] = longArray1;
      int int0 = wavFile0.writeFrames(longArray0, 65535);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(4, longArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<", "7\"Xx<");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertEquals("/home/user/7\"Xx</7\"Xx<", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals("/home/user/7\"Xx<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      int int0 = wavFile0.writeFrames(doubleArray1, 1, 1073741824);
      assertEquals("/home/user/7\"Xx</7\"Xx<", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals("/home/user/7\"Xx<", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(1, doubleArray1.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      int[] intArray0 = new int[9];
      int int0 = wavFile0.writeFrames(intArray0, 10);
      assertNotSame(mockFile0, mockFile1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      long long0 = wavFile0.getNumFrames();
      assertNotSame(mockFile0, mockFile1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7\"Xx<");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      
      double[] doubleArray0 = new double[4];
      boolean boolean0 = mockFile0.setReadable(true, false);
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertTrue(boolean0);
      
      WavFile wavFile1 = WavFile.newWavFile(mockFile0, 1, 1495, 10, 1495);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1495L, wavFile1.getFramesRemaining());
      assertEquals(1495L, wavFile1.getSampleRate());
      assertEquals(1495L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      int int0 = wavFile0.writeFrames(doubleArray1, 22);
      assertNotSame(wavFile0, wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("7\"Xx<", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("7\"Xx<", mockFile0.getName());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertEquals(7, doubleArray1.length);
      assertEquals(1, int0);
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Header chunk size (3026) does not match file size (44)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 8, 8, 8);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertEquals(8L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[1] = doubleArray1;
      WavFile wavFile1 = WavFile.newWavFile(mockFile1, 8, 0, 8, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.getNumChannels();
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(8, int0);
      
      WavFile wavFile2 = WavFile.openWavFile(mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotNull(wavFile2);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      
      int int1 = wavFile2.readFrames((long[]) null, 8, 8);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = wavFile2.readFrames(doubleArray0, 531, 1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile2.readFrames(doubleArray0, 531, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int3);
      
      int int4 = wavFile0.getValidBits();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(wavFile0, wavFile1);
      assertNotSame(wavFile0, wavFile2);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertEquals(8L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(wavFile0.equals((Object)wavFile2));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(8, int4);
      
      int int5 = wavFile1.writeFrames(doubleArray0, 0, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile2);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(44L, mockFile1.length());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile2));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 8, 8, 8);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertEquals(8L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[14];
      doubleArray1[1] = (double) 0;
      WavFile wavFile1 = WavFile.newWavFile(mockFile1, 8, 0, 8, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getNumChannels());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.getNumChannels();
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getNumChannels());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(8, int0);
      
      WavFile wavFile2 = WavFile.openWavFile(mockFile0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotNull(wavFile2);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getNumFrames());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      
      wavFile2.close();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getNumFrames());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      
      WavFile wavFile3 = WavFile.openWavFile(mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile3, wavFile2);
      assertNotSame(wavFile3, wavFile1);
      assertNotSame(wavFile3, wavFile0);
      assertNotNull(wavFile3);
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, wavFile3.getNumFrames());
      assertEquals(0L, wavFile3.getSampleRate());
      assertEquals(8, wavFile3.getNumChannels());
      assertEquals(8, wavFile3.getValidBits());
      assertEquals(0L, wavFile3.getFramesRemaining());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile3.equals((Object)wavFile2));
      assertFalse(wavFile3.equals((Object)wavFile1));
      assertFalse(wavFile3.equals((Object)wavFile0));
      
      int int1 = wavFile3.readFrames(doubleArray0, 8, (-1296));
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile3, wavFile2);
      assertNotSame(wavFile3, wavFile1);
      assertNotSame(wavFile3, wavFile0);
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, wavFile3.getNumFrames());
      assertEquals(0L, wavFile3.getSampleRate());
      assertEquals(8, wavFile3.getNumChannels());
      assertEquals(8, wavFile3.getValidBits());
      assertEquals(0L, wavFile3.getFramesRemaining());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile3.equals((Object)wavFile2));
      assertFalse(wavFile3.equals((Object)wavFile1));
      assertFalse(wavFile3.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1296), int1);
      
      int int2 = wavFile1.writeFrames(doubleArray1, (-676), 8);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotSame(wavFile1, wavFile3);
      assertNotSame(wavFile1, wavFile2);
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getNumChannels());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(wavFile1.equals((Object)wavFile3));
      assertFalse(wavFile1.equals((Object)wavFile2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(14, doubleArray1.length);
      assertEquals(0, int2);
      
      try { 
        wavFile3.writeFrames((double[][]) null, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 25, 0L, 25, 25);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(25, wavFile0.getNumChannels());
      assertEquals(25, wavFile0.getValidBits());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      wavFile1.close();
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vtjdOB", ",zA?W$]NO_vtjdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 0L, 5, 0L);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB/,zA?W$]NO_vtjdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vtjdOB", mockFile0.getName());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB/,zA?W$]NO_vtjdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vtjdOB", mockFile0.getName());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      int int0 = wavFile1.readFrames(doubleArray0, 5);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB/,zA?W$]NO_vtjdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vtjdOB", mockFile0.getName());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new double[] {5.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      int int1 = wavFile1.readFrames(doubleArray1, 16, 5);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB/,zA?W$]NO_vtjdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vtjdOB", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vtjdOB", mockFile0.getName());
      assertEquals(5, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(5, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 0L, 8, 8);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8L, wavFile1.getSampleRate());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[2][5];
      int int0 = wavFile1.readFrames(intArray0, 8, 8);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8L, wavFile1.getSampleRate());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      int int1 = wavFile1.readFrames(doubleArray0, 0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8L, wavFile1.getSampleRate());
      assertTrue(int1 == int0);
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      
      long[] longArray0 = new long[34];
      int int0 = wavFile0.getNumChannels();
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, int0);
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 34 out of bounds for length 34
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?$%NS_/'1OB", ",zA?$%NS_/'1OB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 51, 0L, 51, 51);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_/'1OB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_", mockFile0.getParent());
      assertEquals("'1OB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(51L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(51, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(51, wavFile0.getNumChannels());
      
      wavFile0.close();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_/'1OB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_", mockFile0.getParent());
      assertEquals("'1OB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(51L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(51, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(51, wavFile0.getNumChannels());
      
      wavFile0.close();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_/'1OB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_", mockFile0.getParent());
      assertEquals("'1OB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(51L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(51, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(51, wavFile0.getNumChannels());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      boolean boolean0 = file0.mkdir();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean0);
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[0];
      int int0 = wavFile1.readFrames(intArray0, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        wavFile1.writeFrames((double[][]) null, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = 1635017060L;
      longArray0[3] = (long) 10;
      boolean boolean0 = file0.mkdir();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(boolean0);
      
      int int2 = wavFile1.readFrames(longArray0, 10, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {0L, 10L, 1635017060L, 10L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(10, int3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 16;
      intArray0[2] = 10;
      double[][] doubleArray0 = new double[0][1];
      long[][] longArray1 = new long[8][8];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      int int4 = wavFile1.readFrames(longArray1, 6);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(8, longArray1.length);
      assertEquals(0, int4);
      
      try { 
        wavFile1.writeFrames(doubleArray0, 10, (-318));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1di1P)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2061, 2061, 2061, 2061);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getNumFrames());
      assertEquals(2061L, wavFile0.getSampleRate());
      
      wavFile0.close();
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getNumFrames());
      assertEquals(2061L, wavFile0.getSampleRate());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2061;
      try { 
        wavFile0.writeFrames(longArray0, 13, 13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = 1635017060L;
      longArray0[3] = (long) 10;
      int int2 = (-3890);
      try { 
        wavFile1.writeFrames(longArray0, 30, (-3890));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 25, 0L, 25, 25);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(25, wavFile0.getNumChannels());
      assertEquals(25, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(25L, wavFile0.getSampleRate());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(25, wavFile1.getValidBits());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[2][5];
      try { 
        wavFile1.writeFrames(intArray0, 25);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65487, 65487, 65487, 65487);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(65487, wavFile0.getValidBits());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487L, wavFile0.getNumFrames());
      assertEquals(65487, wavFile0.getNumChannels());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((long[]) null, 65487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 8, 1);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1L, wavFile0.getSampleRate());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[23];
      intArray0[0] = 1;
      long long0 = wavFile1.getFramesRemaining();
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0L, long0);
      
      int int0 = wavFile1.readFrames(intArray0, 1);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(23, intArray0.length);
      assertEquals(0, int0);
      
      int int1 = wavFile1.readFrames(intArray0, 0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int1 == int0);
      assertEquals(23, intArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = 1635017060L;
      longArray0[3] = (long) 12;
      int int2 = wavFile1.readFrames(longArray0, 12, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new long[] {0L, 10L, 1635017060L, 12L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(12, int3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 12;
      intArray0[1] = 16;
      intArray0[2] = 12;
      int int4 = wavFile1.readFrames(intArray0, 253);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new int[] {12, 16, 12, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int4);
      
      intArray0[3] = 10;
      WavFile wavFile2 = WavFile.openWavFile(mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotNull(wavFile2);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(10, wavFile2.getNumChannels());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(2598L, wavFile2.getSampleRate());
      assertEquals(12, wavFile2.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2145783344;
      int int5 = wavFile2.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(10, wavFile2.getNumChannels());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(2598L, wavFile2.getSampleRate());
      assertEquals(12, wavFile2.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(10, int5);
      
      WavFile wavFile3 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile3, wavFile0);
      assertNotSame(wavFile3, wavFile2);
      assertNotSame(wavFile3, wavFile1);
      assertNotNull(wavFile3);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(10, wavFile3.getNumChannels());
      assertEquals(0L, wavFile3.getFramesRemaining());
      assertEquals(0L, wavFile3.getNumFrames());
      assertEquals(2598L, wavFile3.getSampleRate());
      assertEquals(12, wavFile3.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile3.equals((Object)wavFile0));
      assertFalse(wavFile3.equals((Object)wavFile2));
      assertFalse(wavFile3.equals((Object)wavFile1));
      
      int int6 = wavFile3.readFrames(intArray1, (-2831));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(wavFile3, wavFile0);
      assertNotSame(wavFile3, wavFile2);
      assertNotSame(wavFile3, wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(10, wavFile3.getNumChannels());
      assertEquals(0L, wavFile3.getFramesRemaining());
      assertEquals(0L, wavFile3.getNumFrames());
      assertEquals(2598L, wavFile3.getSampleRate());
      assertEquals(12, wavFile3.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(wavFile3.equals((Object)wavFile0));
      assertFalse(wavFile3.equals((Object)wavFile2));
      assertFalse(wavFile3.equals((Object)wavFile1));
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertArrayEquals(new int[] {2145783344, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals((-2831), int6);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 8, 1);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.readFrames((long[][]) null, 1, 1);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = 1635017060L;
      longArray0[3] = (long) 12;
      int int2 = wavFile1.readFrames(longArray0, 12, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {0L, 10L, 1635017060L, 12L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(12, int3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 12;
      intArray0[1] = 16;
      intArray0[2] = 12;
      int int4 = wavFile1.readFrames(intArray0, 253);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new int[] {12, 16, 12, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int4);
      
      intArray0[3] = 10;
      intArray0[4] = 12;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 12;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = (long) 12;
      longArray1[2] = 0L;
      int int5 = wavFile0.writeFrames(longArray1, 950, (-26));
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile0, wavFile1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertArrayEquals(new long[] {0L, 12L, 0L}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals((-26), int5);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      int int0 = wavFile1.readFrames(longArray0, 10, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ",z)?W$TNO_vdOB");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 1, 0L, 1191, 1191);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      File file1 = MockFile.createTempFile("R.E3h", "");
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotNull(file1);
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/R.E3h0", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertEquals("R.E3h0", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1281L;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) 1281L;
      doubleArray0[4] = (double) 1191;
      doubleArray0[0] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[6] = (double) 10;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[][] intArray0 = new int[0][4];
      int int0 = wavFile0.writeFrames(intArray0, (-1821), (-1821));
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0, intArray0.length);
      assertEquals((-1821), int0);
      
      int int1 = wavFile0.writeFrames(intArray0, 593, 1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int1 == int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$%Nh_/1OB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 14, 0L, 14, 14);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",zA?W$%Nh_", mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("1OB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$%Nh_/1OB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(14L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(14, wavFile0.getValidBits());
      assertEquals(14, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      
      int int0 = wavFile0.writeFrames((long[][]) null, 14);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",zA?W$%Nh_", mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("1OB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",zA?W$%Nh_/1OB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(14L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(14, wavFile0.getValidBits());
      assertEquals(14, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1281L;
      int int0 = wavFile0.writeFrames((int[]) null, (-2395), 1);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0, int0);
      
      long long0 = wavFile0.getFramesRemaining();
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(&pN");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 14, 2632L, 108, 582L);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("(&pN", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(&pN", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(2632L, wavFile0.getNumFrames());
      assertEquals(582L, wavFile0.getSampleRate());
      assertEquals(14, wavFile0.getNumChannels());
      assertEquals(108, wavFile0.getValidBits());
      assertEquals(2632L, wavFile0.getFramesRemaining());
      
      wavFile0.close();
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("(&pN", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(&pN", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(2632L, wavFile0.getNumFrames());
      assertEquals(582L, wavFile0.getSampleRate());
      assertEquals(14, wavFile0.getNumChannels());
      assertEquals(108, wavFile0.getValidBits());
      assertEquals(2632L, wavFile0.getFramesRemaining());
      
      try { 
        wavFile0.writeFrames((int[]) null, 1179011410, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      wavFile0.close();
      assertNotSame(mockFile0, mockFile1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 745;
      try { 
        wavFile0.writeFrames(intArray0, (-1), 65535);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$VALUES");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 0L, 2, 0L);
      assertNotNull(wavFile0);
      assertEquals("$VALUES", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("$VALUES", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      
      int int0 = wavFile0.writeFrames((int[]) null, 2);
      assertEquals("$VALUES", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("$VALUES", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 1191, 1191);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[9];
      int int0 = wavFile0.writeFrames(doubleArray0, 10);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      long long0 = wavFile0.getSampleRate();
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, long0);
      
      double[][] doubleArray1 = new double[0][5];
      int int1 = wavFile0.writeFrames(doubleArray1, 1, 10);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0, doubleArray1.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0(&pN", "0(&pN");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65505, 65505, 65505, 65505);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/0(&pN", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/0(&pN/0(&pN", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("0(&pN", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(65505L, wavFile0.getFramesRemaining());
      assertEquals(65505L, wavFile0.getSampleRate());
      assertEquals(65505L, wavFile0.getNumFrames());
      assertEquals(65505, wavFile0.getNumChannels());
      assertEquals(65505, wavFile0.getValidBits());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 65505;
      longArray0[1] = (long) 65505;
      longArray0[2] = (long) 65505;
      // Undeclared exception!
      wavFile0.writeFrames(longArray0, 65505);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?$%NS_/'1OB", ",zA?$%NS_/'1OB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 51, 0L, 51, 51);
      assertNotNull(wavFile0);
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("'1OB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_/'1OB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(51L, wavFile0.getSampleRate());
      assertEquals(51, wavFile0.getNumChannels());
      assertEquals(51, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      
      int[][] intArray0 = new int[0][4];
      int int0 = wavFile0.writeFrames(intArray0, 51);
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("'1OB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?$%NS_/'1OB/,zA?$%NS_/'1OB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(51L, wavFile0.getSampleRate());
      assertEquals(51, wavFile0.getNumChannels());
      assertEquals(51, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ",z)?W$TNO_vdOB");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 1, 0L, 1191, 1191);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      File file1 = MockFile.createTempFile("R.E3h", "");
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotNull(file1);
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals("/tmp/R.E3h0", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals("R.E3h0", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1281L;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) 1281L;
      doubleArray0[4] = (double) 1191;
      doubleArray0[0] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 10;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1191;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1191;
      intArray0[1] = intArray2;
      int int0 = wavFile0.writeFrames(intArray0, 1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      int int1 = wavFile0.writeFrames(doubleArray1, 1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, int1);
      
      int int2 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      try { 
        WavFile.openWavFile(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Valid Bits specified in header is greater than 64, this is greater than a long can hold
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 0L, 8, 1);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getSampleRate());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(8, wavFile1.getValidBits());
      assertEquals(1, wavFile1.getNumChannels());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      try { 
        wavFile1.writeFrames((long[][]) null, 8, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      wavFile0.close();
      assertNotSame(mockFile0, mockFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      Path path0 = mockFile0.toPath();
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      long[][] longArray0 = new long[4][2];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 10;
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 10;
      longArray2[1] = (long) 10;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 10;
      longArray3[1] = (long) 10;
      longArray3[2] = (long) 10;
      longArray3[3] = (long) 10;
      longArray3[4] = (long) 10;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = (long) 10;
      longArray4[2] = (long) 10;
      longArray4[3] = (long) 10;
      longArray4[4] = (long) 10;
      longArray4[5] = (long) 10;
      longArray4[6] = (long) 10;
      longArray4[7] = (long) 10;
      longArray4[8] = (long) 10;
      longArray0[3] = longArray4;
      try { 
        wavFile0.writeFrames(longArray0, 10, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(10, int2);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int3 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(12, int3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 12;
      intArray0[1] = 16;
      intArray0[2] = 12;
      int int4 = wavFile1.readFrames(intArray0, 253);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertArrayEquals(new int[] {12, 16, 12, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int4);
      
      intArray0[3] = 10;
      intArray0[4] = 12;
      int int5 = (-738);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 12;
      try { 
        wavFile0.readFrames(doubleArray0, 1431655765);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?$NvdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?$NvdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?$NvdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?$NvdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?$NvdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray0 = new int[1];
      int int0 = wavFile1.readFrames(intArray0, 10, 10);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?$NvdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?$NvdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        wavFile1.writeFrames(intArray0, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      int int0 = 253;
      int int1 = 7;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 253, 1262L);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1262L, wavFile0.getSampleRate());
      assertEquals(7, wavFile0.getNumChannels());
      
      int[] intArray0 = new int[4];
      intArray0[2] = 7;
      boolean boolean0 = mockFile0.mkdir();
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean0);
      
      WavFile wavFile1 = WavFile.newWavFile(mockFile0, 7, 9223372036854775807L, 7, 1L);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(9223372036854775807L, wavFile1.getNumFrames());
      assertEquals(7, wavFile1.getValidBits());
      assertEquals(9223372036854775807L, wavFile1.getFramesRemaining());
      assertEquals(7, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int2 = wavFile1.getNumChannels();
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(9223372036854775807L, wavFile1.getNumFrames());
      assertEquals(7, wavFile1.getValidBits());
      assertEquals(9223372036854775807L, wavFile1.getFramesRemaining());
      assertEquals(7, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(7, int2);
      
      int int3 = wavFile1.getNumChannels();
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, wavFile1.getSampleRate());
      assertEquals(9223372036854775807L, wavFile1.getNumFrames());
      assertEquals(7, wavFile1.getValidBits());
      assertEquals(9223372036854775807L, wavFile1.getFramesRemaining());
      assertEquals(7, wavFile1.getNumChannels());
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(7, int3);
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Header chunk size (30) does not match file size (44)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 523);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(523L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte) (-14), (byte)1, (byte)0, (byte)12}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 3331;
      intArray0[2] = 16;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (int) (byte) (-14);
      int int0 = wavFile0.writeFrames(intArray0, (-3347), (int) (byte) (-14));
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(523L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertArrayEquals(new int[] {0, 3331, 16, 12, (-14), 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-14), int0);
      
      long long0 = wavFile0.getFramesRemaining();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(523L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65487, 65487, 65487, 65487);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("(=*O", mockFile0.getName());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487, wavFile0.getValidBits());
      assertEquals(65487L, wavFile0.getNumFrames());
      assertEquals(65487, wavFile0.getNumChannels());
      
      long long0 = wavFile0.getFramesRemaining();
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("(=*O", mockFile0.getName());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487, wavFile0.getValidBits());
      assertEquals(65487L, wavFile0.getNumFrames());
      assertEquals(65487, wavFile0.getNumChannels());
      assertEquals(65487L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*7{ck2T1,Sy/r'");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 2, 2, 2);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("r'", mockFile0.getName());
      assertEquals("*7{ck2T1,Sy/r'", mockFile0.toString());
      assertEquals("*7{ck2T1,Sy", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(2L, wavFile0.getFramesRemaining());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2L, wavFile0.getNumFrames());
      assertEquals(2L, wavFile0.getSampleRate());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-2304);
      intArray0[3] = 2;
      intArray0[4] = 2;
      int int0 = wavFile0.writeFrames(intArray0, 2);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("r'", mockFile0.getName());
      assertEquals("*7{ck2T1,Sy/r'", mockFile0.toString());
      assertEquals("*7{ck2T1,Sy", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2L, wavFile0.getNumFrames());
      assertEquals(2L, wavFile0.getSampleRate());
      assertArrayEquals(new int[] {2, 2, (-2304), 2, 2}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 398, 398, 8, 398);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(398L, wavFile0.getFramesRemaining());
      assertEquals(398L, wavFile0.getSampleRate());
      assertEquals(398, wavFile0.getNumChannels());
      assertEquals(398L, wavFile0.getNumFrames());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((int[]) null, 2114946016, 1943);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 39, 39, 39, 39);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(39L, wavFile0.getFramesRemaining());
      assertEquals(39L, wavFile0.getNumFrames());
      assertEquals(39, wavFile0.getNumChannels());
      assertEquals(39, wavFile0.getValidBits());
      assertEquals(39L, wavFile0.getSampleRate());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((int[][]) null, (-10), 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 11, 0L, 11, 11);
      assertNotNull(wavFile0);
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(11, wavFile0.getNumChannels());
      assertEquals(11, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(11L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(11L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(11, wavFile1.getNumChannels());
      assertEquals(11, wavFile1.getValidBits());
      assertFalse(wavFile1.equals((Object)wavFile0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 8, 8, 8);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[14];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) 0;
      WavFile wavFile1 = WavFile.newWavFile(mockFile1, 8, 0, 8, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(44L, mockFile1.length());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.getNumChannels();
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(44L, mockFile1.length());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(8, int0);
      
      WavFile wavFile2 = WavFile.openWavFile(mockFile0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotNull(wavFile2);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(8, wavFile2.getNumChannels());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      
      WavFile wavFile3 = WavFile.openWavFile(mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile3, wavFile1);
      assertNotSame(wavFile3, wavFile0);
      assertNotSame(wavFile3, wavFile2);
      assertNotNull(wavFile3);
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(44L, mockFile1.length());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, wavFile3.getNumFrames());
      assertEquals(0L, wavFile3.getFramesRemaining());
      assertEquals(8, wavFile3.getNumChannels());
      assertEquals(8, wavFile3.getValidBits());
      assertEquals(0L, wavFile3.getSampleRate());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile3.equals((Object)wavFile1));
      assertFalse(wavFile3.equals((Object)wavFile0));
      assertFalse(wavFile3.equals((Object)wavFile2));
      
      int int1 = wavFile3.readFrames((long[]) null, 8, 8);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile3, wavFile1);
      assertNotSame(wavFile3, wavFile0);
      assertNotSame(wavFile3, wavFile2);
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertEquals(44L, mockFile1.length());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, wavFile3.getNumFrames());
      assertEquals(0L, wavFile3.getFramesRemaining());
      assertEquals(8, wavFile3.getNumChannels());
      assertEquals(8, wavFile3.getValidBits());
      assertEquals(0L, wavFile3.getSampleRate());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile3.equals((Object)wavFile1));
      assertFalse(wavFile3.equals((Object)wavFile0));
      assertFalse(wavFile3.equals((Object)wavFile2));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = wavFile0.getValidBits();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(wavFile0, wavFile3);
      assertNotSame(wavFile0, wavFile1);
      assertNotSame(wavFile0, wavFile2);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(wavFile0.equals((Object)wavFile3));
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(wavFile0.equals((Object)wavFile2));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      try { 
        wavFile2.writeFrames(doubleArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 25, 0L, 25, 25);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(25, wavFile0.getValidBits());
      assertEquals(25L, wavFile0.getSampleRate());
      assertEquals(25, wavFile0.getNumChannels());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(25L, wavFile1.getSampleRate());
      assertEquals(25, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(25, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray0 = new int[2][5];
      try { 
        wavFile1.writeFrames(intArray0, 25, 25);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals("/home/user", file0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 2, 12L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(12L, wavFile0.getSampleRate());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 10;
      try { 
        wavFile0.readFrames(intArray0, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 14, 0L, 1191, 1191);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(14, wavFile0.getNumChannels());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-172.895548627093);
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 1191;
      doubleArray0[4] = (double) 14;
      int int0 = wavFile0.writeFrames(doubleArray0, 1191, 1803);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(14, wavFile0.getNumChannels());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertArrayEquals(new double[] {(-172.895548627093), 10.0, 10.0, 1191.0, 14.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      
      try { 
        WavFile.newWavFile(mockFile0, 14, 36L, 0, 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of valid bits, valid range 2 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO;_vdOB", ",z)?W$TNO;_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 311, 1262L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO;_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO;_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,z)?W$TNO;_vdOB/,z)?W$TNO;_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(311, wavFile0.getValidBits());
      assertEquals(1262L, wavFile0.getSampleRate());
      assertEquals(7L, wavFile0.getFramesRemaining());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      long long0 = 0L;
      WavFile wavFile0 = WavFile.newWavFile(file0, 1, 0L, 1191, 1191);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1281L;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) 1281L;
      doubleArray0[4] = (double) 1191;
      doubleArray0[0] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 10;
      long[] longArray0 = new long[0];
      int int1 = wavFile0.writeFrames(longArray0, 1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, int1);
      
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int int2 = wavFile0.writeFrames(doubleArray1, 1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, int2);
      
      int int3 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", ",z)?W$TNO_vdOB", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g");
      assertNotNull(mockFile0);
      
      int int0 = 577;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 577, 0L, 577, 577);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("FTg~_g", mockFile0.getName());
      assertEquals(577, wavFile0.getValidBits());
      assertEquals(577, wavFile0.getNumChannels());
      assertEquals(577L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Valid Bits specified in header is greater than 64, this is greater than a long can hold
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ",z)?W$TNO_vdOB");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 1, 0L, 1191, 1191);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1281L;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) 1281L;
      doubleArray0[4] = (double) 1191;
      doubleArray0[0] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 10;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int int0 = wavFile0.writeFrames(doubleArray1, 1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(4, doubleArray1.length);
      assertEquals(0, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = 0L;
      int int2 = wavFile0.writeFrames(longArray0, 10, 32);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {1L, 10L, 10L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 255, 0L, 255, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(255, wavFile0.getNumChannels());
      assertEquals(255, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.writeFrames((double[][]) null, 255);
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(255, wavFile0.getNumChannels());
      assertEquals(255, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ",z)?W$TNO_vdOB");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 1, 0L, 1191, 1191);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1281L;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) 1281L;
      doubleArray0[4] = (double) 1191;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 10;
      doubleArray0[8] = (double) 0L;
      int int0 = wavFile0.writeFrames(doubleArray0, 640);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertArrayEquals(new double[] {1281.0, 10.0, 1191.0, 1281.0, 1191.0, 0.0, 0.0, 10.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      long long0 = wavFile0.getSampleRate();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(1191L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1191, wavFile0.getValidBits());
      assertEquals(1, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(1191L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$VALUES");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 0L, 2, 0L);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$VALUES", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("$VALUES", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      
      int int0 = wavFile0.writeFrames((double[]) null, 2);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("$VALUES", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("$VALUES", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(&pN");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65505, 65505, 65505, 65505);
      assertNotNull(wavFile0);
      assertEquals("(&pN", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("(&pN", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(65505, wavFile0.getNumChannels());
      assertEquals(65505, wavFile0.getValidBits());
      assertEquals(65505L, wavFile0.getSampleRate());
      assertEquals(65505L, wavFile0.getFramesRemaining());
      assertEquals(65505L, wavFile0.getNumFrames());
      
      long long0 = wavFile0.getSampleRate();
      assertEquals("(&pN", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("(&pN", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(65505, wavFile0.getNumChannels());
      assertEquals(65505, wavFile0.getValidBits());
      assertEquals(65505L, wavFile0.getSampleRate());
      assertEquals(65505L, wavFile0.getFramesRemaining());
      assertEquals(65505L, wavFile0.getNumFrames());
      assertEquals(65505L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ")");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 65535, 676L, 10, 1163280727L);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(676L, wavFile0.getFramesRemaining());
      assertEquals(1163280727L, wavFile0.getSampleRate());
      assertEquals(65535, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(676L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 65535;
      doubleArray0[1] = (double) 1281L;
      doubleArray0[2] = (double) 1163280727L;
      int int0 = wavFile0.writeFrames(doubleArray0, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(676L, wavFile0.getFramesRemaining());
      assertEquals(1163280727L, wavFile0.getSampleRate());
      assertEquals(65535, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(676L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertArrayEquals(new double[] {65535.0, 1281.0, 1.163280727E9}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 253, 1281L);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[4];
      intArray0[2] = 7;
      boolean boolean0 = mockFile0.mkdir();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(boolean0);
      
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1941.334067);
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (double) 253;
      doubleArray1[4] = (double) 7;
      doubleArray1[5] = (double) (-2107);
      doubleArray1[6] = (double) 7;
      doubleArray1[7] = (double) (-3055);
      doubleArray1[8] = (double) 8;
      doubleArray0[0] = doubleArray1;
      int int0 = wavFile0.writeFrames(doubleArray0, (-2107));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1, doubleArray0.length);
      assertEquals((-2107), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 19, 19, 19, 19);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(19L, wavFile0.getSampleRate());
      assertEquals(19L, wavFile0.getNumFrames());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19, wavFile0.getNumChannels());
      
      try { 
        wavFile0.readFrames((double[]) null, 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-951);
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1774, 0L, 1774, 0L);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(1774, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(1774, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1774;
      doubleArray0[2] = (double) (-951);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 65535;
      doubleArray0[6] = (double) 65535;
      try { 
        wavFile0.readFrames(doubleArray0, 7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      String string0 = mockFile0.getAbsolutePath();
      assertNotNull(string0);
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", string0);
      
      WavFile wavFile1 = WavFile.newWavFile(mockFile0, 24, 24, 65535, 24);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(24L, wavFile1.getNumFrames());
      assertEquals(24, wavFile1.getNumChannels());
      assertEquals(24L, wavFile1.getSampleRate());
      assertEquals(65535, wavFile1.getValidBits());
      assertEquals(24L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = (-951);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 24;
      intArray2[1] = (-951);
      intArray2[2] = (-951);
      intArray2[3] = 22;
      intArray2[4] = 85;
      intArray2[5] = (-951);
      intArray2[6] = (-951);
      intArray2[7] = (-951);
      // Undeclared exception!
      wavFile1.writeFrames(intArray2, 1, 22);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      int int0 = wavFile0.writeFrames(doubleArray0, 10, 10);
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      intArray0[3] = 10;
      int int1 = wavFile0.writeFrames(intArray0, 10, 10);
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {10, 10, 10, 10}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int int2 = wavFile1.readFrames(intArray1, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(6, intArray1.length);
      assertEquals(0, int2);
      
      try { 
        wavFile1.writeFrames(doubleArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 4868, 4868, 1934, 255L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(4868L, wavFile0.getNumFrames());
      assertEquals(4868L, wavFile0.getFramesRemaining());
      assertEquals(4868, wavFile0.getNumChannels());
      assertEquals(1934, wavFile0.getValidBits());
      assertEquals(255L, wavFile0.getSampleRate());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-144.6);
      doubleArray0[1] = (double) 4868;
      doubleArray0[2] = (double) 4868;
      doubleArray0[3] = (double) 255L;
      int int0 = wavFile0.writeFrames(doubleArray0, 1934, (-2064));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(4868L, wavFile0.getNumFrames());
      assertEquals(4868L, wavFile0.getFramesRemaining());
      assertEquals(4868, wavFile0.getNumChannels());
      assertEquals(1934, wavFile0.getValidBits());
      assertEquals(255L, wavFile0.getSampleRate());
      assertArrayEquals(new double[] {(-144.6), 4868.0, 4868.0, 255.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-2064), int0);
      
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) (-2064);
      longArray1[1] = (long) (-2064);
      longArray1[2] = (long) (-2064);
      longArray1[3] = (long) 1934;
      longArray1[4] = (long) (-2064);
      longArray1[5] = (long) 4868;
      longArray1[6] = (long) 4868;
      longArray1[7] = (long) (-2064);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 255L;
      longArray0[1] = longArray2;
      try { 
        wavFile0.readFrames(longArray0, 1934);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFile$IOState");
      assertNotNull(mockFile0);
      
      int int0 = 10;
      try { 
        WavFile.newWavFile(mockFile0, 65535, 65535, 10, (-1L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Sample rate must be positive
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((double[][]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T", "T");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 6, 6);
      assertNotNull(wavFile0);
      assertEquals("/home/user/T", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(6L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(6, wavFile0.getValidBits());
      
      double[][] doubleArray0 = new double[3][4];
      int int0 = wavFile0.writeFrames(doubleArray0, 1);
      assertEquals("/home/user/T", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(6L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(6, wavFile0.getValidBits());
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      int int1 = wavFile0.writeFrames(doubleArray0, 1);
      assertEquals("/home/user/T", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(6L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(6, wavFile0.getValidBits());
      assertFalse(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int1);
      
      wavFile0.close();
      assertEquals("/home/user/T", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("T", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(46L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(6L, wavFile0.getSampleRate());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(6, wavFile0.getValidBits());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 11, 0L, 11, 11);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(11L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(11, wavFile0.getNumChannels());
      assertEquals(11, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(11L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(11, wavFile0.getNumChannels());
      assertEquals(11, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(11, int0);
      
      try { 
        wavFile0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W<TNO;_vqOB", ",z)?W<TNO;_vqOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 311, 1237L);
      assertNotNull(wavFile0);
      assertEquals(",z)?W<TNO;_vqOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W<TNO;_vqOB", mockFile0.getParent());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W<TNO;_vqOB/,z)?W<TNO;_vqOB", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(311, wavFile0.getValidBits());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(1237L, wavFile0.getSampleRate());
      assertEquals(7L, wavFile0.getFramesRemaining());
      
      int[][] intArray0 = new int[12][3];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 311);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      wavFile0.close();
      assertNotSame(mockFile0, mockFile1);
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",z)?W$TNO_vdOB");
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 10;
      longArray1[1] = 1635017060L;
      longArray1[2] = (-358L);
      longArray1[3] = (-517L);
      longArray1[4] = (long) 14;
      longArray0[0] = longArray1;
      try { 
        wavFile0.writeFrames(longArray0, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ND]\"8~3");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("ND]\"8~3", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ND]\"8~3", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5L, wavFile0.getSampleRate());
      
      wavFile0.close();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("ND]\"8~3", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ND]\"8~3", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(45L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5L, wavFile0.getSampleRate());
      
      long[][] longArray0 = new long[7][3];
      try { 
        wavFile0.writeFrames(longArray0, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1dP)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2061, 2061, 2061, 2061);
      assertNotNull(wavFile0);
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061L, wavFile0.getNumFrames());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061, wavFile0.getValidBits());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2061;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 2061, 2061);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2061 out of bounds for length 1
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pgC/1");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 4903, 4903, 4903, 4903);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals("pgC", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("pgC/1", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals("1", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(4903L, wavFile0.getFramesRemaining());
      assertEquals(4903L, wavFile0.getSampleRate());
      assertEquals(4903, wavFile0.getValidBits());
      assertEquals(4903L, wavFile0.getNumFrames());
      assertEquals(4903, wavFile0.getNumChannels());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-144.6);
      doubleArray0[1] = (double) 4903;
      doubleArray0[2] = (double) 4903;
      doubleArray0[3] = (double) 4903;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 4903, 4903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4903 out of bounds for length 4
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 10, 1L, 10, 1L);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      int int0 = wavFile0.writeFrames(intArray0, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        wavFile0.readFrames((int[][]) null, 544501094, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65520, 65520, 65520, 65520);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals(65520, wavFile0.getNumChannels());
      assertEquals(65520L, wavFile0.getNumFrames());
      assertEquals(65520L, wavFile0.getSampleRate());
      assertEquals(65520, wavFile0.getValidBits());
      assertEquals(65520L, wavFile0.getFramesRemaining());
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 65520;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 65520;
      doubleArray2[1] = (double) 65520;
      doubleArray2[2] = (double) 65520;
      doubleArray2[3] = (double) 65520;
      doubleArray2[4] = (double) 65520;
      doubleArray2[5] = (double) 65520;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      wavFile0.writeFrames(doubleArray0, 65535);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 15, 15, 15, 15);
      assertNotNull(wavFile0);
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(15, wavFile0.getNumChannels());
      assertEquals(15L, wavFile0.getNumFrames());
      assertEquals(15L, wavFile0.getFramesRemaining());
      assertEquals(15L, wavFile0.getSampleRate());
      assertEquals(15, wavFile0.getValidBits());
      
      double[] doubleArray0 = new double[0];
      int int0 = wavFile0.writeFrames(doubleArray0, 0);
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(15, wavFile0.getNumChannels());
      assertEquals(15L, wavFile0.getNumFrames());
      assertEquals(15L, wavFile0.getFramesRemaining());
      assertEquals(15L, wavFile0.getSampleRate());
      assertEquals(15, wavFile0.getValidBits());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 2558, 2558, 10, 211L);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(211L, wavFile1.getSampleRate());
      assertEquals(2558L, wavFile1.getFramesRemaining());
      assertEquals(2558, wavFile1.getNumChannels());
      assertEquals(2558L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 2558;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 2558;
      doubleArray0[5] = (double) 1281L;
      doubleArray0[6] = (double) 211L;
      doubleArray0[7] = (double) 1281L;
      int int0 = wavFile1.writeFrames(doubleArray0, (-2832));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(211L, wavFile1.getSampleRate());
      assertEquals(2558L, wavFile1.getFramesRemaining());
      assertEquals(2558, wavFile1.getNumChannels());
      assertEquals(2558L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new double[] {10.0, 10.0, 2558.0, 10.0, 2558.0, 1281.0, 211.0, 1281.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-2832), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      
      File file1 = MockFile.createTempFile("/@YXP4kV", ",z)?W$TNO_vdOB");
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotNull(file1);
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals("@YXP4kV0,z)?W$TNO_vdOB", file1.getName());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.exists());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(file1.canWrite());
      assertEquals("/tmp/@YXP4kV0,z)?W$TNO_vdOB", file1.toString());
      assertFalse(file1.isDirectory());
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 325L, 10, 8L);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(325L, wavFile0.getFramesRemaining());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(325L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[4];
      longArray1[0] = 1163280727L;
      longArray1[1] = (-1288L);
      longArray1[2] = (-1288L);
      longArray1[3] = 8L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 9223372036854775807L;
      longArray2[1] = (-509L);
      longArray2[2] = (long) 14;
      longArray2[3] = (long) 14;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 14;
      longArray0[2] = longArray3;
      int int0 = wavFile0.writeFrames(longArray0, 0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(325L, wavFile0.getFramesRemaining());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(325L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(3, longArray0.length);
      assertEquals(0, int0);
      
      try { 
        wavFile0.readFrames(longArray2, 24);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%z)?W$cNO_vdOB", "%z)?W$cNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/%z)?W$cNO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/%z)?W$cNO_vdOB/%z)?W$cNO_vdOB", mockFile0.toString());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      
      double[] doubleArray0 = new double[22];
      int int0 = wavFile0.getValidBits();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/%z)?W$cNO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/%z)?W$cNO_vdOB/%z)?W$cNO_vdOB", mockFile0.toString());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = ",z)?\\W$TNO_vdOB";
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 253, 1281L);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      
      double[] doubleArray0 = null;
      int[] intArray0 = new int[8];
      intArray0[2] = 7;
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/home/user/,z)%3FW$TNO_vdOB", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:/home/user/,z)%3FW$TNO_vdOB", uRI0.toString());
      
      boolean boolean0 = mockFile0.mkdir();
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(boolean0);
      
      intArray0[3] = (-2107);
      intArray0[5] = 7;
      int int0 = wavFile0.getValidBits();
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(253, int0);
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(file0.canRead());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1281L;
      longArray0[1] = (-4055L);
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = 1281L;
      int[][] intArray0 = new int[0][9];
      int int0 = wavFile0.writeFrames(intArray0, 7, 0);
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      wavFile0.close();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertEquals("/home/user", file0.getParent());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 10;
      intArray1[1] = (-49);
      intArray1[2] = (-49);
      intArray1[3] = (-49);
      intArray1[4] = (-49);
      intArray1[5] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-49);
      intArray2[1] = (-49);
      intArray2[2] = (-49);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 2;
      intArray3[1] = 2;
      intArray3[2] = (-49);
      intArray3[3] = (-49);
      intArray3[4] = 2;
      intArray3[5] = 2116;
      intArray3[6] = (-2136799648);
      intArray3[7] = (-49);
      intArray3[8] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-49);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 2;
      intArray6[1] = 10;
      intArray6[2] = 2116;
      intArray6[3] = (-259);
      intArray6[4] = (-49);
      intArray6[5] = (-49);
      intArray6[6] = (-49);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = (-259);
      intArray7[1] = 10;
      intArray7[2] = (-49);
      intArray7[3] = (-2136799648);
      intArray7[4] = (-49);
      intArray7[5] = 2;
      intArray7[6] = 2;
      intArray7[7] = 10;
      intArray7[8] = 2116;
      intArray0[6] = intArray7;
      int int0 = wavFile0.writeFrames(intArray0, (-49));
      assertNotSame(mockFile0, file0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(7, intArray0.length);
      assertEquals((-49), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1409);
      try { 
        wavFile0.readFrames(doubleArray0, (-49), 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ",z)?W$TNO_vdOB");
      assertFalse(boolean0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1281L;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 0;
      int int0 = wavFile0.writeFrames(intArray0, (-1), 0);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertArrayEquals(new int[] {0, 10, 10, 10, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) 10;
      doubleArray2[2] = (double) 0;
      doubleArray1[6] = doubleArray2;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray1, 918, 918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 918 out of bounds for length 7
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?$%N_/O", ",zA?$%N_/O");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        WavFile.newWavFile(mockFile0, 34, 34, 34, 34);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertEquals(24L, wavFile0.getSampleRate());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray1, (-2136799648), 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2136799648 out of bounds for length 7
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%z)?W$cNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      
      try { 
        wavFile0.readFrames((int[][]) null, (-550));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "MM");
      assertNotNull(mockFile0);
      
      int int0 = 24;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MM", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("MM", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24L, wavFile0.getFramesRemaining());
      
      int[][] intArray0 = new int[0][4];
      try { 
        wavFile0.readFrames(intArray0, 27);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?$NvdOB");
      assertNotNull(mockFile0);
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?$NvdOB", mockFile0.getName());
      assertEquals(",zA?$NvdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      
      boolean boolean0 = mockFile0.mkdir();
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?$NvdOB", mockFile0.getName());
      assertEquals(",zA?$NvdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      try { 
        wavFile0.readFrames(intArray0, 10, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      wavFile0.close();
      assertNotSame(mockFile0, mockFile1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      boolean boolean0 = mockFile0.setWritable(true);
      assertNotSame(mockFile0, mockFile1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean0);
      
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      try { 
        wavFile0.readFrames(intArray0, 10, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      int[] intArray0 = null;
      int int1 = 0;
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 10;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 10;
      doubleArray1[5] = (double) 10;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 10;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 10;
      doubleArray4[5] = (double) 10;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 10;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (double) 10;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = (double) 0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 388.44378860802;
      doubleArray7[3] = (double) 10;
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = (double) 0;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 388.44378860802;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (double) 10;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = (double) 10;
      doubleArray9[5] = (double) 0;
      doubleArray9[6] = (double) 10;
      doubleArray9[7] = 0.0;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      wavFile0.close();
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      intArray0[7] = 10;
      try { 
        wavFile0.writeFrames(intArray0, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(&pN");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65505, 65505, 65505, 65505);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("(&pN", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(&pN", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(65505, wavFile0.getValidBits());
      assertEquals(65505L, wavFile0.getSampleRate());
      assertEquals(65505, wavFile0.getNumChannels());
      assertEquals(65505L, wavFile0.getFramesRemaining());
      assertEquals(65505L, wavFile0.getNumFrames());
      
      wavFile0.close();
      assertEquals(45L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("(&pN", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(&pN", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(65505, wavFile0.getValidBits());
      assertEquals(65505L, wavFile0.getSampleRate());
      assertEquals(65505, wavFile0.getNumChannels());
      assertEquals(65505L, wavFile0.getFramesRemaining());
      assertEquals(65505L, wavFile0.getNumFrames());
      
      int[] intArray0 = new int[4];
      try { 
        wavFile0.writeFrames(intArray0, 65505);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1281L;
      longArray0[1] = (-4055L);
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = 1281L;
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.writeFrames(longArray0, 10, (-2774));
      assertNotSame(mockFile0, file0);
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {1281L, (-4055L), 10L, 10L, 1281L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-2774), int1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%z)?$cNOvdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("%z)?$cNOvdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("%z)?$cNOvdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      
      int int0 = wavFile0.getNumChannels();
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("%z)?$cNOvdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("%z)?$cNOvdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      wavFile0.close();
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      int int1 = (-1632);
      int int2 = 1;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = 2209076108L;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) (-1632);
      longArray0[5] = (long) (-1632);
      longArray0[6] = (long) 1;
      longArray0[7] = (-1L);
      try { 
        wavFile0.writeFrames(longArray0, (-1632));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1di1P)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2061, 2061, 2061, 2061);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getNumFrames());
      
      wavFile0.close();
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("N}cRA1di1P)%\"?", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getNumFrames());
      
      try { 
        wavFile0.writeFrames((long[]) null, 2061);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 523);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(523L, wavFile0.getSampleRate());
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)1;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 523;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)116;
      longArray0[3] = (long) 523;
      longArray0[4] = (long) 10;
      longArray0[5] = 1179011410L;
      longArray0[6] = (long) (byte)1;
      int int0 = wavFile0.writeFrames(longArray0, (-1197));
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(523L, wavFile0.getSampleRate());
      assertArrayEquals(new long[] {523L, 1L, 116L, 523L, 10L, 1179011410L, 1L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1197), int0);
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, (int) (byte)116, 2913);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 116 out of bounds for length 7
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 65487;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65487, 65487, 65487, 65487);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals("(=*O", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(65487, wavFile0.getNumChannels());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487L, wavFile0.getNumFrames());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487, wavFile0.getValidBits());
      
      int[] intArray0 = new int[8];
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 65487;
      longArray1[1] = 15L;
      longArray1[2] = (long) 65487;
      longArray1[3] = (long) 65487;
      longArray1[4] = (long) 65487;
      longArray1[5] = (long) 65487;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 15L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1635017060L;
      longArray0[2] = longArray3;
      // Undeclared exception!
      wavFile0.writeFrames(longArray0, 65487);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      File file0 = MockFile.createTempFile("%t1?Kc", "%t1?Kc");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/%t1?Kc0%t1?Kc", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("%t1?Kc0%t1?Kc", file0.getName());
      
      try { 
        WavFile.newWavFile(file0, 795, 795, 2145513479, 795);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of valid bits, valid range 2 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      long long0 = 972L;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 4264, 972L, 4264, 972L);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(972L, wavFile0.getFramesRemaining());
      assertEquals(4264, wavFile0.getNumChannels());
      assertEquals(4264, wavFile0.getValidBits());
      assertEquals(972L, wavFile0.getSampleRate());
      assertEquals(972L, wavFile0.getNumFrames());
      
      int int0 = 2143385396;
      try { 
        WavFile.newWavFile(mockFile0, 3316, 133L, 2143385396, 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of valid bits, valid range 2 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 7, 7);
      assertNotNull(wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, wavFile0.getSampleRate());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7, wavFile0.getValidBits());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(7, wavFile0.getNumChannels());
      
      double[] doubleArray0 = null;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = (-2107);
      intArray0[2] = 253;
      intArray0[3] = (-2107);
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = (-2107);
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 2091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1281L;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 12;
      boolean boolean0 = file0.mkdir();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean0);
      
      int int0 = wavFile0.writeFrames(intArray0, (-1), 12);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertArrayEquals(new int[] {1, 12, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int1 = wavFile0.writeFrames((long[][]) null, 12, 12);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile0, wavFile1);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 16, 16, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.writeFrames((long[]) null, 1989, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[5][7];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 1989;
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray1[3] = (-1L);
      int int1 = wavFile1.writeFrames(longArray0, 0, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertTrue(int1 == int0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(5, longArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$VALUES", "$VALUES");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2, 2, 2, 2);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/$VALUES/$VALUES", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("$VALUES", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/$VALUES", mockFile0.getParent());
      assertEquals(2L, wavFile0.getNumFrames());
      assertEquals(2, wavFile0.getNumChannels());
      assertEquals(2, wavFile0.getValidBits());
      assertEquals(2L, wavFile0.getSampleRate());
      assertEquals(2L, wavFile0.getFramesRemaining());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%z)?W$cNO_vdOB", "%z)?W$cNO_vdOB");
      assertNotNull(mockFile0);
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/%z)?W$cNO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/%z)?W$cNO_vdOB/%z)?W$cNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      
      try { 
        wavFile0.readFrames((long[][]) null, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[][] longArray0 = new long[4][9];
      long[] longArray1 = new long[4];
      longArray1[0] = 1281L;
      longArray1[1] = (long) 10;
      longArray1[2] = 1281L;
      longArray1[3] = (long) 10;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1281L;
      longArray2[1] = 1281L;
      longArray2[2] = 1281L;
      longArray2[3] = 36L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1281L;
      longArray4[1] = 0L;
      longArray4[2] = 1281L;
      longArray4[3] = (long) 10;
      longArray4[4] = 1281L;
      longArray4[5] = 36L;
      longArray4[6] = (long) 10;
      longArray4[7] = 1281L;
      longArray0[3] = longArray4;
      try { 
        wavFile0.readFrames(longArray0, 2146449712);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65520, 65520, 65520, 65520);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("(=*O", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(65520L, wavFile0.getFramesRemaining());
      assertEquals(65520L, wavFile0.getNumFrames());
      assertEquals(65520, wavFile0.getNumChannels());
      assertEquals(65520, wavFile0.getValidBits());
      assertEquals(65520L, wavFile0.getSampleRate());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((int[]) null, 65520);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 16, 16, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = 1989;
      int int1 = 0;
      int int2 = wavFile1.writeFrames((long[]) null, 1989, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      long[][] longArray0 = new long[5][7];
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 16;
      doubleArray2[1] = (double) 10;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1281L;
      doubleArray3[1] = (double) 1281L;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 16;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 1989;
      doubleArray4[1] = (double) 1281L;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 10;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (double) 16;
      doubleArray6[2] = (double) 1989;
      doubleArray6[3] = (double) 1281L;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (double) 10;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 10;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray0[8] = doubleArray9;
      int int3 = wavFile1.writeFrames(doubleArray0, (-573), 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int3);
      
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 1989;
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray1[3] = (-1L);
      longArray1[4] = 1854L;
      longArray1[5] = (long) 0;
      longArray0[4] = longArray1;
      int int4 = 339;
      try { 
        WavFile.openWavFile(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Header chunk size (548) does not match file size (44)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1di1P)%\"?");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        WavFile.newWavFile((File) null, 2061, 2061, 2061, 2061);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.github.psambit9791.wa:file.WavFilQException", "com.github.psambit9791.wa:file.WavFilQException");
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 65498, 65498, 65498, 65498);
      assertNotNull(wavFile0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(44L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(65498, wavFile0.getValidBits());
      assertEquals(65498, wavFile0.getNumChannels());
      assertEquals(65498L, wavFile0.getNumFrames());
      assertEquals(65498L, wavFile0.getFramesRemaining());
      assertEquals(65498L, wavFile0.getSampleRate());
      
      int[] intArray0 = new int[5];
      // Undeclared exception!
      wavFile0.writeFrames(intArray0, 65498);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 15, 15, 15, 15);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(15L, wavFile0.getNumFrames());
      assertEquals(15, wavFile0.getNumChannels());
      assertEquals(15L, wavFile0.getFramesRemaining());
      assertEquals(15L, wavFile0.getSampleRate());
      assertEquals(15, wavFile0.getValidBits());
      
      long[] longArray0 = new long[19];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 19 out of bounds for length 19
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1281L;
      longArray0[1] = (-4055L);
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = 1281L;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "MJM");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MJM", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals("MJM", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24, wavFile0.getNumChannels());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      intArray0[3] = 24;
      long[][] longArray0 = new long[2][8];
      int int0 = wavFile0.writeFrames(longArray0, (-233));
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MJM", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals("MJM", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(2, longArray0.length);
      assertEquals((-233), int0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 24;
      intArray1[1] = (-233);
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray1, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "MM");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("MM", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MM", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertEquals(24L, wavFile0.getNumFrames());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      WavFile wavFile1 = WavFile.newWavFile(mockFile0, 24, 24, 65535, 24);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("MM", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MM", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(24L, wavFile1.getFramesRemaining());
      assertEquals(65535, wavFile1.getValidBits());
      assertEquals(24L, wavFile1.getNumFrames());
      assertEquals(24, wavFile1.getNumChannels());
      assertEquals(24L, wavFile1.getSampleRate());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = null;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-951);
      intArray1[1] = 544501094;
      intArray1[2] = 65535;
      intArray1[3] = 65535;
      intArray1[4] = 65535;
      intArray1[5] = 24;
      intArray1[6] = 24;
      intArray1[7] = 24;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray1, 251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 232, 1327L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1327L, wavFile0.getSampleRate());
      assertEquals(7L, wavFile0.getFramesRemaining());
      assertEquals(232, wavFile0.getValidBits());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(7, wavFile0.getNumChannels());
      
      int[] intArray0 = new int[11];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 232);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 11 out of bounds for length 11
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 16, 16, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(10L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = 1989;
      int int1 = 0;
      int int2 = wavFile1.writeFrames((long[]) null, 1989, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/user/,z)?W$TNO_vdOB/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(44L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(10L, wavFile1.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      long[][] longArray0 = new long[5][7];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 1989;
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray1[3] = (-1L);
      longArray1[4] = 1854L;
      longArray1[5] = (long) 0;
      longArray0[4] = longArray1;
      int int3 = 339;
      try { 
        WavFile.openWavFile(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Header chunk size (548) does not match file size (44)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getValidBits());
      
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Header chunk size (62) does not match file size (44)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.github.psambit9791.wavfile.WavFileException", "");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 26, 26, 26, 26);
      assertNotNull(wavFile0);
      assertTrue(file0.isAbsolute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(44L, file0.length());
      assertEquals(26, wavFile0.getNumChannels());
      assertEquals(26, wavFile0.getValidBits());
      assertEquals(26L, wavFile0.getSampleRate());
      assertEquals(26L, wavFile0.getFramesRemaining());
      assertEquals(26L, wavFile0.getNumFrames());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((double[][]) null, 2360, 2147483646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "MJM");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MJM", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("MJM", mockFile0.getName());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      byte[] byteArray0 = new byte[4];
      String string0 = mockFile0.getCanonicalPath();
      assertNotNull(string0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MJM", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("MJM", mockFile0.getName());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MJM", string0);
      
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)116;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)1, (byte)116}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)1, (byte)116}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      
      int int0 = wavFile0.writeFrames(intArray0, 2842, (-1069));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MJM", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("MJM", mockFile0.getName());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertArrayEquals(new int[] {24, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1069), int0);
      
      double[][] doubleArray0 = new double[3][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 24, 1163280727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getFramesRemaining());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1.0);
      int int0 = wavFile0.writeFrames(doubleArray0, 10);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertArrayEquals(new double[] {1.0, 10.0, 1.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, int0);
      
      long long0 = wavFile0.getSampleRate();
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10L, long0);
      
      int int1 = wavFile0.writeFrames(doubleArray0, 10);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1.0, 10.0, 1.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%z)?W$cNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("%z)?W$cNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getSampleRate());
      
      double[] doubleArray0 = new double[16];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 16 out of bounds for length 16
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1281L;
      doubleArray0[3] = (double) 1281L;
      doubleArray0[4] = (double) 1281L;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 10;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 7, 7, 253, 1281L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(7L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[8];
      intArray0[2] = 7;
      boolean boolean0 = mockFile0.mkdir();
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean0);
      
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-3055);
      intArray2[1] = (-2107);
      intArray2[2] = 8;
      intArray2[3] = (-2107);
      intArray2[4] = (-2107);
      intArray2[5] = 253;
      intArray2[6] = 1052;
      intArray2[7] = 0;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int int0 = wavFile0.writeFrames(intArray1, 1);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(7L, wavFile0.getNumFrames());
      assertEquals(253, wavFile0.getValidBits());
      assertEquals(6L, wavFile0.getFramesRemaining());
      assertEquals(7, intArray1.length);
      assertEquals(1, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 0L, 5, 5);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5, wavFile0.getNumChannels());
      
      long[] longArray0 = new long[0];
      int int0 = wavFile0.writeFrames(longArray0, 5, 5);
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5, wavFile0.getNumChannels());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[0][0];
      int int0 = wavFile0.writeFrames(doubleArray0, 12);
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(12, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int2 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(12, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(12, int2);
      
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[8];
      intArray1[0] = 12;
      intArray1[1] = 16;
      intArray1[2] = 12;
      intArray1[3] = 10;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 16;
      intArray1[7] = 10;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 10;
      intArray3[1] = 10;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 12;
      intArray4[1] = 16;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 10;
      intArray5[1] = 1566;
      intArray5[2] = 10;
      intArray5[3] = 16;
      intArray5[4] = 16;
      intArray5[5] = 16;
      intArray5[6] = 10;
      intArray5[7] = 12;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 10;
      intArray6[1] = 10;
      intArray6[2] = 16;
      intArray6[3] = 12;
      intArray6[4] = 10;
      intArray6[5] = 12;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = 12;
      intArray7[1] = 10;
      intArray7[2] = 12;
      intArray7[3] = 16;
      intArray7[4] = 12;
      intArray7[5] = 12;
      intArray7[6] = 16;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray3));
      
      intArray8[0] = 12;
      intArray8[1] = 10;
      intArray8[2] = 1566;
      intArray8[3] = 16;
      intArray8[4] = 16;
      intArray0[7] = intArray8;
      try { 
        wavFile1.writeFrames(intArray0, (-1347), 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1dP)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2033, 2033, 2033, 2033);
      assertNotNull(wavFile0);
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(2033, wavFile0.getNumChannels());
      assertEquals(2033, wavFile0.getValidBits());
      assertEquals(2033L, wavFile0.getNumFrames());
      assertEquals(2033L, wavFile0.getSampleRate());
      assertEquals(2033L, wavFile0.getFramesRemaining());
      
      int[][] intArray0 = new int[0][9];
      int int0 = wavFile0.writeFrames(intArray0, (-290), (-290));
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(2033, wavFile0.getNumChannels());
      assertEquals(2033, wavFile0.getValidBits());
      assertEquals(2033L, wavFile0.getNumFrames());
      assertEquals(2033L, wavFile0.getSampleRate());
      assertEquals(2033L, wavFile0.getFramesRemaining());
      assertEquals(0, intArray0.length);
      assertEquals((-290), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1298L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1298L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 16, 16, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.writeFrames((long[]) null, 1957, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(44L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(16, wavFile1.getNumChannels());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[5][7];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 1957;
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray1[3] = (-1L);
      longArray1[4] = 1854L;
      longArray1[5] = (long) 0;
      longArray0[4] = longArray1;
      WavFile wavFile2 = WavFile.newWavFile(mockFile0, 16, 0, 16, 1L);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotNull(wavFile2);
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(16, wavFile2.getNumChannels());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(16, wavFile2.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      
      int int1 = wavFile2.writeFrames(longArray0[3], 16, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(16, wavFile2.getNumChannels());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(16, wavFile2.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertTrue(int1 == int0);
      assertEquals(5, longArray0.length);
      assertEquals(0, int1);
      
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[1];
      intArray1[0] = 16;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1163280727;
      intArray3[1] = 1957;
      intArray3[2] = 10;
      intArray3[3] = 16;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1163280727;
      intArray4[1] = 0;
      intArray4[2] = 1952257873;
      intArray4[3] = (-989);
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 0;
      intArray6[1] = 1957;
      intArray6[2] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 0;
      intArray7[1] = 16;
      intArray7[2] = 1952257873;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray7));
      
      intArray8[0] = 1163280727;
      intArray8[1] = 0;
      intArray8[2] = 16;
      intArray8[3] = 22;
      intArray8[4] = 10;
      intArray8[5] = 3;
      intArray8[6] = 10;
      intArray8[7] = 0;
      intArray0[7] = intArray8;
      int int2 = wavFile0.writeFrames(intArray0, 1, (-4789));
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile0, wavFile1);
      assertNotSame(wavFile0, wavFile2);
      assertEquals(44L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1298L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(wavFile0.equals((Object)wavFile2));
      assertEquals(8, intArray0.length);
      assertEquals((-4789), int2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = MockFile.createTempFile("gq7!sf", ",z)?W$TNO_vdOB");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("gq7!sf0,z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/gq7!sf0,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", "");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      int int0 = 673;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 12, 1L, 673, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(673, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(12, wavFile0.getNumChannels());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)file0));
      
      boolean boolean0 = mockFile0.setExecutable(true, true);
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/,z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 253;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 12;
      int int1 = 883;
      try { 
        wavFile0.readFrames(doubleArray0, 883, 24);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 523);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(523L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      
      double[][] doubleArray0 = new double[4][2];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)116;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte)116, (byte) (-31), (byte)116}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-31);
      intArray0[1] = (int) (byte)116;
      int int0 = 0;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 0, (int) (byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p?*vW)4H@v");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("p?*vW)4H@v", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("p?*vW)4H@v", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getNumChannels());
      
      int int0 = wavFile0.writeFrames((long[][]) null, (-2331));
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("p?*vW)4H@v", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("p?*vW)4H@v", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals((-2331), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",5?WTI_vdOB", ",5?WTI_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",5?WTI_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/,5?WTI_vdOB/,5?WTI_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/,5?WTI_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5L, wavFile0.getNumFrames());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((int[][]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.github.psambit9791.wavfile.WavFileException", "");
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0", file0.toString());
      assertFalse(file0.isDirectory());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 26, 26, 26, 26);
      assertNotNull(wavFile0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(26L, wavFile0.getNumFrames());
      assertEquals(26L, wavFile0.getSampleRate());
      assertEquals(26, wavFile0.getValidBits());
      assertEquals(26L, wavFile0.getFramesRemaining());
      assertEquals(26, wavFile0.getNumChannels());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 26, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 26 out of bounds for length 0
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)116;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)116}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      intArray0[1] = (-1968526676);
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 2076, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2076 out of bounds for length 5
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = ",z)?\\W$TNO_vdOB";
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertFalse(boolean0);
      
      int int1 = 7;
      WavFile wavFile0 = WavFile.newWavFile(file0, 7, 4040L, 253, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertEquals(4040L, wavFile0.getFramesRemaining());
      assertEquals(7, wavFile0.getNumChannels());
      assertEquals(4040L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(253, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 7;
      intArray0[3] = (-2107);
      intArray0[4] = 10;
      intArray0[5] = 7;
      intArray0[6] = 10;
      intArray0[7] = 10;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1281L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 12;
      int int0 = wavFile0.writeFrames(intArray0, (-1), 12);
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      assertArrayEquals(new int[] {1, 12}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1dP)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2061, 2061, 2061, 2061);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061L, wavFile0.getNumFrames());
      assertEquals(2061, wavFile0.getNumChannels());
      
      wavFile0.close();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061L, wavFile0.getNumFrames());
      assertEquals(2061, wavFile0.getNumChannels());
      
      long long0 = wavFile0.getFramesRemaining();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061L, wavFile0.getNumFrames());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, long0);
      
      double[][] doubleArray0 = new double[0][7];
      try { 
        wavFile0.writeFrames(doubleArray0, 2061, (-201));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      wavFile0.close();
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[0][9];
      try { 
        wavFile0.writeFrames(doubleArray0, (-1632), 279);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?WuQ{NO_vdOB", ",zA?WuQ{NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 36, 0L, 36, 36);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?WuQ{NO_vdOB/,zA?WuQ{NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?WuQ{NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?WuQ{NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(36, wavFile0.getNumChannels());
      assertEquals(36, wavFile0.getValidBits());
      assertEquals(36L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getNumFrames());
      
      WavFile wavFile1 = WavFile.openWavFile(mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?WuQ{NO_vdOB/,zA?WuQ{NO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?WuQ{NO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(",zA?WuQ{NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(36, wavFile1.getNumChannels());
      assertEquals(36, wavFile1.getValidBits());
      assertEquals(36L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      try { 
        wavFile1.writeFrames((double[][]) null, 36);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N.x}cRfA1ydP)%!\"C?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2076, 2076, 2076, 1L);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("N.x}cRfA1ydP)%!\"C?", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("N.x}cRfA1ydP)%!\"C?", mockFile0.toString());
      assertEquals(44L, mockFile0.length());
      assertEquals(2076, wavFile0.getNumChannels());
      assertEquals(2076L, wavFile0.getNumFrames());
      assertEquals(2076, wavFile0.getValidBits());
      assertEquals(1L, wavFile0.getSampleRate());
      assertEquals(2076L, wavFile0.getFramesRemaining());
      
      double[][] doubleArray0 = new double[0][1];
      try { 
        wavFile0.readFrames(doubleArray0, 2076);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertTrue(file0.equals((Object)mockFile0));
      
      int int0 = 12;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 12, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(12, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(10, int2);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int3 = wavFile1.readFrames((long[][]) null, (-1505), 247);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(12, wavFile1.getValidBits());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      WavFile wavFile2 = WavFile.newWavFile(mockFile0, 10, 12, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotNull(wavFile2);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(10, wavFile2.getNumChannels());
      assertEquals(12L, wavFile2.getNumFrames());
      assertEquals(12L, wavFile2.getFramesRemaining());
      assertEquals(10, wavFile2.getValidBits());
      assertEquals(10L, wavFile2.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      
      try { 
        wavFile2.readFrames((long[][]) null, (-425));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 16, 16, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user", file0.getParent());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int1 = wavFile1.writeFrames((long[]) null, 1989, 0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user", file0.getParent());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[][] longArray0 = new long[5][7];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 1989;
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray1[3] = (-1L);
      longArray1[4] = 1854L;
      longArray1[5] = (long) 0;
      longArray0[4] = longArray1;
      try { 
        wavFile1.readFrames(longArray0, 339, 339);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")mP{l?LD}%?c9aD");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 19, 19, 19, 19);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(")mP{l?LD}%?c9aD", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals(")mP{l?LD}%?c9aD", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(19, wavFile0.getNumChannels());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getNumFrames());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19L, wavFile0.getSampleRate());
      
      try { 
        wavFile0.readFrames((long[][]) null, 19, 812);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",)?WTO_vdOB", ",)?WTO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotNull(wavFile0);
      assertEquals("/home/user/,)?WTO_vdOB", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(",)?WTO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/user/,)?WTO_vdOB/,)?WTO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(5L, wavFile0.getSampleRate());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5, wavFile0.getNumChannels());
      
      long[][] longArray0 = new long[6][3];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "MM");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MM", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("MM", mockFile0.getName());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24, wavFile0.getNumChannels());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      int int0 = 24;
      WavFile wavFile1 = WavFile.newWavFile(mockFile0, 24, 24, 65535, 24);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/MM", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("MM", mockFile0.getName());
      assertEquals(24L, wavFile1.getNumFrames());
      assertEquals(65535, wavFile1.getValidBits());
      assertEquals(24, wavFile1.getNumChannels());
      assertEquals(24L, wavFile1.getFramesRemaining());
      assertEquals(24L, wavFile1.getSampleRate());
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-951);
      // Undeclared exception!
      wavFile1.writeFrames(intArray1, 24);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 10;
      longArray1[1] = (-1288L);
      longArray1[2] = (long) 10;
      longArray1[3] = (-509L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-509L);
      longArray2[1] = (long) 10;
      longArray2[2] = (long) 10;
      longArray2[3] = (-509L);
      longArray2[4] = (-1288L);
      longArray2[5] = 1281L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 523L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1281L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 10;
      longArray5[1] = (-509L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 523L;
      longArray6[1] = (-1288L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = (-1288L);
      longArray7[1] = (-509L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      
      longArray8[0] = (long) 10;
      longArray8[1] = (long) 10;
      longArray8[2] = (long) 10;
      longArray8[3] = (long) 10;
      longArray8[4] = (long) 10;
      longArray8[5] = (long) 10;
      longArray8[6] = 1281L;
      longArray0[7] = longArray8;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 544501094);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65520, 65520, 65520, 65520);
      assertNotNull(wavFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("(=*O", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(65520, wavFile0.getNumChannels());
      assertEquals(65520L, wavFile0.getNumFrames());
      assertEquals(65520, wavFile0.getValidBits());
      assertEquals(65520L, wavFile0.getFramesRemaining());
      assertEquals(65520L, wavFile0.getSampleRate());
      
      int[][] intArray0 = new int[0][0];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 65520);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      long long0 = 4040L;
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1235L;
      doubleArray1[1] = (double) 523;
      doubleArray1[2] = (double) 4040L;
      doubleArray1[3] = (double) 523;
      doubleArray1[4] = (double) 1281L;
      doubleArray1[5] = (-1589.9);
      doubleArray1[6] = (double) 523;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 1952257861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(44L, mockFile0.length());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5L, wavFile0.getSampleRate());
      
      int[][] intArray0 = new int[0][0];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",)?WTO_vdOB", ",)?WTO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",)?WTO_vdOB", ",)?WTO_vdOB");
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 5, 5, 5, 5);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,)?WTO_vdOB/,)?WTO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,)?WTO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",)?WTO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      long long0 = wavFile0.getNumFrames();
      assertNotSame(mockFile0, mockFile1);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/user/,)?WTO_vdOB/,)?WTO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/,)?WTO_vdOB", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",)?WTO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(5, wavFile0.getNumChannels());
      assertEquals(5L, wavFile0.getFramesRemaining());
      assertEquals(5L, wavFile0.getNumFrames());
      assertEquals(5, wavFile0.getValidBits());
      assertEquals(5L, wavFile0.getSampleRate());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[4][2];
      String string0 = mockFile0.getCanonicalPath();
      assertNotSame(mockFile0, file0);
      assertNotNull(string0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals("/home/user/,z)?W$TNO_vdOB", string0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1235L;
      doubleArray1[1] = (double) 523;
      doubleArray1[2] = (double) 4040L;
      doubleArray1[3] = (double) 523;
      doubleArray1[4] = (double) 1281L;
      doubleArray1[5] = (-1589.9);
      doubleArray1[6] = (double) 523;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4040L;
      doubleArray2[1] = (double) 10;
      doubleArray2[2] = (double) 1281L;
      doubleArray2[3] = (-1589.9);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 523;
      doubleArray2[6] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 10;
      long long0 = wavFile0.getNumFrames();
      assertNotSame(mockFile0, file0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10L, long0);
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((long[][]) null, (-1), 523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 19, 19, 19, 19);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19L, wavFile0.getNumFrames());
      assertEquals(19, wavFile0.getNumChannels());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getSampleRate());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((long[]) null, 19, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(=*O", "(=*O");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 65487, 65487, 65487, 65487);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("(=*O", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487, wavFile0.getNumChannels());
      assertEquals(65487L, wavFile0.getNumFrames());
      assertEquals(65487, wavFile0.getValidBits());
      
      int[] intArray0 = new int[8];
      int int0 = wavFile0.writeFrames(intArray0, (-3554));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/(=*O", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/(=*O/(=*O", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("(=*O", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(65487L, wavFile0.getSampleRate());
      assertEquals(65487L, wavFile0.getFramesRemaining());
      assertEquals(65487, wavFile0.getNumChannels());
      assertEquals(65487L, wavFile0.getNumFrames());
      assertEquals(65487, wavFile0.getValidBits());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals((-3554), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.canRead());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[19];
      longArray0[3] = (long) 10;
      longArray0[4] = 0L;
      int int0 = wavFile0.writeFrames(longArray0, 1);
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(9L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(19, longArray0.length);
      assertEquals(1, int0);
      
      int int1 = wavFile0.writeFrames(longArray0, 1, (-2774));
      assertNotSame(mockFile0, file0);
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(9L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertEquals(19, longArray0.length);
      assertEquals((-2774), int1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.github.psambit9791.wa:file.WavFilQException", "com.github.psambit9791.wa:file.WavFilQException");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 65498, 65498, 65498, 65498);
      assertNotNull(wavFile0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertEquals("/tmp/com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("com.github.psambit9791.wa:file.WavFilQException0com.github.psambit9791.wa:file.WavFilQException", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(65498L, wavFile0.getSampleRate());
      assertEquals(65498L, wavFile0.getNumFrames());
      assertEquals(65498, wavFile0.getNumChannels());
      assertEquals(65498, wavFile0.getValidBits());
      assertEquals(65498L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(intArray0, 65498);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 15, 15, 15, 15);
      assertNotNull(wavFile0);
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(15L, wavFile0.getNumFrames());
      assertEquals(15L, wavFile0.getSampleRate());
      assertEquals(15, wavFile0.getNumChannels());
      assertEquals(15L, wavFile0.getFramesRemaining());
      assertEquals(15, wavFile0.getValidBits());
      
      long[] longArray0 = new long[19];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 15, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 19 out of bounds for length 19
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "M5M");
      assertNotNull(mockFile0);
      
      int int0 = 24;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 24, 24, 24, 24);
      assertNotNull(wavFile0);
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals("M5M", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/M5M", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getFramesRemaining());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      intArray0[3] = 24;
      intArray0[4] = 24;
      intArray0[5] = 24;
      intArray0[6] = (-1637);
      int int1 = wavFile0.writeFrames(intArray0, (-951));
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException", mockFile0.getParent());
      assertEquals("M5M", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/user/com.github.psambit9791.wavfile.WavFileException/M5M", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(24, wavFile0.getNumChannels());
      assertEquals(24L, wavFile0.getNumFrames());
      assertEquals(24L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(24L, wavFile0.getFramesRemaining());
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {24, 24, 24, 24, 24, 24, (-1637)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-951), int1);
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((long[]) null, (-2047), 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&O`Z1H/Uj");
      assertNotNull(mockFile0);
      
      try { 
        WavFile.newWavFile(mockFile0, 1789, (-3L), 1789, 1789);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Number of frames must be positive
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      int int0 = 2076;
      long long0 = (-11L);
      long long1 = (-3071L);
      int int1 = 477;
      try { 
        WavFile.newWavFile(mockFile0, 2076, (-3071L), 477, 2076);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Number of frames must be positive
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T", "T");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 1, 1, 32, 32);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("T", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(32, wavFile0.getValidBits());
      assertEquals(32L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getFramesRemaining());
      assertEquals(1L, wavFile0.getNumFrames());
      
      double[][] doubleArray0 = new double[10][4];
      int int0 = wavFile0.writeFrames(doubleArray0, 1);
      assertFalse(mockFile0.isHidden());
      assertEquals("T", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/T", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/user/T/T", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1, wavFile0.getNumChannels());
      assertEquals(32, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(32L, wavFile0.getSampleRate());
      assertEquals(1L, wavFile0.getNumFrames());
      assertEquals(10, doubleArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      
      long[] longArray0 = new long[19];
      wavFile0.close();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      
      wavFile0.close();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getFramesRemaining());
      
      try { 
        wavFile0.writeFrames(longArray0, 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot write to WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%z)?$cNOvdOB");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("%z)?$cNOvdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("%z)?$cNOvdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      
      wavFile0.close();
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("%z)?$cNOvdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(44L, mockFile0.length());
      assertEquals("%z)?$cNOvdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:/home/user/,zA%3FW$%5DNO_vdOB", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/home/user/,zA%3FW$%5DNO_vdOB", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/home/user", file0.getParent());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 0L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[19];
      longArray0[3] = (long) 10;
      longArray0[4] = 0L;
      int int0 = wavFile0.writeFrames(longArray0, 1);
      assertNotSame(mockFile0, file0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(9L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(19, longArray0.length);
      assertEquals(1, int0);
      
      int int1 = wavFile0.writeFrames(longArray0, 1, (-2774));
      assertNotSame(mockFile0, file0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(9L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(int1 == int0);
      assertEquals(19, longArray0.length);
      assertEquals((-2774), int1);
      
      wavFile0.close();
      assertNotSame(mockFile0, file0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(64L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(9L, wavFile0.getFramesRemaining());
      assertEquals(0L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid Wav Header data, incorrect riff type ID", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(file0);
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      MockFile mockFile0 = new MockFile("Invalid Wav Header data, incorrect riff type ID", "");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 12, 0, 24, 12);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(12L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[6];
      boolean boolean0 = file0.setExecutable(true, true);
      assertNotSame(file0, mockFile0);
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean0);
      
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 12;
      wavFile0.close();
      assertNotSame(file0, mockFile0);
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(12L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertFalse(file0.equals((Object)mockFile0));
      
      try { 
        wavFile0.readFrames(doubleArray0, 12, 253);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        WavFile.newWavFile((File) null, 2146442191, 2146442191, (-533), 1L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of channels, valid range 1 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 8, 8, 8);
      assertNotSame(mockFile0, mockFile1);
      assertNotNull(wavFile0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[1] = doubleArray1;
      WavFile wavFile1 = WavFile.newWavFile(mockFile1, 8, 0, 8, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.getNumChannels();
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(8, int0);
      
      WavFile wavFile2 = WavFile.openWavFile(mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertNotNull(wavFile2);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      
      int int1 = wavFile2.readFrames((long[]) null, 8, 8);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = wavFile2.readFrames(doubleArray0, 531, 1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile2, wavFile1);
      assertNotSame(wavFile2, wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, wavFile2.getNumFrames());
      assertEquals(8, wavFile2.getValidBits());
      assertEquals(0L, wavFile2.getSampleRate());
      assertEquals(0L, wavFile2.getFramesRemaining());
      assertEquals(8, wavFile2.getNumChannels());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile2.equals((Object)wavFile1));
      assertFalse(wavFile2.equals((Object)wavFile0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile0.getValidBits();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(wavFile0, wavFile1);
      assertNotSame(wavFile0, wavFile2);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(8L, wavFile0.getNumFrames());
      assertEquals(8, wavFile0.getNumChannels());
      assertEquals(8, wavFile0.getValidBits());
      assertEquals(8L, wavFile0.getSampleRate());
      assertEquals(8L, wavFile0.getFramesRemaining());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(wavFile0.equals((Object)wavFile1));
      assertFalse(wavFile0.equals((Object)wavFile2));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(8, int3);
      
      int int4 = wavFile1.writeFrames(doubleArray0, 0, 0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotSame(wavFile1, wavFile2);
      assertEquals(",z)?W$TNO_vdOB", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(44L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(8, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(8, wavFile1.getValidBits());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(wavFile1.equals((Object)wavFile2));
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 19, 19, 19, 19);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(19, wavFile0.getNumChannels());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getNumFrames());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19L, wavFile0.getSampleRate());
      
      double[][] doubleArray0 = new double[0][0];
      try { 
        wavFile0.readFrames(doubleArray0, 19, 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1235L;
      doubleArray1[1] = (double) 523;
      doubleArray1[2] = (double) 4040L;
      doubleArray1[3] = (double) 523;
      doubleArray1[4] = (double) 1281L;
      doubleArray1[5] = (-1589.9);
      doubleArray1[6] = (double) 523;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      try { 
        wavFile0.readFrames(doubleArray0, (-1), (-3817));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      int int0 = wavFile0.writeFrames(doubleArray0, 10, 10);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      intArray0[3] = 10;
      int int1 = wavFile0.writeFrames(intArray0, 10, 10);
      assertNotSame(mockFile0, file0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getSampleRate());
      assertEquals(0L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {10, 10, 10, 10}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int int2 = wavFile1.readFrames(intArray1, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(44L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.toString());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(0L, wavFile1.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals(6, intArray1.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FTg~_g", "FTg~_g");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 11, 11, 11, 11);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.canExecute());
      assertEquals("FTg~_g", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/FTg~_g/FTg~_g", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/user/FTg~_g", mockFile0.getParent());
      assertEquals(11, wavFile0.getNumChannels());
      assertEquals(11, wavFile0.getValidBits());
      assertEquals(11L, wavFile0.getNumFrames());
      assertEquals(11L, wavFile0.getFramesRemaining());
      assertEquals(11L, wavFile0.getSampleRate());
      
      int[][] intArray0 = new int[2][5];
      try { 
        wavFile0.readFrames(intArray0, 11, 11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      int int0 = 523;
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int1 = (-1);
      mockFile0.deleteOnExit();
      assertNotSame(mockFile0, file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getNumFrames());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1235L;
      doubleArray1[1] = (double) 523;
      doubleArray1[2] = (double) 4040L;
      doubleArray1[3] = (double) 523;
      doubleArray1[4] = (double) 1281L;
      doubleArray1[5] = (-1589.9);
      doubleArray1[6] = (double) 523;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4040L;
      doubleArray2[1] = (double) 10;
      doubleArray2[2] = (double) 1281L;
      doubleArray2[3] = (-1589.9);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 523;
      doubleArray2[6] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 10;
      long[][] longArrayArray0 = null;
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[7];
      intArray1[0] = (-1);
      intArray1[1] = 10;
      intArray1[2] = (-1);
      intArray1[3] = 523;
      intArray1[4] = (-1);
      intArray1[5] = 523;
      intArray1[6] = (-1);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1);
      intArray2[1] = 10;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 10;
      intArray3[1] = 10;
      intArray3[2] = 523;
      intArray0[2] = intArray3;
      try { 
        wavFile0.readFrames(intArray0, 0, 870);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals("/home/user", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.equals((Object)mockFile0));
      
      int int0 = 10;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(44L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = 1281L;
      try { 
        wavFile0.readFrames(longArray0, (-3172));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N}cRA1dP)%\"?");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 2061, 2061, 2061, 2061);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("N}cRA1dP)%\"?", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("N}cRA1dP)%\"?", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(2061, wavFile0.getNumChannels());
      assertEquals(2061L, wavFile0.getSampleRate());
      assertEquals(2061, wavFile0.getValidBits());
      assertEquals(2061L, wavFile0.getFramesRemaining());
      assertEquals(2061L, wavFile0.getNumFrames());
      
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((long[][]) null, 2061, 2061);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.github.psambit9791.wavfile.WavFileException", "");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0", file0.getName());
      assertTrue(file0.exists());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 26, 26, 26, 26);
      assertNotNull(wavFile0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/com.github.psambit9791.wavfile.WavFileException0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("com.github.psambit9791.wavfile.WavFileException0", file0.getName());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals(26, wavFile0.getValidBits());
      assertEquals(26L, wavFile0.getFramesRemaining());
      assertEquals(26L, wavFile0.getSampleRate());
      assertEquals(26L, wavFile0.getNumFrames());
      assertEquals(26, wavFile0.getNumChannels());
      
      double[] doubleArray0 = new double[0];
      try { 
        wavFile0.readFrames(doubleArray0, 26, 26);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid Wav Header data, incorrect riff type ID", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      MockFile mockFile0 = new MockFile("Invalid Wav Header data, incorrect riff type ID", "");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      int int0 = 24;
      int int1 = 12;
      WavFile wavFile0 = WavFile.newWavFile(file0, 12, 0, 24, 12);
      assertNotSame(file0, mockFile0);
      assertNotNull(wavFile0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertEquals(12, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(12L, wavFile0.getSampleRate());
      assertEquals(24, wavFile0.getValidBits());
      assertFalse(file0.equals((Object)mockFile0));
      
      double[] doubleArray0 = new double[6];
      boolean boolean0 = file0.setExecutable(true, true);
      assertNotSame(file0, mockFile0);
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.toString());
      assertEquals("Invalid Wav Header data, incorrect riff type ID0com.github.psambit9791.wavfile.WavFileException", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean0);
      
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 12;
      try { 
        wavFile0.readFrames(doubleArray0, 12, 253);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = MockFile.createTempFile("Sample rate must be positive", "Sample rate must be positive");
      assertNotNull(file0);
      assertEquals("Sample rate must be positive0Sample rate must be positive", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Sample rate must be positive0Sample rate must be positive", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      
      int int0 = 1074;
      int int1 = 1450;
      long long0 = 5286L;
      WavFile wavFile0 = WavFile.newWavFile(file0, 1074, 1074, 1450, 5286L);
      assertNotNull(wavFile0);
      assertEquals("Sample rate must be positive0Sample rate must be positive", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(44L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Sample rate must be positive0Sample rate must be positive", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1450, wavFile0.getValidBits());
      assertEquals(1074L, wavFile0.getFramesRemaining());
      assertEquals(1074L, wavFile0.getNumFrames());
      assertEquals(1074, wavFile0.getNumChannels());
      assertEquals(5286L, wavFile0.getSampleRate());
      
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1450;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1450;
      longArray2[1] = (long) 1074;
      longArray2[2] = (long) 1450;
      longArray2[3] = 5286L;
      longArray2[4] = (long) 1450;
      longArray0[1] = longArray2;
      int int2 = 247;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 247;
      try { 
        wavFile0.readFrames(intArray0, 1450);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&3`ZZ1H/Uj");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 91, 91, 91, 91);
      assertNotNull(wavFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("Uj", mockFile0.getName());
      assertEquals("&3`ZZ1H/Uj", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("&3`ZZ1H", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(91, wavFile0.getValidBits());
      assertEquals(91L, wavFile0.getSampleRate());
      assertEquals(91L, wavFile0.getFramesRemaining());
      assertEquals(91, wavFile0.getNumChannels());
      assertEquals(91L, wavFile0.getNumFrames());
      
      try { 
        wavFile0.readFrames((int[]) null, 91);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      try { 
        WavFile.newWavFile(mockFile0, 1050, 16L, 1050, (-2676L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Sample rate must be positive
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      int int0 = 65497;
      try { 
        WavFile.newWavFile(mockFile0, 65497, 65497, 65497, 65497);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = MockFile.createTempFile("Sample rate must be positive", "Sample rate must be positive");
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Sample rate must be positive0Sample rate must be positive", file0.getName());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Sample rate must be positive0Sample rate must be positive", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      int int0 = 2076;
      int int1 = 0;
      int int2 = (-1937);
      long long0 = (-1L);
      try { 
        WavFile.newWavFile(file0, 2076, 0, (-1937), (-1L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of valid bits, valid range 2 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CLOSED", "CLOSED");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 398, 775L, 398, 398);
      assertNotNull(wavFile0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("CLOSED", mockFile0.getName());
      assertEquals("/home/user/CLOSED", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/user/CLOSED/CLOSED", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals(775L, wavFile0.getNumFrames());
      assertEquals(775L, wavFile0.getFramesRemaining());
      assertEquals(398, wavFile0.getNumChannels());
      assertEquals(398L, wavFile0.getSampleRate());
      assertEquals(398, wavFile0.getValidBits());
      
      try { 
        wavFile0.readFrames((long[]) null, 26, 26);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$]NO_vdOB", ",zA?W$]NO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 0L, 10, 2598L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      int int0 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(10, int0);
      
      int int1 = wavFile0.getNumChannels();
      assertNotSame(mockFile0, file0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(0L, wavFile0.getNumFrames());
      assertEquals(2598L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(0L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(int1 == int0);
      assertEquals(10, int1);
      
      WavFile wavFile1 = WavFile.openWavFile(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = 1635017060L;
      longArray0[3] = (long) 10;
      boolean boolean0 = file0.mkdir();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(boolean0);
      
      int int2 = wavFile1.readFrames(longArray0, 10, 20);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {0L, 10L, 1635017060L, 10L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int2);
      
      int int3 = wavFile1.getValidBits();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(10, int3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      long[][] longArray1 = new long[8][8];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      int int4 = wavFile1.readFrames(longArray0, (-318));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(",zA?W$]NO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/user/,zA?W$]NO_vdOB", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(44L, mockFile0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/user/,zA?W$]NO_vdOB/,zA?W$]NO_vdOB", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(44L, file0.length());
      assertEquals("/home/user/,zA?W$]NO_vdOB", file0.getParent());
      assertEquals(",zA?W$]NO_vdOB", file0.getName());
      assertEquals(0L, wavFile1.getNumFrames());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(2598L, wavFile1.getSampleRate());
      assertEquals(10, wavFile1.getNumChannels());
      assertEquals(0L, wavFile1.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertArrayEquals(new long[] {0L, 10L, 1635017060L, 10L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-318), int4);
      
      try { 
        wavFile0.readFrames(longArray0, 1026);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException");
      assertNotNull(mockFile0);
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 19, 19, 19, 19);
      assertNotNull(wavFile0);
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("com.github.psambit9791.wavfile.WavFileException", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(19L, wavFile0.getFramesRemaining());
      assertEquals(19, wavFile0.getValidBits());
      assertEquals(19L, wavFile0.getSampleRate());
      assertEquals(19L, wavFile0.getNumFrames());
      assertEquals(19, wavFile0.getNumChannels());
      
      long[] longArray0 = new long[0];
      try { 
        wavFile0.readFrames(longArray0, 19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File file0 = MockFile.createTempFile("Sample rate must be positive", "Sample rate must be positive");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/Sample rate must be positive0Sample rate must be positive", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("Sample rate must be positive0Sample rate must be positive", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      WavFile wavFile0 = WavFile.newWavFile(file0, 1074, 1074, 1450, 5286L);
      assertNotNull(wavFile0);
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/Sample rate must be positive0Sample rate must be positive", file0.toString());
      assertEquals(44L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("Sample rate must be positive0Sample rate must be positive", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1074L, wavFile0.getFramesRemaining());
      assertEquals(5286L, wavFile0.getSampleRate());
      assertEquals(1074, wavFile0.getNumChannels());
      assertEquals(1450, wavFile0.getValidBits());
      assertEquals(1074L, wavFile0.getNumFrames());
      
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1450;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1450;
      longArray2[1] = (long) 1074;
      longArray2[2] = (long) 1450;
      longArray2[3] = 5286L;
      longArray2[4] = (long) 1450;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1450;
      longArray3[1] = (long) 1450;
      longArray3[2] = (long) 1450;
      longArray3[3] = (long) 1450;
      longArray3[4] = (long) 1450;
      longArray3[5] = 5286L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 5286L;
      longArray4[1] = (long) 1074;
      longArray4[2] = 5286L;
      longArray4[3] = (long) 1074;
      longArray4[4] = (long) 1074;
      longArray4[5] = (long) 1450;
      longArray4[6] = (long) 1450;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 1074;
      longArray5[1] = (long) 1074;
      longArray5[2] = 1206L;
      longArray5[3] = (long) 1450;
      longArray5[4] = (long) 1074;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 5286L;
      longArray7[1] = (long) 1450;
      longArray7[2] = 1206L;
      longArray7[3] = (long) 1450;
      longArray7[4] = (long) 1450;
      longArray7[5] = 1L;
      longArray7[6] = 3220L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray5));
      
      longArray9[0] = 5286L;
      longArray9[1] = 1206L;
      longArray9[2] = 5286L;
      longArray9[3] = 1L;
      longArray9[4] = 5286L;
      longArray0[8] = longArray9;
      try { 
        wavFile0.readFrames(longArray2, 42, 2299);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot read from WavFile instance
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(file0.exists());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(44L, mockFile0.length());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      
      double[][] doubleArray0 = new double[4][2];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 10 out of bounds for length 2
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/user", file0.getParent());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      assertNotSame(mockFile0, file0);
      assertNotNull(wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10, wavFile0.getNumChannels());
      assertEquals(10L, wavFile0.getNumFrames());
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals(10L, wavFile0.getFramesRemaining());
      assertTrue(mockFile0.equals((Object)file0));
      
      WavFile wavFile1 = WavFile.newWavFile(file0, 16, 16, 10, 10);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertNotNull(wavFile1);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      
      int int0 = wavFile1.writeFrames((double[][]) null, (-2602), (-2145485987));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(wavFile1, wavFile0);
      assertEquals(44L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(",z)?W$TNO_vdOB", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(",z)?W$TNO_vdOB", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/home/user", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/user/,z)?W$TNO_vdOB", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(44L, file0.length());
      assertEquals(16L, wavFile1.getFramesRemaining());
      assertEquals(10, wavFile1.getValidBits());
      assertEquals(10L, wavFile1.getSampleRate());
      assertEquals(16L, wavFile1.getNumFrames());
      assertEquals(16, wavFile1.getNumChannels());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(wavFile1.equals((Object)wavFile0));
      assertEquals((-2145485987), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      MockFile mockFile1 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 8, 8, 8, 8);
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[14];
      doubleArray2[0] = (double) 8;
      doubleArray2[1] = (double) 0;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[1] = (double) 0;
      doubleArray3[3] = (double) 8;
      doubleArray3[1] = (double) 8;
      doubleArray3[5] = (double) 8;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 8;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 8;
      doubleArray5[1] = 0.0;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = (double) 0;
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 388.44378860802;
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = 0.0;
      doubleArray0[2] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray6[6] = 388.44378860802;
      doubleArray0[7] = doubleArray7;
      doubleArray0[8] = doubleArray1;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!", "!");
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 6, 6, 6, 6);
      double[][] doubleArray0 = new double[10][4];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      int int0 = 523;
      long long0 = 4039L;
      mockFile0.getCanonicalFile();
      int int1 = (-1);
      long long1 = 1235L;
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1235L;
      doubleArray1[1] = (double) 523;
      doubleArray1[2] = (double) 4039L;
      doubleArray1[3] = (double) 523;
      doubleArray1[4] = (double) 1281L;
      doubleArray1[5] = (-1589.9);
      doubleArray1[6] = (double) 523;
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 4039L;
      doubleArray2[1] = (double) 10;
      doubleArray2[2] = (double) 1281L;
      doubleArray2[3] = (-1589.9);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 523;
      doubleArray2[6] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 10;
      doubleArray3[1] = (-1589.9);
      doubleArray3[2] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 523;
      doubleArray4[1] = (double) (-1);
      doubleArray4[2] = (double) 1235L;
      doubleArray4[3] = (-1589.9);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(doubleArray0, (-1), 2146449712);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 9
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB", ",z)?W$TNO_vdOB");
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 253, 253, 253, 1281L);
      long[][] longArray0 = new long[0][0];
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 253, 253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      mockFile0.getCanonicalFile();
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1235L;
      doubleArray0[1] = (double) 523;
      doubleArray0[2] = (double) 4040L;
      doubleArray0[3] = (double) 523;
      doubleArray0[4] = (double) 1281L;
      doubleArray0[5] = (-1589.9);
      int int0 = wavFile0.writeFrames((long[][]) null, 523, (-1651));
      assertEquals(10, wavFile0.getValidBits());
      assertEquals(1281L, wavFile0.getSampleRate());
      assertEquals((-1651), int0);
      assertEquals(10L, wavFile0.getNumFrames());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      mockFile0.getCanonicalFile();
      MockFile.createTempFile(",z)?W$TNO_vdOB", "L");
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 10, 10, 10, 10);
      long[][] longArray0 = new long[10][3];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 10;
      longArray1[1] = (-1288L);
      longArray1[2] = (long) 10;
      longArray1[3] = (long) 10;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",zA?W$%Nh_/1OB");
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 14, 14, 14, 14);
      // Undeclared exception!
      try { 
        wavFile0.writeFrames((long[][]) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      File file0 = MockFile.createTempFile("Sample rate must be positive", "Sample rate must be positive");
      WavFile wavFile0 = WavFile.newWavFile(file0, 1074, 1074, 1450, 5286L);
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1450;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) 1450;
      longArray2[1] = (long) 1074;
      longArray2[2] = (long) 1450;
      longArray2[3] = 5286L;
      longArray2[4] = (long) 1450;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (long) 1450;
      longArray3[1] = (long) 1450;
      longArray3[2] = (long) 1450;
      longArray3[3] = (long) 1450;
      longArray3[4] = (long) 1450;
      longArray3[5] = 5286L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 5286L;
      longArray4[1] = (long) 1074;
      longArray4[2] = 5286L;
      longArray4[3] = (long) 1074;
      longArray4[4] = (long) 1074;
      longArray4[5] = (long) 1450;
      longArray4[6] = (long) 1450;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (long) 1074;
      longArray5[1] = (long) 1074;
      longArray5[2] = 1206L;
      longArray5[3] = (long) 1450;
      longArray5[4] = (long) 1074;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 5286L;
      longArray7[1] = (long) 1450;
      longArray7[2] = 1206L;
      longArray7[3] = (long) 1450;
      longArray7[4] = (long) 1450;
      longArray7[5] = 1L;
      longArray7[6] = 3220L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      longArray9[0] = 5286L;
      longArray9[1] = 1206L;
      longArray9[2] = 5286L;
      longArray9[3] = 1L;
      longArray9[4] = 5286L;
      longArray0[8] = longArray9;
      // Undeclared exception!
      try { 
        wavFile0.writeFrames(longArray0, 42, 2299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 42 out of bounds for length 1
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/user");
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      File file0 = mockFile0.getCanonicalFile();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",z)?W$TNO_vdOB");
      WavFile wavFile0 = WavFile.newWavFile(file0, 1, 0L, 1191, 1191);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double[] doubleArray0 = new double[12];
      wavFile0.writeFrames(doubleArray0, (-1768));
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Valid Bits specified in header is greater than 64, this is greater than a long can hold
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = MockFile.createTempFile(",z)?W$TNO_vdOB", "");
      try { 
        WavFile.openWavFile(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not enough wav file bytes for header
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid Wav Header data, incorrect riff type ID", "com.github.psambit9791.wavfile.WavFileException");
      try { 
        WavFile.openWavFile(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not enough wav file bytes for header
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)IWGN_dB", ",z)IWGN_dB");
      try { 
        WavFile.newWavFile(mockFile0, 89, 89, 1, 89);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of valid bits, valid range 2 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      int int0 = 523;
      try { 
        WavFile.newWavFile(mockFile0, 523, 4039L, (-1), 1235L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of valid bits, valid range 2 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileETception");
      WavFile wavFile0 = WavFile.newWavFile(mockFile0, 15, 15, 15, 15);
      assertEquals(15, wavFile0.getValidBits());
      assertEquals(15, wavFile0.getNumChannels());
      assertEquals(15L, wavFile0.getSampleRate());
      assertEquals(15L, wavFile0.getNumFrames());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ds8v0b&g");
      int int0 = (-1510);
      try { 
        WavFile.newWavFile(mockFile0, (-1510), (-1510), (-1510), (-1510));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of channels, valid range 1 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N.x}cRfA1ydP)%!\"C?");
      int int0 = 2076;
      try { 
        WavFile.newWavFile(mockFile0, 2076, 2076, 2076, (-11L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Sample rate must be positive
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",z)?W$TNO_vdOB");
      mockFile0.getCanonicalFile();
      WavFile.newWavFile(mockFile0, 10, 10, 10, 1281L);
      MockFile mockFile1 = new MockFile("", "");
      try { 
        WavFile.newWavFile(mockFile0, 2143385396, 0, 3, 1281L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of channels, valid range 1 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.github.psambit9791.wavfile.WavFileException", "com.github.psambit9791.wavfile.WavFileException");
      try { 
        WavFile.newWavFile(mockFile0, (-39), (-39), (-39), (-39));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of channels, valid range 1 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      int int0 = 0;
      int int1 = (-2748);
      try { 
        WavFile.newWavFile(mockFile0, 0, 0, (-2748), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal number of channels, valid range 1 to 65536
         //
         verifyException("com.github.psambit9791.wavfile.WavFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" not supported");
      try { 
        WavFile.openWavFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        WavFile.openWavFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
