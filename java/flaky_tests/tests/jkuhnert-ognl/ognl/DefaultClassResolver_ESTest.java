/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 14:10:30 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import ognl.DefaultClassResolver;
import ognl.DefaultTypeConverter;
import ognl.MemberAccess;
import ognl.OgnlContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultClassResolver_ESTest extends DefaultClassResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      Class<?> class0 = defaultClassResolver0.toClassForName("ognl.ASTLess");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      Class<?> class0 = defaultClassResolver0.toClassForName("ognl.OgnlParserConstants");
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      Class<Annotation> class0 = defaultClassResolver0.classForName("ognl.ASTLess", ognlContext0);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      // Undeclared exception!
      try { 
        defaultClassResolver0.toClassForName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      // Undeclared exception!
      try { 
        defaultClassResolver0.toClassForName("ognl.OgnlParser");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      try { 
        defaultClassResolver0.toClassForName("}6");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      // Undeclared exception!
      try { 
        defaultClassResolver0.classForName((String) null, (OgnlContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      // Undeclared exception!
      try { 
        defaultClassResolver0.classForName("ognl.OgnlParser", (OgnlContext) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      try { 
        defaultClassResolver0.classForName("java.lang.", (OgnlContext) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      OgnlContext ognlContext0 = new OgnlContext(memberAccess0, defaultClassResolver0, defaultTypeConverter0, hashMap0);
      try { 
        defaultClassResolver0.classForName("", ognlContext0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      defaultClassResolver0.classForName("ognl.ASTKeyValue", (OgnlContext) null);
      Class<Integer> class0 = defaultClassResolver0.classForName("ognl.ASTKeyValue", (OgnlContext) null);
      assertEquals("class ognl.ASTKeyValue", class0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      OgnlContext ognlContext0 = new OgnlContext(memberAccess0, defaultClassResolver0, defaultTypeConverter0, hashMap0);
      Class<Integer> class0 = defaultClassResolver0.classForName("ognl.OgnlParserTreeConstants", ognlContext0);
      assertFalse(class0.isSynthetic());
  }
}
