/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 14:29:51 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import ognl.EnumerationIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EnumerationIterator_ESTest extends EnumerationIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("FupKcuKFu?4zB<2q");
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      Object object0 = enumerationIterator0.next();
      assertEquals("FupKcuKFu?4zB<2q", object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      EnumerationIterator<Integer> enumerationIterator0 = new EnumerationIterator<Integer>(enumeration0);
      boolean boolean0 = enumerationIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("}KIDK>B", "}KIDK>B");
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      // Undeclared exception!
      try { 
        enumerationIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>((Enumeration<Object>) null);
      // Undeclared exception!
      try { 
        enumerationIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.EnumerationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("}KIDK>B", (String) null, true);
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      // Undeclared exception!
      try { 
        enumerationIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(enumeration0).nextElement();
      EnumerationIterator<Integer> enumerationIterator0 = new EnumerationIterator<Integer>(enumeration0);
      Integer integer0 = enumerationIterator0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("FupKcuKu?4zB<7q");
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      boolean boolean0 = enumerationIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EnumerationIterator<Integer> enumerationIterator0 = new EnumerationIterator<Integer>(enumeration0);
      // Undeclared exception!
      try { 
        enumerationIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() not supported by Enumeration
         //
         verifyException("ognl.EnumerationIterator", e);
      }
  }
}
