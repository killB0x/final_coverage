/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 13:53:27 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ognl.TokenMgrError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenMgrError_ESTest extends TokenMgrError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("~<cQ?T.Lo2J");
      assertEquals("~<cQ?T.Lo2J", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError("", 4);
      String string0 = tokenMgrError0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenMgrError.addEscapes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.TokenMgrError", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = TokenMgrError.LexicalErr(false, 3, 1, 2, "", 3);
      assertEquals("Lexical error at line 1, column 2.  Encountered: '3' (3), (in lexical state 3)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = TokenMgrError.LexicalErr(true, (-1242), (-1242), (-1242), (String) null, (-1242));
      assertEquals("Lexical error at line -1242, column -1242.  Encountered: <EOF> (in lexical state -1242)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenMgrError.LexicalErr(false, 1743, 3252, 545, "pBPorwyPY", 930);
      assertEquals("Lexical error at line 3252, column 545.  Encountered: '930' (930), after prefix \"p\\u007fBPorwyPY\" (in lexical state 1743)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = TokenMgrError.LexicalErr(false, 83, 83, 83, "<A5'qwoS+&O?d)'LI[", 83);
      assertEquals("Lexical error at line 83, column 83.  Encountered: '83' (83), after prefix \"<A5\\'qwoS+&O?d)\\'LI[\" (in lexical state 83)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TokenMgrError.LexicalErr(false, 0, 0, 0, "De7B*_G\"KSUaQc@ ;", 0);
      assertEquals("Lexical error at line 0, column 0.  Encountered: '0' (0), after prefix \"De7B*_G\\\"KSUaQc@ ;\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TokenMgrError.addEscapes("\n");
      assertEquals("\\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(false, 1860, 545, (-1), "\b", (-1869), 2452);
      assertEquals(1, TokenMgrError.STATIC_LEXER_ERROR);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError();
      String string0 = tokenMgrError0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenMgrError tokenMgrError0 = new TokenMgrError(true, 0, 1, (-2649), "SOllb%wTy])>U", (-1141), 0);
      String string0 = tokenMgrError0.getMessage();
      assertEquals("Lexical error at line 1, column -2649.  Encountered: <EOF> after prefix \"SOllb%wTy])>U\"", string0);
  }
}
