/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 14:03:06 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ognl.ASTChain;
import ognl.ASTCtor;
import ognl.ASTGreater;
import ognl.ASTMultiply;
import ognl.ASTNot;
import ognl.ASTNotEq;
import ognl.ASTProject;
import ognl.ASTRootVarRef;
import ognl.JJTOgnlParserState;
import ognl.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JJTOgnlParserState_ESTest extends JJTOgnlParserState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(44);
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      ASTProject aSTProject0 = new ASTProject(44);
      assertEquals(0, aSTProject0.jjtGetNumChildren());
      assertEquals((-1), aSTProject0.getIndexInParent());
      assertNotNull(aSTProject0);
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTProject0, true);
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals((-1), aSTProject0.getIndexInParent());
      assertEquals(1, aSTProject0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      
      ASTMultiply aSTMultiply0 = new ASTMultiply((-1672));
      assertEquals(0, aSTMultiply0.jjtGetNumChildren());
      assertEquals((-1), aSTMultiply0.getIndexInParent());
      assertNotNull(aSTMultiply0);
      
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.closeNodeScope((Node) aSTMultiply0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.closeNodeScope((Node) null, (-1582));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(2, jJTOgnlParserState0.nodeArity());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(2, jJTOgnlParserState0.nodeArity());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertFalse(aSTCtor0.isArray());
      assertEquals(2, aSTCtor0.jjtGetNumChildren());
      assertEquals(0, aSTCtor0.getIndexInParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor((-24));
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, false);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor((-154));
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      
      ASTNot aSTNot0 = new ASTNot((-154));
      assertEquals((-1), aSTNot0.getIndexInParent());
      assertEquals(0, aSTNot0.jjtGetNumChildren());
      assertNotNull(aSTNot0);
      
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.closeNodeScope((Node) aSTNot0, 1808);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTRootVarRef aSTRootVarRef0 = new ASTRootVarRef(0);
      assertNull(aSTRootVarRef0.getLastExpression());
      assertNull(aSTRootVarRef0.getCoreExpression());
      assertEquals(0, aSTRootVarRef0.jjtGetNumChildren());
      assertEquals((-1), aSTRootVarRef0.getIndexInParent());
      assertEquals("#root", aSTRootVarRef0.toString());
      assertNotNull(aSTRootVarRef0);
      
      jJTOgnlParserState0.openNodeScope(aSTRootVarRef0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNull(aSTRootVarRef0.getLastExpression());
      assertNull(aSTRootVarRef0.getCoreExpression());
      assertEquals(0, aSTRootVarRef0.jjtGetNumChildren());
      assertEquals((-1), aSTRootVarRef0.getIndexInParent());
      assertEquals("#root", aSTRootVarRef0.toString());
      
      jJTOgnlParserState0.clearNodeScope((Node) null);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      jJTOgnlParserState0.pushNode((Node) null);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      
      Node node0 = jJTOgnlParserState0.rootNode();
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      
      ASTCtor aSTCtor1 = (ASTCtor)jJTOgnlParserState0.rootNode();
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals((-1), aSTCtor1.getIndexInParent());
      assertEquals(0, aSTCtor1.jjtGetNumChildren());
      assertFalse(aSTCtor1.isArray());
      assertSame(aSTCtor1, aSTCtor0);
      assertNotNull(aSTCtor1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals(0, aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(1, aSTCtor0.jjtGetNumChildren());
      
      ASTCtor aSTCtor1 = (ASTCtor)jJTOgnlParserState0.rootNode();
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals(1, aSTCtor1.jjtGetNumChildren());
      assertFalse(aSTCtor1.isArray());
      assertEquals(0, aSTCtor1.getIndexInParent());
      assertSame(aSTCtor1, aSTCtor0);
      assertNotNull(aSTCtor1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      jJTOgnlParserState0.pushNode((Node) null);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      
      Node node0 = jJTOgnlParserState0.popNode();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      Node[] nodeArray0 = new Node[9];
      aSTCtor0.children = nodeArray0;
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(9, aSTCtor0.jjtGetNumChildren());
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(9, aSTCtor0.jjtGetNumChildren());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertEquals(9, aSTCtor0.jjtGetNumChildren());
      
      ASTCtor aSTCtor1 = (ASTCtor)jJTOgnlParserState0.popNode();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertFalse(aSTCtor1.isArray());
      assertEquals((-1), aSTCtor1.getIndexInParent());
      assertEquals(9, aSTCtor1.jjtGetNumChildren());
      assertSame(aSTCtor1, aSTCtor0);
      assertNotNull(aSTCtor1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      jJTOgnlParserState0.pushNode((Node) null);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      
      Node node0 = jJTOgnlParserState0.peekNode();
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTChain aSTChain0 = new ASTChain(4548);
      assertNull(aSTChain0.getCoreExpression());
      assertNull(aSTChain0.getLastExpression());
      assertEquals((-1), aSTChain0.getIndexInParent());
      assertEquals(0, aSTChain0.jjtGetNumChildren());
      assertNotNull(aSTChain0);
      
      jJTOgnlParserState0.pushNode(aSTChain0);
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNull(aSTChain0.getCoreExpression());
      assertNull(aSTChain0.getLastExpression());
      assertEquals((-1), aSTChain0.getIndexInParent());
      assertEquals(0, aSTChain0.jjtGetNumChildren());
      
      ASTChain aSTChain1 = (ASTChain)jJTOgnlParserState0.peekNode();
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals((-1), aSTChain1.getIndexInParent());
      assertNull(aSTChain1.getLastExpression());
      assertNull(aSTChain1.getCoreExpression());
      assertEquals(0, aSTChain1.jjtGetNumChildren());
      assertSame(aSTChain1, aSTChain0);
      assertNotNull(aSTChain1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor((-2626));
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertFalse(aSTCtor0.isArray());
      
      boolean boolean0 = jJTOgnlParserState0.nodeCreated();
      assertTrue(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      ASTCtor aSTCtor0 = new ASTCtor(0);
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      assertNotNull(aSTCtor0);
      
      jJTOgnlParserState0.pushNode(aSTCtor0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals(0, aSTCtor0.jjtGetNumChildren());
      assertEquals((-1), aSTCtor0.getIndexInParent());
      assertFalse(aSTCtor0.isArray());
      
      int int0 = jJTOgnlParserState0.nodeArity();
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertNotNull(jJTOgnlParserState0);
      
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.openNodeScope((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.JJTOgnlParserState", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertNotNull(jJTOgnlParserState0);
      
      ASTRootVarRef aSTRootVarRef0 = new ASTRootVarRef(0);
      assertEquals("#root", aSTRootVarRef0.toString());
      assertEquals((-1), aSTRootVarRef0.getIndexInParent());
      assertEquals(0, aSTRootVarRef0.jjtGetNumChildren());
      assertNull(aSTRootVarRef0.getLastExpression());
      assertNull(aSTRootVarRef0.getCoreExpression());
      assertNotNull(aSTRootVarRef0);
      
      jJTOgnlParserState0.openNodeScope(aSTRootVarRef0);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(0, jJTOgnlParserState0.nodeArity());
      assertEquals("#root", aSTRootVarRef0.toString());
      assertEquals((-1), aSTRootVarRef0.getIndexInParent());
      assertEquals(0, aSTRootVarRef0.jjtGetNumChildren());
      assertNull(aSTRootVarRef0.getLastExpression());
      assertNull(aSTRootVarRef0.getCoreExpression());
      
      jJTOgnlParserState0.pushNode((Node) null);
      assertFalse(jJTOgnlParserState0.nodeCreated());
      assertEquals(1, jJTOgnlParserState0.nodeArity());
      
      ASTNotEq aSTNotEq0 = new ASTNotEq(2711);
      assertEquals(0, aSTNotEq0.jjtGetNumChildren());
      assertEquals((-1), aSTNotEq0.getIndexInParent());
      assertEquals("!ognl.OgnlOps.equal", aSTNotEq0.getComparisonFunction());
      assertNotNull(aSTNotEq0);
      
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.closeNodeScope((Node) aSTNotEq0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.JJTOgnlParserState", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      ASTGreater aSTGreater0 = new ASTGreater(78);
      jJTOgnlParserState0.openNodeScope(aSTGreater0);
      ASTCtor aSTCtor0 = new ASTCtor(2058039875);
      jJTOgnlParserState0.openNodeScope(aSTGreater0);
      jJTOgnlParserState0.closeNodeScope((Node) aSTGreater0, true);
      // Undeclared exception!
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, 2058039875);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.popNode();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      int int0 = jJTOgnlParserState0.nodeArity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      ASTCtor aSTCtor0 = new ASTCtor(0);
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      jJTOgnlParserState0.pushNode(aSTCtor0);
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      jJTOgnlParserState0.peekNode();
      assertTrue(jJTOgnlParserState0.nodeCreated());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.closeNodeScope((Node) null, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      ASTCtor aSTCtor0 = new ASTCtor((-2626));
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, (-2626));
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.clearNodeScope(aSTCtor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.rootNode();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      // Undeclared exception!
      try { 
        jJTOgnlParserState0.peekNode();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      ASTCtor aSTCtor0 = new ASTCtor((-2626));
      jJTOgnlParserState0.openNodeScope(aSTCtor0);
      jJTOgnlParserState0.closeNodeScope((Node) aSTCtor0, true);
      jJTOgnlParserState0.popNode();
      assertTrue(jJTOgnlParserState0.nodeCreated());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      jJTOgnlParserState0.reset();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JJTOgnlParserState jJTOgnlParserState0 = new JJTOgnlParserState();
      jJTOgnlParserState0.nodeCreated();
      assertEquals(0, jJTOgnlParserState0.nodeArity());
  }
}
