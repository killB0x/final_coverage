/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 13:45:53 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ognl.ASTAnd;
import ognl.ASTLessEq;
import ognl.ASTProperty;
import ognl.DefaultClassResolver;
import ognl.DefaultTypeConverter;
import ognl.MapPropertyAccessor;
import ognl.MemberAccess;
import ognl.Node;
import ognl.OgnlContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapPropertyAccessor_ESTest extends MapPropertyAccessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTAnd aSTAnd0 = new ASTAnd((-444));
      ASTLessEq aSTLessEq0 = new ASTLessEq(1976047326);
      aSTAnd0.parent = (Node) aSTLessEq0;
      ognlContext0.setCurrentNode(aSTAnd0);
      ASTProperty aSTProperty0 = new ASTProperty(1976047327);
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.getProperty(ognlContext0, (Object) null, aSTProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.setProperty((OgnlContext) null, (Object) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.setProperty((OgnlContext) null, object0, (Object) null, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Map (java.lang.Object and java.util.Map are in module java.base of loader 'bootstrap')
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.getSourceSetter((OgnlContext) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.getSourceAccessor((OgnlContext) null, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.getProperty((OgnlContext) null, mapPropertyAccessor0, mapPropertyAccessor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class ognl.MapPropertyAccessor cannot be cast to class java.util.Map (ognl.MapPropertyAccessor is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @62392635; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      String string0 = mapPropertyAccessor0.getSourceSetter(ognlContext0, ognlContext0, "'laH.axR#@j&VJ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTProperty aSTProperty0 = new ASTProperty(1528);
      String string0 = mapPropertyAccessor0.getSourceSetter(ognlContext0, ognlContext0, aSTProperty0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTAnd aSTAnd0 = new ASTAnd((-444));
      ASTLessEq aSTLessEq0 = new ASTLessEq(1429);
      aSTAnd0.parent = (Node) aSTLessEq0;
      ognlContext0.setCurrentNode(aSTAnd0);
      String string0 = mapPropertyAccessor0.getSourceAccessor(ognlContext0, defaultTypeConverter0, ".get(ognl.ASTAnd@0000000005)");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTAnd aSTAnd0 = new ASTAnd((-444));
      ognlContext0.setCurrentNode(aSTAnd0);
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.getSourceAccessor(ognlContext0, ognlContext0, defaultTypeConverter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is null for 'ognl.DefaultTypeConverter@3'
         //
         verifyException("ognl.MapPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTAnd aSTAnd0 = new ASTAnd((-444));
      ASTLessEq aSTLessEq0 = new ASTLessEq(1976047326);
      aSTAnd0.parent = (Node) aSTLessEq0;
      ognlContext0.setCurrentNode(aSTAnd0);
      String string0 = mapPropertyAccessor0.getSourceAccessor(ognlContext0, ognlContext0, defaultTypeConverter0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTAnd aSTAnd0 = new ASTAnd(1976047362);
      ognlContext0.setCurrentNode(aSTAnd0);
      // Undeclared exception!
      try { 
        mapPropertyAccessor0.getProperty(ognlContext0, (Object) null, defaultClassResolver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTAnd aSTAnd0 = new ASTAnd((-444));
      ASTLessEq aSTLessEq0 = new ASTLessEq(1429);
      aSTAnd0.parent = (Node) aSTLessEq0;
      ognlContext0.setCurrentNode(aSTAnd0);
      Object object0 = mapPropertyAccessor0.getProperty(ognlContext0, ognlContext0, ognlContext0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapPropertyAccessor mapPropertyAccessor0 = new MapPropertyAccessor();
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      OgnlContext ognlContext0 = new OgnlContext(defaultClassResolver0, defaultTypeConverter0, memberAccess0);
      ASTProperty aSTProperty0 = new ASTProperty(19);
      mapPropertyAccessor0.setProperty(ognlContext0, ognlContext0, ognlContext0, aSTProperty0);
      assertFalse(ognlContext0.getTraceEvaluations());
  }
}
