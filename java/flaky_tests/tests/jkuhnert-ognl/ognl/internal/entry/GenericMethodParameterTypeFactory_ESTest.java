/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 13:55:34 GMT 2022
 */

package ognl.internal.entry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import ognl.internal.entry.GenericMethodParameterTypeCacheEntry;
import ognl.internal.entry.GenericMethodParameterTypeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericMethodParameterTypeFactory_ESTest extends GenericMethodParameterTypeFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericMethodParameterTypeFactory genericMethodParameterTypeFactory0 = new GenericMethodParameterTypeFactory();
      Class<Object> class0 = Object.class;
      GenericMethodParameterTypeCacheEntry genericMethodParameterTypeCacheEntry0 = new GenericMethodParameterTypeCacheEntry((Method) null, class0);
      // Undeclared exception!
      try { 
        genericMethodParameterTypeFactory0.create(genericMethodParameterTypeCacheEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.internal.entry.GenericMethodParameterTypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericMethodParameterTypeFactory genericMethodParameterTypeFactory0 = new GenericMethodParameterTypeFactory();
      Class<GenericMethodParameterTypeCacheEntry> class0 = GenericMethodParameterTypeCacheEntry.class;
      GenericMethodParameterTypeCacheEntry genericMethodParameterTypeCacheEntry0 = new GenericMethodParameterTypeCacheEntry((Method) null, class0);
      // Undeclared exception!
      try { 
        genericMethodParameterTypeFactory0.create(genericMethodParameterTypeCacheEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Class cannot be cast to class java.lang.reflect.ParameterizedType (java.lang.Class and java.lang.reflect.ParameterizedType are in module java.base of loader 'bootstrap')
         //
         verifyException("ognl.internal.entry.GenericMethodParameterTypeFactory", e);
      }
  }
}
