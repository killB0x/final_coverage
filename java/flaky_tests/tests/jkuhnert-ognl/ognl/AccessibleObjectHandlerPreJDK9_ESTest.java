/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 14:28:30 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.AccessibleObject;
import ognl.AccessibleObjectHandler;
import ognl.AccessibleObjectHandlerPreJDK9;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessibleObjectHandlerPreJDK9_ESTest extends AccessibleObjectHandlerPreJDK9_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AccessibleObjectHandler accessibleObjectHandler0 = AccessibleObjectHandlerPreJDK9.createHandler();
      AccessibleObject accessibleObject0 = mock(AccessibleObject.class, new ViolatedAssumptionAnswer());
      accessibleObjectHandler0.setAccessible(accessibleObject0, true);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AccessibleObjectHandler accessibleObjectHandler0 = AccessibleObjectHandlerPreJDK9.createHandler();
      // Undeclared exception!
      try { 
        accessibleObjectHandler0.setAccessible((AccessibleObject) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.AccessibleObjectHandlerPreJDK9", e);
      }
  }
}
