/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 13:52:14 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.AccessibleObject;
import ognl.AccessibleObjectHandlerJDK9Plus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessibleObjectHandlerJDK9Plus_ESTest extends AccessibleObjectHandlerJDK9Plus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessibleObjectHandlerJDK9Plus.unsafeOrDescendant((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessibleObjectHandlerJDK9Plus.createHandler();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class ognl.OgnlRuntime
         //
         verifyException("ognl.AccessibleObjectHandlerJDK9Plus", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = AccessibleObjectHandlerJDK9Plus.unsafeOrDescendant(class0);
      assertFalse(boolean0);
  }
}
