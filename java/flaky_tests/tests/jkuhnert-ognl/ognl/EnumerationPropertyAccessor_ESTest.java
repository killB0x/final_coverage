/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 13:58:24 GMT 2022
 */

package ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import ognl.DefaultClassResolver;
import ognl.DefaultTypeConverter;
import ognl.EnumerationPropertyAccessor;
import ognl.MemberAccess;
import ognl.OgnlContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EnumerationPropertyAccessor_ESTest extends EnumerationPropertyAccessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      MemberAccess memberAccess0 = mock(MemberAccess.class, new ViolatedAssumptionAnswer());
      DefaultClassResolver defaultClassResolver0 = new DefaultClassResolver();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      OgnlContext ognlContext0 = new OgnlContext(memberAccess0, defaultClassResolver0, defaultTypeConverter0, (Map<Object, Object>) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        enumerationPropertyAccessor0.setProperty(ognlContext0, stringTokenizer0, object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can't set property java.lang.Object@1773afd0 on Enumeration
         //
         verifyException("ognl.EnumerationPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      DefaultTypeConverter defaultTypeConverter0 = new DefaultTypeConverter();
      // Undeclared exception!
      try { 
        enumerationPropertyAccessor0.getProperty((OgnlContext) null, (Object) null, defaultTypeConverter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class ognl.OgnlRuntime
         //
         verifyException("ognl.ObjectPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      StringTokenizer stringTokenizer0 = new StringTokenizer("next");
      Object object0 = enumerationPropertyAccessor0.getProperty((OgnlContext) null, stringTokenizer0, "next");
      assertEquals("next", object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        enumerationPropertyAccessor0.getProperty((OgnlContext) null, object0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.util.Enumeration (java.lang.Object and java.util.Enumeration are in module java.base of loader 'bootstrap')
         //
         verifyException("ognl.EnumerationPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      StringTokenizer stringTokenizer0 = new StringTokenizer("S;0");
      Object object0 = enumerationPropertyAccessor0.getProperty((OgnlContext) null, stringTokenizer0, "hasMoreElements");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      // Undeclared exception!
      try { 
        enumerationPropertyAccessor0.getProperty((OgnlContext) null, (Object) null, "{_[lT[");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class ognl.OgnlRuntime
         //
         verifyException("ognl.ObjectPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      // Undeclared exception!
      try { 
        enumerationPropertyAccessor0.getProperty((OgnlContext) null, (Object) null, "hasMoreElements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ognl.EnumerationPropertyAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      StringTokenizer stringTokenizer0 = new StringTokenizer("nextElement", "nextElement");
      // Undeclared exception!
      try { 
        enumerationPropertyAccessor0.getProperty((OgnlContext) null, stringTokenizer0, "nextElement");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EnumerationPropertyAccessor enumerationPropertyAccessor0 = new EnumerationPropertyAccessor();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "hasNext");
      Object object0 = enumerationPropertyAccessor0.getProperty((OgnlContext) null, stringTokenizer0, "hasNext");
      assertEquals(false, object0);
  }
}
