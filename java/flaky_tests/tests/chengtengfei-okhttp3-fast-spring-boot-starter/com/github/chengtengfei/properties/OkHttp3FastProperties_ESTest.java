/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:01:52 GMT 2022
 */

package com.github.chengtengfei.properties;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.chengtengfei.properties.OkHttp3FastProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OkHttp3FastProperties_ESTest extends OkHttp3FastProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      assertFalse(okHttp3FastProperties0.isHttps());
      
      okHttp3FastProperties0.setHttps(true);
      boolean boolean0 = okHttp3FastProperties0.isHttps();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      assertEquals(3, okHttp3FastProperties0.getWriteTimeout());
      
      okHttp3FastProperties0.setWriteTimeout(0);
      int int0 = okHttp3FastProperties0.getWriteTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      assertEquals(3, okHttp3FastProperties0.getReadTimeout());
      
      okHttp3FastProperties0.setReadTimeout(0);
      int int0 = okHttp3FastProperties0.getReadTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      assertEquals(3, okHttp3FastProperties0.getReadTimeout());
      
      okHttp3FastProperties0.setReadTimeout((-1));
      int int0 = okHttp3FastProperties0.getReadTimeout();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      assertEquals(3, okHttp3FastProperties0.getConnectTimeout());
      
      okHttp3FastProperties0.setConnectTimeout(0);
      int int0 = okHttp3FastProperties0.getConnectTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      okHttp3FastProperties0.setConnectTimeout((-357));
      int int0 = okHttp3FastProperties0.getConnectTimeout();
      assertEquals((-357), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      boolean boolean0 = okHttp3FastProperties0.isRetryOnConnectionFailure();
      assertEquals(3, okHttp3FastProperties0.getConnectTimeout());
      assertTrue(boolean0);
      assertFalse(okHttp3FastProperties0.isHttps());
      assertEquals(3, okHttp3FastProperties0.getWriteTimeout());
      assertEquals(3, okHttp3FastProperties0.getReadTimeout());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      String string0 = okHttp3FastProperties0.toString();
      assertEquals("OkHttp3FastProperties{connectTimeout=3, readTimeout=3, writeTimeout=3, retryOnConnectionFailure=true, https=false}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      int int0 = okHttp3FastProperties0.getWriteTimeout();
      assertFalse(okHttp3FastProperties0.isHttps());
      assertEquals(3, int0);
      assertEquals(3, okHttp3FastProperties0.getConnectTimeout());
      assertEquals(3, okHttp3FastProperties0.getReadTimeout());
      assertTrue(okHttp3FastProperties0.isRetryOnConnectionFailure());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      okHttp3FastProperties0.setWriteTimeout((-1378));
      int int0 = okHttp3FastProperties0.getWriteTimeout();
      assertEquals((-1378), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      int int0 = okHttp3FastProperties0.getConnectTimeout();
      assertEquals(3, int0);
      assertFalse(okHttp3FastProperties0.isHttps());
      assertEquals(3, okHttp3FastProperties0.getReadTimeout());
      assertEquals(3, okHttp3FastProperties0.getWriteTimeout());
      assertTrue(okHttp3FastProperties0.isRetryOnConnectionFailure());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      boolean boolean0 = okHttp3FastProperties0.isHttps();
      assertFalse(boolean0);
      assertEquals(3, okHttp3FastProperties0.getWriteTimeout());
      assertEquals(3, okHttp3FastProperties0.getConnectTimeout());
      assertEquals(3, okHttp3FastProperties0.getReadTimeout());
      assertTrue(okHttp3FastProperties0.isRetryOnConnectionFailure());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      assertTrue(okHttp3FastProperties0.isRetryOnConnectionFailure());
      
      okHttp3FastProperties0.setRetryOnConnectionFailure(false);
      boolean boolean0 = okHttp3FastProperties0.isRetryOnConnectionFailure();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OkHttp3FastProperties okHttp3FastProperties0 = new OkHttp3FastProperties();
      int int0 = okHttp3FastProperties0.getReadTimeout();
      assertEquals(3, int0);
      assertEquals(3, okHttp3FastProperties0.getConnectTimeout());
      assertTrue(okHttp3FastProperties0.isRetryOnConnectionFailure());
      assertFalse(okHttp3FastProperties0.isHttps());
      assertEquals(3, okHttp3FastProperties0.getWriteTimeout());
  }
}
