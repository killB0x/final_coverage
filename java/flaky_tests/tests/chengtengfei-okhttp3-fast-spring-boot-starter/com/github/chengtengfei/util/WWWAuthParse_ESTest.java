/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:56:43 GMT 2022
 */

package com.github.chengtengfei.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.chengtengfei.util.WWWAuthParse;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WWWAuthParse_ESTest extends WWWAuthParse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        WWWAuthParse.assembleDigestAuthorization(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.chengtengfei.util.WWWAuthParse", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("method", "method");
      // Undeclared exception!
      try { 
        WWWAuthParse.assembleDigestAuthorization(hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/springframework/util/StringUtils
         //
         verifyException("com.github.chengtengfei.util.WWWAuthParse", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map<String, String> map0 = WWWAuthParse.parseDigestAuthenticateHeader("Fzu8)f.S&=bvKnmn>\"");
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Map<String, String> map0 = WWWAuthParse.parseDigestAuthenticateHeader("Digest");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<String, String> map0 = WWWAuthParse.parseDigestAuthenticateHeader("");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        WWWAuthParse.parseDigestAuthenticateHeader("E-j=1W'n:&[s\",q~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // \u89E3\u6790[q~]\u51FA\u9519
         //
         verifyException("com.github.chengtengfei.util.WWWAuthParse", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Map<String, String> map0 = WWWAuthParse.parseDigestAuthenticateHeader((String) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = WWWAuthParse.authType(" ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = WWWAuthParse.authType("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = WWWAuthParse.authType("Digest");
      assertEquals("Digest", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = WWWAuthParse.authType((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WWWAuthParse wWWAuthParse0 = new WWWAuthParse();
  }
}
