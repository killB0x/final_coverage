/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:02:34 GMT 2022
 */

package com.github.chengtengfei.configure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.chengtengfei.configure.SSLSocketFactoryImp;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.security.KeyStore;
import javax.net.ssl.SSLContext;
import javax.net.ssl.X509TrustManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SSLSocketFactoryImp_ESTest extends SSLSocketFactoryImp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      Socket socket0 = sSLSocketFactoryImp0.createSocket(inetAddress0, 0);
      assertNull(socket0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      Socket socket0 = sSLSocketFactoryImp0.createSocket();
      try { 
        sSLSocketFactoryImp0.createSocket(socket0, "w:/wK(gUp", (-3356), false);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      String[] stringArray0 = sSLSocketFactoryImp0.getDefaultCipherSuites();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      // Undeclared exception!
      try { 
        sSLSocketFactoryImp0.createSocket((Socket) null, (String) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      Socket socket0 = sSLSocketFactoryImp0.createSocket("", 0);
      assertNull(socket0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      Socket socket0 = sSLSocketFactoryImp0.createSocket("P", 0, inetAddress0, 0);
      assertNull(socket0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      SSLContext sSLContext0 = sSLSocketFactoryImp0.getSSLContext();
      assertNotNull(sSLContext0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      Socket socket0 = sSLSocketFactoryImp0.createSocket((InetAddress) null, (-2877), (InetAddress) null, (-2877));
      assertNull(socket0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      X509TrustManager x509TrustManager0 = sSLSocketFactoryImp0.getTrustManager();
      assertNotNull(x509TrustManager0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SSLSocketFactoryImp sSLSocketFactoryImp0 = new SSLSocketFactoryImp((KeyStore) null);
      String[] stringArray0 = sSLSocketFactoryImp0.getSupportedCipherSuites();
      assertEquals(0, stringArray0.length);
  }
}
