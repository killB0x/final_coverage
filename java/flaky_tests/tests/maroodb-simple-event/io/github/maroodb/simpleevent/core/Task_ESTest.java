/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 18:25:16 GMT 2022
 */

package io.github.maroodb.simpleevent.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.maroodb.simpleevent.core.Task;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Task_ESTest extends Task_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(0, consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task1 = new Task<Object>(1126, consumer1);
      boolean boolean0 = task0.equals(task1);
      assertFalse(boolean0);
      assertFalse(task1.equals((Object)task0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Task<Task<Object>> task0 = new Task<Task<Object>>((-194), (Consumer<Task<Object>>) null);
      // Undeclared exception!
      try { 
        task0.execute((Task<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.maroodb.simpleevent.core.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Consumer<Task<Integer>> consumer0 = (Consumer<Task<Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Task<Integer>> task0 = new Task<Task<Integer>>((-1), consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Integer> task1 = new Task<Integer>((-1), consumer1);
      boolean boolean0 = task1.equals(task0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(1710, consumer0);
      Integer integer0 = new Integer(4203);
      boolean boolean0 = task0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(1, consumer0);
      boolean boolean0 = task0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(1437, consumer0);
      boolean boolean0 = task0.equals(task0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Integer> task0 = new Task<Integer>(3464, consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Integer> task1 = new Task<Integer>(0, consumer1);
      boolean boolean0 = task0.equals(task1);
      assertFalse(boolean0);
      assertFalse(task1.equals((Object)task0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(3464, consumer0);
      Object object0 = new Object();
      task0.execute(object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(3464, consumer0);
      task0.hashCode();
  }
}
