/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 18:25:43 GMT 2022
 */

package io.github.maroodb.simpleevent.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.maroodb.simpleevent.core.Observable;
import io.github.maroodb.simpleevent.core.SimpleEvent;
import io.github.maroodb.simpleevent.core.Task;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Observable_ESTest extends Observable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleEvent<Object> simpleEvent0 = new SimpleEvent<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>(1205, consumer0);
      Observable<Object> observable0 = new Observable<Object>(simpleEvent0, (String) null, task0);
      observable0.unsubscribe();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Task<Object> task0 = new Task<Object>((-1546), consumer0);
      Observable<Object> observable0 = new Observable<Object>((SimpleEvent<Object>) null, "io.github.maroodb.simpleevent.core.Observable", task0);
      // Undeclared exception!
      try { 
        observable0.unsubscribe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.maroodb.simpleevent.core.Observable", e);
      }
  }
}
