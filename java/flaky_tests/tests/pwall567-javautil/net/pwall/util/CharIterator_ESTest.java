/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:05:03 GMT 2022
 */

package net.pwall.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.NoSuchElementException;
import net.pwall.util.CharIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharIterator_ESTest extends CharIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3324);
      CharIterator charIterator0 = new CharIterator(charBuffer0, 3324, 3324);
      assertFalse(charIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('.');
      CharIterator charIterator0 = new CharIterator(charBuffer0);
      charIterator0.next();
      assertTrue(charIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharIterator charIterator0 = new CharIterator(charBuffer0);
      assertTrue(charIterator0.hasNext());
      
      Character character0 = charIterator0.next();
      assertEquals('A', (char)character0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharIterator charIterator0 = new CharIterator(charBuffer0);
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        charIterator0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharIterator charIterator0 = null;
      try {
        charIterator0 = new CharIterator((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.CharIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharIterator charIterator0 = new CharIterator(charBuffer0);
      boolean boolean0 = charIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('y');
      CharIterator charIterator0 = new CharIterator(charBuffer0);
      charIterator0.next();
      charIterator0.next();
      charIterator0.next();
      charIterator0.next();
      charIterator0.next();
      charIterator0.next();
      charIterator0.next();
      charIterator0.next();
      // Undeclared exception!
      try { 
        charIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.CharIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3322);
      CharIterator charIterator0 = null;
      try {
        charIterator0 = new CharIterator(charBuffer0, 3322, 1089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.CharIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharIterator charIterator0 = null;
      try {
        charIterator0 = new CharIterator(charBuffer0, 20, 20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.CharIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharIterator charIterator0 = null;
      try {
        charIterator0 = new CharIterator(charBuffer0, (-1589), (-1589));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.CharIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharIterator charIterator0 = null;
      try {
        charIterator0 = new CharIterator((CharSequence) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.CharIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharIterator charIterator0 = new CharIterator(charBuffer0);
      boolean boolean0 = charIterator0.hasNext();
      assertFalse(boolean0);
  }
}
