/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:04:09 GMT 2022
 */

package net.pwall.util;

import org.junit.Test;
import static org.junit.Assert.*;
import net.pwall.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.create((Object) null, (Object) null);
      Pair<Object, Pair<Object, Object>> pair1 = Pair.create((Object) null, pair0);
      Pair<Pair<Object, Object>, Object> pair2 = new Pair<Pair<Object, Object>, Object>(pair0, pair1);
      pair2.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Object object1 = pair0.getSecond();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.create((Object) null, (Object) null);
      Object object0 = pair0.getFirst();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.create((Object) null, (Object) null);
      Pair<Object, Pair<Object, Object>> pair1 = Pair.create((Object) null, pair0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Object object1 = pair0.getFirst();
      Pair<Object, Object> pair1 = Pair.create((Object) object1, (Object) object1);
      boolean boolean0 = pair0.equals(pair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair<Object, Object> pair0 = new Pair<Object, Object>((Object) null, (Object) null);
      Object object0 = pair0.getSecond();
      boolean boolean0 = pair0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = Pair.create(object0, object0);
      Pair<Object, Pair<Object, Object>> pair1 = new Pair<Object, Pair<Object, Object>>(pair0, pair0);
      Object object1 = pair1.getFirst();
      boolean boolean0 = pair0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, pair0);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<Object, Object> pair0 = new Pair<Object, Object>((Object) null, (Object) null);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object0);
      String string0 = pair0.toString();
      assertNotNull(string0);
  }
}
