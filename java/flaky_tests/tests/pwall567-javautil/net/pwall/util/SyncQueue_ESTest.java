/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:00:13 GMT 2022
 */

package net.pwall.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.pwall.util.SyncQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SyncQueue_ESTest extends SyncQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>(1462);
      syncQueue0.setMaxLength(537);
      SyncQueue<Integer> syncQueue1 = new SyncQueue<Integer>(0, 0);
      syncQueue1.getSize();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>();
      Object object0 = new Object();
      syncQueue0.add(object0);
      Object object1 = new Object();
      syncQueue0.insert(object1);
      Integer integer0 = new Integer(10);
      syncQueue0.add(integer0);
      Integer integer1 = new Integer((-1268));
      syncQueue0.add(integer1);
      syncQueue0.insert(integer1);
      SyncQueue<Integer> syncQueue1 = new SyncQueue<Integer>(0, 0);
      Integer integer2 = new Integer(0);
      syncQueue0.get();
      syncQueue1.insert(integer2);
      syncQueue1.addUnique(integer0);
      syncQueue0.addUnique(syncQueue1);
      Object object2 = new Object();
      syncQueue0.addUnique(object2);
      syncQueue0.setMaxLength((-1));
      syncQueue0.get();
      Integer integer3 = new Integer((-1268));
      syncQueue0.insert(integer3);
      syncQueue0.get();
      syncQueue1.get();
      syncQueue1.addUnique(integer2);
      Integer integer4 = new Integer(0);
      syncQueue1.remove(integer4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SyncQueue<Integer> syncQueue0 = new SyncQueue<Integer>(10, 10);
      Integer integer0 = new Integer(10);
      syncQueue0.insert(integer0);
      Integer integer1 = new Integer(10);
      syncQueue0.insert(integer1);
      syncQueue0.get();
      Integer integer2 = new Integer(0);
      syncQueue0.addUnique(integer2);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      syncQueue0.add(integer4);
      syncQueue0.addUnique(integer3);
      syncQueue0.remove(integer3);
      syncQueue0.setMaxLength(0);
      SyncQueue<Object> syncQueue1 = new SyncQueue<Object>();
      syncQueue1.add(syncQueue0);
      Object object0 = syncQueue1.get();
      syncQueue1.remove(object0);
      syncQueue1.add(integer4);
      syncQueue1.getMaxLength();
      Integer integer5 = new Integer((-690));
      syncQueue0.addUnique(integer5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>(1422, 1422);
      Integer integer0 = new Integer(0);
      syncQueue0.insert(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>(4528);
      Object object0 = new Object();
      syncQueue0.remove(object0);
      Object object1 = new Object();
      syncQueue0.remove(object1);
      syncQueue0.getMaxLength();
      Object object2 = new Object();
      syncQueue0.insert(object2);
      SyncQueue<Integer> syncQueue1 = new SyncQueue<Integer>();
      Integer integer0 = new Integer(4528);
      syncQueue1.insertUnique(integer0);
      syncQueue1.insertUnique((Integer) 0);
      syncQueue1.getSize();
      Object object3 = new Object();
      syncQueue0.remove(object3);
      syncQueue1.addUnique((Integer) 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>();
      Object object0 = new Object();
      syncQueue0.insert(object0);
      Object object1 = new Object();
      syncQueue0.insertUnique(object1);
      SyncQueue<Integer> syncQueue1 = new SyncQueue<Integer>(2261);
      syncQueue1.insert((Integer) 0);
      syncQueue1.addUnique((Integer) 10);
      Object object2 = syncQueue1.get();
      syncQueue0.insert(object2);
      syncQueue0.insert(object1);
      syncQueue0.getMaxLength();
      syncQueue1.addUnique((Integer) 10);
      Object object3 = new Object();
      syncQueue0.addUnique(object3);
      syncQueue0.get();
      syncQueue0.remove(object3);
      syncQueue0.setMaxLength(0);
      syncQueue1.setMaxLength(0);
      Integer integer0 = new Integer(0);
      syncQueue1.insertUnique(integer0);
      syncQueue0.insert(object0);
      syncQueue1.addUnique(integer0);
      syncQueue0.insert(object2);
      syncQueue0.insertUnique(integer0);
      syncQueue0.getMaxLength();
      Object object4 = new Object();
      syncQueue0.remove(object4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SyncQueue<Integer> syncQueue0 = null;
      try {
        syncQueue0 = new SyncQueue<Integer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>(0, 0);
      SyncQueue<Integer> syncQueue1 = null;
      try {
        syncQueue1 = new SyncQueue<Integer>((-5733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -5733
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = null;
      try {
        syncQueue0 = new SyncQueue<Object>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>(1, 797);
      syncQueue0.addUnique((Object) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SyncQueue<Integer> syncQueue0 = new SyncQueue<Integer>();
      syncQueue0.insertUnique((Integer) null);
      Integer integer0 = new Integer(10);
      syncQueue0.insertUnique(integer0);
      SyncQueue<Object> syncQueue1 = new SyncQueue<Object>(1, 1);
      syncQueue1.insert(integer0);
      syncQueue1.remove(syncQueue0);
      syncQueue1.setMaxLength(0);
      syncQueue1.getSize();
      syncQueue1.insert(syncQueue0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>(0, 0);
      Object object0 = new Object();
      syncQueue0.add(object0);
      syncQueue0.setMaxLength(0);
      syncQueue0.getMaxLength();
      syncQueue0.insert((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SyncQueue<Object> syncQueue0 = new SyncQueue<Object>();
      Object object0 = new Object();
      syncQueue0.insertUnique(object0);
      syncQueue0.get();
      syncQueue0.getMaxLength();
      syncQueue0.insertUnique(object0);
      SyncQueue<Integer> syncQueue1 = null;
      try {
        syncQueue1 = new SyncQueue<Integer>((-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
