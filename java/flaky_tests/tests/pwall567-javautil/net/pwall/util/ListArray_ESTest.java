/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:10:52 GMT 2022
 */

package net.pwall.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.pwall.util.ListArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListArray_ESTest extends ListArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      ListArray<Integer> listArray0 = new ListArray<Integer>(integerArray0);
      listArray0.set(0, integer0);
      assertTrue(listArray0.contains(0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ListArray<Integer> listArray0 = ListArray.asList(integerArray0);
      int int0 = listArray0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ListArray<Integer> listArray0 = ListArray.asList(integerArray0);
      listArray0.array = null;
      // Undeclared exception!
      try { 
        listArray0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ListArray<Integer> listArray0 = ListArray.asList(integerArray0);
      // Undeclared exception!
      try { 
        listArray0.get(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 25 out of bounds for length 0
         //
         verifyException("net.pwall.util.ListArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ListArray<Integer> listArray0 = null;
      try {
        listArray0 = new ListArray<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ListArray<Integer> listArray0 = ListArray.asList(integerArray0);
      Integer integer0 = listArray0.get(0);
      Integer integer1 = listArray0.set(0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ListArray<Integer> listArray0 = ListArray.asList(integerArray0);
      int int0 = listArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      ListArray<Integer> listArray0 = ListArray.asList(integerArray0);
      Integer integer0 = new Integer((-1267));
      // Undeclared exception!
      try { 
        listArray0.set((-1267), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1267 out of bounds for length 9
         //
         verifyException("net.pwall.util.ListArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListArray.asList((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
