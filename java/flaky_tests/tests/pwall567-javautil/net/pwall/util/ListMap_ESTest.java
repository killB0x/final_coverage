/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 15:55:05 GMT 2022
 */

package net.pwall.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import net.pwall.util.ListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListMap_ESTest extends ListMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      assertTrue(listMap0.isEmpty());
      
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(listMap0);
      ListMap<Integer, ListMap.Entry<Object, Integer>> listMap2 = new ListMap<Integer, ListMap.Entry<Object, Integer>>();
      listMap2.list = null;
      // Undeclared exception!
      try { 
        listMap2.containsValue(listMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListMap<ListMap.Entry<Object, Integer>, Object> listMap0 = new ListMap<ListMap.Entry<Object, Integer>, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      ListMap.Entry<Object, Integer> listMap_Entry0 = new ListMap.Entry<Object, Integer>(listMap0, integer0);
      Integer integer1 = new Integer(1);
      listMap0.putIfAbsent(listMap_Entry0, integer1);
      Integer integer2 = new Integer((-813));
      listMap0.equals(integer2);
      listMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        listMap0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListMap<Object, Integer> listMap0 = new ListMap<Object, Integer>();
      Collection<Integer> collection0 = listMap0.values();
      ListMap<Object, ListMap.Entry<Object, Object>> listMap1 = new ListMap<Object, ListMap.Entry<Object, Object>>(3790);
      ListMap.Entry<Object, Object> listMap_Entry0 = new ListMap.Entry<Object, Object>(collection0, listMap0);
      listMap1.replace((Object) listMap0, listMap_Entry0, listMap_Entry0);
      listMap1.putIfAbsent(listMap_Entry0, listMap_Entry0);
      listMap1.hashCode();
      listMap1.size();
      ListMap<Comparable<Integer>, Comparable<Integer>> listMap2 = new ListMap<Comparable<Integer>, Comparable<Integer>>();
      listMap2.toString();
      ListMap<Comparable<Object>, Object> listMap3 = new ListMap<Comparable<Object>, Object>();
      listMap3.hashCode();
      listMap2.keySet();
      ListMap<Comparable<Integer>, Integer> listMap4 = new ListMap<Comparable<Integer>, Integer>();
      listMap4.hashCode();
      Integer integer0 = new Integer(3790);
      ListMap<Object, Object> listMap5 = new ListMap<Object, Object>();
      listMap5.containsValue(listMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListMap<Object, Integer> listMap0 = new ListMap<Object, Integer>();
      Collection<Integer> collection0 = listMap0.values();
      ListMap<Object, ListMap.Entry<Object, Object>> listMap1 = new ListMap<Object, ListMap.Entry<Object, Object>>(3790);
      ListMap.Entry<Object, Object> listMap_Entry0 = new ListMap.Entry<Object, Object>(collection0, listMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      listMap1.replace((Object) listMap0, listMap_Entry0, listMap_Entry0);
      listMap1.putIfAbsent(listMap_Entry0, listMap_Entry0);
      Set<Map.Entry<Object, ListMap.Entry<Object, Object>>> set0 = (Set<Map.Entry<Object, ListMap.Entry<Object, Object>>>)listMap1.entrySet();
      listMap1.remove((Object) set0);
      listMap1.hashCode();
      listMap1.size();
      ListMap<Comparable<Integer>, Comparable<Integer>> listMap2 = new ListMap<Comparable<Integer>, Comparable<Integer>>();
      listMap2.toString();
      ListMap<Comparable<Object>, Object> listMap3 = new ListMap<Comparable<Object>, Object>();
      listMap3.hashCode();
      listMap2.keySet();
      ListMap<Comparable<Integer>, Integer> listMap4 = new ListMap<Comparable<Integer>, Integer>();
      listMap4.hashCode();
      Integer integer0 = new Integer((-2069));
      listMap0.replace((Object) integer0, (Integer) null, (Integer) null);
      ListMap<Object, Object> listMap5 = new ListMap<Object, Object>();
      listMap5.containsValue(listMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.list = null;
      // Undeclared exception!
      try { 
        listMap0.findIndex(listMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      listMap0.putIfAbsent(integer0, integer0);
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(listMap0);
      ListMap<Object, Integer> listMap2 = new ListMap<Object, Integer>(listMap0);
      listMap2.hashCode();
      listMap1.getEntry(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListMap<Integer, Comparable<Integer>> listMap0 = new ListMap<Integer, Comparable<Integer>>();
      listMap0.list = null;
      // Undeclared exception!
      try { 
        listMap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      ListMap<Object, Integer> listMap0 = new ListMap<Object, Integer>(hashMap0);
      Integer integer1 = new Integer(0);
      listMap0.findIndex(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(125);
      listMap1.containsValue(listMap0);
      ListMap<ListMap.Entry<Object, Integer>, Comparable<Integer>> listMap2 = new ListMap<ListMap.Entry<Object, Integer>, Comparable<Integer>>();
      listMap2.list = null;
      // Undeclared exception!
      try { 
        listMap2.getEntry(767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(3460);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(213);
      hashMap0.put(integer1, integer1);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      Integer integer2 = new Integer(213);
      listMap0.containsKey(integer2);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      listMap0.containsKey(integer0);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-30));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, integer0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap1.keySet();
      listMap0.equals(listMap1);
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>();
      ListMap<Integer, Integer> listMap3 = new ListMap<Integer, Integer>(listMap2);
      ListMap<Integer, Integer> listMap4 = new ListMap<Integer, Integer>(listMap3);
      ListMap<Integer, Integer> listMap5 = new ListMap<Integer, Integer>(listMap4);
      // Undeclared exception!
      try { 
        listMap5.getEntry((-1522));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-28));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, integer0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.equals(listMap1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1282));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      listMap_Entry0.setValue(integer1);
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(1);
      listMap1.equals(listMap0);
      ListMap<Comparable<Integer>, Object> listMap2 = null;
      try {
        listMap2 = new ListMap<Comparable<Integer>, Object>((-1282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1282
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-30));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, integer0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap0.equals(listMap1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(51);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap1.put(integer0, listMap_Entry0);
      listMap1.putAll(listMap1);
      Integer integer1 = new Integer(51);
      listMap1.remove((Object) integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(27);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      Integer integer1 = new Integer(27);
      Integer integer2 = new Integer(3958);
      Integer integer3 = new Integer(27);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>(integer3, integer1);
      listMap_Entry1.equals(listMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(27);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      Integer integer1 = new Integer(27);
      Integer integer2 = new Integer(27);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>(integer2, integer1);
      listMap_Entry1.equals(listMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.list = null;
      // Undeclared exception!
      try { 
        listMap0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(271);
      listMap0.containsValue(integer0);
      Integer integer1 = new Integer(27);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer1, integer1);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap1.put(integer1, listMap_Entry0);
      listMap1.put(integer1, listMap_Entry0);
      listMap1.putAll(listMap1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer((-28));
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer((-43));
      Integer integer3 = new Integer(3020);
      hashMap0.put(integer2, integer3);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      listMap0.get(integer1);
      listMap0.containsValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listMap0.merge(integer0, integer1, biFunction0);
      listMap0.isEmpty();
      listMap0.remove((Object) integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.equals(listMap0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      listMap0.put(integer0, integer1);
      listMap0.isEmpty();
      listMap0.remove((Object) integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(3020);
      hashMap0.put(integer3, integer4);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      List<ListMap.Entry<Integer, Integer>> list0 = (List<ListMap.Entry<Integer, Integer>>)listMap0.list;
      listMap0.list = list0;
      listMap0.get(integer2);
      listMap0.hashCode();
      Integer integer5 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, integer5);
      listMap0.containsValue(listMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(390);
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer2);
      listMap0.put(integer2, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap1.putAll(listMap0);
      listMap1.keySet();
      listMap1.get(integer2);
      ListMap<Integer, Integer> listMap2 = null;
      try {
        listMap2 = new ListMap<Integer, Integer>((-1628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1628
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer((-1884));
      Integer integer1 = new Integer(4635);
      listMap0.put(integer1, integer0);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ListMap<Object, Object> listMap0 = new ListMap<Object, Object>();
      // Undeclared exception!
      try { 
        listMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(390);
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer2);
      Integer integer3 = new Integer(39);
      Integer integer4 = new Integer(44);
      listMap0.putIfAbsent(integer4, listMap_Entry0);
      listMap0.put(integer3, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap0.values();
      listMap0.putAll(listMap0);
      // Undeclared exception!
      try { 
        listMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1282));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      listMap_Entry0.setValue(integer1);
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap1.equals(listMap0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap0.hashCode();
      listMap1.equals(listMap0);
      Integer integer0 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      listMap1.replace(integer0, listMap_Entry0);
      listMap1.containsValue(listMap0);
      listMap1.values();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, integer0);
      listMap_Entry1.equals((Object) null);
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>();
      Integer integer1 = new Integer(0);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry2 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, integer1);
      Object object0 = listMap_Entry2.getValue();
      listMap2.get(object0);
      listMap0.containsKey(integer0);
      ListMap<Integer, Integer> listMap3 = new ListMap<Integer, Integer>();
      listMap3.get(integer1);
      listMap2.findIndex((Object) null);
      listMap_Entry1.getKey();
      Integer integer2 = new Integer((-1319));
      listMap1.containsValue(integer2);
      Object object1 = new Object();
      listMap2.findIndex(object1);
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap4 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      listMap4.entrySet();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry3 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>((ListMap.Entry<Integer, Integer>) null, (ListMap.Entry<Integer, Integer>) null);
      listMap_Entry3.equals(listMap_Entry1);
      listMap_Entry3.getValue();
      listMap2.containsKey(integer0);
      Integer integer3 = new Integer(0);
      listMap0.findIndex(integer3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> hashMap0 = new HashMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(hashMap0);
      Integer integer0 = new Integer((-3384));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, integer0);
      hashMap0.put(listMap_Entry0, listMap_Entry0);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>(integer0, (Integer) null);
      listMap0.equals(listMap_Entry1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>(integer1, integer2);
      listMap0.put(listMap_Entry2, listMap_Entry2);
      ListMap.Entry<Integer, Integer> listMap_Entry3 = new ListMap.Entry<Integer, Integer>((Integer) null, integer0);
      listMap_Entry3.equals(integer1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ListMap.Entry<Integer, Integer> listMap_Entry0 = (ListMap.Entry<Integer, Integer>) mock(ListMap.Entry.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>(listMap_Entry0, integer0);
      Integer integer1 = new Integer(1);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      Integer integer2 = new Integer(1);
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>(integer2, integer0);
      listMap0.putIfAbsent(listMap_Entry2, integer2);
      listMap0.keySet();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-1102));
      ListMap.Entry<Integer, Integer> listMap_Entry3 = new ListMap.Entry<Integer, Integer>(integer2, integer3);
      Integer integer5 = new Integer((-116));
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry4 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>(listMap_Entry3, integer5);
      listMap_Entry4.getKey();
      listMap0.remove((Object) integer0, (Object) listMap_Entry1);
      Integer integer6 = new Integer((-1864));
      listMap0.containsValue(integer3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.list = null;
      // Undeclared exception!
      try { 
        listMap0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      listMap0.containsValue(listMap0);
      listMap0.values();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>(listMap_Entry0, integer0);
      listMap_Entry1.equals(listMap_Entry1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(hashMap0);
      listMap1.hashCode();
      ListMap<Integer, Object> listMap2 = new ListMap<Integer, Object>(listMap0);
      ListMap<Comparable<Integer>, Object> listMap3 = new ListMap<Comparable<Integer>, Object>(listMap2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(1582);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listMap0.replaceAll(biFunction0);
      Integer integer0 = new Integer(1582);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      listMap0.computeIfAbsent(integer0, unaryOperator0);
      listMap0.hashCode();
      listMap0.isEmpty();
      listMap0.put(integer0, (Integer) null);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = null;
      try {
        listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>((-2854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2854
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(listMap0);
      listMap1.keySet();
      Integer integer0 = new Integer(7650);
      Integer integer1 = new Integer(7650);
      listMap0.replace(integer0, integer0, integer1);
      Integer integer2 = new Integer(7650);
      listMap1.replace(integer0, integer1);
      listMap1.get(integer2);
      listMap1.entrySet();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap2 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(0);
      listMap0.hashCode();
      Integer integer3 = new Integer(7650);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer2, integer3);
      listMap_Entry0.equals(integer2);
      Map.Entry.comparingByValue();
      listMap_Entry0.setValue(integer1);
      listMap_Entry0.setValue((Integer) null);
      Integer integer4 = new Integer(0);
      listMap2.putIfAbsent(listMap_Entry0, integer4);
      listMap2.get(integer3);
      listMap2.size();
      listMap1.hashCode();
      listMap1.size();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap3 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap3.entrySet();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap4 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listMap0.put((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(2054);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.toString();
      listMap0.containsValue(integer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, (Integer) null);
      listMap0.putIfAbsent(listMap_Entry0, (Integer) null);
      listMap0.containsValue(listMap0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ListMap<Comparable<Object>, Integer> listMap0 = new ListMap<Comparable<Object>, Integer>();
      // Undeclared exception!
      try { 
        listMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.findIndex((Object) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.findIndex(integer0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(24);
      hashMap0.put(integer0, integer0);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      listMap0.replace(integer0, integer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ListMap.Entry<Integer, Integer> listMap_Entry0 = (ListMap.Entry<Integer, Integer>) mock(ListMap.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(listMap_Entry0).toString();
      Integer integer0 = new Integer(1);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>(listMap_Entry0, integer0);
      Integer integer1 = new Integer(0);
      listMap_Entry1.equals(integer1);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      ListMap.Entry<Integer, Integer> listMap_Entry2 = listMap_Entry1.getKey();
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(1);
      listMap0.hashCode();
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(listMap0);
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>(listMap1);
      listMap2.containsValue(listMap_Entry2);
      ListMap.Entry<Integer, Integer> listMap_Entry3 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      listMap_Entry3.getValue();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap3 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(1);
      listMap3.get(listMap_Entry2);
      listMap3.put(listMap_Entry2, integer1);
      listMap3.toString();
      // Undeclared exception!
      try { 
        listMap1.getEntry(123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(1582);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listMap0.replaceAll(biFunction0);
      Integer integer0 = new Integer(1582);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      listMap0.computeIfAbsent(integer0, unaryOperator0);
      listMap0.hashCode();
      listMap0.isEmpty();
      int int0 = (-2854);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = null;
      try {
        listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>((-2854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2854
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(396);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ListMap<Comparable<Integer>, Comparable<Integer>> listMap0 = new ListMap<Comparable<Integer>, Comparable<Integer>>();
      // Undeclared exception!
      try { 
        listMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      Integer integer1 = new Integer((-43));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      Integer integer3 = new Integer((-43));
      Integer integer4 = new Integer(3020);
      hashMap0.put(integer3, integer4);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      listMap0.remove((Object) integer0);
      listMap0.get(integer2);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.remove((Object) listMap0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(0);
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>();
      listMap0.putAll(listMap1);
      Integer integer0 = new Integer((-2036));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      listMap0.findIndex(listMap_Entry0);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>(listMap_Entry0, integer0);
      listMap_Entry1.getValue();
      listMap0.toString();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap2 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      Map.Entry.comparingByKey((Comparator<? super ListMap.Entry<Integer, Integer>>) comparator0);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap3 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap2);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap4 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap3);
      BiFunction<ListMap.Entry<Integer, Integer>, Integer, Integer> biFunction0 = (BiFunction<ListMap.Entry<Integer, Integer>, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listMap4.replaceAll(biFunction0);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap5 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap4);
      BiFunction<ListMap.Entry<Integer, Integer>, Integer, Integer> biFunction1 = (BiFunction<ListMap.Entry<Integer, Integer>, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any(net.pwall.util.ListMap.Entry.class) , anyInt());
      listMap2.compute(listMap_Entry0, biFunction1);
      listMap5.remove((Object) listMap_Entry1);
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>((Integer) null, (Integer) null);
      listMap_Entry2.getKey();
      listMap0.toString();
      // Undeclared exception!
      try { 
        listMap5.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      Integer integer1 = new Integer((-43));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(0);
      hashMap0.put(integer2, integer2);
      Integer integer3 = new Integer((-43));
      Integer integer4 = new Integer(3020);
      hashMap0.put(integer3, integer4);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      listMap0.get(integer2);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer((-3248));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      listMap_Entry0.toString();
      ListMap.Entry<Integer, ListMap.Entry<Integer, Integer>> listMap_Entry1 = new ListMap.Entry<Integer, ListMap.Entry<Integer, Integer>>(integer0, listMap_Entry0);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      Integer integer1 = new Integer((-193));
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>(integer1, (Integer) null);
      listMap0.get(listMap_Entry2);
      Map.Entry.comparingByValue();
      listMap0.toString();
      ListMap<Integer, Integer> listMap1 = null;
      try {
        listMap1 = new ListMap<Integer, Integer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, ListMap.Entry<Integer, Integer>> hashMap0 = new HashMap<Integer, ListMap.Entry<Integer, Integer>>();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      hashMap0.putAll(listMap0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(hashMap0);
      listMap1.clear();
      listMap1.putAll(hashMap0);
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        listMap2.getEntry((-4593));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.clear();
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap0);
      Integer integer0 = new Integer((-43));
      Integer integer1 = new Integer((-43));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      Integer integer2 = new Integer((-43));
      listMap1.putIfAbsent(listMap_Entry0, integer2);
      listMap1.keySet();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(1);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>((Integer) null, integer1);
      listMap_Entry1.getKey();
      listMap1.remove((Object) integer4, (Object) null);
      Integer integer5 = new Integer((-1128));
      listMap1.containsValue(integer2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.values();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
      Integer integer1 = new Integer(0);
      listMap0.containsKey(integer1);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      listMap0.containsValue(listMap0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap0.hashCode();
      listMap1.equals((Object) null);
      Integer integer0 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      listMap1.replace(integer0, listMap_Entry0);
      listMap1.containsValue((Object) null);
      listMap1.values();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, integer0);
      listMap_Entry1.equals((Object) null);
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>();
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(0);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry2 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, integer1);
      Object object0 = listMap_Entry2.getValue();
      listMap2.get(object0);
      listMap0.containsKey(integer0);
      ListMap<Integer, Integer> listMap3 = new ListMap<Integer, Integer>();
      Integer integer2 = new Integer(0);
      listMap3.get(integer2);
      listMap2.findIndex((Object) null);
      listMap_Entry1.getKey();
      Object object1 = new Object();
      listMap2.findIndex(object1);
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap4 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      listMap4.entrySet();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry3 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>((ListMap.Entry<Integer, Integer>) null, (ListMap.Entry<Integer, Integer>) null);
      listMap_Entry3.getValue();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      listMap0.keySet();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = (ListMap.Entry<Integer, Integer>) mock(ListMap.Entry.class, new ViolatedAssumptionAnswer());
      ListMap.Entry<Integer, ListMap.Entry<Integer, Integer>> listMap_Entry1 = new ListMap.Entry<Integer, ListMap.Entry<Integer, Integer>>(integer0, listMap_Entry0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      Integer integer1 = listMap_Entry1.getKey();
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(2);
      Map.Entry.comparingByValue();
      Integer integer2 = new Integer(61);
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>(integer1, integer2);
      listMap0.put(listMap_Entry2, listMap_Entry2);
      listMap0.entrySet();
      listMap_Entry2.setValue(integer0);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap2 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap1);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap3 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap2);
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap4 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap3);
      BiFunction<ListMap.Entry<Integer, Integer>, Integer, Integer> biFunction0 = (BiFunction<ListMap.Entry<Integer, Integer>, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listMap4.replaceAll(biFunction0);
      listMap4.size();
      ListMap<Integer, Integer> listMap5 = new ListMap<Integer, Integer>();
      listMap5.get(listMap_Entry2);
      Integer integer3 = new Integer(61);
      ListMap.Entry<Integer, Integer> listMap_Entry3 = new ListMap.Entry<Integer, Integer>(integer0, integer3);
      listMap2.equals(listMap_Entry3);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap6 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(526);
      listMap6.hashCode();
      listMap6.put(integer0, listMap_Entry3);
      Integer integer4 = new Integer(0);
      listMap5.put(integer3, integer4);
      listMap5.keySet();
      listMap6.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap0.hashCode();
      listMap1.equals((Object) null);
      Integer integer0 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      listMap1.replace(integer0, listMap_Entry0);
      listMap1.containsValue((Object) null);
      listMap1.values();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, integer0);
      listMap_Entry1.equals((Object) null);
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>();
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(0);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry2 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, integer1);
      Object object0 = listMap_Entry2.getValue();
      listMap2.get(object0);
      listMap0.containsKey(integer0);
      ListMap<Integer, Integer> listMap3 = new ListMap<Integer, Integer>();
      Integer integer2 = new Integer(0);
      listMap3.get(integer2);
      listMap2.findIndex((Object) null);
      listMap_Entry1.getKey();
      Object object1 = new Object();
      listMap2.findIndex(object1);
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap4 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      listMap4.entrySet();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry3 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>((ListMap.Entry<Integer, Integer>) null, (ListMap.Entry<Integer, Integer>) null);
      listMap_Entry3.equals(listMap_Entry1);
      listMap_Entry3.getValue();
      listMap2.containsKey(integer2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry0 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>((ListMap.Entry<Integer, Integer>) null, (ListMap.Entry<Integer, Integer>) null);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(32);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      listMap_Entry0.equals(listMap_Entry1);
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(32);
      listMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListMap.Entry<Integer, Integer> listMap_Entry0 = (ListMap.Entry<Integer, Integer>) mock(ListMap.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(listMap_Entry0).toString();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(listMap_Entry0, listMap_Entry0);
      Integer integer0 = new Integer((-2830));
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>(integer0, integer0);
      Integer integer1 = new Integer((-2830));
      listMap_Entry2.setValue(integer1);
      listMap_Entry1.setValue(listMap_Entry2);
      Integer integer2 = new Integer((-2830));
      Integer integer3 = new Integer((-2830));
      ListMap.Entry<Integer, Integer> listMap_Entry3 = new ListMap.Entry<Integer, Integer>(integer2, integer3);
      listMap_Entry1.equals(listMap_Entry3);
      Map.Entry.comparingByValue();
      listMap_Entry3.setValue(integer3);
      listMap_Entry1.setValue(listMap_Entry3);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer4 = new Integer((-3222));
      listMap0.put(integer4, integer2);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = null;
      try {
        listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>((-3222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3222
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Object, Object>> listMap0 = new ListMap<Integer, ListMap.Entry<Object, Object>>();
      ListMap.Entry<Integer, Object> listMap_Entry0 = new ListMap.Entry<Integer, Object>((Integer) null, (Object) null);
      ListMap.Entry<Integer, Object> listMap_Entry1 = new ListMap.Entry<Integer, Object>((Integer) null, listMap_Entry0);
      listMap_Entry1.equals(listMap_Entry0);
      listMap0.containsValue(listMap_Entry1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      ListMap<Integer, Integer> listMap1 = null;
      try {
        listMap1 = new ListMap<Integer, Integer>((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ListMap.Entry<Integer, Integer> listMap_Entry0 = (ListMap.Entry<Integer, Integer>) mock(ListMap.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(listMap_Entry0).toString();
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(listMap_Entry0, listMap_Entry0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      listMap_Entry1.getValue();
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = null;
      try {
        listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>((Map<? extends ListMap.Entry<Integer, Integer>, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.pwall.util.ListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer((-14));
      listMap0.putIfAbsent(integer0, integer0);
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(listMap0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(listMap0);
      int int0 = (-43);
      Integer integer0 = new Integer((-43));
      Integer integer1 = new Integer((-43));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      Integer integer2 = new Integer((-1301));
      listMap_Entry0.toString();
      Integer integer3 = new Integer(582);
      listMap1.putIfAbsent(listMap_Entry0, integer3);
      listMap1.replace(listMap_Entry0, integer1, integer2);
      Integer integer4 = new Integer((-43));
      listMap1.putIfAbsent(listMap_Entry0, integer4);
      listMap1.keySet();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int1 = 0;
      Integer integer5 = new Integer(0);
      hashMap0.put(integer5, integer5);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>(integer3, integer4);
      Integer integer6 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry2 = new ListMap.Entry<Integer, Integer>(integer6, integer5);
      Object object0 = listMap_Entry2.getValue();
      listMap_Entry1.equals(object0);
      ListMap<Integer, Integer> listMap2 = null;
      try {
        listMap2 = new ListMap<Integer, Integer>((-631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -631
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(2);
      listMap0.putIfAbsent(integer0, integer0);
      listMap0.toString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(390);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      listMap0.putAll(listMap1);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer> listMap_Entry1 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, Integer>((ListMap.Entry<Integer, Integer>) null, (Integer) null);
      listMap_Entry1.equals(integer1);
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap2 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(0);
      listMap2.entrySet();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(44);
      listMap0.putIfAbsent(integer0, integer0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, (Integer) null);
      listMap_Entry0.setValue((Integer) null);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer(32);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, (Integer) null);
      listMap_Entry0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer0, integer1);
      Comparator<ListMap.Entry<Integer, Integer>> comparator0 = (Comparator<ListMap.Entry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey();
      Integer integer2 = new Integer(4334);
      Integer integer3 = listMap_Entry0.setValue(integer2);
      Map.Entry.comparingByKey((Comparator<? super ListMap.Entry<Integer, Integer>>) comparator0);
      Map.Entry.comparingByKey();
      listMap_Entry0.toString();
      listMap_Entry0.equals(integer0);
      ListMap.Entry<Integer, ListMap.Entry<Integer, Integer>> listMap_Entry1 = new ListMap.Entry<Integer, ListMap.Entry<Integer, Integer>>(integer0, listMap_Entry0);
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(1);
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(listMap0);
      listMap1.put(integer3, integer3);
      ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap_Entry2 = new ListMap.Entry<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>(listMap_Entry0, listMap_Entry0);
      Integer integer4 = new Integer(44);
      listMap_Entry2.equals(integer4);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      ListMap<Comparable<Integer>, Integer> listMap1 = new ListMap<Comparable<Integer>, Integer>(listMap0);
      boolean boolean0 = listMap1.containsKey(listMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = null;
      try {
        listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>((-3188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3188
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(0);
      listMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      listMap0.size();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>(32);
      listMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-117));
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>(0);
      Integer integer2 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer2, integer1);
      listMap1.put(listMap_Entry0, integer2);
      ListMap.Entry<Integer, Integer> listMap_Entry1 = new ListMap.Entry<Integer, Integer>(integer1, integer0);
      listMap1.containsKey(listMap_Entry1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ListMap<Integer, Integer> listMap2 = new ListMap<Integer, Integer>(hashMap0);
      int int0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.hashCode();
      listMap0.equals(listMap0);
      ListMap<Integer, Integer> listMap1 = new ListMap<Integer, Integer>(0);
      listMap1.toString();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      Integer integer0 = new Integer(61);
      listMap0.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.findIndex(listMap0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Integer integer0 = new Integer((-30));
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>((Integer) null, integer0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      listMap0.put(integer0, listMap_Entry0);
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      assertTrue(listMap1.equals((Object)listMap0));
      
      Integer integer1 = new Integer((-30));
      listMap1.replace(integer1, (ListMap.Entry<Integer, Integer>) null);
      boolean boolean0 = listMap0.equals(listMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap0 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>();
      ListMap<Integer, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<Integer, ListMap.Entry<Integer, Integer>>(listMap0);
      boolean boolean0 = listMap1.equals(listMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      ListMap.Entry<Object, Object> listMap_Entry0 = new ListMap.Entry<Object, Object>(listMap0, listMap0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      listMap0.replace(integer0, integer0);
      assertEquals(0, listMap0.size());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ListMap<ListMap.Entry<Integer, Integer>, Integer> listMap0 = new ListMap<ListMap.Entry<Integer, Integer>, Integer>();
      // Undeclared exception!
      try { 
        listMap0.getEntry(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ListMap<Integer, Integer> listMap0 = new ListMap<Integer, Integer>();
      int int0 = 83;
      Integer integer0 = new Integer(83);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyInt());
      listMap0.compute(integer0, biFunction0);
      Integer integer1 = new Integer(0);
      ListMap.Entry<Integer, Integer> listMap_Entry0 = new ListMap.Entry<Integer, Integer>(integer1, integer1);
      listMap0.get(listMap_Entry0);
      listMap0.equals(listMap_Entry0);
      ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>> listMap1 = new ListMap<ListMap.Entry<Integer, Integer>, ListMap.Entry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        listMap1.getEntry(791);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
