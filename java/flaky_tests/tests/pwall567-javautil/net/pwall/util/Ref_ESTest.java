/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:03:15 GMT 2022
 */

package net.pwall.util;

import org.junit.Test;
import static org.junit.Assert.*;
import net.pwall.util.Ref;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ref_ESTest extends Ref_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ref<Object> ref0 = new Ref<Object>((Object) null);
      Ref<Object> ref1 = new Ref<Object>(ref0);
      Object object0 = ref1.getObject();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ref<Integer> ref0 = Ref.create((Integer) null);
      Object object0 = ref0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Ref<Object> ref0 = new Ref<Object>(object0);
      boolean boolean0 = Ref.equal(ref0, ref0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ref<Object> ref0 = new Ref<Object>((Object) null);
      boolean boolean0 = Ref.equal((Object) null, ref0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Ref<Integer> ref0 = new Ref<Integer>(integer0);
      Ref<Object> ref1 = Ref.create((Object) integer0);
      boolean boolean0 = Ref.equal(ref1, ref0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ref<Integer> ref0 = Ref.create((Integer) null);
      boolean boolean0 = Ref.equal("(null)", ref0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ref<Object> ref0 = Ref.create((Object) null);
      Integer integer0 = new Integer(0);
      Ref<Integer> ref1 = Ref.create(integer0);
      boolean boolean0 = ref0.equals(ref1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ref<Integer> ref0 = Ref.create((Integer) null);
      Ref<Object> ref1 = Ref.create((Object) null);
      Ref<Object> ref2 = new Ref<Object>(ref1);
      Object object0 = ref2.get();
      boolean boolean0 = ref0.equals(object0);
      assertFalse(ref2.equals((Object)ref1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(55);
      Ref<Integer> ref0 = new Ref<Integer>(integer0);
      boolean boolean0 = ref0.equals(ref0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ref<Integer> ref0 = Ref.create((Integer) null);
      Object object0 = new Object();
      boolean boolean0 = ref0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Ref<Integer> ref0 = Ref.create(integer0);
      ref0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ref<Integer> ref0 = Ref.create((Integer) null);
      String string0 = ref0.toString();
      assertEquals("(null)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ref<Integer> ref0 = new Ref<Integer>((Integer) null);
      Object object0 = ref0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ref<Object> ref0 = new Ref<Object>((Object) null);
      ref0.hashCode();
  }
}
