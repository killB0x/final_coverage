/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 03:14:38 GMT 2022
 */

package spullara.util.matching;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Optional;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spullara.util.matching.Extractor;
import spullara.util.matching.Match;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Match_ESTest extends Match_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      // Undeclared exception!
      try { 
        Match.or((Match<Integer, Integer>) null, (Extractor<Integer, Integer>) null, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spullara.util.matching.Match", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      Match<Integer, Integer> match0 = new Match<Integer, Integer>();
      Match<Integer, Integer> match1 = match0.orElse(function0);
      Integer integer0 = new Integer(1149);
      Optional<Integer> optional0 = match1.check(integer0);
      Extractor<Function<Integer, Integer>, Integer> extractor0 = (Extractor<Function<Integer, Integer>, Integer>) mock(Extractor.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(extractor0).unapply(any(java.util.function.Function.class));
      Match<Function<Integer, Integer>, Integer> match2 = Match.match(extractor0, function0);
      Optional<Integer> optional1 = match2.check((Function<Integer, Integer>) null);
      assertTrue(optional1.equals((Object)optional0));
  }
}
