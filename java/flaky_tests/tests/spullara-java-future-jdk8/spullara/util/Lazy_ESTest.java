/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 03:17:54 GMT 2022
 */

package spullara.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spullara.util.Lazy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Lazy_ESTest extends Lazy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Lazy.lazy(callable0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      Lazy<Object> lazy0 = Lazy.lazy(callable1);
      Object object0 = lazy0.get();
      //  // Unstable assertion: assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Lazy<Object> lazy0 = Lazy.lazy(callable0);
      lazy0.get();
      Object object0 = lazy0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Lazy<Integer> lazy0 = Lazy.lazy((Callable<Integer>) null);
      // Undeclared exception!
      try { 
        lazy0.get();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Lazy initialization failure
         //
         verifyException("spullara.util.Lazy", e);
      }
  }
}
