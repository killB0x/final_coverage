/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 03:20:27 GMT 2022
 */

package spullara.nio.channels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.SocketAddress;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousServerSocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spullara.nio.channels.FutureServerSocketChannel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureServerSocketChannel_ESTest extends FutureServerSocketChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FutureServerSocketChannel futureServerSocketChannel0 = new FutureServerSocketChannel((AsynchronousServerSocketChannel) null);
      // Undeclared exception!
      try { 
        futureServerSocketChannel0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spullara.nio.channels.FutureServerSocketChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FutureServerSocketChannel futureServerSocketChannel0 = new FutureServerSocketChannel((AsynchronousServerSocketChannel) null);
      // Undeclared exception!
      try { 
        futureServerSocketChannel0.bind((SocketAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spullara.nio.channels.FutureServerSocketChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FutureServerSocketChannel futureServerSocketChannel0 = null;
      try {
        futureServerSocketChannel0 = new FutureServerSocketChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        FutureServerSocketChannel.open((AsynchronousChannelGroup) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        FutureServerSocketChannel.open();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder
         //
         verifyException("java.nio.channels.spi.AsynchronousChannelProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FutureServerSocketChannel futureServerSocketChannel0 = new FutureServerSocketChannel((AsynchronousServerSocketChannel) null);
      // Undeclared exception!
      try { 
        futureServerSocketChannel0.accept();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spullara.nio.channels.FutureServerSocketChannel", e);
      }
  }
}
