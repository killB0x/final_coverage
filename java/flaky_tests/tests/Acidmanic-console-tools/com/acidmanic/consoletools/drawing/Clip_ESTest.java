/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 08:52:24 GMT 2022
 */

package com.acidmanic.consoletools.drawing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.acidmanic.consoletools.drawing.Clip;
import com.acidmanic.consoletools.drawing.Position;
import com.acidmanic.consoletools.drawing.Size;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Clip_ESTest extends Clip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Clip clip0 = new Clip(0, 1, 0, (-486));
      assertEquals(0, clip0.getStartColumn());
      
      clip0.setStartColumn(1);
      clip0.getSize();
      assertEquals(1, clip0.getStartColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Clip clip0 = new Clip(0, 0, 0, 0);
      clip0.setEndLine(791);
      boolean boolean0 = clip0.containsLine(421);
      assertEquals(791, clip0.getEndLine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setStartLine((-5581));
      boolean boolean0 = clip0.containsLine(0);
      assertEquals((-5581), clip0.getStartLine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setEndColumn(1);
      boolean boolean0 = clip0.containsColumn(0);
      assertEquals(1, clip0.getColumns());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Position position0 = new Position((-2161), (-2161));
      Clip clip0 = new Clip(position0, position0);
      assertEquals((-2161), clip0.getColumns());
      assertEquals((-4322), clip0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Clip clip0 = new Clip(1, 1, 0, 2907);
      assertEquals(0, clip0.getColumns());
      assertEquals(2907, clip0.getLines());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Clip clip0 = new Clip();
      assertEquals(0, clip0.getLines());
      
      clip0.setStartLine(1);
      int int0 = clip0.getStartLine();
      assertEquals((-1), clip0.getLines());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clip clip0 = new Clip();
      clip0.setStartLine((-1));
      int int0 = clip0.getStartLine();
      assertEquals(1, clip0.getLines());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Clip clip0 = new Clip();
      assertEquals(0, clip0.getColumns());
      
      clip0.setStartColumn(1);
      int int0 = clip0.getStartColumn();
      assertEquals((-1), clip0.getColumns());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Position position0 = new Position();
      position0.setColumns((-3826));
      Clip clip0 = new Clip(position0, position0);
      int int0 = clip0.getStartColumn();
      assertEquals((-7652), clip0.getEndColumn());
      assertEquals((-3826), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setStartLine((-5581));
      clip0.getSize();
      assertEquals(5581, clip0.getLines());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setEndColumn(1);
      clip0.getSize();
      assertEquals(1, clip0.getColumns());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Clip clip0 = new Clip();
      clip0.setEndColumn((-1));
      clip0.getSize();
      assertEquals((-1), clip0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setStartLine((-5581));
      int int0 = clip0.getLines();
      assertEquals((-5581), clip0.getStartLine());
      assertEquals(5581, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Clip clip0 = new Clip(0, 1, 0, (-486));
      int int0 = clip0.getLines();
      assertEquals(1, clip0.getColumns());
      assertEquals((-486), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Clip clip0 = new Clip((-355), 0, (-355), 0);
      clip0.setEndLine(165);
      int int0 = clip0.getEndLine();
      assertEquals(520, clip0.getLines());
      assertEquals(165, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Clip clip0 = new Clip();
      clip0.setEndLine((-1));
      int int0 = clip0.getEndLine();
      assertEquals((-1), clip0.getLines());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setEndColumn(1);
      int int0 = clip0.getEndColumn();
      assertEquals(1, clip0.getColumns());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Clip clip0 = new Clip(0, 0, 0, 0);
      clip0.setEndColumn((-3577));
      int int0 = clip0.getEndColumn();
      assertEquals((-3577), clip0.getColumns());
      assertEquals((-3577), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Clip clip0 = new Clip();
      clip0.setStartColumn((-3124));
      int int0 = clip0.getColumns();
      assertEquals((-3124), clip0.getStartColumn());
      assertEquals(3124, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Clip clip0 = new Clip();
      clip0.setEndColumn((-1));
      int int0 = clip0.getColumns();
      assertEquals((-1), clip0.getEndColumn());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      clip0.setEndLine((-1920));
      boolean boolean0 = clip0.containsLine(0);
      assertEquals((-1920), clip0.getEndLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Clip clip0 = new Clip((-355), 0, (-355), 0);
      boolean boolean0 = clip0.containsLine((-538));
      assertEquals(355, clip0.getColumns());
      assertFalse(boolean0);
      assertEquals(355, clip0.getLines());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Clip clip0 = new Clip();
      boolean boolean0 = clip0.containsColumn(1);
      assertFalse(boolean0);
      assertEquals(0, clip0.getStartColumn());
      assertEquals(0, clip0.getLines());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      boolean boolean0 = clip0.containsColumn(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Clip clip0 = new Clip();
      boolean boolean0 = clip0.containsColumn((-920));
      assertEquals(0, clip0.getColumns());
      assertFalse(boolean0);
      assertEquals(0, clip0.getLines());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      int int0 = clip0.getEndLine();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      int int0 = clip0.getEndColumn();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      int int0 = clip0.getLines();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Clip clip0 = new Clip();
      int int0 = clip0.getStartLine();
      assertEquals(0, int0);
      assertEquals(0, clip0.getEndLine());
      assertEquals(0, clip0.getColumns());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Position position0 = new Position();
      Clip clip0 = new Clip(position0, position0);
      int int0 = clip0.getStartColumn();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Clip clip0 = new Clip();
      int int0 = clip0.getColumns();
      assertEquals(0, clip0.getLines());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Clip clip0 = null;
      try {
        clip0 = new Clip((Position) null, (Size) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acidmanic.consoletools.drawing.Clip", e);
      }
  }
}
