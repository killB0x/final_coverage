/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:14:54 GMT 2022
 */

package com.acidmanic.consoletools.rendering.decorators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.acidmanic.consoletools.drawing.AsciiBorder;
import com.acidmanic.consoletools.drawing.Padding;
import com.acidmanic.consoletools.drawing.Size;
import com.acidmanic.consoletools.rendering.Box;
import com.acidmanic.consoletools.rendering.RenderingContext;
import com.acidmanic.consoletools.rendering.StringRenderable;
import com.acidmanic.consoletools.rendering.componentfeatures.Renderable;
import com.acidmanic.consoletools.rendering.decorators.Resized;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Resized_ESTest extends Resized_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("TZ^TvibU88k!is");
      Box box0 = new Box(stringRenderable0);
      Resized resized0 = new Resized(box0);
      resized0.measure();
      resized0.measure();
      box0.setContent(resized0);
      // Undeclared exception!
      try { 
        resized0.measure();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("com.acidmanic.consoletools.rendering.sizing.SizeMatchStrategySolution");
      Resized resized0 = new Resized(stringRenderable0);
      Resized resized1 = new Resized(resized0);
      resized0.setHeight((-729));
      resized1.setHeight(0);
      Resized resized2 = new Resized(stringRenderable0);
      resized2.getHeight();
      resized1.getHeight();
      RenderingContext<Object, Integer> renderingContext0 = (RenderingContext<Object, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext0);
      resized2.setHeight(1);
      resized1.getWidth();
      resized0.measure();
      resized0.setHeight((-2735));
      resized2.measure();
      resized2.getWidth();
      int int0 = resized2.getHeight();
      assertEquals(1, int0);
      
      resized1.setWidth((-1328));
      Size size0 = resized2.measure();
      assertEquals(1, size0.getLines());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("S/x");
      stringRenderable0.setContent("S/x");
      Box box0 = new Box(stringRenderable0);
      Resized resized0 = new Resized(box0);
      stringRenderable0.measure();
      resized0.getWidth();
      RenderingContext<Integer, Object> renderingContext0 = (RenderingContext<Integer, Object>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext0);
      Padding padding0 = new Padding(1926);
      padding0.setTop((-178));
      box0.setMargins(padding0);
      resized0.setWidth(1926);
      resized0.getWidth();
      resized0.setHeight(1926);
      int int0 = resized0.getWidth();
      resized0.getWidth();
      resized0.setWidth(3722);
      RenderingContext<Integer, Object> renderingContext1 = (RenderingContext<Integer, Object>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext1);
      resized0.getWidth();
      resized0.setHeight(1926);
      resized0.measure();
      int int1 = resized0.getHeight();
      assertTrue(int1 == int0);
      
      resized0.setWidth(32);
      Size size0 = resized0.measure();
      assertEquals(32, size0.getColumns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable((String) null);
      Box box0 = new Box(stringRenderable0);
      Resized resized0 = new Resized(box0);
      AsciiBorder asciiBorder0 = new AsciiBorder((String) null, "com.acidmanic.consoletools.rendering.decorators.Resized", "com.acidmanic.consoletools.rendering.decorators.Resized", (String) null, "~;t-*", "Z1#I5", "[#5a(Rw*d2+F", (String) null, "com.acidmanic.consoletools.textualcontent.StringModifierManager", ":R", "f+&n)I7L~UFN})P8", "*J}o<n^5iP", (String) null);
      box0.setOutline(asciiBorder0);
      resized0.setHeight((-4425));
      box0.getWidth();
      resized0.setWidth(1);
      resized0.setWidth(1);
      resized0.setHeight(1);
      resized0.getHeight();
      resized0.getHeight();
      // Undeclared exception!
      try { 
        stringRenderable0.measure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acidmanic.consoletools.string.StringExtensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable((String) null);
      Resized resized0 = new Resized(stringRenderable0);
      RenderingContext<Integer, Integer> renderingContext0 = (RenderingContext<Integer, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext0);
      resized0.getHeight();
      stringRenderable0.setContent("com.acidmanic.consoletools.rendering.decorators.Resized");
      resized0.setHeight(559);
      resized0.setHeight(0);
      resized0.measure();
      resized0.getHeight();
      int int0 = resized0.getHeight();
      assertEquals(0, int0);
      
      resized0.setWidth(0);
      resized0.measure();
      int int1 = resized0.getWidth();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("com.acidmanic.consoletools.rendering.sizing.SizeMatchStrategySolution");
      Resized resized0 = new Resized(stringRenderable0);
      stringRenderable0.measure();
      resized0.setWidth((-729));
      resized0.measure();
      RenderingContext<Integer, Integer> renderingContext0 = (RenderingContext<Integer, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext0);
      stringRenderable0.setContent("com.acidmanic.consoletools.rendering.sizing.SizeMatchStrategySolution");
      resized0.getHeight();
      stringRenderable0.measure();
      resized0.measure();
      RenderingContext<Integer, Object> renderingContext1 = (RenderingContext<Integer, Object>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext1);
      Size size0 = resized0.measure();
      assertEquals((-729), size0.getColumns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Resized resized0 = new Resized((Renderable) null);
      // Undeclared exception!
      try { 
        resized0.render((RenderingContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acidmanic.consoletools.rendering.decorators.Resized", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Resized resized0 = new Resized((Renderable) null);
      resized0.setWidth((-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("");
      stringRenderable0.setContent("");
      stringRenderable0.measure();
      Resized resized0 = new Resized(stringRenderable0);
      resized0.setWidth(1);
      Resized resized1 = new Resized(resized0);
      resized1.setHeight(0);
      resized1.setHeight(0);
      resized0.getHeight();
      resized1.getHeight();
      RenderingContext<Object, Integer> renderingContext0 = (RenderingContext<Object, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      resized0.render(renderingContext0);
      resized0.setHeight(1221);
      resized1.getWidth();
      resized1.measure();
      resized0.setHeight((-1));
      resized0.measure();
      resized1.getWidth();
      resized1.getHeight();
      resized1.setWidth((-1206));
      assertFalse(resized1.equals((Object)resized0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Resized resized0 = new Resized((Renderable) null);
      int int0 = resized0.getHeight();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Resized resized0 = new Resized((Renderable) null);
      int int0 = resized0.getWidth();
      assertEquals((-1), int0);
      
      resized0.setHeight((-1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("z");
      stringRenderable0.measure();
      stringRenderable0.setContent("u]\"QEX");
      RenderingContext<Object, Integer> renderingContext0 = (RenderingContext<Object, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      stringRenderable0.render(renderingContext0);
      RenderingContext<Object, Integer> renderingContext1 = (RenderingContext<Object, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      stringRenderable0.render(renderingContext1);
      stringRenderable0.setContent("u]\"QEX");
      Resized resized0 = new Resized(stringRenderable0);
      resized0.measure();
      Resized resized1 = new Resized(resized0);
      resized1.measure();
      resized1.getWidth();
      resized0.setHeight((-376));
      assertFalse(resized0.equals((Object)resized1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Resized resized0 = new Resized((Renderable) null);
      // Undeclared exception!
      try { 
        resized0.measure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.acidmanic.consoletools.rendering.sizing.SizeAutomation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringRenderable stringRenderable0 = new StringRenderable("dE2L]r-Er~");
      RenderingContext<Integer, Integer> renderingContext0 = (RenderingContext<Integer, Integer>) mock(RenderingContext.class, new ViolatedAssumptionAnswer());
      stringRenderable0.measure();
      Size size0 = stringRenderable0.measure();
      stringRenderable0.measure();
      stringRenderable0.setContent("dE2L]r-Er~");
      stringRenderable0.setContent("dE2L]r-Er~");
      stringRenderable0.render(renderingContext0);
      stringRenderable0.measure();
      stringRenderable0.setContent("dE2L]r-Er~");
      stringRenderable0.setContent("dE2L]r-Er~");
      Resized resized0 = new Resized(stringRenderable0);
      resized0.getWidth();
      resized0.measure();
      resized0.measure();
      Size size1 = resized0.measure();
      assertFalse(size1.equals((Object)size0));
  }
}
