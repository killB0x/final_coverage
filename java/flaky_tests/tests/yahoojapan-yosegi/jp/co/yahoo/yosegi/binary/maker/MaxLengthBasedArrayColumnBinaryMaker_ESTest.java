/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:07:36 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiArrayIndexLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiRunLengthEncodingArrayLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.objects.FloatObj;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.UnionColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MaxLengthBasedArrayColumnBinaryMaker_ESTest extends MaxLengthBasedArrayColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.SHORT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 6);
      yosegiArrayIndexLoader0.setArrayIndex(0, 0, 143);
      yosegiArrayIndexLoader0.finish();
      IColumn iColumn0 = yosegiArrayIndexLoader0.build();
      yosegiArrayIndexLoader0.setArrayIndex(1, (-1), 463);
      ColumnBinary columnBinary1 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary1, yosegiArrayIndexLoader0);
      assertEquals(18, columnBinary1.binaryLength);
      assertEquals(18, columnBinary1.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IArrowPrimitiveConnector iArrowPrimitiveConnector1 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((-2821), 0, 0, 0, 0).when(iArrowPrimitiveConnector1).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn1 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector1);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode((String) null, columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, columnBinaryMakerCustomConfigNode0, (CompressResultNode) null, arrowPrimitiveColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 702);
      yosegiArrayIndexLoader0.setArrayIndex(143, Integer.MAX_VALUE, 0);
      yosegiArrayIndexLoader0.finish();
      IColumn iColumn0 = yosegiArrayIndexLoader0.build();
      ColumnBinary columnBinary1 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      assertEquals(6, columnBinary1.binaryLength);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("L[Lt9b&^y+C)KpiM1l", 2270, stack0);
      maxLengthBasedArrayColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(0, columnBinary0.binaryLength);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", 0, true, 0, 0, 0, (byte)81, (byte)81, 0, (byte)81);
      int int0 = maxLengthBasedArrayColumnBinaryMaker0.calcBinarySize(byteColumnAnalizeResult0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("7oQiLV}o%n;", (-408), false, 0, 0, 0, 0, 4, (-408));
      int int0 = maxLengthBasedArrayColumnBinaryMaker0.calcBinarySize(bytesColumnAnalizeResult0);
      assertEquals((-1632), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      LongObj longObj0 = new LongObj(983);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "Loader type is not RLE ARRAY.", 983);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 7864);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      // Undeclared exception!
      maxLengthBasedArrayColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary((String) null, 939, arrayList0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      ColumnBinary columnBinary1 = new ColumnBinary("B5H~5]8wT@,", "", "jp.co.yahoo.yosegi.inmemory.YosegiArrayLoader", columnBinary0.columnType, 0, 145, 0, 145, columnBinary0.binary, 161, 2686, columnBinary0.columnBinaryList);
      arrayList0.add(columnBinary1);
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary1, 2686);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.ClassNotFoundException: Class 'B5H~5]8wT@,.class' should be in target project, but could not be found!
         //
         verifyException("jp.co.yahoo.yosegi.util.FindClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongObj longObj0 = new LongObj(4620);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "*'", 4620);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 36960);
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      // Undeclared exception!
      maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, yosegiArrayIndexLoader0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary((String) null, 389, arrayList0);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 389);
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, yosegiArrayIndexLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      LongObj longObj0 = new LongObj(184L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "jp.co.yahoo.yosegi.binary.maker.MaxLeng1hBasedArrayColumnBinaryMaker", (-4078));
      columnBinary0.binaryLength = (-4078);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 0);
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, yosegiArrayIndexLoader0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4078
         //
         verifyException("jp.co.yahoo.yosegi.compressor.DefaultCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongObj longObj0 = new LongObj(232);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "`", 232);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 1856);
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      columnBinary0.columnBinaryList = (List<ColumnBinary>) linkedList0;
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, yosegiArrayIndexLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      FloatObj floatObj0 = new FloatObj(955);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(floatObj0, "jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", 955);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 1);
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, yosegiArrayIndexLoader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$IntConverter4", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.getLoadType((ColumnBinary) null, 2261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      blockIndexNode0.getChildNode("Q}vhB_");
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("Q}vhB_");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrayColumn0);
      maxLengthBasedArrayColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(6, columnBinary0.rawDataSize);
      assertEquals(6, columnBinary0.binaryLength);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("Repetition must be equal to or greater than 0.", 894, linkedList0);
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, columnBinary0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      ILoader<ColumnBinary> iLoader0 = (ILoader<ColumnBinary>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn((LoadType) null).when(iLoader0).getLoaderType();
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not ARRAY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(2006).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinary columnBinary0 = dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
      columnBinary0.setRepetitions(columnBinary0.repetitions, (-2036));
      LoadType loadType0 = LoadType.RLE_ARRAY;
      ILoader<YosegiRunLengthEncodingArrayLoader> iLoader0 = (ILoader<YosegiRunLengthEncodingArrayLoader>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$883678797 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IRunLengthEncodingArrayLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$883678797 and jp.co.yahoo.yosegi.inmemory.IRunLengthEncodingArrayLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1323846a)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(2006).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinary columnBinary0 = dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
      LoadType loadType0 = LoadType.CONST;
      columnBinary0.setRepetitions(columnBinary0.repetitions, (-2036));
      ILoader<YosegiRunLengthEncodingArrayLoader> iLoader0 = (ILoader<YosegiRunLengthEncodingArrayLoader>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not RLE ARRAY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.MaxLengthBasedArrayColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("^ky", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      columnBinary0.isSetLoadSize = true;
      LoadType loadType0 = maxLengthBasedArrayColumnBinaryMaker0.getLoadType(columnBinary0, 151);
      assertEquals(LoadType.RLE_ARRAY, loadType0);
      assertEquals(6, columnBinary0.binaryLength);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.SHORT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      LoadType loadType0 = maxLengthBasedArrayColumnBinaryMaker0.getLoadType(columnBinary0, (-1));
      assertEquals(LoadType.ARRAY, loadType0);
      assertEquals(6, columnBinary0.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.LONG;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, primitiveColumn0);
      assertEquals(6, columnBinary0.binaryLength);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.INTEGER;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      ColumnBinary columnBinary0 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 6);
      yosegiArrayIndexLoader0.setArrayIndex(0, 6, (-2020));
      yosegiArrayIndexLoader0.finish();
      IColumn iColumn0 = yosegiArrayIndexLoader0.build();
      ColumnBinary columnBinary1 = maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      assertEquals(6, columnBinary1.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yS", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.LONG;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yS");
      // Undeclared exception!
      try { 
        maxLengthBasedArrayColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MaxLengthBasedArrayColumnBinaryMaker maxLengthBasedArrayColumnBinaryMaker0 = new MaxLengthBasedArrayColumnBinaryMaker();
      UnionColumnAnalizeResult unionColumnAnalizeResult0 = new UnionColumnAnalizeResult("", 32, (-3), (List<IColumnAnalizeResult>) null);
      int int0 = maxLengthBasedArrayColumnBinaryMaker0.calcBinarySize(unionColumnAnalizeResult0);
      assertEquals(128, int0);
  }
}
