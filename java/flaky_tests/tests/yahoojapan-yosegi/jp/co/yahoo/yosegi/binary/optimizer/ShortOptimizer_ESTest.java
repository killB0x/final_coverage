/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:26:11 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.optimizer.ShortOptimizer;
import jp.co.yahoo.yosegi.config.Configuration;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IntegerColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.LongColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.UnionColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortOptimizer_ESTest extends ShortOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ShortOptimizer shortOptimizer0 = new ShortOptimizer(configuration0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult("", 415, false, 2172, 14, (-2124), 84, 0, 0, 0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = shortOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, integerColumnAnalizeResult0);
      assertNotSame(columnBinaryMakerConfig1, columnBinaryMakerConfig0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ShortOptimizer shortOptimizer0 = new ShortOptimizer(columnBinaryMakerConfig0.param);
      UnionColumnAnalizeResult unionColumnAnalizeResult0 = new UnionColumnAnalizeResult("", (-1), (-1), (List<IColumnAnalizeResult>) null);
      // Undeclared exception!
      try { 
        shortOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, unionColumnAnalizeResult0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method is not supported.
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ShortOptimizer shortOptimizer0 = new ShortOptimizer(columnBinaryMakerConfig0.param);
      // Undeclared exception!
      try { 
        shortOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, (IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ShortOptimizer shortOptimizer0 = new ShortOptimizer(columnBinaryMakerConfig0.param);
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult((String) null, 21, false, 21, 21, 21, 21, 21, 21, 21);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = shortOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, longColumnAnalizeResult0);
      assertNotSame(columnBinaryMakerConfig1, columnBinaryMakerConfig0);
  }
}
