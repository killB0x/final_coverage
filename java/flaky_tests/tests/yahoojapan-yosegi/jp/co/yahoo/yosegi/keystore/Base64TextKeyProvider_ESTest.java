/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:53:45 GMT 2022
 */

package jp.co.yahoo.yosegi.keystore;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import jp.co.yahoo.yosegi.config.Configuration;
import jp.co.yahoo.yosegi.encryptor.EncryptionKey;
import jp.co.yahoo.yosegi.keystore.Base64TextKeyProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64TextKeyProvider_ESTest extends Base64TextKeyProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Base64TextKeyProvider base64TextKeyProvider0 = new Base64TextKeyProvider();
      // Undeclared exception!
      try { 
        base64TextKeyProvider0.setup((Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.keystore.Base64TextKeyProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Base64TextKeyProvider base64TextKeyProvider0 = new Base64TextKeyProvider();
      Configuration configuration0 = new Configuration();
      try { 
        base64TextKeyProvider0.setup(configuration0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing required parameter \"text\".
         //
         verifyException("jp.co.yahoo.yosegi.keystore.Base64TextKeyProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base64TextKeyProvider base64TextKeyProvider0 = new Base64TextKeyProvider();
      Configuration configuration0 = new Configuration();
      configuration0.set("text", "text");
      base64TextKeyProvider0.setup(configuration0);
      EncryptionKey encryptionKey0 = base64TextKeyProvider0.getKey();
      assertNotNull(encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Base64TextKeyProvider base64TextKeyProvider0 = new Base64TextKeyProvider();
      EncryptionKey encryptionKey0 = base64TextKeyProvider0.getKey();
      assertNull(encryptionKey0);
  }
}
