/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:54:32 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.message.design.FieldType;
import jp.co.yahoo.yosegi.message.design.IField;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.PrimitiveSchemaFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrimitiveSchemaFactory_ESTest extends PrimitiveSchemaFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "properties");
      assertNull(iField0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, (String) null);
      assertEquals(FieldType.STRING, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SHORT;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "&(G3s6\"+46%_mi*1vS");
      assertEquals(FieldType.SHORT, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "");
      assertEquals("", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "");
      assertEquals("", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "");
      assertEquals(FieldType.FLOAT, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "");
      assertEquals("", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTES;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "");
      assertEquals(FieldType.BYTES, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "");
      assertEquals(FieldType.BYTE, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      IField iField0 = PrimitiveSchemaFactory.getSchema(columnType0, "?6\"a&74jnp");
      assertEquals(FieldType.BOOLEAN, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrimitiveSchemaFactory primitiveSchemaFactory0 = new PrimitiveSchemaFactory();
  }
}
