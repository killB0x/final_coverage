/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:40:15 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.UnsupportedColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiArrayLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiNullLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.UnionColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker_ESTest extends FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<BooleanCell, BooleanCell> iCell0 = (ICell<BooleanCell, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<Object, Object> iCell1 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null).when(iCell1).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, iCell1).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(1963, 1963, 1963, 1963, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      BooleanObj booleanObj0 = new BooleanObj(true);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(booleanObj0, "", 65536);
      flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(0, columnBinary0.binaryStart);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("e(;U@1r pH&8<9Y9", 0, true, (-1739), 25, 16, (-1739), 127.0F);
      int int0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize(floatColumnAnalizeResult0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ArrayList<IColumnAnalizeResult> arrayList0 = new ArrayList<IColumnAnalizeResult>();
      UnionColumnAnalizeResult unionColumnAnalizeResult0 = new UnionColumnAnalizeResult("2sZ", 1186, 0, arrayList0);
      int int0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize(unionColumnAnalizeResult0);
      assertEquals(1186, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((-314)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -314
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, (ColumnBinary) null, 1143);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("H b", (-34), stack0);
      LoadType loadType0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.getLoadType(columnBinary0, (-34));
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      columnBinary0.isSetLoadSize = true;
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$40652416 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$40652416 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75840802)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("m9YRIPm[`m'HY", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      YosegiNullLoader yosegiNullLoader0 = new YosegiNullLoader(1216);
      IColumn iColumn0 = yosegiNullLoader0.build();
      ColumnBinary columnBinary0 = rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.load(columnBinary0, yosegiNullLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ArrayColumn arrayColumn0 = new ArrayColumn("!s!_-DIZ0kA");
      IColumn iColumn0 = arrayColumn0.getParentsColumn();
      ColumnBinary columnBinary0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      assertEquals(0, columnBinary0.loadSize);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<Object, ColumnBinary> iCell1 = (ICell<Object, ColumnBinary>) mock(ICell.class, new ViolatedAssumptionAnswer());
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, (ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(6, 6, 36, 6).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("gzip").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(6, 6, (-1), 6, (-440)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnBinary columnBinary0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
      assertEquals(19, columnBinary0.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Loader type is not SEQUENTIAL.", columnBinaryMakerConfig0);
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "Loader type is not SEQUENTIAL.", (-240));
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 15);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, (CompressResultNode) null, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("RLE3", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "S*$*2B?[c.T");
      ColumnBinary columnBinary0 = unsupportedColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      YosegiArrayLoader yosegiArrayLoader0 = new YosegiArrayLoader(columnBinary0, 65536);
      yosegiArrayLoader0.finish();
      IColumn iColumn0 = yosegiArrayLoader0.build();
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ArrayColumn$EmptyArrayCell cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ArrayColumn$EmptyArrayCell and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75840802)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<Object, Object> iCell1 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell1).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, iCell1, (ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(6, 6, (-1), 6, 388).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("AzjQH[:O", (-3915), true, 29, 29, 0, 8, (-5417));
      int int0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize(booleanColumnAnalizeResult0);
      assertEquals((-3915), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("<x9\u0004H3,j%", 115, vector0);
      LoadType loadType0 = flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.getLoadType(columnBinary0, 115);
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$40652416 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$40652416 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75840802)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0 = new FlagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary(":89Z", 31, arrayList0);
      // Undeclared exception!
      try { 
        flagIndexedOptimizedNullArrayDumpBooleanColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
