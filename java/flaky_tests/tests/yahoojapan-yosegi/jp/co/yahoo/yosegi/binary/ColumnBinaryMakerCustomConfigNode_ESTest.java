/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:21:09 GMT 2022
 */

package jp.co.yahoo.yosegi.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.Stack;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.message.design.DoubleField;
import jp.co.yahoo.yosegi.message.parser.IParser;
import jp.co.yahoo.yosegi.message.parser.java.JavaListParser;
import jp.co.yahoo.yosegi.message.parser.java.JavaMapParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColumnBinaryMakerCustomConfigNode_ESTest extends ColumnBinaryMakerCustomConfigNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("byte_maker_class", columnBinaryMakerConfig0);
      DoubleField doubleField0 = new DoubleField("");
      Map<Object, Object> map0 = doubleField0.toJavaObject();
      JavaMapParser javaMapParser0 = new JavaMapParser(map0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode1 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, javaMapParser0);
      columnBinaryMakerCustomConfigNode0.addChildConfigNode("byte_maker_class", columnBinaryMakerCustomConfigNode1);
      assertNotSame(columnBinaryMakerCustomConfigNode1, columnBinaryMakerCustomConfigNode0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("nAfi/GL", (ColumnBinaryMakerConfig) null);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = columnBinaryMakerCustomConfigNode0.getCurrentConfig();
      assertNull(columnBinaryMakerConfig0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("float_maker_class", columnBinaryMakerConfig0);
      String string0 = columnBinaryMakerCustomConfigNode0.getColumnName();
      assertEquals("float_maker_class", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      String string0 = columnBinaryMakerCustomConfigNode0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = null;
      try {
        columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode((ColumnBinaryMakerConfig) null, (IParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("byte_maker_class", columnBinaryMakerConfig0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = columnBinaryMakerCustomConfigNode0.getCurrentConfig();
      assertEquals(1.15, columnBinaryMakerConfig1.allowedRatio, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<Object> stack0 = new Stack<Object>();
      JavaListParser javaListParser0 = new JavaListParser(stack0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, javaListParser0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode1 = columnBinaryMakerCustomConfigNode0.getChildConfigNode("(KCVn");
      assertNull(columnBinaryMakerCustomConfigNode1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<Object> stack0 = new Stack<Object>();
      JavaListParser javaListParser0 = new JavaListParser(stack0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, javaListParser0);
      String string0 = columnBinaryMakerCustomConfigNode0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<Object> stack0 = new Stack<Object>();
      JavaListParser javaListParser0 = new JavaListParser(stack0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, javaListParser0);
      columnBinaryMakerCustomConfigNode0.addChildConfigNode("(KCVn", columnBinaryMakerCustomConfigNode0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode1 = columnBinaryMakerCustomConfigNode0.getChildConfigNode("(KCVn");
      assertSame(columnBinaryMakerCustomConfigNode0, columnBinaryMakerCustomConfigNode1);
  }
}
