/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:13:47 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import jp.co.yahoo.yosegi.spread.analyzer.ArrayColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IntegerColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.ShortColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.SpreadColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IColumnAnalizeResult_ESTest extends IColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult((String) null, 0, true, 0, 0, 0, 0, 0, 0, 0);
      int int0 = integerColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult("", 4136, true, 4136, 915, 1742, 1742, 1, 915, 4136);
      int int0 = integerColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(4136, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult(" YgU", (-4057), true, (-4057), (-4057), (-4057), (-4057), (-4057), (-4057), (-4057));
      int int0 = integerColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals((-4057), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("wgK,g,8Hm[L", 1179, true, (-1), 1179, 1179, (short)0, (short)1, 0, 199);
      int int0 = shortColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult(" %YgU", 11, false, 11, 11, 11, 11, 11, 11, 11);
      int int0 = integerColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult((String) null, 0, true, 2239, 2239, 2239, (short) (-291), (short)0, (-2109), (short) (-291));
      int int0 = shortColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals((-2109), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayColumnAnalizeResult arrayColumnAnalizeResult0 = new ArrayColumnAnalizeResult((String) null, 0, 0, (List<IColumnAnalizeResult>) null);
      List<IColumnAnalizeResult> list0 = arrayColumnAnalizeResult0.getChild();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult("", (-3410), false, 2035, 0, (-3410), (-3410), 0, 931, 0);
      linkedList0.add((IColumnAnalizeResult) integerColumnAnalizeResult0);
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", 931, 0, linkedList0);
      List<IColumnAnalizeResult> list0 = spreadColumnAnalizeResult0.getChild();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult(" YgU", (-4057), true, (-4057), (-4057), (-4057), (-4057), (-4057), (-4057), (-4057));
      List<IColumnAnalizeResult> list0 = integerColumnAnalizeResult0.getChild();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("STRUCT", 593, false, 593, 593, 593, 593, 593);
      // Undeclared exception!
      try { 
        booleanColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method is not supported.
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("STRUCT", 593, false, 593, 593, 593, 593, 593);
      // Undeclared exception!
      try { 
        booleanColumnAnalizeResult0.getNullIgnoreRleGroupCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method is not supported.
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult", e);
      }
  }
}
