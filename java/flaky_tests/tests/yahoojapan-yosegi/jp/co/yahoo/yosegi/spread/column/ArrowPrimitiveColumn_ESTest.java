/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:15:10 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jp.co.yahoo.yosegi.message.design.IField;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.ICellManager;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrowPrimitiveColumn_ESTest extends ArrowPrimitiveColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(columnType0).when(iArrowPrimitiveConnector0).getColumnType();
      doReturn((ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(2).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn((ColumnType) null).when(iArrowPrimitiveConnector0).getColumnType();
      doReturn(0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      String string0 = arrowPrimitiveColumn0.toString();
      assertEquals("Column name : null\nColumn type : null\n--------------------------\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      int int0 = arrowPrimitiveColumn0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      int int0 = arrowPrimitiveColumn0.size();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((-1055)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      int int0 = arrowPrimitiveColumn0.size();
      assertEquals((-1055), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SPREAD;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iArrowPrimitiveConnector0).getColumnType();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IField iField0 = arrowPrimitiveColumn0.getSchema("CV=:A|AI q#vnF");
      assertNull(iField0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iArrowPrimitiveConnector0).getColumnType();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IField iField0 = arrowPrimitiveColumn0.getSchema("");
      assertEquals("", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(columnType0).when(iArrowPrimitiveConnector0).getColumnType();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IField iField0 = arrowPrimitiveColumn0.getSchema();
      assertNull(iField0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("aQORD{X$mqY/&O@Op").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(columnType0).when(iArrowPrimitiveConnector0).getColumnType();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IField iField0 = arrowPrimitiveColumn0.getSchema();
      assertEquals("aQORD{X$mqY/&O@Op", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null).when(iArrowPrimitiveConnector0).getColumnType();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      arrowPrimitiveColumn0.getColumnType();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      String string0 = arrowPrimitiveColumn0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(iArrowPrimitiveConnector0).getColumnName();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      String string0 = arrowPrimitiveColumn0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).toString();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ICellManager iCellManager0 = arrowPrimitiveColumn0.getCellManager();
      assertNotNull(iCellManager0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ICell iCell0 = arrowPrimitiveColumn0.get(0);
      assertNull(iCell0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICell<SpreadColumn, Object> iCell0 = (ICell<SpreadColumn, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iCell0).toString();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ICell iCell1 = arrowPrimitiveColumn0.get(0);
      assertNull(iCell1.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.getColumnType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.getColumnName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SPREAD;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iArrowPrimitiveConnector0).getColumnType();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnType columnType1 = arrowPrimitiveColumn0.getColumnType();
      assertSame(columnType1, columnType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("jp.co.yahoo.yosegi.spread.column.ArrowStringConnector").when(iArrowPrimitiveConnector0).getColumnName();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      String string0 = arrowPrimitiveColumn0.getColumnName();
      assertEquals("jp.co.yahoo.yosegi.spread.column.ArrowStringConnector", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.setColumnName("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This column is read only.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(10);
      assertEquals(0, iColumn0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.getSchema((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      ColumnType columnType0 = ColumnType.UNKNOWN;
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(columnType0);
      assertEquals(ColumnType.NULL, iColumn0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      arrowPrimitiveColumn0.setDefaultCell((ICell) null);
      assertEquals(0, arrowPrimitiveColumn0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      ICellManager iCellManager0 = arrowPrimitiveColumn0.getCellManager();
      assertNull(iCellManager0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      int int0 = arrowPrimitiveColumn0.getColumnSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      List<String> list0 = arrowPrimitiveColumn0.getColumnKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      List<IColumn> list0 = arrowPrimitiveColumn0.getListColumn();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.setCellManager((ICellManager) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This column is read only.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn("aZ&Jkk-f0vPj!W@Oy");
      assertEquals(ColumnType.NULL, iColumn0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      arrowPrimitiveColumn0.setParentsColumn(iColumn0);
      assertEquals(0, arrowPrimitiveColumn0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      ColumnType columnType0 = ColumnType.BYTE;
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.add(columnType0, (Object) null, (-1453));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This column is read only.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.getSchema();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.get((-2068));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn((IArrowPrimitiveConnector) null);
      ColumnType columnType0 = ColumnType.FLOAT;
      // Undeclared exception!
      try { 
        arrowPrimitiveColumn0.addCell(columnType0, (ICell) null, (-185));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This column is read only.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }
}
