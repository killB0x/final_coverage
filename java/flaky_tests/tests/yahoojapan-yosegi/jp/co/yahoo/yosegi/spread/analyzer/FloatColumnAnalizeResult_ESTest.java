/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:06:56 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloatColumnAnalizeResult_ESTest extends FloatColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("INTEGER", 0, false, 0, 2174, 0, 112.29644F, 1566.6597F);
      boolean boolean0 = floatColumnAnalizeResult0.maybeSorted();
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertFalse(boolean0);
      assertEquals(1566.6597F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(112.29644F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getColumnSize());
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(2174, floatColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("INTEGER", 0, false, 0, 2174, 0, 112.29644F, 1566.6597F);
      int int0 = floatColumnAnalizeResult0.getUniqCount();
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(1566.6597F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(0, int0);
      assertEquals(112.29644F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getColumnSize());
      assertEquals(8696, floatColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("odst", 1242, true, 1242, (-857), (-857), (-639.49F), (-1256.3926F));
      int int0 = floatColumnAnalizeResult0.getUniqCount();
      assertEquals((-639.49F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-857), int0);
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-3428), floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1256.3926F), floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(1242, floatColumnAnalizeResult0.getColumnSize());
      assertEquals(1242, floatColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("0g,4D`Nu{1", 1, false, 0, 839, 0, 0, 13);
      int int0 = floatColumnAnalizeResult0.getRowEnd();
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
      assertEquals(3356, floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(13.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult((String) null, 13, false, 0, 220, 0, (-1962.4677F), 1669.343F);
      int int0 = floatColumnAnalizeResult0.getRowEnd();
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(1669.343F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(12, int0);
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals((-1962.4677F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(880, floatColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", 1, true, 1, 1, (-37), 0.0F, 935.8088F);
      int int0 = floatColumnAnalizeResult0.getRowCount();
      assertEquals(1, int0);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-37), floatColumnAnalizeResult0.getUniqCount());
      assertEquals(935.8088F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(1, floatColumnAnalizeResult0.getColumnSize());
      assertEquals(1, floatColumnAnalizeResult0.getNullCount());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult((String) null, 16, false, 16, (-1314), 1, 16, 1);
      int int0 = floatColumnAnalizeResult0.getRowCount();
      assertEquals(16, floatColumnAnalizeResult0.getNullCount());
      assertEquals((-1314), int0);
      assertEquals(1, floatColumnAnalizeResult0.getUniqCount());
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(15, floatColumnAnalizeResult0.getRowEnd());
      assertEquals(16.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(1.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", 1, true, 1, 1, (-37), 0.0F, 935.8088F);
      int int0 = floatColumnAnalizeResult0.getNullCount();
      assertEquals(935.8088F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(1, int0);
      assertEquals(0, floatColumnAnalizeResult0.getRowEnd());
      assertEquals((-37), floatColumnAnalizeResult0.getUniqCount());
      assertEquals(1, floatColumnAnalizeResult0.getRowCount());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l|\"jms0", (-1), false, (-1), (-1), (-1), (-1), (-1.0F));
      int int0 = floatColumnAnalizeResult0.getNullCount();
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-1.0F), floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals((-1), int0);
      assertEquals((-1.0F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-1), floatColumnAnalizeResult0.getColumnSize());
      assertEquals((-4), floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), floatColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", 1, true, 1, 1, (-37), 0.0F, 935.8088F);
      float float0 = floatColumnAnalizeResult0.getMin();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(935.8088F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getRowEnd());
      assertEquals(1, floatColumnAnalizeResult0.getNullCount());
      assertEquals((-37), floatColumnAnalizeResult0.getUniqCount());
      assertEquals(4, floatColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("INTEGER", 0, false, 0, 2174, 0, 112.29644F, 1566.6597F);
      float float0 = floatColumnAnalizeResult0.getMin();
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(112.29644F, float0, 0.01F);
      assertEquals((-1), floatColumnAnalizeResult0.getRowEnd());
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(1566.6597F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(2174, floatColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("X*ua", 0, false, 0, 17, (-1010), 4870.8945F, 0);
      float float0 = floatColumnAnalizeResult0.getMax();
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(17, floatColumnAnalizeResult0.getRowCount());
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals((-1010), floatColumnAnalizeResult0.getUniqCount());
      assertEquals(0, floatColumnAnalizeResult0.getColumnSize());
      assertEquals(4870.8945F, floatColumnAnalizeResult0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("", 1, true, 0, 1, 0, 0, (-3749.43F));
      float float0 = floatColumnAnalizeResult0.getMax();
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(1, floatColumnAnalizeResult0.getColumnSize());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(1, floatColumnAnalizeResult0.getRowCount());
      assertEquals((-3749.43F), float0, 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult((String) null, (-1), false, (-1), 0, (-1), (-1), 0.0F);
      int int0 = floatColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-1), floatColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), floatColumnAnalizeResult0.getNullCount());
      assertEquals((-1.0F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(0, int0);
      assertEquals((-2), floatColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", 1, true, 1, 1, (-37), 0.0F, 935.8088F);
      int int0 = floatColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(4, int0);
      assertEquals(1, floatColumnAnalizeResult0.getColumnSize());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-37), floatColumnAnalizeResult0.getUniqCount());
      assertEquals(1, floatColumnAnalizeResult0.getNullCount());
      assertEquals(935.8088F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("3sN", 1433, true, 27, (-836), 1433, (-1.0F), 911.032F);
      int int0 = floatColumnAnalizeResult0.getColumnSize();
      assertEquals(1433, int0);
      assertEquals(911.032F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(1433, floatColumnAnalizeResult0.getUniqCount());
      assertEquals((-1.0F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-836), floatColumnAnalizeResult0.getRowCount());
      assertEquals(27, floatColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", (-37), true, (-37), (-37), (-37), (-37), (-37));
      int int0 = floatColumnAnalizeResult0.getColumnSize();
      assertEquals((-37), int0);
      assertEquals((-37), floatColumnAnalizeResult0.getUniqCount());
      assertEquals((-37.0F), floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals((-37), floatColumnAnalizeResult0.getNullCount());
      assertEquals((-37.0F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-37), floatColumnAnalizeResult0.getRowCount());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", 1, true, 1, 1, (-37), 0.0F, 935.8088F);
      floatColumnAnalizeResult0.getColumnName();
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-37), floatColumnAnalizeResult0.getUniqCount());
      assertEquals(1, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(935.8088F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getRowEnd());
      assertEquals(4, floatColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("", 12, true, 0, 12, 0, 0, 0);
      floatColumnAnalizeResult0.getColumnName();
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(11, floatColumnAnalizeResult0.getRowEnd());
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(48, floatColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("INTEGER", 0, false, 0, 2174, 0, 112.29644F, 1566.6597F);
      int int0 = floatColumnAnalizeResult0.getRowEnd();
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(1566.6597F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(8696, floatColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(112.29644F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("INTEGER", 0, false, 0, 2174, 0, 112.29644F, 1566.6597F);
      int int0 = floatColumnAnalizeResult0.getNullCount();
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(112.29644F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-1), floatColumnAnalizeResult0.getRowEnd());
      assertEquals(0, int0);
      assertEquals(1566.6597F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(2174, floatColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult((String) null, 0, true, 0, 0, 0, 0.0F, 0);
      floatColumnAnalizeResult0.getColumnName();
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), floatColumnAnalizeResult0.getRowEnd());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0, floatColumnAnalizeResult0.getRowCount());
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult((String) null, 0, true, 0, 0, 0, 0.0F, 0);
      floatColumnAnalizeResult0.getColumnType();
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), floatColumnAnalizeResult0.getRowEnd());
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getRowCount());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("INTEGER", 20, false, 20, 20, 20, 1.0F, 20);
      int int0 = floatColumnAnalizeResult0.getUniqCount();
      assertEquals(20.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(1.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(20, int0);
      assertEquals(80, floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(20, floatColumnAnalizeResult0.getNullCount());
      assertEquals(20, floatColumnAnalizeResult0.getColumnSize());
      assertFalse(floatColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("?w[", 1186, true, 1186, 1186, 1186, 1186, 1186);
      float float0 = floatColumnAnalizeResult0.getMax();
      assertEquals(1186, floatColumnAnalizeResult0.getUniqCount());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(1186, floatColumnAnalizeResult0.getNullCount());
      assertEquals(1186.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(1186.0F, float0, 0.01F);
      assertEquals(4744, floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1185, floatColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("7a[l\"jms0", (-34), true, (-34), 0, (-34), (-34), 0);
      int int0 = floatColumnAnalizeResult0.getRowCount();
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals((-34), floatColumnAnalizeResult0.getNullCount());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-34.0F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-34), floatColumnAnalizeResult0.getUniqCount());
      assertEquals((-35), floatColumnAnalizeResult0.getRowEnd());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult((String) null, 0, true, 0, 0, 0, 0.0F, 0);
      boolean boolean0 = floatColumnAnalizeResult0.maybeSorted();
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertTrue(boolean0);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0, floatColumnAnalizeResult0.getColumnSize());
      assertEquals(0, floatColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("C%)P;v}", (-4308), true, (-4308), (-4308), (-4308), (-4308), (-4308));
      int int0 = floatColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-4308.0F), floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals((-17232), int0);
      assertEquals((-4308), floatColumnAnalizeResult0.getNullCount());
      assertEquals((-4308.0F), floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals((-4308), floatColumnAnalizeResult0.getUniqCount());
      assertEquals((-4308), floatColumnAnalizeResult0.getColumnSize());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("", 0, true, 0, 0, 0, 0.0F, 0);
      int int0 = floatColumnAnalizeResult0.getColumnSize();
      assertEquals(0, int0);
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(0, floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("O?@1kj\"d).", (-3283), true, (-3283), (-3283), (-3283), (-3283), (-3283));
      float float0 = floatColumnAnalizeResult0.getMin();
      assertEquals((-3283), floatColumnAnalizeResult0.getNullCount());
      assertEquals((-3283), floatColumnAnalizeResult0.getUniqCount());
      assertEquals((-13132), floatColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-3283.0F), float0, 0.01F);
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-3283.0F), floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals((-3283), floatColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("", 0, true, 0, 0, 0, 0.0F, 0);
      int int0 = floatColumnAnalizeResult0.getRowStart();
      assertEquals(0, floatColumnAnalizeResult0.getNullCount());
      assertEquals(0.0F, floatColumnAnalizeResult0.getMin(), 0.01F);
      assertEquals(0.0F, floatColumnAnalizeResult0.getMax(), 0.01F);
      assertEquals(0, int0);
      assertEquals(0, floatColumnAnalizeResult0.getUniqCount());
      assertEquals(0, floatColumnAnalizeResult0.getLogicalDataSize());
      assertTrue(floatColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), floatColumnAnalizeResult0.getRowEnd());
  }
}
