/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:10:29 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteColumnAnalizeResult_ESTest extends ByteColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 8, true, 0, 0, 0, (byte)7, (byte)0, (-1), (-1299));
      boolean boolean0 = byteColumnAnalizeResult0.maybeSorted();
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals((-1), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1299), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertTrue(boolean0);
      assertEquals(7, byteColumnAnalizeResult0.getRowEnd());
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 8, true, 0, 0, 0, (byte)7, (byte)0, (-1), (-1299));
      int int0 = byteColumnAnalizeResult0.getUniqCount();
      assertEquals((-1299), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, int0);
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(8, byteColumnAnalizeResult0.getColumnSize());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", (-1581), true, (-1581), (-1108), (-1108), (byte)1, (byte)1, (-943), (byte)1);
      int int0 = byteColumnAnalizeResult0.getUniqCount();
      assertEquals((-1108), int0);
      assertEquals((-943), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1581), byteColumnAnalizeResult0.getNullCount());
      assertEquals((-1581), byteColumnAnalizeResult0.getColumnSize());
      assertEquals((-1108), byteColumnAnalizeResult0.getRowCount());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 9, true, 9, 0, 9, (byte)0, (byte)1, 16, (byte)1);
      int int0 = byteColumnAnalizeResult0.getRowEnd();
      assertEquals((byte)0, byteColumnAnalizeResult0.getMin());
      assertEquals(9, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(9, byteColumnAnalizeResult0.getNullCount());
      assertEquals(16, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(8, int0);
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", 0, false, 0, 0, 0, (byte)0, (byte)0, (byte)0, (-2514));
      int int0 = byteColumnAnalizeResult0.getRowEnd();
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), int0);
      assertEquals((-2514), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("UNION", 1459, true, 186, 1459, 5, (byte)12, (byte)0, 1459, 0);
      int int0 = byteColumnAnalizeResult0.getRowCount();
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1459, int0);
      assertEquals(1459, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(186, byteColumnAnalizeResult0.getNullCount());
      assertEquals(1458, byteColumnAnalizeResult0.getRowEnd());
      assertEquals(5, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)12, byteColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", (-1581), true, (-1581), (-1108), (-1108), (byte)1, (byte)1, (-943), (byte)1);
      int int0 = byteColumnAnalizeResult0.getRowCount();
      assertEquals((-1108), byteColumnAnalizeResult0.getUniqCount());
      assertEquals((-1581), byteColumnAnalizeResult0.getNullCount());
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-1108), int0);
      assertEquals((-943), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertEquals((-1581), byteColumnAnalizeResult0.getColumnSize());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("rIk0t`qz[(>A;E\"", 2844, false, 949, 2844, 2844, (byte)13, (byte)13, 10, 690);
      int int0 = byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals((byte)13, byteColumnAnalizeResult0.getMin());
      assertEquals((byte)13, byteColumnAnalizeResult0.getMax());
      assertEquals(10, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2844, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(690, int0);
      assertEquals(2844, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2843, byteColumnAnalizeResult0.getRowEnd());
      assertEquals(949, byteColumnAnalizeResult0.getNullCount());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 8, true, 0, 0, 0, (byte)7, (byte)0, (-1), (-1299));
      int int0 = byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals((-1299), int0);
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals((-1), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(7, byteColumnAnalizeResult0.getRowEnd());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", 0, false, 0, 0, 0, (byte)0, (byte)0, (byte)0, (-2514));
      int int0 = byteColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getColumnSize());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((-2514), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult(";/*'wwnje.", 0, true, 0, 6, 125, (byte) (-1), (byte) (-1), 125, 715);
      int int0 = byteColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(125, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(715, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(125, int0);
      assertEquals((byte) (-1), byteColumnAnalizeResult0.getMin());
      assertEquals(6, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), byteColumnAnalizeResult0.getRowEnd());
      assertEquals((byte) (-1), byteColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", 0, false, 0, 0, 0, (byte)7, (byte) (-17), (byte)7, 0);
      int int0 = byteColumnAnalizeResult0.getNullCount();
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertEquals(0, int0);
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), byteColumnAnalizeResult0.getRowEnd());
      assertEquals((byte) (-17), byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(7, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", (-1581), true, (-1581), (-1108), (-1108), (byte)1, (byte)1, (-943), (byte)1);
      int int0 = byteColumnAnalizeResult0.getNullCount();
      assertEquals((-1108), byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMin());
      assertEquals((-1581), int0);
      assertEquals((-943), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1581), byteColumnAnalizeResult0.getColumnSize());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-1108), byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 9, true, 9, 0, 9, (byte)0, (byte)1, 16, (byte)1);
      byte byte0 = byteColumnAnalizeResult0.getMin();
      assertEquals(16, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(9, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((byte)0, byte0);
      assertEquals(9, byteColumnAnalizeResult0.getColumnSize());
      assertEquals(9, byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 8, true, 0, 0, 0, (byte)7, (byte)0, (-1), (-1299));
      byte byte0 = byteColumnAnalizeResult0.getMin();
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals((-1299), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((byte)7, byte0);
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals(7, byteColumnAnalizeResult0.getRowEnd());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 8, true, 0, 0, 0, (byte)7, (byte)0, (-1), (-1299));
      byte byte0 = byteColumnAnalizeResult0.getMax();
      assertEquals((-1), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte)0, byte0);
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(8, byteColumnAnalizeResult0.getColumnSize());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-1299), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult(";/*'wwnje.", 0, true, 0, 6, 125, (byte) (-1), (byte) (-1), 125, 715);
      byte byte0 = byteColumnAnalizeResult0.getMax();
      assertEquals(125, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte) (-1), byte0);
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte) (-1), byteColumnAnalizeResult0.getMin());
      assertEquals(715, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(6, byteColumnAnalizeResult0.getRowCount());
      assertEquals(125, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(0, byteColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("rIk0t`qz[(>A;E\"", 2844, false, 949, 2844, 2844, (byte)13, (byte)13, 10, 690);
      int int0 = byteColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(949, byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte)13, byteColumnAnalizeResult0.getMin());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(690, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2844, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(10, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2844, int0);
      assertEquals(2843, byteColumnAnalizeResult0.getRowEnd());
      assertEquals((byte)13, byteColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", (-1581), true, (-1581), (-1108), (-1108), (byte)1, (byte)1, (-943), (byte)1);
      int int0 = byteColumnAnalizeResult0.getLogicalDataSize();
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-943), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1581), byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMin());
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1108), int0);
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertEquals((-1582), byteColumnAnalizeResult0.getRowEnd());
      assertEquals((-1108), byteColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      int int0 = byteColumnAnalizeResult0.getColumnSize();
      assertEquals(18, int0);
      assertEquals((byte) (-76), byteColumnAnalizeResult0.getMin());
      assertEquals(18, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(18, byteColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, (-3869), true, 0, 1, 0, (byte) (-113), (byte) (-113), 0, 2639);
      int int0 = byteColumnAnalizeResult0.getColumnSize();
      assertEquals((byte) (-113), byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(2639, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((byte) (-113), byteColumnAnalizeResult0.getMin());
      assertEquals(1, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-3869), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 8, true, 0, 0, 0, (byte)7, (byte)0, (-1), (-1299));
      byteColumnAnalizeResult0.getColumnName();
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals((-1299), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(7, byteColumnAnalizeResult0.getRowEnd());
      assertEquals((-1), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", 0, false, 0, 0, 0, (byte)7, (byte) (-17), (byte)7, 0);
      byteColumnAnalizeResult0.getColumnName();
      assertEquals((byte) (-17), byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(7, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((byte)7, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getColumnSize());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 9, true, 9, 0, 9, (byte)0, (byte)1, 16, (byte)1);
      int int0 = byteColumnAnalizeResult0.getRowStart();
      assertEquals(1, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, int0);
      assertEquals(16, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)1, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals(9, byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMin());
      assertEquals(9, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(9, byteColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LONG", 0, false, 0, 0, 0, (byte)0, (byte)0, (byte)0, (-2514));
      byteColumnAnalizeResult0.getColumnName();
      assertEquals((byte)0, byteColumnAnalizeResult0.getMin());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals((-2514), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getColumnSize());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      int int0 = byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((byte) (-76), byteColumnAnalizeResult0.getMin());
      assertEquals(18, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(18, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
      assertEquals(17, byteColumnAnalizeResult0.getRowEnd());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      int int0 = byteColumnAnalizeResult0.getRowCount();
      assertEquals((byte) (-76), byteColumnAnalizeResult0.getMin());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(0, int0);
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(18, byteColumnAnalizeResult0.getNullCount());
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(18, byteColumnAnalizeResult0.getColumnSize());
      assertEquals(18, byteColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      boolean boolean0 = byteColumnAnalizeResult0.maybeSorted();
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(18, byteColumnAnalizeResult0.getNullCount());
      assertEquals(18, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals(17, byteColumnAnalizeResult0.getRowEnd());
      assertFalse(boolean0);
      assertEquals((byte) (-76), byteColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      int int0 = byteColumnAnalizeResult0.getUniqCount();
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(18, byteColumnAnalizeResult0.getNullCount());
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals(18, int0);
      assertEquals(17, byteColumnAnalizeResult0.getRowEnd());
      assertEquals((byte) (-76), byteColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      int int0 = byteColumnAnalizeResult0.getNullCount();
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(18, int0);
      assertEquals(18, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(17, byteColumnAnalizeResult0.getRowEnd());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals((byte) (-76), byteColumnAnalizeResult0.getMin());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("FLOAT", 0, false, 0, 0, 0, (byte)16, (byte)16, 0, 1106);
      byte byte0 = byteColumnAnalizeResult0.getMax();
      assertEquals(1106, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte)16, byteColumnAnalizeResult0.getMin());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte)16, byte0);
      assertEquals(0, byteColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("LVG0Qow# ", 18, false, 18, 0, 18, (byte) (-76), (byte)0, (byte) (-76), 0);
      byte byte0 = byteColumnAnalizeResult0.getMin();
      assertEquals((byte) (-76), byte0);
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(18, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-76), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(18, byteColumnAnalizeResult0.getColumnSize());
      assertEquals(18, byteColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", (byte)1, true, 956, (-165), 0, (byte)95, (byte) (-78), 998, 577);
      byteColumnAnalizeResult0.getColumnType();
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((byte) (-78), byteColumnAnalizeResult0.getMax());
      assertEquals(577, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(0, byteColumnAnalizeResult0.getRowEnd());
      assertEquals((-165), byteColumnAnalizeResult0.getRowCount());
      assertEquals(956, byteColumnAnalizeResult0.getNullCount());
      assertEquals(998, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte)95, byteColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", (-1674), true, 0, 0, 4118, (byte)0, (byte)0, (byte)0, 0);
      int int0 = byteColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(0, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(4118, byteColumnAnalizeResult0.getUniqCount());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMax());
      assertEquals((byte)0, byteColumnAnalizeResult0.getMin());
      assertEquals(0, int0);
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1675), byteColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 0, false, (byte) (-99), 0, (byte) (-99), (byte) (-99), (byte)108, (byte) (-99), 0);
      int int0 = byteColumnAnalizeResult0.getColumnSize();
      assertFalse(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-99), byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte) (-99), byteColumnAnalizeResult0.getMin());
      assertEquals((byte)108, byteColumnAnalizeResult0.getMax());
      assertEquals(0, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-99), byteColumnAnalizeResult0.getNullCount());
      assertEquals((-99), byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, int0);
      assertEquals(0, byteColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", (byte) (-80), true, (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80));
      int int0 = byteColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals((-80), byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-80), byteColumnAnalizeResult0.getNullCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals((-80), byteColumnAnalizeResult0.getRowCount());
      assertEquals((byte) (-80), byteColumnAnalizeResult0.getMax());
      assertEquals((-80), byteColumnAnalizeResult0.getUniqCount());
      assertEquals((byte) (-80), byteColumnAnalizeResult0.getMin());
      assertEquals((-80), int0);
      assertEquals((-80), byteColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("", (byte)1, true, 956, (-165), 0, (byte)95, (byte) (-78), 998, 577);
      int int0 = byteColumnAnalizeResult0.getRowEnd();
      assertEquals(0, int0);
      assertEquals(577, byteColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(998, byteColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((byte)95, byteColumnAnalizeResult0.getMin());
      assertEquals((byte) (-78), byteColumnAnalizeResult0.getMax());
      assertEquals(956, byteColumnAnalizeResult0.getNullCount());
      assertEquals((-165), byteColumnAnalizeResult0.getLogicalDataSize());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getUniqCount());
  }
}
