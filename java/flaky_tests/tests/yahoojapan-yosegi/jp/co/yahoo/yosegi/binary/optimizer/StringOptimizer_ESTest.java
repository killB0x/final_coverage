/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:58:56 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.optimizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.optimizer.StringOptimizer;
import jp.co.yahoo.yosegi.config.Configuration;
import jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringOptimizer_ESTest extends StringOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      StringOptimizer stringOptimizer0 = new StringOptimizer(configuration0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, 0, false, 0, (-1288), 2414, (-1288), 2414, (-873), (-1094), 418, (-1101), 627, (-3220), (-1240), 0, "jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayStringColumnBinaryMaker", "", 200, (-1559), 627);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
      assertEquals(1.15, columnBinaryMakerConfig1.allowedRatio, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("Ec", 995, false, 995, 995, 0, 995, 0, 0, 0, 995, (-14), 995, 0, 995, 0, "Ec", "Ec", 0, 0, 0);
      StringOptimizer stringOptimizer0 = new StringOptimizer(columnBinaryMakerConfig0.param);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
      assertFalse(columnBinaryMakerConfig1.equals((Object)columnBinaryMakerConfig0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringOptimizer stringOptimizer0 = new StringOptimizer((Configuration) null);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", (-364), true, (-4911), 270, (-1027), (-3408), Integer.MAX_VALUE, 21, 996, 829, 2160, 21, (-372), (-1027), (-4911), "Kc=]A}FK4h~", "Kc=]A}FK4h~", 3, 2160, 336);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
      assertNotSame(columnBinaryMakerConfig1, columnBinaryMakerConfig0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringOptimizer stringOptimizer0 = new StringOptimizer((Configuration) null);
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 995, true, 995, 995, 0, 995, (-1), (-1), (-1), 6, (-13), 995, (-1), 995, 294, "", "", (-1), 8, (-1));
      // Undeclared exception!
      try { 
        stringOptimizer0.getColumnBinaryMakerConfig((ColumnBinaryMakerConfig) null, stringColumnAnalizeResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      StringOptimizer stringOptimizer0 = new StringOptimizer(configuration0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayStringColumnBinaryMaker", (-1288), true, (-1288), (-1288), 418, (-1288), 418);
      // Undeclared exception!
      try { 
        stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, doubleColumnAnalizeResult0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult cannot be cast to class jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult (jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult and jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1cb2de43)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("<p>c", (-226), true, (-47), (-226), (-226), Integer.MAX_VALUE, 253, 253, (-47), 253, (-226), 253, Integer.MAX_VALUE, (-47), (-3397), "<p>c", "<p>c", Integer.MAX_VALUE, 1620, 253);
      StringOptimizer stringOptimizer0 = new StringOptimizer(columnBinaryMakerConfig0.param);
      // Undeclared exception!
      try { 
        stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jp.co.yahoo.yosegi.binary.optimizer.StringOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("Ec", 995, false, 995, 995, (-26), 995, (-26), (-26), (-26), 995, 995, 995, (-26), 995, (-26), "Ec", "Ec", (-26), (-26), (-26));
      StringOptimizer stringOptimizer0 = new StringOptimizer(columnBinaryMakerConfig0.param);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
      assertNotSame(columnBinaryMakerConfig1, columnBinaryMakerConfig0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringOptimizer stringOptimizer0 = new StringOptimizer((Configuration) null);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 995, true, 995, 995, 0, 995, (-1), (-1), (-1), 6, (-13), 995, (-1), 995, 294, "", "", (-1), 8, (-1));
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
      assertNotSame(columnBinaryMakerConfig1, columnBinaryMakerConfig0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringOptimizer stringOptimizer0 = new StringOptimizer((Configuration) null);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("g^p#(HH", 2, false, (-13), (-1), 1929, 6, (-4092), (-4092), 3, (-13), 5, (-1), (-338), 995, (-2508), "g^p#(HH", "jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpStringColumnBinaryMaker", 2, 0, (-1255));
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = stringOptimizer0.getColumnBinaryMakerConfig(columnBinaryMakerConfig0, stringColumnAnalizeResult0);
      assertFalse(columnBinaryMakerConfig1.equals((Object)columnBinaryMakerConfig0));
  }
}
