/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:52:58 GMT 2022
 */

package jp.co.yahoo.yosegi.message.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.message.objects.IntegerObj;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerObj_ESTest extends IntegerObj_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(32767);
      short short0 = integerObj0.getShort();
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-32768));
      short short0 = integerObj0.getShort();
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-128));
      byte byte0 = integerObj0.getByte();
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      short short0 = integerObj0.getShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      long long0 = integerObj0.getLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1756));
      long long0 = integerObj0.getLong();
      assertEquals((-1756L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      int int0 = integerObj0.getInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(1);
      int int0 = integerObj0.getInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      float float0 = integerObj0.getFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(329);
      float float0 = integerObj0.getFloat();
      assertEquals(329.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      double double0 = integerObj0.getDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(2189);
      double double0 = integerObj0.getDouble();
      assertEquals(2189.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      byte byte0 = integerObj0.getByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1));
      boolean boolean0 = integerObj0.getBoolean();
      assertEquals((-1.0), integerObj0.getDouble(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(0);
      boolean boolean0 = integerObj0.getBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(32784);
      // Undeclared exception!
      try { 
        integerObj0.getShort();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Can not down cast. long to short. int value is 32784
         //
         verifyException("jp.co.yahoo.yosegi.message.objects.IntegerObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-32769));
      // Undeclared exception!
      try { 
        integerObj0.getShort();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Can not down cast. long to short. int value is -32769
         //
         verifyException("jp.co.yahoo.yosegi.message.objects.IntegerObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(127);
      byte byte0 = integerObj0.getByte();
      assertEquals(127, integerObj0.getInt());
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(138);
      // Undeclared exception!
      try { 
        integerObj0.getByte();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Can not down cast. long to byte. int value is 138
         //
         verifyException("jp.co.yahoo.yosegi.message.objects.IntegerObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-156));
      // Undeclared exception!
      try { 
        integerObj0.getByte();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Can not down cast. long to byte. int value is -156
         //
         verifyException("jp.co.yahoo.yosegi.message.objects.IntegerObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1));
      Object object0 = integerObj0.get();
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1));
      double double0 = integerObj0.getDouble();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1));
      integerObj0.getPrimitiveType();
      assertEquals((-1), integerObj0.getInt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(1);
      long long0 = integerObj0.getLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(138);
      byte[] byteArray0 = integerObj0.getBytes();
      assertArrayEquals(new byte[] {(byte)49, (byte)51, (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1));
      int int0 = integerObj0.getInt();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj(138);
      int int0 = integerObj0.getObjectSize();
      assertEquals(4, int0);
      assertEquals(138.0F, integerObj0.getFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1));
      float float0 = integerObj0.getFloat();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-94));
      String string0 = integerObj0.getString();
      assertEquals("-94", string0);
  }
}
