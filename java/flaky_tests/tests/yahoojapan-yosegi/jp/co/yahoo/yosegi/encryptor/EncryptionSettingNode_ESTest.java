/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:46:42 GMT 2022
 */

package jp.co.yahoo.yosegi.encryptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import jp.co.yahoo.yosegi.encryptor.EncryptionSettingNode;
import jp.co.yahoo.yosegi.message.design.UnionField;
import jp.co.yahoo.yosegi.message.parser.IParser;
import jp.co.yahoo.yosegi.message.parser.java.JavaMapParser;
import jp.co.yahoo.yosegi.message.parser.text.TextNullParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncryptionSettingNode_ESTest extends EncryptionSettingNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("/0A$", "B-{`v`.");
      String string0 = encryptionSettingNode0.getKeyName();
      assertEquals("B-{`v`.", string0);
      assertEquals("/0A$", encryptionSettingNode0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("", "");
      String string0 = encryptionSettingNode0.getKeyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode((String) null, "rJ*$5");
      String string0 = encryptionSettingNode0.getColumnName();
      assertTrue(encryptionSettingNode0.isEncryptNode());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("key_name", "key_name");
      String string0 = encryptionSettingNode0.getColumnName();
      assertEquals("key_name", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("!iccd66K=ahY|Q!-", "!iccd66K=ahY|Q!-");
      // Undeclared exception!
      try { 
        encryptionSettingNode0.putChildNode((EncryptionSettingNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.encryptor.EncryptionSettingNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        EncryptionSettingNode.createFromParser((IParser) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.encryptor.EncryptionSettingNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("", "");
      String string0 = encryptionSettingNode0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnionField unionField0 = new UnionField("The specified key name \"%s\" does not exist.");
      Map<Object, Object> map0 = unionField0.toJavaObject();
      JavaMapParser javaMapParser0 = new JavaMapParser(map0);
      IParser iParser0 = javaMapParser0.getParser(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EncryptionSettingNode encryptionSettingNode0 = EncryptionSettingNode.createFromParser(iParser0, linkedHashSet0);
      encryptionSettingNode0.putChildNode(encryptionSettingNode0);
      assertFalse(encryptionSettingNode0.isEncryptNode());
      assertEquals("root", encryptionSettingNode0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("root", "root");
      EncryptionSettingNode encryptionSettingNode1 = encryptionSettingNode0.getChildNode("root");
      EncryptionSettingNode encryptionSettingNode2 = encryptionSettingNode0.getChildNode("root");
      assertSame(encryptionSettingNode2, encryptionSettingNode1);
      assertNotNull(encryptionSettingNode2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("", "");
      EncryptionSettingNode encryptionSettingNode1 = encryptionSettingNode0.getChildNode("");
      assertFalse(encryptionSettingNode1.isEncryptNode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("", "");
      boolean boolean0 = encryptionSettingNode0.isEncryptNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncryptionSettingNode encryptionSettingNode0 = new EncryptionSettingNode("/0A$", "B-{`v`.");
      boolean boolean0 = encryptionSettingNode0.isEncryptNode();
      assertEquals("/0A$", encryptionSettingNode0.getColumnName());
      assertEquals("B-{`v`.", encryptionSettingNode0.getKeyName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnionField unionField0 = new UnionField("The specified key name \"%s\" does not exist.");
      Map<Object, Object> map0 = unionField0.toJavaObject();
      JavaMapParser javaMapParser0 = new JavaMapParser(map0);
      IParser iParser0 = javaMapParser0.getParser(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EncryptionSettingNode encryptionSettingNode0 = EncryptionSettingNode.createFromParser(iParser0, linkedHashSet0);
      boolean boolean0 = encryptionSettingNode0.isEncryptNode();
      assertFalse(boolean0);
      assertEquals("root", encryptionSettingNode0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        EncryptionSettingNode.createFromJson("The specified key name \"%s\" does not exist.", linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/ObjectMapper
         //
         verifyException("jp.co.yahoo.yosegi.message.parser.json.JacksonMessageReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNullParser textNullParser0 = new TextNullParser();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EncryptionSettingNode encryptionSettingNode0 = EncryptionSettingNode.createFromParser(textNullParser0, linkedHashSet0);
      String string0 = encryptionSettingNode0.getKeyName();
      assertNull(string0);
      assertEquals("root", encryptionSettingNode0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JavaMapParser javaMapParser0 = new JavaMapParser(hashMap0);
      hashMap0.put(javaMapParser0, javaMapParser0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EncryptionSettingNode encryptionSettingNode0 = EncryptionSettingNode.createFromParser(javaMapParser0, linkedHashSet0);
      assertFalse(encryptionSettingNode0.isEncryptNode());
      assertEquals("root", encryptionSettingNode0.getColumnName());
  }
}
