/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:36:58 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BooleanColumnAnalizeResult_ESTest extends BooleanColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("QG0>*M223:", (-844), false, (-844), (-1), 10, 0, 0);
      boolean boolean0 = booleanColumnAnalizeResult0.maybeSorted();
      assertEquals(0, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-844), booleanColumnAnalizeResult0.getNullCount());
      assertEquals(0, booleanColumnAnalizeResult0.getTrueCount());
      assertFalse(boolean0);
      assertEquals((-1), booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-844), booleanColumnAnalizeResult0.getColumnSize());
      assertEquals(10, booleanColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("%S.6|E}(", 0, true, 0, 12, 0, 0, 12);
      int int0 = booleanColumnAnalizeResult0.getUniqCount();
      assertEquals(0, booleanColumnAnalizeResult0.getTrueCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(0, int0);
      assertEquals(12, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(12, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals((-1), booleanColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult((String) null, 0, true, 0, 0, (-551), (-551), 966);
      int int0 = booleanColumnAnalizeResult0.getUniqCount();
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(0, booleanColumnAnalizeResult0.getRowCount());
      assertEquals(966, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals((-551), int0);
      assertEquals((-551), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(0, booleanColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult((String) null, 1, false, 0, 0, (-551), 0, 0);
      int int0 = booleanColumnAnalizeResult0.getTrueCount();
      assertEquals(0, booleanColumnAnalizeResult0.getRowEnd());
      assertEquals(0, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-551), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(0, int0);
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(0, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 0, false, 1143, 0, (-2410), (-1400), 0);
      int int0 = booleanColumnAnalizeResult0.getTrueCount();
      assertEquals(0, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-2410), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1143, booleanColumnAnalizeResult0.getNullCount());
      assertEquals((-1400), int0);
      assertEquals(0, booleanColumnAnalizeResult0.getRowCount());
      assertEquals((-1), booleanColumnAnalizeResult0.getRowEnd());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 1044, true, 1044, 1044, 1044, 14, 1044);
      int int0 = booleanColumnAnalizeResult0.getRowEnd();
      assertEquals(1044, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1043, int0);
      assertEquals(1044, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(14, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", (-1491), false, 136, 468, (-2539), 1044, 14);
      int int0 = booleanColumnAnalizeResult0.getRowEnd();
      assertEquals(136, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(14, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-2539), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals((-1492), int0);
      assertEquals(468, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult((String) null, 0, true, 0, 0, (-551), (-551), 966);
      int int0 = booleanColumnAnalizeResult0.getRowCount();
      assertEquals(0, int0);
      assertEquals((-1), booleanColumnAnalizeResult0.getRowEnd());
      assertEquals(966, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals((-551), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals((-551), booleanColumnAnalizeResult0.getUniqCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("|O.5dgr2", (-3367), true, 1845, (-2857), (-3367), (-2857), (-2857));
      int int0 = booleanColumnAnalizeResult0.getRowCount();
      assertEquals((-2857), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals((-2857), booleanColumnAnalizeResult0.getFalseCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-3367), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals((-2857), int0);
      assertEquals(1845, booleanColumnAnalizeResult0.getNullCount());
      assertEquals((-3367), booleanColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult(":lo^C(%2RzyYp", 0, false, 0, 0, 17, 0, 927);
      int int0 = booleanColumnAnalizeResult0.getNullCount();
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(927, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(17, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(0, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(0, int0);
      assertEquals(0, booleanColumnAnalizeResult0.getColumnSize());
      assertEquals(0, booleanColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", (-246), true, (-246), (-246), (-246), (-246), (-246));
      int int0 = booleanColumnAnalizeResult0.getNullCount();
      assertEquals((-246), booleanColumnAnalizeResult0.getUniqCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-246), booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-246), int0);
      assertEquals((-246), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals((-246), booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-247), booleanColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult((String) null, 0, true, 0, 0, (-551), (-551), 966);
      int int0 = booleanColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-551), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(966, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(0, int0);
      assertEquals((-551), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(0, booleanColumnAnalizeResult0.getColumnSize());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("b", (-1), true, (-1), (-3881), (-1), (-3534), 0);
      int int0 = booleanColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-1), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals((-3881), int0);
      assertEquals((-3534), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(0, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-1), booleanColumnAnalizeResult0.getColumnSize());
      assertEquals((-1), booleanColumnAnalizeResult0.getNullCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", (-1491), false, 136, 468, (-2539), 1044, 14);
      int int0 = booleanColumnAnalizeResult0.getFalseCount();
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals((-2539), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(14, int0);
      assertEquals(136, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(468, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-1492), booleanColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", (-246), true, 7, 7, 7, 7, (-246));
      int int0 = booleanColumnAnalizeResult0.getFalseCount();
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-246), int0);
      assertEquals(7, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(7, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals((-246), booleanColumnAnalizeResult0.getColumnSize());
      assertEquals(7, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(7, booleanColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("?,\"IF:'2LB", 0, true, (-4), (-4), 0, 0, 0);
      int int0 = booleanColumnAnalizeResult0.getColumnSize();
      assertEquals(0, int0);
      assertEquals(0, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals((-4), booleanColumnAnalizeResult0.getRowCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-4), booleanColumnAnalizeResult0.getNullCount());
      assertEquals(0, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(0, booleanColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", (-348), false, 0, 0, 1, (-5128), 0);
      int int0 = booleanColumnAnalizeResult0.getColumnSize();
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-348), int0);
      assertEquals((-5128), booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(0, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1, booleanColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult((String) null, 0, true, 0, 0, (-551), (-551), 966);
      booleanColumnAnalizeResult0.getColumnName();
      assertEquals(966, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(0, booleanColumnAnalizeResult0.getColumnSize());
      assertEquals((-551), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals((-551), booleanColumnAnalizeResult0.getTrueCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(0, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", (-246), true, 7, 7, 7, 7, (-246));
      booleanColumnAnalizeResult0.getColumnName();
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals((-246), booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(7, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(7, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(7, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(7, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-246), booleanColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("EMPTY_ARRAY", 0, true, 0, 1267, 1, 3962, 0);
      int int0 = booleanColumnAnalizeResult0.getFalseCount();
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(0, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(3962, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(1267, booleanColumnAnalizeResult0.getRowCount());
      assertEquals(0, int0);
      assertEquals(1, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), booleanColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult(",", 1044, false, 1044, 1044, 1044, 1044, 1044);
      int int0 = booleanColumnAnalizeResult0.getRowStart();
      assertEquals(1044, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1044, booleanColumnAnalizeResult0.getColumnSize());
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", (-1491), false, 136, 468, (-2539), 1044, 14);
      int int0 = booleanColumnAnalizeResult0.getTrueCount();
      assertEquals(1044, int0);
      assertEquals((-2539), booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(14, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(136, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(468, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1492), booleanColumnAnalizeResult0.getRowEnd());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", 1, true, 1, (-1050), 1, 1, 2159);
      int int0 = booleanColumnAnalizeResult0.getRowEnd();
      assertEquals(1, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals((-1050), booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
      assertEquals(2159, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1, booleanColumnAnalizeResult0.getTrueCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", 1, true, 1, (-1050), 1, 1, 2159);
      int int0 = booleanColumnAnalizeResult0.getColumnSize();
      assertEquals(2159, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1, booleanColumnAnalizeResult0.getTrueCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals((-1050), booleanColumnAnalizeResult0.getRowCount());
      assertEquals(1, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 1044, true, 1044, 1044, 1044, 1044, 1044);
      booleanColumnAnalizeResult0.getColumnType();
      assertEquals(1044, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1044, booleanColumnAnalizeResult0.getColumnSize());
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 1044, false, 1044, 1044, 1044, 1044, 1044);
      int int0 = booleanColumnAnalizeResult0.getNullCount();
      assertEquals(1044, int0);
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1044, booleanColumnAnalizeResult0.getRowCount());
      assertEquals(1043, booleanColumnAnalizeResult0.getRowEnd());
      assertEquals(1044, booleanColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzr.BooleanColumnAnalizeResult", 1044, true, 1044, 1044, 1044, 1044, 1044);
      booleanColumnAnalizeResult0.getColumnName();
      assertEquals(1044, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1044, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 1044, false, 1044, 1044, 1044, 1044, 1044);
      int int0 = booleanColumnAnalizeResult0.getUniqCount();
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1044, int0);
      assertEquals(1044, booleanColumnAnalizeResult0.getRowCount());
      assertEquals(1043, booleanColumnAnalizeResult0.getRowEnd());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("CI*De", 1027, false, 1027, 1027, 1027, 1027, 1027);
      int int0 = booleanColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(1027, int0);
      assertEquals(1027, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1027, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1027, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1026, booleanColumnAnalizeResult0.getRowEnd());
      assertFalse(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1027, booleanColumnAnalizeResult0.getTrueCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 1031, true, 1031, 1031, 1031, 1031, 1031);
      int int0 = booleanColumnAnalizeResult0.getRowCount();
      assertEquals(1031, booleanColumnAnalizeResult0.getFalseCount());
      assertEquals(1031, int0);
      assertEquals(1031, booleanColumnAnalizeResult0.getTrueCount());
      assertTrue(booleanColumnAnalizeResult0.maybeSorted());
      assertEquals(1030, booleanColumnAnalizeResult0.getRowEnd());
      assertEquals(1031, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1031, booleanColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", 1044, true, 1044, 1044, 1044, 1044, 1044);
      boolean boolean0 = booleanColumnAnalizeResult0.maybeSorted();
      assertEquals(1044, booleanColumnAnalizeResult0.getNullCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getUniqCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getTrueCount());
      assertEquals(1044, booleanColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1044, booleanColumnAnalizeResult0.getColumnSize());
      assertEquals(1044, booleanColumnAnalizeResult0.getFalseCount());
      assertTrue(boolean0);
  }
}
