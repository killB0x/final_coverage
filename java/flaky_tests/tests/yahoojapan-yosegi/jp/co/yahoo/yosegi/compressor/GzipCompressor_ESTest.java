/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:48:47 GMT 2022
 */

package jp.co.yahoo.yosegi.compressor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.nio.BufferUnderflowException;
import java.util.zip.ZipException;
import jp.co.yahoo.yosegi.compressor.CompressResult;
import jp.co.yahoo.yosegi.compressor.CompressionPolicy;
import jp.co.yahoo.yosegi.compressor.GzipCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GzipCompressor_ESTest extends GzipCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      try { 
        gzipCompressor0.decompressAndSet(byteArray1, 3, (byte)4, byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[8];
      CompressionPolicy compressionPolicy0 = CompressionPolicy.BEST_COMPRESSION;
      CompressResult compressResult0 = new CompressResult(compressionPolicy0, 837.8);
      compressResult0.feedBack(7, 435);
      // Undeclared exception!
      try { 
        gzipCompressor0.compress(byteArray0, 7, 7, compressResult0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      int int0 = gzipCompressor0.getDecompressSize(byteArray0, (byte)0, 9);
      assertEquals(100663296, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      int int0 = gzipCompressor0.getDecompressSize(byteArray0, (byte)0, 9);
      assertEquals((-1191182336), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      // Undeclared exception!
      try { 
        gzipCompressor0.getDecompressSize(byteArray0, 1, 1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      // Undeclared exception!
      try { 
        gzipCompressor0.getDecompressSize((byte[]) null, (-591), (-591));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        gzipCompressor0.getDecompressSize(byteArray0, 529, 529);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        gzipCompressor0.decompressAndSet(byteArray0, 1, 1, byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        gzipCompressor0.decompressAndSet(byteArray0, (byte)0, (-1), byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[8];
      try { 
        gzipCompressor0.decompressAndSet(byteArray0, 4, 4, byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      try { 
        gzipCompressor0.decompress(byteArray0, 4, 4);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      // Undeclared exception!
      try { 
        gzipCompressor0.decompress(byteArray0, 1, 1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      // Undeclared exception!
      try { 
        gzipCompressor0.decompress((byte[]) null, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-5);
      // Undeclared exception!
      try { 
        gzipCompressor0.decompress(byteArray0, 3, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -83886080
         //
         verifyException("jp.co.yahoo.yosegi.compressor.GzipCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      try { 
        gzipCompressor0.decompress(byteArray0, 4, 4);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        gzipCompressor0.compress(byteArray0, (-6), (-6), (CompressResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.compressor.GzipCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      // Undeclared exception!
      try { 
        gzipCompressor0.decompressAndSet((byte[]) null, 262144, 262144, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      CompressionPolicy compressionPolicy0 = CompressionPolicy.BEST_SPEED;
      CompressResult compressResult0 = new CompressResult(compressionPolicy0, 6);
      compressResult0.feedBack(6, 976);
      // Undeclared exception!
      try { 
        gzipCompressor0.compress((byte[]) null, 6, 6, compressResult0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      CompressionPolicy compressionPolicy0 = CompressionPolicy.SPEED;
      CompressResult compressResult0 = new CompressResult(compressionPolicy0, 2901);
      // Undeclared exception!
      try { 
        gzipCompressor0.compress((byte[]) null, 2901, 2901, compressResult0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      // Undeclared exception!
      try { 
        gzipCompressor0.compress((byte[]) null, (int) (byte) (-58), (int) (byte)2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        gzipCompressor0.decompress(byteArray0, (-998), (-998));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GzipCompressor gzipCompressor0 = new GzipCompressor();
      byte[] byteArray0 = new byte[9];
      int int0 = gzipCompressor0.getDecompressSize(byteArray0, (byte)0, 9);
      assertEquals(0, int0);
  }
}
