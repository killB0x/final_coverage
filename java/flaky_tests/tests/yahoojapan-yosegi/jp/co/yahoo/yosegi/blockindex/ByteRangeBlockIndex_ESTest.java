/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:25:25 GMT 2022
 */

package jp.co.yahoo.yosegi.blockindex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.List;
import jp.co.yahoo.yosegi.blockindex.ByteRangeBlockIndex;
import jp.co.yahoo.yosegi.blockindex.IBlockIndex;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.BytesObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.FloatObj;
import jp.co.yahoo.yosegi.message.objects.IntegerObj;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.message.objects.NullObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.ShortObj;
import jp.co.yahoo.yosegi.message.objects.Utf8BytesLinkObj;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.filter.NotNullFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilterType;
import jp.co.yahoo.yosegi.spread.column.filter.NumberRangeFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteRangeBlockIndex_ESTest extends ByteRangeBlockIndex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)31, (byte)31);
      DoubleObj doubleObj0 = new DoubleObj(2);
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, doubleObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte)31, byteRangeBlockIndex0.getMin());
      assertNull(list0);
      assertEquals((byte)31, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj((byte)2);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)2, (byte)2);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals((byte)2, byteRangeBlockIndex0.getMin());
      assertEquals((byte)2, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteRangeBlockIndex0.setFromBinary(byteArray0, Integer.MAX_VALUE, (-27));
      ByteObj byteObj0 = new ByteObj((byte)2);
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj((byte) (-35));
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte) (-35));
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMax());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte)10);
      ByteObj byteObj0 = new ByteObj((byte) (-27));
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte)10, byteRangeBlockIndex0.getMax());
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMin());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)0, (byte)0);
      ByteRangeBlockIndex byteRangeBlockIndex1 = (ByteRangeBlockIndex)byteRangeBlockIndex0.getNewInstance();
      boolean boolean0 = byteRangeBlockIndex0.merge(byteRangeBlockIndex1);
      assertEquals((byte) (-128), byteRangeBlockIndex1.getMax());
      assertEquals((byte)127, byteRangeBlockIndex1.getMin());
      assertEquals((byte)0, byteRangeBlockIndex0.getMin());
      assertTrue(boolean0);
      assertEquals((byte)0, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte)18);
      byte[] byteArray0 = new byte[2];
      BytesObj bytesObj0 = new BytesObj(byteArray0);
      LongObj longObj0 = new LongObj((byte) (-35));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(bytesObj0, false, longObj0, false);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)18, byteRangeBlockIndex0.getMax());
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, primitiveObject0);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)0, (byte)0);
      byte byte0 = byteRangeBlockIndex0.getMin();
      assertEquals((byte)0, byte0);
      assertEquals((byte)0, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte)18);
      byte byte0 = byteRangeBlockIndex0.getMin();
      assertEquals((byte)18, byteRangeBlockIndex0.getMax());
      assertEquals((byte) (-35), byte0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)0, (byte)0);
      byte byte0 = byteRangeBlockIndex0.getMax();
      assertEquals((byte)0, byteRangeBlockIndex0.getMin());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte)18);
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMin());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-35);
      byteRangeBlockIndex0.setFromBinary(byteArray0, 4, 761);
      byte byte0 = byteRangeBlockIndex0.getMax();
      assertEquals((byte) (-35), byte0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        byteRangeBlockIndex0.setFromBinary(byteArray0, (-1), (-1));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)0, (byte)0);
      int int0 = byteRangeBlockIndex0.getBinarySize();
      assertEquals(2, int0);
      assertEquals((byte)0, byteRangeBlockIndex0.getMax());
      assertEquals((byte)0, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)106, (byte)45);
      byte byte0 = byteRangeBlockIndex0.getMin();
      assertEquals((byte)106, byte0);
      assertEquals((byte)45, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)106, (byte)45);
      byte byte0 = byteRangeBlockIndex0.getMax();
      assertEquals((byte)45, byte0);
      assertEquals((byte)106, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte)18);
      ByteObj byteObj0 = new ByteObj((byte) (-23));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, false, byteObj0, false);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)18, byteRangeBlockIndex0.getMax());
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, byteObj0, false, byteObj0, false);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)3, (byte)3);
      ShortObj shortObj0 = new ShortObj((byte)3);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(shortObj0, false, shortObj0, true);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)3, byteRangeBlockIndex0.getMax());
      assertEquals((byte)3, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, byteObj0, false, byteObj0, true);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)3, (byte)114);
      ShortObj shortObj0 = new ShortObj((byte)3);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(shortObj0, false, shortObj0, true);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)3, byteRangeBlockIndex0.getMin());
      assertEquals((byte)114, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-35), (byte)18);
      ByteObj byteObj0 = new ByteObj((byte)18);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, false);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertNull(list0);
      assertEquals((byte) (-35), byteRangeBlockIndex0.getMin());
      assertEquals((byte)18, byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, false);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj((byte)127);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, true);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, true);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)1, (byte)1);
      IntegerObj integerObj0 = new IntegerObj((byte)1);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(integerObj0, true, integerObj0, true);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)1, byteRangeBlockIndex0.getMax());
      assertNull(list0);
      assertEquals((byte)1, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-14), (byte) (-14));
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, booleanObj0, true, booleanObj0, false);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte) (-14), byteRangeBlockIndex0.getMax());
      assertEquals((byte) (-14), byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, true, booleanObj0, true);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-14), (byte) (-14));
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, booleanObj0, false, booleanObj0, false);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((byte) (-14), byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-14), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      FloatObj floatObj0 = new FloatObj((-128.0F));
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, floatObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)16, (byte)16);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals((byte)16, byteRangeBlockIndex0.getMax());
      assertEquals((byte)16, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-37), (byte) (-37));
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-37), byteRangeBlockIndex0.getMin());
      assertNotNull(list0);
      assertEquals((byte) (-37), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.NOT_EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertNotNull(list0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-1), (byte) (-1));
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-1), byteRangeBlockIndex0.getMin());
      assertNull(list0);
      assertEquals((byte) (-1), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-1), (byte) (-1));
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-1), byteRangeBlockIndex0.getMax());
      assertNull(list0);
      assertEquals((byte) (-1), byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte) (-12), (byte) (-12));
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj((byte) (-12));
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((byte) (-12), byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-12), byteRangeBlockIndex0.getMax());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter((PrimitiveObject) null, false, (PrimitiveObject) null, false);
      // Undeclared exception!
      try { 
        byteRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.blockindex.ByteRangeBlockIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ColumnType columnType0 = ColumnType.BYTE;
      NotNullFilter notNullFilter0 = new NotNullFilter(columnType0);
      byteRangeBlockIndex0.getBlockSpreadIndex(notNullFilter0);
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj((byte)2);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      ByteRangeBlockIndex byteRangeBlockIndex1 = new ByteRangeBlockIndex((byte)4, (byte)4);
      boolean boolean0 = byteRangeBlockIndex0.merge(byteRangeBlockIndex1);
      assertEquals((byte)4, byteRangeBlockIndex0.getMin());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      boolean boolean0 = byteRangeBlockIndex0.merge((IBlockIndex) null);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)0, (byte)0);
      ByteRangeBlockIndex byteRangeBlockIndex1 = (ByteRangeBlockIndex)byteRangeBlockIndex0.clone();
      assertEquals((byte)0, byteRangeBlockIndex1.getMax());
      assertEquals((byte)0, byteRangeBlockIndex1.getMin());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      boolean boolean0 = byteRangeBlockIndex0.merge(byteRangeBlockIndex0);
      assertEquals((byte) (-128), byteRangeBlockIndex0.getMax());
      assertEquals((byte)127, byteRangeBlockIndex0.getMin());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      byte[] byteArray0 = byteRangeBlockIndex0.toBinary();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, (-1), (-1));
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, utf8BytesLinkObj0);
      // Undeclared exception!
      try { 
        byteRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex((byte)60, (byte) (-66));
      byteRangeBlockIndex0.getBlockIndexType();
      assertEquals((byte) (-66), byteRangeBlockIndex0.getMax());
      assertEquals((byte)60, byteRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteRangeBlockIndex byteRangeBlockIndex0 = new ByteRangeBlockIndex();
      // Undeclared exception!
      try { 
        byteRangeBlockIndex0.setFromBinary((byte[]) null, (-1523), (-1523));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
