/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:16:42 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import jp.co.yahoo.yosegi.spread.Spread;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizer;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringColumnAnalizer_ESTest extends StringColumnAnalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("'wkqy?W@dU)x}F", (String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn((-1161), Integer.MAX_VALUE, Integer.MAX_VALUE, (-1161), (-1230)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      StringColumnAnalizer stringColumnAnalizer0 = new StringColumnAnalizer(arrowPrimitiveColumn0);
      stringColumnAnalizer0.analize();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = (StringColumnAnalizeResult)stringColumnAnalizer0.analize();
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(Integer.MAX_VALUE, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(1, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(Integer.MAX_VALUE, stringColumnAnalizeResult0.getMinCharLength());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("'wkqy?W@dU)x}F", (String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn((-1161), Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      StringColumnAnalizer stringColumnAnalizer0 = new StringColumnAnalizer(arrowPrimitiveColumn0);
      stringColumnAnalizer0.analize();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = (StringColumnAnalizeResult)stringColumnAnalizer0.analize();
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(Integer.MAX_VALUE, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(Integer.MAX_VALUE, stringColumnAnalizeResult0.getMinCharLength());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(1, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringColumnAnalizer stringColumnAnalizer0 = new StringColumnAnalizer((IColumn) null);
      // Undeclared exception!
      try { 
        stringColumnAnalizer0.analize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(3562, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      StringColumnAnalizer stringColumnAnalizer0 = new StringColumnAnalizer(arrowPrimitiveColumn0);
      StringColumnAnalizeResult stringColumnAnalizeResult0 = (StringColumnAnalizeResult)stringColumnAnalizer0.analize();
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(Integer.MAX_VALUE, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(Integer.MAX_VALUE, stringColumnAnalizeResult0.getMinCharLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("ICellMaker does not allow NULL.");
      Spread spread0 = new Spread(spreadColumn0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      spread0.addRow((Map<String, Object>) hashMap0);
      spreadColumn0.setSpread(spread0);
      StringColumnAnalizer stringColumnAnalizer0 = new StringColumnAnalizer(spreadColumn0);
      // Undeclared exception!
      try { 
        stringColumnAnalizer0.analize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.SpreadCell cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.SpreadCell and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5553f64b)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizer", e);
      }
  }
}
