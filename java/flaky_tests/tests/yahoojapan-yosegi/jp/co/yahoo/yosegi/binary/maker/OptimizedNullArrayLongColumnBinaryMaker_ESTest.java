/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:31:08 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiArrayIndexLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.StringObj;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IntegerColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.LongColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.ShortColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptimizedNullArrayLongColumnBinaryMaker_ESTest extends OptimizedNullArrayLongColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", (-2033), true, (-2033), 16, 16, 2, (-2033), 8, 16, 76, 2, (-2033), 2, 76, 3, "", "", (-99), 2, 3);
      int int0 = optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals(176, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      StringObj stringObj0 = new StringObj("Repetition must be equal to or greater than 0.");
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(stringObj0, "Repetition must be equal to or greater than 0.", 1079);
      optimizedNullArrayLongColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-1838656495));
      assertFalse(columnBinary0.isSetLoadSize);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-2L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, (String) null, 1080);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 38);
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      SpreadColumn spreadColumn0 = new SpreadColumn("");
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("R7ep", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinary columnBinary0 = optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, spreadColumn0);
      assertEquals(0, columnBinary0.logicalDataSize);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 0L);
      assertEquals(1, primitiveObject0.getObjectSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnType0, (-1676L));
      assertEquals(116, primitiveObject0.getInt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", 1, false, (-232), 1, 0, 26L, 1, 4, 0);
      int int0 = optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize(longColumnAnalizeResult0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[9];
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, (String) null, (String) null, columnType0, 1060, 1060, 64, 1060, byteArray0, 64, 64, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 888);
      yosegiSequentialLoader0.setBytes(1, byteArray0, 1060, 0);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[6];
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, (String) null, (String) null, columnType0, 1060, 1060, 64, 1060, byteArray0, 64, 64, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 1060);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      yosegiSequentialLoader0.setBytes(1046, columnBinary0.binary);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      StringObj stringObj0 = new StringObj("DQC");
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(stringObj0, "", (-1866));
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-1866));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1866
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary((String) null, 16, (List<ColumnBinary>) null);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 16);
      yosegiArrayIndexLoader0.finish();
      IColumn iColumn0 = yosegiArrayIndexLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ArrayColumn$EmptyArrayCell cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ArrayColumn$EmptyArrayCell and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @bed78a1)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-1967), (List<ColumnBinary>) null);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("d%t&{fU4^uj", (-1905), (List<ColumnBinary>) null);
      columnBinary0.binaryLength = (-1905);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 736);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary((String) null, (-976), vector0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      columnBinary0.binaryLength = (-976);
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.getLoadType((ColumnBinary) null, 82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum((ColumnType) null, 2662L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("Z=U/?BQx|mra|bNGRN");
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      ColumnBinary columnBinary0 = dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      ILoader<Object> iLoader0 = (ILoader<Object>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn((LoadType) null).when(iLoader0).getLoaderType();
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("v", (-1936), (List<ColumnBinary>) null);
      columnBinary0.isSetLoadSize = true;
      LoadType loadType0 = LoadType.DICTIONARY;
      ILoader<IntegerColumnAnalizeResult> iLoader0 = (ILoader<IntegerColumnAnalizeResult>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$666049550 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IDictionaryLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$666049550 and jp.co.yahoo.yosegi.inmemory.IDictionaryLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @bed78a1)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-644), linkedList0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      columnBinary0.isSetLoadSize = true;
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not DICTIONARY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("\"", (-1936), (List<ColumnBinary>) null);
      columnBinary0.isSetLoadSize = true;
      LoadType loadType0 = optimizedNullArrayLongColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      assertEquals(LoadType.DICTIONARY, loadType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", 1326, arrayList0);
      LoadType loadType0 = optimizedNullArrayLongColumnBinaryMaker0.getLoadType(columnBinary0, 1326);
      assertEquals(LoadType.SEQUENTIAL, loadType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", (-1161), false, 16, 0, (-887), 1, 0, 1, (-887), 622, 0, (-1161), 1, 1, 0, "", "VwZ", 16, 0, 0);
      int int0 = optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-7064), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult("TD~LR&", 2381, false, 2381, 2381, 2381, 2381, 2381, 2381, 1081);
      int int0 = optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize(integerColumnAnalizeResult0);
      assertEquals(5394, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 3742, true, 2, 3742, 2, (short)3, (short)3, 0, 0);
      int int0 = optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize(shortColumnAnalizeResult0);
      assertEquals(3793, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("Constant binary maker not support column to binary.", 2, true, 2, 2, 2, (byte)108, (byte)108, 2, (byte)108);
      int int0 = optimizedNullArrayLongColumnBinaryMaker0.calcBinarySize(byteColumnAnalizeResult0);
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[5];
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, (String) null, (String) null, columnType0, 77, 1032, 77, 1032, byteArray0, 77, 77, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 1032);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setLong(77, 77);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      yosegiSequentialLoader0.setFloat(0, 77);
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode((String) null, columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[9];
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, (String) null, (String) null, columnType0, 1060, 1060, 64, 1060, byteArray0, 64, 64, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 1060);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setLong(64, 1060);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode((String) null, columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Loader type is not SEQUENTIAL.", (ColumnBinaryMakerConfig) null);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      BooleanObj booleanObj0 = new BooleanObj(false);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(booleanObj0, "Loader type is not SEQUENTIAL.", 1629);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 1674);
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 3853L);
      assertEquals(3853.0, primitiveObject0.getDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SHORT;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 422L);
      assertEquals(422.0, primitiveObject0.getDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 0L);
      assertFalse(primitiveObject0.getBoolean());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 2787L);
      assertEquals("-29", primitiveObject0.getString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptimizedNullArrayLongColumnBinaryMaker optimizedNullArrayLongColumnBinaryMaker0 = new OptimizedNullArrayLongColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayLongColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, (-638));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker", e);
      }
  }
}
