/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:40:58 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.NullObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.Utf8BytesLinkObj;
import jp.co.yahoo.yosegi.spread.column.filter.NumberRangeFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberRangeFilter_ESTest extends NumberRangeFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, false, booleanObj0, false);
      boolean boolean0 = numberRangeFilter0.isMinHasEquals();
      assertTrue(numberRangeFilter0.isInvert());
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj((byte) (-75));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, true);
      boolean boolean0 = numberRangeFilter0.isMaxHasEquals();
      assertTrue(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isInvert());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(primitiveObject0, false, primitiveObject0, false);
      boolean boolean0 = numberRangeFilter0.isInvert();
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertFalse(boolean0);
      assertFalse(numberRangeFilter0.isMinHasEquals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, (PrimitiveObject) null, false, (PrimitiveObject) null, false);
      numberRangeFilter0.getMinObject();
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isInvert());
      assertFalse(numberRangeFilter0.isMaxHasEquals());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(primitiveObject0, false, primitiveObject0, false);
      numberRangeFilter0.getMinObject();
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isInvert());
      assertFalse(numberRangeFilter0.isMaxHasEquals());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, false, booleanObj0, false);
      numberRangeFilter0.getMinObject();
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertTrue(numberRangeFilter0.isInvert());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(primitiveObject0, false, primitiveObject0, false);
      numberRangeFilter0.getMaxObject();
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isInvert());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, false, booleanObj0, false);
      numberRangeFilter0.getMaxObject();
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertTrue(numberRangeFilter0.isInvert());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DoubleObj doubleObj0 = new DoubleObj((-1.0));
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, (-1), (-1));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, doubleObj0, false, utf8BytesLinkObj0, true);
      numberRangeFilter0.getMaxObject();
      assertTrue(numberRangeFilter0.isMaxHasEquals());
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertTrue(numberRangeFilter0.isInvert());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, false, booleanObj0, false);
      boolean boolean0 = numberRangeFilter0.isInvert();
      assertTrue(boolean0);
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertFalse(numberRangeFilter0.isMinHasEquals());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, false, booleanObj0, false);
      boolean boolean0 = numberRangeFilter0.isMaxHasEquals();
      assertTrue(numberRangeFilter0.isInvert());
      assertFalse(boolean0);
      assertFalse(numberRangeFilter0.isMinHasEquals());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, 0, (byte) (-32));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(utf8BytesLinkObj0, false, utf8BytesLinkObj0, true);
      numberRangeFilter0.getMinObject();
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isInvert());
      assertTrue(numberRangeFilter0.isMaxHasEquals());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, 0, (byte) (-32));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(utf8BytesLinkObj0, false, utf8BytesLinkObj0, true);
      numberRangeFilter0.getFilterType();
      assertTrue(numberRangeFilter0.isMaxHasEquals());
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isInvert());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(true);
      DoubleObj doubleObj0 = new DoubleObj((-1.0));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, doubleObj0, true, booleanObj0, false);
      boolean boolean0 = numberRangeFilter0.isMinHasEquals();
      assertTrue(numberRangeFilter0.isInvert());
      assertFalse(numberRangeFilter0.isMaxHasEquals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter((PrimitiveObject) null, false, (PrimitiveObject) null, false);
      numberRangeFilter0.getMaxObject();
      assertFalse(numberRangeFilter0.isInvert());
      assertFalse(numberRangeFilter0.isMinHasEquals());
      assertFalse(numberRangeFilter0.isMaxHasEquals());
  }
}
