/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:37:21 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBytesColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiArrayIndexLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.objects.BytesObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.spread.analyzer.ArrayColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptimizedNullArrayDumpFloatColumnBinaryMaker_ESTest extends OptimizedNullArrayDumpFloatColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Loader type is not SEQUENTIAL", "", "Loader type is not SEQUENTIAL", columnType0, 3, 3, 138, 138, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 138);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary1 = optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      columnBinary1.isSetLoadSize = true;
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("^\"\"q78(I", "^\"\"q78(I", "^\"\"q78(I", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3);
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnBinary0.columnType, "^\"\"q78(I");
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      ColumnBinary columnBinary1 = optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, primitiveColumn0);
      columnBinary1.setRepetitions(columnBinary1.repetitions, 66988604);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("LoadeV tye is not SEQENTIAL", "RD)POH5dep3", "LoadeV tye is not SEQENTIAL", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("RD)POH5dep3").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(0, 3, 0, (-1), 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      OptimizedNullArrayDumpBytesColumnBinaryMaker optimizedNullArrayDumpBytesColumnBinaryMaker0 = new OptimizedNullArrayDumpBytesColumnBinaryMaker();
      ColumnBinary columnBinary1 = optimizedNullArrayDumpBytesColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 20 out of bounds for length 20
         //
         verifyException("jp.co.yahoo.yosegi.util.io.nullencoder.BitNullBinaryEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("2*", "2*", "2*", columnType0, (-1921), (-1921), (-1921), (-1921), (byte[]) null, (-1921), 16, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 16);
      yosegiSequentialLoader0.setInteger(7, 4);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setDouble(0, (-1921));
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(0, 3, 0, (-1)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      byte[] byteArray0 = new byte[6];
      BytesObj bytesObj0 = new BytesObj(byteArray0);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(bytesObj0, (String) null, (byte)8);
      optimizedNullArrayDumpFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertFalse(columnBinary0.isSetLoadSize);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", (-1), false, 0, 0, (-1), 0, 0, 0, (-900), (-1348), 0, 13, (-1), (-1), (-2374), "", "#YBp7[[", 2, 0, 2);
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      ArrayColumnAnalizeResult arrayColumnAnalizeResult0 = new ArrayColumnAnalizeResult("#YBp7[[", 4388, 4388, list0);
      int int0 = optimizedNullArrayDumpFloatColumnBinaryMaker0.calcBinarySize(arrayColumnAnalizeResult0);
      assertEquals(18663, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("Loader type is not SEQUENTIAL", 0, true, (-693), (-164), (-693), (-693), 2294, (-164), (-2830), (-2830), 0, (-164), 2294, 2294, 2294, "MN3 !epK^", "G@^ XQs2pJrp", 2294, 18, (-1));
      int int0 = optimizedNullArrayDumpFloatColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-12579), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("-9O|`@([}Zv8;I", "-9O|`@([}Zv8;I", "-9O|`@([}Zv8;I", columnType0, (-1907), (-1907), (-1907), (-1907), (byte[]) null, (-1907), 10, vector0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 6);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      byte[] byteArray0 = new byte[8];
      yosegiSequentialLoader0.setBytes(0, byteArray0, (-507), (int) (byte)125);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("&[_&@0:54f,#q06U,", "&[_&@0:54f,#q06U,", "&[_&@0:54f,#q06U,", columnType0, 3, 3, 4, 4, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 4);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setString(3, "&[_&@0:54f,#q06U,");
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnType columnType0 = ColumnType.STRING;
      ColumnBinary columnBinary0 = new ColumnBinary("", "", "c0", columnType0, 3, (-677), (-677), (-677), (byte[]) null, 3, (-2065), stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 2066);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setDouble(2, (-1.7976931348623157E308));
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Can not down cast. double to float. double value is -1.7976931348623157E308
         //
         verifyException("jp.co.yahoo.yosegi.message.objects.DoubleObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      IColumn iColumn0 = NullColumn.getInstance();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      LongObj longObj0 = new LongObj(27);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "-9O|`2@([}Zv8;I", 0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-104));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -104
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.BYTES;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("[ZX(Z3qjxd", "[ZX(Z3qjxd", "[ZX(Z3qjxd", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null, (ColumnType) null).when(iCell0).getType();
      iColumn0.setDefaultCell(iCell0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$487008191 cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$487008191 and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2f1f73a7)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-109), arrayList0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, 2843);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("%5`", 623, arrayList0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      DoubleObj doubleObj0 = new DoubleObj(0);
      ColumnBinary columnBinary1 = ConstantColumnBinaryMaker.createColumnBinary(doubleObj0, "_=SsY:._NExPV<#g?}0", 623);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-785), arrayList0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("jp.co.yahoo.yosegi.compressor.DefaultCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-109), arrayList0);
      LoadType loadType0 = LoadType.SEQUENTIAL;
      ILoader<Object> iLoader0 = (ILoader<Object>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$525073472 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$525073472 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2f1f73a7)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("Iv6c%j*M24", (-814), arrayList0);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, 0);
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary0, yosegiArrayIndexLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Lodertye is nt SEQENTIAL", "Lodertye is nt SEQENTIAL", "Lodertye is nt SEQENTIAL", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3);
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnBinary0.columnType, "Lodertye is nt SEQENTIAL");
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary1 = optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, primitiveColumn0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      columnBinary1.setRepetitions(intArray0, 3);
      optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
      assertTrue(columnBinary1.isSetLoadSize);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Lodertye is nt SEQENTIAL", "Lodertye is nt SEQENTIAL", "Lodertye is nt SEQENTIAL", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3);
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnBinary0.columnType, "Lodertye is nt SEQENTIAL");
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary1 = optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, primitiveColumn0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1550);
      columnBinary1.setRepetitions(intArray0, 3);
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Repetition must be equal to or greater than 0.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Loader type is not SEQUENTIAL", "C7gfF? Eq:w*>", "Loader type is not SEQUENTIAL", columnType0, 3, 3, 138, 138, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 138);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setDouble(3, 138);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary1 = optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
      assertEquals(29, columnBinary1.rawDataSize);
      assertEquals(37, columnBinary1.binaryLength);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Loader type is not SEQUENTIAL", "C7gfF? Eq:w*>", "Loader type is not SEQUENTIAL", columnType0, 3, 3, 4, 4, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 4);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setDouble(3, 4);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary1 = optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
      assertEquals(19, columnBinary1.rawDataSize);
      assertEquals(27, columnBinary1.binaryLength);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.FLOAT;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("^\"\"q$78(I", "^\"\"q$78(I", "^\"\"q$78(I", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3);
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnBinary0.columnType, "^\"\"q$78(I");
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinary columnBinary1 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, primitiveColumn0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("^\"\"q78(I", "^\"\"q78(I", "^\"\"q78(I", columnType0, 66988604, 66988604, 66988604, 66988604, (byte[]) null, 66988604, 66988604, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 66988604);
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnBinary0.columnType, "^\"\"q78(I");
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary1 = optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, primitiveColumn0);
      // Undeclared exception!
      optimizedNullArrayDumpFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.BYTE;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Z", "{\"FpW?O<|tX", "Z", columnType0, 549, 9, 6, 535, (byte[]) null, 549, (-2737), stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 262144);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("N\";", columnBinaryMakerConfig0);
      // Undeclared exception!
      optimizedNullArrayDumpFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      ColumnType columnType0 = ColumnType.LONG;
      byte[] byteArray0 = new byte[1];
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Repetition must be equal to or greater than 0.", "", "Repetition must be equal to or greater than 0.", columnType0, 2878, 2878, 1, 1, byteArray0, (byte)59, (byte)59, arrayList0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpFloatColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.INTEGER;
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("Lodertye is nt SEQENTIAL", "Lodertye is nt SEQENTIAL", "Lodertye is nt SEQENTIAL", columnType0, 3, 3, 3, 3, (byte[]) null, 3, 3, stack0);
      LoadType loadType0 = optimizedNullArrayDumpFloatColumnBinaryMaker0.getLoadType(columnBinary0, 1);
      assertEquals(LoadType.SEQUENTIAL, loadType0);
  }
}
