/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:27:44 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.SpreadColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpreadColumnAnalizeResult_ESTest extends SpreadColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("51e:kc[!vBAC", 0, 0, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getUniqCount();
      assertEquals(0, int0);
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("z)o?O7\"nq:}]U[", 1357, true, 1357, 0, 2208, 389, (-1), 1, 1357, 0, 16, 9, 0, (-1), 1, "z)o?O7\"nq:}]U[", "z)o?O7\"nq:}]U[", 0, 11, 0);
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("z)o?O7\"nq:}]U[", 389, 1357, list0);
      int int0 = spreadColumnAnalizeResult0.getUniqCount();
      assertEquals(1357, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(389, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("FLOAT", 2, false, 0, 0, 2393, 2, 1283, 834, 0, 1283, 1283, 0, 1283, 0, (-860), "_'C", "_'C", 834, 0, 834);
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("FLOAT", 2, 2393, list0);
      int int0 = spreadColumnAnalizeResult0.getRowEnd();
      assertEquals(2393, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult(":Z", (-1707), (-1707), (List<IColumnAnalizeResult>) null);
      int int0 = spreadColumnAnalizeResult0.getRowEnd();
      assertEquals((-1707), spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-1708), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 0, false, 0, (-1292), (-995), 0, (-1599), (-1292), 0, (-1292), (-668), (-1), (-995), 2672, 3565, "NULL", "", 0, 0, 2672);
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("NULL", 0, 0, list0);
      int int0 = spreadColumnAnalizeResult0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", (-2325), 0, (List<IColumnAnalizeResult>) null);
      int int0 = spreadColumnAnalizeResult0.getRowCount();
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-2325), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", 2212, 0, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getNullCount();
      assertEquals(0, int0);
      assertEquals(2212, spreadColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult", 2104, true, 2104, 0, 2104, 0, 0, 0, 0, 2104, 2142, 2104, 273, 2142, 3557, "}(", "9'=p", 3557, 0, 2142);
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("}(", 2104, 2104, list0);
      int int0 = spreadColumnAnalizeResult0.getNullCount();
      assertEquals(2104, int0);
      assertEquals(2103, spreadColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("STRUCT", 1479, 1479, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getColumnSize();
      assertEquals(1479, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(1479, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult((String) null, (-2161), 1397, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getColumnSize();
      assertEquals((-2161), int0);
      assertEquals(1397, spreadColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult(">va*?-[(\"/O1Gh", 2003, true, 2815, (-2328), (-2328), 2726, 2312, 2003, 2312, 0, 0, 9, 2815, 2726, (-231), "RMd", "RMd", 2243, 0, (-1));
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult((String) null, (-231), (-231), list0);
      spreadColumnAnalizeResult0.getColumnName();
      assertEquals((-231), spreadColumnAnalizeResult0.getRowCount());
      assertEquals((-231), spreadColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", 0, 0, linkedList0);
      spreadColumnAnalizeResult0.getColumnName();
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-1), spreadColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", (-2325), 0, (List<IColumnAnalizeResult>) null);
      spreadColumnAnalizeResult0.getChild();
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-2325), spreadColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", 0, 0, linkedList0);
      linkedList0.add((IColumnAnalizeResult) spreadColumnAnalizeResult0);
      spreadColumnAnalizeResult0.getChild();
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(0, spreadColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult(">va*?-[(\"/O1Gh", 2003, true, 2815, (-2328), (-2328), 2726, 2312, 2003, 2312, 0, 0, 9, 2815, 2726, (-231), "RMd", "RMd", 2243, 0, (-1));
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult((String) null, (-231), (-231), list0);
      spreadColumnAnalizeResult0.getChild();
      assertEquals((-231), spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-231), spreadColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("d", (-553), (-553), linkedList0);
      int int0 = spreadColumnAnalizeResult0.getNullCount();
      assertEquals((-553), int0);
      assertEquals((-553), spreadColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("d", (-553), (-553), linkedList0);
      int int0 = spreadColumnAnalizeResult0.getUniqCount();
      assertEquals((-553), spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-553), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult", 2104, true, 2104, 0, 2104, 0, 0, 0, 0, 2104, 2142, 2104, 273, 2142, 3557, "}(", "9'=p", 3557, 0, 2142);
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("}(", 2104, 2104, list0);
      int int0 = spreadColumnAnalizeResult0.getRowCount();
      assertEquals(2104, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(2104, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("Tg5", 1, 0, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getRowEnd();
      assertEquals(0, int0);
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("d", (-553), (-553), linkedList0);
      boolean boolean0 = spreadColumnAnalizeResult0.maybeSorted();
      assertEquals((-553), spreadColumnAnalizeResult0.getNullCount());
      assertFalse(boolean0);
      assertEquals((-554), spreadColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("", 0, 0, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getColumnSize();
      assertEquals(0, int0);
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("d", (-553), (-553), linkedList0);
      spreadColumnAnalizeResult0.getColumnName();
      assertEquals((-553), spreadColumnAnalizeResult0.getNullCount());
      assertEquals((-553), spreadColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("d", (-553), (-553), linkedList0);
      int int0 = spreadColumnAnalizeResult0.getRowStart();
      assertEquals((-553), spreadColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
      assertEquals((-553), spreadColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("}^,>-=k,", 1378, 1378, linkedList0);
      int int0 = spreadColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(0, int0);
      assertEquals(1378, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(1378, spreadColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      SpreadColumnAnalizeResult spreadColumnAnalizeResult0 = new SpreadColumnAnalizeResult("51e:kc[!vBAC", 0, 0, linkedList0);
      spreadColumnAnalizeResult0.getColumnType();
      assertEquals(0, spreadColumnAnalizeResult0.getNullCount());
      assertEquals(0, spreadColumnAnalizeResult0.getColumnSize());
  }
}
