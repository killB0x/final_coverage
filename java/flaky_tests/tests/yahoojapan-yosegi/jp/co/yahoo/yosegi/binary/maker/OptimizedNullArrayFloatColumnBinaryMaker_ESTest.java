/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:10:48 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.design.FieldType;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.BytesStringObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.parser.json.JacksonNullParser;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptimizedNullArrayFloatColumnBinaryMaker_ESTest extends OptimizedNullArrayFloatColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-64);
      BytesStringObj bytesStringObj0 = new BytesStringObj(byteArray0, "+k");
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(bytesStringObj0, "WW<.Fr.,t", 1427);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, (byte)1);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4, 4, (-1756), (-5766)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      DoubleObj doubleObj0 = new DoubleObj(0.0);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(doubleObj0, "", 8);
      optimizedNullArrayFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-6192));
      assertEquals(8, columnBinary0.binaryLength);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.EMPTY_SPREAD;
      byte[] byteArray0 = new byte[5];
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, "3U\"3wd8^^)`WD8.4:", (String) null, columnType0, 3502, 3062, 3062, 3062, byteArray0, 1898, 8, stack0);
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      JacksonNullParser jacksonNullParser0 = new JacksonNullParser();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, jacksonNullParser0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker");
      IColumn iColumn0 = arrayColumn0.getChildColumn();
      ColumnBinary columnBinary1 = dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      columnBinary1.setRepetitions((int[]) null, 949);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3062);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn((ColumnType) null).when(iArrowPrimitiveConnector0).getColumnType();
      doReturn(0, 0, 0, 0, 0).when(iArrowPrimitiveConnector0).size();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinary columnBinary0 = optimizedNullArrayFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
      assertEquals(0, columnBinary0.loadSize);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", (-1755), true, (-1755), (-1755), (-3143), 0, (-1755), (-3143), 14, (-313), 0, 0, (-313), 0, 17, "eALSdArO5%C", "eALSdArO5%C", (-313), (-1755), 0);
      int int0 = optimizedNullArrayFloatColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-26577), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.LONG;
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("X2l4D)8x>7&SOxplx", "X2l4D)8x>7&SOxplx", "X2l4D)8x>7&SOxplx", columnType0, 1798, 1798, 1798, 1798, (byte[]) null, 1798, 1798, linkedList0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-903));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -903
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, FieldType> iCell0 = (ICell<Object, FieldType>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, (ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(3075, 3075, 1944, (-5766), 3075).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      ColumnType columnType0 = ColumnType.ARRAY;
      byte[] byteArray0 = new byte[5];
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("O&~H!V+-EQb~mh68FHX", "O&~H!V+-EQb~mh68FHX", "O&~H!V+-EQb~mh68FHX", columnType0, 0, 0, 0, (-914), byteArray0, (byte) (-52), (-1097), arrayList0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 2208);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.BYTES;
      ColumnBinary columnBinary0 = new ColumnBinary("*]#{1.", "jp.co.yahoo.yosegi.spread.column.ArrowDoubleConnector", "jp.co.yahoo.yosegi.spread.column.ArrowDoubleConnector", columnType0, 4389, 4389, 4389, 8, (byte[]) null, 8, 3047, linkedList0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 4389);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", 8, vector0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3073);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("jp.co.yahoo.yosegi.compressor.DefaultCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.LONG;
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("X2l4D)8x>7&SOxplx", "X2l4D)8x>7&SOxplx", "X2l4D)8x>7&SOxplx", columnType0, 1813, 1813, 1813, 1813, (byte[]) null, 1813, 1813, linkedList0);
      LoadType loadType0 = LoadType.SEQUENTIAL;
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$1994086425 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$1994086425 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6bf40eb3)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("*]#{1.", "*]#{1.", "*]#{1.", columnType0, 4389, 4389, 4389, 4389, (byte[]) null, 4389, 4389, linkedList0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 4389);
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary1 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", 3057, stack0);
      columnBinary1.binaryLength = 3067;
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.EMPTY_SPREAD;
      byte[] byteArray0 = new byte[5];
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, "3U\"3wd8^^)`WD8.4:", (String) null, columnType0, 3502, 3062, 3062, 3062, byteArray0, 1898, 8, stack0);
      columnBinary0.setRepetitions((int[]) null, 949);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3062);
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.ClassNotFoundException: Class '3U\"3wd8^^)`WD8/4:.class' should be in target project, but could not be found!
         //
         verifyException("jp.co.yahoo.yosegi.util.FindClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj((byte)92);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, (String) null, (byte)92);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 1);
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiConstLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      byte[] byteArray0 = new byte[9];
      BytesStringObj bytesStringObj0 = new BytesStringObj(byteArray0, "hSjSB38!Z@p2c+");
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(bytesStringObj0, "WW<.Fr.,t", 3063);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, (byte)0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      BytesStringObj bytesStringObj0 = new BytesStringObj(byteArray0, "hSjSB38!Z@p2c+");
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(bytesStringObj0, "WW<.Fr.,t", 3063);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, (byte)1);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<BooleanCell, Object> iCell1 = (ICell<BooleanCell, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null).when(iCell1).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, iCell1, (ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(2208, 2208, 2208, 2208, 2208).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode((String) null, columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IColumn iColumn0 = NullColumn.getInstance();
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, FieldType> iCell0 = (ICell<Object, FieldType>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<Object, Object> iCell1 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell1).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, iCell1, (ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(3075, 3075, 3075, (-5766), 3075).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayFloatColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("Z3U(34|(T%^'rr0 t", 2889, vector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayFloatColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, columnBinary0, 2889);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.STRUCT;
      byte[] byteArray0 = new byte[0];
      ColumnBinary columnBinary0 = new ColumnBinary("~Tu'&@#hbL 61", "~Tu'&@#hbL 61", "FxYq{$YuBG", columnType0, 17, (-2418), (-2418), 1561, byteArray0, (-2418), 1561, linkedList0);
      LoadType loadType0 = optimizedNullArrayFloatColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      assertEquals(LoadType.SEQUENTIAL, loadType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptimizedNullArrayFloatColumnBinaryMaker optimizedNullArrayFloatColumnBinaryMaker0 = new OptimizedNullArrayFloatColumnBinaryMaker();
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult((String) null, 460, true, 37, 2208, 2208, (byte)17, (byte)4, 1357, (-313));
      int int0 = optimizedNullArrayFloatColumnBinaryMaker0.calcBinarySize(byteColumnAnalizeResult0);
      assertEquals(13357, int0);
  }
}
