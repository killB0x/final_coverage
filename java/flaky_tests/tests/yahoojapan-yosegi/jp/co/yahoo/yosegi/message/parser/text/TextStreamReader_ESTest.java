/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:03:29 GMT 2022
 */

package jp.co.yahoo.yosegi.message.parser.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import jp.co.yahoo.yosegi.message.design.BooleanField;
import jp.co.yahoo.yosegi.message.design.DoubleField;
import jp.co.yahoo.yosegi.message.design.IField;
import jp.co.yahoo.yosegi.message.design.IntegerField;
import jp.co.yahoo.yosegi.message.design.Properties;
import jp.co.yahoo.yosegi.message.parser.IParser;
import jp.co.yahoo.yosegi.message.parser.text.TextStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextStreamReader_ESTest extends TextStreamReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IntegerField integerField0 = new IntegerField("");
      TextStreamReader textStreamReader0 = new TextStreamReader(pipedInputStream0, integerField0);
      try { 
        textStreamReader0.next();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BooleanField booleanField0 = new BooleanField("");
      TextStreamReader textStreamReader0 = new TextStreamReader(pipedInputStream0, booleanField0);
      try { 
        textStreamReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TextStreamReader textStreamReader0 = null;
      try {
        textStreamReader0 = new TextStreamReader((InputStream) null, (IField) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // InputStream is null
         //
         verifyException("jp.co.yahoo.yosegi.util.ByteLineReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 166, 0);
      TextStreamReader textStreamReader0 = new TextStreamReader(byteArrayInputStream0, (IField) null);
      IParser iParser0 = textStreamReader0.next();
      assertFalse(iParser0.isArray());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 166, 0);
      TextStreamReader textStreamReader0 = new TextStreamReader(byteArrayInputStream0, (IField) null);
      boolean boolean0 = textStreamReader0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Properties properties0 = new Properties();
      DoubleField doubleField0 = new DoubleField("STRING", properties0);
      TextStreamReader textStreamReader0 = new TextStreamReader(pipedInputStream0, doubleField0);
      textStreamReader0.close();
  }
}
