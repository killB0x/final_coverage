/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:27:08 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.LinkedList;
import java.util.Stack;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpLongColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiDictionaryLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSpreadLoader;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.IntegerObj;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.spread.analyzer.ArrayColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RleStringColumnBinaryMaker_ESTest extends RleStringColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.MAP;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayDumpLongColumnBinaryMaker.createConstObjectFromNum(columnType0, (-1338L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(primitiveObject0, "315", 1361);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.MAP;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayDumpLongColumnBinaryMaker.createConstObjectFromNum(columnType0, (-27L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(primitiveObject0, "315", 20);
      YosegiDictionaryLoader yosegiDictionaryLoader0 = new YosegiDictionaryLoader(columnBinary0, 1);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, yosegiDictionaryLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongObj longObj0 = new LongObj(3546L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, (String) null, 290);
      YosegiDictionaryLoader yosegiDictionaryLoader0 = new YosegiDictionaryLoader(columnBinary0, 290);
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, yosegiDictionaryLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition > limit: (3554 > 8)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("W5TYj7K,\"\"L\"O", 0, true, (-1722), (-3351), 3083, 4, 1722, 1465, 17, (-1), (-1), (-1229), 0, (-4995), 17, "jp.co.yahoo.yosegi.inmemory.ArrowSequentialIntegerLoader", "Loader type is not DICTIONARY.", 0, 1722, 1722);
      int int0 = rleStringColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-5113), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayDumpLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 0L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(primitiveObject0, "nt(m]l(v0[", 336);
      rleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 1);
      assertEquals(336, columnBinary0.rowCount);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 37, true, 17, 37, 2838, (-923), 2329, (-923), 21, (-429), (-420), 16, 16, 16, 16, "", "KMoIjT&a0ml~}r}", 2378, 679, 17);
      int int0 = rleStringColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-4424), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      IntegerObj integerObj0 = new IntegerObj(347);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(integerObj0, "+hVe3_u83", 347);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 2407815);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.compressor.DefaultCompressor", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      IntegerObj integerObj0 = new IntegerObj(373);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(integerObj0, "9", 373);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 373);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      yosegiSequentialLoader0.setBytes(1, columnBinary0.binary, 373, 1);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("9", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-709L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "}qPV=", 1067);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-164));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -164
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker", columnBinaryMakerConfig0);
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(625, 0, 0, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, (-2177));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "Loader type is not DICTIONARY.", (-1423));
      columnBinary0.binaryLength = (-895);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-895));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayDumpLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 1L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(primitiveObject0, "nt(m]l(v0[", 740);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-2707));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition > limit: (9 > 8)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "PeE<ku6", 133);
      columnBinary0.binaryLength = 133;
      YosegiDictionaryLoader yosegiDictionaryLoader0 = new YosegiDictionaryLoader(columnBinary0, 0);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, yosegiDictionaryLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LoadType loadType0 = LoadType.DICTIONARY;
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("iu8;", 3208, stack0);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$820422412 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IDictionaryLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$820422412 and jp.co.yahoo.yosegi.inmemory.IDictionaryLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @16d61c29)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      LinkedList<IColumnAnalizeResult> linkedList0 = new LinkedList<IColumnAnalizeResult>();
      ArrayColumnAnalizeResult arrayColumnAnalizeResult0 = new ArrayColumnAnalizeResult("N53v$o:U.TrL6JVa)6<", 303, 303, linkedList0);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.calcBinarySize(arrayColumnAnalizeResult0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.analyzer.ArrayColumnAnalizeResult cannot be cast to class jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult (jp.co.yahoo.yosegi.spread.analyzer.ArrayColumnAnalizeResult and jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @16d61c29)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      IntegerObj integerObj0 = new IntegerObj(0);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(integerObj0, "8?dr!ShlDj)", 0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not DICTIONARY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-1338L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "theUnsafe", 1888);
      columnBinary0.setRepetitions((int[]) null, 15104);
      YosegiDictionaryLoader yosegiDictionaryLoader0 = new YosegiDictionaryLoader(columnBinary0, 15104);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, yosegiDictionaryLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, (-2026), false, 1, 1, 1, 3954, 1, 3954, 3954, (-2026), 1, 2205, (-2026), 2205, (-2026), (String) null, "\u0000\u0000\u0001m", 33, 1, 806);
      int int0 = rleStringColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals(1014, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      IntegerObj integerObj0 = new IntegerObj(355);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(integerObj0, ":", 355);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 355);
      yosegiSequentialLoader0.setBytes(4, columnBinary0.binary);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      yosegiSequentialLoader0.setInteger(1, 0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(":", columnBinaryMakerConfig0);
      yosegiSequentialLoader0.setByte(254, (byte) (-23));
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      IntegerObj integerObj0 = new IntegerObj(355);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(integerObj0, "", 355);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 355);
      yosegiSequentialLoader0.setBytes(4, columnBinary0.binary);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      IntegerObj integerObj0 = new IntegerObj(8);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(integerObj0, "+hVe3_$&u83", 8);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 4);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      SpreadColumn spreadColumn0 = new SpreadColumn("lZEN\"!");
      ColumnBinary columnBinary0 = rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, spreadColumn0);
      assertEquals(0, columnBinary0.binaryStart);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-714L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "\u0000\u0000\u0001c", 904);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      YosegiSpreadLoader yosegiSpreadLoader0 = new YosegiSpreadLoader(columnBinary0, 483);
      yosegiSpreadLoader0.finish();
      IColumn iColumn0 = yosegiSpreadLoader0.build();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      LoadType loadType0 = rleStringColumnBinaryMaker0.getLoadType((ColumnBinary) null, 3226);
      assertEquals(LoadType.DICTIONARY, loadType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-1338L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "theUnsafe", 1888);
      YosegiDictionaryLoader yosegiDictionaryLoader0 = new YosegiDictionaryLoader(columnBinary0, 15104);
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.load(columnBinary0, yosegiDictionaryLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "Loader type is not DICTIONARY.", (-1423));
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        rleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-895));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
