/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:46:29 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.spread.column.filter.RangeStringCompareFilter;
import jp.co.yahoo.yosegi.spread.expression.AndExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.ExecuterNode;
import jp.co.yahoo.yosegi.spread.expression.IExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.NotExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.OrExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.StringExtractNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrExpressionNode_ESTest extends OrExpressionNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      andExpressionNode0.addChildNode(orExpressionNode0);
      orExpressionNode0.addChildNode(andExpressionNode0);
      NotExpressionNode notExpressionNode0 = new NotExpressionNode(orExpressionNode0);
      orExpressionNode0.addChildNode(notExpressionNode0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        orExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      StringExtractNode stringExtractNode0 = new StringExtractNode("(%s)");
      StringExtractNode stringExtractNode1 = new StringExtractNode("(%s)", stringExtractNode0);
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("(%s)", false, "", false, false);
      ExecuterNode executerNode0 = new ExecuterNode(stringExtractNode1, rangeStringCompareFilter0);
      orExpressionNode0.addChildNode(executerNode0);
      BlockIndexNode blockIndexNode0 = null;
      // Undeclared exception!
      try { 
        orExpressionNode0.getBlockSpreadIndex((BlockIndexNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.expression.StringExtractNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      NotExpressionNode notExpressionNode0 = new NotExpressionNode(orExpressionNode0);
      orExpressionNode0.addChildNode(notExpressionNode0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      List<Integer> list0 = orExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      StringExtractNode stringExtractNode0 = new StringExtractNode("qQc!M:[eW!Qw$dq");
      OrExpressionNode orExpressionNode1 = new OrExpressionNode();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      blockIndexNode0.clear();
      orExpressionNode1.getBlockSpreadIndex(blockIndexNode0);
      orExpressionNode0.addChildNode(orExpressionNode1);
      BlockIndexNode blockIndexNode1 = new BlockIndexNode();
      blockIndexNode1.putChildNode("qQc!M:[eW!Qw$dq", (BlockIndexNode) null);
      blockIndexNode1.getChildNode("qQc!M:[eW!Qw$dq");
      stringExtractNode0.get(blockIndexNode1);
      orExpressionNode0.getBlockSpreadIndex((BlockIndexNode) null);
      orExpressionNode0.addChildNode((IExpressionNode) null);
      String string0 = "4]P";
      StringExtractNode stringExtractNode1 = new StringExtractNode("4]P");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        BlockIndexNode.createFromBinary(byteArray0, (byte)56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      orExpressionNode0.addChildNode((IExpressionNode) null);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      List<Integer> list0 = orExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      orExpressionNode0.addChildNode(orExpressionNode0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      orExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      List<Integer> list0 = orExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      BlockIndexNode blockIndexNode0 = BlockIndexNode.createFromBinary(byteArray0, 0);
      List<Integer> list0 = orExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OrExpressionNode orExpressionNode0 = new OrExpressionNode();
      NotExpressionNode notExpressionNode0 = new NotExpressionNode(orExpressionNode0);
      orExpressionNode0.addChildNode(notExpressionNode0);
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      orExpressionNode0.addChildNode(andExpressionNode0);
  }
}
