/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:17:39 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.blockindex.IBlockIndex;
import jp.co.yahoo.yosegi.blockindex.ShortRangeBlockIndex;
import jp.co.yahoo.yosegi.spread.Spread;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.filter.GeStringCompareFilter;
import jp.co.yahoo.yosegi.spread.expression.AndExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.ExecuterNode;
import jp.co.yahoo.yosegi.spread.expression.IExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.NotExpressionNode;
import jp.co.yahoo.yosegi.spread.expression.StringExtractNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndExpressionNode_ESTest extends AndExpressionNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      AndExpressionNode andExpressionNode1 = new AndExpressionNode();
      andExpressionNode1.addChildNode(andExpressionNode0);
      StringExtractNode stringExtractNode0 = new StringExtractNode("");
      StringExtractNode stringExtractNode1 = new StringExtractNode("", stringExtractNode0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      stringExtractNode0.pushChild(stringExtractNode1);
      andExpressionNode0.addChildNode(andExpressionNode1);
      BlockIndexNode blockIndexNode1 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        andExpressionNode1.getBlockSpreadIndex(blockIndexNode0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      AndExpressionNode andExpressionNode1 = new AndExpressionNode();
      andExpressionNode1.addChildNode((IExpressionNode) null);
      assertNotSame(andExpressionNode1, andExpressionNode0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      NotExpressionNode notExpressionNode0 = new NotExpressionNode(andExpressionNode0);
      andExpressionNode0.addChildNode(notExpressionNode0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Integer> list0 = andExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      List<Integer> list0 = andExpressionNode0.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      AndExpressionNode andExpressionNode1 = new AndExpressionNode();
      andExpressionNode0.addChildNode(andExpressionNode1);
      assertNotSame(andExpressionNode1, andExpressionNode0);
      
      AndExpressionNode andExpressionNode2 = new AndExpressionNode();
      AndExpressionNode andExpressionNode3 = new AndExpressionNode();
      andExpressionNode2.addChildNode(andExpressionNode3);
      andExpressionNode0.addChildNode(andExpressionNode2);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      andExpressionNode1.getBlockSpreadIndex(blockIndexNode0);
      NotExpressionNode notExpressionNode0 = new NotExpressionNode(andExpressionNode1);
      andExpressionNode0.addChildNode(notExpressionNode0);
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      IBlockIndex iBlockIndex0 = shortRangeBlockIndex0.clone();
      blockIndexNode0.setBlockIndex(iBlockIndex0);
      andExpressionNode1.addChildNode(andExpressionNode3);
      List<Integer> list0 = andExpressionNode1.getBlockSpreadIndex(blockIndexNode0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      StringExtractNode stringExtractNode0 = new StringExtractNode((String) null);
      Spread spread0 = new Spread((IColumn) null);
      spread0.setRowCount((-2697));
      stringExtractNode0.get(spread0);
      GeStringCompareFilter geStringCompareFilter0 = new GeStringCompareFilter("8jG'qQ8");
      ExecuterNode executerNode0 = new ExecuterNode(stringExtractNode0, geStringCompareFilter0);
      andExpressionNode0.addChildNode(executerNode0);
      andExpressionNode0.addChildNode((IExpressionNode) null);
      StringExtractNode stringExtractNode1 = new StringExtractNode("R!RY\"5c");
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      BlockIndexNode blockIndexNode1 = stringExtractNode1.get(blockIndexNode0);
      andExpressionNode0.getBlockSpreadIndex(blockIndexNode1);
      andExpressionNode0.addChildNode((IExpressionNode) null);
      stringExtractNode0.pushChild(stringExtractNode1);
      andExpressionNode0.addChildNode((IExpressionNode) null);
      stringExtractNode1.pushChild(stringExtractNode0);
      andExpressionNode0.addChildNode((IExpressionNode) null);
      // Undeclared exception!
      try { 
        stringExtractNode0.get(blockIndexNode1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      NotExpressionNode notExpressionNode0 = new NotExpressionNode(andExpressionNode0);
      notExpressionNode0.addChildNode(andExpressionNode0);
      andExpressionNode0.addChildNode(notExpressionNode0);
      notExpressionNode0.addChildNode(andExpressionNode0);
      andExpressionNode0.addChildNode(notExpressionNode0);
      String string0 = null;
      StringExtractNode stringExtractNode0 = new StringExtractNode("");
      StringExtractNode stringExtractNode1 = new StringExtractNode((String) null, stringExtractNode0);
      String string1 = "";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-46);
      byteArray0[8] = (byte)44;
      // Undeclared exception!
      try { 
        BlockIndexNode.createFromBinary(byteArray0, (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AndExpressionNode andExpressionNode0 = new AndExpressionNode();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        BlockIndexNode.createFromBinary(byteArray0, (byte)16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
