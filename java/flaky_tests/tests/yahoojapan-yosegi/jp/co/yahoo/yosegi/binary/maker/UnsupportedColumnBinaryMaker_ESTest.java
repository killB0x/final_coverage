/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:49:43 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.UnsupportedColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnsupportedColumnBinaryMaker_ESTest extends UnsupportedColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnBinary columnBinary0 = unsupportedColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      ILoader<Object> iLoader0 = (ILoader<Object>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLoader0).getLoadSize();
      unsupportedColumnBinaryMaker0.load(columnBinary0, iLoader0);
      assertEquals((-1), columnBinary0.cardinality);
      assertEquals(0, columnBinary0.binaryLength);
      assertEquals(0, columnBinary0.binaryStart);
      assertEquals(0, columnBinary0.rawDataSize);
      assertEquals(0, columnBinary0.logicalDataSize);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      OptimizedNullArrayStringColumnBinaryMaker optimizedNullArrayStringColumnBinaryMaker0 = new OptimizedNullArrayStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      SpreadColumn spreadColumn0 = new SpreadColumn("");
      IColumn iColumn0 = spreadColumn0.getColumn("");
      ColumnBinary columnBinary0 = optimizedNullArrayStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      unsupportedColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(0, columnBinary0.rawDataSize);
      assertEquals(0, columnBinary0.binaryLength);
      assertEquals((-1), columnBinary0.cardinality);
      assertEquals(0, columnBinary0.binaryStart);
      assertEquals(0, columnBinary0.logicalDataSize);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        unsupportedColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, (IColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.UnsupportedColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      ILoader<Object> iLoader0 = (ILoader<Object>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(704354501, 0).when(iLoader0).getLoadSize();
      unsupportedColumnBinaryMaker0.load((ColumnBinary) null, iLoader0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.LONG;
      byte[] byteArray0 = new byte[3];
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("", "", "", columnType0, 1135, 11, 11, 1135, byteArray0, (byte) (-91), 12, arrayList0);
      // Undeclared exception!
      try { 
        unsupportedColumnBinaryMaker0.load(columnBinary0, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.UnsupportedColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      int int0 = unsupportedColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      // Undeclared exception!
      try { 
        unsupportedColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, (ColumnBinary) null, 93090393);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.UnsupportedColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      LoadType loadType0 = unsupportedColumnBinaryMaker0.getLoadType((ColumnBinary) null, 1439);
      assertEquals(LoadType.NULL, loadType0);
  }
}
