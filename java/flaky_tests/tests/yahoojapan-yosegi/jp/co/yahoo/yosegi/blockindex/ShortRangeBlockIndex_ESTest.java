/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:19:41 GMT 2022
 */

package jp.co.yahoo.yosegi.blockindex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.List;
import jp.co.yahoo.yosegi.blockindex.IBlockIndex;
import jp.co.yahoo.yosegi.blockindex.ShortRangeBlockIndex;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.BytesStringObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.FloatObj;
import jp.co.yahoo.yosegi.message.objects.IntegerObj;
import jp.co.yahoo.yosegi.message.objects.ShortObj;
import jp.co.yahoo.yosegi.message.objects.StringObj;
import jp.co.yahoo.yosegi.message.objects.Utf8BytesLinkObj;
import jp.co.yahoo.yosegi.spread.column.filter.IFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilterType;
import jp.co.yahoo.yosegi.spread.column.filter.NumberRangeFilter;
import jp.co.yahoo.yosegi.spread.column.filter.RangeStringCompareFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortRangeBlockIndex_ESTest extends ShortRangeBlockIndex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      FloatObj floatObj0 = new FloatObj((-2472.0F));
      byte[] byteArray0 = new byte[9];
      shortRangeBlockIndex0.setFromBinary(byteArray0, (-1182), (byte)102);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, floatObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-1469), (short) (-1469));
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short) (-1469), shortRangeBlockIndex0.getMin());
      assertEquals((short) (-1469), shortRangeBlockIndex0.getMax());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortObj shortObj0 = new ShortObj((short)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)77;
      shortRangeBlockIndex0.setFromBinary(byteArray0, (byte)77, (byte)77);
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      byte[] byteArray0 = shortRangeBlockIndex0.toBinary();
      BytesStringObj bytesStringObj0 = new BytesStringObj(byteArray0, "A]9Xe");
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, bytesStringObj0, true, bytesStringObj0, true);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(4, shortRangeBlockIndex0.getBinarySize());
      assertArrayEquals(new byte[] {(byte)127, (byte) (-1), (byte) (-128), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      StringObj stringObj0 = new StringObj("'");
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, stringObj0);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      short short0 = shortRangeBlockIndex0.getMin();
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-388), (short) (-388));
      short short0 = shortRangeBlockIndex0.getMin();
      assertEquals((short) (-388), short0);
      assertEquals((short) (-388), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      short short0 = shortRangeBlockIndex0.getMax();
      assertEquals((short)0, short0);
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)5, (short)5);
      short short0 = shortRangeBlockIndex0.getMax();
      assertEquals((short)5, shortRangeBlockIndex0.getMin());
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        shortRangeBlockIndex0.setFromBinary(byteArray0, (-697), (-697));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      // Undeclared exception!
      try { 
        shortRangeBlockIndex0.setFromBinary((byte[]) null, 2849, 2849);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      byte[] byteArray0 = new byte[0];
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, 1529, 1529);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, utf8BytesLinkObj0);
      // Undeclared exception!
      try { 
        shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      // Undeclared exception!
      try { 
        shortRangeBlockIndex0.getBlockSpreadIndex((IFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.blockindex.ShortRangeBlockIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      short short0 = shortRangeBlockIndex0.getMax();
      assertEquals((short) (-32768), short0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      int int0 = shortRangeBlockIndex0.getBinarySize();
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      short short0 = shortRangeBlockIndex0.getMin();
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)771, (short)1544);
      IntegerObj integerObj0 = new IntegerObj(1315);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(integerObj0, false, integerObj0, false);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short)1544, shortRangeBlockIndex0.getMax());
      assertEquals((short)771, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-634), (short) (-3253));
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, false, booleanObj0, false);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-634), shortRangeBlockIndex0.getMin());
      assertEquals((short) (-3253), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-1802), (short)32767);
      DoubleObj doubleObj0 = new DoubleObj(4.9E-324);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(doubleObj0, false, doubleObj0, true);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-1802), shortRangeBlockIndex0.getMin());
      assertEquals((short)32767, shortRangeBlockIndex0.getMax());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-128), (short) (-128));
      ShortObj shortObj0 = new ShortObj((short) (-128));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(shortObj0, false, shortObj0, true);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-128), shortRangeBlockIndex0.getMin());
      assertEquals((short) (-128), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, byteObj0, false, byteObj0, true);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-1862), (short) (-1862));
      DoubleObj doubleObj0 = new DoubleObj(4.9E-324);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(doubleObj0, true, doubleObj0, false);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-1862), shortRangeBlockIndex0.getMax());
      assertEquals((short) (-1862), shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-1802), (short)32767);
      DoubleObj doubleObj0 = new DoubleObj((short)32767);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(doubleObj0, true, doubleObj0, false);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-1802), shortRangeBlockIndex0.getMin());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-133), (short) (-909));
      FloatObj floatObj0 = new FloatObj((short) (-133));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(floatObj0, true, floatObj0, true);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-909), shortRangeBlockIndex0.getMax());
      assertEquals((short) (-133), shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-128), (short) (-128));
      ShortObj shortObj0 = new ShortObj((short) (-128));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(shortObj0, true, shortObj0, true);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertNull(list0);
      assertEquals((short) (-128), shortRangeBlockIndex0.getMax());
      assertEquals((short) (-128), shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, true);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, byteObj0, false, byteObj0, false);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, byteObj0, true, byteObj0, true);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)1602, (short)5);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)5, shortRangeBlockIndex0.getMax());
      assertNull(list0);
      assertEquals((short)1602, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)5, (short)5);
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      ShortObj shortObj0 = new ShortObj((short)2464);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals((short)5, shortRangeBlockIndex0.getMax());
      assertEquals((short)5, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short) (-1763), (short) (-1763));
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short) (-1763), shortRangeBlockIndex0.getMax());
      assertEquals((short) (-1763), shortRangeBlockIndex0.getMin());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.NOT_EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertNotNull(list0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertNotNull(list0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertNotNull(list0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("gRi&y:*", true, "y^x,K/76))&W -{", true);
      shortRangeBlockIndex0.getBlockSpreadIndex(rangeStringCompareFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, false);
      shortRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = shortRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      ShortRangeBlockIndex shortRangeBlockIndex1 = new ShortRangeBlockIndex((short)2571, (short)2571);
      boolean boolean0 = shortRangeBlockIndex0.merge(shortRangeBlockIndex1);
      assertEquals((short)2571, shortRangeBlockIndex0.getMax());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      boolean boolean0 = shortRangeBlockIndex0.merge((IBlockIndex) null);
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      shortRangeBlockIndex0.getBlockIndexType();
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortRangeBlockIndex shortRangeBlockIndex1 = (ShortRangeBlockIndex)shortRangeBlockIndex0.clone();
      assertEquals((short)0, shortRangeBlockIndex1.getMin());
      assertEquals((short)0, shortRangeBlockIndex1.getMax());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex((short)0, (short)0);
      ShortRangeBlockIndex shortRangeBlockIndex1 = (ShortRangeBlockIndex)shortRangeBlockIndex0.getNewInstance();
      boolean boolean0 = shortRangeBlockIndex0.merge(shortRangeBlockIndex1);
      assertEquals((short) (-32768), shortRangeBlockIndex1.getMax());
      assertEquals((short)32767, shortRangeBlockIndex1.getMin());
      assertEquals((short)0, shortRangeBlockIndex0.getMax());
      assertTrue(boolean0);
      assertEquals((short)0, shortRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ShortRangeBlockIndex shortRangeBlockIndex0 = new ShortRangeBlockIndex();
      boolean boolean0 = shortRangeBlockIndex0.merge(shortRangeBlockIndex0);
      assertEquals((short) (-32768), shortRangeBlockIndex0.getMax());
      assertEquals((short)32767, shortRangeBlockIndex0.getMin());
      assertTrue(boolean0);
  }
}
