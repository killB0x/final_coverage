/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:27:04 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizer;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleColumnAnalizer_ESTest extends DoubleColumnAnalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "yJ2N-Y-(k");
      ICell<ArrowPrimitiveColumn, Object> iCell0 = (ICell<ArrowPrimitiveColumn, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iCell0).getRow();
      primitiveColumn0.addCell(columnType0, iCell0, 561);
      DoubleColumnAnalizer doubleColumnAnalizer0 = new DoubleColumnAnalizer(primitiveColumn0);
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = (DoubleColumnAnalizeResult)doubleColumnAnalizer0.analize();
      assertEquals(562, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(4.9E-324, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(1.7976931348623157E308, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "jp.co.yahoo.yosegi.message.design.ByteField");
      DoubleColumnAnalizer doubleColumnAnalizer0 = new DoubleColumnAnalizer(primitiveColumn0);
      ICell<Object, BooleanCell> iCell0 = (ICell<Object, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((BooleanCell) null).when(iCell0).getRow();
      primitiveColumn0.addCell(columnType0, iCell0, 1958052170);
      // Undeclared exception!
      doubleColumnAnalizer0.analize();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleColumnAnalizer doubleColumnAnalizer0 = new DoubleColumnAnalizer((IColumn) null);
      // Undeclared exception!
      try { 
        doubleColumnAnalizer0.analize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "ZGlVjje");
      ICell<ArrowPrimitiveColumn, ArrowPrimitiveColumn> iCell0 = (ICell<ArrowPrimitiveColumn, ArrowPrimitiveColumn>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iCell0).getRow();
      primitiveColumn0.addCell(columnType0, iCell0, 0);
      DoubleColumnAnalizer doubleColumnAnalizer0 = new DoubleColumnAnalizer(primitiveColumn0);
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = (DoubleColumnAnalizeResult)doubleColumnAnalizer0.analize();
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(1.7976931348623157E308, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(1, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(4.9E-324, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "ZGlVjje");
      DoubleColumnAnalizer doubleColumnAnalizer0 = new DoubleColumnAnalizer(primitiveColumn0);
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = (DoubleColumnAnalizeResult)doubleColumnAnalizer0.analize();
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(1.7976931348623157E308, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(4.9E-324, doubleColumnAnalizeResult0.getMax(), 0.01);
  }
}
