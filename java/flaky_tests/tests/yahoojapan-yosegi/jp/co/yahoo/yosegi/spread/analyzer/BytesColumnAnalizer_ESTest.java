/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:01:19 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizer;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesColumnAnalizer_ESTest extends BytesColumnAnalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<BooleanCell, Object> iCell0 = (ICell<BooleanCell, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(2858, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      BytesColumnAnalizer bytesColumnAnalizer0 = new BytesColumnAnalizer(arrowPrimitiveColumn0);
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = (BytesColumnAnalizeResult)bytesColumnAnalizer0.analize();
      assertEquals(1, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(Integer.MAX_VALUE, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      BytesColumnAnalizer bytesColumnAnalizer0 = new BytesColumnAnalizer(iColumn0);
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = (BytesColumnAnalizeResult)bytesColumnAnalizer0.analize();
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(Integer.MAX_VALUE, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("iAa1l f").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn((-2644), (-2644)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      BytesColumnAnalizer bytesColumnAnalizer0 = new BytesColumnAnalizer(arrowPrimitiveColumn0);
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = (BytesColumnAnalizeResult)bytesColumnAnalizer0.analize();
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(Integer.MAX_VALUE, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BytesColumnAnalizer bytesColumnAnalizer0 = new BytesColumnAnalizer((IColumn) null);
      // Undeclared exception!
      try { 
        bytesColumnAnalizer0.analize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(838).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      BytesColumnAnalizer bytesColumnAnalizer0 = new BytesColumnAnalizer(arrowPrimitiveColumn0);
      // Undeclared exception!
      try { 
        bytesColumnAnalizer0.analize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1331743620 cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1331743620 and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2eae67c8)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(1, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      BytesColumnAnalizer bytesColumnAnalizer0 = new BytesColumnAnalizer(arrowPrimitiveColumn0);
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = (BytesColumnAnalizeResult)bytesColumnAnalizer0.analize();
      assertEquals(1, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(Integer.MAX_VALUE, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
  }
}
