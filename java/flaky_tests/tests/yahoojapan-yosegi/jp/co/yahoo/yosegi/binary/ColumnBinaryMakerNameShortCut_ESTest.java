/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:11:35 GMT 2022
 */

package jp.co.yahoo.yosegi.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerNameShortCut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColumnBinaryMakerNameShortCut_ESTest extends ColumnBinaryMakerNameShortCut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getShortCutName((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getClassName((String) null);
      assertEquals("RD5", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getClassName("Loader type is not ARRAY.");
      assertEquals("Loader type is not ARRAY.", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getShortCutName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getClassName("ND5");
      assertEquals("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = ColumnBinaryMakerNameShortCut.getShortCutName("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker");
      assertEquals("RLE3", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnBinaryMakerNameShortCut.register("RD5", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // It is already registered. null
         //
         verifyException("jp.co.yahoo.yosegi.binary.ColumnBinaryMakerNameShortCut", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnBinaryMakerNameShortCut.register((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // It is already registered. 
         //
         verifyException("jp.co.yahoo.yosegi.binary.ColumnBinaryMakerNameShortCut", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnBinaryMakerNameShortCut.register((String) null, (String) null);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // It is already registered. null
         //
         verifyException("jp.co.yahoo.yosegi.binary.ColumnBinaryMakerNameShortCut", e);
      }
  }
}
