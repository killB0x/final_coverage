/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:15:22 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.List;
import java.util.Stack;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.CompressionPolicy;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSpreadLoader;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DictionaryRleStringColumnBinaryMaker_ESTest extends DictionaryRleStringColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 563, false, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, (-1), 563, "", "", 563, (-1), (-1));
      int int0 = dictionaryRleStringColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals(6256, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("trua", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.BYTES;
      byte[] byteArray0 = new byte[2];
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("trua", "trua", "trua", columnType0, 2002, 2002, 2002, 2002, byteArray0, (byte)0, 2002, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 2002);
      yosegiSequentialLoader0.setFloat(0, 2002);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ColumnBinary columnBinary1 = dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      assertEquals(10, columnBinary1.logicalDataSize);
      assertEquals(69, columnBinary1.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      LongObj longObj0 = new LongObj((-128L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "jp.co.yahoo.yosegi.message.design.BytesField", 1946);
      dictionaryRleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 8);
      assertEquals(0, columnBinary0.loadSize);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-128L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "jp.co.yahoo.yosegi.message.design.BytesField", 1946);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.compressor.DefaultCompressor", (ColumnBinaryMakerConfig) null);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 15568);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      // Undeclared exception!
      dictionaryRleStringColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj(17L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "Loader]typr i? not DICTIONAR<.", 3769);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 8);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setBytes(1, columnBinary0.binary, 1144, 1974);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Loader]typr i? not DICTIONAR<.", (ColumnBinaryMakerConfig) null);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj(661L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "Loaerypeis o DICTIOAR<.", 3760);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 8);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setBytes(0, columnBinary0.binary);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj(0L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "c0", 1946);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("808.1", (ColumnBinaryMakerConfig) null);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      YosegiSpreadLoader yosegiSpreadLoader0 = new YosegiSpreadLoader(columnBinary0, (-2513));
      yosegiSpreadLoader0.finish();
      IColumn iColumn0 = yosegiSpreadLoader0.build();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2513
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("*H}Yeqa=S];<}x", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.DOUBLE;
      byte[] byteArray0 = new byte[4];
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("*H}Yeqa=S];<}x", "*H}Yeqa=S];<}x", "*H}Yeqa=S];<}x", columnType0, 1927, 1927, 1927, 1927, byteArray0, (byte)0, 1927, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 1927);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      ICell<Object, CompressionPolicy> iCell0 = (ICell<Object, CompressionPolicy>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null, (ColumnType) null).when(iCell0).getType();
      iColumn0.setDefaultCell(iCell0);
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1778263162 cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1778263162 and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @ad20235)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, (-5095));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      LongObj longObj0 = new LongObj((-1832L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "qL]D^.", (-3116));
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-24928));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.BYTE;
      byte[] byteArray0 = new byte[8];
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("true", "true", "true", columnType0, 2004, 2004, 2004, 2004, byteArray0, (byte)0, 2004, stack0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj(1L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "Loader type is not DICTIONARY.", 3761);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 3761);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition > limit: (9 > 8)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      FloatColumnAnalizeResult floatColumnAnalizeResult0 = new FloatColumnAnalizeResult("9f?}#m/}j`@pM", 0, false, 0, (-1191), (-1191), 1259.9235F, 1259.9235F);
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.calcBinarySize(floatColumnAnalizeResult0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult cannot be cast to class jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult (jp.co.yahoo.yosegi.spread.analyzer.FloatColumnAnalizeResult and jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @ad20235)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("':wwWQkr", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnType columnType0 = ColumnType.BYTE;
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(columnType0);
      ColumnBinary columnBinary0 = dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      LoadType loadType0 = dictionaryRleStringColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      ColumnBinary columnBinary1 = dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      columnBinary1.isSetLoadSize = true;
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.load(columnBinary1, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$597178646 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IDictionaryLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$597178646 and jp.co.yahoo.yosegi.inmemory.IDictionaryLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @ad20235)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj(1L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "cUL#/JjjRUn", 3769);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 8);
      try { 
        dictionaryRleStringColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not DICTIONARY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2017, false, (-2728), 2017, 15, 3812, (-2826), (-2931), 2109, (-5286), 15, 0, 0, 10, (-2728), "x<@4vEfcc2Q}vw5LKPW", "x<@4vEfcc2Q}vw5LKPW", 15, (-461), (-4804));
      int int0 = dictionaryRleStringColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals(467, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 78875740, true, 0, 0, (-334), (-1), (-2276), 0, 3276, 283251879, (-922), (-2974), (-2127), 0, 0, "*t", "", 0, (-920), 0);
      int int0 = dictionaryRleStringColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-861), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj((-2991L));
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "Loaeryphisko.DICTIOR<.", 756);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 8);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      yosegiSequentialLoader0.setBytes(0, columnBinary0.binary);
      yosegiSequentialLoader0.setBytes(4, columnBinary0.binary);
      yosegiSequentialLoader0.setShort(1, (short)2889);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.compressor.DefaultCompressor", (ColumnBinaryMakerConfig) null);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.toBinary((ColumnBinaryMakerConfig) null, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      LongObj longObj0 = new LongObj(661L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "Loaerypeis o DICTIOAR<.", 3760);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 8);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("':wwWQkr", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnType columnType0 = ColumnType.BYTE;
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(columnType0);
      ColumnBinary columnBinary0 = dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      LoadType loadType0 = dictionaryRleStringColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$597178646 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IDictionaryLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$597178646 and jp.co.yahoo.yosegi.inmemory.IDictionaryLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @ad20235)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("B [hY?9GkxMM`%]J{", 776, (List<ColumnBinary>) null);
      // Undeclared exception!
      try { 
        dictionaryRleStringColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, (-1));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
