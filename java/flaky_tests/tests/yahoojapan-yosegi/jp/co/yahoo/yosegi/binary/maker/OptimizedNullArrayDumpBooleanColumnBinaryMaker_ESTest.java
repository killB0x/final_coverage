/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:45:24 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.spread.analyzer.ArrayColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.UnionColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptimizedNullArrayDumpBooleanColumnBinaryMaker_ESTest extends OptimizedNullArrayDumpBooleanColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ColumnType columnType1 = ColumnType.LONG;
      ICell<Object, BooleanCell> iCell0 = (ICell<Object, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<BooleanCell, BooleanCell> iCell1 = (ICell<BooleanCell, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((ColumnType) null).when(iCell1).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, iCell1).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(1053, 1053, 1053, 4314, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(2606, 2606, (-2345), (-1387)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(0, 0, 0, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      ColumnBinary columnBinary0 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
      assertFalse(columnBinary0.isSetLoadSize);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ArrayList<IColumnAnalizeResult> arrayList0 = new ArrayList<IColumnAnalizeResult>();
      ArrayColumnAnalizeResult arrayColumnAnalizeResult0 = new ArrayColumnAnalizeResult("oc_", 0, 0, arrayList0);
      int int0 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize(arrayColumnAnalizeResult0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      Stack<IColumnAnalizeResult> stack0 = new Stack<IColumnAnalizeResult>();
      UnionColumnAnalizeResult unionColumnAnalizeResult0 = new UnionColumnAnalizeResult("Repetition must be equal to or greater than 0.", 198, 37, stack0);
      int int0 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize(unionColumnAnalizeResult0);
      assertEquals(198, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ByteObj byteObj0 = new ByteObj((byte)29);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "<JV<Q#`hB8(C", (-3300));
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (byte)29);
      yosegiConstLoader0.setConstFromBytes(columnBinary0.binary, (-3300), (-3300));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "Rs:A", 0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-601));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, (CompressResultNode) null, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -601
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, (-4058));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "jp.co.yahoo.yosegi.spread.column.ShortCell", (-29));
      columnBinary0.isSetLoadSize = true;
      LoadType loadType0 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.getLoadType(columnBinary0, 1);
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$2097476901 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$2097476901 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @521513d1)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "Rs:A", 0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 1);
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.load(columnBinary0, yosegiConstLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ByteObj byteObj0 = new ByteObj();
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(byteObj0, "jp.co.yahoo.yosegi.spread.column.ShortCell", (-29));
      LoadType loadType0 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.getLoadType(columnBinary0, 1);
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$2097476901 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$2097476901 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @521513d1)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.SHORT;
      byte[] byteArray0 = new byte[7];
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("<5/)1g,", "<5/)1g,", "CA`.R", columnType0, 1596, 1699, 1, 1, byteArray0, 569, (byte)55, vector0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 1);
      yosegiConstLoader0.setConstFromByte((byte) (-67));
      IColumn iColumn0 = yosegiConstLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("CA`.R", columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, (CompressResultNode) null, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.SHORT;
      byte[] byteArray0 = new byte[7];
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("<5/)1g,", "<5/)1g,", "CA`.R", columnType0, 1596, 1699, 1, 1, byteArray0, 569, (byte)55, vector0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 569);
      yosegiConstLoader0.setConstFromByte((byte)0);
      IColumn iColumn0 = yosegiConstLoader0.build();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult", columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, (CompressResultNode) null, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBooleanColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, BooleanCell> iCell0 = (ICell<Object, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(1053, 1053, (-601), 4314, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      // Undeclared exception!
      try { 
        optimizedNullArrayDumpBooleanColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("n_N.&MJ=gi[", (-2407), false, (-2407), (-2407), (-2407), (-2407), (-2407), 782, 1624, 8, 0, 1, 231, 231, 1130, "!$q$D0Pmb/DT}:C7ge", "Z}@K6iCO`h}.d'vd", 8, 1624, (-425));
      List<IColumnAnalizeResult> list0 = stringColumnAnalizeResult0.getChild();
      ArrayColumnAnalizeResult arrayColumnAnalizeResult0 = new ArrayColumnAnalizeResult("2XpOf4\"w\u0004G\"$n8", (-2407), (-2407), list0);
      int int0 = optimizedNullArrayDumpBooleanColumnBinaryMaker0.calcBinarySize(arrayColumnAnalizeResult0);
      assertEquals((-2407), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizedNullArrayDumpBooleanColumnBinaryMaker optimizedNullArrayDumpBooleanColumnBinaryMaker0 = new OptimizedNullArrayDumpBooleanColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      OptimizedNullArrayStringColumnBinaryMaker optimizedNullArrayStringColumnBinaryMaker0 = new OptimizedNullArrayStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ColumnType columnType0 = ColumnType.SPREAD;
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(columnType0);
      ColumnBinary columnBinary0 = optimizedNullArrayStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      optimizedNullArrayDumpBooleanColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(0, columnBinary0.loadSize);
  }
}
