/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:39:40 GMT 2022
 */

package jp.co.yahoo.yosegi.block;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.block.EncryptionSupportedBlock;
import jp.co.yahoo.yosegi.block.EncryptionSupportedColumnBinaryTree;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncryptionSupportedBlock_ESTest extends EncryptionSupportedBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EncryptionSupportedBlock encryptionSupportedBlock0 = new EncryptionSupportedBlock();
      EncryptionSupportedColumnBinaryTree encryptionSupportedColumnBinaryTree0 = new EncryptionSupportedColumnBinaryTree();
      encryptionSupportedBlock0.setColumnBinaryTree(encryptionSupportedColumnBinaryTree0);
      ColumnType columnType0 = ColumnType.ARRAY;
      byte[] byteArray0 = new byte[2];
      ColumnBinary columnBinary0 = new ColumnBinary("", "", "TL^7bEi&>?~5pkd", columnType0, (-1648), (-1387), (-1648), (-1387), byteArray0, 0, 470, (List<ColumnBinary>) null);
      encryptionSupportedColumnBinaryTree0.add(columnBinary0);
      int int0 = encryptionSupportedBlock0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EncryptionSupportedBlock encryptionSupportedBlock0 = new EncryptionSupportedBlock();
      List<ColumnBinary> list0 = encryptionSupportedBlock0.get((-344));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EncryptionSupportedBlock encryptionSupportedBlock0 = new EncryptionSupportedBlock();
      EncryptionSupportedColumnBinaryTree encryptionSupportedColumnBinaryTree0 = new EncryptionSupportedColumnBinaryTree();
      encryptionSupportedBlock0.setColumnBinaryTree(encryptionSupportedColumnBinaryTree0);
      List<ColumnBinary> list0 = encryptionSupportedBlock0.get(0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EncryptionSupportedBlock encryptionSupportedBlock0 = new EncryptionSupportedBlock();
      int int0 = encryptionSupportedBlock0.size();
      assertEquals(0, int0);
  }
}
