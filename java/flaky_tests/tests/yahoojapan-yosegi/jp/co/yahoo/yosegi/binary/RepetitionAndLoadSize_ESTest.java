/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:27:04 GMT 2022
 */

package jp.co.yahoo.yosegi.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.binary.RepetitionAndLoadSize;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RepetitionAndLoadSize_ESTest extends RepetitionAndLoadSize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      RepetitionAndLoadSize repetitionAndLoadSize0 = new RepetitionAndLoadSize(intArray0, (-760));
      repetitionAndLoadSize0.getRepetitions();
      assertEquals((-760), repetitionAndLoadSize0.getLoadSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[0];
      RepetitionAndLoadSize repetitionAndLoadSize0 = new RepetitionAndLoadSize(intArray0, 0);
      repetitionAndLoadSize0.getRepetitions();
      assertEquals(0, repetitionAndLoadSize0.getLoadSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      RepetitionAndLoadSize repetitionAndLoadSize0 = new RepetitionAndLoadSize(intArray0, 1973);
      int int0 = repetitionAndLoadSize0.getLoadSize();
      assertEquals(1973, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[4];
      RepetitionAndLoadSize repetitionAndLoadSize0 = new RepetitionAndLoadSize(intArray0, (-760));
      int int0 = repetitionAndLoadSize0.getLoadSize();
      assertEquals((-760), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RepetitionAndLoadSize repetitionAndLoadSize0 = new RepetitionAndLoadSize((int[]) null, 0);
      repetitionAndLoadSize0.getRepetitions();
      assertEquals(0, repetitionAndLoadSize0.getLoadSize());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      RepetitionAndLoadSize repetitionAndLoadSize0 = new RepetitionAndLoadSize(intArray0, 0);
      int int0 = repetitionAndLoadSize0.getLoadSize();
      assertEquals(0, int0);
  }
}
