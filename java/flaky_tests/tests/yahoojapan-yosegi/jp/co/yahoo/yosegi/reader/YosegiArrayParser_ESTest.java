/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:06:27 GMT 2022
 */

package jp.co.yahoo.yosegi.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.parser.IParser;
import jp.co.yahoo.yosegi.reader.YosegiArrayParser;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.IColumnManager;
import jp.co.yahoo.yosegi.spread.column.LazyColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class YosegiArrayParser_ESTest extends YosegiArrayParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(1);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      boolean boolean0 = yosegiArrayParser0.hasParser(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn("6ZqUa9qOx*JM'^;BP!x");
      IColumn iColumn0 = arrayColumn0.getChildColumn();
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      IParser iParser0 = yosegiArrayParser0.getParser(0);
      assertFalse(iParser0.isStruct());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn((String) null, columnType0, iColumnManager0);
      IColumn iColumn0 = lazyColumn0.getParentsColumn();
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      PrimitiveObject primitiveObject0 = yosegiArrayParser0.get(0);
      assertNull(primitiveObject0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YosegiArrayParser yosegiArrayParser0 = null;
      try {
        yosegiArrayParser0 = new YosegiArrayParser((IColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.reader.YosegiArrayParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("");
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(spreadColumn0);
      boolean boolean0 = yosegiArrayParser0.hasParser(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(primitiveColumn0);
      boolean boolean0 = yosegiArrayParser0.hasParser((-10));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(primitiveColumn0);
      IParser iParser0 = yosegiArrayParser0.getParser(1980);
      assertFalse(iParser0.isMap());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      IParser iParser0 = yosegiArrayParser0.getParser((-1429));
      assertEquals(0, iParser0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(primitiveColumn0);
      PrimitiveObject primitiveObject0 = yosegiArrayParser0.get(2906);
      assertNull(primitiveObject0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn("6ZqUa9qOx*JM'^;BP!x");
      IColumn iColumn0 = arrayColumn0.getChildColumn();
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      PrimitiveObject primitiveObject0 = yosegiArrayParser0.get((-3109));
      assertNull(primitiveObject0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      yosegiArrayParser0.setIndex(8);
      assertEquals(0, yosegiArrayParser0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("");
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(spreadColumn0);
      Object object0 = yosegiArrayParser0.toJavaObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      boolean boolean0 = yosegiArrayParser0.isMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      IParser iParser0 = yosegiArrayParser0.getParser("");
      assertFalse(iParser0.isMap());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      PrimitiveObject primitiveObject0 = yosegiArrayParser0.get("Y");
      assertNull(primitiveObject0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      boolean boolean0 = yosegiArrayParser0.isStruct();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      boolean boolean0 = yosegiArrayParser0.containsKey("ICellMaker does not allow NULL.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(primitiveColumn0);
      int int0 = yosegiArrayParser0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      boolean boolean0 = yosegiArrayParser0.hasParser(")[~ZrW%L~)Q\"EMC=l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      boolean boolean0 = yosegiArrayParser0.isArray();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn(")[~ZrW%L~)Q\"EMC=l");
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      YosegiArrayParser yosegiArrayParser0 = new YosegiArrayParser(iColumn0);
      String[] stringArray0 = yosegiArrayParser0.getAllKey();
      assertEquals(0, stringArray0.length);
  }
}
