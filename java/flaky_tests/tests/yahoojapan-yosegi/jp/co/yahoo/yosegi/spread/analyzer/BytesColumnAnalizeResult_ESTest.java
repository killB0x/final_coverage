/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:13:09 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesColumnAnalizeResult_ESTest extends BytesColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizeResult", 0, false, 0, 0, 0, 509, 0, (-150));
      boolean boolean0 = bytesColumnAnalizeResult0.maybeSorted();
      assertFalse(boolean0);
      assertEquals((-1), bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(509, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-150), bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 2367, true, 2367, (-628), 0, 2367, 1386, 14);
      int int0 = bytesColumnAnalizeResult0.getUniqCount();
      assertEquals(2367, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1386, bytesColumnAnalizeResult0.getMinBytes());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(2367, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(14, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(2366, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals((-628), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult((String) null, (-628), true, 0, 604, (-465), 3, 185, 18);
      int int0 = bytesColumnAnalizeResult0.getUniqCount();
      assertEquals(185, bytesColumnAnalizeResult0.getMinBytes());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-465), int0);
      assertEquals(3, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-628), bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(604, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(18, bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult((String) null, 715, false, 715, (-1263), (-571), 0, 0, 435);
      int int0 = bytesColumnAnalizeResult0.getRowEnd();
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-571), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
      assertEquals((-1263), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(714, int0);
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(435, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("/", (-10), false, (-10), (-10), (-10), (-10), (-10), (-10));
      int int0 = bytesColumnAnalizeResult0.getRowEnd();
      assertEquals((-10), bytesColumnAnalizeResult0.getMinBytes());
      assertEquals((-10), bytesColumnAnalizeResult0.getRowCount());
      assertEquals((-10), bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-10), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-10), bytesColumnAnalizeResult0.getNullCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-11), int0);
      assertEquals((-10), bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("/", 0, false, 0, 0, 0, 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getRowCount();
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizeResult", 1020, true, 604, 1386, 3, 14, 1386, 604);
      int int0 = bytesColumnAnalizeResult0.getRowCount();
      assertEquals(14, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(1386, int0);
      assertEquals(604, bytesColumnAnalizeResult0.getMaxBytes());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(1019, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(1386, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(604, bytesColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("/", 0, false, 0, 0, 0, 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getNullCount();
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("RV", (-2118), false, (-1006), 1851, (-937), 1, 17, 1924);
      int int0 = bytesColumnAnalizeResult0.getNullCount();
      assertEquals(1924, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals((-937), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-2118), bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(1, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(17, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(1851, bytesColumnAnalizeResult0.getRowCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-1006), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("^OBr8P>0=&/V", (-1), false, 477, (-1), 52, 52, 477, (-1));
      int int0 = bytesColumnAnalizeResult0.getMinBytes();
      assertEquals(477, int0);
      assertEquals(52, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(52, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(477, bytesColumnAnalizeResult0.getNullCount());
      assertEquals((-1), bytesColumnAnalizeResult0.getRowCount());
      assertEquals((-2), bytesColumnAnalizeResult0.getRowEnd());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("pw+<0gQ`^Y1S@", 3, true, 3, 1422, 0, 3, (-1), 3);
      int int0 = bytesColumnAnalizeResult0.getMinBytes();
      assertEquals(1422, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), int0);
      assertEquals(3, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(3, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(3, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(2, bytesColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 715, false, 715, 715, 715, 715, 715, 715);
      int int0 = bytesColumnAnalizeResult0.getMaxBytes();
      assertEquals(715, bytesColumnAnalizeResult0.getRowCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(715, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(715, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(715, int0);
      assertEquals(714, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(715, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult(">\":yA)^]9;LRz|3u<", (-1), true, 715, 0, 1782, 715, 246, (-1));
      int int0 = bytesColumnAnalizeResult0.getMaxBytes();
      assertEquals(1782, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-2), bytesColumnAnalizeResult0.getRowEnd());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(246, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(715, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("O3$l-  u&vvXp4`j}i", 470, false, 0, (-1), 470, 470, 470, 543);
      int int0 = bytesColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(470, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(470, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(470, int0);
      assertEquals(543, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(469, bytesColumnAnalizeResult0.getRowEnd());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("Z", 0, false, (-492), 0, (-1231), (-1231), (-492), 0);
      int int0 = bytesColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-1231), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals((-1231), int0);
      assertEquals(0, bytesColumnAnalizeResult0.getColumnSize());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-492), bytesColumnAnalizeResult0.getNullCount());
      assertEquals((-492), bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 0, false, 3, 0, 70, 0, 640, 1);
      int int0 = bytesColumnAnalizeResult0.getColumnSize();
      assertEquals(0, int0);
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(70, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(640, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(3, bytesColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 3, true, 3, (-1107), 3, (-1107), 0, (-1));
      int int0 = bytesColumnAnalizeResult0.getColumnSize();
      assertEquals(3, int0);
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals((-1107), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(3, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-1107), bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3, bytesColumnAnalizeResult0.getNullCount());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("_]", 715, false, 715, 715, 715, 715, 715, 715);
      bytesColumnAnalizeResult0.getColumnName();
      assertEquals(715, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(715, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(715, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(715, bytesColumnAnalizeResult0.getUniqCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(715, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(714, bytesColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 0, true, 0, 0, 0, 0, 0, 0);
      bytesColumnAnalizeResult0.getColumnName();
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("eg,.i;,2Ni\"ultJ", 715, false, 4, (-234), 0, 0, 0, 0);
      bytesColumnAnalizeResult0.getColumnType();
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(714, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals((-234), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(4, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult((String) null, 715, false, 715, (-1263), (-571), 0, 0, 435);
      bytesColumnAnalizeResult0.getColumnName();
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(435, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1263), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(714, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
      assertEquals((-571), bytesColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("eg,.i;,2Ni\"ultJ", 715, false, 4, (-234), 0, 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getNullCount();
      assertEquals((-234), bytesColumnAnalizeResult0.getRowCount());
      assertEquals(714, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(4, int0);
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 1, false, 0, 0, (-8), 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getRowStart();
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals((-8), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(1, bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult((String) null, 715, false, 715, (-1263), (-571), 0, 0, 435);
      int int0 = bytesColumnAnalizeResult0.getRowCount();
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
      assertEquals((-1263), int0);
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(714, bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(435, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-571), bytesColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("iwH?xY8BWz", 0, false, 0, 3, 1, 0, (-1147), 0);
      int int0 = bytesColumnAnalizeResult0.getMaxBytes();
      assertEquals(3, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1, bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-1147), bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, int0);
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), bytesColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("/", (-10), false, (-10), (-10), (-10), (-10), (-10), (-10));
      int int0 = bytesColumnAnalizeResult0.getColumnSize();
      assertEquals((-10), bytesColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals((-10), bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals((-10), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals((-10), int0);
      assertEquals((-10), bytesColumnAnalizeResult0.getRowCount());
      assertEquals((-10), bytesColumnAnalizeResult0.getMinBytes());
      assertEquals((-10), bytesColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("/", 0, false, 0, 0, 0, 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getMinBytes();
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, int0);
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(0, bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 1, false, 0, 0, (-8), 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getRowEnd();
      assertEquals(0, int0);
      assertEquals((-8), bytesColumnAnalizeResult0.getUniqCount());
      assertEquals(0, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("/", 0, false, 0, 0, 0, 0, 0, 0);
      int int0 = bytesColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(0, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(0, bytesColumnAnalizeResult0.getMaxBytes());
      assertFalse(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(0, bytesColumnAnalizeResult0.getNullCount());
      assertEquals((-1), bytesColumnAnalizeResult0.getRowEnd());
      assertEquals(0, int0);
      assertEquals(0, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(0, bytesColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.BytesColumnAnalizeResult", 1020, true, 604, 1386, 3, 14, 1386, 604);
      int int0 = bytesColumnAnalizeResult0.getUniqCount();
      assertEquals(1386, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(3, int0);
      assertEquals(1386, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(604, bytesColumnAnalizeResult0.getMaxBytes());
      assertTrue(bytesColumnAnalizeResult0.maybeSorted());
      assertEquals(604, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(1020, bytesColumnAnalizeResult0.getColumnSize());
      assertEquals(14, bytesColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BytesColumnAnalizeResult bytesColumnAnalizeResult0 = new BytesColumnAnalizeResult("", 715, true, 715, 715, 715, 715, 715, 715);
      boolean boolean0 = bytesColumnAnalizeResult0.maybeSorted();
      assertEquals(715, bytesColumnAnalizeResult0.getNullCount());
      assertEquals(715, bytesColumnAnalizeResult0.getRowCount());
      assertEquals(715, bytesColumnAnalizeResult0.getMaxBytes());
      assertEquals(715, bytesColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(715, bytesColumnAnalizeResult0.getUniqCount());
      assertTrue(boolean0);
      assertEquals(715, bytesColumnAnalizeResult0.getMinBytes());
      assertEquals(715, bytesColumnAnalizeResult0.getColumnSize());
  }
}
