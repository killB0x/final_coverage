/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 02:02:46 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.flatten;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.flatten.NotFlattenFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NotFlattenFunction_ESTest extends NotFlattenFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotFlattenFunction notFlattenFunction0 = new NotFlattenFunction();
      List<ColumnBinary> list0 = notFlattenFunction0.flattenFromColumnBinary((List<ColumnBinary>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NotFlattenFunction notFlattenFunction0 = new NotFlattenFunction();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.NULL;
      ColumnBinary columnBinary0 = new ColumnBinary((String) null, (String) null, "J#D%8B4; pUD{>)!", columnType0, 0, 0, 0, 0, (byte[]) null, 2293, 0, linkedList0);
      linkedList0.offer(columnBinary0);
      List<ColumnBinary> list0 = notFlattenFunction0.flattenFromColumnBinary(linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NotFlattenFunction notFlattenFunction0 = new NotFlattenFunction();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      List<ColumnBinary> list0 = notFlattenFunction0.flattenFromColumnBinary(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NotFlattenFunction notFlattenFunction0 = new NotFlattenFunction();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      notFlattenFunction0.flattenIndexNode(blockIndexNode0);
      assertFalse(notFlattenFunction0.isFlatten());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NotFlattenFunction notFlattenFunction0 = new NotFlattenFunction();
      String[] stringArray0 = notFlattenFunction0.getFlattenColumnName("J#D%8B4; pUD{>)!");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NotFlattenFunction notFlattenFunction0 = new NotFlattenFunction();
      boolean boolean0 = notFlattenFunction0.isFlatten();
      assertFalse(boolean0);
  }
}
