/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:46:07 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.List;
import jp.co.yahoo.yosegi.message.design.FieldType;
import jp.co.yahoo.yosegi.message.design.IField;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.ICellManager;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrimitiveColumn_ESTest extends PrimitiveColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "jp.co.yahoo.yosegi.spread.column.ArrowByteConnector");
      ICell<BooleanObj, Object> iCell0 = (ICell<BooleanObj, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iCell0).getRow();
      primitiveColumn0.addCell(columnType0, iCell0, 1);
      String string0 = primitiveColumn0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "This method only supports dictionary columns.");
      ICellManager<Object> iCellManager0 = (ICellManager<Object>) mock(ICellManager.class, new ViolatedAssumptionAnswer());
      doReturn(820).when(iCellManager0).size();
      primitiveColumn0.setCellManager(iCellManager0);
      int int0 = primitiveColumn0.size();
      assertEquals(820, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "This method only supports dictionary columns.");
      ICellManager<Object> iCellManager0 = (ICellManager<Object>) mock(ICellManager.class, new ViolatedAssumptionAnswer());
      doReturn((-1054)).when(iCellManager0).size();
      primitiveColumn0.setCellManager(iCellManager0);
      int int0 = primitiveColumn0.size();
      assertEquals((-1054), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "X76AU.f*T.iupq;(");
      String string0 = primitiveColumn0.getColumnName();
      assertEquals("X76AU.f*T.iupq;(", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SHORT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      String string0 = primitiveColumn0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "hn_yX1y+!n+sX`;H");
      primitiveColumn0.setCellManager((ICellManager) null);
      ICellManager iCellManager0 = primitiveColumn0.getCellManager();
      assertNull(iCellManager0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "X76AU.f*T.iupq;(");
      ICellManager<BooleanObj> iCellManager0 = (ICellManager<BooleanObj>) mock(ICellManager.class, new ViolatedAssumptionAnswer());
      doReturn((ICell) null).when(iCellManager0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      primitiveColumn0.setCellManager(iCellManager0);
      ICell iCell0 = primitiveColumn0.get(0);
      assertNull(iCell0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "X76AU.f*T.iupq;(");
      int int0 = primitiveColumn0.add(columnType0, (Object) null, 2);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "Gy$");
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iCell0).getRow();
      // Undeclared exception!
      try { 
        primitiveColumn0.addCell(columnType0, iCell0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "Gy$");
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getRow();
      // Undeclared exception!
      try { 
        primitiveColumn0.addCell(columnType0, iCell0, (-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ColumnType cannot be cast to class jp.co.yahoo.yosegi.message.objects.PrimitiveObject (jp.co.yahoo.yosegi.spread.column.ColumnType and jp.co.yahoo.yosegi.message.objects.PrimitiveObject are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75faba84)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.PrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "--------------------------\n");
      // Undeclared exception!
      try { 
        primitiveColumn0.add(columnType0, (Object) null, 3392903);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ColumnTypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      // Undeclared exception!
      try { 
        primitiveColumn0.add(columnType0, columnType0, 2054408);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ColumnType cannot be cast to class jp.co.yahoo.yosegi.message.objects.PrimitiveObject (jp.co.yahoo.yosegi.spread.column.ColumnType and jp.co.yahoo.yosegi.message.objects.PrimitiveObject are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75faba84)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.PrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrimitiveColumn primitiveColumn0 = null;
      try {
        primitiveColumn0 = new PrimitiveColumn((ColumnType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.CellMakerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_SPREAD;
      PrimitiveColumn primitiveColumn0 = null;
      try {
        primitiveColumn0 = new PrimitiveColumn(columnType0, "|~8zI,)!k");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unknown column type : EMPTY_SPREAD
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.CellMakerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTES;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "w,K&`,ByTmUW6{");
      ColumnType columnType1 = primitiveColumn0.getColumnType();
      assertSame(columnType1, columnType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "H'&gzKR9-MHlKCL#,5");
      IField iField0 = primitiveColumn0.getSchema("H'&gzKR9-MHlKCL#,5");
      assertEquals("H'&gzKR9-MHlKCL#,5", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      int int0 = primitiveColumn0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, (String) null);
      String string0 = primitiveColumn0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      ColumnType columnType1 = ColumnType.STRING;
      try { 
        primitiveColumn0.add(columnType1, "", (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incorrect input data type : java.lang.String
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.PrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "K_w2sO8");
      // Undeclared exception!
      try { 
        primitiveColumn0.add(columnType0, (Object) null, (-1817));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "hn_yX1y+!n+sX`;H");
      ICellManager iCellManager0 = primitiveColumn0.getCellManager();
      assertNotNull(iCellManager0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTES;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      primitiveColumn0.setCellManager((ICellManager) null);
      // Undeclared exception!
      try { 
        primitiveColumn0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.PrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "Gy$");
      IColumn iColumn0 = primitiveColumn0.getColumn((-1304));
      assertFalse(iColumn0.isExpandColumn());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      // Undeclared exception!
      try { 
        primitiveColumn0.addCell(columnType0, (ICell) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.PrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "H'&gzKR9-MHlKCL#,5");
      IColumn iColumn0 = primitiveColumn0.getParentsColumn();
      assertEquals(ColumnType.NULL, iColumn0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "H'&gzKR9-MHlKCL#,5");
      primitiveColumn0.setParentsColumn((IColumn) null);
      IColumn iColumn0 = primitiveColumn0.getParentsColumn();
      assertNull(iColumn0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "Gy$");
      int int0 = primitiveColumn0.getColumnSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "H'&gzKR9-MHlKCL#,5");
      IField iField0 = primitiveColumn0.getSchema();
      assertEquals(FieldType.BOOLEAN, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "target is not MapContainerField.");
      primitiveColumn0.setColumnName("target is not MapContainerField.");
      assertEquals(ColumnType.LONG, primitiveColumn0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn(columnType0);
      assertFalse(iColumn0.isExpandColumn());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "X76AU.f*T.iupq;(");
      IColumn iColumn0 = primitiveColumn0.getColumn("Unsupported object : ");
      assertFalse(iColumn0.isDictionary());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "Gy$");
      ICell iCell0 = primitiveColumn0.get(1309);
      assertEquals(ColumnType.NULL, iCell0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      List<IColumn> list0 = primitiveColumn0.getListColumn();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "H'&gzKR9-MHlKCL#,5");
      primitiveColumn0.setDefaultCell((ICell) null);
      assertEquals("H'&gzKR9-MHlKCL#,5", primitiveColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      List<String> list0 = primitiveColumn0.getColumnKeys();
      assertFalse(list0.contains(""));
  }
}
