/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:53:34 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.CellManager;
import jp.co.yahoo.yosegi.spread.column.ICell;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CellManager_ESTest extends CellManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      ICell<BooleanCell, Object> iCell0 = (ICell<BooleanCell, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iCell0).toString();
      ICell iCell1 = cellManager0.get((-1339), iCell0);
      assertNull(iCell1.getType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      ICell<BooleanCell, BooleanCell> iCell0 = (ICell<BooleanCell, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      cellManager0.add(iCell0, 526);
      int int0 = cellManager0.size();
      assertEquals(527, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      ICell iCell0 = cellManager0.get((-2919), (ICell) null);
      assertNull(iCell0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      ICell<BooleanCell, BooleanCell> iCell0 = (ICell<BooleanCell, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iCell0).toString();
      cellManager0.add(iCell0, 526);
      ICell<Object, BooleanCell> iCell1 = (ICell<Object, BooleanCell>) mock(ICell.class, new ViolatedAssumptionAnswer());
      ICell iCell2 = cellManager0.get(526, iCell1);
      assertNull(iCell2.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      cellManager0.clear();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      int int0 = cellManager0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CellManager cellManager0 = new CellManager();
      // Undeclared exception!
      try { 
        cellManager0.add((ICell) null, (-391));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }
}
