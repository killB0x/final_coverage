/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:24:49 GMT 2022
 */

package jp.co.yahoo.yosegi.inmemory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.inmemory.FieldTypeUtil;
import jp.co.yahoo.yosegi.message.design.FieldType;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldTypeUtil_ESTest extends FieldTypeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldTypeUtil.columnTypeToFieldType((ColumnType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.inmemory.FieldTypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SPREAD;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.NULL, fieldType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.NULL, fieldType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.STRING, fieldType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SHORT;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.SHORT, fieldType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.LONG, fieldType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.INTEGER, fieldType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.FLOAT, fieldType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.DOUBLE, fieldType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTES;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.BYTES, fieldType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.BOOLEAN, fieldType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRUCT;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.STRUCT, fieldType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnType columnType0 = ColumnType.MAP;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.MAP, fieldType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnType columnType0 = ColumnType.ARRAY;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.ARRAY, fieldType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.BYTE, fieldType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnType columnType0 = ColumnType.UNION;
      FieldType fieldType0 = FieldTypeUtil.columnTypeToFieldType(columnType0);
      assertEquals(FieldType.UNION, fieldType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeUtil fieldTypeUtil0 = new FieldTypeUtil();
  }
}
