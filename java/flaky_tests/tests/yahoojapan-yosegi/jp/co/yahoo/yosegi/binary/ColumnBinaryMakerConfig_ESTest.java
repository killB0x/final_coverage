/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:19:15 GMT 2022
 */

package jp.co.yahoo.yosegi.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.maker.IColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpBytesColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpFloatColumnBinaryMaker;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColumnBinaryMakerConfig_ESTest extends ColumnBinaryMakerConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig0);
      columnBinaryMakerConfig1.byteMakerClass = columnBinaryMakerConfig0.floatMakerClass;
      ColumnType columnType0 = ColumnType.SHORT;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig1.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
      assertEquals(1.15, columnBinaryMakerConfig1.allowedRatio, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      columnBinaryMakerConfig0.integerMakerClass = null;
      ColumnType columnType0 = ColumnType.SHORT;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      columnBinaryMakerConfig0.integerMakerClass = null;
      ColumnType columnType0 = ColumnType.INTEGER;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      columnBinaryMakerConfig0.integerMakerClass = null;
      ColumnType columnType0 = ColumnType.BYTE;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig0);
      ColumnType columnType0 = ColumnType.BYTE;
      columnBinaryMakerConfig1.shortMakerClass = columnBinaryMakerConfig0.spreadMakerClass;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig1.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
      assertEquals(1.15, columnBinaryMakerConfig1.allowedRatio, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      OptimizedNullArrayDumpFloatColumnBinaryMaker optimizedNullArrayDumpFloatColumnBinaryMaker0 = new OptimizedNullArrayDumpFloatColumnBinaryMaker();
      columnBinaryMakerConfig0.longMakerClass = (IColumnBinaryMaker) optimizedNullArrayDumpFloatColumnBinaryMaker0;
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig0);
      assertEquals(1.15, columnBinaryMakerConfig1.allowedRatio, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      OptimizedNullArrayDumpBytesColumnBinaryMaker optimizedNullArrayDumpBytesColumnBinaryMaker0 = (OptimizedNullArrayDumpBytesColumnBinaryMaker)columnBinaryMakerConfig0.bytesMakerClass;
      columnBinaryMakerConfig0.byteMakerClass = (IColumnBinaryMaker) optimizedNullArrayDumpBytesColumnBinaryMaker0;
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig0);
      assertEquals(1.15, columnBinaryMakerConfig1.allowedRatio, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      columnBinaryMakerConfig0.longMakerClass = null;
      ColumnType columnType0 = ColumnType.LONG;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = null;
      try {
        columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig((ColumnBinaryMakerConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.UNKNOWN;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.EMPTY_SPREAD;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.NULL;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.STRING;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.DOUBLE;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.BYTES;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.SPREAD;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.ARRAY;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.FLOAT;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnType columnType0 = ColumnType.UNION;
      IColumnBinaryMaker iColumnBinaryMaker0 = columnBinaryMakerConfig0.getColumnMaker(columnType0);
      assertNotNull(iColumnBinaryMaker0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig2 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig0);
      columnBinaryMakerConfig2.shortMakerClass = columnBinaryMakerConfig1.doubleMakerClass;
      ColumnBinaryMakerConfig columnBinaryMakerConfig3 = new ColumnBinaryMakerConfig(columnBinaryMakerConfig2);
      assertEquals(1.15, columnBinaryMakerConfig2.allowedRatio, 0.01);
  }
}
