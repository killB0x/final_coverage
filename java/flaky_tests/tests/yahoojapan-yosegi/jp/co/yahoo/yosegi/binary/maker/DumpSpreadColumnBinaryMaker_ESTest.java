/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:38:43 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.HashMap;
import java.util.Stack;
import java.util.Vector;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.IColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.inmemory.ArrowStructLoader;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiArrayIndexLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSpreadLoader;
import jp.co.yahoo.yosegi.spread.analyzer.IntegerColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.UnionColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DumpSpreadColumnBinaryMaker_ESTest extends DumpSpreadColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("Loader type is not SPREAD.");
      IColumn iColumn0 = arrayColumn0.getColumn("");
      UnionColumn unionColumn0 = new UnionColumn(iColumn0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig1 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Loader type is not SPREAD.", columnBinaryMakerConfig1);
      ColumnBinary columnBinary0 = dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, unionColumn0);
      assertEquals(0, columnBinary0.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      OptimizedNullArrayDumpStringColumnBinaryMaker optimizedNullArrayDumpStringColumnBinaryMaker0 = new OptimizedNullArrayDumpStringColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.MAP;
      byte[] byteArray0 = new byte[5];
      ColumnBinary columnBinary0 = new ColumnBinary("jp.co.yahoo.yosegi.compressor.GzipCommonsCompressor", "kX6HTK(gl}V1QcP@", "", columnType0, (-32768), (-32768), (-700), (-32768), byteArray0, (-2307), 1532, stack0);
      YosegiArrayIndexLoader yosegiArrayIndexLoader0 = new YosegiArrayIndexLoader(columnBinary0, (byte)0);
      IColumn iColumn0 = yosegiArrayIndexLoader0.build();
      ColumnBinary columnBinary1 = optimizedNullArrayDumpStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      stack0.add(columnBinary1);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      dumpSpreadColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(0, columnBinary0.loadSize);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("Ib}NPg0v(r2IE7+Z");
      UnionColumn unionColumn0 = new UnionColumn(arrayColumn0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Ib}NPg0v(r2IE7+Z", columnBinaryMakerConfig0);
      ConstantColumnBinaryMaker constantColumnBinaryMaker0 = new ConstantColumnBinaryMaker();
      columnBinaryMakerConfig0.arrayMakerClass = (IColumnBinaryMaker) constantColumnBinaryMaker0;
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, unionColumn0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Constant binary maker not support column to binary.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, (IColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      HashMap<ColumnType, IColumn> hashMap0 = new HashMap<ColumnType, IColumn>();
      UnionColumn unionColumn0 = new UnionColumn("", hashMap0);
      UnionColumn unionColumn1 = new UnionColumn(unionColumn0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("yD)aHf", columnBinaryMakerConfig0);
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, unionColumn1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      LoadType loadType0 = LoadType.SPREAD;
      ILoader<Object> iLoader0 = (ILoader<Object>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.load((ColumnBinary) null, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$1001672430 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISpreadLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$1001672430 and jp.co.yahoo.yosegi.inmemory.ISpreadLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @788ca58e)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnType columnType0 = ColumnType.MAP;
      byte[] byteArray0 = new byte[5];
      ColumnBinary columnBinary0 = new ColumnBinary("jp.co.yahoo.yosegi.compressor.GzipCommonsCompressor", "kX6HTK(gl}V1QcP@", "", columnType0, (-32768), (-32768), (-700), (-32768), byteArray0, (-2307), 1532, stack0);
      stack0.add(columnBinary0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[0];
      Vector<ColumnBinary> vector0 = new Vector<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("h)", "h)", "jp.co.yahoo.yosegi.spread.column.filter.BackwardMatchStringFilter", columnType0, 0, 97526364, 0, 0, byteArray0, 0, 1, vector0);
      ILoader<ArrowStructLoader> iLoader0 = (ILoader<ArrowStructLoader>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn((LoadType) null).when(iLoader0).getLoaderType();
      try { 
        dumpSpreadColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SPREAD.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("Loader type is not SPREAD.");
      IColumn iColumn0 = arrayColumn0.getColumn("");
      UnionColumn unionColumn0 = new UnionColumn(iColumn0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Loader type is not SPREAD.", columnBinaryMakerConfig0);
      ColumnBinary columnBinary0 = dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, unionColumn0);
      YosegiSpreadLoader yosegiSpreadLoader0 = new YosegiSpreadLoader(columnBinary0, 0);
      dumpSpreadColumnBinaryMaker0.load(columnBinary0, yosegiSpreadLoader0);
      assertEquals(0, columnBinary0.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("D)C-aHf");
      UnionColumn unionColumn0 = new UnionColumn(arrayColumn0);
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      // Undeclared exception!
      try { 
        dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, unionColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("Loader type is not SPREAD.");
      IColumn iColumn0 = arrayColumn0.getColumn("");
      UnionColumn unionColumn0 = new UnionColumn(iColumn0);
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("Loader type is not SPREAD.", columnBinaryMakerConfig0);
      ColumnBinary columnBinary0 = dumpSpreadColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, unionColumn0);
      dumpSpreadColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      assertEquals(0, columnBinary0.rawDataSize);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-1015), stack0);
      assertEquals(0, columnBinary0.logicalDataSize);
      assertEquals((-1), columnBinary0.cardinality);
      assertEquals(0, columnBinary0.rawDataSize);
      assertEquals((-1015), columnBinary0.rowCount);
      assertEquals(0, columnBinary0.binaryLength);
      assertEquals(0, columnBinary0.binaryStart);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DumpSpreadColumnBinaryMaker dumpSpreadColumnBinaryMaker0 = new DumpSpreadColumnBinaryMaker();
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult("Ib}NPg0v(r2IE7+Z", 181, false, 181, 181, 1, 16, 1741, 1, 1);
      int int0 = dumpSpreadColumnBinaryMaker0.calcBinarySize(integerColumnAnalizeResult0);
      assertEquals(0, int0);
  }
}
