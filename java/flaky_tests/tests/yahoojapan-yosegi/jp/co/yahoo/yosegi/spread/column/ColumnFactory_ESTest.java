/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:40:46 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import jp.co.yahoo.yosegi.spread.column.ColumnFactory;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColumnFactory_ESTest extends ColumnFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnFactory.get((ColumnType) null, "xsg:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ColumnFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      try { 
        ColumnFactory.get(columnType0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported object : EMPTY_ARRAY
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ColumnFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "");
      assertEquals("", iColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SHORT;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "");
      assertEquals("", iColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "");
      assertEquals(0, iColumn0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "");
      assertEquals(ColumnType.INTEGER, iColumn0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "t41wLUysfD$_607=");
      assertEquals(0, iColumn0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "Unsupported object : ");
      assertEquals(0, iColumn0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTES;
      IColumn iColumn0 = ColumnFactory.get(columnType0, (String) null);
      assertEquals(0, iColumn0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTE;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "properties");
      assertEquals(0, iColumn0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      IColumn iColumn0 = ColumnFactory.get(columnType0, (String) null);
      assertEquals(ColumnType.BOOLEAN, iColumn0.getColumnType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnType columnType0 = ColumnType.ARRAY;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "");
      assertFalse(iColumn0.isExpandColumn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SPREAD;
      IColumn iColumn0 = ColumnFactory.get(columnType0, "");
      assertEquals(ColumnType.SPREAD, iColumn0.getColumnType());
  }
}
