/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:22:32 GMT 2022
 */

package jp.co.yahoo.yosegi.blockindex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.List;
import jp.co.yahoo.yosegi.blockindex.BlockIndexType;
import jp.co.yahoo.yosegi.blockindex.FloatRangeBlockIndex;
import jp.co.yahoo.yosegi.blockindex.IBlockIndex;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.FloatObj;
import jp.co.yahoo.yosegi.message.objects.NullObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.ShortObj;
import jp.co.yahoo.yosegi.message.objects.Utf8BytesLinkObj;
import jp.co.yahoo.yosegi.spread.column.filter.IFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilterType;
import jp.co.yahoo.yosegi.spread.column.filter.NumberRangeFilter;
import jp.co.yahoo.yosegi.spread.column.filter.PartialMatchStringFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloatRangeBlockIndex_ESTest extends FloatRangeBlockIndex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = new Float((-4035.046));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, booleanObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      Float float0 = floatRangeBlockIndex0.getMin();
      assertEquals(3.4028235E38F, (float)float0, 0.01F);
      
      Float float1 = new Float((-4027.0F));
      FloatRangeBlockIndex floatRangeBlockIndex1 = new FloatRangeBlockIndex(float1, float0);
      List<Integer> list0 = floatRangeBlockIndex1.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = Float.valueOf(351.263F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      Float float1 = new Float(696.00436465);
      FloatRangeBlockIndex floatRangeBlockIndex1 = new FloatRangeBlockIndex(float1, float1);
      boolean boolean0 = floatRangeBlockIndex0.merge(floatRangeBlockIndex1);
      assertEquals(696.0044F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(primitiveObject0, false, primitiveObject0, false);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, primitiveObject0);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Float float0 = new Float(3.4028235E38F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      byte[] byteArray0 = floatRangeBlockIndex0.toBinary();
      floatRangeBlockIndex0.setFromBinary(byteArray0, (-947), 1);
      assertEquals(8, floatRangeBlockIndex0.getBinarySize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      Float float1 = floatRangeBlockIndex0.getMin();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = Float.valueOf(1972.2117F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex((Float) null, float0);
      Float float1 = floatRangeBlockIndex0.getMin();
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float((-128.0F));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      Float float1 = floatRangeBlockIndex0.getMin();
      assertEquals((-128.0F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      Float float1 = floatRangeBlockIndex0.getMax();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex((Float) null, (Float) null);
      Float float0 = floatRangeBlockIndex0.getMax();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float((-128.0F));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      Float float1 = floatRangeBlockIndex0.getMax();
      assertEquals((-128.0F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = new Float((-128.0F));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        floatRangeBlockIndex0.setFromBinary(byteArray0, 1839, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      FloatRangeBlockIndex floatRangeBlockIndex1 = new FloatRangeBlockIndex((Float) null, (Float) null);
      // Undeclared exception!
      try { 
        floatRangeBlockIndex0.merge(floatRangeBlockIndex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.blockindex.FloatRangeBlockIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.NOT_EQUAL;
      byte[] byteArray0 = new byte[0];
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, (-2132445246), (-2132445246));
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, utf8BytesLinkObj0);
      // Undeclared exception!
      try { 
        floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      // Undeclared exception!
      try { 
        floatRangeBlockIndex0.getBlockSpreadIndex((IFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.blockindex.FloatRangeBlockIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Float float0 = new Float(3.4028235E38F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      int int0 = floatRangeBlockIndex0.getBinarySize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(3.4028235E38F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      Float float1 = floatRangeBlockIndex0.getMax();
      assertEquals(3.4028235E38F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float((-1261.1634));
      Float float1 = new Float(2182.4038F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float1);
      ShortObj shortObj0 = new ShortObj((short)1346);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, shortObj0, false, shortObj0, false);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertNull(list0);
      assertEquals((-1261.1635F), floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float((-61.0943F));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(shortObj0, false, shortObj0, false);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(1.7976931348623157E308);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float1);
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, false, booleanObj0, true);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertNull(list0);
      assertEquals(Float.POSITIVE_INFINITY, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Float float0 = new Float((-61.0943F));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      ShortObj shortObj0 = new ShortObj((short)0);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(shortObj0, false, shortObj0, true);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, false, byteObj0, true);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float((-3330.45));
      Float float1 = new Float(140.88448F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float1);
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, false);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertNull(list0);
      assertEquals((-3330.45F), floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, false);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Float float0 = new Float(2005.62F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      FloatObj floatObj0 = new FloatObj(2005.62F);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(floatObj0, true, floatObj0, true);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Float float0 = new Float(1095.39695);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      FloatObj floatObj0 = new FloatObj(3.4028235E38F);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(floatObj0, true, floatObj0, true);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, true);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, false, byteObj0, false);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, booleanObj0, true, booleanObj0, true);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      ShortObj shortObj0 = new ShortObj((short)13);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Float float0 = new Float((-4035.046));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      BooleanObj booleanObj0 = new BooleanObj(false);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, booleanObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Float float0 = new Float(1.0);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, booleanObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Float float0 = new Float((-4035.046));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, booleanObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.NOT_EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, booleanObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertNotNull(list0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertNotNull(list0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Float float0 = new Float((-3330.45));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, false);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      PartialMatchStringFilter partialMatchStringFilter0 = new PartialMatchStringFilter("NULL");
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(partialMatchStringFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FloatObj floatObj0 = new FloatObj(0.0F);
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, floatObj0);
      List<Integer> list0 = floatRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      Float float0 = new Float(141.8F);
      FloatRangeBlockIndex floatRangeBlockIndex1 = new FloatRangeBlockIndex(float0, float0);
      boolean boolean0 = floatRangeBlockIndex0.merge(floatRangeBlockIndex1);
      assertEquals(141.8F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      Float float0 = new Float((-770.45F));
      FloatRangeBlockIndex floatRangeBlockIndex1 = new FloatRangeBlockIndex(float0, float0);
      boolean boolean0 = floatRangeBlockIndex0.merge(floatRangeBlockIndex1);
      assertEquals((-770.45F), floatRangeBlockIndex0.getMin(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      boolean boolean0 = floatRangeBlockIndex0.merge((IBlockIndex) null);
      assertFalse(boolean0);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      IBlockIndex iBlockIndex0 = floatRangeBlockIndex0.clone();
      assertEquals(8, iBlockIndex0.getBinarySize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Float float0 = new Float((-3330.45));
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      BlockIndexType blockIndexType0 = floatRangeBlockIndex0.getBlockIndexType();
      assertEquals(BlockIndexType.RANGE_FLOAT, blockIndexType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      boolean boolean0 = floatRangeBlockIndex0.merge(floatRangeBlockIndex0);
      assertEquals(3.4028235E38F, floatRangeBlockIndex0.getMin(), 0.01F);
      assertEquals(1.4E-45F, floatRangeBlockIndex0.getMax(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex(float0, float0);
      FloatRangeBlockIndex floatRangeBlockIndex1 = (FloatRangeBlockIndex)floatRangeBlockIndex0.getNewInstance();
      assertEquals(1.4E-45F, floatRangeBlockIndex1.getMax(), 0.01F);
      assertEquals(3.4028235E38F, floatRangeBlockIndex1.getMin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex((Float) null, (Float) null);
      // Undeclared exception!
      try { 
        floatRangeBlockIndex0.toBinary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.blockindex.FloatRangeBlockIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FloatRangeBlockIndex floatRangeBlockIndex0 = new FloatRangeBlockIndex();
      // Undeclared exception!
      try { 
        floatRangeBlockIndex0.setFromBinary((byte[]) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
