/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:00:42 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizer;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.ICellManager;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteColumnAnalizer_ESTest extends ByteColumnAnalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ColumnType columnType1 = ColumnType.MAP;
      ColumnType columnType2 = ColumnType.EMPTY_ARRAY;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ICell<BooleanCell, Object> iCell1 = (ICell<BooleanCell, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("FCe9N~vEtrD YU?y6`", "k79f2ac>pIBXW2XHO\"~").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(0, 0, 127, 1, 1).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer1 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      ByteColumnAnalizer byteColumnAnalizer2 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer2.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer3 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer3.analize();
      byteColumnAnalizer2.analize();
      ByteColumnAnalizer byteColumnAnalizer4 = new ByteColumnAnalizer(iColumn0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("FCe9N~vEtrD YU?y6`", (String) null, (String) null, (String) null, (String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(0, 0, 6244, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer1 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      ByteColumnAnalizer byteColumnAnalizer2 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      byteColumnAnalizer2.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer2.analize();
      byteColumnAnalizer2.analize();
      byteColumnAnalizer2.analize();
      byteColumnAnalizer2.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer3 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("FCe9N~vEtrD YU?y6`").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn((-23), (-23), 127).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      byteColumnAnalizer0.analize();
      // Undeclared exception!
      try { 
        byteColumnAnalizer0.analize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1708122055 cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1708122055 and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75092fd7)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(53, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = (ByteColumnAnalizeResult)byteColumnAnalizer0.analize();
      assertEquals((byte)127, byteColumnAnalizeResult0.getMin());
      assertEquals((byte) (-128), byteColumnAnalizeResult0.getMax());
      assertEquals(53, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("FCe9N~vEtrD YU?y6`").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn((ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(0, 0, 127).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer1 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      ByteColumnAnalizer byteColumnAnalizer2 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      byteColumnAnalizer2.analize();
      byteColumnAnalizer0.analize();
      // Undeclared exception!
      try { 
        byteColumnAnalizer2.analize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("FCe9N~vEtrD YU?y6`", (String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(0, 0, 127, 0, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer1 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      ByteColumnAnalizer byteColumnAnalizer2 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer2.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer3 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer3.analize();
      byteColumnAnalizer2.analize();
      ByteColumnAnalizer byteColumnAnalizer4 = new ByteColumnAnalizer(iColumn0);
      assertFalse(byteColumnAnalizer4.equals((Object)byteColumnAnalizer2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SHORT;
      ICell<Object, Object> iCell0 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(53).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      // Undeclared exception!
      try { 
        byteColumnAnalizer0.analize();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1708122055 cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$1708122055 and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75092fd7)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn("FCe9N~vEtrD YU?y6`").when(iArrowPrimitiveConnector0).getColumnName();
      doReturn((ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(0, 1159, 127).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(0);
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizer byteColumnAnalizer1 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer1.analize();
      byteColumnAnalizer1.analize();
      ByteColumnAnalizer byteColumnAnalizer2 = new ByteColumnAnalizer(arrowPrimitiveColumn0);
      byteColumnAnalizer2.analize();
      // Undeclared exception!
      try { 
        byteColumnAnalizer2.analize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer((IColumn) null);
      // Undeclared exception!
      try { 
        byteColumnAnalizer0.analize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = (ByteColumnAnalizeResult)byteColumnAnalizer0.analize();
      assertEquals((byte)127, byteColumnAnalizeResult0.getMin());
      assertEquals((byte) (-128), byteColumnAnalizeResult0.getMax());
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayColumn arrayColumn0 = new ArrayColumn("");
      IColumn iColumn0 = arrayColumn0.getChildColumn();
      ByteColumnAnalizer byteColumnAnalizer0 = new ByteColumnAnalizer(iColumn0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      arrayColumn0.getSchema();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ICellManager<Object> iCellManager0 = (ICellManager<Object>) mock(ICellManager.class, new ViolatedAssumptionAnswer());
      arrayColumn0.setCellManager(iCellManager0);
      byteColumnAnalizer0.analize();
      byteColumnAnalizer0.analize();
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = (ByteColumnAnalizeResult)byteColumnAnalizer0.analize();
      assertTrue(byteColumnAnalizeResult0.maybeSorted());
      assertEquals(0, byteColumnAnalizeResult0.getNullCount());
      assertEquals(0, byteColumnAnalizeResult0.getRowCount());
      assertEquals((byte) (-128), byteColumnAnalizeResult0.getMax());
      assertEquals((byte)127, byteColumnAnalizeResult0.getMin());
  }
}
