/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:50:24 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.LinkedList;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DictionaryRleStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.compressor.DefaultCompressor;
import jp.co.yahoo.yosegi.compressor.ICompressor;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiDictionaryLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.objects.LongObj;
import jp.co.yahoo.yosegi.message.parser.json.JacksonNullParser;
import jp.co.yahoo.yosegi.spread.analyzer.BooleanColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.BooleanCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptimizedNullArrayDoubleColumnBinaryMaker_ESTest extends OptimizedNullArrayDoubleColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", (-636), false, (-636), (-636), 4, (-1611), 1, 1, (-1611), 6, 4, 4, 6, 1, (-927), "jp.co.yahoo.yosegi.spread.column.filter.GtStringCompareFilter", "", 4, 41, 252);
      int int0 = optimizedNullArrayDoubleColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals((-1206), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      BooleanColumnAnalizeResult booleanColumnAnalizeResult0 = new BooleanColumnAnalizeResult("", 3077, true, (-467), 3077, 13, 13, 17);
      int int0 = optimizedNullArrayDoubleColumnBinaryMaker0.calcBinarySize(booleanColumnAnalizeResult0);
      assertEquals(2282, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      LongObj longObj0 = new LongObj(65536L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(longObj0, "m)n2Dq@8Tf.\"nc\u0000", 65535);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 524280);
      IColumn iColumn0 = yosegiSequentialLoader0.build();
      // Undeclared exception!
      optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      JacksonNullParser jacksonNullParser0 = new JacksonNullParser();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, jacksonNullParser0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[2];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("d", "d", "d", columnType0, 73, 73, 73, 73, byteArray0, (byte)42, (byte)0, linkedList0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 73);
      yosegiConstLoader0.setConstFromBytes(columnBinary0.binary, 13, 42);
      IColumn iColumn0 = yosegiConstLoader0.build();
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      JacksonNullParser jacksonNullParser0 = new JacksonNullParser();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, jacksonNullParser0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.BOOLEAN;
      byte[] byteArray0 = new byte[6];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("d", "d", "d", columnType0, 73, 73, 73, 73, byteArray0, (byte)42, (byte)0, linkedList0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 73);
      yosegiConstLoader0.setConstFromBytes(columnBinary0.binary);
      IColumn iColumn0 = yosegiConstLoader0.build();
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, (IColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      JacksonNullParser jacksonNullParser0 = new JacksonNullParser();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, jacksonNullParser0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.LONG;
      byte[] byteArray0 = new byte[4];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = new ColumnBinary("I)_a-|R[jI-:di`KR", "I)_a-|R[jI-:di`KR", "I)_a-|R[jI-:di`KR", columnType0, (-2861), (-2861), (-2861), (-2861), byteArray0, (byte) (-20), (byte)0, linkedList0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-2861));
      IColumn iColumn0 = yosegiConstLoader0.build();
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2861
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("q@:G|?", 2546, linkedList0);
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, (ColumnBinary) null, 2035);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("q@:G|?", 2513, linkedList0);
      columnBinary0.binaryStart = 2513;
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, columnBinary0, 2513);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.getLoadType((ColumnBinary) null, (-3309));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("q@:G|?", 2546, linkedList0);
      LoadType loadType0 = LoadType.SEQUENTIAL;
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$3211797 cannot be cast to class jp.co.yahoo.yosegi.inmemory.ISequentialLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$3211797 and jp.co.yahoo.yosegi.inmemory.ISequentialLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @a4d4cfe)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("q@:G|?", 2546, linkedList0);
      columnBinary0.setRepetitions((int[]) null, 0);
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn((LoadType) null).when(iLoader0).getLoaderType();
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not DICTIONARY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("qd:G|H?", 2546, linkedList0);
      columnBinary0.setRepetitions((int[]) null, 0);
      LoadType loadType0 = LoadType.DICTIONARY;
      ILoader<BooleanCell> iLoader0 = (ILoader<BooleanCell>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$3211797 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IDictionaryLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$3211797 and jp.co.yahoo.yosegi.inmemory.IDictionaryLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @a4d4cfe)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      byte[] byteArray0 = new byte[2];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.DOUBLE;
      ColumnBinary columnBinary0 = new ColumnBinary("U#duOi", "", "[\u0006}L8VUi,[%jYC5H*<", columnType0, 1713, 29, 0, 3, byteArray0, 0, (-1834), linkedList0);
      YosegiDictionaryLoader yosegiDictionaryLoader0 = new YosegiDictionaryLoader(columnBinary0, 29);
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.load(columnBinary0, yosegiDictionaryLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("n`Q|aTn+n&", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("n`Q|aTn+n&");
      DictionaryRleStringColumnBinaryMaker dictionaryRleStringColumnBinaryMaker0 = new DictionaryRleStringColumnBinaryMaker();
      ColumnBinary columnBinary0 = dictionaryRleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrayColumn0);
      columnBinary0.isSetLoadSize = true;
      LoadType loadType0 = optimizedNullArrayDoubleColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      assertEquals(LoadType.DICTIONARY, loadType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      byte[] byteArray0 = new byte[2];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.DOUBLE;
      ColumnBinary columnBinary0 = new ColumnBinary("U#duOi", "", "[\u0006}L8VUi,[%jYC5H*<", columnType0, 1713, 29, 0, 3, byteArray0, 0, (-1834), linkedList0);
      LoadType loadType0 = optimizedNullArrayDoubleColumnBinaryMaker0.getLoadType(columnBinary0, 2330);
      assertEquals(LoadType.SEQUENTIAL, loadType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      JacksonNullParser jacksonNullParser0 = new JacksonNullParser();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, jacksonNullParser0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      byte[] byteArray0 = new byte[2];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.DOUBLE;
      ColumnBinary columnBinary0 = new ColumnBinary("U#duOi", "", "[\u0006}L8VUi,[%jYC5H*<", columnType0, 1713, 29, 0, 3, byteArray0, 0, (-1834), linkedList0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 3);
      yosegiConstLoader0.setConstFromDouble(1.15);
      IColumn iColumn0 = yosegiConstLoader0.build();
      ColumnBinary columnBinary1 = optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      assertEquals(0, columnBinary1.loadSize);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      JacksonNullParser jacksonNullParser0 = new JacksonNullParser();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode(columnBinaryMakerConfig0, jacksonNullParser0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      byte[] byteArray0 = new byte[2];
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnType columnType0 = ColumnType.DOUBLE;
      ColumnBinary columnBinary0 = new ColumnBinary("U#duOi", "", "[\u0006}L8VUi,[%jYC5H*<", columnType0, 1713, 29, 0, 3, byteArray0, 0, (-1834), linkedList0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 3);
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.GZIPOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      DefaultCompressor defaultCompressor0 = new DefaultCompressor();
      columnBinaryMakerConfig0.compressorClass = (ICompressor) defaultCompressor0;
      CompressResultNode compressResultNode0 = new CompressResultNode();
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnBinary columnBinary0 = optimizedNullArrayDoubleColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
      BlockIndexNode blockIndexNode0 = BlockIndexNode.createFromBinary(columnBinary0.binary, 0);
      optimizedNullArrayDoubleColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertFalse(columnBinary0.isSetLoadSize);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptimizedNullArrayDoubleColumnBinaryMaker optimizedNullArrayDoubleColumnBinaryMaker0 = new OptimizedNullArrayDoubleColumnBinaryMaker();
      // Undeclared exception!
      try { 
        optimizedNullArrayDoubleColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDoubleColumnBinaryMaker", e);
      }
  }
}
