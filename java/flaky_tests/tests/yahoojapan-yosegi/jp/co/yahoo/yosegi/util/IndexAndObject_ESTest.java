/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:21:23 GMT 2022
 */

package jp.co.yahoo.yosegi.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jp.co.yahoo.yosegi.util.IndexAndObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndexAndObject_ESTest extends IndexAndObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      Integer integer0 = new Integer(0);
      indexAndObject0.add(integer0);
      int int0 = indexAndObject0.getNextIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(0);
      indexAndObject0.add(integer0);
      int int0 = indexAndObject0.hasIndex(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      Integer integer0 = new Integer(0);
      indexAndObject0.add(integer0);
      int int0 = indexAndObject0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(0);
      int int0 = indexAndObject0.getStartIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      int int0 = indexAndObject0.getNextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(1);
      indexAndObject0.add((Object) null);
      Object object0 = indexAndObject0.get(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(2474);
      IndexAndObject<Object> indexAndObject1 = new IndexAndObject<Object>(0);
      indexAndObject1.add(indexAndObject0);
      assertEquals(1, indexAndObject1.getNextIndex());
      
      IndexAndObject indexAndObject2 = (IndexAndObject)indexAndObject1.get(0);
      assertEquals(2474, indexAndObject2.getNextIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      Integer integer0 = new Integer(0);
      indexAndObject0.add(integer0);
      int int0 = indexAndObject0.hasIndex(0);
      assertEquals(1, indexAndObject0.getNextIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      int int0 = indexAndObject0.hasIndex((-2281));
      assertEquals(0, indexAndObject0.getNextIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      int int0 = indexAndObject0.hasIndex(582);
      assertEquals(1, int0);
      assertEquals(0, indexAndObject0.getNextIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = null;
      try {
        indexAndObject0 = new IndexAndObject<Object>((-2706));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The start index must be greater than or equal to 0.
         //
         verifyException("jp.co.yahoo.yosegi.util.IndexAndObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndexAndObject<Integer> indexAndObject0 = new IndexAndObject<Integer>(0);
      indexAndObject0.size();
      assertEquals(0, indexAndObject0.getStartIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(1);
      // Undeclared exception!
      try { 
        indexAndObject0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(697);
      int int0 = indexAndObject0.getStartIndex();
      assertEquals(697, int0);
  }
}
