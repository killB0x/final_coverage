/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:05:22 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleColumnAnalizeResult_ESTest extends DoubleColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("19mq;pbVbH", (-1), true, (-1), (-1), (-1), (-1), (-1));
      boolean boolean0 = doubleColumnAnalizeResult0.maybeSorted();
      assertEquals((-1.0), doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals((-1.0), doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals((-1), doubleColumnAnalizeResult0.getColumnSize());
      assertEquals((-1), doubleColumnAnalizeResult0.getRowCount());
      assertTrue(boolean0);
      assertEquals((-1), doubleColumnAnalizeResult0.getNullCount());
      assertEquals((-1), doubleColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("AB>9[?N^}]UON}A", 18, false, 18, 18, 18, 18, 18);
      int int0 = doubleColumnAnalizeResult0.getUniqCount();
      assertEquals(18, int0);
      assertEquals(18, doubleColumnAnalizeResult0.getColumnSize());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(18.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(18, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(18, doubleColumnAnalizeResult0.getRowCount());
      assertEquals(18.0, doubleColumnAnalizeResult0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("vGr7", (-1293), false, (-1), (-1), (-1), (-1), 1651.246799106);
      int int0 = doubleColumnAnalizeResult0.getUniqCount();
      assertEquals(1651.246799106, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-8), doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1.0), doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals((-1294), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals((-1), doubleColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult", 6435, true, 2, 6435, 2, 2, (-335.1357618484362));
      int int0 = doubleColumnAnalizeResult0.getRowEnd();
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(2, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(6434, int0);
      assertEquals(2, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(2.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals((-335.1357618484362), doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(6435, doubleColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 0, false, 0, 0, 0, 0, 0);
      int int0 = doubleColumnAnalizeResult0.getRowEnd();
      assertEquals(0, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), int0);
      assertEquals(0, doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 1, true, 908, 395, (-1), 1, 1063.4687917774377);
      int int0 = doubleColumnAnalizeResult0.getRowCount();
      assertEquals(395, int0);
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(1063.4687917774377, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals((-1), doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(908, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0, doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(1.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-1), true, 0, (-1), 17, 0, 1.0);
      int int0 = doubleColumnAnalizeResult0.getRowCount();
      assertEquals(17, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), int0);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(1.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), doubleColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("OU?I,2 |CmC5CuC", 9, true, 246, 0, 9, 0, 246);
      int int0 = doubleColumnAnalizeResult0.getNullCount();
      assertEquals(9, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(246.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
      assertEquals(9, doubleColumnAnalizeResult0.getColumnSize());
      assertEquals(246, int0);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("vGr7", (-1293), false, (-1), (-1), (-1), (-1), 1651.246799106);
      int int0 = doubleColumnAnalizeResult0.getNullCount();
      assertEquals((-1), int0);
      assertEquals(1651.246799106, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals((-1), doubleColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), doubleColumnAnalizeResult0.getRowCount());
      assertEquals((-1.0), doubleColumnAnalizeResult0.getMin(), 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-1293), doubleColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-1), true, 0, (-1), 17, 0, 1.0);
      double double0 = doubleColumnAnalizeResult0.getMin();
      assertEquals((-2), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(0.0, double0, 0.01);
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(1.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals((-1), doubleColumnAnalizeResult0.getRowCount());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(17, doubleColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("UNION", 8, false, (-2414), 0, 1643, (-2682.038857), 0.0);
      double double0 = doubleColumnAnalizeResult0.getMin();
      assertEquals((-2414), doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0, doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-2682.038857), double0, 0.01);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(1643, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(8, doubleColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-2157), false, 0, (-2157), 0, (-909.1231), 1.0);
      double double0 = doubleColumnAnalizeResult0.getMax();
      assertEquals((-2157), doubleColumnAnalizeResult0.getRowCount());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals((-2157), doubleColumnAnalizeResult0.getColumnSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals((-909.1231), doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("oxPzK}af}<E2$a-v", 1814, true, 22, (-2557), (-78), (-78), (-78));
      double double0 = doubleColumnAnalizeResult0.getMax();
      assertEquals(22, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(1814, doubleColumnAnalizeResult0.getColumnSize());
      assertEquals((-78.0), doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals((-78.0), double0, 0.01);
      assertEquals((-78), doubleColumnAnalizeResult0.getUniqCount());
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-20456), doubleColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("UNION", 8, false, (-2414), 0, 1643, (-2682.038857), 0.0);
      int int0 = doubleColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(0, int0);
      assertEquals(1643, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-2682.038857), doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(7, doubleColumnAnalizeResult0.getRowEnd());
      assertEquals((-2414), doubleColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-1), true, 0, (-1), 17, 0, 1.0);
      int int0 = doubleColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(17, doubleColumnAnalizeResult0.getUniqCount());
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals((-2), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals((-8), int0);
      assertEquals(1.0, doubleColumnAnalizeResult0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 0, false, 0, 1627, 14, 14, 0.0);
      int int0 = doubleColumnAnalizeResult0.getColumnSize();
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(14, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(14.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(0, int0);
      assertEquals(13016, doubleColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("=&n}S9W", 7, true, 7, 0, 7, 0, 0);
      int int0 = doubleColumnAnalizeResult0.getColumnSize();
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(7, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(7, int0);
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
      assertEquals(7, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult((String) null, 8, false, 8, 8, 8, 8, 0.0);
      doubleColumnAnalizeResult0.getColumnName();
      assertEquals(8, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(8.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(8, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(8, doubleColumnAnalizeResult0.getColumnSize());
      assertEquals(8, doubleColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-1316), false, 0, 0, (-330), 0, (-330));
      doubleColumnAnalizeResult0.getColumnName();
      assertEquals((-330), doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-330.0), doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals((-1317), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("U6)!#kQMH", 29, false, 29, 29, 29, 29, 29);
      doubleColumnAnalizeResult0.getColumnName();
      assertEquals(29, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(29, doubleColumnAnalizeResult0.getColumnSize());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(29, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(29, doubleColumnAnalizeResult0.getRowCount());
      assertEquals(29.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(29.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 1, true, 8, 1, 1, 1, 8);
      int int0 = doubleColumnAnalizeResult0.getRowEnd();
      assertEquals(0, int0);
      assertEquals(8, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(1, doubleColumnAnalizeResult0.getUniqCount());
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(8.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(8, doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 0, false, 0, 0, 0, 0, 0);
      double double0 = doubleColumnAnalizeResult0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getColumnSize());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 0, false, 0, 1627, 14, 14, 0.0);
      boolean boolean0 = doubleColumnAnalizeResult0.maybeSorted();
      assertFalse(boolean0);
      assertEquals(14.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(1627, doubleColumnAnalizeResult0.getRowCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(14, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), doubleColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("AB>9[?N^}]UON}A", 0, false, 0, 0, 0, 0, 0);
      int int0 = doubleColumnAnalizeResult0.getRowCount();
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals((-1), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(0, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0, int0);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-1316), false, 0, 0, (-330), 0, (-330));
      int int0 = doubleColumnAnalizeResult0.getColumnSize();
      assertEquals((-330), doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals((-330.0), doubleColumnAnalizeResult0.getMax(), 0.01);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-1316), int0);
      assertEquals(0, doubleColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("U6)!#kQMH", 29, false, 29, 29, 29, 29, 29);
      double double0 = doubleColumnAnalizeResult0.getMin();
      assertEquals(28, doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(29, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(29.0, double0, 0.01);
      assertEquals(29, doubleColumnAnalizeResult0.getUniqCount());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(232, doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(29.0, doubleColumnAnalizeResult0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("FLOAT", 0, true, 0, (-463), 0, 0, (-463));
      int int0 = doubleColumnAnalizeResult0.getUniqCount();
      assertEquals(0, int0);
      assertTrue(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals((-463), doubleColumnAnalizeResult0.getRowCount());
      assertEquals((-1), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals((-463.0), doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", (-1316), false, 0, 0, (-330), 0, (-330));
      int int0 = doubleColumnAnalizeResult0.getRowStart();
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(0, doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, int0);
      assertEquals((-330), doubleColumnAnalizeResult0.getUniqCount());
      assertEquals((-1316), doubleColumnAnalizeResult0.getColumnSize());
      assertEquals((-330.0), doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("", 0, false, 0, 0, 0, 0, 0);
      doubleColumnAnalizeResult0.getColumnType();
      assertEquals(0, doubleColumnAnalizeResult0.getNullCount());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(0, doubleColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0, doubleColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult((String) null, 37, false, 37, 37, 37, 37, 37);
      int int0 = doubleColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(37, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(37.0, doubleColumnAnalizeResult0.getMax(), 0.01);
      assertEquals(37.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(36, doubleColumnAnalizeResult0.getRowEnd());
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(37, doubleColumnAnalizeResult0.getNullCount());
      assertEquals(296, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("AB>9[?N^}]UON}A", 0, false, 0, 0, 0, 0, 0);
      int int0 = doubleColumnAnalizeResult0.getNullCount();
      assertEquals((-1), doubleColumnAnalizeResult0.getRowEnd());
      assertEquals(0, doubleColumnAnalizeResult0.getUniqCount());
      assertEquals(0, doubleColumnAnalizeResult0.getRowCount());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMin(), 0.01);
      assertEquals(0, int0);
      assertFalse(doubleColumnAnalizeResult0.maybeSorted());
      assertEquals(0.0, doubleColumnAnalizeResult0.getMax(), 0.01);
  }
}
