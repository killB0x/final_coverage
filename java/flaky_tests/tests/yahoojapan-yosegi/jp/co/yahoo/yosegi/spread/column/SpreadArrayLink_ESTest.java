/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:33:55 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jp.co.yahoo.yosegi.spread.Spread;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadArrayLink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpreadArrayLink_ESTest extends SpreadArrayLink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 0, 0, 0);
      int int0 = spreadArrayLink0.getStart();
      assertEquals(0, int0);
      assertEquals(0, spreadArrayLink0.getEnd());
      assertEquals(0, spreadArrayLink0.getParentIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-2143), (-2143), (-2143));
      int int0 = spreadArrayLink0.getStart();
      assertEquals((-2143), int0);
      assertEquals((-2143), spreadArrayLink0.getEnd());
      assertEquals((-2143), spreadArrayLink0.getParentIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink((Spread) null, (-1079), 9, (-2010));
      spreadArrayLink0.getSpread();
      assertEquals((-1079), spreadArrayLink0.getParentIndex());
      assertEquals((-2010), spreadArrayLink0.getEnd());
      assertEquals(9, spreadArrayLink0.getStart());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      spread0.addRow((Map<String, Object>) hashMap0);
      spreadArrayLink0.getSpread();
      assertEquals(2636, spreadArrayLink0.getParentIndex());
      assertEquals(2117, spreadArrayLink0.getStart());
      assertEquals(2636, spreadArrayLink0.getEnd());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-2320), (-2320), (-2164));
      spread0.setRowCount((-2164));
      spreadArrayLink0.getSpread();
      assertEquals((-2320), spreadArrayLink0.getStart());
      assertEquals((-2320), spreadArrayLink0.getParentIndex());
      assertEquals((-2164), spreadArrayLink0.getEnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      spread0.addColumn(arrowPrimitiveColumn0);
      spreadArrayLink0.getSpread();
      assertEquals(2117, spreadArrayLink0.getStart());
      assertEquals(2636, spreadArrayLink0.getEnd());
      assertEquals(2636, spreadArrayLink0.getParentIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 0, 0, 0);
      int int0 = spreadArrayLink0.getParentIndex();
      assertEquals(0, spreadArrayLink0.getStart());
      assertEquals(0, spreadArrayLink0.getEnd());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-105), (-1033), (-1033));
      int int0 = spreadArrayLink0.getParentIndex();
      assertEquals((-105), int0);
      assertEquals((-1033), spreadArrayLink0.getEnd());
      assertEquals((-1033), spreadArrayLink0.getStart());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 0, 0, 0);
      List<ICell> list0 = (List<ICell>)spreadArrayLink0.getLine();
      assertEquals(0, spreadArrayLink0.getEnd());
      assertEquals(0, spreadArrayLink0.getParentIndex());
      assertEquals(0, list0.size());
      assertEquals(0, spreadArrayLink0.getStart());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 0, 0, 0);
      int int0 = spreadArrayLink0.getEnd();
      assertEquals(0, int0);
      assertEquals(0, spreadArrayLink0.getStart());
      assertEquals(0, spreadArrayLink0.getParentIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-2320), (-2320), (-2164));
      int int0 = spreadArrayLink0.getEnd();
      assertEquals((-2320), spreadArrayLink0.getStart());
      assertEquals((-2320), spreadArrayLink0.getParentIndex());
      assertEquals((-2164), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iArrowPrimitiveConnector0).getColumnName();
      doReturn((ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      spread0.addColumn(arrowPrimitiveColumn0);
      ICell iCell0 = spreadArrayLink0.getArrayRow(1799);
      assertEquals(2636, spreadArrayLink0.getParentIndex());
      assertEquals(2117, spreadArrayLink0.getStart());
      assertEquals(2636, spreadArrayLink0.getEnd());
      assertNull(iCell0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 1, (-1838656495), 1);
      // Undeclared exception!
      spreadArrayLink0.getLine();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink((Spread) null, (-2331), (-2331), 320);
      // Undeclared exception!
      try { 
        spreadArrayLink0.getLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink((Spread) null, 0, 0, 0);
      // Undeclared exception!
      try { 
        spreadArrayLink0.getArrayRow(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.SpreadArrayLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      List<ICell> list0 = (List<ICell>)spreadArrayLink0.getLine();
      assertEquals(2636, spreadArrayLink0.getParentIndex());
      assertEquals(519, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      int int0 = spreadArrayLink0.getEnd();
      assertEquals(2636, spreadArrayLink0.getParentIndex());
      assertEquals(2636, int0);
      assertEquals(2117, spreadArrayLink0.getStart());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      spreadArrayLink0.getArrayRow(4644);
      assertEquals(2636, spreadArrayLink0.getParentIndex());
      assertEquals(2117, spreadArrayLink0.getStart());
      assertEquals(2636, spreadArrayLink0.getEnd());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2636, 2117, 2636);
      int int0 = spreadArrayLink0.getParentIndex();
      assertEquals(2636, int0);
      assertEquals(2117, spreadArrayLink0.getStart());
      assertEquals(2636, spreadArrayLink0.getEnd());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 1, 1, 1);
      int int0 = spreadArrayLink0.getStart();
      assertEquals(1, spreadArrayLink0.getParentIndex());
      assertEquals(1, spreadArrayLink0.getEnd());
      assertEquals(1, int0);
  }
}
