/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:15:48 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.message.objects.BytesStringObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.Utf8BytesLinkObj;
import jp.co.yahoo.yosegi.spread.column.filter.FilterType;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilterType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberFilter_ESTest extends NumberFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      byte[] byteArray0 = new byte[0];
      BytesStringObj bytesStringObj0 = new BytesStringObj(byteArray0, 0, 0, "jp.co.yahoo.yosegi.spread.column.filter.NumberFilter");
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, bytesStringObj0);
      PrimitiveObject primitiveObject0 = numberFilter0.getNumberObject();
      assertEquals(0, primitiveObject0.getObjectSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumberFilterType numberFilterType0 = NumberFilterType.NOT_EQUAL;
      DoubleObj doubleObj0 = new DoubleObj(478.905958643038);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, doubleObj0);
      PrimitiveObject primitiveObject0 = numberFilter0.getNumberObject();
      assertSame(primitiveObject0, doubleObj0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      byte[] byteArray0 = new byte[6];
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, 2, (byte) (-1));
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, utf8BytesLinkObj0);
      PrimitiveObject primitiveObject0 = numberFilter0.getNumberObject();
      assertEquals((-1), primitiveObject0.getObjectSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, (PrimitiveObject) null);
      NumberFilterType numberFilterType1 = numberFilter0.getNumberFilterType();
      assertSame(numberFilterType0, numberFilterType1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NumberFilter numberFilter0 = new NumberFilter((NumberFilterType) null, (PrimitiveObject) null);
      FilterType filterType0 = numberFilter0.getFilterType();
      assertEquals(FilterType.NUMBER, filterType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, (PrimitiveObject) null);
      PrimitiveObject primitiveObject0 = numberFilter0.getNumberObject();
      assertNull(primitiveObject0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NumberFilter numberFilter0 = new NumberFilter((NumberFilterType) null, (PrimitiveObject) null);
      numberFilter0.getNumberFilterType();
  }
}
