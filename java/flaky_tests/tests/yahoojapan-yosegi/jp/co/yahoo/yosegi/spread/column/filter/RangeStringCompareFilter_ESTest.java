/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:43:43 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.column.filter.FilterType;
import jp.co.yahoo.yosegi.spread.column.filter.IStringComparator;
import jp.co.yahoo.yosegi.spread.column.filter.RangeStringCompareFilter;
import jp.co.yahoo.yosegi.spread.column.filter.StringCompareFilterType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RangeStringCompareFilter_ESTest extends RangeStringCompareFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("", true, "jp.co.yahoo.yosegi.spread.column.filter.RangeStringCompareFilter", true);
      assertEquals(StringCompareFilterType.RANGE, rangeStringCompareFilter0.getStringCompareFilterType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("jp.co.yahoo.yosegi.spread.column.filter.RangeStringCompareFilter", false, "", false, true);
      assertEquals(FilterType.STRING_COMPARE, rangeStringCompareFilter0.getFilterType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("Fd}@eX", true, "y?**Bul[{W", false);
      assertEquals(FilterType.STRING_COMPARE, rangeStringCompareFilter0.getFilterType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("NUMBER_RANGE", true, "NUMBER_RANGE", true, true);
      IStringComparator iStringComparator0 = rangeStringCompareFilter0.getStringComparator();
      assertNotNull(iStringComparator0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("", true, "", true);
      IStringComparator iStringComparator0 = rangeStringCompareFilter0.getStringComparator();
      assertNotNull(iStringComparator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("NUMBER_RANGE", true, "NUMBER_RANGE", true);
      FilterType filterType0 = rangeStringCompareFilter0.getFilterType();
      assertEquals(FilterType.STRING_COMPARE, filterType0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RangeStringCompareFilter rangeStringCompareFilter0 = new RangeStringCompareFilter("NUMBER_RANGE", true, "NUMBER_RANGE", true);
      StringCompareFilterType stringCompareFilterType0 = rangeStringCompareFilter0.getStringCompareFilterType();
      assertEquals(StringCompareFilterType.RANGE, stringCompareFilterType0);
  }
}
