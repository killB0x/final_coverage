/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:59:11 GMT 2022
 */

package jp.co.yahoo.yosegi.util.io.diffencoder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.util.io.diffencoder.INumEncoder;
import jp.co.yahoo.yosegi.util.io.diffencoder.NumEncoderUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumEncoderUtil_ESTest extends NumEncoderUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder((-2147483648L), 781L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder((-32768L), (-1L));
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder(2860L, 127L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = NumEncoderUtil.getDiffColumnType(0L, 65535L);
      assertEquals(ColumnType.SHORT, columnType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder(0L, 255L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = NumEncoderUtil.getDiffColumnType((-180L), 9223372036854775807L);
      //  // Unstable assertion: assertEquals(ColumnType.BYTE, columnType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumEncoderUtil.getLogicalSize((-1757), (ColumnType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.NumEncoderUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        NumEncoderUtil.createEncoder(9223372036854771300L, 9223372036854771304L);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // min is not equal max.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.FixedNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = NumEncoderUtil.getDiffColumnType(65535L, 9223372036854775807L);
      assertEquals(ColumnType.LONG, columnType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = NumEncoderUtil.getDiffColumnType(16777216L, 4294967295L);
      assertEquals(ColumnType.INTEGER, columnType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder(1L, 4294967296L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder(2104L, 65535L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder((-5590L), 32767L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder(0, (-2964L));
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder((-9223372036854775796L), 0L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder((-1101L), 9223372036854775807L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      INumEncoder iNumEncoder0 = NumEncoderUtil.createEncoder((-128L), 16777216L);
      assertNotNull(iNumEncoder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumEncoderUtil.getDiffColumnType((-1297L), 9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnType columnType0 = ColumnType.INTEGER;
      int int0 = NumEncoderUtil.getLogicalSize((-437), columnType0);
      assertEquals((-1748), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnType columnType0 = NumEncoderUtil.getDiffColumnType((-1706L), (-1L));
      int int0 = NumEncoderUtil.getLogicalSize(14, columnType0);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnType columnType0 = ColumnType.SPREAD;
      int int0 = NumEncoderUtil.getLogicalSize(0, columnType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnType columnType0 = NumEncoderUtil.getDiffColumnType(16L, 16L);
      int int0 = NumEncoderUtil.getLogicalSize((-1312), columnType0);
      assertEquals((-1312), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumEncoderUtil numEncoderUtil0 = new NumEncoderUtil();
  }
}
