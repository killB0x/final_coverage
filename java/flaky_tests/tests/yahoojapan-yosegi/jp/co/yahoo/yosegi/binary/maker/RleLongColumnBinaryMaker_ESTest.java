/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:38:55 GMT 2022
 */

package jp.co.yahoo.yosegi.binary.maker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.BufferUnderflowException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import jp.co.yahoo.yosegi.binary.ColumnBinary;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerConfig;
import jp.co.yahoo.yosegi.binary.ColumnBinaryMakerCustomConfigNode;
import jp.co.yahoo.yosegi.binary.CompressResultNode;
import jp.co.yahoo.yosegi.binary.maker.ConstantColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.DumpSpreadColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayDumpLongColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.OptimizedNullArrayLongColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.RleStringColumnBinaryMaker;
import jp.co.yahoo.yosegi.binary.maker.UnsupportedColumnBinaryMaker;
import jp.co.yahoo.yosegi.blockindex.BlockIndexNode;
import jp.co.yahoo.yosegi.inmemory.ILoader;
import jp.co.yahoo.yosegi.inmemory.LoadType;
import jp.co.yahoo.yosegi.inmemory.YosegiConstLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiNullLoader;
import jp.co.yahoo.yosegi.inmemory.YosegiSequentialLoader;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.StringObj;
import jp.co.yahoo.yosegi.spread.analyzer.ByteColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.DoubleColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.IntegerColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.LongColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.ShortColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RleLongColumnBinaryMaker_ESTest extends RleLongColumnBinaryMaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker$1", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.FLOAT;
      ICell<IntegerColumnAnalizeResult, Object> iCell0 = (ICell<IntegerColumnAnalizeResult, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(1, 2, 2, (-2931)).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker$1", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.STRUCT;
      ICell<Object, IntegerColumnAnalizeResult> iCell0 = (ICell<Object, IntegerColumnAnalizeResult>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(1, 2, (-2), 2).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$590273393 cannot be cast to class jp.co.yahoo.yosegi.spread.column.PrimitiveCell (jp.co.yahoo.yosegi.spread.column.ICell$MockitoMock$590273393 and jp.co.yahoo.yosegi.spread.column.PrimitiveCell are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7c5905a7)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      CompressResultNode compressResultNode0 = new CompressResultNode();
      DoubleObj doubleObj0 = new DoubleObj(37);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(doubleObj0, "Repetition must be equal to or greater than 0.", 25);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, (-994));
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, (ColumnBinaryMakerCustomConfigNode) null, compressResultNode0, iColumn0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -994
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("]G3", 2649, stack0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 3039496);
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      PrimitiveObject primitiveObject0 = OptimizedNullArrayLongColumnBinaryMaker.createConstObjectFromNum(columnBinary0.columnType, 2649);
      ColumnBinary columnBinary1 = ConstantColumnBinaryMaker.createColumnBinary(primitiveObject0, "]G3", Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.load(columnBinary1, yosegiSequentialLoader0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("r/I5=/i", (-2207), true, (-2207), (-2207), (-2207), (-2207), (-2207), (-2207), (-2207));
      int int0 = rleLongColumnBinaryMaker0.calcBinarySize(longColumnAnalizeResult0);
      assertEquals((-17605), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("!!}", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.STRUCT;
      PrimitiveObject primitiveObject0 = OptimizedNullArrayDumpLongColumnBinaryMaker.createConstObjectFromNum(columnType0, 0L);
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(primitiveObject0, "", 3016);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 24128);
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("]<vg}]cy9!g", 28, arrayList0);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, columnBinary0, 28);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, (ColumnBinary) null, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("", (-362), arrayList0);
      columnBinary0.binaryLength = (-362);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.setBlockIndexNode((BlockIndexNode) null, columnBinary0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.load((ColumnBinary) null, (ILoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ArrayList<ColumnBinary> arrayList0 = new ArrayList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("]Ga3", 2950, arrayList0);
      columnBinary0.binaryLength = 2950;
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.getLoadType((ColumnBinary) null, (-4070));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      DoubleColumnAnalizeResult doubleColumnAnalizeResult0 = new DoubleColumnAnalizeResult("n", 0, false, 0, (-3527), 0, (-3527), 4.9E-324);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.calcBinarySize(doubleColumnAnalizeResult0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This method is not supported.
         //
         verifyException("jp.co.yahoo.yosegi.spread.analyzer.IColumnAnalizeResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.calcBinarySize((IColumnAnalizeResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      YosegiNullLoader yosegiNullLoader0 = new YosegiNullLoader(3281);
      IColumn iColumn0 = yosegiNullLoader0.build();
      ColumnBinary columnBinary0 = rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
      try { 
        rleLongColumnBinaryMaker0.load(columnBinary0, yosegiNullLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not SEQUENTIAL.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.spread.column.ArrowStructColumn", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("jp.co.yahoo.yosegi.spread.column.ArrowStructColumn");
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      ColumnBinary columnBinary0 = unsupportedColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrayColumn0);
      columnBinary0.setRepetitions(columnBinary0.repetitions, (-4998));
      LoadType loadType0 = LoadType.DICTIONARY;
      ILoader<Object> iLoader0 = (ILoader<Object>) mock(ILoader.class, new ViolatedAssumptionAnswer());
      doReturn(loadType0).when(iLoader0).getLoaderType();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.load(columnBinary0, iLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$545837131 cannot be cast to class jp.co.yahoo.yosegi.inmemory.IDictionaryLoader (jp.co.yahoo.yosegi.inmemory.ILoader$MockitoMock$545837131 and jp.co.yahoo.yosegi.inmemory.IDictionaryLoader are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7c5905a7)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<ColumnBinary> linkedList0 = new LinkedList<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("_", 100, linkedList0);
      YosegiSequentialLoader yosegiSequentialLoader0 = new YosegiSequentialLoader(columnBinary0, 0);
      columnBinary0.isSetLoadSize = true;
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      try { 
        rleLongColumnBinaryMaker0.load(columnBinary0, yosegiSequentialLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loader type is not DICTIONARY.
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.spread.column.ArrowStructColumn", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ArrayColumn arrayColumn0 = new ArrayColumn("jp.co.yahoo.yosegi.spread.column.ArrowStructColumn");
      UnsupportedColumnBinaryMaker unsupportedColumnBinaryMaker0 = new UnsupportedColumnBinaryMaker();
      ColumnBinary columnBinary0 = unsupportedColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrayColumn0);
      columnBinary0.setRepetitions(columnBinary0.repetitions, (-5000));
      LoadType loadType0 = rleLongColumnBinaryMaker0.getLoadType(columnBinary0, 0);
      assertEquals(LoadType.DICTIONARY, loadType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      Stack<ColumnBinary> stack0 = new Stack<ColumnBinary>();
      ColumnBinary columnBinary0 = DumpSpreadColumnBinaryMaker.createSpreadColumnBinary("Q?da#", 1004, stack0);
      LoadType loadType0 = rleLongColumnBinaryMaker0.getLoadType(columnBinary0, (-1));
      assertEquals(LoadType.SEQUENTIAL, loadType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2, false, (-1), 2, 2, (-1), 2, (-1), 3, 3, 78875740, (-1), 2, 2, 3, "", "", (-1), 2, 78875740);
      int int0 = rleLongColumnBinaryMaker0.calcBinarySize(stringColumnAnalizeResult0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      IntegerColumnAnalizeResult integerColumnAnalizeResult0 = new IntegerColumnAnalizeResult("'4s", 4, false, 4, 4, (-668), 93, 4, 4, 2577);
      int int0 = rleLongColumnBinaryMaker0.calcBinarySize(integerColumnAnalizeResult0);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 2956, false, 2956, 2956, 2956, (short)2942, (short)2942, (short)2942, 2956);
      int int0 = rleLongColumnBinaryMaker0.calcBinarySize(shortColumnAnalizeResult0);
      assertEquals(6663, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ByteColumnAnalizeResult byteColumnAnalizeResult0 = new ByteColumnAnalizeResult("Loader type is not SEQUENTIAL.", 4, false, 4, 4, 4, (byte) (-45), (byte) (-45), 4, 4);
      int int0 = rleLongColumnBinaryMaker0.calcBinarySize(byteColumnAnalizeResult0);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("jp.co.yahoo.yosegi.spread.column.ArrowStructColumn", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      ColumnType columnType0 = ColumnType.NULL;
      ICell<Object, IntegerColumnAnalizeResult> iCell0 = (ICell<Object, IntegerColumnAnalizeResult>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType0).when(iCell0).getType();
      ColumnType columnType1 = ColumnType.INTEGER;
      ICell<Object, Object> iCell1 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn(columnType1).when(iCell1).getType();
      ICell<Object, Object> iCell2 = (ICell<Object, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn(iCell0, iCell1).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      doReturn(4, 4, 4, 2386, 0).when(iArrowPrimitiveConnector0).size();
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, arrowPrimitiveColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      ColumnBinaryMakerConfig columnBinaryMakerConfig0 = new ColumnBinaryMakerConfig();
      ColumnBinaryMakerCustomConfigNode columnBinaryMakerCustomConfigNode0 = new ColumnBinaryMakerCustomConfigNode("r&qz?8N?V-F1a", columnBinaryMakerConfig0);
      CompressResultNode compressResultNode0 = new CompressResultNode();
      RleStringColumnBinaryMaker rleStringColumnBinaryMaker0 = new RleStringColumnBinaryMaker();
      ColumnType columnType0 = ColumnType.LONG;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "r&qz?8N?V-F1a");
      ColumnBinary columnBinary0 = rleStringColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, primitiveColumn0);
      YosegiConstLoader yosegiConstLoader0 = new YosegiConstLoader(columnBinary0, 1111);
      IColumn iColumn0 = yosegiConstLoader0.build();
      // Undeclared exception!
      try { 
        rleLongColumnBinaryMaker0.toBinary(columnBinaryMakerConfig0, columnBinaryMakerCustomConfigNode0, compressResultNode0, iColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.binary.maker.RleLongColumnBinaryMaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RleLongColumnBinaryMaker rleLongColumnBinaryMaker0 = new RleLongColumnBinaryMaker();
      BlockIndexNode blockIndexNode0 = new BlockIndexNode();
      StringObj stringObj0 = new StringObj("b)P&1~)[PWJJo");
      ColumnBinary columnBinary0 = ConstantColumnBinaryMaker.createColumnBinary(stringObj0, "b)P&1~)[PWJJo", (-764));
      rleLongColumnBinaryMaker0.setBlockIndexNode(blockIndexNode0, columnBinary0, 0);
      assertEquals(0, columnBinary0.loadSize);
  }
}
