/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:52:14 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import jp.co.yahoo.yosegi.spread.Spread;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.IColumnManager;
import jp.co.yahoo.yosegi.spread.column.LazyColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadCell;
import jp.co.yahoo.yosegi.spread.column.SpreadLink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpreadCell_ESTest extends SpreadCell_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadLink spreadLink0 = new SpreadLink(spread0, 0);
      SpreadCell spreadCell0 = new SpreadCell(spreadLink0);
      ColumnType columnType0 = ColumnType.ARRAY;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn("5p/x[1YI`", columnType0, iColumnManager0);
      IColumn iColumn0 = lazyColumn0.getParentsColumn();
      spread0.addColumn(iColumn0);
      Map<String, ICell> map0 = (Map<String, ICell>)spreadCell0.getRow();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SpreadCell spreadCell0 = new SpreadCell((SpreadLink) null);
      // Undeclared exception!
      try { 
        spreadCell0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.SpreadCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SpreadCell spreadCell0 = new SpreadCell((SpreadLink) null);
      // Undeclared exception!
      try { 
        spreadCell0.getRow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.SpreadCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadLink spreadLink0 = new SpreadLink(spread0, 0);
      SpreadCell spreadCell0 = new SpreadCell(spreadLink0);
      ColumnType columnType0 = spreadCell0.getType();
      assertEquals(ColumnType.SPREAD, columnType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadLink spreadLink0 = new SpreadLink(spread0, 0);
      SpreadCell spreadCell0 = new SpreadCell(spreadLink0);
      String string0 = spreadCell0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadLink spreadLink0 = new SpreadLink(spread0, 0);
      SpreadCell spreadCell0 = new SpreadCell(spreadLink0);
      Map<String, ICell> map0 = (Map<String, ICell>)spreadCell0.getRow();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SpreadCell spreadCell0 = new SpreadCell((SpreadLink) null);
      spreadCell0.setRow((SpreadLink) null);
      assertEquals(ColumnType.SPREAD, spreadCell0.getType());
  }
}
