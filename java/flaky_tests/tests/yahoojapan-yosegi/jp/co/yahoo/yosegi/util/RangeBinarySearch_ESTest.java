/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:49:45 GMT 2022
 */

package jp.co.yahoo.yosegi.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jp.co.yahoo.yosegi.util.IndexAndObject;
import jp.co.yahoo.yosegi.util.RangeBinarySearch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RangeBinarySearch_ESTest extends RangeBinarySearch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = new Integer(0);
      rangeBinarySearch0.add(integer0, 0);
      rangeBinarySearch0.add(integer0, 1257);
      rangeBinarySearch0.add((Integer) null, 1700);
      rangeBinarySearch0.get(1257);
      assertEquals(1701, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = new Integer(1);
      rangeBinarySearch0.add(integer0, 0);
      rangeBinarySearch0.add(integer0, 9);
      rangeBinarySearch0.add(integer0, 1257);
      rangeBinarySearch0.get(685);
      assertEquals(1258, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = new Integer(0);
      rangeBinarySearch0.add(integer0, 0);
      rangeBinarySearch0.add(integer0, 1257);
      rangeBinarySearch0.add((Integer) null, 1688);
      rangeBinarySearch0.get(0);
      assertEquals(1689, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = new Integer(0);
      rangeBinarySearch0.add(integer0, 0);
      rangeBinarySearch0.add(integer0, 1257);
      rangeBinarySearch0.add((Integer) null, 1688);
      rangeBinarySearch0.get(1688);
      assertEquals(1689, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(0);
      RangeBinarySearch<IndexAndObject<Object>> rangeBinarySearch0 = new RangeBinarySearch<IndexAndObject<Object>>();
      rangeBinarySearch0.add(indexAndObject0, 0);
      // Undeclared exception!
      try { 
        rangeBinarySearch0.add(indexAndObject0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RangeBinarySearch<Object> rangeBinarySearch0 = new RangeBinarySearch<Object>();
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(0);
      rangeBinarySearch0.add(indexAndObject0, 1089);
      rangeBinarySearch0.getIndexAndObjectList();
      assertEquals(1090, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RangeBinarySearch<IndexAndObject<Object>> rangeBinarySearch0 = new RangeBinarySearch<IndexAndObject<Object>>();
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(679);
      rangeBinarySearch0.add(indexAndObject0, 679);
      rangeBinarySearch0.get(679);
      assertEquals(680, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      rangeBinarySearch0.clear();
      Integer integer0 = rangeBinarySearch0.get(0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RangeBinarySearch<Object> rangeBinarySearch0 = new RangeBinarySearch<Object>();
      int int0 = rangeBinarySearch0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = new Integer(0);
      rangeBinarySearch0.add(integer0, 0);
      int int0 = rangeBinarySearch0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = rangeBinarySearch0.get(847);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RangeBinarySearch<IndexAndObject<Object>> rangeBinarySearch0 = new RangeBinarySearch<IndexAndObject<Object>>();
      IndexAndObject<Object> indexAndObject0 = rangeBinarySearch0.get((-1770));
      assertNull(indexAndObject0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RangeBinarySearch<Object> rangeBinarySearch0 = new RangeBinarySearch<Object>();
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(2471);
      rangeBinarySearch0.add(indexAndObject0, 2471);
      rangeBinarySearch0.add(indexAndObject0, 2472);
      assertEquals(2473, rangeBinarySearch0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RangeBinarySearch<Object> rangeBinarySearch0 = new RangeBinarySearch<Object>();
      IndexAndObject<Object> indexAndObject0 = new IndexAndObject<Object>(679);
      // Undeclared exception!
      try { 
        rangeBinarySearch0.add(indexAndObject0, (-2139));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RangeBinarySearch<Object> rangeBinarySearch0 = new RangeBinarySearch<Object>();
      List<IndexAndObject<Object>> list0 = rangeBinarySearch0.getIndexAndObjectList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RangeBinarySearch<Integer> rangeBinarySearch0 = new RangeBinarySearch<Integer>();
      Integer integer0 = new Integer(0);
      rangeBinarySearch0.add(integer0, 0);
      rangeBinarySearch0.add(integer0, 1257);
      rangeBinarySearch0.get(847);
      assertEquals(1258, rangeBinarySearch0.size());
  }
}
