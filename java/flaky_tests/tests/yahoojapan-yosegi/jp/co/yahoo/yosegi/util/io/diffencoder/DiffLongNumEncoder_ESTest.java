/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:43:01 GMT 2022
 */

package jp.co.yahoo.yosegi.util.io.diffencoder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteOrder;
import java.util.Arrays;
import jp.co.yahoo.yosegi.inmemory.IDictionaryLoader;
import jp.co.yahoo.yosegi.inmemory.ISequentialLoader;
import jp.co.yahoo.yosegi.inmemory.PrimitiveObjectDictionary;
import jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiffLongNumEncoder_ESTest extends DiffLongNumEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[20];
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[2] = 2;
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)1, (-3362), booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)1, intArray0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[20];
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, 2, 11, booleanArray0, byteOrder0, (IDictionaryLoader) null, (int) (byte)1, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Index must be equal to or greater than the previous number.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((-1688L), (-1688L));
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      boolean[] booleanArray1 = new boolean[2];
      ByteOrder.nativeOrder();
      booleanArray1[0] = true;
      ISequentialLoader<Object> iSequentialLoader0 = (ISequentialLoader<Object>) mock(ISequentialLoader.class, new ViolatedAssumptionAnswer());
      doReturn(5, 0).when(iSequentialLoader0).getLoadSize();
      diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)0, 5, booleanArray1, byteOrder0, iSequentialLoader0, (-4451));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1767L, 1767L);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ISequentialLoader<Object> iSequentialLoader0 = (ISequentialLoader<Object>) mock(ISequentialLoader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSequentialLoader0).getLoadSize();
      diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)0, (byte)0, booleanArray0, byteOrder0, iSequentialLoader0, 3187);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1767L, 1767L);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[1];
      ISequentialLoader<Object> iSequentialLoader0 = (ISequentialLoader<Object>) mock(ISequentialLoader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSequentialLoader0).getLoadSize();
      diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)0, (byte)0, booleanArray0, byteOrder0, iSequentialLoader0, 3187);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1386L, 1386L);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      PrimitiveObjectDictionary primitiveObjectDictionary0 = new PrimitiveObjectDictionary(0);
      diffLongNumEncoder0.setDictionary(byteArray0, 2, (-830), byteOrder0, primitiveObjectDictionary0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      Long[] longArray0 = new Long[8];
      diffLongNumEncoder0.toBinary(longArray0, byteArray0, 0, (int) (byte)0, byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1386L, 1386L);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      long[] longArray0 = new long[8];
      byte[] byteArray0 = new byte[6];
      diffLongNumEncoder0.toBinary(longArray0, byteArray0, (int) (byte)1, (int) (byte)1, byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      long[] longArray0 = new long[8];
      diffLongNumEncoder0.toBinary(longArray0, byteArray0, (int) (byte)1, 3, byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      long[] longArray0 = new long[1];
      diffLongNumEncoder0.toBinary(longArray0, byteArray0, (int) (byte)1, (-2794), byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((-1923L), 0L);
      int int0 = diffLongNumEncoder0.calcBinarySize((-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((-999L), 931L);
      int int0 = diffLongNumEncoder0.calcBinarySize((-2751));
      assertEquals((-5500), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1386L, 1386L);
      int int0 = diffLongNumEncoder0.calcBinarySize(401);
      int int1 = diffLongNumEncoder0.calcBinarySize(401);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      Long[] longArray0 = new Long[3];
      longArray0[0] = (Long) (long)int1;
      longArray0[1] = (Long) (long)int1;
      longArray0[2] = (Long) (long)int0;
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.toBinary(longArray0, byteArray0, 2, 16, byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.toBinary((long[]) null, byteArray0, (-4451), (int) (byte)0, byteOrder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4451 out of bounds for length 9
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter0", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(24L, 24L);
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      boolean[] booleanArray0 = new boolean[2];
      ISequentialLoader<Integer> iSequentialLoader0 = (ISequentialLoader<Integer>) mock(ISequentialLoader.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)1, (byte)1, booleanArray0, byteOrder0, iSequentialLoader0, 65535);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((byte)0, (byte)0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)0, (byte)0, (boolean[]) null, byteOrder0, (ISequentialLoader) null, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[8];
      boolean[] booleanArray0 = new boolean[32];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((-2147483648L), 1684L);
      try { 
        diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)0, 16777225, booleanArray0, byteOrder0, (ISequentialLoader) null, 16777225);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid binary.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter4", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[2];
      boolean[] booleanArray0 = new boolean[10];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((-483L), (-483L));
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 2139095040;
      // Undeclared exception!
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (-1162), booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, 2139095040, intArray0, (-1162));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(9223372036854775301L, 9223372036854775301L);
      byte[] byteArray0 = new byte[16];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (int) (byte)0, (boolean[]) null, byteOrder0, (IDictionaryLoader) null, (int) (byte)0, (int[]) null, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[1];
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, 22, 37, booleanArray0, byteOrder0, iDictionaryLoader0, 37, intArray0, 2146269007);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 22 out of bounds for length 1
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter0", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte byte0 = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      long[] longArray0 = new long[9];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      doReturn(2146814232, 0).when(iDictionaryLoader0).getLoadSize();
      int[] intArray0 = new int[15];
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (int) (byte)0, booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, 8, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int[] intArray0 = new int[1];
      IDictionaryLoader<Integer> iDictionaryLoader0 = (IDictionaryLoader<Integer>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)1, (int) (byte)1, (boolean[]) null, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, 6, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, (byte)1);
      boolean[] booleanArray0 = new boolean[5];
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, 0, (-1797), booleanArray0, byteOrder0, iDictionaryLoader0, (-1559), intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1386L, 1386L);
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, 221, (int) (byte)83, (boolean[]) null, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 221 out of bounds for length 5
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter0", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((-2287L), (-2287L));
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      PrimitiveObjectDictionary primitiveObjectDictionary0 = new PrimitiveObjectDictionary(1400);
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionary((byte[]) null, 16777216, 1400, byteOrder0, primitiveObjectDictionary0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter0", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(2147483647L, 2147483647L);
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      PrimitiveObjectDictionary primitiveObjectDictionary0 = new PrimitiveObjectDictionary((byte)0);
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setDictionary(byteArray0, (byte)101, (byte)0, byteOrder0, primitiveObjectDictionary0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 101 out of bounds for length 2
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter0", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1767L, 0L);
      byte[] byteArray0 = new byte[2];
      PrimitiveObjectDictionary primitiveObjectDictionary0 = new PrimitiveObjectDictionary(501);
      try { 
        diffLongNumEncoder0.setDictionary(byteArray0, (byte)0, (byte)27, (ByteOrder) null, primitiveObjectDictionary0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid binary.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.NumberToBinaryUtils$LongConverter8", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[1];
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[1] = (int) (byte)1;
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)1, (int) (byte)1, booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)0, intArray0, 649);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(42L, 42L);
      byte[] byteArray0 = new byte[12];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (int) (byte)0, booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)0, intArray0, (int) (byte)0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte)1;
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)1, (-3362), booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)1, intArray0, (int) (byte)1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[1];
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)1, (int) (byte)1, booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)0, intArray0, 649);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1767L, 1767L);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[1];
      int[] intArray0 = new int[4];
      intArray0[1] = (-3001);
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, 0, (-3001), booleanArray0, byteOrder0, (IDictionaryLoader) null, 0, intArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Repetition must be equal to or greater than 0.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(40L, 40L);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)4, 0).when(iDictionaryLoader0).getLoadSize();
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte)4;
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)4, (int) (byte)4, booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)4, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(0L, 0L);
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      boolean[] booleanArray0 = new boolean[1];
      int[] intArray0 = new int[9];
      intArray0[4] = 650;
      IDictionaryLoader<Object> iDictionaryLoader0 = (IDictionaryLoader<Object>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iDictionaryLoader0).getLoadSize();
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, 1, 588, booleanArray0, byteOrder0, iDictionaryLoader0, 1, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[5];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((byte)0, (byte)0);
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (int) (byte)0, booleanArray0, byteOrder0, (IDictionaryLoader) null, 4, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Index must be equal to or greater than the previous number.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(9223372036854775310L, 9223372036854775310L);
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      boolean[] booleanArray0 = new boolean[7];
      int[] intArray0 = new int[1];
      intArray0[0] = (-299);
      try { 
        diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (int) (byte)0, booleanArray0, byteOrder0, (IDictionaryLoader) null, (int) (byte)0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Index must be equal to or greater than 0.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[12];
      boolean[] booleanArray0 = new boolean[3];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((byte)0, (byte)0);
      IDictionaryLoader<Integer> iDictionaryLoader0 = (IDictionaryLoader<Integer>) mock(IDictionaryLoader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iDictionaryLoader0).getLoadSize();
      int[] intArray0 = new int[4];
      diffLongNumEncoder0.setDictionaryLoader(byteArray0, (int) (byte)0, (int) (byte)0, booleanArray0, byteOrder0, (IDictionaryLoader) iDictionaryLoader0, (int) (byte)0, intArray0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((byte)0, (byte)0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.setSequentialLoader(byteArray0, (byte)0, (byte)0, booleanArray0, byteOrder0, (ISequentialLoader) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1742L, 1742L);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[8];
      PrimitiveObjectDictionary primitiveObjectDictionary0 = new PrimitiveObjectDictionary(65535);
      // Undeclared exception!
      diffLongNumEncoder0.setDictionary(byteArray0, 0, 65535, byteOrder0, primitiveObjectDictionary0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(1790L, 1790L);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      PrimitiveObjectDictionary primitiveObjectDictionary0 = new PrimitiveObjectDictionary((byte)0);
      diffLongNumEncoder0.setDictionary(byteArray0, (byte)0, (byte)0, byteOrder0, primitiveObjectDictionary0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((byte)0, (byte)0);
      Long[] longArray0 = new Long[1];
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.toBinary(longArray0, byteArray0, (int) (byte)0, 2995, byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder(9223372036854775803L, 9223372036854775803L);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[9];
      diffLongNumEncoder0.toBinary((Long[]) null, byteArray0, (int) (byte)0, (-3108), byteOrder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[14];
      DiffLongNumEncoder diffLongNumEncoder0 = new DiffLongNumEncoder((byte)0, (byte)0);
      // Undeclared exception!
      try { 
        diffLongNumEncoder0.toBinary((long[]) null, byteArray0, (int) (byte)0, 2097542167, byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DiffLongNumEncoder diffLongNumEncoder0 = null;
      try {
        diffLongNumEncoder0 = new DiffLongNumEncoder((-2785L), 9223372036854773869L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // diff is out of range.
         //
         verifyException("jp.co.yahoo.yosegi.util.io.diffencoder.DiffLongNumEncoder", e);
      }
  }
}
