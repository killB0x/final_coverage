/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 00:42:56 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.IntegerObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.ICellMaker;
import jp.co.yahoo.yosegi.spread.column.PrimitiveCell;
import jp.co.yahoo.yosegi.spread.column.PrimitiveCellManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrimitiveCellManager_ESTest extends PrimitiveCellManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ICellMaker iCellMaker0 = mock(ICellMaker.class, new ViolatedAssumptionAnswer());
      PrimitiveCellManager primitiveCellManager0 = new PrimitiveCellManager(iCellMaker0);
      ByteObj byteObj0 = new ByteObj();
      primitiveCellManager0.add((PrimitiveObject) byteObj0, 309);
      int int0 = primitiveCellManager0.size();
      assertEquals(310, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ICellMaker iCellMaker0 = mock(ICellMaker.class, new ViolatedAssumptionAnswer());
      PrimitiveCellManager primitiveCellManager0 = new PrimitiveCellManager(iCellMaker0);
      ICell<BooleanObj, Object> iCell0 = (ICell<BooleanObj, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iCell0).toString();
      ICell iCell1 = primitiveCellManager0.get(3537, iCell0);
      assertNull(iCell1.getType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ICellMaker iCellMaker0 = mock(ICellMaker.class, new ViolatedAssumptionAnswer());
      doReturn((PrimitiveCell) null).when(iCellMaker0).create(any(jp.co.yahoo.yosegi.message.objects.PrimitiveObject.class));
      PrimitiveCellManager primitiveCellManager0 = new PrimitiveCellManager(iCellMaker0);
      ICell<BooleanObj, BooleanObj> iCell0 = (ICell<BooleanObj, BooleanObj>) mock(ICell.class, new ViolatedAssumptionAnswer());
      ByteObj byteObj0 = new ByteObj();
      primitiveCellManager0.add((PrimitiveObject) byteObj0, 309);
      ICell iCell1 = primitiveCellManager0.get(309, iCell0);
      assertNull(iCell1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrimitiveCellManager primitiveCellManager0 = null;
      try {
        primitiveCellManager0 = new PrimitiveCellManager((ICellMaker) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // ICellMaker does not allow NULL.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.PrimitiveCellManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ICellMaker iCellMaker0 = mock(ICellMaker.class, new ViolatedAssumptionAnswer());
      PrimitiveCellManager primitiveCellManager0 = new PrimitiveCellManager(iCellMaker0);
      int int0 = primitiveCellManager0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ICellMaker iCellMaker0 = mock(ICellMaker.class, new ViolatedAssumptionAnswer());
      PrimitiveCellManager primitiveCellManager0 = new PrimitiveCellManager(iCellMaker0);
      IntegerObj integerObj0 = new IntegerObj((-128));
      // Undeclared exception!
      try { 
        primitiveCellManager0.add((PrimitiveObject) integerObj0, (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ICellMaker iCellMaker0 = mock(ICellMaker.class, new ViolatedAssumptionAnswer());
      PrimitiveCellManager primitiveCellManager0 = new PrimitiveCellManager(iCellMaker0);
      primitiveCellManager0.clear();
  }
}
