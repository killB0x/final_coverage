/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:44:37 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jp.co.yahoo.yosegi.message.parser.text.TextNullParser;
import jp.co.yahoo.yosegi.spread.Spread;
import jp.co.yahoo.yosegi.spread.column.ArrayCell;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadArrayLink;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayCell_ESTest extends ArrayCell_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 340, 0, 0);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getStart();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-410), 3115, 1136);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getStart();
      assertEquals(3115, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-1218), (-1218), 0);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getStart();
      assertEquals((-1218), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpreadArrayLink spreadArrayLink0 = mock(SpreadArrayLink.class, new ViolatedAssumptionAnswer());
      doReturn((Spread) null).when(spreadArrayLink0).getSpread();
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      Spread spread0 = arrayCell0.getSpread();
      assertNull(spread0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Spread spread0 = new Spread();
      TextNullParser textNullParser0 = new TextNullParser();
      spread0.addParserRow(textNullParser0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-150), (-150), (-150));
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      Spread spread1 = arrayCell0.getSpread();
      assertEquals(1, spread1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("x9[SB3");
      Spread spread0 = new Spread(spreadColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 22, 22, 22);
      spread0.setRowCount((-2313));
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      Spread spread1 = arrayCell0.getSpread();
      assertEquals((-2313), spread1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      Spread spread0 = new Spread(iColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-1), (-1), (-1));
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      spread0.addColumn(iColumn0);
      Spread spread1 = arrayCell0.getSpread();
      assertEquals(0, spread1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-1218), (-1218), 0);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      List<ICell> list0 = (List<ICell>)arrayCell0.getRow();
      assertEquals(1218, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 0, 12, 0);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getParentIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 218, 218, 218);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getParentIndex();
      assertEquals(218, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-1218), (-1218), 0);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getEnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 218, 218, 218);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getEnd();
      assertEquals(218, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpreadArrayLink spreadArrayLink0 = mock(SpreadArrayLink.class, new ViolatedAssumptionAnswer());
      doReturn((ICell) null).when(spreadArrayLink0).getArrayRow(anyInt());
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      ICell iCell0 = arrayCell0.getArrayRow(3327612);
      assertNull(iCell0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 0, 0, 64711720);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      // Undeclared exception!
      arrayCell0.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.getSpread();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 2946, 2946, 78875740);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      // Undeclared exception!
      arrayCell0.getRow();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.getRow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.getParentIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.getEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.getArrayRow(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("x9[SB3");
      Spread spread0 = new Spread(spreadColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 22, 22, 22);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      ColumnType columnType0 = arrayCell0.getType();
      assertEquals(ColumnType.ARRAY, columnType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-150), (-150), (-150));
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getParentIndex();
      assertEquals((-150), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Spread spread0 = new Spread();
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, (-150), (-150), (-150));
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      int int0 = arrayCell0.getEnd();
      assertEquals((-150), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("x9[SB3");
      Spread spread0 = new Spread(spreadColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 22, 22, 22);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      List<ICell> list0 = (List<ICell>)arrayCell0.getRow();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("x9[SB3");
      Spread spread0 = new Spread(spreadColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 22, 22, 22);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      ICell iCell0 = arrayCell0.getArrayRow(198);
      assertEquals(ColumnType.NULL, iCell0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      arrayCell0.setRow((SpreadArrayLink) null);
      assertEquals(ColumnType.ARRAY, arrayCell0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayCell arrayCell0 = new ArrayCell((SpreadArrayLink) null);
      // Undeclared exception!
      try { 
        arrayCell0.getStart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpreadColumn spreadColumn0 = new SpreadColumn("x9[SB3");
      Spread spread0 = new Spread(spreadColumn0);
      SpreadArrayLink spreadArrayLink0 = new SpreadArrayLink(spread0, 22, 22, 22);
      ArrayCell arrayCell0 = new ArrayCell(spreadArrayLink0);
      String string0 = arrayCell0.toString();
      assertNotNull(string0);
  }
}
