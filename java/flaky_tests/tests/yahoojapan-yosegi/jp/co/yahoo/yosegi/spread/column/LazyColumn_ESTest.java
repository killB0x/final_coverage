/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:51:33 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.List;
import jp.co.yahoo.yosegi.message.design.FieldType;
import jp.co.yahoo.yosegi.message.design.IField;
import jp.co.yahoo.yosegi.spread.column.ArrayColumn;
import jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.IArrowPrimitiveConnector;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.ICellManager;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.IColumnManager;
import jp.co.yahoo.yosegi.spread.column.LazyColumn;
import jp.co.yahoo.yosegi.spread.column.PrimitiveColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import jp.co.yahoo.yosegi.spread.column.UnionColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazyColumn_ESTest extends LazyColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      lazyColumn0.setColumnName("?");
      assertFalse(lazyColumn0.isDictionary());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      ColumnType columnType1 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType1, "jp.co.yahoo.yosegi.spread.column.LazyColumn");
      IColumn iColumn0 = primitiveColumn0.getColumn(columnType1);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.message.objects.BooleanObj", columnType0, iColumnManager0);
      String string0 = lazyColumn0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      int int0 = lazyColumn0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      ArrayColumn arrayColumn0 = new ArrayColumn("$z/wU5`GMz4f0QYX");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(arrayColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, iColumnManager0);
      IField iField0 = lazyColumn0.getSchema("");
      assertEquals("", iField0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      ColumnType columnType1 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType1, "jp.co.yahoo.yosegi.spread.column.LazyColumn");
      IColumn iColumn0 = primitiveColumn0.getColumn(columnType1);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0, iColumn0, primitiveColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.message.objects.BooleanObj", columnType0, iColumnManager0);
      lazyColumn0.getCellManager();
      lazyColumn0.getSchema();
      IField iField0 = lazyColumn0.getSchema();
      assertEquals(FieldType.FLOAT, iField0.getFieldType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_SPREAD;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.message.design.BytesField", columnType0, iColumnManager0);
      lazyColumn0.setParentsColumn((IColumn) null);
      IColumn iColumn0 = lazyColumn0.getParentsColumn();
      assertNull(iColumn0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getColumn(columnType0);
      UnionColumn unionColumn0 = new UnionColumn(iColumn0);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(unionColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("BOOLEAN", columnType0, iColumnManager0);
      List<IColumn> list0 = lazyColumn0.getListColumn();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, iColumnManager0);
      ColumnType columnType1 = lazyColumn0.getColumnType();
      assertEquals(ColumnType.LONG, columnType1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iColumnManager0).getColumnSize();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      int int0 = lazyColumn0.getColumnSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(654).when(iColumnManager0).getColumnSize();
      LazyColumn lazyColumn0 = new LazyColumn("d", columnType0, iColumnManager0);
      int int0 = lazyColumn0.getColumnSize();
      assertEquals(654, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnType columnType0 = ColumnType.UNION;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn((-46)).when(iColumnManager0).getColumnSize();
      LazyColumn lazyColumn0 = new LazyColumn("This method only supports expanded columns.", columnType0, iColumnManager0);
      int int0 = lazyColumn0.getColumnSize();
      assertEquals((-46), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn((String) null, columnType0, iColumnManager0);
      String string0 = lazyColumn0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn("g02Acn;yczX", columnType0, iColumnManager0);
      String string0 = lazyColumn0.getColumnName();
      assertEquals("g02Acn;yczX", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      ColumnType columnType0 = ColumnType.BYTES;
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, iColumnManager0);
      String string0 = lazyColumn0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn((List<String>) null).when(iColumnManager0).getColumnKeys();
      LazyColumn lazyColumn0 = new LazyColumn("I<[_Wn*%nUd", columnType0, iColumnManager0);
      List<String> list0 = lazyColumn0.getColumnKeys();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      List<String> list0 = arrowPrimitiveColumn0.getColumnKeys();
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(iColumnManager0).getColumnKeys();
      ColumnType columnType0 = ColumnType.SPREAD;
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.message.objects.LongObj", columnType0, iColumnManager0);
      List<String> list1 = lazyColumn0.getColumnKeys();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      IColumn iColumn1 = lazyColumn0.getColumn(columnType0);
      assertSame(iColumn1, iColumn0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      IColumn iColumn1 = lazyColumn0.getColumn("jp.co.yahoo.yosegi.util.RangeBinarySearch");
      assertEquals(0, iColumn1.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnType columnType0 = ColumnType.ARRAY;
      ArrayColumn arrayColumn0 = new ArrayColumn("");
      IColumn iColumn0 = arrayColumn0.getColumn(columnType0);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.spread.column.LazyColumn", columnType0, iColumnManager0);
      IColumn iColumn1 = lazyColumn0.getColumn((-872));
      assertEquals(0, iColumn1.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      ColumnType columnType1 = ColumnType.FLOAT;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType1, "jp.co.yahoo.yosegi.spread.column.LazyColumn");
      IColumn iColumn0 = primitiveColumn0.getColumn(columnType1);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0, iColumn0, primitiveColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.message.objects.BooleanObj", columnType0, iColumnManager0);
      lazyColumn0.getCellManager();
      lazyColumn0.getSchema();
      ICellManager iCellManager0 = lazyColumn0.getCellManager();
      assertNotNull(iCellManager0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      ArrayColumn arrayColumn0 = new ArrayColumn("g02Acn;yczX");
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      doReturn((ICell) null).when(iArrowPrimitiveConnector0).get(anyInt() , any(jp.co.yahoo.yosegi.spread.column.ICell.class));
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(arrayColumn0, arrowPrimitiveColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("g02Acn;yczX", columnType0, iColumnManager0);
      lazyColumn0.setCellManager((ICellManager) null);
      lazyColumn0.get(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "(\f|CclWh41afF[");
      IColumn iColumn0 = primitiveColumn0.getColumn(1838);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("(\f|CclWh41afF[", columnType0, iColumnManager0);
      ICell iCell0 = lazyColumn0.get(0);
      assertNull(iCell0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      int int0 = lazyColumn0.add(columnType0, columnType0, 174);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnType columnType0 = ColumnType.UNION;
      LazyColumn lazyColumn0 = new LazyColumn("?W,)7;[", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn((IColumn) null).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, iColumnManager0);
      ICell<SpreadColumn, SpreadColumn> iCell0 = (ICell<SpreadColumn, SpreadColumn>) mock(ICell.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lazyColumn0.setDefaultCell(iCell0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumn iColumn0 = arrowPrimitiveColumn0.getParentsColumn();
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0, arrowPrimitiveColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn((String) null, columnType0, iColumnManager0);
      ICell<SpreadColumn, Object> iCell0 = (ICell<SpreadColumn, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      lazyColumn0.addCell(columnType0, iCell0, 0);
      // Undeclared exception!
      try { 
        lazyColumn0.setCellManager((ICellManager) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This column is read only.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnType columnType0 = ColumnType.ARRAY;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn((IColumn) null).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("&$h8nd,Lb-wW8%fP?", columnType0, iColumnManager0);
      ICellManager<Object> iCellManager0 = (ICellManager<Object>) mock(ICellManager.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lazyColumn0.setCellManager(iCellManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRUCT;
      LazyColumn lazyColumn0 = new LazyColumn("#%Y!0r]sc_0", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getSchema("#%Y!0r]sc_0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getListColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      IArrowPrimitiveConnector iArrowPrimitiveConnector0 = mock(IArrowPrimitiveConnector.class, new ViolatedAssumptionAnswer());
      ArrowPrimitiveColumn arrowPrimitiveColumn0 = new ArrowPrimitiveColumn(iArrowPrimitiveConnector0);
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(arrowPrimitiveColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("DOUBLE", columnType0, iColumnManager0);
      ICell<SpreadColumn, SpreadColumn> iCell0 = (ICell<SpreadColumn, SpreadColumn>) mock(ICell.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lazyColumn0.addCell(columnType0, iCell0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This column is read only.
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrowPrimitiveColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnType columnType0 = ColumnType.MAP;
      ArrayColumn arrayColumn0 = new ArrayColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(arrayColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, iColumnManager0);
      ICell<Object, SpreadColumn> iCell0 = (ICell<Object, SpreadColumn>) mock(ICell.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lazyColumn0.addCell(columnType0, iCell0, (-2932));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This class only allows additions.
         //
         verifyException("jp.co.yahoo.yosegi.util.RangeBinarySearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.addCell(columnType0, (ICell) null, (-1733));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      ArrayColumn arrayColumn0 = new ArrayColumn("g02Acn;yczX");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(arrayColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("g02Acn;yczX", columnType0, iColumnManager0);
      ColumnType columnType1 = ColumnType.ARRAY;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lazyColumn0.add(columnType1, object0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class jp.co.yahoo.yosegi.message.parser.IParser (java.lang.Object is in module java.base of loader 'bootstrap'; jp.co.yahoo.yosegi.message.parser.IParser is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @38d8cab6)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      ArrayColumn arrayColumn0 = new ArrayColumn("g02Acn;yczX");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(arrayColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("g02Acn;yczX", columnType0, iColumnManager0);
      Object object0 = new Object();
      try { 
        lazyColumn0.add(columnType0, object0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incorrect input data type : java.lang.Object
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.ArrayColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BYTES;
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getColumnKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      ICell<Object, SpreadColumn> iCell0 = (ICell<Object, SpreadColumn>) mock(ICell.class, new ViolatedAssumptionAnswer());
      lazyColumn0.setDefaultCell(iCell0);
      assertEquals("?", lazyColumn0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      IField iField0 = lazyColumn0.getSchema("?");
      assertNull(iField0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColumnType columnType0 = ColumnType.BOOLEAN;
      LazyColumn lazyColumn0 = new LazyColumn((String) null, columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.get(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColumnType columnType0 = ColumnType.DOUBLE;
      PrimitiveColumn primitiveColumn0 = new PrimitiveColumn(columnType0, "");
      IColumn iColumn0 = primitiveColumn0.getColumn("");
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      doReturn(iColumn0).when(iColumnManager0).get();
      LazyColumn lazyColumn0 = new LazyColumn("?", columnType0, iColumnManager0);
      List<IColumn> list0 = lazyColumn0.getListColumn();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnType columnType0 = ColumnType.MAP;
      LazyColumn lazyColumn0 = new LazyColumn("U=2l=ct)7i}NjHK!rP", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getCellManager();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColumnType columnType0 = ColumnType.EMPTY_SPREAD;
      IColumnManager iColumnManager0 = mock(IColumnManager.class, new ViolatedAssumptionAnswer());
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.message.design.BytesField", columnType0, iColumnManager0);
      IColumn iColumn0 = lazyColumn0.getParentsColumn();
      assertEquals(0, iColumn0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColumnType columnType0 = ColumnType.LONG;
      LazyColumn lazyColumn0 = new LazyColumn("?W,)7;[", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getColumn(columnType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRUCT;
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getSchema();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColumnType columnType0 = ColumnType.STRING;
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.spread.column.LazyColumn", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.add(columnType0, "jp.co.yahoo.yosegi.spread.column.LazyColumn", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ColumnType columnType0 = ColumnType.ARRAY;
      LazyColumn lazyColumn0 = new LazyColumn("jp&co.yahoo.yoseg.spread.column.ArrowStringConnector", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getColumn(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnType columnType0 = ColumnType.MAP;
      LazyColumn lazyColumn0 = new LazyColumn("82VJ$[ &<^+/_S", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getColumn("82VJ$[ &<^+/_S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColumnType columnType0 = ColumnType.FLOAT;
      LazyColumn lazyColumn0 = new LazyColumn("", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColumnType columnType0 = ColumnType.UNION;
      LazyColumn lazyColumn0 = new LazyColumn("jp.co.yahoo.yosegi.spread.column.ArrowStringConnector", columnType0, (IColumnManager) null);
      // Undeclared exception!
      try { 
        lazyColumn0.getColumnSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.spread.column.LazyColumn", e);
      }
  }
}
