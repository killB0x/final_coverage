/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:20:25 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.ShortColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortColumnAnalizeResult_ESTest extends ShortColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult((String) null, 589, true, 589, 589, (-1410), (short)3745, (short)3745, 589, 0);
      boolean boolean0 = shortColumnAnalizeResult0.maybeSorted();
      assertEquals(589, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)3745, shortColumnAnalizeResult0.getMin());
      assertEquals((-1410), shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)3745, shortColumnAnalizeResult0.getMax());
      assertEquals(589, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(boolean0);
      assertEquals(1178, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(588, shortColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 15, true, 15, 15, 0, (short)2170, (short)2170, 0, (short)2170);
      int int0 = shortColumnAnalizeResult0.getUniqCount();
      assertEquals((short)2170, shortColumnAnalizeResult0.getMax());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(15, shortColumnAnalizeResult0.getColumnSize());
      assertEquals(0, int0);
      assertEquals(15, shortColumnAnalizeResult0.getRowCount());
      assertEquals(2170, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(15, shortColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("cR-d%\"Z", 3244, true, 3244, 3244, (-500), (short) (-1), (short) (-1), 58, (-1585));
      int int0 = shortColumnAnalizeResult0.getUniqCount();
      assertEquals((short) (-1), shortColumnAnalizeResult0.getMax());
      assertEquals((short) (-1), shortColumnAnalizeResult0.getMin());
      assertEquals(3244, shortColumnAnalizeResult0.getRowCount());
      assertEquals(58, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3244, shortColumnAnalizeResult0.getNullCount());
      assertEquals(3244, shortColumnAnalizeResult0.getColumnSize());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-500), int0);
      assertEquals((-1585), shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 1, true, 5, 5, 5, (short)3397, (short) (-1124), (short) (-1124), 7);
      int int0 = shortColumnAnalizeResult0.getRowEnd();
      assertEquals(7, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, int0);
      assertEquals(10, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((short)3397, shortColumnAnalizeResult0.getMin());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-1124), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(5, shortColumnAnalizeResult0.getNullCount());
      assertEquals(5, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short) (-1124), shortColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 2, false, 5, 2, 15, (short)0, (short)12, (short)12, 2);
      int int0 = shortColumnAnalizeResult0.getRowEnd();
      assertEquals(5, shortColumnAnalizeResult0.getNullCount());
      assertEquals(15, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(12, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short)0, shortColumnAnalizeResult0.getMin());
      assertEquals(2, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, int0);
      assertEquals((short)12, shortColumnAnalizeResult0.getMax());
      assertEquals(4, shortColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      int int0 = shortColumnAnalizeResult0.getRowCount();
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(0, int0);
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 15, true, 15, 15, 0, (short)2170, (short)2170, 0, (short)2170);
      int int0 = shortColumnAnalizeResult0.getRowCount();
      assertEquals(15, int0);
      assertEquals(2170, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(15, shortColumnAnalizeResult0.getNullCount());
      assertEquals(15, shortColumnAnalizeResult0.getColumnSize());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult((String) null, 589, true, 589, 589, (-1410), (short)3745, (short)3745, 589, 0);
      int int0 = shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(0, int0);
      assertEquals((short)3745, shortColumnAnalizeResult0.getMax());
      assertEquals(589, shortColumnAnalizeResult0.getRowCount());
      assertEquals((short)3745, shortColumnAnalizeResult0.getMin());
      assertEquals(589, shortColumnAnalizeResult0.getNullCount());
      assertEquals(589, shortColumnAnalizeResult0.getColumnSize());
      assertEquals((-1410), shortColumnAnalizeResult0.getUniqCount());
      assertEquals(589, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 15, true, 15, 15, 0, (short)2170, (short)2170, 0, (short)2170);
      int int0 = shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(15, shortColumnAnalizeResult0.getNullCount());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(2170, int0);
      assertEquals(15, shortColumnAnalizeResult0.getRowCount());
      assertEquals(14, shortColumnAnalizeResult0.getRowEnd());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 15, true, 15, 15, 0, (short)2170, (short)2170, 0, (short)2170);
      int int0 = shortColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals((short)2170, shortColumnAnalizeResult0.getMin());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMax());
      assertEquals(15, shortColumnAnalizeResult0.getColumnSize());
      assertEquals(0, int0);
      assertEquals(2170, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(15, shortColumnAnalizeResult0.getNullCount());
      assertEquals(30, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("KCl06xW%&0R`[e]^&nv", 511, false, 511, 511, 511, (short) (-162), (short) (-162), (short) (-162), 511);
      int int0 = shortColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals((short) (-162), shortColumnAnalizeResult0.getMin());
      assertEquals((-162), int0);
      assertEquals(511, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(511, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(1022, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(511, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short) (-162), shortColumnAnalizeResult0.getMax());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(510, shortColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult(":6Lw|", 0, false, 0, 0, 0, (short) (-1244), (short) (-1244), 0, 0);
      int int0 = shortColumnAnalizeResult0.getNullCount();
      assertEquals((short) (-1244), shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, int0);
      assertEquals(0, shortColumnAnalizeResult0.getRowCount());
      assertEquals(0, shortColumnAnalizeResult0.getColumnSize());
      assertEquals((short) (-1244), shortColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", (-1), true, (-280), 0, (-280), (short)2006, (short) (-4337), (-280), (-1785));
      int int0 = shortColumnAnalizeResult0.getNullCount();
      assertEquals((-280), int0);
      assertEquals((-1785), shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-280), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((short)2006, shortColumnAnalizeResult0.getMin());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-2), shortColumnAnalizeResult0.getRowEnd());
      assertEquals((short) (-4337), shortColumnAnalizeResult0.getMax());
      assertEquals((-280), shortColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, true, 1945, (-849), 12, (short)0, (short)0, (-849), 0);
      short short0 = shortColumnAnalizeResult0.getMin();
      assertEquals((-849), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals(1945, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)0, short0);
      assertEquals(12, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)0, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1698), shortColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.ShortColumnAnalizeResult", 1775, true, 1571, (-1294), 806, (short) (-1), (short) (-1), 2012, 421);
      short short0 = shortColumnAnalizeResult0.getMin();
      assertEquals((short) (-1), short0);
      assertEquals((short) (-1), shortColumnAnalizeResult0.getMax());
      assertEquals(1571, shortColumnAnalizeResult0.getNullCount());
      assertEquals(2012, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-2588), shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1774, shortColumnAnalizeResult0.getRowEnd());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(806, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(421, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, true, 1945, (-849), 12, (short)0, (short)0, (-849), 0);
      short short0 = shortColumnAnalizeResult0.getMax();
      assertEquals(1945, shortColumnAnalizeResult0.getNullCount());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((short)0, short0);
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-849), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals((short)0, shortColumnAnalizeResult0.getMin());
      assertEquals(12, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((-849), shortColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("cR-d%\"Z", 3244, true, 3244, 3244, (-500), (short) (-1), (short) (-1), 58, (-1585));
      short short0 = shortColumnAnalizeResult0.getMax();
      assertEquals(3243, shortColumnAnalizeResult0.getRowEnd());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-1585), shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((short) (-1), short0);
      assertEquals((short) (-1), shortColumnAnalizeResult0.getMin());
      assertEquals((-500), shortColumnAnalizeResult0.getUniqCount());
      assertEquals(58, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3244, shortColumnAnalizeResult0.getNullCount());
      assertEquals(6488, shortColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 15, true, 15, 15, 0, (short)2170, (short)2170, 0, (short)2170);
      int int0 = shortColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(30, int0);
      assertEquals((short)2170, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMax());
      assertEquals(2170, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(15, shortColumnAnalizeResult0.getNullCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(15, shortColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.ShortColumnAnalizeResult", 1775, true, 1571, (-1294), 806, (short) (-1), (short) (-1), 2012, 421);
      int int0 = shortColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(1571, shortColumnAnalizeResult0.getNullCount());
      assertEquals(806, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(1775, shortColumnAnalizeResult0.getColumnSize());
      assertEquals((-2588), int0);
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(421, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((short) (-1), shortColumnAnalizeResult0.getMax());
      assertEquals(2012, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short) (-1), shortColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("y6~&U>0aidJ}", 2484, false, 2, 0, 0, (short)0, (short)0, 2, 0);
      int int0 = shortColumnAnalizeResult0.getColumnSize();
      assertEquals((short)0, shortColumnAnalizeResult0.getMin());
      assertEquals(2, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2, shortColumnAnalizeResult0.getNullCount());
      assertEquals(2484, int0);
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((short)0, shortColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("V}mF`t%$&gwsDZ[ZX_", (-648), false, (-648), (-648), (-648), (short)0, (short)0, 2292, (-648));
      int int0 = shortColumnAnalizeResult0.getColumnSize();
      assertEquals((short)0, shortColumnAnalizeResult0.getMin());
      assertEquals((short)0, shortColumnAnalizeResult0.getMax());
      assertEquals((-648), shortColumnAnalizeResult0.getNullCount());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-648), shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-648), shortColumnAnalizeResult0.getUniqCount());
      assertEquals(2292, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-648), int0);
      assertEquals((-648), shortColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult((String) null, 589, true, 589, 589, (-1410), (short)3745, (short)3745, 589, 0);
      shortColumnAnalizeResult0.getColumnName();
      assertEquals(589, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(589, shortColumnAnalizeResult0.getNullCount());
      assertEquals(588, shortColumnAnalizeResult0.getRowEnd());
      assertEquals((-1410), shortColumnAnalizeResult0.getUniqCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((short)3745, shortColumnAnalizeResult0.getMax());
      assertEquals(589, shortColumnAnalizeResult0.getRowCount());
      assertEquals((short)3745, shortColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("mAK=^!q|q:Sls", 0, false, 0, 0, 0, (short)11, (short)11, 0, 0);
      shortColumnAnalizeResult0.getColumnName();
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short)11, shortColumnAnalizeResult0.getMax());
      assertEquals((short)11, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(0, shortColumnAnalizeResult0.getColumnSize());
      assertEquals(0, shortColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 15, true, 15, 15, 0, (short)2170, (short)2170, 0, (short)2170);
      int int0 = shortColumnAnalizeResult0.getNullCount();
      assertEquals((short)2170, shortColumnAnalizeResult0.getMin());
      assertEquals((short)2170, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(30, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2170, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(15, int0);
      assertEquals(14, shortColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      shortColumnAnalizeResult0.getColumnType();
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getColumnSize());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      int int0 = shortColumnAnalizeResult0.getColumnSize();
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(0, int0);
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      int int0 = shortColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(0, int0);
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      boolean boolean0 = shortColumnAnalizeResult0.maybeSorted();
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getColumnSize());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      short short0 = shortColumnAnalizeResult0.getMax();
      assertEquals((short)950, short0);
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getRowCount());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      int int0 = shortColumnAnalizeResult0.getRowEnd();
      assertEquals((-1), int0);
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getRowCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      int int0 = shortColumnAnalizeResult0.getRowStart();
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals(0, int0);
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getRowCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      int int0 = shortColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(950, int0);
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("KCl06xW%&0R`[e]^&nv", 511, false, 511, 511, 511, (short) (-162), (short) (-162), (short) (-162), 511);
      int int0 = shortColumnAnalizeResult0.getUniqCount();
      assertEquals(511, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-162), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(511, int0);
      assertEquals((short) (-162), shortColumnAnalizeResult0.getMax());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(510, shortColumnAnalizeResult0.getRowEnd());
      assertEquals(511, shortColumnAnalizeResult0.getRowCount());
      assertEquals(511, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short) (-162), shortColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, false, 0, 0, 0, (short)950, (short)950, (short)950, (short)950);
      shortColumnAnalizeResult0.getColumnName();
      assertEquals((short)950, shortColumnAnalizeResult0.getMin());
      assertEquals((-1), shortColumnAnalizeResult0.getRowEnd());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals((short)950, shortColumnAnalizeResult0.getMax());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(950, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("V}mF`t%$&gwsDZ[ZX_", (-648), true, (-648), (-648), (-648), (short)0, (short)0, (-648), (-648));
      int int0 = shortColumnAnalizeResult0.getRowCount();
      assertEquals((-648), shortColumnAnalizeResult0.getUniqCount());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-648), int0);
      assertEquals((-648), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short)0, shortColumnAnalizeResult0.getMin());
      assertEquals((-648), shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-648), shortColumnAnalizeResult0.getColumnSize());
      assertEquals((short)0, shortColumnAnalizeResult0.getMax());
      assertEquals((-648), shortColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult("", 0, true, 0, 0, 0, (short)1, (short)1, 0, 0);
      short short0 = shortColumnAnalizeResult0.getMin();
      assertEquals((short)1, short0);
      assertEquals(0, shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((short)1, shortColumnAnalizeResult0.getMax());
      assertEquals(0, shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, shortColumnAnalizeResult0.getColumnSize());
      assertTrue(shortColumnAnalizeResult0.maybeSorted());
      assertEquals(0, shortColumnAnalizeResult0.getUniqCount());
      assertEquals(0, shortColumnAnalizeResult0.getNullCount());
      assertEquals(0, shortColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShortColumnAnalizeResult shortColumnAnalizeResult0 = new ShortColumnAnalizeResult(")t=]9ch.h{hobJL", (short) (-162), false, (short) (-162), (short) (-162), (short) (-162), (short) (-162), (short) (-162), (short) (-162), (short) (-162));
      int int0 = shortColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals((-162), shortColumnAnalizeResult0.getUniqCount());
      assertEquals((-162), shortColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((short) (-162), shortColumnAnalizeResult0.getMax());
      assertFalse(shortColumnAnalizeResult0.maybeSorted());
      assertEquals((-162), shortColumnAnalizeResult0.getRowCount());
      assertEquals((-162), int0);
      assertEquals((short) (-162), shortColumnAnalizeResult0.getMin());
      assertEquals((-162), shortColumnAnalizeResult0.getNullCount());
      assertEquals((-163), shortColumnAnalizeResult0.getRowEnd());
  }
}
