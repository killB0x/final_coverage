/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:41:44 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringColumnAnalizeResult_ESTest extends StringColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 4149, false, 0, 4149, 0, 0, 0, 0, 0, 0, 0, 4149, 4149, (-1217), (-1217), "", "", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      
      boolean boolean0 = stringColumnAnalizeResult0.maybeSorted();
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("DV/S=`y__Zia", 0, true, 0, (-4), (-300), 0, 0, 0, 499, 3149, 0, 3149, 0, (-300), 0, (String) null, "DV/S=`y__Zia", 3565, 3149, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-4), stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(3149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(3149, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(3149, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getMax());
      assertEquals(499, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-300), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3565, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-300), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getColumnName());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      
      int int0 = stringColumnAnalizeResult0.getUniqUtf8ByteSize();
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-4), stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(3149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(3149, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(3149, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getMax());
      assertEquals(499, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-300), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3565, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-300), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getColumnName());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("O3.]M_$fdat>", 0, true, 3776, (-1), 10, 0, (-1), 3776, 0, (-3132), (-1106), 0, 328, 0, 2781, "O3.]M_$fdat>", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", (-1), 328, 2781);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(328, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(3776, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-3132), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(328, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(10, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(3776, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2781, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1106), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("O3.]M_$fdat>", stringColumnAnalizeResult0.getMin());
      assertEquals("O3.]M_$fdat>", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2781, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      
      int int0 = stringColumnAnalizeResult0.getUniqUtf8ByteSize();
      assertEquals(328, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(3776, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-3132), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(328, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(10, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(3776, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2781, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1106), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-1), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("O3.]M_$fdat>", stringColumnAnalizeResult0.getMin());
      assertEquals("O3.]M_$fdat>", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2781, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1106), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 4149, false, 0, 4149, 0, 0, 0, 0, 0, 0, 0, 4149, 4149, (-1217), (-1217), "", "", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      
      int int0 = stringColumnAnalizeResult0.getUniqLogicalDataSize();
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2004, false, 1194, 1194, 2004, 1194, 1194, 1194, 2004, (-1230), 1194, 2770, 0, 2770, 598, "", "", 590, 2770, 598);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1194, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(598, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(590, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1230), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2004, stringColumnAnalizeResult0.getColumnSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1194, stringColumnAnalizeResult0.getNullCount());
      assertEquals(1194, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2770, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1194, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2770, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(1194, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2004, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(598, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1194, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2770, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2004, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      
      int int0 = stringColumnAnalizeResult0.getUniqLogicalDataSize();
      assertEquals(1194, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(598, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(590, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1230), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2004, stringColumnAnalizeResult0.getColumnSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1194, stringColumnAnalizeResult0.getNullCount());
      assertEquals(1194, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2770, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1194, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2770, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(1194, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2004, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(598, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1194, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2770, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2004, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1230), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 4149, false, 0, 4149, 0, 0, 0, 0, 0, 0, 0, 4149, 4149, (-1217), (-1217), "", "", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      
      int int0 = stringColumnAnalizeResult0.getUniqCount();
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 2333, false, 0, (-5727), (-5727), (-5727), 1981, (-5727), (-5727), 0, (-3673), 0, 1, (-115), (-115), "", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 1, 0, 1489);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1489, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-3673), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-5727), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowCount());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals((-115), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowEnd());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-115), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2333, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(1981, stringColumnAnalizeResult0.getRowStart());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-5727), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-5727), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      
      int int0 = stringColumnAnalizeResult0.getUniqCount();
      assertEquals(1489, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-3673), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-5727), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowCount());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals((-115), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowEnd());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-115), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2333, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(1981, stringColumnAnalizeResult0.getRowStart());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-5727), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-5727), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-5727), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("$VALUES", (-2555), false, 0, (-2555), (-2555), 1620, 3049, 0, 1, (-2555), (-541), 0, 1, 0, 0, "", ">(", 0, (-4665), (-541));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals((-541), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(3049, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("$VALUES", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-4665), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals((-2555), stringColumnAnalizeResult0.getRowCount());
      assertEquals(">(", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1620, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-541), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-2555), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      
      int int0 = stringColumnAnalizeResult0.getTotalUtf8ByteSize();
      assertEquals((-541), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(3049, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("$VALUES", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-4665), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals((-2555), stringColumnAnalizeResult0.getRowCount());
      assertEquals(">(", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1620, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-541), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-2555), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 2333, false, 0, (-5727), (-5727), (-5727), 1981, (-5727), (-5727), 0, (-3673), 0, 1, (-115), (-115), "", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 1, 0, 1489);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1981, stringColumnAnalizeResult0.getRowStart());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-5727), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-5727), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-5727), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1489, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-3673), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2333, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-115), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-115), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      
      int int0 = stringColumnAnalizeResult0.getTotalUtf8ByteSize();
      assertEquals(1981, stringColumnAnalizeResult0.getRowStart());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-5727), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-5727), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-5727), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-5727), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1489, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-3673), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2333, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-115), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-115), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-5727), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("|hs$I>R q\"", 2994, true, 2994, 1, (-1), 1, 0, 0, 2994, 0, 2994, 0, 1, 2994, (-1), "={q%=6C;Z?", "*1dDWz}^&M\",^NA{L", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      
      int int0 = stringColumnAnalizeResult0.getRowStart();
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("m2yh_", 0, false, 0, (-1), (-1), 0, (-4100), (-307), 489, 952, 489, 0, 0, 8, (-4100), "`NO(t?yU6Z$", "", 0, 0, (-4100));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(489, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(8, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-4100), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("m2yh_", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(489, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("`NO(t?yU6Z$", stringColumnAnalizeResult0.getMin());
      assertEquals((-4100), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-4100), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(952, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-307), stringColumnAnalizeResult0.getRowEnd());
      
      int int0 = stringColumnAnalizeResult0.getRowStart();
      assertEquals(489, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(8, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-4100), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("m2yh_", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(489, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("`NO(t?yU6Z$", stringColumnAnalizeResult0.getMin());
      assertEquals((-4100), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-4100), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(952, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-307), stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-4100), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("|hs$I>R q\"", 2994, true, 2994, 1, (-1), 1, 0, 0, 2994, 0, 2994, 0, 1, 2994, (-1), "={q%=6C;Z?", "*1dDWz}^&M\",^NA{L", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      
      int int0 = stringColumnAnalizeResult0.getRowEnd();
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("qU!Sf#=@*ses", 3409, false, (-1142), (-2580), (-2580), 197, (-1), (-1), 0, 3409, 197, (-1), (-1), (-1), 1703, "bGe{?cFTSp^yF'OjgAH", "bGe{?cFTSp^yF'OjgAH", 1703, 1276, 3409);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1276, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals("bGe{?cFTSp^yF'OjgAH", stringColumnAnalizeResult0.getMin());
      assertEquals(197, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("qU!Sf#=@*ses", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(3409, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(197, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(3409, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("bGe{?cFTSp^yF'OjgAH", stringColumnAnalizeResult0.getMax());
      assertEquals(3409, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-2580), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1), stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1703, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1703, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-1142), stringColumnAnalizeResult0.getNullCount());
      assertEquals((-2580), stringColumnAnalizeResult0.getUniqCount());
      
      int int0 = stringColumnAnalizeResult0.getRowEnd();
      assertEquals(1276, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals("bGe{?cFTSp^yF'OjgAH", stringColumnAnalizeResult0.getMin());
      assertEquals(197, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("qU!Sf#=@*ses", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(3409, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(197, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(3409, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("bGe{?cFTSp^yF'OjgAH", stringColumnAnalizeResult0.getMax());
      assertEquals(3409, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-2580), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1), stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1703, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1703, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-1142), stringColumnAnalizeResult0.getNullCount());
      assertEquals((-2580), stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("INTEGER", 0, false, 0, 0, 2617, 2617, 0, 2986, 2617, 2617, 1370, (-2962), 16, 16, (-400), "V]i:?LY\"<p~&e{|h~`V", "DTOY#\"wxX(5#9bc", 0, (-1), 16);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2617, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals("DTOY#\"wxX(5#9bc", stringColumnAnalizeResult0.getMax());
      assertEquals((-1), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2986, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1370, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("V]i:?LY\"<p~&e{|h~`V", stringColumnAnalizeResult0.getMin());
      assertEquals(16, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals("INTEGER", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-2962), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2617, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2617, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(16, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-400), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2617, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(16, stringColumnAnalizeResult0.getMaxCharLength());
      
      int int0 = stringColumnAnalizeResult0.getRowCount();
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2617, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals("DTOY#\"wxX(5#9bc", stringColumnAnalizeResult0.getMax());
      assertEquals((-1), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2986, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1370, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("V]i:?LY\"<p~&e{|h~`V", stringColumnAnalizeResult0.getMin());
      assertEquals(16, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals("INTEGER", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-2962), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2617, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2617, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(16, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-400), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2617, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(16, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 4149, false, 0, 4149, 0, 0, 0, 0, 0, 0, 0, 4149, 4149, (-1217), (-1217), "", "", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      
      int int0 = stringColumnAnalizeResult0.getRowCount();
      assertEquals(4149, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(4149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1217), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(4149, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(4149, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1217), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(4149, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, 0, false, 0, 17, 2992, 2992, 0, 490, 1642, (-2586), 3104, 17, 979, 490, 2992, (String) null, ",qPMb&lVmG7X", 0, 490, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(",qPMb&lVmG7X", stringColumnAnalizeResult0.getMax());
      assertEquals(2992, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(490, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(490, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals((-2586), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1642, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(490, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(17, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2992, stringColumnAnalizeResult0.getUniqCount());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals(17, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(3104, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2992, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(979, stringColumnAnalizeResult0.getMaxCharLength());
      
      int int0 = stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(",qPMb&lVmG7X", stringColumnAnalizeResult0.getMax());
      assertEquals(2992, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(490, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(490, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals((-2586), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1642, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(490, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(17, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2992, stringColumnAnalizeResult0.getUniqCount());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals(17, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(3104, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2992, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(979, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(490, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, false, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), (-1699), 2287, (-1699), "", "", (-1699), (-1699), (-1699));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1699), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      
      int int0 = stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1699), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1699), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 470, false, 0, (-105), 470, (-105), (-4611), 662, 331, 0, (-1), 0, 0, 2914, (-1560), "", "", (-202), (-105), 1811);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2914, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-105), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1560), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(470, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(331, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-105), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-4611), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(662, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-202), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-105), stringColumnAnalizeResult0.getRowCount());
      assertEquals(470, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1811, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      
      int int0 = stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes();
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2914, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-105), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1560), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(470, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(331, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-105), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-4611), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(662, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-202), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-105), stringColumnAnalizeResult0.getRowCount());
      assertEquals(470, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1811, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(1811, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, 0, true, 2097, 2097, 368, 2341, 0, 0, 0, 0, 2097, 2097, (-1648), 0, 0, "!0FSX>([K*z7", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 0, 0, (-1648));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(368, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2097, stringColumnAnalizeResult0.getMinCharLength());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals(2097, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1648), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals("!0FSX>([K*z7", stringColumnAnalizeResult0.getMin());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(2097, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2097, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2341, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1648), stringColumnAnalizeResult0.getMaxCharLength());
      
      int int0 = stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes();
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(368, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2097, stringColumnAnalizeResult0.getMinCharLength());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals(2097, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1648), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals("!0FSX>([K*z7", stringColumnAnalizeResult0.getMin());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(2097, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2097, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2341, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1648), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals((-1648), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("|hs$I>R q\"", 2994, true, 2994, 1, (-1), 1, 0, 0, 2994, 0, 2994, 0, 1, 2994, (-1), "={q%=6C;Z?", "*1dDWz}^&M\",^NA{L", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      
      int int0 = stringColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 470, false, 0, (-105), 470, (-105), (-4611), 662, 331, 0, (-1), 0, 0, 2914, (-1560), "", "", (-202), (-105), 1811);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2914, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1560), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(470, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(470, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-105), stringColumnAnalizeResult0.getRowCount());
      assertEquals(1811, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(662, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(331, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-202), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-105), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-105), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-4611), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      
      int int0 = stringColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2914, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1560), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(470, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(470, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-105), stringColumnAnalizeResult0.getRowCount());
      assertEquals(1811, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(662, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(331, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-202), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-105), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-105), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-4611), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-202), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("$VALUES", (-2555), false, 0, (-2555), (-2555), 1620, 3049, 0, 1, (-2555), (-541), 0, 1, 0, 0, "", ">(", 0, (-4665), (-541));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals((-541), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(">(", stringColumnAnalizeResult0.getMax());
      assertEquals("$VALUES", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-4665), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-2555), stringColumnAnalizeResult0.getRowCount());
      assertEquals(3049, stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-541), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(1620, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-2555), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      
      int int0 = stringColumnAnalizeResult0.getNullCount();
      assertEquals((-541), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(">(", stringColumnAnalizeResult0.getMax());
      assertEquals("$VALUES", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-4665), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-2555), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-2555), stringColumnAnalizeResult0.getRowCount());
      assertEquals(3049, stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-541), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(1620, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-2555), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("%|cMCw{", 2094, false, (-260), 2094, 2094, (-260), 0, 2094, 8, (-394), (-3053), (-3053), 0, 1438, (-1256), "s 5!cg{(4@:", "", (-394), (-1256), 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1438, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2094, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2094, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-260), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("%|cMCw{", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-3053), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(8, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-260), stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1256), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-394), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-3053), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2094, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-1256), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-394), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("s 5!cg{(4@:", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2094, stringColumnAnalizeResult0.getColumnSize());
      
      int int0 = stringColumnAnalizeResult0.getNullCount();
      assertEquals(1438, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2094, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2094, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-260), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("%|cMCw{", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-3053), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(8, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-260), stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1256), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-394), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-3053), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2094, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-1256), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-394), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("s 5!cg{(4@:", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2094, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-260), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("_", (-1086), true, 1410, (-1086), 1410, 1410, 2257, 2257, 5, (-357), 18, 18, (-1086), 2257, 18, "_", (String) null, 5, (-357), 136);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2257, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1086), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals("_", stringColumnAnalizeResult0.getMin());
      assertEquals(18, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(136, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2257, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("_", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1086), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(18, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(18, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1410, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2257, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1086), stringColumnAnalizeResult0.getRowCount());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals(5, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1410, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(5, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-357), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-357), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1410, stringColumnAnalizeResult0.getNullCount());
      
      int int0 = stringColumnAnalizeResult0.getMinUtf8Bytes();
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2257, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1086), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals("_", stringColumnAnalizeResult0.getMin());
      assertEquals(18, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(136, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2257, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("_", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1086), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(18, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(18, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1410, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2257, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1086), stringColumnAnalizeResult0.getRowCount());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals(5, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1410, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(5, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-357), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-357), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1410, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2257, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 0, true, 3007, 0, 3007, (-1), 2210, 634, (-1), 582, 582, (-3393), 1, (-3393), 0, "", "", 0, 634, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(3007, stringColumnAnalizeResult0.getNullCount());
      assertEquals(634, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2210, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(582, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(634, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(3007, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(582, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-3393), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-3393), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      
      int int0 = stringColumnAnalizeResult0.getMinUtf8Bytes();
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(3007, stringColumnAnalizeResult0.getNullCount());
      assertEquals(634, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2210, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(582, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(634, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(3007, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(582, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-3393), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-3393), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-3393), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("|hs$I>R q\"", 2994, true, 2994, 1, (-1), 1, 0, 0, 2994, 0, 2994, 0, 1, 2994, (-1), "={q%=6C;Z?", "*1dDWz}^&M\",^NA{L", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      
      int int0 = stringColumnAnalizeResult0.getMinCharLength();
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2004, false, 1194, 1194, 2004, 1194, 1194, 1194, 2004, (-1230), 1194, 2770, 0, 2770, 598, "", "", 590, 2770, 598);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1194, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2770, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2004, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1194, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2004, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1194, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(598, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(598, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2770, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1230), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1194, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1194, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(590, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2770, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2004, stringColumnAnalizeResult0.getColumnSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1194, stringColumnAnalizeResult0.getRowCount());
      
      int int0 = stringColumnAnalizeResult0.getMinCharLength();
      assertEquals(1194, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2770, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2004, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1194, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2004, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1194, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(598, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(598, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2770, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1230), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1194, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1194, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(590, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2770, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2004, stringColumnAnalizeResult0.getColumnSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1194, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2770, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("k24;{cNZWn\"B", (-2281), false, (-2281), (-1), 0, 0, 0, 72, 0, (-2193), 0, 0, 0, 0, (-2281), (String) null, (String) null, 1, 0, (-773));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals((-2281), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-773), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(72, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals((-2193), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-2281), stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-2281), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("k24;{cNZWn\"B", stringColumnAnalizeResult0.getColumnName());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      
      String string0 = stringColumnAnalizeResult0.getMin();
      assertNull(string0);
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals((-2281), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-773), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(72, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals((-2193), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-2281), stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-2281), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("k24;{cNZWn\"B", stringColumnAnalizeResult0.getColumnName());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("?L[40V.;jv!:|m=-v", 3, true, 3, (-1799), (-1799), 3, (-1799), 1862, (-157), 0, (-1799), 1466, 0, 0, 2747, "?L[40V.;jv!:|m=-v", "Y[*&Cax$*T~~", 1466, 1466, (-1799));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      
      String string0 = stringColumnAnalizeResult0.getMin();
      assertNotNull(string0);
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("?L[40V.;jv!:|m=-v", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, 0, true, 2097, 2097, 368, 2341, 0, 0, 0, 0, 2097, 2097, (-1648), 0, 0, "!0FSX>([K*z7", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 0, 0, (-1648));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2097, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1648), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(368, stringColumnAnalizeResult0.getUniqCount());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals(2097, stringColumnAnalizeResult0.getRowCount());
      assertEquals("!0FSX>([K*z7", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2097, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2097, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1648), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2341, stringColumnAnalizeResult0.getLogicalDataSize());
      
      int int0 = stringColumnAnalizeResult0.getMaxUtf8Bytes();
      assertEquals(2097, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1648), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(368, stringColumnAnalizeResult0.getUniqCount());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals(2097, stringColumnAnalizeResult0.getRowCount());
      assertEquals("!0FSX>([K*z7", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2097, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2097, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1648), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2341, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2180, false, (-2303), (-2303), (-2303), 17, 3458, 17, (-2303), 17, 3433, 0, (-506), 3262, (-145), "X9N7;3", (String) null, 1199, (-506), 1199);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals("X9N7;3", stringColumnAnalizeResult0.getMin());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-506), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-2303), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-2303), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-506), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1199, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(3433, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(17, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3458, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2180, stringColumnAnalizeResult0.getColumnSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-2303), stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-2303), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1199, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-145), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(17, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(3262, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(17, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      
      int int0 = stringColumnAnalizeResult0.getMaxUtf8Bytes();
      assertEquals("X9N7;3", stringColumnAnalizeResult0.getMin());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-506), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-2303), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-2303), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-506), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1199, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(3433, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(17, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3458, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2180, stringColumnAnalizeResult0.getColumnSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-2303), stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-2303), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(1199, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-145), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(17, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(3262, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(17, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-145), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("?L[40V.;jv!:|m=-v", 3, true, 3, (-1799), (-1799), 3, (-1799), 1862, (-157), 0, (-1799), 1466, 0, 0, 2747, "?L[40V.;jv!:|m=-v", "Y[*&Cax$*T~~", 1466, 1466, (-1799));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      
      int int0 = stringColumnAnalizeResult0.getMaxCharLength();
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, 0, true, 2097, 2097, 368, 2341, 0, 0, 0, 0, 2097, 2097, (-1648), 0, 0, "!0FSX>([K*z7", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", 0, 0, (-1648));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals("!0FSX>([K*z7", stringColumnAnalizeResult0.getMin());
      assertEquals(2097, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2097, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2097, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(368, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1648), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2341, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2097, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1648), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      
      int int0 = stringColumnAnalizeResult0.getMaxCharLength();
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals("!0FSX>([K*z7", stringColumnAnalizeResult0.getMin());
      assertEquals(2097, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2097, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2097, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(368, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1648), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2341, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2097, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1648), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1648), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("k24;{cNZWn\"B", (-2281), false, (-2281), (-1), 0, 0, 0, 72, 0, (-2193), 0, 0, 0, 0, (-2281), (String) null, (String) null, 1, 0, (-773));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-2281), stringColumnAnalizeResult0.getColumnSize());
      assertEquals("k24;{cNZWn\"B", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-2193), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-2281), stringColumnAnalizeResult0.getNullCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals((-2281), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-773), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(72, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      
      String string0 = stringColumnAnalizeResult0.getMax();
      assertNull(string0);
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertNull(stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-2281), stringColumnAnalizeResult0.getColumnSize());
      assertEquals("k24;{cNZWn\"B", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-2193), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-2281), stringColumnAnalizeResult0.getNullCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals((-2281), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-773), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(72, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), 2287, 2287, 2287, "", "", (-1699), 2287, 2287);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      
      String string0 = stringColumnAnalizeResult0.getMax();
      assertNotNull(string0);
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 1, true, 22, 0, 0, 0, 0, 0, 0, 1, 18, 0, 0, 1, 1, "", "s}rK\"WL_xq55Mt", 1, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(18, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("s}rK\"WL_xq55Mt", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(1, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(1, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(22, stringColumnAnalizeResult0.getNullCount());
      
      int int0 = stringColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(18, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("s}rK\"WL_xq55Mt", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(1, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(1, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(22, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", (-1988), false, (-1988), (-1), (-1254), (-1988), (-1), (-1988), (-1988), 1, 1, 3711, 1, 0, (-1988), " KhBaVAp|&9rU-(", "tX7", 3711, (-1988), 2);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals((-1988), stringColumnAnalizeResult0.getNullCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(" KhBaVAp|&9rU-(", stringColumnAnalizeResult0.getMin());
      assertEquals((-1988), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1988), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1988), stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(3711, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1988), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1988), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1988), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(3711, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1254), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("tX7", stringColumnAnalizeResult0.getMax());
      
      int int0 = stringColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-1988), stringColumnAnalizeResult0.getNullCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(" KhBaVAp|&9rU-(", stringColumnAnalizeResult0.getMin());
      assertEquals((-1988), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-1988), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1988), stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(1, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(3711, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1988), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1988), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1988), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(3711, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1254), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("tX7", stringColumnAnalizeResult0.getMax());
      assertEquals((-1988), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("DV/S=`y__Zia", 0, true, 0, (-4), (-300), 0, 0, 0, 499, 3149, 0, 3149, 0, (-300), 0, (String) null, "DV/S=`y__Zia", 3565, 3149, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getColumnName());
      assertEquals(3149, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3149, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(3565, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-4), stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(3149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-300), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-300), stringColumnAnalizeResult0.getUniqCount());
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getMax());
      assertEquals(499, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      
      int int0 = stringColumnAnalizeResult0.getColumnSize();
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getColumnName());
      assertEquals(3149, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3149, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(3565, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-4), stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(3149, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-300), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-300), stringColumnAnalizeResult0.getUniqCount());
      assertEquals("DV/S=`y__Zia", stringColumnAnalizeResult0.getMax());
      assertEquals(499, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", (-1988), false, (-1988), (-1), (-1254), (-1988), (-1), (-1988), (-1988), 1, 1, 3711, 1, 0, (-1988), " KhBaVAp|&9rU-(", "tX7", 3711, (-1988), 2);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1988), stringColumnAnalizeResult0.getNullCount());
      assertEquals(2, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1988), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1988), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1988), stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1988), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1988), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals(" KhBaVAp|&9rU-(", stringColumnAnalizeResult0.getMin());
      assertEquals((-1988), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(3711, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("tX7", stringColumnAnalizeResult0.getMax());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(3711, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1254), stringColumnAnalizeResult0.getUniqCount());
      
      int int0 = stringColumnAnalizeResult0.getColumnSize();
      assertEquals((-1), stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1988), stringColumnAnalizeResult0.getNullCount());
      assertEquals(2, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1988), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1988), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1988), stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1988), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1988), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1), stringColumnAnalizeResult0.getRowCount());
      assertEquals(" KhBaVAp|&9rU-(", stringColumnAnalizeResult0.getMin());
      assertEquals((-1988), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(3711, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals("tX7", stringColumnAnalizeResult0.getMax());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(3711, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1254), stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1988), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult((String) null, 0, false, 0, 17, 2992, 2992, 0, 490, 1642, (-2586), 3104, 17, 979, 490, 2992, (String) null, ",qPMb&lVmG7X", 0, 490, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(490, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2992, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(",qPMb&lVmG7X", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(490, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(979, stringColumnAnalizeResult0.getMaxCharLength());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals((-2586), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2992, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3104, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(17, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(490, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1642, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(17, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2992, stringColumnAnalizeResult0.getUniqCount());
      
      String string0 = stringColumnAnalizeResult0.getColumnName();
      assertNull(string0);
      assertEquals(490, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2992, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(",qPMb&lVmG7X", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(490, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals(979, stringColumnAnalizeResult0.getMaxCharLength());
      assertNull(stringColumnAnalizeResult0.getColumnName());
      assertEquals((-2586), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2992, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(3104, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(17, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(490, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertNull(stringColumnAnalizeResult0.getMin());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1642, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(17, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2992, stringColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 470, false, 0, (-105), 470, (-105), (-4611), 662, 331, 0, (-1), 0, 0, 2914, (-1560), "", "", (-202), (-105), 1811);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals((-105), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-4611), stringColumnAnalizeResult0.getRowStart());
      assertEquals(331, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-202), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1811, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(470, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-105), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2914, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-105), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1560), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(470, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(662, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      
      String string0 = stringColumnAnalizeResult0.getColumnName();
      assertNotNull(string0);
      assertEquals((-105), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals((-4611), stringColumnAnalizeResult0.getRowStart());
      assertEquals(331, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-202), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(1811, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(470, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-105), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2914, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-105), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1560), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(470, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(662, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("|hs$I>R q\"", 2994, true, 2994, 1, (-1), 1, 0, 0, 2994, 0, 2994, 0, 1, 2994, (-1), "={q%=6C;Z?", "*1dDWz}^&M\",^NA{L", 0, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      
      int int0 = stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2994, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("*1dDWz}^&M\",^NA{L", stringColumnAnalizeResult0.getMax());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2994, stringColumnAnalizeResult0.getNullCount());
      assertEquals(1, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(1, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2994, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2994, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2994, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("|hs$I>R q\"", stringColumnAnalizeResult0.getColumnName());
      assertEquals(0, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(1, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1), stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("={q%=6C;Z?", stringColumnAnalizeResult0.getMin());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2004, false, 1194, 1194, 2004, 1194, 1194, 1194, 2004, (-1230), 1194, 2770, 0, 2770, 598, "", "", 590, 2770, 598);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1194, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(590, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2770, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1194, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2004, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2770, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(1194, stringColumnAnalizeResult0.getRowCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1194, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2770, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1194, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2004, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2004, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(598, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(598, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(1194, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1230), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      
      int int0 = stringColumnAnalizeResult0.getMaxUtf8Bytes();
      assertEquals(1194, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(590, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2770, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1194, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2004, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2770, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(1194, stringColumnAnalizeResult0.getRowCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1194, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2770, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1194, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2004, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2004, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(598, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(598, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(1194, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1230), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(598, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("?L[40V.;jv!:|m=-v", 3, true, 3, (-1799), (-1799), 3, (-1799), 1862, (-157), 0, (-1799), 1466, 0, 0, 2747, "?L[40V.;jv!:|m=-v", "Y[*&Cax$*T~~", 1466, 1466, (-1799));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      
      boolean boolean0 = stringColumnAnalizeResult0.maybeSorted();
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, "", "", 2287, 2287, 2287);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      
      int int0 = stringColumnAnalizeResult0.getUniqLogicalDataSize();
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("?L[40V.;jv!:|m=-v", 3, true, 3, (-1799), (-1799), 3, (-1799), 1862, (-157), 0, (-1799), 1466, 0, 0, 2747, "?L[40V.;jv!:|m=-v", "Y[*&Cax$*T~~", 1466, 1466, (-1799));
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      
      int int0 = stringColumnAnalizeResult0.getRowEnd();
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("Y[*&Cax$*T~~", stringColumnAnalizeResult0.getMax());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getMin());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowCount());
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals("?L[40V.;jv!:|m=-v", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1862, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("K", 2296, false, 2296, 0, 0, 0, 2296, 36, 0, 0, 36, 36, 36, 0, 2296, "K", "K", 2296, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("K", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(36, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2296, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(36, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(36, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2296, stringColumnAnalizeResult0.getNullCount());
      assertEquals("K", stringColumnAnalizeResult0.getColumnName());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("K", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2296, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2296, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2296, stringColumnAnalizeResult0.getRowStart());
      assertEquals(36, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      
      String string0 = stringColumnAnalizeResult0.getMax();
      assertNotNull(string0);
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("K", stringColumnAnalizeResult0.getMin());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(36, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2296, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(36, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(36, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2296, stringColumnAnalizeResult0.getNullCount());
      assertEquals("K", stringColumnAnalizeResult0.getColumnName());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals("K", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2296, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2296, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2296, stringColumnAnalizeResult0.getRowStart());
      assertEquals(36, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("K", 2296, false, 2296, 0, 0, 0, 2296, 36, 0, 0, 36, 36, 36, 0, 2296, "K", "K", 2296, 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(36, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2296, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2296, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2296, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(36, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("K", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2296, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("K", stringColumnAnalizeResult0.getMin());
      assertEquals(36, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2296, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(36, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("K", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      
      int int0 = stringColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(36, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2296, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2296, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2296, stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(36, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals("K", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2296, stringColumnAnalizeResult0.getNullCount());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("K", stringColumnAnalizeResult0.getMin());
      assertEquals(36, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2296, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(36, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals("K", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2296, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, false, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, "", "", 2287, 2287, 2287);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2287, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      
      int int0 = stringColumnAnalizeResult0.getRowStart();
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(2287, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), 2287, 2287, 0, "", "", (-1699), 0, 0);
      assertNotNull(stringColumnAnalizeResult0);
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      
      String string0 = stringColumnAnalizeResult0.getMin();
      assertNotNull(string0);
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(ColumnType.STRING, stringColumnAnalizeResult0.getColumnType());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals("", stringColumnAnalizeResult0.getColumnName());
      assertEquals("", stringColumnAnalizeResult0.getMin());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("jp.co.yahoo.yosegi.spread.column.ColumnType", 2287, false, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, "jp.co.yahoo.yosegi.spread.column.ColumnType", "jp.co.yahoo.yosegi.spread.column.ColumnType", 2287, 2287, 2287);
      stringColumnAnalizeResult0.getColumnName();
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("?L[40V.;jv!:|m=-v", 3, true, 3, (-1799), (-1799), 3, (-1799), 1862, (-157), 0, (-1799), 1466, 0, 0, 2747, "?L[40V.;jv!:|m=-v", "Y[*&Cax$*T~~", 1466, 1466, (-1799));
      int int0 = stringColumnAnalizeResult0.getRowCount();
      assertEquals(3, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1466, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1799), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(1862, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(1466, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(3, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1799), stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1799), int0);
      assertEquals(2747, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1799), stringColumnAnalizeResult0.getRowStart());
      assertEquals((-157), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(3, stringColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), 2287, 2287, 0, "", "", (-1699), 0, 0);
      int int0 = stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes();
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, int0);
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("K", 2296, false, 2296, 0, 0, 0, 2296, 36, 0, 0, 36, 36, 36, 0, 2296, "K", "K", 2296, 0, 0);
      int int0 = stringColumnAnalizeResult0.getUniqUtf8ByteSize();
      assertEquals(2296, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2296, stringColumnAnalizeResult0.getRowStart());
      assertEquals(36, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2296, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(36, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2296, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2296, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(36, int0);
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(36, stringColumnAnalizeResult0.getMinCharLength());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("B$Z)R1KmR woi(;", (-3631), true, 0, 0, 0, (-3631), (-3754), (-3631), 0, 0, 0, (-2077), (-730), (-3631), (-3754), "B$Z)R1KmR woi(;", "", (-3631), (-1277), (-3754));
      int int0 = stringColumnAnalizeResult0.getTotalUtf8ByteSize();
      assertEquals((-3754), stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals((-3631), stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullCount());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals((-2077), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-3754), stringColumnAnalizeResult0.getRowStart());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-3631), stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-3631), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-3754), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-730), stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals("", stringColumnAnalizeResult0.getMax());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, int0);
      assertEquals((-3631), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1277), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-3631), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), 2287, 2287, 0, "", "", (-1699), 0, 0);
      int int0 = stringColumnAnalizeResult0.getNullCount();
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, int0);
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("UNKNOWN", (-273), false, (-273), (-273), (-273), (-273), (-273), (-273), (-273), (-273), (-273), 0, 16, 0, (-273), "wKVJ^li", "jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", (-273), (-273), (-273));
      int int0 = stringColumnAnalizeResult0.getMaxCharLength();
      assertEquals(16, int0);
      assertEquals((-273), stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals((-273), stringColumnAnalizeResult0.getRowStart());
      assertEquals((-273), stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals("UNKNOWN", stringColumnAnalizeResult0.getColumnName());
      assertEquals((-273), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals((-273), stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals((-273), stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-273), stringColumnAnalizeResult0.getRowEnd());
      assertEquals("jp.co.yahoo.yosegi.spread.analyzer.StringColumnAnalizeResult", stringColumnAnalizeResult0.getMax());
      assertEquals((-273), stringColumnAnalizeResult0.getRowCount());
      assertEquals((-273), stringColumnAnalizeResult0.getUniqCount());
      assertEquals((-273), stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals((-273), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-273), stringColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), 2287, 2287, 0, "", "", (-1699), 0, 0);
      int int0 = stringColumnAnalizeResult0.getMinCharLength();
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1699), int0);
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, false, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, "", "", 2287, 2287, 2287);
      int int0 = stringColumnAnalizeResult0.getColumnSize();
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, int0);
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("K", 2296, false, 2296, 0, 0, 0, 2296, 36, 0, 0, 36, 36, 36, 0, 2296, "K", "K", 2296, 0, 0);
      int int0 = stringColumnAnalizeResult0.getMinUtf8Bytes();
      assertEquals(0, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(36, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(0, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(0, int0);
      assertEquals(2296, stringColumnAnalizeResult0.getNullCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2296, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(2296, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2296, stringColumnAnalizeResult0.getRowStart());
      assertEquals(36, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(36, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(0, stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getRowCount());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2296, stringColumnAnalizeResult0.getColumnSize());
      assertEquals(36, stringColumnAnalizeResult0.getMaxCharLength());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, true, 2287, 2287, 2287, 2287, 2287, 2287, (-1699), 2287, (-1699), (-1699), 2287, 2287, 0, "", "", (-1699), 0, 0);
      int int0 = stringColumnAnalizeResult0.getUniqCount();
      assertEquals(2287, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2287, int0);
      assertEquals((-1699), stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(0, stringColumnAnalizeResult0.getMaxUtf8Bytes());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals((-1699), stringColumnAnalizeResult0.getTotalUtf8ByteSize());
      assertEquals((-1699), stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getMaxCharLength());
      assertTrue(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(0, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2277, false, 2277, 2277, 2277, 2277, 2277, 2277, 2277, 2277, 2277, 2277, 2277, 2277, 2277, "", "", 2277, 2277, 2277);
      stringColumnAnalizeResult0.getColumnType();
      assertEquals(2277, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2277, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2277, stringColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(2277, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2277, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2277, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2277, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2277, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2277, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2277, stringColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringColumnAnalizeResult stringColumnAnalizeResult0 = new StringColumnAnalizeResult("", 2287, false, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, "", "", 2287, 2287, 2287);
      int int0 = stringColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(2287, stringColumnAnalizeResult0.getMinUtf8Bytes());
      assertFalse(stringColumnAnalizeResult0.maybeSorted());
      assertEquals(2287, int0);
      assertEquals(2287, stringColumnAnalizeResult0.getUniqUtf8ByteSize());
      assertEquals(2287, stringColumnAnalizeResult0.getRowCount());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(2287, stringColumnAnalizeResult0.getRowEnd());
      assertEquals(2287, stringColumnAnalizeResult0.getRowStart());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqLogicalDataSize());
      assertEquals(2287, stringColumnAnalizeResult0.getNullIgnoreRleTotalUtf8Bytes());
      assertEquals(2287, stringColumnAnalizeResult0.getNullCount());
      assertEquals(2287, stringColumnAnalizeResult0.getMinCharLength());
      assertEquals(2287, stringColumnAnalizeResult0.getUniqCount());
      assertEquals(2287, stringColumnAnalizeResult0.getColumnSize());
  }
}
