/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:31:16 GMT 2022
 */

package jp.co.yahoo.yosegi.blockindex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.List;
import jp.co.yahoo.yosegi.blockindex.BooleanBlockIndex;
import jp.co.yahoo.yosegi.blockindex.IntegerRangeBlockIndex;
import jp.co.yahoo.yosegi.message.objects.BooleanObj;
import jp.co.yahoo.yosegi.message.objects.ByteObj;
import jp.co.yahoo.yosegi.message.objects.BytesStringObj;
import jp.co.yahoo.yosegi.message.objects.DoubleObj;
import jp.co.yahoo.yosegi.message.objects.FloatObj;
import jp.co.yahoo.yosegi.message.objects.IntegerObj;
import jp.co.yahoo.yosegi.message.objects.NullObj;
import jp.co.yahoo.yosegi.message.objects.PrimitiveObject;
import jp.co.yahoo.yosegi.message.objects.ShortObj;
import jp.co.yahoo.yosegi.message.objects.Utf8BytesLinkObj;
import jp.co.yahoo.yosegi.spread.column.filter.IFilter;
import jp.co.yahoo.yosegi.spread.column.filter.LtStringCompareFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilter;
import jp.co.yahoo.yosegi.spread.column.filter.NumberFilterType;
import jp.co.yahoo.yosegi.spread.column.filter.NumberRangeFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerRangeBlockIndex_ESTest extends IntegerRangeBlockIndex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(411, 411);
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      DoubleObj doubleObj0 = new DoubleObj(411);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, doubleObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(411, integerRangeBlockIndex0.getMax());
      assertNull(list0);
      assertEquals(411, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(1, 0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(0, integerRangeBlockIndex0.getMax());
      assertNotNull(list0);
      assertEquals(1, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-2090), (-2090));
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals((-2090), integerRangeBlockIndex0.getMin());
      assertEquals((-2090), integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(0, 16);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals(0, integerRangeBlockIndex0.getMin());
      assertEquals(16, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-567), 6);
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals(6, integerRangeBlockIndex0.getMax());
      assertEquals((-567), integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-1395), (-1395));
      IntegerRangeBlockIndex integerRangeBlockIndex1 = (IntegerRangeBlockIndex)integerRangeBlockIndex0.getNewInstance();
      boolean boolean0 = integerRangeBlockIndex0.merge(integerRangeBlockIndex1);
      assertEquals((-1395), integerRangeBlockIndex0.getMin());
      assertEquals((-1395), integerRangeBlockIndex0.getMax());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex1.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex1.getMin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(383, 383);
      byte[] byteArray0 = integerRangeBlockIndex0.toBinary();
      integerRangeBlockIndex0.setFromBinary(byteArray0, 383, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)127, (byte)0, (byte)0, (byte)1, (byte)127}, byteArray0);
      assertEquals(383, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(15, 2);
      byte[] byteArray0 = integerRangeBlockIndex0.toBinary();
      BytesStringObj bytesStringObj0 = new BytesStringObj(byteArray0);
      ByteObj byteObj0 = new ByteObj((byte) (-120));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(bytesStringObj0, true, byteObj0, true);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(8, integerRangeBlockIndex0.getBinarySize());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)15, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      PrimitiveObject primitiveObject0 = NullObj.getInstance();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, primitiveObject0);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(0, 0);
      int int0 = integerRangeBlockIndex0.getMin();
      assertEquals(0, int0);
      assertEquals(0, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-1395), (-1395));
      int int0 = integerRangeBlockIndex0.getMin();
      assertEquals((-1395), int0);
      assertEquals((-1395), integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(422, 0);
      int int0 = integerRangeBlockIndex0.getMax();
      assertEquals(0, int0);
      assertEquals(422, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      int int0 = integerRangeBlockIndex0.getMax();
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(0, 0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        integerRangeBlockIndex0.setFromBinary(byteArray0, (byte) (-125), 5);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      byte[] byteArray0 = new byte[0];
      Utf8BytesLinkObj utf8BytesLinkObj0 = new Utf8BytesLinkObj(byteArray0, 5, 5);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(utf8BytesLinkObj0, true, utf8BytesLinkObj0, true);
      // Undeclared exception!
      try { 
        integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      // Undeclared exception!
      try { 
        integerRangeBlockIndex0.getBlockSpreadIndex((IFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jp.co.yahoo.yosegi.blockindex.IntegerRangeBlockIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(383, 383);
      int int0 = integerRangeBlockIndex0.getMin();
      assertEquals(383, int0);
      assertEquals(383, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(383, 383);
      int int0 = integerRangeBlockIndex0.getMax();
      assertEquals(383, int0);
      assertEquals(383, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-62), 1529);
      ShortObj shortObj0 = new ShortObj((short)5);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, shortObj0, false, shortObj0, false);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((-62), integerRangeBlockIndex0.getMin());
      assertEquals(1529, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, false, byteObj0, false);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FloatObj floatObj0 = new FloatObj(581);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(floatObj0, false, floatObj0, true);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(581, 2524);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(2524, integerRangeBlockIndex0.getMax());
      assertEquals(581, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, false, booleanObj0, true);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(0, (-1010));
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(0, integerRangeBlockIndex0.getMin());
      assertEquals((-1010), integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(false, byteObj0, false, byteObj0, true);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, false);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-2090), 8);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((-2090), integerRangeBlockIndex0.getMin());
      assertEquals(8, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(0, 0);
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, false);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(0, integerRangeBlockIndex0.getMin());
      assertEquals(0, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerObj integerObj0 = new IntegerObj((-1841));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(integerObj0, true, integerObj0, true);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-1841), 17);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(17, integerRangeBlockIndex0.getMax());
      assertEquals((-1841), integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      DoubleObj doubleObj0 = new DoubleObj(2.147483647E9);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(doubleObj0, true, doubleObj0, true);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(byteObj0, true, byteObj0, true);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      BooleanObj booleanObj0 = new BooleanObj(true);
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(booleanObj0, true, booleanObj0, false);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      ByteObj byteObj0 = new ByteObj();
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(true, byteObj0, true, byteObj0, true);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-4089), 1033);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((-4089), integerRangeBlockIndex0.getMin());
      assertEquals(1033, integerRangeBlockIndex0.getMax());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(323, 323);
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      ShortObj shortObj0 = new ShortObj((short)11);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, shortObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals(323, integerRangeBlockIndex0.getMax());
      assertEquals(323, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      DoubleObj doubleObj0 = new DoubleObj(2.147483647E9);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, doubleObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-2), (-2));
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((-2), integerRangeBlockIndex0.getMin());
      assertNull(list0);
      assertEquals((-2), integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(411, 411);
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      DoubleObj doubleObj0 = new DoubleObj(411);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, doubleObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNull(list0);
      assertEquals(411, integerRangeBlockIndex0.getMax());
      assertEquals(411, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      DoubleObj doubleObj0 = new DoubleObj(2.147483647E9);
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, doubleObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.NOT_EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.GT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LE;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.LT;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertNotNull(list0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      NumberFilterType numberFilterType0 = NumberFilterType.EQUAL;
      ByteObj byteObj0 = new ByteObj();
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(15, 2);
      LtStringCompareFilter ltStringCompareFilter0 = new LtStringCompareFilter("sj')OXfc\"v`)i-78");
      integerRangeBlockIndex0.getBlockSpreadIndex(ltStringCompareFilter0);
      assertEquals(2, integerRangeBlockIndex0.getMax());
      assertEquals(15, integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-2580), (-852));
      IntegerObj integerObj0 = new IntegerObj((-852));
      NumberRangeFilter numberRangeFilter0 = new NumberRangeFilter(integerObj0, false, integerObj0, false);
      integerRangeBlockIndex0.getBlockSpreadIndex(numberRangeFilter0);
      assertEquals((-2580), integerRangeBlockIndex0.getMin());
      assertEquals((-852), integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-4089), (-4089));
      ByteObj byteObj0 = new ByteObj();
      NumberFilterType numberFilterType0 = NumberFilterType.GE;
      NumberFilter numberFilter0 = new NumberFilter(numberFilterType0, byteObj0);
      List<Integer> list0 = integerRangeBlockIndex0.getBlockSpreadIndex(numberFilter0);
      assertEquals((-4089), integerRangeBlockIndex0.getMax());
      assertNotNull(list0);
      assertEquals((-4089), integerRangeBlockIndex0.getMin());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      IntegerRangeBlockIndex integerRangeBlockIndex1 = new IntegerRangeBlockIndex((-328), (-328));
      boolean boolean0 = integerRangeBlockIndex0.merge(integerRangeBlockIndex1);
      assertEquals((-328), integerRangeBlockIndex0.getMin());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex(15, 2);
      BooleanBlockIndex booleanBlockIndex0 = new BooleanBlockIndex(true, true, true);
      boolean boolean0 = integerRangeBlockIndex0.merge(booleanBlockIndex0);
      assertEquals(15, integerRangeBlockIndex0.getMin());
      assertEquals(2, integerRangeBlockIndex0.getMax());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex((-4089), (-4089));
      integerRangeBlockIndex0.getBlockIndexType();
      assertEquals((-4089), integerRangeBlockIndex0.getMin());
      assertEquals((-4089), integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      IntegerRangeBlockIndex integerRangeBlockIndex1 = (IntegerRangeBlockIndex)integerRangeBlockIndex0.clone();
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex1.getMin());
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex1.getMax());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      // Undeclared exception!
      try { 
        integerRangeBlockIndex0.setFromBinary((byte[]) null, 1240, 1240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      int int0 = integerRangeBlockIndex0.getBinarySize();
      assertEquals(8, int0);
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IntegerRangeBlockIndex integerRangeBlockIndex0 = new IntegerRangeBlockIndex();
      boolean boolean0 = integerRangeBlockIndex0.merge(integerRangeBlockIndex0);
      assertEquals(Integer.MAX_VALUE, integerRangeBlockIndex0.getMin());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, integerRangeBlockIndex0.getMax());
  }
}
