/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:29:06 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.analyzer;

import org.junit.Test;
import static org.junit.Assert.*;
import jp.co.yahoo.yosegi.spread.analyzer.LongColumnAnalizeResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongColumnAnalizeResult_ESTest extends LongColumnAnalizeResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      boolean boolean0 = longColumnAnalizeResult0.maybeSorted();
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(9, longColumnAnalizeResult0.getNullCount());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertTrue(boolean0);
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(8, longColumnAnalizeResult0.getRowEnd());
      assertEquals(72, longColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      int int0 = longColumnAnalizeResult0.getUniqCount();
      assertEquals(0, int0);
      assertEquals(0L, longColumnAnalizeResult0.getMax());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
      assertEquals(1, longColumnAnalizeResult0.getRowCount());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-105), longColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("i {59 nC", 1, false, 1588, (-1502), 10, 0, 1, (-379), 0);
      int int0 = longColumnAnalizeResult0.getUniqCount();
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-379), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(10, int0);
      assertEquals(1588, longColumnAnalizeResult0.getNullCount());
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1L, longColumnAnalizeResult0.getMax());
      assertEquals(1, longColumnAnalizeResult0.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("i {59 nC", 1, false, 1588, (-1502), 10, 0, 1, (-379), 0);
      int int0 = longColumnAnalizeResult0.getRowEnd();
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals((-379), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1588, longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, int0);
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(10, longColumnAnalizeResult0.getUniqCount());
      assertEquals(1L, longColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      int int0 = longColumnAnalizeResult0.getRowEnd();
      assertEquals(8, int0);
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(9, longColumnAnalizeResult0.getNullCount());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertEquals(9, longColumnAnalizeResult0.getRowCount());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 0, true, 0, 0, 0, 0, 0, 0, 1466);
      int int0 = longColumnAnalizeResult0.getRowCount();
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0, int0);
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getColumnSize());
      assertEquals(0, longColumnAnalizeResult0.getNullCount());
      assertEquals(1466, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      int int0 = longColumnAnalizeResult0.getRowCount();
      assertEquals(9, int0);
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(8, longColumnAnalizeResult0.getRowEnd());
      assertEquals(9, longColumnAnalizeResult0.getNullCount());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertTrue(longColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      int int0 = longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(9, longColumnAnalizeResult0.getNullCount());
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(0, int0);
      assertEquals(9, longColumnAnalizeResult0.getRowCount());
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(8, longColumnAnalizeResult0.getRowEnd());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      int int0 = longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(1, int0);
      assertEquals(0L, longColumnAnalizeResult0.getMax());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
      assertEquals(8, longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-104), longColumnAnalizeResult0.getColumnSize());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      int int0 = longColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals(0, int0);
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0L, longColumnAnalizeResult0.getMax());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-105), longColumnAnalizeResult0.getRowEnd());
      assertEquals(1, longColumnAnalizeResult0.getRowCount());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", (-1502), false, (-1502), (-1502), (-1502), (-1502), (-1502), (-1502), (-1502));
      int int0 = longColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-1502), longColumnAnalizeResult0.getUniqCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1503), longColumnAnalizeResult0.getRowEnd());
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-1502), int0);
      assertEquals((-1502), longColumnAnalizeResult0.getRowCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 0, true, 0, 0, 0, 0, 0, 0, 1466);
      int int0 = longColumnAnalizeResult0.getNullCount();
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0, int0);
      assertEquals(1466, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0, longColumnAnalizeResult0.getColumnSize());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      int int0 = longColumnAnalizeResult0.getNullCount();
      assertEquals(9, int0);
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(8, longColumnAnalizeResult0.getRowEnd());
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(72, longColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("i {59 nC", 1, false, 1588, (-1502), 10, 0, 1, (-379), 0);
      long long0 = longColumnAnalizeResult0.getMin();
      assertEquals(1, longColumnAnalizeResult0.getColumnSize());
      assertEquals(10, longColumnAnalizeResult0.getUniqCount());
      assertEquals(1L, longColumnAnalizeResult0.getMax());
      assertEquals((-379), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1502), longColumnAnalizeResult0.getRowCount());
      assertEquals(1588, longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      long long0 = longColumnAnalizeResult0.getMin();
      assertEquals(0L, longColumnAnalizeResult0.getMax());
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
      assertEquals(8, longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-105), longColumnAnalizeResult0.getRowEnd());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(1L, long0);
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      long long0 = longColumnAnalizeResult0.getMax();
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0L, long0);
      assertEquals((-104), longColumnAnalizeResult0.getColumnSize());
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(8, longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("i {59 nC", 1, false, 1588, (-1502), 10, 0, 1, (-379), 0);
      long long0 = longColumnAnalizeResult0.getMax();
      assertEquals(1L, long0);
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(10, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0, longColumnAnalizeResult0.getRowEnd());
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(1588, longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-379), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("jp.co.yahoo.yosegi.spread.analyzer.LongColumnAnalizeResult", (-719), false, 0, 0, (-719), (-719), (-3577L), (-1), 0);
      int int0 = longColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-3577L), longColumnAnalizeResult0.getMax());
      assertEquals((-1), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-719L), longColumnAnalizeResult0.getMin());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-720), longColumnAnalizeResult0.getRowEnd());
      assertEquals(0, int0);
      assertEquals(0, longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-719), longColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", (-1502), false, (-1502), (-1502), (-1502), (-1502), (-1502), (-1502), (-1502));
      int int0 = longColumnAnalizeResult0.getLogicalDataSize();
      assertEquals((-1502), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-12016), int0);
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-1502), longColumnAnalizeResult0.getColumnSize());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-1502), longColumnAnalizeResult0.getUniqCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 0, true, 0, 0, 0, 0, 0, 0, 1466);
      int int0 = longColumnAnalizeResult0.getColumnSize();
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals(1466, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, longColumnAnalizeResult0.getNullCount());
      assertEquals(0, int0);
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0, longColumnAnalizeResult0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      int int0 = longColumnAnalizeResult0.getColumnSize();
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(9, int0);
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(9, longColumnAnalizeResult0.getNullCount());
      assertEquals(72, longColumnAnalizeResult0.getLogicalDataSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult((String) null, 4, false, 0, (-1), 0, 0, (-1), 10, 0);
      longColumnAnalizeResult0.getColumnName();
      assertEquals(10, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1L), longColumnAnalizeResult0.getMax());
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals((-1), longColumnAnalizeResult0.getRowCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(4, longColumnAnalizeResult0.getColumnSize());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0, longColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", 9, true, 9, 9, 0, 0, (-2901L), 0, 0);
      longColumnAnalizeResult0.getColumnName();
      assertEquals(0, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(9, longColumnAnalizeResult0.getNullCount());
      assertEquals(0L, longColumnAnalizeResult0.getMin());
      assertEquals(8, longColumnAnalizeResult0.getRowEnd());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-2901L), longColumnAnalizeResult0.getMax());
      assertEquals(9, longColumnAnalizeResult0.getRowCount());
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      int int0 = longColumnAnalizeResult0.getRowEnd();
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-1503), int0);
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      int int0 = longColumnAnalizeResult0.getUniqCount();
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1502), longColumnAnalizeResult0.getColumnSize());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2176), int0);
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      int int0 = longColumnAnalizeResult0.getRowCount();
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1502), int0);
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1503), longColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      longColumnAnalizeResult0.getColumnName();
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-1502), longColumnAnalizeResult0.getRowCount());
      assertEquals((-1503), longColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      int int0 = longColumnAnalizeResult0.getLogicalDataSize();
      assertEquals(8, int0);
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(0L, longColumnAnalizeResult0.getMax());
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals((-104), longColumnAnalizeResult0.getColumnSize());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      int int0 = longColumnAnalizeResult0.getColumnSize();
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
      assertEquals((-104), longColumnAnalizeResult0.getNullCount());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-104), int0);
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(8, longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals(0L, longColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      int int0 = longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength();
      assertEquals((-2176), int0);
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1502), longColumnAnalizeResult0.getColumnSize());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      boolean boolean0 = longColumnAnalizeResult0.maybeSorted();
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1502), longColumnAnalizeResult0.getColumnSize());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("CAh[3z]~!9G", (-104), false, (-104), 1, 0, 1, 0, 0, 1);
      int int0 = longColumnAnalizeResult0.getNullCount();
      assertEquals((-104), int0);
      assertEquals(1, longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(0L, longColumnAnalizeResult0.getMax());
      assertEquals(0, longColumnAnalizeResult0.getUniqCount());
      assertEquals(1L, longColumnAnalizeResult0.getMin());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals(1, longColumnAnalizeResult0.getRowCount());
      assertEquals(0, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-105), longColumnAnalizeResult0.getRowEnd());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      longColumnAnalizeResult0.getColumnType();
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-1502), longColumnAnalizeResult0.getColumnSize());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      long long0 = longColumnAnalizeResult0.getMin();
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1502L), long0);
      assertEquals((-1503), longColumnAnalizeResult0.getRowEnd());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      int int0 = longColumnAnalizeResult0.getNullIgnoreRleGroupCount();
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502L), longColumnAnalizeResult0.getMax());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals((-1503), longColumnAnalizeResult0.getRowEnd());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("<B?Qn:4}oZ+w!(2", (-1502), false, (-1502), (-1502), (-2176), (-1502), (-1502), 1, (-2176));
      long long0 = longColumnAnalizeResult0.getMax();
      assertFalse(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-1502L), longColumnAnalizeResult0.getMin());
      assertEquals((-2176), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-1502), longColumnAnalizeResult0.getNullCount());
      assertEquals(1, longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals((-12016), longColumnAnalizeResult0.getLogicalDataSize());
      assertEquals((-1503), longColumnAnalizeResult0.getRowEnd());
      assertEquals((-1502L), long0);
      assertEquals((-2176), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongColumnAnalizeResult longColumnAnalizeResult0 = new LongColumnAnalizeResult("", (-652), true, (-652), (-652), (-652), (-652), (-652), (-652), (-652));
      int int0 = longColumnAnalizeResult0.getRowStart();
      assertEquals((-652L), longColumnAnalizeResult0.getMax());
      assertEquals((-652), longColumnAnalizeResult0.getNullIgnoreRleGroupCount());
      assertEquals(0, int0);
      assertEquals((-652), longColumnAnalizeResult0.getNullCount());
      assertEquals((-652L), longColumnAnalizeResult0.getMin());
      assertEquals((-653), longColumnAnalizeResult0.getRowEnd());
      assertEquals((-652), longColumnAnalizeResult0.getUniqCount());
      assertEquals((-652), longColumnAnalizeResult0.getNullIgonoreRleMaxRowGroupLength());
      assertTrue(longColumnAnalizeResult0.maybeSorted());
      assertEquals((-652), longColumnAnalizeResult0.getRowCount());
  }
}
