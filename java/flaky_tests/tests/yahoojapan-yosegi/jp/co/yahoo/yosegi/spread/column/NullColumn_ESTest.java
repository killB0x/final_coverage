/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 01:58:46 GMT 2022
 */

package jp.co.yahoo.yosegi.spread.column;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.List;
import jp.co.yahoo.yosegi.message.design.IField;
import jp.co.yahoo.yosegi.spread.column.ColumnType;
import jp.co.yahoo.yosegi.spread.column.ICell;
import jp.co.yahoo.yosegi.spread.column.ICellManager;
import jp.co.yahoo.yosegi.spread.column.IColumn;
import jp.co.yahoo.yosegi.spread.column.NullColumn;
import jp.co.yahoo.yosegi.spread.column.SpreadColumn;
import jp.co.yahoo.yosegi.spread.column.UnionColumn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullColumn_ESTest extends NullColumn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      iColumn0.setColumnName("");
      assertFalse(iColumn0.isExpandColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      int int0 = iColumn0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      String string0 = iColumn0.getColumnName();
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      IColumn iColumn1 = iColumn0.getColumn(0);
      assertEquals(ColumnType.NULL, iColumn1.getColumnType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnType columnType0 = ColumnType.FLOAT;
      int int0 = iColumn0.add(columnType0, columnType0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      UnionColumn unionColumn0 = new UnionColumn(iColumn0);
      assertEquals(0, iColumn0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      IField iField0 = iColumn0.getSchema("");
      assertNull(iField0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      IField iField0 = iColumn0.getSchema();
      assertNull(iField0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnType columnType0 = ColumnType.UNKNOWN;
      IColumn iColumn1 = iColumn0.getColumn(columnType0);
      assertEquals(0, iColumn1.getColumnSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      List<IColumn> list0 = iColumn0.getListColumn();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ICellManager iCellManager0 = iColumn0.getCellManager();
      assertNull(iCellManager0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      iColumn0.setDefaultCell((ICell) null);
      assertFalse(iColumn0.isDictionary());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      int int0 = iColumn0.getColumnSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnType columnType0 = ColumnType.EMPTY_ARRAY;
      ICell<SpreadColumn, Object> iCell0 = (ICell<SpreadColumn, Object>) mock(ICell.class, new ViolatedAssumptionAnswer());
      iColumn0.addCell(columnType0, iCell0, 0);
      assertFalse(iColumn0.isExpandColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ICellManager<Object> iCellManager0 = (ICellManager<Object>) mock(ICellManager.class, new ViolatedAssumptionAnswer());
      iColumn0.setCellManager(iCellManager0);
      assertFalse(iColumn0.isExpandColumn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullColumn nullColumn0 = (NullColumn)NullColumn.getInstance();
      String string0 = nullColumn0.toString();
      assertEquals("Column name : NULL\nColumn type : NULL\n--------------------------\n", string0);
      assertEquals(0, nullColumn0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      IColumn iColumn1 = iColumn0.getParentsColumn();
      assertSame(iColumn0, iColumn1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      List<String> list0 = iColumn0.getColumnKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ICell iCell0 = iColumn0.get(41);
      assertEquals(ColumnType.NULL, iCell0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      IColumn iColumn1 = iColumn0.getColumn("<~(DC");
      assertSame(iColumn1, iColumn0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      iColumn0.setParentsColumn(iColumn0);
      assertEquals(0, iColumn0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IColumn iColumn0 = NullColumn.getInstance();
      ColumnType columnType0 = iColumn0.getColumnType();
      assertEquals(ColumnType.NULL, columnType0);
  }
}
