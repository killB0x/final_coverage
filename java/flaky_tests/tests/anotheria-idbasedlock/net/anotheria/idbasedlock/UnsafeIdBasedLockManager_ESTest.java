/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 01:50:02 GMT 2022
 */

package net.anotheria.idbasedlock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import net.anotheria.idbasedlock.IdBasedLock;
import net.anotheria.idbasedlock.UnsafeIdBasedLockManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnsafeIdBasedLockManager_ESTest extends UnsafeIdBasedLockManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      Integer integer0 = new Integer(1);
      IdBasedLock<Integer> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(integer0);
      idBasedLock0.decreaseRefCount();
      unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
      IdBasedLock<Integer> idBasedLock1 = unsafeIdBasedLockManager0.obtainLock(integer0);
      assertEquals(0, idBasedLock1.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      Integer integer0 = new Integer(1);
      unsafeIdBasedLockManager0.obtainLock(integer0);
      Map<Integer, IdBasedLock<Integer>> map0 = unsafeIdBasedLockManager0.getLockMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnsafeIdBasedLockManager<Object> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Object>();
      Map<Object, IdBasedLock<Object>> map0 = unsafeIdBasedLockManager0.getLockMap();
      IdBasedLock<Object> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(map0);
      // Undeclared exception!
      try { 
        unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnsafeIdBasedLockManager<IdBasedLock<Integer>> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<IdBasedLock<Integer>>();
      // Undeclared exception!
      try { 
        unsafeIdBasedLockManager0.releaseLock((IdBasedLock<IdBasedLock<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.anotheria.idbasedlock.UnsafeIdBasedLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnsafeIdBasedLockManager<Object> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Object>();
      Map<Object, IdBasedLock<Object>> map0 = unsafeIdBasedLockManager0.getLockMap();
      unsafeIdBasedLockManager0.obtainLock(map0);
      // Undeclared exception!
      try { 
        unsafeIdBasedLockManager0.obtainLock(map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnsafeIdBasedLockManager<Object> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Object>();
      // Undeclared exception!
      try { 
        unsafeIdBasedLockManager0.obtainLock((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      Integer integer0 = new Integer(1);
      IdBasedLock<Integer> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(integer0);
      idBasedLock0.decreaseRefCount();
      unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
      unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
      IdBasedLock<Integer> idBasedLock1 = unsafeIdBasedLockManager0.obtainLock(integer0);
      assertEquals((-1), idBasedLock1.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      Integer integer0 = new Integer(1);
      IdBasedLock<Integer> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(integer0);
      assertNotNull(idBasedLock0);
      
      idBasedLock0.decreaseRefCount();
      IdBasedLock<Integer> idBasedLock1 = unsafeIdBasedLockManager0.obtainLock(integer0);
      assertSame(idBasedLock1, idBasedLock0);
      assertEquals(1, idBasedLock1.getReferenceCount());
  }
}
