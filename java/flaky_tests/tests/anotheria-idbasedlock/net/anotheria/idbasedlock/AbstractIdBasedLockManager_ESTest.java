/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 01:52:56 GMT 2022
 */

package net.anotheria.idbasedlock;

import org.junit.Test;
import static org.junit.Assert.*;
import net.anotheria.idbasedlock.AbstractIdBasedLockManager;
import net.anotheria.idbasedlock.SafeIdBasedLockManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIdBasedLockManager_ESTest extends AbstractIdBasedLockManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(286);
      SafeIdBasedLockManager<Integer> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Integer>();
      safeIdBasedLockManager0.obtainLock(integer0);
      int int0 = safeIdBasedLockManager0.getLockSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      AbstractIdBasedLockManager.out(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SafeIdBasedLockManager<Integer> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Integer>();
      String string0 = safeIdBasedLockManager0.debugString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SafeIdBasedLockManager<Integer> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Integer>();
      int int0 = safeIdBasedLockManager0.getLockSize();
      assertEquals(0, int0);
  }
}
