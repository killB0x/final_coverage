/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 01:52:16 GMT 2022
 */

package net.anotheria.idbasedlock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicInteger;
import net.anotheria.idbasedlock.IdBasedLock;
import net.anotheria.idbasedlock.SafeIdBasedLockManager;
import net.anotheria.idbasedlock.UnsafeIdBasedLockManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IdBasedLock_ESTest extends IdBasedLock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(5122);
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      IdBasedLock<Integer> idBasedLock0 = new IdBasedLock<Integer>(integer0, unsafeIdBasedLockManager0);
      idBasedLock0.lock();
      idBasedLock0.unlock();
      assertEquals(0, idBasedLock0.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnsafeIdBasedLockManager<Object> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Object>();
      Integer integer0 = new Integer((-761));
      IdBasedLock<Object> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(integer0);
      unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
      int int0 = idBasedLock0.getReferenceCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      Integer integer0 = new Integer(0);
      IdBasedLock<Object> idBasedLock0 = safeIdBasedLockManager0.obtainLock(integer0);
      safeIdBasedLockManager0.releaseLock(idBasedLock0);
      safeIdBasedLockManager0.releaseLock(idBasedLock0);
      int int0 = idBasedLock0.getReferenceCount();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      Object object0 = new Object();
      IdBasedLock<Object> idBasedLock0 = new IdBasedLock<Object>(object0, safeIdBasedLockManager0);
      idBasedLock0.decreaseRefCount();
      AtomicInteger atomicInteger0 = idBasedLock0.getRefCount();
      assertEquals(0, atomicInteger0.intValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      IdBasedLock<Object> idBasedLock0 = new IdBasedLock<Object>(safeIdBasedLockManager0, safeIdBasedLockManager0);
      AtomicInteger atomicInteger0 = idBasedLock0.getRefCount();
      assertEquals(1, atomicInteger0.intValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      UnsafeIdBasedLockManager<Object> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Object>();
      IdBasedLock<Object> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(safeIdBasedLockManager0);
      unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
      unsafeIdBasedLockManager0.releaseLock(idBasedLock0);
      AtomicInteger atomicInteger0 = idBasedLock0.getRefCount();
      assertEquals((-1.0F), atomicInteger0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      IdBasedLock<Object> idBasedLock0 = safeIdBasedLockManager0.obtainLock((Object) null);
      idBasedLock0.getId();
      assertEquals(1, idBasedLock0.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      UnsafeIdBasedLockManager<Object> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Object>();
      IdBasedLock<Object> idBasedLock0 = unsafeIdBasedLockManager0.obtainLock(safeIdBasedLockManager0);
      idBasedLock0.getId();
      assertEquals(1, idBasedLock0.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      IdBasedLock<Integer> idBasedLock0 = new IdBasedLock<Integer>((Integer) null, unsafeIdBasedLockManager0);
      idBasedLock0.lock();
      // Undeclared exception!
      try { 
        idBasedLock0.unlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnsafeIdBasedLockManager<Integer> unsafeIdBasedLockManager0 = new UnsafeIdBasedLockManager<Integer>();
      IdBasedLock<Integer> idBasedLock0 = new IdBasedLock<Integer>((Integer) null, unsafeIdBasedLockManager0);
      // Undeclared exception!
      try { 
        idBasedLock0.unlock();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      Integer integer0 = new Integer(0);
      IdBasedLock<Object> idBasedLock0 = safeIdBasedLockManager0.obtainLock(integer0);
      idBasedLock0.lock();
      idBasedLock0.unlockWithoutRelease();
      assertEquals(1, idBasedLock0.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      Integer integer0 = new Integer(0);
      IdBasedLock<Object> idBasedLock0 = safeIdBasedLockManager0.obtainLock(integer0);
      // Undeclared exception!
      try { 
        idBasedLock0.unlockWithoutRelease();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      Integer integer0 = new Integer(0);
      IdBasedLock<Object> idBasedLock0 = safeIdBasedLockManager0.obtainLock(integer0);
      int int0 = idBasedLock0.getReferenceCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      IdBasedLock<Object> idBasedLock0 = new IdBasedLock<Object>(safeIdBasedLockManager0, safeIdBasedLockManager0);
      idBasedLock0.increaseRefCount();
      assertEquals(2, idBasedLock0.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SafeIdBasedLockManager<Object> safeIdBasedLockManager0 = new SafeIdBasedLockManager<Object>();
      Integer integer0 = new Integer(0);
      IdBasedLock<Object> idBasedLock0 = safeIdBasedLockManager0.obtainLock(integer0);
      String string0 = idBasedLock0.toString();
      assertEquals("(0, 1)", string0);
  }
}
