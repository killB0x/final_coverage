/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 01:49:15 GMT 2022
 */

package com.k317h.restez.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.k317h.restez.util.AtomicSingleton;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicSingleton_ESTest extends AtomicSingleton_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AtomicSingleton<Object> atomicSingleton0 = new AtomicSingleton<Object>();
      AtomicSingleton.ThrowingSupplier<Object> atomicSingleton_ThrowingSupplier0 = (AtomicSingleton.ThrowingSupplier<Object>) mock(AtomicSingleton.ThrowingSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(atomicSingleton_ThrowingSupplier0).get();
      Object object0 = atomicSingleton0.getOrSet(atomicSingleton_ThrowingSupplier0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AtomicSingleton<Integer> atomicSingleton0 = new AtomicSingleton<Integer>();
      Integer integer0 = new Integer(0);
      AtomicSingleton.ThrowingSupplier<Integer> atomicSingleton_ThrowingSupplier0 = (AtomicSingleton.ThrowingSupplier<Integer>) mock(AtomicSingleton.ThrowingSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(atomicSingleton_ThrowingSupplier0).get();
      atomicSingleton0.getOrSet(atomicSingleton_ThrowingSupplier0);
      AtomicSingleton.ThrowingSupplier<Integer> atomicSingleton_ThrowingSupplier1 = (AtomicSingleton.ThrowingSupplier<Integer>) mock(AtomicSingleton.ThrowingSupplier.class, new ViolatedAssumptionAnswer());
      Integer integer1 = atomicSingleton0.getOrSet(atomicSingleton_ThrowingSupplier1);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AtomicSingleton<Integer> atomicSingleton0 = new AtomicSingleton<Integer>();
      // Undeclared exception!
      try { 
        atomicSingleton0.getOrSet((AtomicSingleton.ThrowingSupplier<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.k317h.restez.util.AtomicSingleton", e);
      }
  }
}
