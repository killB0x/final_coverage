/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 01:50:18 GMT 2022
 */

package com.k317h.restez.serialization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.k317h.restez.http.MimeTypes;
import com.k317h.restez.serialization.Deserializers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Deserializers_ESTest extends Deserializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Deserializers deserializers0 = new Deserializers();
      MimeTypes.APPLICATION_JSON = "&h";
      Deserializers.Deserializer deserializers_Deserializer0 = mock(Deserializers.Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn(deserializers0).when(deserializers_Deserializer0).deserialize(any(byte[].class) , any(java.lang.Class.class));
      Deserializers deserializers1 = deserializers0.registerJsonDeserializer(deserializers_Deserializer0);
      byte[] byteArray0 = new byte[3];
      Class<Object> class0 = Object.class;
      Object object0 = deserializers0.deserialize(byteArray0, "&h", class0);
      assertSame(object0, deserializers1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Deserializers deserializers0 = new Deserializers();
      Deserializers.Deserializer deserializers_Deserializer0 = mock(Deserializers.Deserializer.class, new ViolatedAssumptionAnswer());
      Deserializers deserializers1 = deserializers0.registerSerializer("com.k317h.restez.errors.BadRequestException", deserializers_Deserializer0);
      assertSame(deserializers0, deserializers1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Deserializers deserializers0 = new Deserializers();
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deserializers0.deserialize(byteArray0, "KQ\u0007:ErT'>rpV", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Deserializer for 'KQ\u0007:ErT'>rpV' does not exist
         //
         verifyException("com.k317h.restez.serialization.Deserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Deserializers deserializers0 = new Deserializers();
      Deserializers.Deserializer deserializers_Deserializer0 = mock(Deserializers.Deserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializers_Deserializer0).deserialize(any(byte[].class) , any(java.lang.Class.class));
      MimeTypes.APPLICATION_JSON = "&h";
      deserializers0.registerJsonDeserializer(deserializers_Deserializer0);
      byte[] byteArray0 = new byte[3];
      Class<Object> class0 = Object.class;
      Object object0 = deserializers0.deserialize(byteArray0, "&h", class0);
      assertNull(object0);
  }
}
