/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:05:32 GMT 2022
 */

package com.bitpay.sdk_light.model.Invoice;

import org.junit.Test;
import static org.junit.Assert.*;
import com.bitpay.sdk_light.model.Invoice.InvoiceTransaction;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InvoiceTransaction_ESTest extends InvoiceTransaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      invoiceTransaction0.setTransactionId("p]5\"7A3(rMl7R~K");
      String string0 = invoiceTransaction0.getTransactionId();
      assertEquals("p]5\"7A3(rMl7R~K", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      invoiceTransaction0.setTransactionId("");
      String string0 = invoiceTransaction0.getTransactionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      MockDate mockDate0 = new MockDate(0, 0, 0, (-736), (-1), 0);
      invoiceTransaction0.setTime(mockDate0);
      Date date0 = invoiceTransaction0.getTime();
      assertEquals("Thu Nov 30 07:59:00 GMT 1899", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      MockDate mockDate0 = new MockDate(0, 0, 0, (-736), (-1), 0);
      invoiceTransaction0.setReceivedTime(mockDate0);
      Date date0 = invoiceTransaction0.getReceivedTime();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      invoiceTransaction0.setConfirmations(1);
      int int0 = invoiceTransaction0.getConfirmations();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      invoiceTransaction0.setConfirmations((-1));
      int int0 = invoiceTransaction0.getConfirmations();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      Double double0 = new Double(0);
      invoiceTransaction0.setAmount(double0);
      Double double1 = invoiceTransaction0.getAmount();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      Double double0 = new Double(1.0);
      invoiceTransaction0.setAmount(double0);
      Double double1 = invoiceTransaction0.getAmount();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      Double double0 = new Double((-260.71511));
      invoiceTransaction0.setAmount(double0);
      Double double1 = invoiceTransaction0.getAmount();
      assertEquals((-260.71511), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      String string0 = invoiceTransaction0.getTransactionId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      Double double0 = invoiceTransaction0.getAmount();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      Date date0 = invoiceTransaction0.getTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      int int0 = invoiceTransaction0.getConfirmations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InvoiceTransaction invoiceTransaction0 = new InvoiceTransaction();
      Date date0 = invoiceTransaction0.getReceivedTime();
      assertNull(date0);
  }
}
