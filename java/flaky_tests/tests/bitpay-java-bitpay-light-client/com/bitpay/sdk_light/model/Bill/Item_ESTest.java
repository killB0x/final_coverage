/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:04:31 GMT 2022
 */

package com.bitpay.sdk_light.model.Bill;

import org.junit.Test;
import static org.junit.Assert.*;
import com.bitpay.sdk_light.model.Bill.Item;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Item_ESTest extends Item_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Item item0 = new Item();
      Integer integer0 = new Integer(0);
      item0.setQuantity(integer0);
      Integer integer1 = item0.getQuantity();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Item item0 = new Item();
      Integer integer0 = new Integer(873);
      item0.setQuantity(integer0);
      Integer integer1 = item0.getQuantity();
      assertEquals(873, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Item item0 = new Item();
      Integer integer0 = new Integer((-1531));
      item0.setQuantity(integer0);
      Integer integer1 = item0.getQuantity();
      assertEquals((-1531), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Item item0 = new Item();
      Double double0 = Double.valueOf(0.0);
      item0.setPrice(double0);
      Double double1 = item0.getPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Item item0 = new Item();
      Double double0 = new Double(4063.929883009069);
      item0.setPrice(double0);
      Double double1 = item0.getPrice();
      assertEquals(4063.929883009069, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Item item0 = new Item();
      item0.setId("L|GJZ,Q+C");
      String string0 = item0.getId();
      assertEquals("L|GJZ,Q+C", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Item item0 = new Item();
      item0.setId("");
      String string0 = item0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Item item0 = new Item();
      item0.setDescription("Z");
      String string0 = item0.getDescription();
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Item item0 = new Item();
      Double double0 = new Double((-217.0));
      item0.setPrice(double0);
      Double double1 = item0.getPrice();
      assertEquals((-217.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Item item0 = new Item();
      String string0 = item0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Item item0 = new Item();
      Double double0 = item0.getPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Item item0 = new Item();
      item0.setDescription("");
      String string0 = item0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Item item0 = new Item();
      String string0 = item0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Item item0 = new Item();
      Integer integer0 = item0.getQuantity();
      assertNull(integer0);
  }
}
