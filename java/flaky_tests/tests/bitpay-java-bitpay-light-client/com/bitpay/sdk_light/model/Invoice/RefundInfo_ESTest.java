/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:02:44 GMT 2022
 */

package com.bitpay.sdk_light.model.Invoice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.bitpay.sdk_light.model.Invoice.RefundInfo;
import java.util.Hashtable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RefundInfo_ESTest extends RefundInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      refundInfo0.setSupportRequest("");
      String string0 = refundInfo0.getSupportRequest();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>();
      refundInfo0.setAmounts(hashtable0);
      Hashtable<String, Double> hashtable1 = refundInfo0.getAmounts();
      assertEquals(0, hashtable1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      Hashtable<String, Double> hashtable0 = new Hashtable<String, Double>(1394);
      Double double0 = new Double(1394);
      hashtable0.put("Y@", double0);
      refundInfo0.setAmounts(hashtable0);
      Hashtable<String, Double> hashtable1 = refundInfo0.getAmounts();
      assertEquals(1, hashtable1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      try { 
        refundInfo0.setCurrency("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error: currency code must be a type of Model.Currency
         //
         verifyException("com.bitpay.sdk_light.model.Invoice.RefundInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      refundInfo0.setCurrency("ISK");
      String string0 = refundInfo0.getCurrency();
      assertEquals("ISK", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      refundInfo0.setSupportRequest("ISK");
      String string0 = refundInfo0.getSupportRequest();
      assertEquals("ISK", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      Hashtable<String, Double> hashtable0 = refundInfo0.getAmounts();
      assertNull(hashtable0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      String string0 = refundInfo0.getCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RefundInfo refundInfo0 = new RefundInfo();
      String string0 = refundInfo0.getSupportRequest();
      assertNull(string0);
  }
}
