/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:27:25 GMT 2022
 */

package casmi.graphics.object;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import casmi.graphics.Graphics;
import casmi.graphics.color.Color;
import casmi.graphics.color.ColorSet;
import casmi.graphics.color.RGBColor;
import casmi.graphics.object.Light;
import casmi.graphics.object.LightMode;
import casmi.matrix.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Light_ESTest extends Light_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Light light0 = new Light();
      light0.setSpecular((float[]) null);
      light0.getSpecular();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Light light0 = new Light();
      light0.setShininess((float[]) null);
      light0.getShininess();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      float[] floatArray0 = new float[0];
      light0.setShininess(floatArray0);
      light0.getShininess();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Light light0 = new Light();
      light0.setIndex(2241);
      int int0 = light0.getIndex();
      assertEquals(2241, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      light0.setIndex((-4509));
      int int0 = light0.getIndex();
      assertEquals((-4509), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Light light0 = new Light();
      light0.setEmissive((float[]) null);
      light0.getEmissive();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Light light0 = new Light();
      float[] floatArray0 = new float[0];
      light0.setEmissive(floatArray0);
      light0.getEmissive();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      light0.setDirectionZ(1.0);
      double double0 = light0.getDirectionZ();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightMode lightMode0 = LightMode.AMBIENT;
      Light light0 = new Light(lightMode0);
      light0.setDirectionZ((-447.736514331));
      double double0 = light0.getDirectionZ();
      assertEquals((-447.736514331), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightMode lightMode0 = LightMode.DIRECTION;
      Light light0 = new Light(lightMode0);
      light0.setDirectionY(120.0);
      double double0 = light0.getDirectionY();
      assertEquals(120.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Light light0 = new Light();
      light0.setDirectionY((-4211.015692398));
      double double0 = light0.getDirectionY();
      assertEquals((-4211.015692398), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightMode lightMode0 = LightMode.SPOT;
      Light light0 = new Light(lightMode0);
      light0.setDirection(3646, 3646.0F, 1494.432F);
      double double0 = light0.getDirectionX();
      assertEquals(3646.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightMode lightMode0 = LightMode.AMBIENT;
      Light light0 = new Light(lightMode0);
      float[] floatArray0 = new float[0];
      light0.setDiffuse(floatArray0);
      light0.getDiffuse();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      assertEquals(30.0, light0.getAngle(), 0.01);
      
      light0.setAngle(0.0F);
      double double0 = light0.getAngle();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightMode lightMode0 = LightMode.AMBIENT;
      Light light0 = new Light(lightMode0);
      light0.setAngle((-906.665331));
      double double0 = light0.getAngle();
      assertEquals((-906.665331), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      float[] floatArray0 = new float[0];
      light0.setAmbient(floatArray0);
      light0.getAmbient();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      light0.setPosition((Vector3D) null);
      // Undeclared exception!
      try { 
        light0.setPosition(316.8360304388, 380.4835, (-1760.7170748169));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.graphics.object.Light", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Light light0 = new Light();
      // Undeclared exception!
      try { 
        light0.render((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.graphics.object.Light", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightMode lightMode0 = LightMode.NONE;
      Light light0 = new Light(lightMode0);
      int int0 = light0.getIndex();
      assertEquals(30.0, light0.getAngle(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Light light0 = new Light();
      light0.setAmbient((float[]) null);
      light0.getAmbient();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightMode lightMode0 = LightMode.DIRECTION;
      Light light0 = new Light(lightMode0);
      light0.getDirectionX();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Light light0 = new Light();
      light0.setDiffuse((float[]) null);
      light0.getDiffuse();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightMode lightMode0 = LightMode.SPOT;
      Light light0 = new Light(lightMode0);
      light0.getLightMode();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightMode lightMode0 = LightMode.DIRECTION;
      Light light0 = new Light(lightMode0);
      float[] floatArray0 = light0.getAmbient();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Light light0 = new Light();
      light0.setDirectionX(494.87);
      assertEquals(494.87, light0.getDirectionX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LightMode lightMode0 = LightMode.SPOT;
      Light light0 = new Light(lightMode0);
      light0.setPosition(1.0, 1.0, 1.0);
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightMode lightMode0 = LightMode.SPOT;
      Light light0 = new Light(lightMode0);
      light0.setLightMode(lightMode0);
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Light light0 = new Light();
      float[] floatArray0 = light0.getShininess();
      assertEquals(30.0, light0.getAngle(), 0.01);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Light light0 = new Light();
      ColorSet colorSet0 = ColorSet.MEDIUM_VIOLET_RED;
      light0.setColor(colorSet0);
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Light light0 = new Light();
      float[] floatArray0 = light0.getEmissive();
      assertEquals(30.0, light0.getAngle(), 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightMode lightMode0 = LightMode.SPOT;
      Light light0 = new Light(lightMode0);
      float[] floatArray0 = new float[0];
      light0.setSpecular(floatArray0);
      light0.getSpecular();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LightMode lightMode0 = LightMode.AMBIENT;
      Light light0 = new Light(lightMode0);
      light0.getDirectionZ();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LightMode lightMode0 = LightMode.DIRECTION;
      Light light0 = new Light(lightMode0);
      light0.getDirectionY();
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LightMode lightMode0 = LightMode.DIRECTION;
      Light light0 = new Light(lightMode0);
      light0.setDirection((-3964.216161), 0.0, 0.0F);
      double double0 = light0.getDirectionX();
      assertEquals((-3964.216161), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Light light0 = new Light();
      float[] floatArray0 = light0.getDiffuse();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LightMode lightMode0 = LightMode.DIRECTION;
      Light light0 = new Light(lightMode0);
      RGBColor rGBColor0 = new RGBColor("");
      light0.setColor((Color) rGBColor0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LightMode lightMode0 = LightMode.SPOT;
      Light light0 = new Light(lightMode0);
      float[] floatArray0 = light0.getSpecular();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(30.0, light0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Light light0 = new Light();
      double double0 = light0.getAngle();
      assertEquals(30.0, double0, 0.01);
  }
}
