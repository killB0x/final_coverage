/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:42:08 GMT 2022
 */

package casmi.tween.equations;

import org.junit.Test;
import static org.junit.Assert.*;
import casmi.tween.equations.QuadraticInOut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuadraticInOut_ESTest extends QuadraticInOut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuadraticInOut quadraticInOut0 = new QuadraticInOut();
      double double0 = quadraticInOut0.compute(0.0, 0.0, 0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuadraticInOut quadraticInOut0 = new QuadraticInOut();
      double double0 = quadraticInOut0.compute(1.0, 400.27740286022083, 0.0, (-502.91335996906));
      assertEquals(400.27740286022083, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuadraticInOut quadraticInOut0 = new QuadraticInOut();
      double double0 = quadraticInOut0.compute(1.0, 323.957710511, 518.49558, 2.0);
      assertEquals(583.2055005110001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuadraticInOut quadraticInOut0 = new QuadraticInOut();
      double double0 = quadraticInOut0.compute(2.0, 0.0, 0.0, 2.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuadraticInOut quadraticInOut0 = new QuadraticInOut();
      double double0 = quadraticInOut0.compute((-1644.0258), 2030.3967, 2030.3967, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuadraticInOut quadraticInOut0 = new QuadraticInOut();
      double double0 = quadraticInOut0.compute((-1.0), (-1.0), 0.0, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }
}
