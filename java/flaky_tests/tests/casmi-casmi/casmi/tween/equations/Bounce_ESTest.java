/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:35:51 GMT 2022
 */

package casmi.tween.equations;

import org.junit.Test;
import static org.junit.Assert.*;
import casmi.tween.equations.Bounce;
import casmi.tween.equations.BounceInOut;
import casmi.tween.equations.BounceOut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Bounce_ESTest extends Bounce_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = Bounce.computeBounce(1622.94411928886, 0.5, 0.5, 2134.55967207);
      assertEquals(0.9814104644033868, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = Bounce.computeBounce(0.9090909090909091, 0.9090909090909091, 0.9090909090909091, 1.0);
      assertEquals(1.8181818080219374, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BounceOut bounceOut0 = new BounceOut();
      double double0 = bounceOut0.compute(0.7272727272727273, (-1234.521511), Double.POSITIVE_INFINITY, 1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = Bounce.computeBounce(0.0, 0.0, 0.0, (-2975.1254187728873));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = Bounce.computeBounce(1743.48898593905, 1743.48898593905, 1743.48898593905, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BounceInOut bounceInOut0 = new BounceInOut();
      double double0 = bounceInOut0.compute(1.96875, 1.96875, 1.0, 0.9090909090909091);
      assertEquals(24.320177294132296, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = Bounce.computeBounce(0.7272727272727273, (-1.0), (-82.5745), 2.0);
      assertEquals((-83.57450369136797), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BounceOut bounceOut0 = new BounceOut();
      double double0 = bounceOut0.compute(1.0, Double.POSITIVE_INFINITY, Double.NaN, (-1234.521511));
      assertEquals(Double.NaN, double0, 0.01);
  }
}
