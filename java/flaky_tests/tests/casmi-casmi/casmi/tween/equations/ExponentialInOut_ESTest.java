/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:33:39 GMT 2022
 */

package casmi.tween.equations;

import org.junit.Test;
import static org.junit.Assert.*;
import casmi.tween.equations.ExponentialInOut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExponentialInOut_ESTest extends ExponentialInOut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute((-1.0), 1596.4522050149, 2764.027734797, (-2.0));
      assertEquals(2978.4660724134, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute(1.0, 0.0, 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute((-710.9934694233781), (-710.9934694233781), 0.0, (-710.9934694233781));
      assertEquals((-710.9934694233781), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute(0.0, 2.0, 1.0, 2.0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute((-1540.3587309), 0.0, 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute(1025.368843153056, 1025.368843153056, 2.0, (-1621.268871622508));
      assertEquals(1025.3688433051043, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute(0.0, (-3416.9), (-3416.9), 0.0);
      assertEquals((-3416.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ExponentialInOut exponentialInOut0 = new ExponentialInOut();
      double double0 = exponentialInOut0.compute((-968.234301), 0.0, (-1.0), (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }
}
