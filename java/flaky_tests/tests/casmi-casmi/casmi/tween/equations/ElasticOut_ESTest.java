/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:36:53 GMT 2022
 */

package casmi.tween.equations;

import org.junit.Test;
import static org.junit.Assert.*;
import casmi.tween.equations.ElasticOut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ElasticOut_ESTest extends ElasticOut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ElasticOut elasticOut0 = new ElasticOut();
      double double0 = elasticOut0.compute((-4985.471513927071), (-1.0), Double.NaN, (-2103.080989));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ElasticOut elasticOut0 = new ElasticOut();
      double double0 = elasticOut0.compute(2286.2191721855734, 2286.2191721855734, 2286.2191721855734, 2286.2191721855734);
      assertEquals(4572.438344371147, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ElasticOut elasticOut0 = new ElasticOut();
      double double0 = elasticOut0.compute(0.0, 1.0, 6.283185307179586, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ElasticOut elasticOut0 = new ElasticOut();
      double double0 = elasticOut0.compute((-1270.376210297977), (-1.0), 0.0, (-1270.376210297977));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ElasticOut elasticOut0 = new ElasticOut();
      double double0 = elasticOut0.compute(0.0, 0.0, 2166.87616660406, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ElasticOut elasticOut0 = new ElasticOut();
      double double0 = elasticOut0.compute((-244.05897614751), (-244.05897614751), (-244.05897614751), 2.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }
}
