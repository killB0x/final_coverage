/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:40:54 GMT 2022
 */

package casmi.tween.equations;

import org.junit.Test;
import static org.junit.Assert.*;
import casmi.tween.equations.BackInOut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BackInOut_ESTest extends BackInOut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BackInOut backInOut0 = new BackInOut();
      double double0 = backInOut0.compute(0.0, (-2472.62), (-1236.8), 6995.578917022108);
      assertEquals((-2472.62), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BackInOut backInOut0 = new BackInOut();
      double double0 = backInOut0.compute((-1236.8), 1093.3697158, Double.POSITIVE_INFINITY, 81.4125);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BackInOut backInOut0 = new BackInOut();
      double double0 = backInOut0.compute(1.0, 0.0, Double.POSITIVE_INFINITY, 2.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BackInOut backInOut0 = new BackInOut();
      double double0 = backInOut0.compute((-2472.62), 0.0, 0.0072850349027494075, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BackInOut backInOut0 = new BackInOut();
      double double0 = backInOut0.compute(1.0, 0.0, 2.0, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BackInOut backInOut0 = new BackInOut();
      double double0 = backInOut0.compute(1.0, 1.0, (-1236.8), 1.0);
      assertEquals((-1235.8), double0, 0.01);
  }
}
