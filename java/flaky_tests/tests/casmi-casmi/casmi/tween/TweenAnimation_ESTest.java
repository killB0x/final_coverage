/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:34:35 GMT 2022
 */

package casmi.tween;

import org.junit.Test;
import static org.junit.Assert.*;
import casmi.tween.AnimationTarget;
import casmi.tween.TweenAnimation;
import casmi.tween.TweenEquation;
import casmi.tween.equations.QuadraticIn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TweenAnimation_ESTest extends TweenAnimation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.POSITION_Y;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 0.0, (-2358.4921962273347), 0.0, class0);
      tweenAnimation0.start((-1135L));
      tweenAnimation0.render((-1135L));
      assertEquals((-1135.0), tweenAnimation0.getReadyTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.SCALE_Y;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 10.0, 10.0, (-394.47852062524623), class0);
      tweenAnimation0.start(0L);
      tweenAnimation0.setEndValue((-617.5455));
      tweenAnimation0.render((-1614L));
      double double0 = tweenAnimation0.getValue();
      assertEquals(TweenAnimation.TweenAnimationStatus.RUNNING, tweenAnimation0.getStatus());
      assertEquals((-10495.229844344369), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TweenAnimation tweenAnimation0 = new TweenAnimation((AnimationTarget) null, (-975.0505862157653), (-975.0505862157653), (-975.0935765952363), (Class<? extends TweenEquation>) null);
      tweenAnimation0.getTarget();
      assertEquals((-975.0505862157653), tweenAnimation0.getStartValue(), 0.01);
      assertEquals((-975.0505862157653), tweenAnimation0.getEndValue(), 0.01);
      assertEquals((-975.0935765952363), tweenAnimation0.getDuration(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ROTATION_Y;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 0.0, 0.0, 0.0, class0);
      double double0 = tweenAnimation0.getStartValue();
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, tweenAnimation0.getDuration(), 0.01);
      assertEquals(0.0, tweenAnimation0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.POSITION_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-30.73596787), (-30.73596787), 3986.699743608, class0);
      double double0 = tweenAnimation0.getStartValue();
      assertEquals((-30.73596787), tweenAnimation0.getEndValue(), 0.01);
      assertEquals(3986.699743608, tweenAnimation0.getDuration(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals((-30.73596787), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.start(4244L);
      double double0 = tweenAnimation0.getStartTime();
      assertEquals(4244.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.POSITION_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-30.73596787), (-30.73596787), 3986.699743608, class0);
      tweenAnimation0.start((-1956L));
      double double0 = tweenAnimation0.getStartTime();
      assertEquals((-1956.0), tweenAnimation0.getReadyTime(), 0.01);
      assertEquals((-1956.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.start(4244L);
      double double0 = tweenAnimation0.getReadyTime();
      assertEquals(4244.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.POSITION_Y;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 0.0, (-2358.4921962273347), 0.0, class0);
      tweenAnimation0.start((-1135L));
      double double0 = tweenAnimation0.getReadyTime();
      assertEquals((-1135.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.SCALE_Y;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 0.0, 0.0, 0.0, class0);
      double double0 = tweenAnimation0.getEndValue();
      assertEquals(0.0, tweenAnimation0.getStartValue(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDuration(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.start(4244L);
      double double0 = tweenAnimation0.getEndTime();
      assertEquals(4244.0, tweenAnimation0.getReadyTime(), 0.01);
      assertEquals(804.2145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ROTATION_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 0.0, 0.0, 0.0, class0);
      tweenAnimation0.start((-1460L));
      double double0 = tweenAnimation0.getEndTime();
      assertEquals((-1460.0), tweenAnimation0.getReadyTime(), 0.01);
      assertEquals((-1460.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ROTATION_Y;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 3081.06, 3081.06, 0.0, class0);
      double double0 = tweenAnimation0.getDuration();
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals(3081.06, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(3081.06, tweenAnimation0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.setDuration(273.71725171);
      double double0 = tweenAnimation0.getDuration();
      assertEquals(273.71725171, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.setStartValue(121.799977356);
      assertEquals(121.799977356, tweenAnimation0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      double double0 = tweenAnimation0.getEndValue();
      assertEquals(1411.08544, double0, 0.01);
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      double double0 = tweenAnimation0.getStartValue();
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals(1411.08544, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.getStatus();
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.setEndValue((-281.1350131));
      double double0 = tweenAnimation0.getEndValue();
      assertEquals((-281.1350131), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      double double0 = tweenAnimation0.getDuration();
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
      assertEquals((-3439.7855), double0, 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      double double0 = tweenAnimation0.getEndTime();
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ROTATION_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-1461.0), 0.0, (-2022.2202), class0);
      double double0 = tweenAnimation0.getValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2022.2202), tweenAnimation0.getDuration(), 0.01);
      assertEquals((-1461.0), tweenAnimation0.getStartValue(), 0.01);
      assertEquals(0.0, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      double double0 = tweenAnimation0.getStartTime();
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ROTATION_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-1461.0), 0.0, (-2022.2202), class0);
      tweenAnimation0.start(2708L);
      tweenAnimation0.render((-2593L));
      double double0 = tweenAnimation0.getValue();
      assertEquals(8578.427224542393, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      tweenAnimation0.getTarget();
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.SCALE_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-3409L), (-3409L), (-3409L), class0);
      tweenAnimation0.render((-3409L));
      assertEquals(0.0, tweenAnimation0.getValue(), 0.01);
      assertEquals((-3409.0), tweenAnimation0.getDuration(), 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals((-3409.0), tweenAnimation0.getStartValue(), 0.01);
      assertEquals((-3409.0), tweenAnimation0.getEndValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ALPHA_FILL;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, 1411.08544, 1411.08544, (-3439.7855), class0);
      double double0 = tweenAnimation0.getReadyTime();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, tweenAnimation0.getDelayTime(), 0.01);
      assertEquals((-3439.7855), tweenAnimation0.getDuration(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getEndValue(), 0.01);
      assertEquals(1411.08544, tweenAnimation0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.ROTATION_Z;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-0.5), (-0.5), 2151.89912, class0);
      double double0 = tweenAnimation0.getDelayTime();
      assertEquals(2151.89912, tweenAnimation0.getDuration(), 0.01);
      assertEquals((-0.5), tweenAnimation0.getEndValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.5), tweenAnimation0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnimationTarget animationTarget0 = AnimationTarget.SCALE_X;
      Class<QuadraticIn> class0 = QuadraticIn.class;
      TweenAnimation tweenAnimation0 = new TweenAnimation(animationTarget0, (-3409L), (-3409L), (-3409L), class0);
      tweenAnimation0.start((-3409L));
      tweenAnimation0.render((-3409L));
      assertEquals((-3409.0), tweenAnimation0.getReadyTime(), 0.01);
  }
}
