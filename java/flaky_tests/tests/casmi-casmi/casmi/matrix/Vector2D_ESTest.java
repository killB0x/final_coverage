/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:51:35 GMT 2022
 */

package casmi.matrix;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import casmi.matrix.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector2D_ESTest extends Vector2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(3384.658808000921, 2879.998616200468);
      double double0 = Vector2D.getDistance(vector2D0, vector2D0);
      assertEquals(3384.658808000921, vector2D0.getX(), 0.01);
      assertEquals(2879.998616200468, vector2D0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0, (-69.4353503));
      double double0 = vector2D0.lengthSquared();
      assertEquals((-69.4353503), vector2D0.getY(), 0.01);
      assertEquals(1.0, vector2D0.getX(), 0.01);
      assertEquals(4822.26787128371, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      Vector2D vector2D1 = vector2D0.mult(779.444);
      Vector2D vector2D2 = vector2D1.add(vector2D0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D2.lengthSquared(), 0.01);
      assertNotSame(vector2D2, vector2D1);
      assertNotSame(vector2D2, vector2D0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      Vector2D vector2D1 = new Vector2D(2590.675994968428, 51.0);
      Vector2D vector2D2 = vector2D0.par(vector2D1);
      assertEquals(51.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D2.getX(), 0.01);
      assertEquals(0.0, vector2D2.getY(), 0.01);
      assertEquals(0.0, vector2D2.lengthSquared(), 0.01);
      assertNotSame(vector2D2, vector2D0);
      assertEquals(2590.675994968428, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0, (-69.4353503));
      Vector2D vector2D1 = vector2D0.par((-69.4353503));
      Vector2D vector2D2 = vector2D1.par(vector2D0);
      assertEquals((-0.014401886008775563), vector2D2.getX(), 0.01);
      assertEquals((-0.014401886008775563), vector2D2.getY(), 0.01);
      assertEquals(4.148286412195306E-4, vector2D2.lengthSquared(), 0.01);
      assertEquals(1.0, vector2D0.getX(), 0.01);
      assertEquals((-69.4353503), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      vector2D0.setX(779.444);
      Vector2D vector2D1 = vector2D0.mult(0.0);
      vector2D1.par(vector2D0);
      assertEquals(779.444, vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      vector2D0.setX(779.444);
      Vector2D vector2D1 = vector2D0.mult(779.444);
      vector2D0.setX((-1.0));
      vector2D1.par(vector2D0);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0, (-69.4353503));
      Vector2D vector2D1 = vector2D0.par(1.0);
      assertEquals((-69.4353503), vector2D0.getY(), 0.01);
      assertEquals(4822.26787128371, vector2D1.lengthSquared(), 0.01);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(1.0, vector2D0.getX(), 0.01);
      assertEquals(1.0, vector2D1.getX(), 0.01);
      assertEquals((-69.4353503), vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0, (-69.4353503));
      Vector2D vector2D1 = vector2D0.par((-69.4353503));
      Vector2D vector2D2 = vector2D0.mult(vector2D1);
      assertEquals(4821.26807869803, vector2D2.lengthSquared(), 0.01);
      assertEquals((-0.014401886008775563), vector2D2.getX(), 0.01);
      assertEquals((-69.4353503), vector2D0.getY(), 0.01);
      assertEquals((-69.4353503), vector2D2.getY(), 0.01);
      assertEquals(1.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1284.1), (-1284.1));
      Vector2D vector2D1 = vector2D0.mult((-937.4067));
      assertEquals((-1284.1), vector2D0.getY(), 0.01);
      assertEquals((-1284.1), vector2D0.getX(), 0.01);
      assertEquals(1203723.9434699998, vector2D1.getX(), 0.01);
      assertEquals(1203723.9434699998, vector2D1.getY(), 0.01);
      assertEquals(2.8979026641659346E12, vector2D1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      vector2D0.setX(779.444);
      Vector2D vector2D1 = vector2D0.mult(779.444);
      vector2D0.setX((-1.0));
      vector2D0.mult(vector2D1);
      assertEquals(1.0, vector2D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-3135.7492267), (-4816.782302213879));
      Vector2D vector2D1 = vector2D0.mult(725.896555);
      assertEquals((-2276229.561005444), vector2D1.getX(), 0.01);
      assertEquals(1.7406633120378748E13, vector2D1.lengthSquared(), 0.01);
      assertEquals((-3496485.6793620237), vector2D1.getY(), 0.01);
      assertEquals((-3135.7492267), vector2D0.getX(), 0.01);
      assertEquals((-4816.782302213879), vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      vector2D0.setX(779.444);
      double double0 = vector2D0.lengthSquared();
      assertEquals(779.444, vector2D0.getX(), 0.01);
      assertEquals(607532.9491359999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      vector2D0.set((-53.461361598), (-53.461361598));
      Vector2D vector2D1 = vector2D0.mult(vector2D0);
      double double0 = vector2D1.getY();
      assertEquals((-53.461361598), vector2D0.getX(), 0.01);
      assertEquals(2858.1171839121093, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-2750.025));
      double double0 = vector2D0.getY();
      assertEquals((-2750.025), double0, 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      assertEquals(0.0, vector2D0.lengthSquared(), 0.01);
      
      vector2D0.setX((-1.0));
      double double0 = vector2D0.getX();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      double double0 = Vector2D.getDistance(vector2D0, vector2D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector2D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(3384.658808000921, 2879.998616200468);
      Vector2D vector2D1 = new Vector2D();
      double double0 = Vector2D.getDistance(vector2D0, vector2D1);
      assertEquals(2879.998616200468, vector2D0.getY(), 0.01);
      assertEquals(3384.658808000921, vector2D0.getX(), 0.01);
      assertEquals(4444.13177976248, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      vector2D0.setX(779.444);
      double double0 = Vector2D.dotProduct(vector2D0, vector2D0);
      assertEquals(779.444, vector2D0.getX(), 0.01);
      assertEquals(607532.9491359999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-2750.025));
      Vector2D vector2D1 = vector2D0.mult(vector2D0);
      double double0 = Vector2D.dotProduct(vector2D1, vector2D0);
      assertEquals((-2750.025), vector2D0.getY(), 0.01);
      assertEquals((-2.079744219365627E10), double0, 0.01);
      assertEquals((-1.0), vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(3384.658808000921, 2879.998616200468);
      Vector2D vector2D1 = vector2D0.add(vector2D0);
      assertEquals(3384.658808000921, vector2D0.getX(), 0.01);
      assertEquals(7.90012291035793E7, vector2D1.lengthSquared(), 0.01);
      assertEquals(2879.998616200468, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, (-1.0));
      Vector2D vector2D1 = vector2D0.add(vector2D0);
      assertEquals((-1.0), vector2D0.getY(), 0.01);
      assertEquals(4.0, vector2D1.lengthSquared(), 0.01);
      assertEquals(0.0, vector2D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(3384.658808000921, 2879.998616200468);
      vector2D0.set((-623.678), 0.0);
      vector2D0.add(vector2D0);
      assertEquals(0.0, vector2D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-2750.025));
      Vector2D vector2D1 = vector2D0.mult(vector2D0);
      Vector2D vector2D2 = vector2D1.add(1809.39389);
      assertEquals(5.722086009746367E13, vector2D2.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      Vector2D vector2D1 = vector2D0.add(0.0);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-2750.025));
      Vector2D vector2D1 = vector2D0.add(1809.39389);
      double double0 = vector2D1.getX();
      assertEquals(4155075.346489164, vector2D1.lengthSquared(), 0.01);
      assertEquals(1808.39389, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      // Undeclared exception!
      try { 
        vector2D0.par((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      // Undeclared exception!
      try { 
        vector2D0.mult((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.0, (-69.4353503));
      // Undeclared exception!
      try { 
        Vector2D.dotProduct((Vector2D) null, vector2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      // Undeclared exception!
      try { 
        vector2D0.add((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      String string0 = vector2D0.toString();
      assertEquals("(0.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-2750.025));
      Vector2D vector2D1 = vector2D0.add((-1.0));
      assertEquals(7568142.550625, vector2D1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      double double0 = vector2D0.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector2D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      double double0 = vector2D0.getX();
      assertEquals(0.0, vector2D0.lengthSquared(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      double double0 = Vector2D.dotProduct(vector2D0, vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      Vector2D vector2D1 = vector2D0.par(2.0);
      assertEquals(0.0, vector2D1.lengthSquared(), 0.01);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector2D.getDistance((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      double double0 = vector2D0.lengthSquared();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      Vector2D vector2D1 = vector2D0.par(vector2D0);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      Vector2D vector2D1 = vector2D0.mult(vector2D0);
      assertEquals(0.0, vector2D1.lengthSquared(), 0.01);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D();
      vector2D0.setY((-3405.831656158867));
      assertEquals(1.1599689270093853E7, vector2D0.lengthSquared(), 0.01);
  }
}
