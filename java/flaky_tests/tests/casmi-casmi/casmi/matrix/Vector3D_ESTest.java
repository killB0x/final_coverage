/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:50:18 GMT 2022
 */

package casmi.matrix;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import casmi.matrix.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      vector3D0.set(1.0, 1.0, (-1342.0));
      Vector3D.dotProduct(vector3D0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      vector3D0.setY((-629.859));
      Vector3D.dotProduct(vector3D0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = vector3D0.par(vector3D0);
      Vector3D.getDistance(vector3D1, vector3D1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = vector3D0.par((-2372.164765414278));
      vector3D0.setY((-3227.267274493));
      Vector3D.getDistance(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      vector3D0.setY((-629.859));
      Vector3D.getDistance(vector3D0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      vector3D0.set(1.0, 1.0, (-1342.0));
      vector3D0.lengthSquared();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      vector3D0.lengthSquared();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = vector3D0.par(vector3D0);
      Vector3D vector3D2 = vector3D0.par(vector3D1);
      assertEquals(0.0, vector3D0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, vector3D2.getY(), 0.01);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), 125.365, (-1.0));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = vector3D1.par(vector3D0);
      assertEquals(0.0, vector3D2.lengthSquared(), 0.01);
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(-0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2329.426243234), (-284.606));
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      vector3D1.set((-2329.426243234), (-284.606), (-2329.426243234));
      vector3D0.par(vector3D1);
      assertEquals(1.0933453820570534E7, vector3D1.lengthSquared(), 0.01);
      assertEquals((-2329.426243234), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      vector3D0.setY((-629.859));
      Vector3D vector3D2 = vector3D1.par(vector3D0);
      assertEquals((-629.859), vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      vector3D0.set(0.0, (-1.0), (-1.0));
      vector3D0.par(vector3D1);
      assertEquals(2.0, vector3D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      vector3D0.setX((-1225.38));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      vector3D1.par(vector3D0);
      assertEquals(1501556.1444000003, vector3D0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      Vector3D vector3D1 = vector3D0.par(0.0);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      vector3D0.set(1.0, 1.0, (-1342.0));
      vector3D0.par(1.0);
      assertEquals(1800966.0, vector3D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = vector3D0.mult(vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-109.6));
      Vector3D vector3D1 = vector3D0.par(vector3D0);
      Vector3D vector3D2 = vector3D1.mult(vector3D0);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
      assertEquals(Double.NaN, vector3D2.getZ(), 0.01);
      assertEquals((-109.6), vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      Vector3D vector3D1 = new Vector3D((-949.0), 1.0, 1.0);
      vector3D0.set((-1821.22), (-0.001053740779768177), (-2353.7925833));
      Vector3D vector3D2 = vector3D1.mult(vector3D0);
      assertEquals((-0.001053740779768177), vector3D0.getY(), 0.01);
      assertEquals((-2353.7925833), vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      Vector3D vector3D1 = vector3D0.mult(vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, (-1.0));
      Vector3D vector3D1 = new Vector3D((-1.0), 0.0);
      Vector3D vector3D2 = vector3D0.mult(vector3D1);
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
      assertEquals((-1.0), vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(1.0, vector3D2.lengthSquared(), 0.01);
      assertEquals(1.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-109.6));
      vector3D0.set(2022.824169348035, 3823.8874660436, 2.0);
      vector3D0.mult((-2606.0));
      assertEquals(2022.824169348035, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-109.6));
      Vector3D vector3D1 = vector3D0.par((-236.41643926));
      Vector3D vector3D2 = vector3D1.mult((-2606.0));
      assertEquals((-1208.1122653483958), vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(1459535.2456852328, vector3D2.lengthSquared(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.4635887434184174, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      Vector3D vector3D1 = vector3D0.mult(0.0);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      vector3D0.setX((-1225.38));
      double double0 = vector3D0.lengthSquared();
      assertEquals((-1225.38), vector3D0.getX(), 0.01);
      assertEquals(1501556.1444000003, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-2579.702631418259), 931.95777471);
      double double0 = vector3D0.getZ();
      assertEquals((-2579.702631418259), vector3D0.getY(), 0.01);
      assertEquals(7523410.960388705, vector3D0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(931.95777471, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      
      vector3D0.setZ((-1.0));
      double double0 = vector3D0.getZ();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1.0));
      double double0 = vector3D0.getY();
      assertEquals(2.0, vector3D0.lengthSquared(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      double double0 = vector3D0.getX();
      assertEquals(1.0, vector3D0.lengthSquared(), 0.01);
      assertEquals((-1.0), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      Vector3D vector3D1 = vector3D0.par((-949.0));
      double double0 = vector3D1.getX();
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.1103696309464455E-6, vector3D1.lengthSquared(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals((-0.001053740779768177), double0, 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      vector3D0.setX((-1225.38));
      Vector3D vector3D1 = vector3D0.mult((-1.0));
      double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
      assertEquals((-1225.38), vector3D0.getX(), 0.01);
      assertEquals((-1501556.1444000003), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-874.58079315), (-874.58079315));
      Vector3D vector3D1 = new Vector3D((-1539.57263515), (-874.58079315), (-1.0));
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      assertEquals(874.58079315, vector3D2.getX(), 0.01);
      assertEquals((-874.58079315), vector3D2.getY(), 0.01);
      assertEquals(3.3824740243144727E11, vector3D2.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-874.58079315), (-874.58079315));
      Vector3D vector3D1 = new Vector3D((-1539.57263515), (-874.58079315), (-1.0));
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
      assertEquals((-874.58079315), vector3D2.getX(), 0.01);
      assertEquals(3.3824740243144727E11, vector3D2.lengthSquared(), 0.01);
      assertEquals(874.58079315, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-109.6));
      Vector3D vector3D1 = vector3D0.par(vector3D0);
      Vector3D vector3D2 = vector3D1.add(vector3D0);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
      assertEquals((-108.6), vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1.0), 0.0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      
      vector3D0.setZ((-1.0));
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals((-2.0), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2329.426243234), (-284.606));
      Vector3D vector3D1 = vector3D0.mult((-4430.86447));
      Vector3D vector3D2 = vector3D0.add(vector3D1);
      assertEquals(1.080721700820018E14, vector3D2.lengthSquared(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals((-2329.426243234), vector3D0.getX(), 0.01);
      assertEquals((-284.606), vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      vector3D1.setX((-819.43972));
      Vector3D vector3D2 = vector3D1.par((-2372.164765414278));
      Vector3D vector3D3 = vector3D2.add(vector3D0);
      assertEquals((-819.43972), vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D3.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = vector3D0.add(0.0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      Vector3D vector3D1 = vector3D0.add(1549.0402212);
      assertEquals(1549.0402212, vector3D1.getZ(), 0.01);
      assertEquals(1549.0402212, vector3D1.getX(), 0.01);
      assertEquals(1549.0402212, vector3D1.getY(), 0.01);
      assertEquals(7198576.820686035, vector3D1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      // Undeclared exception!
      try { 
        vector3D0.par((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      // Undeclared exception!
      try { 
        vector3D0.mult((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.getDistance((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.dotProduct((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      // Undeclared exception!
      try { 
        Vector3D.crossProduct(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      // Undeclared exception!
      try { 
        vector3D0.add((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("casmi.matrix.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      vector3D0.set(189.0, (-1225.38));
      assertEquals((-1225.38), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals(0.0, vector3D1.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertNotSame(vector3D1, vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      double double0 = vector3D0.getZ();
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.lengthSquared(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      Vector3D vector3D1 = vector3D0.add((-949.0));
      assertEquals((-949.0), vector3D1.getY(), 0.01);
      assertEquals(2699906.0, vector3D1.lengthSquared(), 0.01);
      assertEquals((-949.0), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      vector3D0.set((-1.2939), 2.0, (-400.114602494));
      vector3D0.par(vector3D1);
      assertEquals(160097.36930614163, vector3D0.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      vector3D0.set((-1.2939), 2.0, (-400.114602494));
      vector3D0.mult((-0.001053740779768177));
      assertEquals((-400.114602494), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      String string0 = vector3D0.toString();
      assertEquals("(1.0, 0.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      double double0 = vector3D0.lengthSquared();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0);
      double double0 = vector3D0.getY();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 0.0);
      double double0 = vector3D0.getX();
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }
}
