/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 22:22:41 GMT 2022
 */

package org.jfaster.mango.descriptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.annotation.Sharding;
import org.jfaster.mango.descriptor.MethodDescriptor;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.jfaster.mango.descriptor.ReturnDescriptor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodDescriptor_ESTest extends MethodDescriptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("*13SgDs$>", class0, returnDescriptor0, linkedList1);
      Sharding sharding0 = methodDescriptor0.getShardingAnno();
      assertNull(sharding0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      Class<?> class1 = methodDescriptor0.getReturnRawType();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("*13SgDs$>", class0, returnDescriptor0, linkedList1);
      ReturnDescriptor returnDescriptor1 = methodDescriptor0.getReturnDescriptor();
      assertSame(returnDescriptor1, returnDescriptor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create((String) null, class0, (ReturnDescriptor) null, linkedList0);
      String string0 = methodDescriptor0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      String string0 = methodDescriptor0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("Z", (Class<?>) null, returnDescriptor0, linkedList1);
      Class<?> class1 = methodDescriptor0.getDaoClass();
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("JAVA8", class0, returnDescriptor0, linkedList1);
      Class<?> class1 = methodDescriptor0.getDaoClass();
      assertEquals("class org.jfaster.mango.descriptor.MethodDescriptor", class1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, (List<Annotation>) null);
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("nj,qY0yc$xZ", class0, returnDescriptor0, linkedList0);
      List<Annotation> list0 = methodDescriptor0.getAnnotations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(60, class0, linkedList0, "");
      Type type0 = parameterDescriptor0.getType();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(type0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("sH900wfMQh 8=PX", class0, returnDescriptor0, linkedList1);
      linkedList0.add(0, (Annotation) null);
      List<Annotation> list0 = methodDescriptor0.getAnnotations();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("JAVA8", class0, returnDescriptor0, linkedList1);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = methodDescriptor0.getAnnotation(class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      Class<Object> class0 = Object.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.isReturnGeneratedId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      Class<Annotation> class0 = Annotation.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.isAnnotationPresent(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ReturnGeneratedId", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getSQL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("&yX\"y;YPIyaie46", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getReturnType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("2[uf", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getReturnRawType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getGlobalTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("+j's@:(3V.Y9*", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getDataSourceFactoryName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create((String) null, class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getAnnotations(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      // Undeclared exception!
      try { 
        MethodDescriptor.create("Wildcard should have at most one lower bound: ", class0, (ReturnDescriptor) null, (List<ParameterDescriptor>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("1$s/n.&|bV#%,`M3(K", class0, returnDescriptor0, linkedList1);
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = methodDescriptor0.isAnnotationPresent(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      Class<Annotation> class0 = Annotation.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("Wildcard should have only one upper bound.", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("1$s/n.&|bV#%,`M3(K", class0, returnDescriptor0, linkedList1);
      Class<Annotation> class1 = Annotation.class;
      List<Annotation> list0 = methodDescriptor0.getAnnotations(class1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ReturnGeneratedId", class0, returnDescriptor0, linkedList1);
      boolean boolean0 = methodDescriptor0.isReturnGeneratedId();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Class<Object> class1 = Object.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create((String) null, class1, returnDescriptor0, linkedList1);
      boolean boolean0 = methodDescriptor0.isReturnGeneratedId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      // Undeclared exception!
      try { 
        methodDescriptor0.getDataSourceFactoryName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dao interface expected one @DB annotation but not found
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("1$s/n.&|bV#%,`M3(K", class0, returnDescriptor0, linkedList1);
      // Undeclared exception!
      try { 
        methodDescriptor0.getGlobalTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dao interface expected one @DB annotation but not found
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create((String) null, class0, (ReturnDescriptor) null, linkedList0);
      ReturnDescriptor returnDescriptor0 = methodDescriptor0.getReturnDescriptor();
      assertNull(returnDescriptor0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      Class<?> class1 = methodDescriptor0.getReturnRawType();
      assertEquals(1537, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      Class<?> class1 = methodDescriptor0.getDaoClass();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, (ReturnDescriptor) null, linkedList0);
      // Undeclared exception!
      try { 
        methodDescriptor0.getShardingAnno();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      // Undeclared exception!
      try { 
        methodDescriptor0.getSQL();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // each method expected one of @SQL or @UseSqlGenerator annotation but not found
         //
         verifyException("org.jfaster.mango.descriptor.MethodDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      List<ParameterDescriptor> list0 = methodDescriptor0.getParameterDescriptors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<MethodDescriptor> class0 = MethodDescriptor.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("JAVA8", class0, returnDescriptor0, linkedList1);
      String string0 = methodDescriptor0.getName();
      assertEquals("JAVA8", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      List<Annotation> list0 = methodDescriptor0.getAnnotations();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      Class class1 = (Class)methodDescriptor0.getReturnType();
      assertTrue(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("", class0, returnDescriptor0, linkedList1);
      boolean boolean0 = methodDescriptor0.isReturnGeneratedId();
      assertFalse(boolean0);
  }
}
