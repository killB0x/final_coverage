/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:39:22 GMT 2022
 */

package org.jfaster.mango.descriptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.descriptor.ReturnDescriptor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReturnDescriptor_ESTest extends ReturnDescriptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      // Undeclared exception!
      try { 
        ReturnDescriptor.create((Type) null, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Annotation> class0 = Annotation.class;
      linkedList0.add((Annotation) null);
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<Annotation> linkedList1 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor1 = ReturnDescriptor.create(class0, linkedList1);
      boolean boolean0 = returnDescriptor1.equals(returnDescriptor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Annotation> class0 = Annotation.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      boolean boolean0 = returnDescriptor0.equals(returnDescriptor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Annotation> class0 = Annotation.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      boolean boolean0 = returnDescriptor0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Annotation> class0 = Annotation.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      boolean boolean0 = returnDescriptor0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Annotation> class0 = Annotation.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      boolean boolean0 = returnDescriptor0.isOptinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Annotation> class0 = Annotation.class;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      returnDescriptor0.hashCode();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      boolean boolean0 = returnDescriptor0.isPageResult();
      assertFalse(boolean0);
  }
}
