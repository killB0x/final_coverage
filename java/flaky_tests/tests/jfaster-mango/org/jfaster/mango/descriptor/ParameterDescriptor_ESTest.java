/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:20:27 GMT 2022
 */

package org.jfaster.mango.descriptor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterDescriptor_ESTest extends ParameterDescriptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(2, class0, linkedList0, "a%eOT|e$5D");
      int int0 = parameterDescriptor0.getPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create((-3461), class0, linkedList0, "X'`3KSHAlH");
      int int0 = parameterDescriptor0.getPosition();
      assertEquals((-3461), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, "JAVA8");
      Type type0 = parameterDescriptor0.getType();
      ParameterDescriptor parameterDescriptor1 = ParameterDescriptor.create(0, type0, linkedList0, (String) null);
      parameterDescriptor1.getName();
      assertEquals(0, parameterDescriptor1.getPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create((-1), class0, linkedList0, "");
      parameterDescriptor0.getName();
      assertEquals((-1), parameterDescriptor0.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterDescriptor.create((-1), (Type) null, (List<Annotation>) null, "@");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, (List<Annotation>) null, "?ZPyvq%l");
      ParameterDescriptor parameterDescriptor1 = ParameterDescriptor.create(0, class0, linkedList0, "?ZPyvq%l");
      boolean boolean0 = parameterDescriptor0.equals(parameterDescriptor1);
      assertEquals(0, parameterDescriptor1.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create((-33), class0, linkedList0, "JAVA8");
      ParameterDescriptor parameterDescriptor1 = ParameterDescriptor.create((-33), class0, linkedList0, "xCK+)$8m$|e");
      boolean boolean0 = parameterDescriptor0.equals(parameterDescriptor1);
      assertEquals((-33), parameterDescriptor1.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, "D");
      ParameterDescriptor parameterDescriptor1 = ParameterDescriptor.create((-1), class0, linkedList0, "J^VA8");
      boolean boolean0 = parameterDescriptor0.equals(parameterDescriptor1);
      assertEquals((-1), parameterDescriptor1.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, "JAVA8");
      boolean boolean0 = parameterDescriptor0.equals("JAVA8");
      assertFalse(boolean0);
      assertEquals(0, parameterDescriptor0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, (String) null);
      boolean boolean0 = parameterDescriptor0.equals((Object) null);
      assertEquals(0, parameterDescriptor0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, "JAVA8");
      boolean boolean0 = parameterDescriptor0.equals(parameterDescriptor0);
      assertTrue(boolean0);
      assertEquals(0, parameterDescriptor0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, "JAVA8");
      parameterDescriptor0.hashCode();
      assertEquals(0, parameterDescriptor0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create(0, class0, linkedList0, "JAVA8");
      int int0 = parameterDescriptor0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ParameterDescriptor parameterDescriptor0 = ParameterDescriptor.create((-24), class0, linkedList0, "org.jfaster.mango.descriptor.ParameterDescripto3");
      parameterDescriptor0.getName();
      assertEquals((-24), parameterDescriptor0.getPosition());
  }
}
