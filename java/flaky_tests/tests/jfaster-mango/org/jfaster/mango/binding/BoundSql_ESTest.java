/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:54:09 GMT 2022
 */

package org.jfaster.mango.binding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BoundSql;
import org.jfaster.mango.type.BooleanTypeHandler;
import org.jfaster.mango.type.TypeHandler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundSql_ESTest extends BoundSql_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      boundSql0.addArg(";8aRD]QK$u&Y*m'@o_7");
      assertEquals("", boundSql0.getSql());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) null);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      String string0 = boundSql0.getSql();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoundSql boundSql0 = new BoundSql((StringBuilder) null);
      // Undeclared exception!
      try { 
        boundSql0.prepend("TloP2gzHpVRrtV5!29~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoundSql boundSql0 = new BoundSql((StringBuilder) null);
      BooleanTypeHandler booleanTypeHandler0 = new BooleanTypeHandler();
      // Undeclared exception!
      try { 
        boundSql0.prepend((Object) booleanTypeHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoundSql boundSql0 = new BoundSql((StringBuilder) null);
      // Undeclared exception!
      try { 
        boundSql0.getSql();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoundSql boundSql0 = new BoundSql((StringBuilder) null);
      // Undeclared exception!
      try { 
        boundSql0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoundSql boundSql0 = new BoundSql((StringBuilder) null);
      // Undeclared exception!
      try { 
        boundSql0.append("VARBINARY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoundSql boundSql0 = new BoundSql((StringBuilder) null);
      BooleanTypeHandler booleanTypeHandler0 = new BooleanTypeHandler();
      // Undeclared exception!
      try { 
        boundSql0.append((Object) booleanTypeHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      List<Object> list0 = boundSql0.getArgs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      List<TypeHandler<?>> list0 = boundSql0.getTypeHandlers();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BoundSql boundSql1 = new BoundSql(stringBuilder0, linkedList0, list0);
      assertEquals("", boundSql1.getSql());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      // Undeclared exception!
      try { 
        boundSql0.addArg((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // arg can't be null
         //
         verifyException("org.jfaster.mango.binding.BoundSql", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        boundSql0.addArg(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't get type handle, java type is 'class java.lang.Object', jdbc type is 'null'
         //
         verifyException("org.jfaster.mango.type.TypeHandlerRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Object object0 = new Object();
      BoundSql boundSql1 = boundSql0.append(object0);
      assertSame(boundSql1, boundSql0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      String string0 = boundSql0.getSql();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      BoundSql boundSql1 = boundSql0.append("");
      assertSame(boundSql0, boundSql1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      BoundSql boundSql1 = boundSql0.prepend("");
      assertSame(boundSql0, boundSql1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Object object0 = new Object();
      BoundSql boundSql1 = boundSql0.prepend(object0);
      assertSame(boundSql1, boundSql0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      BoundSql boundSql1 = boundSql0.copy();
      assertNotSame(boundSql0, boundSql1);
  }
}
