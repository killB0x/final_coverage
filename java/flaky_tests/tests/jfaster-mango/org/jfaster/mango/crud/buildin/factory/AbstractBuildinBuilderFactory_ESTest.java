/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:59:04 GMT 2022
 */

package org.jfaster.mango.crud.buildin.factory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.Builder;
import org.jfaster.mango.crud.buildin.factory.BuildinFindAllBuilderFactory;
import org.jfaster.mango.crud.buildin.factory.BuildinFindAllSortBuilderFactory;
import org.jfaster.mango.crud.buildin.factory.BuildinUpdateBuilderFactory;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractBuildinBuilderFactory_ESTest extends AbstractBuildinBuilderFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuildinFindAllSortBuilderFactory buildinFindAllSortBuilderFactory0 = new BuildinFindAllSortBuilderFactory();
      Class<Object> class0 = Object.class;
      Type type0 = buildinFindAllSortBuilderFactory0.expectedReturnType(class0);
      Class<Integer> class1 = Integer.class;
      List<Type> list0 = buildinFindAllSortBuilderFactory0.expectedParameterType(class1, class1);
      Builder builder0 = buildinFindAllSortBuilderFactory0.doTryGetBuilder("findAll", type0, list0, class0, class1);
      assertNotNull(builder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      BuildinFindAllSortBuilderFactory buildinFindAllSortBuilderFactory0 = new BuildinFindAllSortBuilderFactory();
      Class<Object> class0 = Object.class;
      Type type0 = buildinFindAllSortBuilderFactory0.expectedReturnType(class0);
      Class<Integer> class1 = Integer.class;
      Builder builder0 = buildinFindAllSortBuilderFactory0.doTryGetBuilder("findAll", type0, linkedList0, class0, class1);
      assertNull(builder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildinFindAllBuilderFactory buildinFindAllBuilderFactory0 = new BuildinFindAllBuilderFactory();
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      List<Type> list0 = buildinFindAllBuilderFactory0.expectedParameterType(class0, class1);
      BuildinFindAllSortBuilderFactory buildinFindAllSortBuilderFactory0 = new BuildinFindAllSortBuilderFactory();
      BuildinUpdateBuilderFactory buildinUpdateBuilderFactory0 = new BuildinUpdateBuilderFactory();
      Class class2 = (Class)buildinUpdateBuilderFactory0.expectedReturnType(class1);
      // Undeclared exception!
      try { 
        buildinFindAllSortBuilderFactory0.doTryGetBuilder("findAll", class1, list0, class2, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Primitive type 'int' used as type parameter
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      BuildinFindAllSortBuilderFactory buildinFindAllSortBuilderFactory0 = new BuildinFindAllSortBuilderFactory();
      Class<Object> class0 = Object.class;
      Builder builder0 = buildinFindAllSortBuilderFactory0.doTryGetBuilder("findAll", class0, linkedList0, class0, class0);
      assertNull(builder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      BuildinFindAllSortBuilderFactory buildinFindAllSortBuilderFactory0 = new BuildinFindAllSortBuilderFactory();
      Class<Integer> class0 = Integer.class;
      Builder builder0 = buildinFindAllSortBuilderFactory0.doTryGetBuilder("p=3g{;", class0, linkedList0, class0, class0);
      assertNull(builder0);
  }
}
