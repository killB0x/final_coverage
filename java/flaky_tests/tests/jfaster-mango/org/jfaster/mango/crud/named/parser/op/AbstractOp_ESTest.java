/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 00:03:02 GMT 2022
 */

package org.jfaster.mango.crud.named.parser.op;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.crud.named.parser.op.LessThanEqualOp;
import org.jfaster.mango.crud.named.parser.op.LessThanOp;
import org.jfaster.mango.crud.named.parser.op.NotInOp;
import org.jfaster.mango.crud.named.parser.op.NotNullOp;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractOp_ESTest extends AbstractOp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotInOp notInOp0 = new NotInOp();
      NotInOp notInOp1 = new NotInOp();
      boolean boolean0 = notInOp0.equals(notInOp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LessThanEqualOp lessThanEqualOp0 = new LessThanEqualOp();
      boolean boolean0 = lessThanEqualOp0.equals(lessThanEqualOp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NotNullOp notNullOp0 = new NotNullOp();
      NotInOp notInOp0 = new NotInOp();
      boolean boolean0 = notNullOp0.equals(notInOp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LessThanOp lessThanOp0 = new LessThanOp();
      Object object0 = new Object();
      boolean boolean0 = lessThanOp0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LessThanOp lessThanOp0 = new LessThanOp();
      String string0 = lessThanOp0.toString();
      assertEquals("LessThan", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LessThanEqualOp lessThanEqualOp0 = new LessThanEqualOp();
      lessThanEqualOp0.hashCode();
  }
}
