/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:10:19 GMT 2022
 */

package org.jfaster.mango.operator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BoundSql;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.DefaultParameterContext;
import org.jfaster.mango.binding.InvocationContextFactory;
import org.jfaster.mango.datasource.DriverManagerDataSource;
import org.jfaster.mango.descriptor.MethodDescriptor;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.jfaster.mango.descriptor.ReturnDescriptor;
import org.jfaster.mango.jdbc.ArrayListSuppliter;
import org.jfaster.mango.operator.BatchUpdateOperator;
import org.jfaster.mango.operator.Config;
import org.jfaster.mango.parser.ASTRootNode;
import org.jfaster.mango.util.IterObj;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BatchUpdateOperator_ESTest extends BatchUpdateOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BatchUpdateOperator.IntegerTransformer batchUpdateOperator_IntegerTransformer0 = BatchUpdateOperator.IntegerTransformer.INSTANCE;
      int[] intArray0 = new int[2];
      intArray0[1] = (-3931);
      Object object0 = batchUpdateOperator_IntegerTransformer0.transform(intArray0);
      assertEquals((-3931), object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList1;
      IterObj iterObj0 = batchUpdateOperator0.getIterObj(objectArray0);
      assertTrue(iterObj0.isCollection());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Class<Object> class1 = Object.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class1, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      BatchUpdateOperator.VoidTransformer[] batchUpdateOperator_VoidTransformerArray0 = BatchUpdateOperator.VoidTransformer.values();
      IterObj iterObj0 = batchUpdateOperator0.getIterObj(batchUpdateOperator_VoidTransformerArray0);
      assertFalse(iterObj0.isCollection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Class<Object> class1 = Object.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class1, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      int[] intArray0 = batchUpdateOperator0.executeDb(hashMap0, 0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        batchUpdateOperator0.group(defaultInvocationContext0, hashMap0, 1921);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      // Undeclared exception!
      try { 
        batchUpdateOperator0.getIterObj((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        batchUpdateOperator0.getIterObj(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      // Undeclared exception!
      try { 
        batchUpdateOperator0.executeDb(hashMap0, (-2534));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2534
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      config0.setUseTransactionForBatchUpdate(true);
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      BatchUpdateOperator.Group batchUpdateOperator_Group0 = new BatchUpdateOperator.Group();
      hashMap0.put((DataSource) null, batchUpdateOperator_Group0);
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      // Undeclared exception!
      try { 
        batchUpdateOperator0.executeDb(hashMap0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DataSource can't be null
         //
         verifyException("org.jfaster.mango.transaction.TransactionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      DefaultParameterContext defaultParameterContext0 = DefaultParameterContext.create(linkedList1);
      Class<Object> class1 = Object.class;
      linkedList0.addFirst((Annotation) null);
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class1, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[5];
      InvocationContextFactory invocationContextFactory0 = InvocationContextFactory.create(defaultParameterContext0);
      batchUpdateOperator0.setInvocationContextFactory(invocationContextFactory0);
      objectArray0[0] = (Object) linkedList0;
      // Undeclared exception!
      try { 
        batchUpdateOperator0.execute(objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parameter name can not be found by position [0]
         //
         verifyException("org.jfaster.mango.binding.DefaultParameterContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      BatchUpdateOperator.VoidTransformer[] batchUpdateOperator_VoidTransformerArray0 = BatchUpdateOperator.VoidTransformer.values();
      // Undeclared exception!
      try { 
        batchUpdateOperator0.execute(batchUpdateOperator_VoidTransformerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class need collection or array but class org.jfaster.mango.operator.BatchUpdateOperator$VoidTransformer
         //
         verifyException("org.jfaster.mango.util.IterObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gOYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        batchUpdateOperator0.execute(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTRootNode aSTRootNode0 = new ASTRootNode(387);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = null;
      try {
        batchUpdateOperator0 = new BatchUpdateOperator(aSTRootNode0, (MethodDescriptor) null, config0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.AbstractOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BatchUpdateOperator.Group batchUpdateOperator_Group0 = new BatchUpdateOperator.Group();
      List<Integer> list0 = batchUpdateOperator_Group0.getPositions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BatchUpdateOperator.Group batchUpdateOperator_Group0 = new BatchUpdateOperator.Group();
      List<BoundSql> list0 = batchUpdateOperator_Group0.getBoundSqls();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      BatchUpdateOperator.IntegerArrayTransformer batchUpdateOperator_IntegerArrayTransformer0 = BatchUpdateOperator.IntegerArrayTransformer.INSTANCE;
      Object object0 = batchUpdateOperator_IntegerArrayTransformer0.transform(intArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      BatchUpdateOperator.Group batchUpdateOperator_Group0 = new BatchUpdateOperator.Group();
      hashMap0.put(driverManagerDataSource0, batchUpdateOperator_Group0);
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      // Undeclared exception!
      try { 
        batchUpdateOperator0.executeDb(hashMap0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Class<Object> class1 = Object.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class1, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      int[] intArray0 = batchUpdateOperator0.executeDb(hashMap0, 110);
      assertEquals(110, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        batchUpdateOperator0.execute(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // batchUpdate's parameter can't be null
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Class<Object> class1 = Object.class;
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class1, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linkedList0;
      Object object0 = batchUpdateOperator0.execute(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      Class<Object> class1 = Object.class;
      linkedList0.addFirst((Annotation) null);
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("org.jfaster.mango.operator.BatchUpdateOperator$IntegerArrayTransformer", class1, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linkedList0;
      // Undeclared exception!
      try { 
        batchUpdateOperator0.execute(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<DriverManagerDataSource> class0 = DriverManagerDataSource.class;
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      ArrayListSuppliter arrayListSuppliter0 = new ArrayListSuppliter();
      Class<ParameterDescriptor> class1 = ParameterDescriptor.class;
      List<ParameterDescriptor> list0 = arrayListSuppliter0.get(class1);
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("dao interface expected one @DB annotation but not found", class0, returnDescriptor0, list0);
      Config config0 = new Config();
      BatchUpdateOperator batchUpdateOperator0 = null;
      try {
        batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // the return type of batch update expected one of java.util.ArrayList@0000000013 but class org.jfaster.mango.datasource.DriverManagerDataSource
         //
         verifyException("org.jfaster.mango.operator.BatchUpdateOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BatchUpdateOperator.Group batchUpdateOperator_Group0 = new BatchUpdateOperator.Group();
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      BoundSql boundSql0 = defaultInvocationContext0.getBoundSql();
      batchUpdateOperator_Group0.add(boundSql0, 24);
      assertEquals("", boundSql0.getSql());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BatchUpdateOperator.IntArrayTransformer batchUpdateOperator_IntArrayTransformer0 = BatchUpdateOperator.IntArrayTransformer.INSTANCE;
      Object object0 = batchUpdateOperator_IntArrayTransformer0.transform((int[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BatchUpdateOperator.VoidTransformer batchUpdateOperator_VoidTransformer0 = BatchUpdateOperator.VoidTransformer.INSTANCE;
      int[] intArray0 = new int[6];
      Object object0 = batchUpdateOperator_VoidTransformer0.transform(intArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      Class<Void> class0 = Void.TYPE;
      ReturnDescriptor returnDescriptor0 = ReturnDescriptor.create(class0, linkedList0);
      LinkedList<ParameterDescriptor> linkedList1 = new LinkedList<ParameterDescriptor>();
      MethodDescriptor methodDescriptor0 = MethodDescriptor.create("ic&6gONYDUpdl", class0, returnDescriptor0, linkedList1);
      Config config0 = new Config();
      config0.setUseTransactionForBatchUpdate(true);
      HashMap<DataSource, BatchUpdateOperator.Group> hashMap0 = new HashMap<DataSource, BatchUpdateOperator.Group>();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      BatchUpdateOperator.Group batchUpdateOperator_Group0 = new BatchUpdateOperator.Group();
      hashMap0.put(driverManagerDataSource0, batchUpdateOperator_Group0);
      BatchUpdateOperator batchUpdateOperator0 = new BatchUpdateOperator((ASTRootNode) null, methodDescriptor0, config0);
      // Undeclared exception!
      try { 
        batchUpdateOperator0.executeDb(hashMap0, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not open JDBC Connection for transaction; caused by: null
         //
         verifyException("org.jfaster.mango.transaction.TransactionFactory", e);
      }
  }
}
