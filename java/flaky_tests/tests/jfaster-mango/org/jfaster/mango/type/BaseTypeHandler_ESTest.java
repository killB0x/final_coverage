/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 00:20:18 GMT 2022
 */

package org.jfaster.mango.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Clob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.jfaster.mango.type.BlobByteObjectArrayTypeHandler;
import org.jfaster.mango.type.CharacterTypeHandler;
import org.jfaster.mango.type.ClobTypeHandler;
import org.jfaster.mango.type.DateOnlyTypeHandler;
import org.jfaster.mango.type.DateTypeHandler;
import org.jfaster.mango.type.IntegerTypeHandler;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseTypeHandler_ESTest extends BaseTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClobTypeHandler clobTypeHandler0 = new ClobTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      clobTypeHandler0.setParameter(preparedStatement0, (-385), "`cS]%z/ced(?xn");
      assertEquals(JdbcType.LONGVARCHAR, clobTypeHandler0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateOnlyTypeHandler dateOnlyTypeHandler0 = new DateOnlyTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      dateOnlyTypeHandler0.setParameter(preparedStatement0, 1997, (Date) null);
      assertEquals(JdbcType.DATE, dateOnlyTypeHandler0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClobTypeHandler clobTypeHandler0 = new ClobTypeHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Clob) null).when(resultSet0).getClob(anyInt());
      doReturn(false).when(resultSet0).wasNull();
      String string0 = clobTypeHandler0.getResult(resultSet0, (-385));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      JdbcType jdbcType0 = integerTypeHandler0.getJdbcType();
      assertEquals(JdbcType.INTEGER, jdbcType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      JdbcType jdbcType0 = JdbcType.BIT;
      // Undeclared exception!
      try { 
        integerTypeHandler0.setNonNullParameter(preparedStatement0, 0, (Integer) null, jdbcType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.IntegerTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CharacterTypeHandler characterTypeHandler0 = new CharacterTypeHandler();
      // Undeclared exception!
      try { 
        characterTypeHandler0.getResult((ResultSet) null, (-1713));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error attempting to get column #-1713 from result set; caused by: null
         //
         verifyException("org.jfaster.mango.type.BaseTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IntegerTypeHandler integerTypeHandler0 = new IntegerTypeHandler();
      // Undeclared exception!
      try { 
        integerTypeHandler0.getNullableResult((ResultSet) null, 1201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.IntegerTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTypeHandler dateTypeHandler0 = new DateTypeHandler();
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(timestamp0).when(resultSet0).getTimestamp(anyInt());
      doReturn(true).when(resultSet0).wasNull();
      Date date0 = dateTypeHandler0.getResult(resultSet0, 1991);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BlobByteObjectArrayTypeHandler blobByteObjectArrayTypeHandler0 = new BlobByteObjectArrayTypeHandler();
      // Undeclared exception!
      try { 
        blobByteObjectArrayTypeHandler0.setParameter((PreparedStatement) null, 2462, (Byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.BaseTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BlobByteObjectArrayTypeHandler blobByteObjectArrayTypeHandler0 = new BlobByteObjectArrayTypeHandler();
      Byte[] byteArray0 = new Byte[0];
      // Undeclared exception!
      try { 
        blobByteObjectArrayTypeHandler0.setParameter((PreparedStatement) null, 3973, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error setting non null for parameter #3973 with JdbcType LONGVARBINARY, try setting a different JdbcType for this parameter; caused by: null
         //
         verifyException("org.jfaster.mango.type.BaseTypeHandler", e);
      }
  }
}
