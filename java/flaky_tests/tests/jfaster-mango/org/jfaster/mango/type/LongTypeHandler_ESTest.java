/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:17:38 GMT 2022
 */

package org.jfaster.mango.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.type.LongTypeHandler;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongTypeHandler_ESTest extends LongTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(resultSet0).getLong(anyInt());
      Long long0 = longTypeHandler0.getNullableResult(resultSet0, 815);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(1038L).when(resultSet0).getLong(anyInt());
      Long long0 = longTypeHandler0.getNullableResult(resultSet0, 815);
      assertEquals(1038L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((-40L)).when(resultSet0).getLong(anyInt());
      Long long0 = longTypeHandler0.getNullableResult(resultSet0, (-1));
      assertEquals((-40L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      Long long0 = new Long((-1478));
      JdbcType jdbcType0 = JdbcType.ARRAY;
      // Undeclared exception!
      try { 
        longTypeHandler0.setNonNullParameter((PreparedStatement) null, (-1478), long0, jdbcType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.LongTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      JdbcType jdbcType0 = longTypeHandler0.getJdbcType();
      assertEquals(JdbcType.BIGINT, jdbcType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(3105L).when(resultSet0).getLong(anyInt());
      doReturn(false).when(resultSet0).wasNull();
      Long long0 = longTypeHandler0.getResult(resultSet0, (-110));
      JdbcType jdbcType0 = JdbcType.TINYINT;
      longTypeHandler0.setNonNullParameter(preparedStatement0, 2873, long0, jdbcType0);
      assertEquals(JdbcType.BIGINT, longTypeHandler0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LongTypeHandler longTypeHandler0 = new LongTypeHandler();
      // Undeclared exception!
      try { 
        longTypeHandler0.getNullableResult((ResultSet) null, 1691);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.type.LongTypeHandler", e);
      }
  }
}
