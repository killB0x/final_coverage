/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 00:07:31 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.page.Direction;
import org.jfaster.mango.page.Order;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.desc((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.by((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.asc((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // property must not be null or empty
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Order.by((Direction) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // direction must not be null
         //
         verifyException("org.jfaster.mango.page.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Order order0 = Order.desc("org.jfaster.mango.page.Direction");
      assertEquals(Direction.DESC, order0.getDirection());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Order order0 = Order.asc("qRoa");
      assertEquals(Direction.ASC, order0.getDirection());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      Order order0 = Order.by(direction0, "H0cA?AazxK`/-E:BL[7");
      order0.getProperty();
      assertEquals(Direction.DESC, order0.getDirection());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Order order0 = Order.by("H0cA?AazxK`/-E:BL[7");
      assertEquals(Direction.ASC, order0.getDirection());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      Order order0 = Order.by(direction0, "H0cA?AazxK`/-E:BL[7");
      Direction direction1 = order0.getDirection();
      assertEquals(Direction.DESC, direction1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Direction direction0 = Direction.DESC;
      Order order0 = Order.by(direction0, "H0cA?AazxK`/-E:BL[7");
      String string0 = order0.toString();
      assertEquals("H0cA?AazxK`/-E:BL[7 desc", string0);
  }
}
