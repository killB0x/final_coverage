/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 00:48:23 GMT 2022
 */

package org.jfaster.mango.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BoundSql;
import org.jfaster.mango.page.Direction;
import org.jfaster.mango.page.MySQLPageHandler;
import org.jfaster.mango.page.Order;
import org.jfaster.mango.page.Page;
import org.jfaster.mango.page.Sort;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MySQLPageHandler_ESTest extends MySQLPageHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Page page0 = Page.of(2367, 2948);
      mySQLPageHandler0.handlePage(boundSql0, page0);
      assertEquals(" limit ?, ?", boundSql0.getSql());
      assertEquals(" limit ?, ?", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      LinkedList<Order> linkedList0 = new LinkedList<Order>();
      Sort sort0 = Sort.by((List<Order>) linkedList0);
      mySQLPageHandler0.handleSort(boundSql0, sort0);
      assertEquals("", boundSql0.getSql());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      // Undeclared exception!
      try { 
        mySQLPageHandler0.handleSort(boundSql0, (Sort) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.page.MySQLPageHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      // Undeclared exception!
      try { 
        mySQLPageHandler0.handlePage(boundSql0, (Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.page.MySQLPageHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      // Undeclared exception!
      try { 
        mySQLPageHandler0.handleCount((BoundSql) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.page.MySQLPageHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder(" limit ?, ?");
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Direction direction0 = Direction.ASC;
      String[] stringArray0 = new String[6];
      stringArray0[0] = " limit ?, ?";
      stringArray0[1] = " limit ?, ?";
      stringArray0[2] = "DOUBLE";
      stringArray0[3] = "DOUBLE";
      stringArray0[4] = " limit ?, ?";
      stringArray0[5] = "DOUBLE";
      Page page0 = Page.of(36, 36, direction0, stringArray0);
      mySQLPageHandler0.handlePage(boundSql0, page0);
      assertEquals(36, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      mySQLPageHandler0.handleCount(boundSql0);
      assertEquals("SELECT COUNT(1) FROM () aliasForPage", boundSql0.getSql());
      assertEquals("SELECT COUNT(1) FROM () aliasForPage", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MySQLPageHandler mySQLPageHandler0 = new MySQLPageHandler();
      StringBuilder stringBuilder0 = new StringBuilder();
      BoundSql boundSql0 = new BoundSql(stringBuilder0);
      Order[] orderArray0 = new Order[1];
      Sort sort0 = Sort.by(orderArray0);
      // Undeclared exception!
      try { 
        mySQLPageHandler0.handleSort(boundSql0, sort0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.Joiner", e);
      }
  }
}
