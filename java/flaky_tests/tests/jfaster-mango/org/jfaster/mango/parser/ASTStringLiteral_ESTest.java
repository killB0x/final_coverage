/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 00:28:54 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.parser.ASTStringLiteral;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.CheckAndBindVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTStringLiteral_ESTest extends ASTStringLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.init("wp72kScvf;");
      Object object0 = aSTStringLiteral0.value((InvocationContext) null);
      assertEquals("p72kScvf", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      String string0 = aSTStringLiteral0.toString();
      assertEquals("RootNode[null]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTStringLiteral0.jjtAccept(nodeCollectVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(1952);
      CheckAndBindVisitor checkAndBindVisitor0 = CheckAndBindVisitor.INSTANCE;
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Object object0 = aSTStringLiteral0.jjtAccept(checkAndBindVisitor0, sequenceInputStream0);
      assertSame(sequenceInputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      // Undeclared exception!
      try { 
        aSTStringLiteral0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTStringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-7));
      // Undeclared exception!
      try { 
        aSTStringLiteral0.init("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      // Undeclared exception!
      try { 
        aSTStringLiteral0.init((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTStringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-1));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTStringLiteral0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTStringLiteral0.jjtAccept(textBlankJoinVisitor0, aSTStringLiteral0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-1170));
      aSTStringLiteral0.init("vM");
      boolean boolean0 = aSTStringLiteral0.evaluate((InvocationContext) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-1));
      aSTStringLiteral0.init("5@b");
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      boolean boolean0 = aSTStringLiteral0.evaluate(defaultInvocationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((Parser) null, (-3499));
      // Undeclared exception!
      try { 
        aSTStringLiteral0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3499 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-1170));
      Object object0 = aSTStringLiteral0.value((InvocationContext) null);
      assertNull(object0);
  }
}
