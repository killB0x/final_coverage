/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:44:08 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.parser.ASTEQNode;
import org.jfaster.mango.parser.ASTElseStatement;
import org.jfaster.mango.parser.ASTExpressionParameter;
import org.jfaster.mango.parser.ASTLENode;
import org.jfaster.mango.parser.ASTLTNode;
import org.jfaster.mango.parser.Node;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserTokenManager;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.SimpleCharStream;
import org.jfaster.mango.parser.visitor.CheckAndBindVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTLTNode_ESTest extends ASTLTNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(19);
      Node[] nodeArray0 = new Node[0];
      aSTLTNode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.value(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(2150);
      Node[] nodeArray0 = new Node[5];
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(pipedReader0);
      ASTElseStatement aSTElseStatement0 = new ASTElseStatement(parser0, 53);
      nodeArray0[0] = (Node) aSTElseStatement0;
      nodeArray0[1] = (Node) aSTLTNode0;
      nodeArray0[2] = (Node) aSTLTNode0;
      nodeArray0[3] = (Node) aSTLTNode0;
      nodeArray0[4] = (Node) aSTLTNode0;
      aSTLTNode0.children = nodeArray0;
      InvocationContext invocationContext0 = null;
      // Undeclared exception!
      try { 
        aSTLTNode0.value((InvocationContext) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfaster.mango.parser.ASTElseStatement cannot be cast to class org.jfaster.mango.parser.AbstractExpression (org.jfaster.mango.parser.ASTElseStatement and org.jfaster.mango.parser.AbstractExpression are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2c22d1c2)
         //
         verifyException("org.jfaster.mango.parser.ASTLTNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode((-1));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) aSTLTNode0;
      aSTLTNode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode((-766));
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) aSTLTNode0;
      nodeArray0[1] = (Node) aSTLTNode0;
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(pipedReader0);
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(parser0, (-766));
      nodeArray0[2] = (Node) aSTExpressionParameter0;
      nodeArray0[3] = (Node) aSTLTNode0;
      nodeArray0[4] = (Node) aSTLTNode0;
      nodeArray0[5] = (Node) aSTLTNode0;
      nodeArray0[6] = (Node) aSTLTNode0;
      nodeArray0[7] = (Node) aSTLTNode0;
      nodeArray0[8] = (Node) aSTLTNode0;
      aSTLTNode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.value(defaultInvocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckAndBindVisitor checkAndBindVisitor0 = CheckAndBindVisitor.INSTANCE;
      ASTLTNode aSTLTNode0 = new ASTLTNode((-1666));
      aSTLTNode0.jjtAccept(checkAndBindVisitor0, checkAndBindVisitor0);
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTLTNode0.jjtAccept(nodeCollectVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode((-614));
      DefaultInvocationContext.create();
      CheckAndBindVisitor checkAndBindVisitor0 = CheckAndBindVisitor.INSTANCE;
      DefaultInvocationContext.create();
      aSTLTNode0.jjtGetValue();
      aSTLTNode0.jjtAccept(checkAndBindVisitor0, (Object) null);
      Object object0 = aSTLTNode0.jjtAccept(checkAndBindVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTLTNode0.jjtAccept(textBlankJoinVisitor0, textBlankJoinVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = new Parser("J`sb|IhR4?J-_E;,y");
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, (-10));
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserTokenManager parserTokenManager0 = new ParserTokenManager((SimpleCharStream) null);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 0);
      // Undeclared exception!
      try { 
        parserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.jfaster.mango.parser.ParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultInvocationContext.create();
      ASTLTNode aSTLTNode0 = new ASTLTNode(2646);
      // Undeclared exception!
      try { 
        aSTLTNode0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTLTNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(5);
      DefaultInvocationContext.create();
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTLTNode0.jjtAccept(nodeCollectVisitor0, nodeCollectVisitor0);
      assertEquals(NodeCollectVisitor.INSTANCE, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(166);
      ASTEQNode aSTEQNode0 = new ASTEQNode(1706);
      aSTLTNode0.jjtSetParent(aSTEQNode0);
      Integer integer0 = new Integer(0);
      aSTLTNode0.jjtSetValue(integer0);
      aSTLTNode0.id = 0;
      ParserVisitor parserVisitor0 = null;
      // Undeclared exception!
      try { 
        aSTLTNode0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTLTNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(5);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(0);
      ASTLENode aSTLENode0 = new ASTLENode(0);
      aSTLTNode0.parent = (Node) aSTLENode0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode((-854));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLTNode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTLTNode aSTLTNode0 = new ASTLTNode(7);
      assertEquals(0, aSTLTNode0.jjtGetNumChildren());
  }
}
