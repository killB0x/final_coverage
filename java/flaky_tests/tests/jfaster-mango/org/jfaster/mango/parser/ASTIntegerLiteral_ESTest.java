/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:59:15 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.parser.ASTIntegerLiteral;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTIntegerLiteral_ESTest extends ASTIntegerLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1178));
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTIntegerLiteral0.jjtAccept(nodeCollectVisitor0, nodeCollectVisitor0);
      assertSame(nodeCollectVisitor0, object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1607));
      // Undeclared exception!
      try { 
        aSTIntegerLiteral0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1607 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral(1);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTIntegerLiteral0.jjtAccept(textBlankJoinVisitor0, "Block[null]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1607));
      // Undeclared exception!
      try { 
        aSTIntegerLiteral0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTIntegerLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((Parser) null, 1818);
      // Undeclared exception!
      try { 
        aSTIntegerLiteral0.init("]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1178));
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTIntegerLiteral0.jjtAccept(nodeCollectVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1178));
      aSTIntegerLiteral0.init("2");
      assertEquals(0, aSTIntegerLiteral0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1178));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      boolean boolean0 = aSTIntegerLiteral0.evaluate(defaultInvocationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral(1);
      String string0 = aSTIntegerLiteral0.toString();
      assertEquals("Block[null]", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral((-1178));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Object object0 = aSTIntegerLiteral0.value(defaultInvocationContext0);
      assertNull(object0);
  }
}
