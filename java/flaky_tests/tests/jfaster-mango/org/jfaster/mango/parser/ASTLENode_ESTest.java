/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:31:23 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.PipedInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.parser.ASTBlank;
import org.jfaster.mango.parser.ASTLENode;
import org.jfaster.mango.parser.Node;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.ParameterExpandVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.jfaster.mango.type.IntegerTypeHandler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTLENode_ESTest extends ASTLENode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x)S:I(.-X@wEV");
      ASTLENode aSTLENode0 = new ASTLENode((-36));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Object object0 = aSTLENode0.childrenAccept((ParserVisitor) null, defaultInvocationContext0);
      // Undeclared exception!
      try { 
        aSTLENode0.jjtAccept((ParserVisitor) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTLENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode((-24));
      Node[] nodeArray0 = new Node[0];
      aSTLENode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLENode0.value(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      ASTLENode aSTLENode1 = new ASTLENode(0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) aSTLENode1;
      nodeArray0[1] = (Node) aSTLENode0;
      nodeArray0[2] = (Node) aSTLENode1;
      nodeArray0[3] = (Node) aSTLENode0;
      nodeArray0[4] = (Node) aSTLENode0;
      aSTLENode1.children = nodeArray0;
      // Undeclared exception!
      try { 
        aSTLENode1.evaluate(defaultInvocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ASTLENode aSTLENode0 = new ASTLENode(0);
      StringReader stringReader0 = new StringReader("C+YCi;fUo?IGfKl");
      Parser parser0 = new Parser(stringReader0);
      ASTBlank aSTBlank0 = new ASTBlank(parser0, 0);
      aSTLENode0.jjtAddChild(aSTBlank0, 0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfaster.mango.parser.ASTBlank cannot be cast to class org.jfaster.mango.parser.AbstractExpression (org.jfaster.mango.parser.ASTBlank and org.jfaster.mango.parser.AbstractExpression are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @74a13ae0)
         //
         verifyException("org.jfaster.mango.parser.ASTLENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode(0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) aSTLENode0;
      aSTLENode0.children = nodeArray0;
      InvocationContext invocationContext0 = null;
      // Undeclared exception!
      try { 
        aSTLENode0.value(invocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode((-6));
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      aSTLENode0.jjtAccept(nodeCollectVisitor0, nodeCollectVisitor0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode((Parser) null, (-2326));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Parser parser0 = new Parser(dataInputStream0);
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 0);
      ParameterExpandVisitor parameterExpandVisitor0 = ParameterExpandVisitor.INSTANCE;
      aSTLENode0.jjtGetValue();
      Object object0 = aSTLENode0.jjtAccept(parameterExpandVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      ASTLENode aSTLENode0 = new ASTLENode(0);
      // Undeclared exception!
      try { 
        aSTLENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode(0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTLENode0.jjtAccept(textBlankJoinVisitor0, textBlankJoinVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode((-1));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-513);
      ASTLENode aSTLENode0 = new ASTLENode((-513));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTLENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode(1284);
      // Undeclared exception!
      try { 
        aSTLENode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1284 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTLENode aSTLENode0 = new ASTLENode(959);
      assertEquals(0, aSTLENode0.jjtGetNumChildren());
  }
}
