/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:24:08 GMT 2022
 */

package org.jfaster.mango.parser.visitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.parser.ASTAndNode;
import org.jfaster.mango.parser.ASTBlank;
import org.jfaster.mango.parser.ASTBlock;
import org.jfaster.mango.parser.ASTDelete;
import org.jfaster.mango.parser.ASTEQNode;
import org.jfaster.mango.parser.ASTElseIfStatement;
import org.jfaster.mango.parser.ASTElseStatement;
import org.jfaster.mango.parser.ASTExpression;
import org.jfaster.mango.parser.ASTExpressionParameter;
import org.jfaster.mango.parser.ASTFalse;
import org.jfaster.mango.parser.ASTGENode;
import org.jfaster.mango.parser.ASTGTNode;
import org.jfaster.mango.parser.ASTGlobalTable;
import org.jfaster.mango.parser.ASTIfStatement;
import org.jfaster.mango.parser.ASTInsert;
import org.jfaster.mango.parser.ASTIntegerLiteral;
import org.jfaster.mango.parser.ASTJDBCIterableParameter;
import org.jfaster.mango.parser.ASTJDBCParameter;
import org.jfaster.mango.parser.ASTJoinParameter;
import org.jfaster.mango.parser.ASTLENode;
import org.jfaster.mango.parser.ASTLTNode;
import org.jfaster.mango.parser.ASTMerge;
import org.jfaster.mango.parser.ASTNENode;
import org.jfaster.mango.parser.ASTNotNode;
import org.jfaster.mango.parser.ASTNull;
import org.jfaster.mango.parser.ASTOrNode;
import org.jfaster.mango.parser.ASTQuoteText;
import org.jfaster.mango.parser.ASTReplace;
import org.jfaster.mango.parser.ASTRootNode;
import org.jfaster.mango.parser.ASTSelect;
import org.jfaster.mango.parser.ASTStringLiteral;
import org.jfaster.mango.parser.ASTText;
import org.jfaster.mango.parser.ASTTrimComma;
import org.jfaster.mango.parser.ASTTrue;
import org.jfaster.mango.parser.ASTTruncate;
import org.jfaster.mango.parser.ASTUpdate;
import org.jfaster.mango.parser.Node;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.SimpleNode;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextBlankJoinVisitor_ESTest extends TextBlankJoinVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Parser parser0 = new Parser("pJ(");
      ASTTrimComma aSTTrimComma0 = new ASTTrimComma(parser0, 1334);
      Object object0 = textBlankJoinVisitor0.visit(aSTTrimComma0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = textBlankJoinVisitor0.visit((ASTText) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = textBlankJoinVisitor0.visit((ASTQuoteText) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTJoinParameter aSTJoinParameter0 = new ASTJoinParameter(1488);
      Object object0 = textBlankJoinVisitor0.visit(aSTJoinParameter0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTJDBCParameter aSTJDBCParameter0 = new ASTJDBCParameter((byte) (-119));
      Object object0 = textBlankJoinVisitor0.visit(aSTJDBCParameter0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTJDBCIterableParameter aSTJDBCIterableParameter0 = new ASTJDBCIterableParameter((-16));
      Object object0 = textBlankJoinVisitor0.visit(aSTJDBCIterableParameter0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(0);
      Object object0 = textBlankJoinVisitor0.visit(aSTIfStatement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTGlobalTable aSTGlobalTable0 = new ASTGlobalTable(4448);
      Object object0 = textBlankJoinVisitor0.visit(aSTGlobalTable0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTExpression aSTExpression0 = new ASTExpression(0);
      Object object0 = textBlankJoinVisitor0.visit(aSTExpression0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTElseStatement aSTElseStatement0 = new ASTElseStatement((Parser) null, (-4068));
      Object object0 = textBlankJoinVisitor0.visit(aSTElseStatement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTElseIfStatement aSTElseIfStatement0 = new ASTElseIfStatement(4548);
      Object object0 = textBlankJoinVisitor0.visit(aSTElseIfStatement0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Parser parser0 = new Parser("WG");
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(parser0, 0);
      ASTElseIfStatement aSTElseIfStatement0 = new ASTElseIfStatement(parser0, (byte)0);
      Object object0 = textBlankJoinVisitor0.visit(aSTElseIfStatement0, (Object) aSTQuoteText0);
      assertSame(object0, aSTQuoteText0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTBlock aSTBlock0 = new ASTBlock((byte)0);
      Object object0 = textBlankJoinVisitor0.visit(aSTBlock0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 980);
      Parser parser0 = new Parser(pipedReader0);
      ASTBlank aSTBlank0 = new ASTBlank(parser0, 0);
      Object object0 = textBlankJoinVisitor0.visit(aSTBlank0, (Object) parser0);
      assertSame(object0, parser0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextBlankJoinVisitor[] textBlankJoinVisitorArray0 = TextBlankJoinVisitor.values();
      assertEquals(1, textBlankJoinVisitorArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTIfStatement) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTElseStatement) null, (Object) textBlankJoinVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTBlock aSTBlock0 = new ASTBlock(361);
      aSTBlock0.jjtAddChild((Node) null, 65536);
      // Undeclared exception!
      textBlankJoinVisitor0.visit(aSTBlock0, (Object) aSTBlock0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock(2);
      ASTNENode aSTNENode0 = new ASTNENode(2);
      aSTBlock0.jjtAddChild(aSTNENode0, 55);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTBlock0, (Object) aSTBlock0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ASTBlank aSTBlank0 = new ASTBlank(0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = textBlankJoinVisitor0.visit(aSTBlank0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTInsert) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTJDBCParameter aSTJDBCParameter0 = new ASTJDBCParameter(0);
      Parser parser0 = new Parser("");
      ASTIntegerLiteral aSTIntegerLiteral0 = new ASTIntegerLiteral(parser0, (-3000));
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTIntegerLiteral0, (Object) aSTJDBCParameter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock(5);
      ASTBlank aSTBlank0 = new ASTBlank(5);
      aSTBlock0.jjtAddChild(aSTBlank0, 1042);
      aSTBlock0.jjtAddChild(aSTBlank0, 5);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTBlock0, (Object) aSTBlank0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      TextBlankJoinVisitor textBlankJoinVisitor1 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = textBlankJoinVisitor0.visit((ASTJoinParameter) null, (Object) textBlankJoinVisitor1);
      assertSame(textBlankJoinVisitor1, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTUpdate) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Parser parser0 = new Parser("pJ(");
      ASTSelect aSTSelect0 = new ASTSelect(parser0, (-79));
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTSelect0, (Object) parser0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTTrue aSTTrue0 = new ASTTrue(1012);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTTrue0, (Object) aSTTrue0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTDelete aSTDelete0 = new ASTDelete(1166);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTDelete0, (Object) aSTDelete0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Parser parser0 = new Parser(pipedReader0);
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(parser0, 0);
      Object object0 = textBlankJoinVisitor0.visit(aSTQuoteText0, (Object) parser0);
      assertSame(object0, parser0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(1986);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTRootNode aSTRootNode0 = new ASTRootNode(1404);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTRootNode0, (Object) aSTIfStatement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((byte) (-1));
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTStringLiteral0, (Object) aSTStringLiteral0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Object object0 = textBlankJoinVisitor0.visit((ASTExpression) null, (Object) textBlankJoinVisitor0);
      assertSame(textBlankJoinVisitor0, object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTAndNode aSTAndNode0 = new ASTAndNode(1681);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTAndNode0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTNENode aSTNENode0 = new ASTNENode(350);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTNENode0, (Object) byteArrayInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Parser parser0 = new Parser("\"ROD");
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(parser0, (-4938));
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTFalse) null, (Object) aSTQuoteText0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(25);
      ASTGlobalTable aSTGlobalTable0 = new ASTGlobalTable(25);
      Object object0 = textBlankJoinVisitor0.visit(aSTGlobalTable0, (Object) aSTQuoteText0);
      assertSame(aSTQuoteText0, object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTEQNode aSTEQNode0 = new ASTEQNode(2133);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTEQNode0, (Object) aSTEQNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTGENode aSTGENode0 = new ASTGENode(1111);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTGENode0, (Object) textBlankJoinVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Parser parser0 = new Parser("%8+,kb5d<|");
      ASTElseStatement aSTElseStatement0 = new ASTElseStatement(parser0, 0);
      Object object0 = textBlankJoinVisitor0.visit(aSTElseStatement0, (Object) parser0);
      assertSame(object0, parser0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      Parser parser0 = new Parser("WG");
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(parser0, 0);
      ASTOrNode aSTOrNode0 = new ASTOrNode((-16));
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTOrNode0, (Object) aSTQuoteText0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTText aSTText0 = new ASTText(1549);
      ASTText aSTText1 = (ASTText)textBlankJoinVisitor0.visit(aSTText0, (Object) aSTText0);
      assertNull(aSTText1.getGroupValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTNotNode) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.valueOf("INSTANCE");
      ASTTruncate aSTTruncate0 = new ASTTruncate(1155);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTTruncate0, (Object) aSTTruncate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTReplace) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ASTBlank aSTBlank0 = new ASTBlank(0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTElseIfStatement) null, (Object) aSTBlank0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTTrimComma aSTTrimComma0 = new ASTTrimComma(545);
      Object object0 = textBlankJoinVisitor0.visit(aSTTrimComma0, (Object) textBlankJoinVisitor0);
      assertEquals(TextBlankJoinVisitor.INSTANCE, object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Parser parser0 = new Parser(pipedReader0);
      ASTQuoteText aSTQuoteText0 = new ASTQuoteText(parser0, 0);
      Object object0 = textBlankJoinVisitor0.visit((ASTJDBCIterableParameter) null, (Object) aSTQuoteText0);
      assertSame(aSTQuoteText0, object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTJDBCParameter aSTJDBCParameter0 = new ASTJDBCParameter((-1));
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object0 = textBlankJoinVisitor0.visit(aSTJDBCParameter0, (Object) byteArrayInputStream0);
      assertSame(byteArrayInputStream0, object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement((-3151));
      Object object0 = textBlankJoinVisitor0.visit(aSTIfStatement0, (Object) "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock(0);
      ASTBlank aSTBlank0 = new ASTBlank(0);
      aSTBlock0.jjtAddChild(aSTBlank0, 0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTBlank aSTBlank1 = (ASTBlank)textBlankJoinVisitor0.visit(aSTBlock0, (Object) aSTBlank0);
      assertEquals("null", aSTBlank1.getGroupValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTNull aSTNull0 = new ASTNull(509);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTNull0, (Object) byteArrayInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-724));
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTExpressionParameter0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTLTNode) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTBlock aSTBlock0 = new ASTBlock(43);
      ASTInsert aSTInsert0 = new ASTInsert((-1));
      aSTBlock0.jjtAddChild(aSTInsert0, 0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTBlock0, (Object) byteArrayInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(pipedReader0);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      ASTMerge aSTMerge0 = new ASTMerge(parser0, 129);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTMerge0, (Object) pipedReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ASTLENode aSTLENode0 = new ASTLENode(11);
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit(aSTLENode0, (Object) pipedReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((SimpleNode) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        textBlankJoinVisitor0.visit((ASTGTNode) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }
}
