/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 22:47:32 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.TransferableBindingParameterInvoker;
import org.jfaster.mango.parser.ASTExpressionParameter;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.CheckAndBindVisitor;
import org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTExpressionParameter_ESTest extends ASTExpressionParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(6);
      JdbcType jdbcType0 = JdbcType.BIT;
      BindingParameter bindingParameter0 = new BindingParameter("<@Z", "<@Z", jdbcType0);
      aSTExpressionParameter0.setBindingParameter(bindingParameter0);
      String string0 = aSTExpressionParameter0.getFullName();
      assertEquals(":<@Z.<@Z", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(2552);
      JdbcType jdbcType0 = JdbcType.VARCHAR;
      BindingParameter bindingParameter0 = BindingParameter.create("line.separator", "line.separator", jdbcType0);
      aSTExpressionParameter0.setBindingParameter(bindingParameter0);
      BindingParameter bindingParameter1 = aSTExpressionParameter0.getBindingParameter();
      assertEquals(JdbcType.VARCHAR, bindingParameter1.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-1));
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 37
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-1298));
      InterablePropertyCollectVisitor interablePropertyCollectVisitor0 = InterablePropertyCollectVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.jjtAccept(interablePropertyCollectVisitor0, interablePropertyCollectVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(869);
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-9));
      CheckAndBindVisitor checkAndBindVisitor0 = CheckAndBindVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.jjtAccept(checkAndBindVisitor0, checkAndBindVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfaster.mango.parser.visitor.CheckAndBindVisitor cannot be cast to class org.jfaster.mango.binding.ParameterContext (org.jfaster.mango.parser.visitor.CheckAndBindVisitor and org.jfaster.mango.binding.ParameterContext are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1d4ab047)
         //
         verifyException("org.jfaster.mango.parser.visitor.CheckAndBindVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(4642);
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.init((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(6);
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.getFullName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-2245));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // invoker must set
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(110);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      Class<Double> class0 = Double.TYPE;
      JdbcType jdbcType0 = JdbcType.NULL;
      BindingParameter bindingParameter0 = BindingParameter.create("29Lgt9jA>", (String) null, jdbcType0);
      TransferableBindingParameterInvoker transferableBindingParameterInvoker0 = TransferableBindingParameterInvoker.create(class0, bindingParameter0);
      aSTExpressionParameter0.setBindingParameterInvoker(transferableBindingParameterInvoker0);
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.value(defaultInvocationContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter ':29Lgt9jA>' not found, available root parameters are []
         //
         verifyException("org.jfaster.mango.binding.DefaultInvocationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-387));
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // invoker must set
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((-4085));
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.init("1(Ck_,n@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't compile string '1(Ck_,n@'
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(729);
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.init(":0");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(2);
      // Undeclared exception!
      try { 
        aSTExpressionParameter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTExpressionParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(3429);
      BindingParameter bindingParameter0 = aSTExpressionParameter0.getBindingParameter();
      assertNull(bindingParameter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter(729);
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      Object object0 = aSTExpressionParameter0.jjtAccept(nodeCollectVisitor0, nodeCollectVisitor0);
      assertSame(object0, nodeCollectVisitor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTExpressionParameter aSTExpressionParameter0 = new ASTExpressionParameter((Parser) null, 0);
      JdbcType jdbcType0 = JdbcType.BIGINT;
      BindingParameter bindingParameter0 = new BindingParameter("", (String) null, jdbcType0);
      aSTExpressionParameter0.setBindingParameter(bindingParameter0);
      String string0 = aSTExpressionParameter0.toString();
      assertEquals("RootNode{fullName=:, parameterName=, propertyName=null}", string0);
  }
}
