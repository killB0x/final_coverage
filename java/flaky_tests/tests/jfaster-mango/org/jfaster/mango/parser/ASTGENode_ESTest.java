/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:33:53 GMT 2022
 */

package org.jfaster.mango.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfaster.mango.binding.BindingParameter;
import org.jfaster.mango.binding.DefaultInvocationContext;
import org.jfaster.mango.binding.DefaultParameterContext;
import org.jfaster.mango.binding.InvocationContext;
import org.jfaster.mango.binding.TransferableBindingParameterInvoker;
import org.jfaster.mango.descriptor.ParameterDescriptor;
import org.jfaster.mango.parser.ASTGENode;
import org.jfaster.mango.parser.ASTInsert;
import org.jfaster.mango.parser.ASTLENode;
import org.jfaster.mango.parser.ASTMerge;
import org.jfaster.mango.parser.ASTReplace;
import org.jfaster.mango.parser.ASTStringLiteral;
import org.jfaster.mango.parser.ASTTruncate;
import org.jfaster.mango.parser.Node;
import org.jfaster.mango.parser.Parser;
import org.jfaster.mango.parser.ParserVisitor;
import org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor;
import org.jfaster.mango.parser.visitor.NodeCollectVisitor;
import org.jfaster.mango.parser.visitor.ParameterExpandVisitor;
import org.jfaster.mango.parser.visitor.TextBlankJoinVisitor;
import org.jfaster.mango.util.jdbc.JdbcType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ASTGENode_ESTest extends ASTGENode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(0);
      assertEquals(0, aSTGENode0.jjtGetNumChildren());
      
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.toString();
      aSTGENode0.jjtAddChild(aSTStringLiteral0, 0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(0);
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.toString();
      aSTGENode0.jjtAddChild(aSTStringLiteral0, 0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.value(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      ASTGENode aSTGENode0 = new ASTGENode((-1853));
      Node[] nodeArray0 = new Node[3];
      ASTMerge aSTMerge0 = new ASTMerge((-1853));
      nodeArray0[0] = (Node) aSTMerge0;
      nodeArray0[1] = (Node) aSTGENode0;
      nodeArray0[2] = (Node) aSTGENode0;
      aSTGENode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        aSTGENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfaster.mango.parser.ASTMerge cannot be cast to class org.jfaster.mango.parser.AbstractExpression (org.jfaster.mango.parser.ASTMerge and org.jfaster.mango.parser.AbstractExpression are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @27373a68)
         //
         verifyException("org.jfaster.mango.parser.ASTGENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ASTGENode aSTGENode0 = new ASTGENode((-1185));
      DefaultInvocationContext.create();
      ParameterExpandVisitor parameterExpandVisitor0 = ParameterExpandVisitor.INSTANCE;
      Object object0 = new Object();
      Object object1 = aSTGENode0.jjtAccept(parameterExpandVisitor0, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode((-1));
      Node[] nodeArray0 = new Node[0];
      aSTGENode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.value(defaultInvocationContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(0);
      NodeCollectVisitor nodeCollectVisitor0 = NodeCollectVisitor.INSTANCE;
      aSTGENode0.jjtGetValue();
      Object object0 = aSTGENode0.jjtAccept(nodeCollectVisitor0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      ASTGENode aSTGENode0 = new ASTGENode(1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) aSTGENode0;
      aSTGENode0.children = nodeArray0;
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.value(defaultInvocationContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(0);
      InvocationContext invocationContext0 = null;
      ASTInsert aSTInsert0 = new ASTInsert(0);
      aSTGENode0.jjtAddChild(aSTInsert0, 0);
      // Undeclared exception!
      try { 
        aSTGENode0.value((InvocationContext) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.jfaster.mango.parser.ASTInsert cannot be cast to class org.jfaster.mango.parser.AbstractExpression (org.jfaster.mango.parser.ASTInsert and org.jfaster.mango.parser.AbstractExpression are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @27373a68)
         //
         verifyException("org.jfaster.mango.parser.ASTGENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(1820);
      TextBlankJoinVisitor textBlankJoinVisitor0 = TextBlankJoinVisitor.INSTANCE;
      // Undeclared exception!
      try { 
        aSTGENode0.jjtAccept(textBlankJoinVisitor0, textBlankJoinVisitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.TextBlankJoinVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.evaluate(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(803);
      Integer integer0 = new Integer((-3419));
      // Undeclared exception!
      try { 
        aSTGENode0.jjtAccept((ParserVisitor) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTGENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode((-664));
      // Undeclared exception!
      try { 
        aSTGENode0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.ASTGENode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(0);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode(2648);
      DefaultInvocationContext defaultInvocationContext0 = DefaultInvocationContext.create();
      // Undeclared exception!
      try { 
        aSTGENode0.value(defaultInvocationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.SimpleNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2529;
      ASTGENode aSTGENode0 = new ASTGENode((Parser) null, 2529);
      DefaultInvocationContext.create();
      LinkedList<ParameterDescriptor> linkedList0 = new LinkedList<ParameterDescriptor>();
      DefaultParameterContext.create(linkedList0);
      Class<Float> class0 = Float.TYPE;
      ASTGENode aSTGENode1 = new ASTGENode((Parser) null, 2529);
      aSTGENode1.jjtGetValue();
      linkedList0.remove((Object) null);
      String string0 = "";
      JdbcType jdbcType0 = JdbcType.INTEGER;
      BindingParameter bindingParameter0 = BindingParameter.create("", "org.jfaster.mango.parser.ASTGENode", jdbcType0);
      // Undeclared exception!
      try { 
        TransferableBindingParameterInvoker.create(class0, bindingParameter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // caused by: null; caused by: caused by: null
         //
         verifyException("org.jfaster.mango.invoker.InvokerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode((Parser) null, 4);
      assertEquals(0, aSTGENode0.jjtGetNumChildren());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTGENode aSTGENode0 = new ASTGENode((-1449));
      InterablePropertyCollectVisitor interablePropertyCollectVisitor0 = InterablePropertyCollectVisitor.INSTANCE;
      ASTTruncate aSTTruncate0 = new ASTTruncate(1);
      Parser parser0 = new Parser(" }BXhM;<KbzuMW");
      ASTReplace aSTReplace0 = new ASTReplace(parser0, (-1449));
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) aSTGENode0;
      nodeArray0[1] = (Node) aSTReplace0;
      nodeArray0[2] = (Node) aSTReplace0;
      ASTLENode aSTLENode0 = new ASTLENode((-1449));
      nodeArray0[3] = (Node) aSTLENode0;
      nodeArray0[4] = (Node) aSTReplace0;
      nodeArray0[5] = (Node) aSTTruncate0;
      aSTReplace0.children = nodeArray0;
      // Undeclared exception!
      try { 
        interablePropertyCollectVisitor0.visit(aSTReplace0, (Object) aSTTruncate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.parser.visitor.InterablePropertyCollectVisitor", e);
      }
  }
}
