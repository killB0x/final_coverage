/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 22:18:32 GMT 2022
 */

package org.jfaster.mango.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.jdbc.SQLStateSQLExceptionTranslator;
import org.jfaster.mango.jdbc.exception.DataAccessException;
import org.jfaster.mango.jdbc.exception.UncategorizedSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLStateSQLExceptionTranslator_ESTest extends SQLStateSQLExceptionTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("!Y]B,E!KL]`P${x0k");
      SQLException sQLException1 = new SQLException(sQLException0);
      sQLException1.setNextException(sQLException0);
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("!Y]B,E!KL]`P${x0k", sQLException1);
      assertNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      // Undeclared exception!
      try { 
        sQLStateSQLExceptionTranslator0.doTranslate("I:)VVA)T", (SQLException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.jdbc.SQLStateSQLExceptionTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("61", "61");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("61", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("' from value '", "' from value '");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("' from value '", sQLException0);
      assertNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("PU[Dn&", "54");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("54", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("23", "23");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("23", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("65", "65");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.translate("65", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("", "");
      UncategorizedSQLException uncategorizedSQLException0 = (UncategorizedSQLException)sQLStateSQLExceptionTranslator0.translate("", sQLException0);
      assertEquals("", uncategorizedSQLException0.getSql());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException("S1", "S1");
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("S1", sQLException0);
      assertNotNull(dataAccessException0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SQLStateSQLExceptionTranslator sQLStateSQLExceptionTranslator0 = new SQLStateSQLExceptionTranslator();
      SQLException sQLException0 = new SQLException((Throwable) null);
      DataAccessException dataAccessException0 = sQLStateSQLExceptionTranslator0.doTranslate("", sQLException0);
      assertNull(dataAccessException0);
  }
}
