/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:20:04 GMT 2022
 */

package org.jfaster.mango.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.reflect.TokenTuple;
import org.jfaster.mango.util.reflect.TypeToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenTuple_ESTest extends TokenTuple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.of(class0);
      TypeToken<?> typeToken1 = TypeToken.of((Type) class0);
      TokenTuple tokenTuple0 = new TokenTuple(typeToken0, typeToken1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TokenTuple tokenTuple0 = new TokenTuple((TypeToken<?>) null, (TypeToken<?>) null);
      TypeToken<?> typeToken0 = tokenTuple0.getSecond();
      assertNull(typeToken0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TokenTuple tokenTuple0 = new TokenTuple((TypeToken<?>) null, (TypeToken<?>) null);
      TypeToken<?> typeToken0 = tokenTuple0.getFirst();
      assertNull(typeToken0);
  }
}
