/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:56:03 GMT 2022
 */

package org.jfaster.mango.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.Primitives;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Primitives_ESTest extends Primitives_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Character> class0 = Primitives.wrap((Class<Character>) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Primitives.unwrap(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Character> class0 = Primitives.unwrap((Class<Character>) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Primitives.wrap(class0);
      Class<Character> class2 = Primitives.unwrap(class1);
      Class<Character> class3 = Primitives.wrap(class2);
      assertNotSame(class3, class2);
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = Primitives.isWrapperType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = Primitives.isWrapperType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Set<Class<?>> set0 = Primitives.allWrapperTypes();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Set<Class<?>> set0 = Primitives.allPrimitiveTypes();
      assertEquals(8, set0.size());
  }
}
