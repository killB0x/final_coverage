/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:43:07 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.InternalLogLevel;
import org.jfaster.mango.util.logging.NoLogger;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NoLogger_ESTest extends NoLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("SP{Jj4(J$3~y");
      Object[] objectArray0 = new Object[5];
      noLogger0.warn("", objectArray0);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("3eDM");
      Object object0 = new Object();
      noLogger0.warn("", (Object) "3eDM", object0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      Object object0 = noLogger0.readResolve();
      noLogger0.warn("[(~P", object0);
      assertEquals("[(~P", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("<]");
      Object[] objectArray0 = new Object[8];
      noLogger0.trace("org.jfaster.mango.util.logging.NoLogger", objectArray0);
      assertEquals("<]", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      MockThrowable mockThrowable0 = new MockThrowable("((=pCP.O,GMQ)E(<<u");
      noLogger0.trace("NMbr0JyEKH(", (Throwable) mockThrowable0);
      assertEquals("[(~P", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("SP{Jj4(J$3~y");
      Object object0 = noLogger0.readResolve();
      noLogger0.trace("", (Object) "z&laNP/lvA8V", object0);
      assertEquals("SP{Jj4(J$3~y", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("z.J%`TG");
      Object[] objectArray0 = new Object[5];
      noLogger0.info("z.J%`TG", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("<]");
      noLogger0.info("<]", (Object) "<]");
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      noLogger0.info("[(~P");
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("<]");
      MockThrowable mockThrowable0 = new MockThrowable();
      noLogger0.error("org.jfaster.mango.util.logging.NoLogger", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("<]");
      Object object0 = noLogger0.readResolve();
      noLogger0.error("~hW", object0, (Object) noLogger0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("9Q=uHdi");
      Object object0 = new Object();
      noLogger0.debug("", object0, object0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("@");
      Object object0 = noLogger0.readResolve();
      noLogger0.debug("@", object0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("z.J%`TG");
      noLogger0.debug("WARN");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("9Q=uHdi");
      boolean boolean0 = noLogger0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoLogger noLogger0 = null;
      try {
        noLogger0 = new NoLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      noLogger0.warn("((=pCP.O,GMQ)E(<<u");
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      boolean boolean0 = noLogger0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      boolean boolean0 = noLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("9Q=uHdi");
      boolean boolean0 = noLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("9Q=uHdi");
      Object[] objectArray0 = new Object[5];
      noLogger0.error((String) null, objectArray0);
      assertFalse(noLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.Slf4JLoggerFactory");
      noLogger0.info("org.jfaster.mango.util.logging.Slf4JLoggerFactory", (Throwable) mockThrowable0);
      assertEquals("org.jfaster.mango.util.logging.Slf4JLoggerFactory", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("jK=U/3cY|no4!");
      noLogger0.error("jK=U/3cY|no4!");
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("+5E?7_k/5|`raB");
      noLogger0.debug("+5E?7_k/5|`raB", (Object[]) null);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("bp}yZ05kbDUh)7");
      noLogger0.trace("");
      assertFalse(noLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("[(~P");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.info(",Pas4vNWHYl", (Object) noLogger0, (Object) internalLogLevel0);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      MockThrowable mockThrowable0 = new MockThrowable("D!9-}BD");
      noLogger0.warn("D!9-}BD", (Throwable) mockThrowable0);
      assertEquals("D!9-}BD", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      boolean boolean0 = noLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("$VALUES");
      noLogger0.error("$VALUES", (Object) "$VALUES");
      assertEquals("$VALUES", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger(")");
      noLogger0.trace((String) null, (Object) ")");
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("V))O 90_7dnE");
      noLogger0.debug("V))O 90_7dnE", (Throwable) null);
      assertFalse(noLogger0.isTraceEnabled());
  }
}
