/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:04:03 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.logging.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.split((String) null, 'D');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.simpleClassName((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.simpleClassName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = StringUtil.simpleClassName(class0);
      assertEquals("String", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("o>", 'o');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("", 'V');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("nwG<nW+up~FN`(;X(", '(');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = StringUtil.split(">", '>');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      String string0 = StringUtil.simpleClassName(object0);
      assertEquals("Object", string0);
  }
}
