/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:46:46 GMT 2022
 */

package org.jfaster.mango.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.PropertyTokenizer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyTokenizer_ESTest extends PropertyTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("org.jfaster.mango.util.PropertyTokenizer");
      PropertyTokenizer propertyTokenizer1 = propertyTokenizer0.next();
      assertTrue(propertyTokenizer1.hasNext());
      assertEquals("mango.util.PropertyTokenizer", propertyTokenizer1.getChildren());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("");
      String string0 = propertyTokenizer0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer(".");
      String string0 = propertyTokenizer0.getName();
      assertEquals("", propertyTokenizer0.getChildren());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("");
      String string0 = propertyTokenizer0.getChildren();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("org.jfaster.mango.util.PropertyTokenizer");
      String string0 = propertyTokenizer0.getChildren();
      assertEquals("org", propertyTokenizer0.getName());
      assertEquals("jfaster.mango.util.PropertyTokenizer", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer((String) null);
      assertNull(propertyTokenizer0.getChildren());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("org.jfaster.mango.util.PropertyTokenizer");
      boolean boolean0 = propertyTokenizer0.hasNext();
      assertTrue(boolean0);
      assertEquals("jfaster.mango.util.PropertyTokenizer", propertyTokenizer0.getChildren());
      assertEquals("org", propertyTokenizer0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("iy(!]<k8LfinsA3'U>4");
      boolean boolean0 = propertyTokenizer0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("zEs");
      boolean boolean0 = propertyTokenizer0.hasCurrent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("kMLM32fsc?d>v7`.");
      PropertyTokenizer propertyTokenizer1 = propertyTokenizer0.next();
      boolean boolean0 = propertyTokenizer1.hasCurrent();
      assertFalse(boolean0);
      assertTrue(propertyTokenizer0.hasCurrent());
      assertEquals("kMLM32fsc?d>v7`", propertyTokenizer0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("kMLM32fsc?d>v7`.");
      String string0 = propertyTokenizer0.getName();
      assertNotNull(string0);
      assertEquals("kMLM32fsc?d>v7`", string0);
      assertEquals("", propertyTokenizer0.getChildren());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyTokenizer propertyTokenizer0 = new PropertyTokenizer("kMLM32fsc?d>v7`.");
      String string0 = propertyTokenizer0.getChildren();
      assertEquals("", string0);
      assertTrue(propertyTokenizer0.hasCurrent());
      assertEquals("kMLM32fsc?d>v7`", propertyTokenizer0.getName());
  }
}
