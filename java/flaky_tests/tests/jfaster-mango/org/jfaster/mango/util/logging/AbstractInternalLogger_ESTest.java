/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 21:57:01 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.ConsoleLogger;
import org.jfaster.mango.util.logging.InternalLogLevel;
import org.jfaster.mango.util.logging.NoLogger;
import org.jfaster.mango.util.logging.Slf4JLogger;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractInternalLogger_ESTest extends AbstractInternalLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.log(internalLogLevel0, "", (Throwable) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      String string0 = consoleLogger0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("RA}E");
      // Undeclared exception!
      try { 
        consoleLogger0.log((InternalLogLevel) null, "RA}E", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger(".");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      // Undeclared exception!
      try { 
        noLogger0.log((InternalLogLevel) null, ".", (Object) internalLogLevel0, (Object) ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("\"5");
      // Undeclared exception!
      try { 
        consoleLogger0.log((InternalLogLevel) null, "\"5", (Object) "\"5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("S.~t;$");
      // Undeclared exception!
      try { 
        consoleLogger0.log((InternalLogLevel) null, "S.~t;$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("org.jfaster.mango.util.logging.AbstractInternalLogger");
      // Undeclared exception!
      try { 
        noLogger0.isEnabled((InternalLogLevel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      String string0 = noLogger0.name();
      assertEquals("q%", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      ConsoleLogger consoleLogger0 = new ConsoleLogger("o}M;$an5BGWIgb\"H=`");
      Object[] objectArray0 = new Object[4];
      consoleLogger0.log(internalLogLevel0, "q%", objectArray0);
      assertTrue(consoleLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("w7NP#");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      consoleLogger0.log(internalLogLevel0, "w7NP#", (Object[]) null);
      assertEquals("w7NP#", consoleLogger0.name());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("gpX)dsa:rI=+%gZ;AI");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      consoleLogger0.log(internalLogLevel0, "gpX)dsa:rI=+%gZ;AI", (Object[]) null);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      ConsoleLogger consoleLogger0 = new ConsoleLogger("o}M;$an5BGWIgb\"H=`");
      Object[] objectArray0 = new Object[4];
      consoleLogger0.log(internalLogLevel0, "q%", objectArray0);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("U7NP#");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      consoleLogger0.log(internalLogLevel0, "U7NP#", (Object[]) null);
      assertTrue(consoleLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("S.~{$");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      noLogger0.log(internalLogLevel0, "S.~{$", (Object) internalLogLevel0, (Object) "S.~{$");
      assertFalse(noLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("S.~{$");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      noLogger0.log(internalLogLevel0, "S.~{$", (Object) internalLogLevel0, (Object) "S.~{$");
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      Slf4JLogger slf4JLogger0 = (Slf4JLogger)noLogger0.readResolve();
      MockThrowable mockThrowable0 = new MockThrowable("NoLogger(q%)");
      slf4JLogger0.log(internalLogLevel0, "q%", (Object) mockThrowable0, (Object) slf4JLogger0);
      assertEquals("NoLogger(q%)", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("-S.~m$");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "-S.~m$", (Object) internalLogLevel0, (Object) "-S.~m$");
      assertEquals("-S.~m$", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("U7NP#");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      consoleLogger0.log(internalLogLevel0, "U7NP#", (Object) "U7NP#");
      assertTrue(consoleLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("9f[1,@]bXtEea");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      Object object0 = consoleLogger0.readResolve();
      consoleLogger0.log(internalLogLevel0, "", object0);
      assertTrue(consoleLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("gp )d{a8r+%gZ.;8AI$");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      Object object0 = noLogger0.readResolve();
      noLogger0.log(internalLogLevel0, "org.jfaster.mango.util.logging.AbstractInternalLogger$1", object0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      noLogger0.log(internalLogLevel0, "q%", (Object) null);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("gp )d{a8r+%gZ.;8AI$");
      Object object0 = new Object();
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "D", object0);
      assertEquals("gp )d{a8r+%gZ.;8AI$", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("_Ob");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      consoleLogger0.log(internalLogLevel0, "_Ob");
      assertTrue(consoleLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      consoleLogger0.log(internalLogLevel0, "");
      assertTrue(consoleLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      consoleLogger0.log(internalLogLevel0, "");
      assertEquals("", consoleLogger0.name());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      consoleLogger0.log(internalLogLevel0, "");
      assertEquals("", consoleLogger0.name());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("U7NP#");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      consoleLogger0.log(internalLogLevel0, "U7NP#");
      assertTrue(consoleLogger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable("NoLogger(q%)");
      noLogger0.log(internalLogLevel0, "q%", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      // Undeclared exception!
      try { 
        consoleLogger0.log(internalLogLevel0, "", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.ConsoleLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      noLogger0.log(internalLogLevel0, "", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      MockThrowable mockThrowable0 = new MockThrowable("NoLogger(q%)");
      noLogger0.log(internalLogLevel0, "q%", (Throwable) mockThrowable0);
      assertEquals("q%", noLogger0.name());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("-S.~m$");
      MockThrowable mockThrowable0 = new MockThrowable();
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      noLogger0.log(internalLogLevel0, "-S.~m$", (Throwable) mockThrowable0);
      assertFalse(noLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("9f[1,@]bXtEea");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.WARN;
      boolean boolean0 = consoleLogger0.isEnabled(internalLogLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("gp )d{a8r+%gZ.;8AI$");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.TRACE;
      boolean boolean0 = noLogger0.isEnabled(internalLogLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(logger0).getName();
      Slf4JLogger slf4JLogger0 = null;
      try {
        slf4JLogger0 = new Slf4JLogger(logger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      Slf4JLogger slf4JLogger0 = (Slf4JLogger)noLogger0.readResolve();
      MockThrowable mockThrowable0 = new MockThrowable("NoLogger(q%)");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.DEBUG;
      slf4JLogger0.log(internalLogLevel0, "q%", (Object) mockThrowable0, (Object) slf4JLogger0);
      assertEquals("NoLogger(q%)", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NoLogger noLogger0 = new NoLogger("q%");
      String string0 = noLogger0.toString();
      assertEquals("NoLogger(q%)", string0);
  }
}
