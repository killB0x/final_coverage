/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 22:49:12 GMT 2022
 */

package org.jfaster.mango.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.util.HashMap;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.IterObj;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IterObj_ESTest extends IterObj_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLInvalidAuthorizationSpecException0);
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      // Undeclared exception!
      iterObj0.size();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      // Undeclared exception!
      iterObj0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IterObj iterObj0 = null;
      try {
        iterObj0 = new IterObj((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.IterObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      IterObj iterObj0 = new IterObj(object0);
      // Undeclared exception!
      try { 
        iterObj0.size();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class need collection or array but class java.lang.Object
         //
         verifyException("org.jfaster.mango.util.IterObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      iterObj0.size();
      int int0 = iterObj0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      Iterator iterator0 = iterObj0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      IterObj iterObj0 = new IterObj(object0);
      // Undeclared exception!
      try { 
        iterObj0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class need collection or array but class java.lang.Object
         //
         verifyException("org.jfaster.mango.util.IterObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      IterObj iterObj0 = new IterObj(object0);
      // Undeclared exception!
      try { 
        iterObj0.isEmpty();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class need collection or array but class java.lang.Object
         //
         verifyException("org.jfaster.mango.util.IterObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-1127), hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLClientInfoException0);
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      iterObj0.size();
      boolean boolean0 = iterObj0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      boolean boolean0 = iterObj0.isCollection();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      IterObj iterObj0 = new IterObj(object0);
      boolean boolean0 = iterObj0.isCollection();
      assertFalse(iterObj0.canIterable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      IterObj iterObj0 = new IterObj(sQLNonTransientConnectionException0);
      boolean boolean0 = iterObj0.canIterable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      IterObj iterObj0 = new IterObj(object0);
      boolean boolean0 = iterObj0.canIterable();
      assertFalse(boolean0);
  }
}
