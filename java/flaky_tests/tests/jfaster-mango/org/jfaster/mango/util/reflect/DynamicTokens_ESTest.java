/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:45:51 GMT 2022
 */

package org.jfaster.mango.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLNonTransientConnectionException;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.page.PageResult;
import org.jfaster.mango.util.reflect.DynamicTokens;
import org.jfaster.mango.util.reflect.TypeToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DynamicTokens_ESTest extends DynamicTokens_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken<PageResult<Object>> typeToken1 = DynamicTokens.pageResultToken(typeToken0);
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken<Optional<Object>> typeToken1 = DynamicTokens.optionalToken(typeToken0);
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      TypeToken<Iterable<Object>> typeToken1 = DynamicTokens.iterableToken(typeToken0);
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        DynamicTokens.listToken((TypeToken<PageResult<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DynamicTokens dynamicTokens0 = new DynamicTokens();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeToken<SQLNonTransientConnectionException> typeToken0 = TypeToken.of(class0);
      TypeToken<List<SQLNonTransientConnectionException>> typeToken1 = DynamicTokens.listToken(typeToken0);
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        DynamicTokens.iterableToken((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        DynamicTokens.optionalToken((TypeToken<PageResult<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        DynamicTokens.pageResultToken((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }
}
