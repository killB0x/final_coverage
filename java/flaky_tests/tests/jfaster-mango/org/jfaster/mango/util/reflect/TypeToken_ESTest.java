/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 21:49:10 GMT 2022
 */

package org.jfaster.mango.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfaster.mango.util.reflect.TypeParameter;
import org.jfaster.mango.util.reflect.TypeToken;
import org.jfaster.mango.util.reflect.Types;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeToken_ESTest extends TypeToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      TypeParameter<Types.WildcardTypeImpl> typeParameter0 = (TypeParameter<Types.WildcardTypeImpl>) mock(TypeParameter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        typeToken0.where(typeParameter0, (TypeToken<Types.WildcardTypeImpl>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      TypeToken<?> typeToken1 = typeToken0.getGenericSuperclass();
      assertNotNull(typeToken1);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(typeToken1.isPrimitive());
      
      boolean boolean0 = typeToken0.isAssignableFrom(typeToken1);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(typeToken1.isPrimitive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeToken<Method> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      Set<TypeToken<?>> set0 = typeToken0.getTypes();
      assertNotNull(set0);
      assertFalse(typeToken0.isPrimitive());
      assertEquals(7, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      Type type0 = typeToken0.getType();
      assertNull(type0);
      assertFalse(typeToken0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertNotNull(types_WildcardTypeImpl0);
      assertEquals(0, typeArray0.length);
      
      Set<Class<?>> set0 = TypeToken.getRawTypes(types_WildcardTypeImpl0);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeToken<Method> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      List<TypeToken<?>> list0 = typeToken0.getGenericInterfaces();
      assertNotNull(list0);
      assertFalse(typeToken0.isPrimitive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      List<TypeToken<?>> list0 = typeToken0.getGenericInterfaces();
      assertNotNull(list0);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClassTuple((Class<?>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClassTuple((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClass((Class<?>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeToken<Method> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeToken<?> typeToken0 = TypeToken.of((Type) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken1 = TypeToken.of(class0);
      assertNotNull(typeToken1);
      assertFalse(typeToken1.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken1.isAssignableFrom(typeToken0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.isAssignableFrom((TypeToken<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.isAssignableFrom((Type) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.isAssignableFrom((Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.isArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.getTypes();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeToken.getRawType((Type) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.getRawType();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.getGenericSuperclass();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.getGenericInterfaces();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.getComponentType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      TypeToken<?> typeToken1 = typeToken0.getComponentType();
      assertNull(typeToken1);
      assertFalse(typeToken0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      boolean boolean0 = typeToken0.isPrimitive();
      assertFalse(typeToken0.isPrimitive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveType((Type) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // must have been one of the known types
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      TypeToken<?> typeToken1 = typeToken0.getGenericSuperclass();
      assertNotNull(typeToken1);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(typeToken1.isPrimitive());
      
      TypeToken<?> typeToken2 = typeToken0.resolveType(class0);
      assertNotSame(typeToken2, typeToken1);
      assertNotNull(typeToken2);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(typeToken2.isPrimitive());
      assertFalse(typeToken2.equals((Object)typeToken1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      typeToken0.hashCode();
      assertFalse(typeToken0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertNotNull(types_WildcardTypeImpl0);
      assertEquals(1, typeArray0.length);
      
      boolean boolean0 = typeToken0.isAssignableFrom((Type) types_WildcardTypeImpl0);
      assertFalse(typeToken0.isPrimitive());
      assertEquals(1, typeArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClassTuple(class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Class<Method> class1 = Method.class;
      TypeToken<Method> typeToken0 = TypeToken.of(class1);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClass(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      boolean boolean0 = typeToken0.equals(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      Class<? super Types.WildcardTypeImpl> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(class1.isPrimitive());
      assertEquals(8, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class org.jfaster.mango.util.reflect.Types$WildcardTypeImpl", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      typeArray0[8] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertNotNull(types_WildcardTypeImpl0);
      assertEquals(9, typeArray0.length);
      
      boolean boolean0 = typeToken0.equals(types_WildcardTypeImpl0);
      assertFalse(typeToken0.isPrimitive());
      assertEquals(9, typeArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      TypeToken<Types.WildcardTypeImpl> typeToken1 = typeToken0.wrap();
      assertSame(typeToken0, typeToken1);
      assertSame(typeToken1, typeToken0);
      assertNotNull(typeToken1);
      assertFalse(typeToken0.isPrimitive());
      assertFalse(typeToken1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of((Class<Types.WildcardTypeImpl>) null);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      boolean boolean0 = typeToken0.isPrimitive();
      assertFalse(typeToken0.isPrimitive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      assertNotNull(typeToken0);
      assertFalse(typeToken0.isPrimitive());
      
      boolean boolean0 = typeToken0.isArray();
      assertFalse(typeToken0.isPrimitive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      assertNotNull(types_WildcardTypeImpl0);
      assertEquals(4, typeArray0.length);
      
      Set<Class<?>> set0 = TypeToken.getRawTypes(types_WildcardTypeImpl0);
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(4, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Type type0 = typeToken0.capture();
      Class<?> class1 = TypeToken.getRawType(type0);
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClass(class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Type type0 = typeToken0.capture();
      boolean boolean0 = typeToken0.isAssignableFrom(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      String string0 = typeToken0.toString();
      assertEquals("org.jfaster.mango.util.reflect.Types$WildcardTypeImpl", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      Class<Method> class1 = Method.class;
      // Undeclared exception!
      try { 
        typeToken0.resolveFatherClassTuple(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.TypeToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeToken<Types.WildcardTypeImpl> typeToken0 = TypeToken.of(class0);
      boolean boolean0 = typeToken0.isAssignableFrom(typeToken0);
      assertTrue(boolean0);
  }
}
