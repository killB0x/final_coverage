/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 22:09:49 GMT 2022
 */

package org.jfaster.mango.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.reflect.Types;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Types_ESTest extends Types_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      WildcardType wildcardType0 = Types.supertypeOf(class1);
      Type[] typeArray0 = wildcardType0.getLowerBounds();
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      boolean boolean0 = Types.equals(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.toString((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        Types.supertypeOf(typeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$JavaVersion$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.newParameterizedTypeWithOwner((Type) null, class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$ParameterizedTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.newParameterizedType(class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$ParameterizedTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.newArtificialTypeVariable((Method) null, "K;.7hb+9;DpX49dY", (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.newArrayType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$JavaVersion$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.isAssignable((Class<?>) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.getArrayClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.equals((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.subtypeOf(class0);
      WildcardType wildcardType1 = Types.subtypeOf(wildcardType0);
      Type[] typeArray0 = new Type[0];
      Type[] typeArray1 = new Type[1];
      Type type0 = Types.newArrayType(wildcardType1);
      typeArray1[0] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray1);
      Type type1 = Types.getComponentType(types_WildcardTypeImpl0);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)types_WildcardTypeImpl0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Method> class0 = Method.class;
      boolean boolean0 = Types.isAssignable(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      boolean boolean0 = Types.isAssignable(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.subtypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$JavaVersion$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      typeArray0[0] = (Type) class1;
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      List<Type> list0 = types_JavaVersion0.usedInGenericType(typeArray0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.subtypeOf(class0);
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) wildcardType0;
      List<Type> list0 = types_JavaVersion0.usedInGenericType(typeArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        types_JavaVersion0.usedInGenericType(typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$JavaVersion$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = (Types.WildcardTypeImpl)Types.supertypeOf(class0);
      String string0 = types_WildcardTypeImpl0.toString();
      assertEquals("? super java.lang.reflect.Method", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Method> class0 = Method.class;
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      Type[] typeArray1 = new Type[3];
      typeArray1[0] = (Type) class0;
      typeArray1[1] = (Type) class0;
      typeArray1[2] = (Type) parameterizedType0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray1, typeArray1);
      String string0 = types_WildcardTypeImpl0.getTypeName();
      assertEquals("? super java.lang.reflect.Method super java.lang.reflect.Method super java.lang.reflect.Method<> extends java.lang.reflect.Method extends java.lang.reflect.Method extends java.lang.reflect.Method<>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      boolean boolean0 = types_WildcardTypeImpl0.equals(types_WildcardTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      Object object0 = new Object();
      boolean boolean0 = types_WildcardTypeImpl0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Method> class0 = Method.class;
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      Type type0 = Types.getComponentType(parameterizedType0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.newParameterizedType(class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$ParameterizedTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.subtypeOf(class0);
      Type[] typeArray0 = new Type[0];
      Type[] typeArray1 = new Type[1];
      Type type0 = Types.newArrayType(wildcardType0);
      typeArray1[0] = type0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray1);
      Type type1 = Types.getComponentType(types_WildcardTypeImpl0);
      assertFalse(type1.equals((Object)type0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.supertypeOf(class0);
      Type type0 = Types.getComponentType(wildcardType0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Types.getComponentType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      String string0 = Types.toString((Type) class1);
      assertEquals("[Ljava.lang.reflect.Method;", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        Types.newArtificialTypeVariable((Method) null, "", typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$TypeVariableImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Owner type for unenclosed class java.lang.reflect.Method
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Method> class0 = Method.class;
      ParameterizedType parameterizedType0 = Types.newParameterizedTypeWithOwner((Type) null, class0, typeArray0);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Types.newParameterizedTypeWithOwner(class0, class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      // Undeclared exception!
      try { 
        Types.newArrayType(types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard should have only one upper bound.
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      // Undeclared exception!
      try { 
        Types.newArrayType(types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard cannot have more than one lower bounds.
         //
         verifyException("org.jfaster.mango.util.reflect.Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Types.NativeTypeVariableEquals<Method> types_NativeTypeVariableEquals0 = new Types.NativeTypeVariableEquals<Method>();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Method> class0 = Method.class;
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      Type type0 = Types.newArrayType(parameterizedType0);
      Type type1 = Types.getComponentType(type0);
      assertFalse(type1.equals((Object)type0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Method> class0 = Method.class;
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      Type type0 = Types.newArrayType(parameterizedType0);
      WildcardType wildcardType0 = Types.subtypeOf(type0);
      String string0 = wildcardType0.getTypeName();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<?> class1 = Types.getArrayClass(class0);
      WildcardType wildcardType0 = Types.supertypeOf(class1);
      Types.JavaVersion types_JavaVersion0 = Types.JavaVersion.JAVA6;
      String string0 = types_JavaVersion0.typeName(wildcardType0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Method> class0 = Method.class;
      WildcardType wildcardType0 = Types.supertypeOf(class0);
      Type type0 = Types.newArrayType(wildcardType0);
      assertFalse(type0.equals((Object)wildcardType0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        Types.newArtificialTypeVariable((Method) null, "n_E!&B!=1]PZ", typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.reflect.Types$TypeVariableImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Method> class0 = Method.class;
      boolean boolean0 = Types.equals(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Method> class0 = Method.class;
      ParameterizedType parameterizedType0 = Types.newParameterizedType(class0, typeArray0);
      Type[] typeArray1 = new Type[3];
      typeArray1[0] = (Type) class0;
      typeArray1[1] = (Type) class0;
      typeArray1[2] = (Type) parameterizedType0;
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray1, typeArray1);
      Type[] typeArray2 = types_WildcardTypeImpl0.getUpperBounds();
      assertEquals(3, typeArray2.length);
  }
}
