/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 00:36:25 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.ConsoleLogger;
import org.jfaster.mango.util.logging.InternalLogLevel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConsoleLogger_ESTest extends ConsoleLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      InternalLogLevel internalLogLevel0 = InternalLogLevel.ERROR;
      Object object0 = consoleLogger0.readResolve();
      consoleLogger0.log(internalLogLevel0, "", object0, (Object) consoleLogger0);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("[>J6#@.+");
      Object object0 = new Object();
      Object object1 = consoleLogger0.readResolve();
      consoleLogger0.info("", object1, object0);
      assertTrue(consoleLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("~NKjPV?p");
      Object object0 = consoleLogger0.readResolve();
      consoleLogger0.debug("~NKjPV?p", (Object) "~NKjPV?p", object0);
      assertEquals("~NKjPV?p", consoleLogger0.name());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("T;F=Q,uffpib-w");
      MockThrowable mockThrowable0 = new MockThrowable();
      consoleLogger0.trace("T;F=Q,uffpib-w", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      // Undeclared exception!
      try { 
        consoleLogger0.warn("org.jfaster.mango.util.logging.InternalLoggerFactory", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.ConsoleLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("dq");
      // Undeclared exception!
      try { 
        consoleLogger0.info("dq", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.ConsoleLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("FN,5<qvZ^");
      // Undeclared exception!
      try { 
        consoleLogger0.error("FN,5<qvZ^", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.ConsoleLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      // Undeclared exception!
      try { 
        consoleLogger0.debug("", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.ConsoleLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConsoleLogger consoleLogger0 = null;
      try {
        consoleLogger0 = new ConsoleLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      Object object0 = consoleLogger0.readResolve();
      consoleLogger0.trace("", object0);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("T;F=Q,uffpib-w");
      consoleLogger0.trace("T;F=Q,uffpib-w");
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("7 `\"%]65}&]");
      Object[] objectArray0 = new Object[8];
      consoleLogger0.trace("7 `\"%]65}&]", objectArray0);
      assertTrue(consoleLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("T;F=Q,uffpib-w");
      Object object0 = consoleLogger0.readResolve();
      consoleLogger0.trace("T;F=Q,uffpib-w", object0, object0);
      assertTrue(consoleLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("org.jfaster.mango.util.logging.MessageFormatter");
      // Undeclared exception!
      try { 
        consoleLogger0.trace("org.jfaster.mango.util.logging.MessageFormatter", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.ConsoleLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("W~ju^dNbU6");
      boolean boolean0 = consoleLogger0.isTraceEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("8[?4~e@|.t.xM-jo|w{");
      consoleLogger0.info("8[?4~e@|.t.xM-jo|w{", (Object[]) null);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger(",4Ek( kDTbZ>\"&");
      Object[] objectArray0 = new Object[0];
      consoleLogger0.debug(",4Ek( kDTbZ>\"&", objectArray0);
      assertEquals(",4Ek( kDTbZ>\"&", consoleLogger0.name());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      boolean boolean0 = consoleLogger0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      boolean boolean0 = consoleLogger0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      Object object0 = new Object();
      consoleLogger0.warn("", object0);
      assertTrue(consoleLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      MockThrowable mockThrowable0 = new MockThrowable();
      consoleLogger0.info("", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("qKAV{");
      consoleLogger0.info("qKAV{", (Object) "qKAV{");
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      consoleLogger0.error("", (Object) "V~:U");
      assertTrue(consoleLogger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("W~ju^dNbU6");
      Object[] objectArray0 = new Object[0];
      consoleLogger0.error("W~ju^dNbU6", objectArray0);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("0,s");
      boolean boolean0 = consoleLogger0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      MockThrowable mockThrowable0 = new MockThrowable();
      consoleLogger0.debug("", (Throwable) mockThrowable0);
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("org.jfaster.mango.util.logging.FormattingTuple");
      boolean boolean0 = consoleLogger0.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      consoleLogger0.error("");
      assertTrue(consoleLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      consoleLogger0.error("", (Object) "", (Object) "");
      assertTrue(consoleLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      MockThrowable mockThrowable0 = new MockThrowable();
      consoleLogger0.warn("V~:U", (Object) "", (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("non-sensical empty or null argument array");
      MockThrowable mockThrowable0 = new MockThrowable();
      consoleLogger0.warn("non-sensical empty or null argument array", (Throwable) mockThrowable0);
      assertTrue(consoleLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      consoleLogger0.info("V~:U");
      assertTrue(consoleLogger0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("0,s");
      consoleLogger0.warn("0,s");
      assertTrue(consoleLogger0.isInfoEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("Using Log4J2 as the default logging framework");
      consoleLogger0.debug("Using Log4J2 as the default logging framework");
      assertTrue(consoleLogger0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      MockThrowable mockThrowable0 = new MockThrowable();
      consoleLogger0.error("", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("");
      consoleLogger0.debug("", (Object) "");
      assertEquals("", consoleLogger0.name());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConsoleLogger consoleLogger0 = new ConsoleLogger("dGq6");
      Object[] objectArray0 = new Object[1];
      consoleLogger0.warn("dGq6", objectArray0);
      assertTrue(consoleLogger0.isErrorEnabled());
  }
}
