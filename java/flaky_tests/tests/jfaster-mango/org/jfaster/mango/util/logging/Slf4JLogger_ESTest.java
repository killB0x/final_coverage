/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:25:33 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.InternalLogLevel;
import org.jfaster.mango.util.logging.Slf4JLogger;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slf4JLogger_ESTest extends Slf4JLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("org.jfaster.mango.util.logging.Slf4JLogger").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.error("I!~T", (Object) null, (Object) slf4JLogger0);
      assertEquals("org.jfaster.mango.util.logging.Slf4JLogger", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("m36JVUj(OEWIhxem&l4").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = new Object();
      slf4JLogger0.warn("KG8x4*%z>A:~", object0, (Object) slf4JLogger0);
      assertEquals("m36JVUj(OEWIhxem&l4", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Wa").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) logger0;
      slf4JLogger0.debug("s~,(3v){7ue8Jbn", objectArray0[2], objectArray0[4]);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = slf4JLogger0.readResolve();
      slf4JLogger0.trace("Slf4JLogger()", object0, (Object) slf4JLogger0);
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Wa").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.warn("s~,(3v){7ue8Jbn", (Object) slf4JLogger0);
      assertEquals("Wa", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Using SLF4J as the default logging framework").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.info("|ZT~\"{", (Object[]) null);
      assertEquals("Using SLF4J as the default logging framework", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("puh.C18\"(R3Vc").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.debug("Slf4JLogger(puh.C18\"(R3Vc)", (Object) "Slf4JLogger(puh.C18\"(R3Vc)");
      assertEquals("puh.C18\"(R3Vc", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Using SLF4J as the default logging framework").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.debug("Using SLF4J as the default logging framework");
      assertEquals("Using SLF4J as the default logging framework", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("puh.C18\"(R3Vc").when(logger0).getName();
      doReturn(true).when(logger0).isInfoEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("DEBUG").when(logger0).getName();
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(true).when(logger0).isDebugEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Slf4JLogger slf4JLogger0 = null;
      try {
        slf4JLogger0 = new Slf4JLogger((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.Slf4JLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(logger0).getName();
      Slf4JLogger slf4JLogger0 = null;
      try {
        slf4JLogger0 = new Slf4JLogger(logger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("org.jfaster.mango.util.logging.AbstractInternalLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Using SLF4J as the default logging framework").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      slf4JLogger0.warn("IFO", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(true).when(logger0).isTraceEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isTraceEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("puh.C18\"(R3Vc").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object object0 = new Object();
      slf4JLogger0.info("Slf4JLogger(puh.C18\"(R3Vc)", object0, (Object) "Slf4JLogger(puh.C18\"(R3Vc)");
      assertEquals("puh.C18\"(R3Vc", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Using SLF4J as the default logging framework").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      slf4JLogger0.error("org.jfaster.mango.util.logging.InternalLogLevel", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[3];
      slf4JLogger0.debug("INFO", objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.trace("");
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      InternalLogLevel internalLogLevel0 = InternalLogLevel.INFO;
      slf4JLogger0.trace("", (Object) internalLogLevel0);
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(true).when(logger0).isErrorEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("DEBUG").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.error((String) null, (Object) null);
      assertEquals("DEBUG", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      slf4JLogger0.debug("2bTd#{E~rW", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("INFO").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      slf4JLogger0.trace("YT(=e)z6xD_Z\"!^Om\"", (Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("puh.C18\"(R3Vc").when(logger0).getName();
      doReturn(true).when(logger0).isWarnEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("-}KCG").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      slf4JLogger0.info("dM>Y+y", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("DEBUG").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.error((String) null);
      assertEquals("DEBUG", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("DEBUG").when(logger0).getName();
      doReturn(false).when(logger0).isDebugEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[7];
      slf4JLogger0.warn("", objectArray0);
      assertEquals("", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("DEBUG").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.warn("org.jfaster.mango.util.logging.Slf4JLogger");
      assertEquals("DEBUG", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("Wa").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[8];
      slf4JLogger0.trace((String) null, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("INFO").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.info("INFO");
      assertEquals("INFO", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("6<J'E1").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      slf4JLogger0.info("LI[Ld4l", (Object) "LI[Ld4l");
      assertEquals("6<J'E1", slf4JLogger0.name());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("").when(logger0).getName();
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      boolean boolean0 = slf4JLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn("INFO").when(logger0).getName();
      Slf4JLogger slf4JLogger0 = new Slf4JLogger(logger0);
      Object[] objectArray0 = new Object[1];
      slf4JLogger0.error("YT(=e)z6xD_Z\"!^Om\"", objectArray0);
      assertEquals(1, objectArray0.length);
  }
}
