/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 23:29:55 GMT 2022
 */

package org.jfaster.mango.util.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Type;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.util.reflect.TypeWrapper;
import org.jfaster.mango.util.reflect.Types;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeWrapper_ESTest extends TypeWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeWrapper typeWrapper0 = null;
      try {
        typeWrapper0 = new TypeWrapper((Type) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.canIterable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isArray();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isIterable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isArrayList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isOptinal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      Class class1 = (Class)typeWrapper0.getMappedType();
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      Class<?> class1 = typeWrapper0.getMappedClass();
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isHashSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isPageResult();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isLinkedList();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Types.WildcardTypeImpl types_WildcardTypeImpl0 = new Types.WildcardTypeImpl(typeArray0, typeArray0);
      TypeWrapper typeWrapper0 = null;
      try {
        typeWrapper0 = new TypeWrapper(types_WildcardTypeImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Does not support the wildcard type ?
         //
         verifyException("org.jfaster.mango.util.reflect.TypeWrapper$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeWrapper typeWrapper0 = new TypeWrapper(class0);
      boolean boolean0 = typeWrapper0.isCollection();
      assertFalse(boolean0);
  }
}
