/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 21:53:17 GMT 2022
 */

package org.jfaster.mango.util.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jfaster.mango.util.logging.FormattingTuple;
import org.jfaster.mango.util.logging.MessageFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MessageFormatter_ESTest extends MessageFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = MessageFormatter.isDoubleEscaped("_b;us3oDp", 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FormattingTuple formattingTuple0 = MessageFormatter.format("e{}", "e{}", "e{}");
      assertNotNull(formattingTuple0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Object[] objectArray0 = new Object[7];
      objectArray0[6] = (Object) mockThrowable0;
      Throwable throwable0 = MessageFormatter.getThrowableCandidate(objectArray0);
      assertSame(throwable0, mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFormatter.isEscapedDelimeter("a", (-1325));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFormatter.isEscapedDelimeter((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.MessageFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFormatter.isDoubleEscaped("", 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFormatter.isDoubleEscaped((String) null, 4130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.util.logging.MessageFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = MessageFormatter.isDoubleEscaped("?o:1{nr:v!WS", 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FormattingTuple formattingTuple0 = MessageFormatter.format("{}", (Object) null);
      assertEquals("null", formattingTuple0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = MessageFormatter.isDoubleEscaped("", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = MessageFormatter.isEscapedDelimeter("JDI>aDFs?{*EK'", 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FormattingTuple formattingTuple0 = MessageFormatter.arrayFormat("otN+W!24>", (Object[]) null);
      assertEquals("otN+W!24>", formattingTuple0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FormattingTuple formattingTuple0 = MessageFormatter.format((String) null, (Object) null, (Object) null);
      assertNull(formattingTuple0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) mockThrowable0;
      FormattingTuple formattingTuple0 = MessageFormatter.arrayFormat("", objectArray0);
      assertEquals("", formattingTuple0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FormattingTuple formattingTuple0 = MessageFormatter.arrayFormat(")L-G", objectArray0);
      assertEquals(")L-G", formattingTuple0.getMessage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Throwable throwable0 = MessageFormatter.getThrowableCandidate((Object[]) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FormattingTuple formattingTuple0 = MessageFormatter.format("OS\\{}", "OS\\{}", (Object) null);
      assertEquals("OS{}", formattingTuple0.getMessage());
  }
}
