/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:45:10 GMT 2022
 */

package org.jfaster.mango.datasource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfaster.mango.datasource.DriverManagerDataSource;
import org.jfaster.mango.datasource.MasterSlaveDataSourceFactory;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MasterSlaveDataSourceFactory_ESTest extends MasterSlaveDataSourceFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      LinkedList<DataSource> linkedList0 = new LinkedList<DataSource>();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("org.jfaster.mango.datasource.MasterSlaveDataSourceFactory", (String) null, "DEFAULT", "DEFAULT");
      linkedList0.add((DataSource) driverManagerDataSource0);
      masterSlaveDataSourceFactory0.setSlaves(linkedList0);
      List<DataSource> list0 = masterSlaveDataSourceFactory0.getSlaves();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      LinkedList<DataSource> linkedList0 = new LinkedList<DataSource>();
      linkedList0.add((DataSource) null);
      masterSlaveDataSourceFactory0.setSlaves(linkedList0);
      Class<Object> class0 = Object.class;
      DataSource dataSource0 = masterSlaveDataSourceFactory0.getSlaveDataSource(class0);
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      LinkedList<DataSource> linkedList0 = new LinkedList<DataSource>();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("org.jfaster.mango.datasource.MasterSlaveDataSourceFactory", (String) null, "DEFAULT", "DEFAULT");
      linkedList0.add((DataSource) driverManagerDataSource0);
      masterSlaveDataSourceFactory0.setSlaves(linkedList0);
      Class<Object> class0 = Object.class;
      DriverManagerDataSource driverManagerDataSource1 = (DriverManagerDataSource)masterSlaveDataSourceFactory0.getSlaveDataSource(class0);
      assertEquals("DEFAULT", driverManagerDataSource1.getPassword());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("org.jfaster.mango.datasource.MasterSlaveDataSourceFactory", (String) null, "DEFAULT", "DEFAULT");
      masterSlaveDataSourceFactory0.setMaster(driverManagerDataSource0);
      DriverManagerDataSource driverManagerDataSource1 = (DriverManagerDataSource)masterSlaveDataSourceFactory0.getMasterDataSource();
      assertEquals("DEFAULT", driverManagerDataSource1.getUsername());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource("org.jfaster.mango.datasource.MasterSlaveDataSourceFactory", (String) null, "DEFAULT", "DEFAULT");
      masterSlaveDataSourceFactory0.setMaster(driverManagerDataSource0);
      DriverManagerDataSource driverManagerDataSource1 = (DriverManagerDataSource)masterSlaveDataSourceFactory0.getMaster();
      assertNull(driverManagerDataSource1.getUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        masterSlaveDataSourceFactory0.getSlaveDataSource(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfaster.mango.datasource.MasterSlaveDataSourceFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      List<DataSource> list0 = masterSlaveDataSourceFactory0.getSlaves();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      DataSource dataSource0 = masterSlaveDataSourceFactory0.getMaster();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory();
      DataSource dataSource0 = masterSlaveDataSourceFactory0.getMasterDataSource();
      assertNull(dataSource0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DataSource> linkedList0 = new LinkedList<DataSource>();
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory((DataSource) null, linkedList0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        masterSlaveDataSourceFactory0.getSlaveDataSource(class0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DriverManagerDataSource driverManagerDataSource0 = new DriverManagerDataSource();
      LinkedList<DataSource> linkedList0 = new LinkedList<DataSource>();
      MasterSlaveDataSourceFactory masterSlaveDataSourceFactory0 = new MasterSlaveDataSourceFactory("h2^9<RSi@|O*y@RMY_", driverManagerDataSource0, linkedList0);
      List<DataSource> list0 = masterSlaveDataSourceFactory0.getSlaves();
      assertTrue(list0.isEmpty());
  }
}
