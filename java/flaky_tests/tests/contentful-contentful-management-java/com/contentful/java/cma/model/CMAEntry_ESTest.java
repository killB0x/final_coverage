/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:20:10 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMAEntry;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAType;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAEntry_ESTest extends CMAEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      LinkedHashMap<String, LinkedHashMap<String, Object>> linkedHashMap0 = new LinkedHashMap<String, LinkedHashMap<String, Object>>();
      CMAEntry cMAEntry1 = cMAEntry0.setFields(linkedHashMap0);
      LinkedHashMap<String, LinkedHashMap<String, Object>> linkedHashMap1 = cMAEntry1.getFields();
      assertSame(linkedHashMap1, linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry.Localized cMAEntry_Localized0 = cMAEntry0.new Localized("rFNJR?/");
      cMAEntry_Localized0.setField("fHj4V[I)*(9CF%fa ", "rFNJR?/");
      LinkedHashMap<String, LinkedHashMap<String, Object>> linkedHashMap0 = cMAEntry0.getFields();
      assertEquals(1, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.setField("", "", "");
      String string0 = cMAEntry0.getField("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.Space;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      cMASystem0.setContentType(cMALink1);
      cMAEntry0.system = cMASystem0;
      // Undeclared exception!
      cMAEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.system = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        cMAEntry0.setVersion(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.setSystem((CMASystem) null);
      // Undeclared exception!
      try { 
        cMAEntry0.setSpaceId("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry cMAEntry1 = cMAEntry0.setSystem((CMASystem) null);
      // Undeclared exception!
      try { 
        cMAEntry1.setId("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.setSystem((CMASystem) null);
      // Undeclared exception!
      try { 
        cMAEntry0.setEnvironmentId("Vb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      String string0 = cMAEntry0.getField("", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      LinkedHashMap<String, LinkedHashMap<String, Object>> linkedHashMap0 = cMAEntry0.getFields();
      assertNull(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.setField("", "", "");
      LinkedHashMap<String, String> linkedHashMap0 = cMAEntry0.getField((String) null, "");
      assertNull(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.setField("", "ContentType", "ContentType");
      CMAEntry cMAEntry1 = cMAEntry0.getField("", "QVis`#Iwtf");
      assertNull(cMAEntry1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      cMAEntry0.setField("", "", "");
      CMAEntry cMAEntry1 = cMAEntry0.setField("", "P6Ush3{1?E", "P6Ush3{1?E");
      assertFalse(cMAEntry1.isPublished());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry.Localized cMAEntry_Localized0 = cMAEntry0.new Localized("{-K");
      String string0 = cMAEntry_Localized0.getField("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry.Localized cMAEntry_Localized0 = cMAEntry0.new Localized("{-K");
      String string0 = cMAEntry_Localized0.toString();
      assertEquals("Localized { locale = {-K, fields = null }", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry cMAEntry1 = cMAEntry0.setSpaceId("");
      assertNull(cMAEntry1.getVisibility());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      String string0 = cMAEntry0.toString();
      assertEquals("CMAEntry { CMAResource { system = CMASystem { type = Entry } } fields = null }", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      Integer integer0 = new Integer((-1426));
      CMAEntry cMAEntry1 = cMAEntry0.setVersion(integer0);
      assertNull(cMAEntry1.getVisibility());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry.Localized cMAEntry_Localized0 = cMAEntry0.localize("iv");
      assertNotNull(cMAEntry_Localized0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      LinkedHashMap<String, LinkedHashMap<String, Object>> linkedHashMap0 = new LinkedHashMap<String, LinkedHashMap<String, Object>>();
      CMAEntry cMAEntry1 = cMAEntry0.setFields(linkedHashMap0);
      cMAEntry1.setField("%fR09 qF3X|wFH", "%fR09 qF3X|wFH", linkedHashMap0);
      // Undeclared exception!
      try { 
        cMAEntry0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry cMAEntry1 = cMAEntry0.setId("");
      assertFalse(cMAEntry1.isPublished());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CMAEntry cMAEntry0 = new CMAEntry();
      CMAEntry cMAEntry1 = cMAEntry0.setEnvironmentId("");
      assertNull(cMAEntry1.getVisibility());
  }
}
