/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:46:25 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAUpload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAUpload_ESTest extends CMAUpload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink(cMAUpload0);
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink1);
      cMAUpload0.setSystem(cMASystem1);
      // Undeclared exception!
      cMAUpload0.toString();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem1 = cMASystem0.setId("ig$(*.7");
      cMAUpload0.setSystem(cMASystem1);
      cMALink0.setSystem(cMASystem1);
      cMASystem1.updatedBy = cMALink0;
      // Undeclared exception!
      try { 
        cMAUpload0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      cMAUpload0.setSystem((CMASystem) null);
      // Undeclared exception!
      try { 
        cMAUpload0.setVersion((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      CMAUpload cMAUpload1 = cMAUpload0.setSystem((CMASystem) null);
      // Undeclared exception!
      try { 
        cMAUpload1.setSpaceId("com.contentful.java.cma.model.CMAUpload");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      cMAUpload0.system = null;
      // Undeclared exception!
      try { 
        cMAUpload0.setId("com.contentful.java.cma.model.CMALink");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      String string0 = cMAUpload0.toString();
      assertEquals("CMAUpload { CMAResource { system = CMASystem { type = Upload } } }", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      CMAUpload cMAUpload1 = cMAUpload0.setSpaceId("");
      assertSame(cMAUpload1, cMAUpload0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      CMAUpload cMAUpload1 = cMAUpload0.setId("");
      assertFalse(cMAUpload1.isPublished());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CMAUpload cMAUpload0 = new CMAUpload();
      CMAUpload cMAUpload1 = cMAUpload0.setVersion((Integer) null);
      assertFalse(cMAUpload1.isPublished());
  }
}
