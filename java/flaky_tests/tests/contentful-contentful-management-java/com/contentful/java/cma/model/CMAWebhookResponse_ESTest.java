/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:51:03 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.contentful.java.cma.model.CMAWebhookResponse;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAWebhookResponse_ESTest extends CMAWebhookResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      cMAWebhookResponse0.url = "ZZ/";
      String string0 = cMAWebhookResponse0.getUrl();
      assertEquals("ZZ/", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      cMAWebhookResponse0.url = ", headers = ";
      cMAWebhookResponse0.url = ", headers = ";
      cMAWebhookResponse0.url = "i3";
      cMAWebhookResponse0.url = "";
      String string0 = cMAWebhookResponse0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      Integer integer0 = Integer.valueOf(0);
      cMAWebhookResponse0.statusCode = integer0;
      Integer integer1 = cMAWebhookResponse0.getStatusCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      Integer integer0 = Integer.getInteger((String) null, 1);
      cMAWebhookResponse0.statusCode = integer0;
      Integer integer1 = cMAWebhookResponse0.getStatusCode();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      Integer integer0 = Integer.valueOf((-1));
      cMAWebhookResponse0.statusCode = integer0;
      Integer integer1 = cMAWebhookResponse0.getStatusCode();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cMAWebhookResponse0.headers = (Map<String, String>) hashMap0;
      Map<String, String> map0 = cMAWebhookResponse0.getHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cMAWebhookResponse0.headers = (Map<String, String>) hashMap0;
      hashMap0.put("", (String) null);
      Map<String, String> map0 = cMAWebhookResponse0.getHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      cMAWebhookResponse0.body = "ZZ/";
      String string0 = cMAWebhookResponse0.getBody();
      assertEquals("ZZ/", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      cMAWebhookResponse0.body = "";
      String string0 = cMAWebhookResponse0.getBody();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      Integer integer0 = cMAWebhookResponse0.getStatusCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      Map<String, String> map0 = cMAWebhookResponse0.getHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      String string0 = cMAWebhookResponse0.getBody();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      String string0 = cMAWebhookResponse0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAWebhookResponse cMAWebhookResponse0 = new CMAWebhookResponse();
      String string0 = cMAWebhookResponse0.toString();
      assertEquals("CMAWebhookResponse { body = null, headers = null, statusCode = null, url = null }", string0);
  }
}
