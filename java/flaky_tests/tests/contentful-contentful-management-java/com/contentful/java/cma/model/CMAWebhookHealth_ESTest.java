/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:59:48 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAWebhookHealth;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAWebhookHealth_ESTest extends CMAWebhookHealth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CMAWebhookHealth.CMAWebhookHealthCall cMAWebhookHealth_CMAWebhookHealthCall0 = new CMAWebhookHealth.CMAWebhookHealthCall();
      Integer integer0 = Integer.valueOf((-3418));
      cMAWebhookHealth_CMAWebhookHealthCall0.total = integer0;
      Integer integer1 = cMAWebhookHealth_CMAWebhookHealthCall0.getHealthy();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CMAWebhookHealth.CMAWebhookHealthCall cMAWebhookHealth_CMAWebhookHealthCall0 = new CMAWebhookHealth.CMAWebhookHealthCall();
      Integer integer0 = Integer.valueOf((-3418));
      cMAWebhookHealth_CMAWebhookHealthCall0.total = integer0;
      Integer integer1 = cMAWebhookHealth_CMAWebhookHealthCall0.getTotal();
      assertEquals((-3418), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CMAWebhookHealth.CMAWebhookHealthCall cMAWebhookHealth_CMAWebhookHealthCall0 = new CMAWebhookHealth.CMAWebhookHealthCall();
      CMAWebhookHealth cMAWebhookHealth0 = new CMAWebhookHealth();
      cMAWebhookHealth0.calls = cMAWebhookHealth_CMAWebhookHealthCall0;
      CMAWebhookHealth.CMAWebhookHealthCall cMAWebhookHealth_CMAWebhookHealthCall1 = cMAWebhookHealth0.getCalls();
      assertNull(cMAWebhookHealth_CMAWebhookHealthCall1.getTotal());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CMAWebhookHealth cMAWebhookHealth0 = new CMAWebhookHealth();
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink(cMAWebhookHealth0);
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink1);
      cMAWebhookHealth0.system = cMASystem1;
      // Undeclared exception!
      cMAWebhookHealth0.toString();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CMAWebhookHealth cMAWebhookHealth0 = new CMAWebhookHealth();
      CMAWebhookHealth.CMAWebhookHealthCall cMAWebhookHealth_CMAWebhookHealthCall0 = cMAWebhookHealth0.getCalls();
      assertNull(cMAWebhookHealth_CMAWebhookHealthCall0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CMAWebhookHealth.CMAWebhookHealthCall cMAWebhookHealth_CMAWebhookHealthCall0 = new CMAWebhookHealth.CMAWebhookHealthCall();
      String string0 = cMAWebhookHealth_CMAWebhookHealthCall0.toString();
      assertEquals("CMAWebhookHealthCall {healthy = null, total = null}", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CMAWebhookHealth cMAWebhookHealth0 = new CMAWebhookHealth();
      String string0 = cMAWebhookHealth0.toString();
      assertEquals("CMAWebhookHealth { CMAResource { system = CMASystem { type = Webhook } } calls = null }", string0);
  }
}
