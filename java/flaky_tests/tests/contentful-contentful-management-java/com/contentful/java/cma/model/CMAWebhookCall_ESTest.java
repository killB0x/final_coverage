/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:53:20 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAType;
import com.contentful.java.cma.model.CMAVisibility;
import com.contentful.java.cma.model.CMAWebhookCall;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAWebhookCall_ESTest extends CMAWebhookCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      cMAWebhookCall0.url = "@y7";
      String string0 = cMAWebhookCall0.getUrl();
      assertEquals("@y7", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setSpaceId("");
      cMAWebhookCall1.url = "";
      String string0 = cMAWebhookCall1.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setVisibility(cMAVisibility0);
      Integer integer0 = Integer.valueOf(0);
      cMAWebhookCall1.statusCode = integer0;
      Integer integer1 = cMAWebhookCall0.getStatusCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      Integer integer0 = Integer.getInteger("", 835);
      cMAWebhookCall0.statusCode = integer0;
      Integer integer1 = cMAWebhookCall0.getStatusCode();
      assertEquals(835, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      Integer integer0 = Integer.getInteger("yE", (-371));
      cMAWebhookCall0.statusCode = integer0;
      Integer integer1 = cMAWebhookCall0.getStatusCode();
      assertEquals((-371), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setId("9|");
      cMAWebhookCall1.responseAt = "Organization";
      String string0 = cMAWebhookCall1.getResponseAt();
      assertEquals("Organization", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setEnvironmentId("");
      cMAWebhookCall1.responseAt = "";
      String string0 = cMAWebhookCall0.getResponseAt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      cMAWebhookCall0.requestAt = "86BS&";
      String string0 = cMAWebhookCall0.getRequestAt();
      assertEquals("86BS&", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      cMAWebhookCall0.requestAt = "";
      String string0 = cMAWebhookCall0.getRequestAt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setVisibility(cMAVisibility0);
      cMAWebhookCall1.eventType = "xif";
      String string0 = cMAWebhookCall1.getEventType();
      assertEquals("xif", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setEnvironmentId((String) null);
      cMAWebhookCall1.eventType = "";
      String string0 = cMAWebhookCall0.getEventType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setVisibility(cMAVisibility0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      cMAWebhookCall1.errors = (List<String>) linkedList0;
      List<String> list0 = cMAWebhookCall1.getErrors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      CMAWebhookCall cMAWebhookCall1 = cMAWebhookCall0.setVisibility(cMAVisibility0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      cMAWebhookCall1.errors = (List<String>) linkedList0;
      linkedList0.offerLast("");
      List<String> list0 = cMAWebhookCall1.getErrors();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMASystem cMASystem0 = cMAWebhookCall0.system;
      CMALink cMALink0 = new CMALink(cMAWebhookCall0);
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      cMASystem0.setSpace(cMALink1);
      // Undeclared exception!
      try { 
        cMAWebhookCall0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      CMASystem cMASystem0 = cMAWebhookCall0.system;
      CMAType cMAType0 = CMAType.Role;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      cMASystem1.publishedBy = cMALink0;
      cMALink0.setSystem(cMASystem0);
      // Undeclared exception!
      try { 
        cMAWebhookCall0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      cMAWebhookCall0.system = null;
      // Undeclared exception!
      try { 
        cMAWebhookCall0.setSpaceId("[hI-c9~.ng0+@8:wph");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      String string0 = cMAWebhookCall0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      String string0 = cMAWebhookCall0.getRequestAt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      String string0 = cMAWebhookCall0.getResponseAt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      Integer integer0 = cMAWebhookCall0.getStatusCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      List<String> list0 = cMAWebhookCall0.getErrors();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      String string0 = cMAWebhookCall0.getEventType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CMAWebhookCall cMAWebhookCall0 = new CMAWebhookCall();
      String string0 = cMAWebhookCall0.toString();
      assertEquals("CMAWebhookCall { CMAResource { system = CMASystem { type = WebhookCallOverview } } errors = null, eventType = null, requestAt = null, responseAt = null, statusCode = null, url = null }", string0);
  }
}
