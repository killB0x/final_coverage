/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:43:44 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.Constants;
import com.contentful.java.cma.model.CMAField;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAField_ESTest extends CMAField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setRequired(true);
      cMAField0.setValidations((List<Map<String, Object>>) null);
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setLocalized(true);
      LinkedList<Map<String, Object>> linkedList0 = new LinkedList<Map<String, Object>>();
      cMAField1.setValidations(linkedList0);
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setRequired(true);
      Constants.CMAFieldType constants_CMAFieldType0 = Constants.CMAFieldType.Symbol;
      cMAField1.setType(constants_CMAFieldType0);
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.localized = true;
      Constants.CMAFieldType constants_CMAFieldType0 = Constants.CMAFieldType.Boolean;
      CMAField cMAField1 = cMAField0.setType(constants_CMAFieldType0);
      assertNull(cMAField1.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setLocalized(true);
      cMAField1.setRequired(false);
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setRequired(true);
      cMAField0.setOmitted(false);
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLocalized(true);
      cMAField0.setOmitted(true);
      assertTrue(cMAField0.isOmitted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setRequired(true);
      cMAField1.setName("");
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setLocalized(true);
      cMAField1.setName("");
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setRequired(true);
      cMAField1.setLocalized(true);
      assertTrue(cMAField1.isLocalized());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setLocalized(false);
      assertFalse(cMAField1.isLocalized());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setRequired(true);
      cMAField0.setLinkType("CMAField { arrayItems = ");
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLocalized(true);
      cMAField0.setLinkType("$VALUES");
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setRequired(true);
      cMAField1.setId("B{g!_]f,cImIZ G.L^_");
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLocalized(true);
      cMAField0.setId("$VALUES");
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setRequired(true);
      cMAField0.setDisabled(true);
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLocalized(true);
      cMAField0.setDisabled(true);
      assertTrue(cMAField0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      CMAField cMAField1 = cMAField0.setRequired(true);
      cMAField1.setArrayItems(hashMap0);
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      cMAField0.setLocalized(true);
      cMAField0.setArrayItems(hashMap0);
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setRequired(true);
      LinkedList<Map<String, Object>> linkedList0 = new LinkedList<Map<String, Object>>();
      cMAField0.setAllowedResources(linkedList0);
      assertTrue(cMAField0.isRequired());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.localized = true;
      CMAField cMAField1 = cMAField0.setAllowedResources((List<Map<String, Object>>) null);
      assertSame(cMAField1, cMAField0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setRequired(true);
      boolean boolean0 = cMAField0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setOmitted(true);
      cMAField0.isOmitted();
      assertTrue(cMAField0.isOmitted());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLocalized(true);
      boolean boolean0 = cMAField0.isLocalized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setDisabled(true);
      cMAField0.isDisabled();
      assertTrue(cMAField0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      LinkedList<Map<String, Object>> linkedList0 = new LinkedList<Map<String, Object>>();
      cMAField0.validations = (List<Map<String, Object>>) linkedList0;
      List<Map<String, Object>> list0 = cMAField0.getValidations();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      LinkedList<Map<String, Object>> linkedList0 = new LinkedList<Map<String, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      linkedList0.addFirst(hashMap0);
      cMAField0.setValidations(linkedList0);
      List<Map<String, Object>> list0 = cMAField0.getValidations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      Constants.CMAFieldType constants_CMAFieldType0 = Constants.CMAFieldType.Location;
      cMAField0.setType(constants_CMAFieldType0);
      Constants.CMAFieldType constants_CMAFieldType1 = cMAField0.getType();
      assertEquals(Constants.CMAFieldType.Location, constants_CMAFieldType1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setName("%r");
      String string0 = cMAField0.getName();
      assertEquals("%r", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setName("");
      String string0 = cMAField0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLinkType("com.contentful.java.cma.model.CMAField");
      String string0 = cMAField0.getLinkType();
      assertEquals("com.contentful.java.cma.model.CMAField", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setLinkType("");
      String string0 = cMAField0.getLinkType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setId("#ST.J\"bWF");
      String string0 = cMAField1.getId();
      assertEquals("#ST.J\"bWF", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.setId("");
      String string0 = cMAField0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      cMAField0.setArrayItems(hashMap0);
      Map<String, Object> map0 = cMAField0.getArrayItems();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("com.contentful.java.cma.model.CMAField", (Object) null);
      CMAField cMAField1 = cMAField0.setArrayItems(hashMap0);
      Map<String, Object> map0 = cMAField1.getArrayItems();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      boolean boolean0 = cMAField0.isLocalized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      cMAField0.getType();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      boolean boolean0 = cMAField0.isRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      String string0 = cMAField0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      List<Map<String, Object>> list0 = cMAField0.getValidations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      Boolean boolean0 = cMAField0.isOmitted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      Boolean boolean0 = cMAField0.isDisabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      String string0 = cMAField0.getLinkType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      String string0 = cMAField0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      Map<String, Object> map0 = cMAField0.getArrayItems();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      LinkedList<Map<String, Object>> linkedList0 = new LinkedList<Map<String, Object>>();
      CMAField cMAField1 = cMAField0.setAllowedResources(linkedList0);
      List<Map<String, Object>> list0 = cMAField1.getAllowedResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      CMAField cMAField1 = cMAField0.setLocalized(true);
      LinkedList<Map<String, Object>> linkedList0 = new LinkedList<Map<String, Object>>();
      cMAField1.allowedResources = (List<Map<String, Object>>) linkedList0;
      linkedList0.add((Map<String, Object>) null);
      cMAField1.getAllowedResources();
      assertTrue(cMAField0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      // Undeclared exception!
      try { 
        cMAField0.setArrayItems((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      String string0 = cMAField0.toString();
      assertEquals("CMAField { arrayItems = null, disabled = false, id = null, linkType = null, localized = false, name = null, omitted = false, required = false, type = null, validations = null }", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CMAField cMAField0 = new CMAField();
      List<Map<String, Object>> list0 = cMAField0.getAllowedResources();
      assertNull(list0);
  }
}
