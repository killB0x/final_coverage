/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:45:44 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.contentful.java.cma.model.CMAUiExtensionParameter;
import com.contentful.java.cma.model.CMAUiExtensionParameterType;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAUiExtensionParameter_ESTest extends CMAUiExtensionParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setRequired(true);
      CMAUiExtensionParameterType cMAUiExtensionParameterType0 = CMAUiExtensionParameterType.Number;
      cMAUiExtensionParameter0.setType(cMAUiExtensionParameterType0);
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setRequired(true);
      cMAUiExtensionParameter0.setName("Ypu;I&_`,0^XfD");
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setRequired(true);
      cMAUiExtensionParameter0.setId("Jv^zfpzL0pM");
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setRequired(true);
      cMAUiExtensionParameter0.setDescription("L2>!?=MY5FA6lXk~u");
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setRequired(true);
      cMAUiExtensionParameter0.setDefaultValue((String) null);
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setRequired(true);
      boolean boolean0 = cMAUiExtensionParameter0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameterType cMAUiExtensionParameterType0 = CMAUiExtensionParameterType.Enum;
      cMAUiExtensionParameter0.type = cMAUiExtensionParameterType0;
      CMAUiExtensionParameterType cMAUiExtensionParameterType1 = cMAUiExtensionParameter0.getType();
      assertEquals(CMAUiExtensionParameterType.Enum, cMAUiExtensionParameterType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.addOption("");
      List<Object> list0 = cMAUiExtensionParameter0.getOptions();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setName("CMAUiExtensionParameter { id = , name = null, description = *, type = Number, required = false, default = , options = [], labels = [{=}, {=}] }");
      String string0 = cMAUiExtensionParameter0.getName();
      assertEquals("CMAUiExtensionParameter { id = , name = null, description = *, type = Number, required = false, default = , options = [], labels = [{=}, {=}] }", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setName("");
      String string0 = cMAUiExtensionParameter0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.addLabel("$", "$");
      List<Map<String, String>> list0 = cMAUiExtensionParameter0.getLabels();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.setId("$");
      String string0 = cMAUiExtensionParameter1.getId();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setId("");
      String string0 = cMAUiExtensionParameter0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.description = ")Y;C";
      String string0 = cMAUiExtensionParameter0.getDescription();
      assertEquals(")Y;C", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.setDescription("");
      String string0 = cMAUiExtensionParameter0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.addLabel("", "Ar!:=+8lNC");
      cMAUiExtensionParameter1.defaultValue = "Ar!:=+8lNC";
      String string0 = cMAUiExtensionParameter1.getDefaultValue();
      assertEquals("Ar!:=+8lNC", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.setDefaultValue("<Tm+/#v{Y6(%");
      cMAUiExtensionParameter1.defaultValue = "";
      String string0 = cMAUiExtensionParameter0.getDefaultValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.setRequired(true);
      cMAUiExtensionParameter1.addOption("");
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.setRequired(true);
      cMAUiExtensionParameter1.addLabel((String) null, "{3");
      assertTrue(cMAUiExtensionParameter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      cMAUiExtensionParameter0.getType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      String string0 = cMAUiExtensionParameter0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      List<Object> list0 = cMAUiExtensionParameter0.getOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      List<Map<String, String>> list0 = cMAUiExtensionParameter0.getLabels();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      String string0 = cMAUiExtensionParameter0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      String string0 = cMAUiExtensionParameter0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      String string0 = cMAUiExtensionParameter0.getDefaultValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      boolean boolean0 = cMAUiExtensionParameter0.isRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.setRequired(false);
      assertFalse(cMAUiExtensionParameter1.isRequired());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      CMAUiExtensionParameterType cMAUiExtensionParameterType0 = CMAUiExtensionParameterType.Number;
      CMAUiExtensionParameter cMAUiExtensionParameter1 = cMAUiExtensionParameter0.setType(cMAUiExtensionParameterType0);
      assertEquals(CMAUiExtensionParameterType.Number, cMAUiExtensionParameter1.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CMAUiExtensionParameter cMAUiExtensionParameter0 = new CMAUiExtensionParameter();
      String string0 = cMAUiExtensionParameter0.toString();
      assertEquals("CMAUiExtensionParameter { id = null, name = null, description = null, type = null, required = false, default = null, options = [], labels = [] }", string0);
  }
}
