/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:51:54 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.contentful.java.cma.model.RateLimits;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RateLimits_ESTest extends RateLimits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RateLimits.DefaultParser rateLimits_DefaultParser0 = new RateLimits.DefaultParser();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("X-Contentful-RateLimit-Hour-Limit", (List<String>) null);
      RateLimits rateLimits0 = rateLimits_DefaultParser0.parse(hashMap0);
      assertEquals(0, rateLimits0.getReset());
      assertEquals(0, rateLimits0.getSecondRemaining());
      assertEquals(0, rateLimits0.getHourRemaining());
      assertEquals(0, rateLimits0.getSecondLimit());
      assertEquals(0, rateLimits0.getHourLimit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setSecondRemaining(1811);
      RateLimits rateLimits0 = rateLimits_Builder0.limits;
      int int0 = rateLimits0.getSecondRemaining();
      assertEquals(1811, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      rateLimits_Builder0.setSecondRemaining((-645));
      int int0 = rateLimits0.getSecondRemaining();
      assertEquals((-645), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setSecondLimit(1);
      RateLimits rateLimits0 = rateLimits_Builder0.limits;
      int int0 = rateLimits0.getSecondLimit();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      RateLimits rateLimits0 = new RateLimits();
      rateLimits_Builder0.limits = rateLimits0;
      rateLimits_Builder0.setSecondLimit((-1674));
      int int0 = rateLimits0.getSecondLimit();
      assertEquals((-1674), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setReset(4502);
      int int0 = rateLimits_Builder0.limits.getReset();
      assertEquals(4502, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setReset((-358));
      int int0 = rateLimits_Builder0.limits.getReset();
      assertEquals((-358), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setHourRemaining(3969);
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      int int0 = rateLimits0.getHourRemaining();
      assertEquals(3969, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setHourRemaining((-1));
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      int int0 = rateLimits0.getHourRemaining();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      rateLimits_Builder0.setHourLimit(1);
      RateLimits rateLimits0 = rateLimits_Builder0.limits;
      int int0 = rateLimits0.getHourLimit();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      rateLimits_Builder0.setHourLimit((-1));
      int int0 = rateLimits0.getHourLimit();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RateLimits.DefaultParser rateLimits_DefaultParser0 = new RateLimits.DefaultParser();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("X-Contentful-RateLimit-Second-Limit", (List<String>) null);
      RateLimits rateLimits0 = rateLimits_DefaultParser0.parse(hashMap0);
      assertEquals(0, rateLimits0.getSecondLimit());
      assertEquals(0, rateLimits0.getReset());
      assertEquals(0, rateLimits0.getHourLimit());
      assertEquals(0, rateLimits0.getSecondRemaining());
      assertEquals(0, rateLimits0.getHourRemaining());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RateLimits.DefaultParser rateLimits_DefaultParser0 = new RateLimits.DefaultParser();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RateLimits rateLimits0 = rateLimits_DefaultParser0.parse(hashMap0);
      int int0 = rateLimits0.getSecondRemaining();
      assertEquals(0, rateLimits0.getSecondLimit());
      assertEquals(0, int0);
      assertEquals(0, rateLimits0.getReset());
      assertEquals(0, rateLimits0.getHourLimit());
      assertEquals(0, rateLimits0.getHourRemaining());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      int int0 = rateLimits0.getHourRemaining();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      int int0 = rateLimits0.getHourLimit();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RateLimits.Builder rateLimits_Builder0 = new RateLimits.Builder();
      RateLimits rateLimits0 = rateLimits_Builder0.build();
      int int0 = rateLimits0.getReset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RateLimits.DefaultParser rateLimits_DefaultParser0 = new RateLimits.DefaultParser();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      RateLimits rateLimits0 = rateLimits_DefaultParser0.parse(hashMap0);
      int int0 = rateLimits0.getSecondLimit();
      assertEquals(0, rateLimits0.getReset());
      assertEquals(0, int0);
      assertEquals(0, rateLimits0.getHourLimit());
      assertEquals(0, rateLimits0.getSecondRemaining());
      assertEquals(0, rateLimits0.getHourRemaining());
  }
}
