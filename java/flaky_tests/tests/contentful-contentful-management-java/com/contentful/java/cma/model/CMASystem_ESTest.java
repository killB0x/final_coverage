/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:28:34 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMAResource;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAType;
import com.contentful.java.cma.model.CMAVisibility;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMASystem_ESTest extends CMASystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNull(cMASystem0.getLinkType());
      
      cMASystem0.publishedAt = "";
      cMASystem0.getPublishedAt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      Integer integer0 = new Integer(1);
      cMASystem0.updatedAt = "";
      cMASystem0.archivedVersion = integer0;
      cMASystem0.getArchivedVersion();
      cMASystem0.getArchivedVersion();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      assertNull(cMALink0.getVisibility());
      
      CMALink cMALink1 = cMALink0.setId("id");
      cMASystem0.setUrn("");
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink1);
      CMAType cMAType0 = CMAType.WebhookDefinition;
      cMALink1.setId("/tXReN");
      cMALink0.setId("tJlQ)8KA");
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      Integer integer0 = new Integer(13);
      cMASystem2.publishedCounter = integer0;
      cMASystem2.getPublishedCounter();
      cMASystem2.toString();
      cMASystem0.getPublishedCounter();
      cMASystem0.setType(cMAType0);
      cMASystem2.setId("CMASystem { type = WebhookDefinition, space = CMALink { CMAResource { system = CMASystem { type = Link, id = tJlQ)8KA } } }, urn = , publishedCounter = 13 }");
      Integer integer1 = new Integer((-3468));
      cMASystem0.setVersion(integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      cMASystem0.publishedAt = "cEl";
      cMASystem0.getUrn();
      cMASystem0.getPublishedAt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setId("Tb]G@LB(+<7FN");
      CMAType cMAType0 = CMAType.Tag;
      CMAResource cMAResource0 = new CMAResource(cMAType0);
      CMALink cMALink0 = new CMALink(cMAResource0);
      cMASystem0.urn = "";
      CMASystem cMASystem2 = cMASystem1.setContentType(cMALink0);
      cMALink0.toString();
      CMASystem cMASystem3 = cMASystem2.setSpace(cMALink0);
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      CMALink cMALink1 = cMALink0.setVisibility(cMAVisibility0);
      CMASystem cMASystem4 = cMASystem3.setLinkType(cMAType0);
      cMASystem4.toString();
      CMASystem cMASystem5 = cMASystem1.setType(cMAType0);
      cMASystem2.setContentType(cMALink1);
      cMASystem5.updatedAt = "Tb]G@LB(+<7FN";
      cMASystem0.getUrn();
      cMASystem3.toString();
      CMAType cMAType1 = CMAType.ApiKey;
      cMASystem1.setType(cMAType1);
      cMASystem5.setId(",]N;");
      cMASystem0.setLinkType(cMAType0);
      cMASystem5.setLinkType(cMAType0);
      cMASystem2.getCreatedAt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.PreviewApiKey;
      CMASystem cMASystem1 = cMASystem0.setType(cMAType0);
      Integer integer0 = new Integer((-1284));
      CMASystem cMASystem2 = cMASystem1.setVersion(integer0);
      CMAType cMAType1 = CMAType.OrganizationPeriodicUsage;
      CMALink cMALink0 = new CMALink(cMAType1);
      CMALink cMALink1 = new CMALink(cMALink0);
      CMALink cMALink2 = cMALink1.setSpaceId("publishedVersion");
      Integer integer1 = new Integer(0);
      CMAType cMAType2 = CMAType.UiExtension;
      cMASystem2.setType(cMAType2);
      CMALink cMALink3 = cMALink2.setVersion(integer1);
      cMALink2.toString();
      CMASystem cMASystem3 = cMASystem2.setSpace(cMALink3);
      CMAType cMAType3 = CMAType.Link;
      CMASystem cMASystem4 = cMASystem3.setLinkType(cMAType3);
      cMASystem4.publishedCounter = integer0;
      cMASystem1.updatedBy = cMALink0;
      Integer integer2 = new Integer((-1));
      cMALink0.setVersion(integer2);
      cMASystem4.environmentStatus = cMALink2;
      CMAType cMAType4 = CMAType.User;
      cMASystem4.type = cMAType4;
      CMASystem cMASystem5 = cMASystem4.setSpace(cMALink2);
      cMASystem5.getUrn();
      CMASystem cMASystem6 = cMASystem0.setSpace(cMALink0);
      cMASystem2.getPublishedCounter();
      cMASystem6.getCreatedAt();
      cMASystem1.getUpdatedAt();
      cMASystem2.getPublishedAt();
      cMASystem5.getCreatedAt();
      CMAType cMAType5 = CMAType.OrganizationPeriodicUsage;
      cMASystem6.setLinkType(cMAType5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      cMASystem0.publishedBy = cMALink0;
      cMASystem1.updatedBy = cMASystem0.publishedBy;
      CMAType cMAType0 = CMAType.Locale;
      cMASystem1.id = null;
      cMALink0.setSpaceId("NPf0'4");
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      cMASystem2.getType();
      CMAType cMAType1 = CMAType.UiExtension;
      CMASystem cMASystem3 = cMASystem2.setType(cMAType1);
      CMAType cMAType2 = CMAType.Array;
      cMASystem3.type = cMAType2;
      cMASystem3.toString();
      cMASystem2.getVisibility();
      cMASystem2.contentType = cMALink0;
      CMASystem cMASystem4 = cMASystem2.setVersion((Integer) null);
      cMASystem2.createdAt = "\"s%QR&:O;";
      cMASystem4.visibility = null;
      cMASystem2.getVisibility();
      cMASystem4.getUrn();
      cMASystem1.publishedAt = "publishedBy";
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem2.setVisibility(cMAVisibility0);
      cMASystem4.getFirstPublishedAt();
      CMAType cMAType3 = CMAType.User;
      CMASystem cMASystem5 = cMASystem4.setType(cMAType3);
      cMASystem5.publishedBy = cMALink0;
      CMALink cMALink1 = new CMALink(cMALink0);
      cMASystem2.setSpace(cMALink1);
      cMASystem0.setContentType(cMALink0);
      cMASystem4.getOrganization();
      cMASystem2.getCreatedAt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      cMASystem0.createdBy = cMALink0;
      CMAType cMAType0 = CMAType.ApiKey;
      cMASystem0.setLinkType(cMAType0);
      cMASystem0.getCreatedBy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      Integer integer0 = new Integer(0);
      cMASystem0.archivedVersion = integer0;
      cMASystem0.getArchivedVersion();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      CMAType cMAType0 = CMAType.Locale;
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      cMASystem0.getType();
      cMASystem2.toString();
      cMASystem2.getVisibility();
      CMASystem cMASystem3 = cMASystem2.setVersion((Integer) null);
      cMALink0.setSpaceId("CMASystem { type = Locale, space = CMALink { CMAResource { system = CMASystem { type = Link } } } }");
      CMAType cMAType1 = CMAType.User;
      CMASystem cMASystem4 = cMASystem1.setType(cMAType1);
      cMASystem4.toString();
      cMASystem0.getCreatedBy();
      cMASystem3.getPublishedCounter();
      CMASystem cMASystem5 = cMASystem4.setId("publishedCounter");
      CMASystem cMASystem6 = new CMASystem();
      cMASystem6.getType();
      cMASystem5.getVisibility();
      CMASystem cMASystem7 = cMASystem4.setVersion((Integer) null);
      cMASystem7.getOrganization();
      cMASystem6.getCreatedBy();
      Integer.getInteger("CMASystem { type = User, space = CMALink { CMAResource { system = CMASystem { type = Link, space = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Space, id = CMASystem { type = Locale, space = CMALink { CMAResource { system = CMASystem { type = Link } } } } } } } } } } }");
      Integer integer0 = new Integer((-299));
      cMASystem3.setVersion(integer0);
      cMASystem4.getVersion();
      cMASystem3.getEnvironmentalStatus();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      cMALink0.setSystem(cMASystem0);
      cMALink0.toString();
      cMASystem0.urn = "CMALink { CMAResource { system = CMASystem {  } } }";
      cMASystem0.environment = cMALink0;
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      cMALink0.setEnvironmentId("CMALink { CMAResource { system = CMASystem {  } } }");
      CMAType cMAType0 = CMAType.EditorInterface;
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      cMALink0.setId("$VALUES");
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem1.setVisibility(cMAVisibility0);
      cMASystem1.getVersion();
      CMASystem cMASystem3 = cMASystem1.setId((String) null);
      cMASystem3.urn = "";
      CMAType cMAType1 = CMAType.Role;
      CMASystem cMASystem4 = cMASystem0.setType(cMAType1);
      Integer integer0 = new Integer((-2400));
      cMASystem4.archivedVersion = integer0;
      cMASystem0.getCreatedAt();
      Integer integer1 = new Integer((-2400));
      cMASystem0.version = integer1;
      cMASystem0.getPublishedCounter();
      CMASystem cMASystem5 = cMASystem0.setContentType(cMALink0);
      CMAType cMAType2 = CMAType.EditorInterface;
      cMASystem0.setType(cMAType2);
      cMASystem0.getPublishedCounter();
      cMASystem5.getUpdatedAt();
      cMASystem0.getArchivedVersion();
      cMASystem5.getPublishedAt();
      cMASystem4.setLinkType(cMAType1);
      cMASystem2.setVersion((Integer) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink0);
      cMASystem1.organization = cMALink0;
      cMASystem1.setContentType(cMALink0);
      cMASystem0.getOrganization();
      cMASystem1.getArchivedVersion();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      CMAType cMAType0 = CMAType.WebhookCallOverview;
      CMASystem cMASystem2 = cMASystem1.setLinkType(cMAType0);
      cMASystem1.updatedBy = cMALink0;
      Integer integer0 = new Integer(24);
      cMASystem2.firstPublishedAt = "R;;K,?w";
      CMASystem cMASystem3 = cMASystem2.setVersion(integer0);
      cMALink0.toString();
      cMASystem3.urn = "";
      cMASystem1.urn = null;
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMALink0.setVisibility(cMAVisibility0);
      cMASystem1.getUrn();
      cMASystem0.toString();
      cMASystem1.getPublishedAt();
      cMASystem1.publishedVersion = integer0;
      cMALink0.setSystem(cMASystem2);
      CMALink cMALink1 = new CMALink(cMALink0);
      cMASystem1.environmentStatus = cMALink1;
      cMASystem0.getUrn();
      cMASystem0.getPublishedAt();
      cMALink1.setEnvironmentId("Asset");
      CMASystem cMASystem4 = cMASystem2.setVersion(integer0);
      CMAType cMAType1 = CMAType.Entry;
      cMASystem4.type = cMAType1;
      cMASystem3.getFirstPublishedAt();
      cMASystem3.getCreatedAt();
      cMASystem2.getUrn();
      cMASystem1.getCreatedAt();
      cMASystem1.getCreatedBy();
      cMASystem3.getFirstPublishedAt();
      cMASystem0.getEnvironmentalStatus();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      String string0 = cMASystem0.toString();
      assertEquals("CMASystem {  }", string0);
      
      cMASystem0.getFirstPublishedAt();
      cMASystem0.updatedAt = "CMASystem {  }";
      Integer integer0 = new Integer(1);
      cMASystem0.publishedVersion = integer0;
      cMASystem0.getUrn();
      CMASystem cMASystem1 = cMASystem0.setId((String) null);
      cMASystem0.getPublishedCounter();
      cMASystem0.updatedBy = null;
      cMASystem0.getVersion();
      cMASystem0.getFirstPublishedAt();
      cMASystem0.getVersion();
      Integer integer1 = new Integer(1);
      cMASystem0.version = integer1;
      cMASystem0.getUpdatedAt();
      CMASystem cMASystem2 = cMASystem0.setVersion((Integer) null);
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem2.setVisibility(cMAVisibility0);
      cMASystem2.firstPublishedAt = "";
      cMASystem2.getUrn();
      cMASystem2.getPublishedAt();
      cMASystem0.getFirstPublishedAt();
      cMASystem2.getFirstPublishedAt();
      cMASystem2.contentType = null;
      cMASystem1.getOrganization();
      CMAType cMAType0 = CMAType.Asset;
      CMASystem cMASystem3 = cMASystem2.setLinkType(cMAType0);
      cMASystem3.getCreatedBy();
      CMASystem cMASystem4 = cMASystem3.setContentType((CMALink) null);
      cMASystem2.getVersion();
      cMASystem4.getArchivedVersion();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.OrganizationPeriodicUsage;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType0);
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = cMALink0.setVersion((Integer) null);
      CMALink cMALink2 = cMALink1.setId("");
      CMALink cMALink3 = cMALink2.setSystem(cMASystem0);
      cMASystem1.organization = cMALink3;
      CMALink cMALink4 = new CMALink();
      cMALink4.toString();
      cMASystem0.toString();
      cMASystem1.getUpdatedAt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      cMASystem0.publishedBy = cMALink0;
      cMASystem1.updatedBy = cMASystem0.publishedBy;
      CMAType cMAType0 = CMAType.Locale;
      cMASystem1.id = null;
      cMALink0.setSpaceId("NPf0'4");
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      cMASystem2.getType();
      CMAType cMAType1 = CMAType.UiExtension;
      CMASystem cMASystem3 = cMASystem2.setType(cMAType1);
      cMASystem3.updatedAt = ")ZKE%uK'990;Es=*@7B";
      CMAType cMAType2 = CMAType.Array;
      cMASystem3.type = cMAType2;
      cMASystem3.toString();
      cMASystem2.getVisibility();
      cMASystem1.getPublishedVersion();
      cMASystem0.getUpdatedBy();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = new CMALink(cMALink0);
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink1);
      CMAType cMAType0 = CMAType.Role;
      CMASystem cMASystem2 = cMASystem1.setLinkType(cMAType0);
      CMASystem cMASystem3 = cMASystem1.setType(cMAType0);
      Integer integer0 = new Integer(0);
      CMASystem cMASystem4 = cMASystem2.setVersion(integer0);
      cMASystem3.type = cMAType0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      CMALink cMALink2 = cMALink1.setVersion(integer2);
      Integer integer3 = new Integer(0);
      cMALink0.setVersion(integer1);
      CMALink cMALink3 = cMALink2.setId((String) null);
      CMAType cMAType1 = CMAType.WebhookCallOverview;
      CMASystem cMASystem5 = cMASystem4.setLinkType(cMAType1);
      CMASystem cMASystem6 = cMASystem2.setId("");
      cMALink3.setSystem(cMASystem6);
      cMASystem4.getId();
      CMASystem cMASystem7 = cMASystem4.setSpace(cMALink3);
      cMASystem7.getLinkType();
      CMAVisibility cMAVisibility0 = CMAVisibility.publicVisibility;
      cMASystem5.setVisibility(cMAVisibility0);
      cMASystem6.getType();
      cMASystem5.getVisibility();
      cMASystem7.getOrganization();
      cMASystem3.getCreatedBy();
      cMASystem0.getVersion();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      Integer integer0 = new Integer((-1916));
      cMASystem0.publishedVersion = integer0;
      Integer integer1 = new Integer(0);
      cMASystem0.publishedCounter = integer1;
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = new CMALink(cMALink0);
      cMALink0.setSpaceId("\"{mFW^h4sLmRg");
      CMALink cMALink2 = cMALink1.setId("\"{mFW^h4sLmRg");
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink2);
      cMASystem1.version = null;
      cMASystem0.contentType = cMALink2;
      CMASystem cMASystem2 = cMASystem1.setContentType(cMALink2);
      cMASystem1.getId();
      CMASystem cMASystem3 = cMASystem1.setId("HAjA0xr~AS}qo7<");
      CMASystem cMASystem4 = cMASystem3.setVersion(cMASystem0.publishedCounter);
      CMASystem cMASystem5 = cMASystem4.setId("\"{mFW^h4sLmRg");
      cMALink2.toString();
      cMASystem3.toString();
      cMASystem2.getCreatedBy();
      cMASystem1.getPublishedCounter();
      cMASystem0.getType();
      cMASystem4.getUpdatedBy();
      cMASystem3.getUpdatedAt();
      cMASystem5.getPublishedVersion();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = new CMALink(cMALink0);
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink1);
      CMAType cMAType0 = CMAType.Role;
      CMASystem cMASystem2 = cMASystem1.setLinkType(cMAType0);
      CMASystem cMASystem3 = cMASystem1.setType(cMAType0);
      Integer integer0 = new Integer(0);
      CMASystem cMASystem4 = cMASystem2.setVersion(integer0);
      Integer integer1 = new Integer((-1993));
      cMALink1.setVersion(integer0);
      Integer integer2 = new Integer(1);
      CMALink cMALink2 = cMALink0.setSpaceId((String) null);
      Integer integer3 = new Integer((-3062));
      CMALink cMALink3 = cMALink2.setVersion(integer3);
      cMALink0.setId((String) null);
      CMAType cMAType1 = CMAType.Entry;
      cMASystem0.setLinkType(cMAType1);
      CMALink cMALink4 = cMALink3.setSystem(cMASystem3);
      cMASystem2.getId();
      CMASystem cMASystem5 = cMASystem3.setSpace(cMALink4);
      cMASystem2.getLinkType();
      CMAVisibility cMAVisibility0 = CMAVisibility.publicVisibility;
      cMASystem1.setVisibility(cMAVisibility0);
      cMASystem5.getType();
      cMASystem0.getVisibility();
      cMASystem5.getOrganization();
      cMASystem1.getCreatedBy();
      cMASystem4.getVersion();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink0);
      cMASystem1.setId("/i&nY/q(ZA/z");
      CMAType cMAType0 = CMAType.Link;
      CMASystem cMASystem2 = cMASystem0.setLinkType(cMAType0);
      cMASystem0.environment = cMALink0;
      CMAType cMAType1 = CMAType.Entry;
      cMALink0.setId("Array");
      CMASystem cMASystem3 = cMASystem1.setLinkType(cMAType1);
      cMASystem3.getEnvironment();
      cMASystem1.getArchivedVersion();
      cMASystem2.toString();
      cMASystem3.setVersion((Integer) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      
      CMAType cMAType0 = CMAType.Upload;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getType());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Upload, cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMASystem cMASystem2 = cMASystem1.setId("");
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getType());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Upload, cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("", cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(CMAType.Upload, cMASystem2.getLinkType());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      Integer integer0 = new Integer(965);
      assertNotNull(integer0);
      assertEquals(965, (int)integer0);
      
      CMASystem cMASystem3 = cMASystem0.setVersion(integer0);
      assertNotNull(cMASystem3);
      assertNull(cMASystem0.getType());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(965, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(CMAType.Upload, cMASystem3.getLinkType());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertEquals("", cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getPublishedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      
      cMASystem1.environment = cMALink0;
      assertNull(cMASystem0.getType());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Upload, cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(965, (int)cMASystem1.getVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertNull(cMASystem1.environment.getSpaceId());
      assertNull(cMASystem1.environment.getVersion());
      assertFalse(cMASystem1.environment.isArchived());
      assertFalse(cMASystem1.environment.isPublished());
      assertEquals("master", cMASystem1.environment.getEnvironmentId());
      assertNull(cMASystem1.environment.getVisibility());
      assertNull(cMASystem1.environment.getId());
      
      CMASystem cMASystem4 = cMASystem0.setId("WVJLU'efLs{ p}w");
      assertNotNull(cMASystem4);
      assertNull(cMASystem0.getType());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem0.getId());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(965, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getType());
      assertEquals(CMAType.Upload, cMASystem4.getLinkType());
      assertEquals("WVJLU'efLs{ p}w", cMASystem4.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      
      CMAType cMAType1 = CMAType.Link;
      CMASystem cMASystem5 = cMASystem2.setLinkType(cMAType1);
      assertNotNull(cMASystem5);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertEquals(CMAType.Link, cMASystem0.getLinkType());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem0.getId());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Link, cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(965, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem1.getId());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.Link, cMASystem2.getLinkType());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(965, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem2.getId());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals("WVJLU'efLs{ p}w", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getType());
      assertEquals(965, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem5.getLinkType());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      
      cMASystem5.version = integer0;
      assertEquals(CMAType.Link, cMASystem0.getLinkType());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem0.getId());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Link, cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(965, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem1.getId());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.Link, cMASystem2.getLinkType());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(965, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem2.getId());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals("WVJLU'efLs{ p}w", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getType());
      assertEquals(965, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem5.getLinkType());
      
      CMAType cMAType2 = CMAType.Webhook;
      CMASystem cMASystem6 = cMASystem0.setLinkType(cMAType2);
      assertNotNull(cMASystem6);
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Webhook, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem0.getId());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(965, (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getType());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getArchivedVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertEquals(CMAType.Webhook, cMASystem6.getLinkType());
      assertEquals("WVJLU'efLs{ p}w", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getVisibility());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertNotSame(cMAType2, cMAType1);
      assertNotSame(cMAType2, cMAType0);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      assertSame(cMASystem6, cMASystem2);
      
      CMALink cMALink1 = cMASystem5.getEnvironment();
      assertNotNull(cMALink1);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType1.equals((Object)cMAType2));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Webhook, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem0.getId());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(965, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem1.getId());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Webhook, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(965, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Webhook, cMASystem2.getLinkType());
      assertEquals("WVJLU'efLs{ p}w", cMASystem2.getId());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals(CMAType.Webhook, cMASystem5.getLinkType());
      assertEquals("WVJLU'efLs{ p}w", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getType());
      assertEquals(965, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertNotSame(cMAType1, cMAType2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMALink1, cMALink0);
      
      Integer integer1 = cMASystem4.getArchivedVersion();
      assertNull(integer1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(965, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Webhook, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("WVJLU'efLs{ p}w", cMASystem0.getId());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(965, (int)cMASystem4.getVersion());
      assertEquals(CMAType.Webhook, cMASystem4.getLinkType());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getType());
      assertEquals("WVJLU'efLs{ p}w", cMASystem4.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem6);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CMASystem cMASystem1 = cMASystem0.setVersion(integer0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMAType cMAType0 = CMAType.Locale;
      CMALink cMALink0 = new CMALink(cMAType0);
      assertNotNull(cMALink0);
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      
      String string0 = cMALink0.toString();
      assertNotNull(string0);
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", string0);
      
      CMALink cMALink1 = new CMALink(cMALink0);
      assertNotNull(cMALink1);
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      
      CMALink cMALink2 = cMALink1.setSystem(cMASystem1);
      assertNotNull(cMALink2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertNull(cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      
      CMASystem cMASystem2 = cMASystem1.setContentType(cMALink2);
      assertNotNull(cMASystem2);
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertNull(cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      CMALink cMALink3 = cMALink2.setId("WebhookCallOverview");
      assertNotNull(cMALink3);
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("WebhookCallOverview", cMALink3.getId());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals(0, (int)cMALink3.getVersion());
      assertNull(cMALink3.getSpaceId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink3);
      assertSame(cMALink3, cMALink2);
      assertSame(cMALink3, cMALink1);
      assertNotSame(cMALink3, cMALink0);
      
      CMAType cMAType1 = CMAType.Entry;
      CMASystem cMASystem3 = cMASystem2.setType(cMAType1);
      assertNotNull(cMASystem3);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Entry, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getLinkType());
      assertEquals(CMAType.Entry, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertEquals("WebhookCallOverview", cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      
      cMASystem2.getLinkType();
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Entry, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem3);
      
      cMASystem0.publishedCounter = integer0;
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      
      CMALink cMALink4 = cMASystem2.getSpace();
      assertNull(cMALink4);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Entry, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem3);
      
      CMALink cMALink5 = cMASystem0.getPublishedBy();
      assertNull(cMALink5);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      
      cMASystem3.publishedBy = cMALink1;
      assertFalse(cMASystem3.publishedBy.isArchived());
      assertEquals(0, (int)cMASystem3.publishedBy.getVersion());
      assertEquals("master", cMASystem3.publishedBy.getEnvironmentId());
      assertFalse(cMASystem3.publishedBy.isPublished());
      assertNull(cMASystem3.publishedBy.getVisibility());
      assertEquals("WebhookCallOverview", cMASystem3.publishedBy.getId());
      assertNull(cMASystem3.publishedBy.getSpaceId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Entry, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertEquals(0, (int)cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getLinkType());
      assertEquals(CMAType.Entry, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertEquals("WebhookCallOverview", cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      
      cMASystem0.getLinkType();
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      
      cMALink2.system = cMASystem2;
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMALink2.system.getPublishedVersion());
      assertEquals(0, (int)cMALink2.system.getPublishedCounter());
      assertNull(cMALink2.system.getVisibility());
      assertNull(cMALink2.system.getCreatedAt());
      assertNull(cMALink2.system.getUpdatedAt());
      assertEquals(0, (int)cMALink2.system.getVersion());
      assertNull(cMALink2.system.getFirstPublishedAt());
      assertEquals(CMAType.Entry, cMALink2.system.getType());
      assertNull(cMALink2.system.getLinkType());
      assertEquals("WebhookCallOverview", cMALink2.system.getId());
      assertNull(cMALink2.system.getArchivedVersion());
      assertNull(cMALink2.system.getUrn());
      assertNull(cMALink2.system.getPublishedAt());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Entry, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      
      cMALink2.system.updatedAt = "CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }";
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertNull(cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertNull(cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      
      CMAType cMAType2 = CMAType.SpaceMembership;
      cMALink2.system.linkType = cMAType2;
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      CMALink cMALink6 = cMALink2.setVersion(integer1);
      assertNotNull(cMALink6);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink6.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMALink6.getVersion());
      assertFalse(cMALink6.isPublished());
      assertFalse(cMALink6.isArchived());
      assertNull(cMALink6.getVisibility());
      assertEquals("master", cMALink6.getEnvironmentId());
      assertEquals("WebhookCallOverview", cMALink6.getId());
      assertNull(cMALink6.getSpaceId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink6, cMALink1);
      assertSame(cMALink6, cMALink3);
      assertNotSame(cMALink6, cMALink0);
      assertSame(cMALink6, cMALink2);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink6);
      assertSame(cMALink2, cMALink3);
      
      String string1 = cMASystem1.getId();
      assertNotNull(string1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(string1.equals((Object)string0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertEquals("WebhookCallOverview", string1);
      
      CMALink cMALink7 = cMASystem3.getEnvironment();
      assertNull(cMALink7);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertFalse(cMAType1.equals((Object)cMAType2));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Entry, cMASystem0.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Entry, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Entry, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals(CMAType.SpaceMembership, cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertEquals(0, (int)cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem3.getLinkType());
      assertEquals(CMAType.Entry, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertEquals("WebhookCallOverview", cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink6);
      assertSame(cMALink2, cMALink3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertNotSame(cMAType1, cMAType2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      
      CMAType cMAType3 = CMAType.SpaceMembership;
      CMASystem cMASystem4 = cMASystem0.setType(cMAType3);
      assertNotNull(cMASystem4);
      assertFalse(cMAType3.equals((Object)cMAType0));
      assertFalse(cMAType3.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem4.getId());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.SpaceMembership, cMASystem4.getType());
      assertEquals(0, (int)cMASystem4.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem4.getLinkType());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType3, cMAType0);
      assertSame(cMAType3, cMAType2);
      assertNotSame(cMAType3, cMAType1);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      
      cMASystem4.linkType = cMAType3;
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem4.getId());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.SpaceMembership, cMASystem4.getType());
      assertEquals(0, (int)cMASystem4.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem4.getLinkType());
      
      cMASystem0.getVisibility();
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      
      CMALink cMALink8 = cMALink1.setVisibility((CMAVisibility) null);
      assertNotNull(cMALink8);
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink8.equals((Object)cMALink0));
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink8.getSpaceId());
      assertNull(cMALink8.getVisibility());
      assertEquals("WebhookCallOverview", cMALink8.getId());
      assertEquals("master", cMALink8.getEnvironmentId());
      assertEquals(0, (int)cMALink8.getVersion());
      assertFalse(cMALink8.isArchived());
      assertFalse(cMALink8.isPublished());
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMALink0, cMALink8);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink8);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink8, cMALink6);
      assertSame(cMALink8, cMALink3);
      assertSame(cMALink8, cMALink2);
      assertNotSame(cMALink8, cMALink0);
      assertSame(cMALink8, cMALink1);
      
      CMALink cMALink9 = cMASystem2.getSpace();
      assertNull(cMALink9);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMALink0.equals((Object)cMALink8));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem2.getType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getVisibility());
      assertEquals(CMAType.SpaceMembership, cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMALink0, cMALink8);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink8);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink6);
      assertSame(cMALink2, cMALink8);
      assertSame(cMALink2, cMALink3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      
      cMASystem0.getVisibility();
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      
      CMALink cMALink10 = cMASystem1.getEnvironmentalStatus();
      assertNull(cMALink10);
      assertTrue(integer0.equals((Object)integer1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      
      String string2 = cMASystem2.getUpdatedAt();
      assertNotNull(string2);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMALink0.equals((Object)cMALink8));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getVisibility());
      assertEquals("WebhookCallOverview", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertEquals(0, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getSpaceId());
      assertEquals(0, (int)cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("WebhookCallOverview", cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem2.getType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getVisibility());
      assertEquals(CMAType.SpaceMembership, cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("WebhookCallOverview", cMASystem2.getId());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMALink0, cMALink8);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink8);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertNotSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink6);
      assertSame(cMALink2, cMALink8);
      assertSame(cMALink2, cMALink3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", string2);
      
      CMALink cMALink11 = cMASystem1.getUpdatedBy();
      assertNull(cMALink11);
      assertTrue(integer0.equals((Object)integer1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Locale } } }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getType());
      assertEquals(CMAType.SpaceMembership, cMASystem1.getLinkType());
      assertEquals("WebhookCallOverview", cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      
      CMAType cMAType0 = CMAType.Environment;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      CMASystem cMASystem3 = cMASystem2.setSpace((CMALink) null);
      assertNotNull(cMASystem3);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem3.getLinkType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Environment, cMASystem3.getType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem2.setVisibility(cMAVisibility0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      String string0 = cMASystem3.toString();
      assertNotNull(string0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem3.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Environment, cMASystem3.getType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", string0);
      
      CMASystem cMASystem4 = cMASystem2.setContentType((CMALink) null);
      assertNotNull(cMASystem4);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.Environment, cMASystem4.getType());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem1);
      
      String string1 = cMASystem4.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.Environment, cMASystem4.getType());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem1);
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", string1);
      
      cMASystem4.updatedAt = "CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }";
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getType());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.Environment, cMASystem4.getType());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      
      cMASystem1.publishedAt = "CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }";
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.Environment, cMASystem0.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.Environment, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      
      CMAType cMAType1 = CMAType.WebhookCallOverview;
      cMASystem4.type = cMAType1;
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.WebhookCallOverview, cMASystem4.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      
      Integer integer0 = cMASystem4.getVersion();
      assertNull(integer0);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.WebhookCallOverview, cMASystem4.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem1);
      
      String string2 = cMASystem1.getCreatedAt();
      assertNull(string2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      
      String string3 = cMASystem4.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.WebhookCallOverview, cMASystem4.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem1);
      assertEquals("CMASystem { visibility = privateVisibility, publishedAt = CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }, type = WebhookCallOverview, linkType = Environment, updatedAt = CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment } }", string3);
      
      CMALink cMALink0 = cMASystem4.getUpdatedBy();
      assertNull(cMALink0);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Environment, cMASystem4.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.WebhookCallOverview, cMASystem4.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem1);
      
      CMALink cMALink1 = cMASystem2.getContentType();
      assertNull(cMALink1);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertEquals(CMAType.Environment, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertEquals(CMAType.Environment, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      
      Integer integer1 = cMASystem0.getArchivedVersion();
      assertNull(integer1);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(CMAType.Environment, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      
      CMAType cMAType2 = CMAType.Upload;
      CMASystem cMASystem5 = cMASystem2.setLinkType(cMAType2);
      assertNotNull(cMASystem5);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Upload, cMASystem1.getLinkType());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.Upload, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Upload, cMASystem5.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem5.getVisibility());
      assertNull(cMASystem5.getId());
      assertNull(cMASystem5.getVersion());
      assertEquals(CMAType.WebhookCallOverview, cMASystem5.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getPublishedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertNotSame(cMAType2, cMAType0);
      assertNotSame(cMAType2, cMAType1);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      
      CMALink cMALink2 = cMASystem4.getEnvironmentalStatus();
      assertNull(cMALink2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(CMAType.Upload, cMASystem0.getLinkType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertEquals(CMAType.WebhookCallOverview, cMASystem1.getType());
      assertNull(cMASystem1.getVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Upload, cMASystem1.getLinkType());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.Upload, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedCounter());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getUpdatedAt());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.WebhookCallOverview, cMASystem2.getType());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals(CMAType.Upload, cMASystem4.getLinkType());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.WebhookCallOverview, cMASystem4.getType());
      assertEquals("CMASystem { visibility = privateVisibility, type = Environment, linkType = Environment }", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      cMASystem0.publishedBy = cMALink0;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertFalse(cMASystem0.publishedBy.isArchived());
      assertFalse(cMASystem0.publishedBy.isPublished());
      assertNull(cMASystem0.publishedBy.getVersion());
      assertEquals("master", cMASystem0.publishedBy.getEnvironmentId());
      assertNull(cMASystem0.publishedBy.getVisibility());
      assertNull(cMASystem0.publishedBy.getId());
      assertNull(cMASystem0.publishedBy.getSpaceId());
      
      cMASystem1.updatedBy = cMASystem0.publishedBy;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertFalse(cMASystem0.publishedBy.isArchived());
      assertFalse(cMASystem0.publishedBy.isPublished());
      assertNull(cMASystem0.publishedBy.getVersion());
      assertEquals("master", cMASystem0.publishedBy.getEnvironmentId());
      assertNull(cMASystem0.publishedBy.getVisibility());
      assertNull(cMASystem0.publishedBy.getId());
      assertNull(cMASystem0.publishedBy.getSpaceId());
      assertNull(cMASystem1.updatedBy.getSpaceId());
      assertFalse(cMASystem1.updatedBy.isArchived());
      assertFalse(cMASystem1.updatedBy.isPublished());
      assertNull(cMASystem1.updatedBy.getVisibility());
      assertEquals("master", cMASystem1.updatedBy.getEnvironmentId());
      assertNull(cMASystem1.updatedBy.getVersion());
      assertNull(cMASystem1.updatedBy.getId());
      
      CMAType cMAType0 = CMAType.Locale;
      cMASystem1.id = null;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      
      CMALink cMALink1 = cMALink0.setSpaceId("NPf0'4");
      assertNotNull(cMALink1);
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("NPf0'4", cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(CMAType.Locale, cMASystem0.getType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Locale, cMASystem1.getType());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAType.Locale, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      CMAType cMAType1 = cMASystem2.getType();
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals(CMAType.Locale, cMASystem0.getType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Locale, cMASystem1.getType());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(CMAType.Locale, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMAType0, cMAType1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMAType1, cMAType0);
      assertEquals(CMAType.Locale, cMAType1);
      
      CMAType cMAType2 = CMAType.UiExtension;
      CMASystem cMASystem3 = cMASystem2.setType(cMAType2);
      assertNotNull(cMASystem3);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertEquals(CMAType.UiExtension, cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.UiExtension, cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.UiExtension, cMASystem2.getType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem3.getType());
      assertNull(cMASystem3.getLinkType());
      assertNull(cMASystem3.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType2, cMAType0);
      assertNotSame(cMAType2, cMAType1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      
      CMAType cMAType3 = CMAType.Array;
      cMASystem3.type = cMAType3;
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getLinkType());
      assertEquals(CMAType.Array, cMASystem3.getType());
      assertNull(cMASystem3.getVisibility());
      
      String string0 = cMASystem3.toString();
      assertNotNull(string0);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertFalse(cMAType2.equals((Object)cMAType3));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getLinkType());
      assertEquals(CMAType.Array, cMASystem3.getType());
      assertNull(cMASystem3.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType2, cMAType0);
      assertNotSame(cMAType2, cMAType1);
      assertNotSame(cMAType2, cMAType3);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertEquals("CMASystem { publishedBy = CMALink { CMAResource { system = CMASystem { type = Link, space = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Space, id = NPf0'4 } } } } } }, updatedBy = CMALink { CMAResource { system = CMASystem { type = Link, space = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Space, id = NPf0'4 } } } } } }, type = Array, space = CMALink { CMAResource { system = CMASystem { type = Link, space = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Space, id = NPf0'4 } } } } } } }", string0);
      
      cMASystem2.getVisibility();
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      
      cMASystem2.contentType = cMALink0;
      assertEquals("master", cMASystem2.contentType.getEnvironmentId());
      assertEquals("NPf0'4", cMASystem2.contentType.getSpaceId());
      assertNull(cMASystem2.contentType.getVersion());
      assertFalse(cMASystem2.contentType.isArchived());
      assertFalse(cMASystem2.contentType.isPublished());
      assertNull(cMASystem2.contentType.getVisibility());
      assertNull(cMASystem2.contentType.getId());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      
      CMASystem cMASystem4 = cMASystem2.setVersion((Integer) null);
      assertNotNull(cMASystem4);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Array, cMASystem4.getType());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getLinkType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      
      cMASystem2.createdAt = "\"s%QR&:O;";
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      
      cMASystem4.visibility = null;
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals("\"s%QR&:O;", cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Array, cMASystem4.getType());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getLinkType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      
      cMASystem2.getVisibility();
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      
      String string1 = cMASystem4.getUrn();
      assertNull(string1);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals("\"s%QR&:O;", cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Array, cMASystem4.getType());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getLinkType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      
      cMASystem1.publishedAt = "publishedBy";
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem2.setVisibility(cMAVisibility0);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("publishedBy", cMASystem2.getPublishedAt());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      
      String string2 = cMASystem4.getFirstPublishedAt();
      assertNull(string2);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.Array, cMASystem0.getType());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals("\"s%QR&:O;", cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAType.Array, cMASystem4.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getLinkType());
      assertEquals("publishedBy", cMASystem4.getPublishedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.Array, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("publishedBy", cMASystem2.getPublishedAt());
      assertEquals(CMAType.Array, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      
      CMAType cMAType4 = CMAType.User;
      CMASystem cMASystem5 = cMASystem4.setType(cMAType4);
      assertNotNull(cMASystem5);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType4.equals((Object)cMAType2));
      assertFalse(cMAType4.equals((Object)cMAType1));
      assertFalse(cMAType4.equals((Object)cMAType3));
      assertFalse(cMAType4.equals((Object)cMAType0));
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.User, cMASystem0.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals("\"s%QR&:O;", cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals(CMAType.User, cMASystem4.getType());
      assertNull(cMASystem4.getArchivedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getLinkType());
      assertEquals("publishedBy", cMASystem4.getPublishedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.User, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("publishedBy", cMASystem2.getPublishedAt());
      assertEquals(CMAType.User, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getVersion());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getId());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals(CMAType.User, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals("publishedBy", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem5.getVisibility());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType4, cMAType2);
      assertNotSame(cMAType4, cMAType1);
      assertNotSame(cMAType4, cMAType3);
      assertNotSame(cMAType4, cMAType0);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem2);
      
      String string3 = cMASystem3.getUpdatedAt();
      assertNull(string3);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType2.equals((Object)cMAType4));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertFalse(cMAType2.equals((Object)cMAType3));
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.User, cMASystem0.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.User, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("publishedBy", cMASystem2.getPublishedAt());
      assertEquals(CMAType.User, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals("\"s%QR&:O;", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals(CMAType.User, cMASystem3.getType());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals("publishedBy", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType2, cMAType4);
      assertNotSame(cMAType2, cMAType0);
      assertNotSame(cMAType2, cMAType1);
      assertNotSame(cMAType2, cMAType3);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      
      String string4 = cMASystem3.getId();
      assertNull(string4);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType2.equals((Object)cMAType4));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertFalse(cMAType2.equals((Object)cMAType3));
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.User, cMASystem0.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.User, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("publishedBy", cMASystem2.getPublishedAt());
      assertEquals(CMAType.User, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals("\"s%QR&:O;", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals(CMAType.User, cMASystem3.getType());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals("publishedBy", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertNotSame(cMAType2, cMAType4);
      assertNotSame(cMAType2, cMAType0);
      assertNotSame(cMAType2, cMAType1);
      assertNotSame(cMAType2, cMAType3);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      
      CMALink cMALink2 = cMASystem2.getOrganization();
      assertNull(cMALink2);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.User, cMASystem0.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.User, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals("\"s%QR&:O;", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals("publishedBy", cMASystem2.getPublishedAt());
      assertEquals(CMAType.User, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMAType0, cMAType1);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      
      CMALink cMALink3 = cMASystem1.getPublishedBy();
      assertNotNull(cMALink3);
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.User, cMASystem0.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("NPf0'4", cMALink0.getSpaceId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals("publishedBy", cMASystem1.getPublishedAt());
      assertEquals(CMAType.User, cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertEquals("NPf0'4", cMALink3.getSpaceId());
      assertNull(cMALink3.getVisibility());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink1);
      
      CMALink cMALink4 = cMASystem0.getCreatedBy();
      assertNull(cMALink4);
      assertEquals("publishedBy", cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.User, cMASystem0.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertEquals("\"s%QR&:O;", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      
      cMASystem0.organization = cMALink0;
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMASystem0.organization.getVisibility());
      assertNull(cMASystem0.organization.getVersion());
      assertEquals("master", cMASystem0.organization.getEnvironmentId());
      assertFalse(cMASystem0.organization.isArchived());
      assertFalse(cMASystem0.organization.isPublished());
      assertNull(cMASystem0.organization.getId());
      assertNull(cMASystem0.organization.getSpaceId());
      
      CMASystem cMASystem1 = cMASystem0.setId("publishedAt");
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("publishedAt", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("publishedAt", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMALink cMALink1 = cMASystem1.getUpdatedBy();
      assertNull(cMALink1);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("publishedAt", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("publishedAt", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMAVisibility cMAVisibility0 = CMAVisibility.publicVisibility;
      cMASystem1.setVisibility(cMAVisibility0);
      assertNull(cMASystem0.getUrn());
      assertEquals("publishedAt", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(CMAVisibility.publicVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("publishedAt", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAVisibility.publicVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMASystem cMASystem2 = cMASystem0.setSpace((CMALink) null);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getUrn());
      assertEquals("publishedAt", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(CMAVisibility.publicVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getType());
      assertEquals("publishedAt", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAVisibility.publicVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      
      CMAType cMAType0 = CMAType.Asset;
      CMALink cMALink0 = new CMALink(cMAType0);
      assertNotNull(cMALink0);
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      Integer integer0 = new Integer((-1291));
      assertNotNull(integer0);
      assertEquals((-1291), (int)integer0);
      
      CMASystem cMASystem2 = cMASystem1.setVersion(integer0);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      CMASystem cMASystem3 = cMASystem2.setId("EqP08Jw4|{");
      assertNotNull(cMASystem3);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EqP08Jw4|{", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EqP08Jw4|{", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("EqP08Jw4|{", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals("EqP08Jw4|{", cMASystem3.getId());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getLinkType());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1291), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      
      String string0 = cMALink0.toString();
      assertNotNull(string0);
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", string0);
      
      CMASystem cMASystem4 = cMASystem1.setContentType(cMALink0);
      assertNotNull(cMASystem4);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EqP08Jw4|{", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EqP08Jw4|{", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem4.getType());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertEquals((-1291), (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getLinkType());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals("EqP08Jw4|{", cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedCounter());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      
      CMASystem cMASystem5 = cMASystem2.setId("EditorInterface");
      assertNotNull(cMASystem5);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EditorInterface", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EditorInterface", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("EditorInterface", cMASystem2.getId());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertEquals("EditorInterface", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getType());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      
      CMASystem cMASystem6 = cMASystem5.setSpace(cMALink0);
      assertNotNull(cMASystem6);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EditorInterface", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EditorInterface", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("EditorInterface", cMASystem2.getId());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertEquals("EditorInterface", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getType());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertEquals("EditorInterface", cMASystem6.getId());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertNull(cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      
      CMAType cMAType1 = CMAType.Space;
      CMASystem cMASystem7 = cMASystem6.setType(cMAType1);
      assertNotNull(cMASystem7);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EditorInterface", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertEquals(CMAType.Space, cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertEquals(CMAType.Space, cMASystem1.getType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EditorInterface", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Space, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("EditorInterface", cMASystem2.getId());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals(CMAType.Space, cMASystem5.getType());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertEquals("EditorInterface", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertEquals("EditorInterface", cMASystem6.getId());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals(CMAType.Space, cMASystem6.getType());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem7.getPublishedAt());
      assertNull(cMASystem7.getPublishedVersion());
      assertNull(cMASystem7.getVisibility());
      assertNull(cMASystem7.getUrn());
      assertEquals((-1291), (int)cMASystem7.getVersion());
      assertNull(cMASystem7.getArchivedVersion());
      assertEquals("EditorInterface", cMASystem7.getId());
      assertNull(cMASystem7.getPublishedCounter());
      assertNull(cMASystem7.getCreatedAt());
      assertNull(cMASystem7.getUpdatedAt());
      assertNull(cMASystem7.getLinkType());
      assertEquals(CMAType.Space, cMASystem7.getType());
      assertNull(cMASystem7.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem7, cMASystem2);
      assertSame(cMASystem7, cMASystem3);
      assertSame(cMASystem7, cMASystem5);
      assertSame(cMASystem7, cMASystem1);
      assertSame(cMASystem7, cMASystem4);
      assertSame(cMASystem7, cMASystem6);
      assertSame(cMASystem7, cMASystem0);
      
      cMASystem1.space = cMALink0;
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EditorInterface", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertEquals(CMAType.Space, cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertEquals(CMAType.Space, cMASystem1.getType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EditorInterface", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.space.getSpaceId());
      assertNull(cMASystem1.space.getId());
      assertNull(cMASystem1.space.getVisibility());
      assertEquals("master", cMASystem1.space.getEnvironmentId());
      assertNull(cMASystem1.space.getVersion());
      assertFalse(cMASystem1.space.isArchived());
      assertFalse(cMASystem1.space.isPublished());
      
      cMASystem7.type = cMAType0;
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals("EditorInterface", cMASystem0.getId());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals("EditorInterface", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("EditorInterface", cMASystem2.getId());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertEquals("EditorInterface", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertEquals("EditorInterface", cMASystem6.getId());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem7.getPublishedAt());
      assertNull(cMASystem7.getPublishedVersion());
      assertNull(cMASystem7.getVisibility());
      assertNull(cMASystem7.getUrn());
      assertEquals((-1291), (int)cMASystem7.getVersion());
      assertNull(cMASystem7.getArchivedVersion());
      assertEquals("EditorInterface", cMASystem7.getId());
      assertNull(cMASystem7.getPublishedCounter());
      assertNull(cMASystem7.getCreatedAt());
      assertNull(cMASystem7.getUpdatedAt());
      assertEquals(CMAType.Asset, cMASystem7.getType());
      assertNull(cMASystem7.getLinkType());
      assertNull(cMASystem7.getFirstPublishedAt());
      
      CMASystem cMASystem8 = cMASystem6.setId("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }");
      assertNotNull(cMASystem8);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem8.getPublishedAt());
      assertNull(cMASystem8.getCreatedAt());
      assertNull(cMASystem8.getUrn());
      assertNull(cMASystem8.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem8.getType());
      assertNull(cMASystem8.getPublishedVersion());
      assertNull(cMASystem8.getPublishedCounter());
      assertNull(cMASystem8.getFirstPublishedAt());
      assertNull(cMASystem8.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem8.getId());
      assertNull(cMASystem8.getUpdatedAt());
      assertEquals((-1291), (int)cMASystem8.getVersion());
      assertNull(cMASystem8.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      assertSame(cMASystem8, cMASystem5);
      assertSame(cMASystem8, cMASystem1);
      assertSame(cMASystem8, cMASystem6);
      assertSame(cMASystem8, cMASystem2);
      assertSame(cMASystem8, cMASystem0);
      assertSame(cMASystem8, cMASystem3);
      assertSame(cMASystem8, cMASystem4);
      assertSame(cMASystem8, cMASystem7);
      
      cMASystem5.publishedBy = cMALink0;
      assertNull(cMASystem5.publishedBy.getVersion());
      assertFalse(cMASystem5.publishedBy.isPublished());
      assertFalse(cMASystem5.publishedBy.isArchived());
      assertEquals("master", cMASystem5.publishedBy.getEnvironmentId());
      assertNull(cMASystem5.publishedBy.getVisibility());
      assertNull(cMASystem5.publishedBy.getId());
      assertNull(cMASystem5.publishedBy.getSpaceId());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      
      String string1 = cMASystem7.getUrn();
      assertNull(string1);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem7.getPublishedAt());
      assertNull(cMASystem7.getPublishedVersion());
      assertNull(cMASystem7.getVisibility());
      assertNull(cMASystem7.getUrn());
      assertEquals((-1291), (int)cMASystem7.getVersion());
      assertNull(cMASystem7.getArchivedVersion());
      assertNull(cMASystem7.getPublishedCounter());
      assertNull(cMASystem7.getCreatedAt());
      assertNull(cMASystem7.getUpdatedAt());
      assertEquals(CMAType.Asset, cMASystem7.getType());
      assertNull(cMASystem7.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem7.getId());
      assertNull(cMASystem7.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem7, cMASystem8);
      assertSame(cMASystem7, cMASystem2);
      assertSame(cMASystem7, cMASystem3);
      assertSame(cMASystem7, cMASystem5);
      assertSame(cMASystem7, cMASystem1);
      assertSame(cMASystem7, cMASystem4);
      assertSame(cMASystem7, cMASystem6);
      assertSame(cMASystem7, cMASystem0);
      
      String string2 = cMASystem7.toString();
      assertNotNull(string2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem7.getPublishedAt());
      assertNull(cMASystem7.getPublishedVersion());
      assertNull(cMASystem7.getVisibility());
      assertNull(cMASystem7.getUrn());
      assertEquals((-1291), (int)cMASystem7.getVersion());
      assertNull(cMASystem7.getArchivedVersion());
      assertNull(cMASystem7.getPublishedCounter());
      assertNull(cMASystem7.getCreatedAt());
      assertNull(cMASystem7.getUpdatedAt());
      assertEquals(CMAType.Asset, cMASystem7.getType());
      assertNull(cMASystem7.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem7.getId());
      assertNull(cMASystem7.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem7, cMASystem8);
      assertSame(cMASystem7, cMASystem2);
      assertSame(cMASystem7, cMASystem3);
      assertSame(cMASystem7, cMASystem5);
      assertSame(cMASystem7, cMASystem1);
      assertSame(cMASystem7, cMASystem4);
      assertSame(cMASystem7, cMASystem6);
      assertSame(cMASystem7, cMASystem0);
      assertEquals("CMASystem { publishedBy = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }, type = Asset, version = -1291, space = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }, id = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }, contentType = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } } }", string2);
      
      CMASystem cMASystem9 = cMASystem6.setSpace(cMALink0);
      assertNotNull(cMASystem9);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem9.getPublishedVersion());
      assertNull(cMASystem9.getPublishedCounter());
      assertNull(cMASystem9.getCreatedAt());
      assertNull(cMASystem9.getArchivedVersion());
      assertNull(cMASystem9.getUrn());
      assertNull(cMASystem9.getPublishedAt());
      assertNull(cMASystem9.getFirstPublishedAt());
      assertNull(cMASystem9.getUpdatedAt());
      assertNull(cMASystem9.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem9.getId());
      assertEquals(CMAType.Asset, cMASystem9.getType());
      assertEquals((-1291), (int)cMASystem9.getVersion());
      assertNull(cMASystem9.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem9, cMASystem3);
      assertSame(cMASystem9, cMASystem4);
      assertSame(cMASystem9, cMASystem6);
      assertSame(cMASystem9, cMASystem2);
      assertSame(cMASystem9, cMASystem7);
      assertSame(cMASystem9, cMASystem0);
      assertSame(cMASystem9, cMASystem8);
      assertSame(cMASystem9, cMASystem5);
      assertSame(cMASystem9, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem9);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem9);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem9);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      
      cMASystem9.publishedBy = cMALink0;
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem9.getPublishedVersion());
      assertNull(cMASystem9.getPublishedCounter());
      assertNull(cMASystem9.getCreatedAt());
      assertNull(cMASystem9.getArchivedVersion());
      assertNull(cMASystem9.getUrn());
      assertNull(cMASystem9.getPublishedAt());
      assertNull(cMASystem9.getFirstPublishedAt());
      assertNull(cMASystem9.getUpdatedAt());
      assertNull(cMASystem9.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem9.getId());
      assertEquals(CMAType.Asset, cMASystem9.getType());
      assertEquals((-1291), (int)cMASystem9.getVersion());
      assertNull(cMASystem9.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem9.publishedBy.getSpaceId());
      assertFalse(cMASystem9.publishedBy.isArchived());
      assertFalse(cMASystem9.publishedBy.isPublished());
      assertNull(cMASystem9.publishedBy.getVisibility());
      assertEquals("master", cMASystem9.publishedBy.getEnvironmentId());
      assertNull(cMASystem9.publishedBy.getVersion());
      assertNull(cMASystem9.publishedBy.getId());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      
      Integer integer1 = cMASystem0.getArchivedVersion();
      assertNull(integer1);
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      
      cMASystem5.setUrn("");
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertEquals("", cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals("", cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals("", cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals("", cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem9);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem9);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      
      CMALink cMALink1 = cMASystem6.getEnvironment();
      assertNull(cMALink1);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem0.getId());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertEquals("", cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem1.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals("", cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals("", cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals("", cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }", cMASystem6.getId());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertEquals("", cMASystem6.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem9);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem9);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem9);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      
      CMASystem cMASystem10 = cMASystem1.setId("");
      assertNotNull(cMASystem10);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertEquals("", cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals("", cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem10.getCreatedAt());
      assertNull(cMASystem10.getPublishedVersion());
      assertNull(cMASystem10.getLinkType());
      assertNull(cMASystem10.getPublishedCounter());
      assertEquals(CMAType.Asset, cMASystem10.getType());
      assertEquals("", cMASystem10.getId());
      assertNull(cMASystem10.getArchivedVersion());
      assertNull(cMASystem10.getUpdatedAt());
      assertNull(cMASystem10.getPublishedAt());
      assertEquals("", cMASystem10.getUrn());
      assertEquals((-1291), (int)cMASystem10.getVersion());
      assertNull(cMASystem10.getFirstPublishedAt());
      assertNull(cMASystem10.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem10);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem10);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem10, cMASystem0);
      assertSame(cMASystem10, cMASystem4);
      assertSame(cMASystem10, cMASystem1);
      assertSame(cMASystem10, cMASystem9);
      assertSame(cMASystem10, cMASystem6);
      assertSame(cMASystem10, cMASystem2);
      assertSame(cMASystem10, cMASystem5);
      assertSame(cMASystem10, cMASystem8);
      assertSame(cMASystem10, cMASystem3);
      assertSame(cMASystem10, cMASystem7);
      
      cMASystem10.setUrn((String) null);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem10.getCreatedAt());
      assertNull(cMASystem10.getPublishedVersion());
      assertNull(cMASystem10.getLinkType());
      assertNull(cMASystem10.getPublishedCounter());
      assertEquals(CMAType.Asset, cMASystem10.getType());
      assertEquals("", cMASystem10.getId());
      assertNull(cMASystem10.getArchivedVersion());
      assertNull(cMASystem10.getUpdatedAt());
      assertNull(cMASystem10.getPublishedAt());
      assertNull(cMASystem10.getUrn());
      assertEquals((-1291), (int)cMASystem10.getVersion());
      assertNull(cMASystem10.getFirstPublishedAt());
      assertNull(cMASystem10.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem10);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem10);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem10, cMASystem0);
      assertSame(cMASystem10, cMASystem4);
      assertSame(cMASystem10, cMASystem1);
      assertSame(cMASystem10, cMASystem9);
      assertSame(cMASystem10, cMASystem6);
      assertSame(cMASystem10, cMASystem2);
      assertSame(cMASystem10, cMASystem5);
      assertSame(cMASystem10, cMASystem8);
      assertSame(cMASystem10, cMASystem3);
      assertSame(cMASystem10, cMASystem7);
      
      cMASystem10.publishedVersion = null;
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem10.getCreatedAt());
      assertNull(cMASystem10.getPublishedVersion());
      assertNull(cMASystem10.getLinkType());
      assertNull(cMASystem10.getPublishedCounter());
      assertEquals(CMAType.Asset, cMASystem10.getType());
      assertEquals("", cMASystem10.getId());
      assertNull(cMASystem10.getArchivedVersion());
      assertNull(cMASystem10.getUpdatedAt());
      assertNull(cMASystem10.getPublishedAt());
      assertNull(cMASystem10.getUrn());
      assertEquals((-1291), (int)cMASystem10.getVersion());
      assertNull(cMASystem10.getFirstPublishedAt());
      assertNull(cMASystem10.getVisibility());
      
      Integer integer2 = cMASystem1.getPublishedVersion();
      assertNull(integer2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem10);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem10);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      
      String string3 = cMASystem9.toString();
      assertNotNull(string3);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMASystem9.getPublishedVersion());
      assertNull(cMASystem9.getPublishedCounter());
      assertNull(cMASystem9.getCreatedAt());
      assertNull(cMASystem9.getArchivedVersion());
      assertNull(cMASystem9.getUrn());
      assertNull(cMASystem9.getPublishedAt());
      assertEquals("", cMASystem9.getId());
      assertNull(cMASystem9.getFirstPublishedAt());
      assertNull(cMASystem9.getUpdatedAt());
      assertNull(cMASystem9.getLinkType());
      assertEquals(CMAType.Asset, cMASystem9.getType());
      assertEquals((-1291), (int)cMASystem9.getVersion());
      assertNull(cMASystem9.getVisibility());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals("", cMASystem2.getId());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals("", cMASystem5.getId());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertEquals("", cMASystem6.getId());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem10);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem9, cMASystem3);
      assertSame(cMASystem9, cMASystem10);
      assertSame(cMASystem9, cMASystem4);
      assertSame(cMASystem9, cMASystem6);
      assertSame(cMASystem9, cMASystem2);
      assertSame(cMASystem9, cMASystem7);
      assertSame(cMASystem9, cMASystem0);
      assertSame(cMASystem9, cMASystem8);
      assertSame(cMASystem9, cMASystem5);
      assertSame(cMASystem9, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem10);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem9);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem10);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem9);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem10);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem9);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem10);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
      assertEquals("CMASystem { publishedBy = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }, type = Asset, version = -1291, space = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } }, id = , contentType = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Asset } } } }", string3);
      
      CMALink cMALink2 = cMASystem6.getEnvironment();
      assertNull(cMALink2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals((-1291), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Asset, cMASystem0.getType());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals(CMAType.Asset, cMASystem1.getType());
      assertEquals((-1291), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.Asset, cMASystem2.getType());
      assertNull(cMASystem2.getVisibility());
      assertEquals("", cMASystem2.getId());
      assertEquals((-1291), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertEquals("", cMASystem5.getId());
      assertEquals((-1291), (int)cMASystem5.getVersion());
      assertEquals(CMAType.Asset, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem6.getPublishedAt());
      assertNull(cMASystem6.getPublishedVersion());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals((-1291), (int)cMASystem6.getVersion());
      assertEquals("", cMASystem6.getId());
      assertNull(cMASystem6.getPublishedCounter());
      assertNull(cMASystem6.getCreatedAt());
      assertEquals(CMAType.Asset, cMASystem6.getType());
      assertNull(cMASystem6.getUpdatedAt());
      assertNull(cMASystem6.getLinkType());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem7);
      assertSame(cMASystem0, cMASystem9);
      assertSame(cMASystem0, cMASystem8);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem10);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem10);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem7);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem9);
      assertSame(cMASystem1, cMASystem8);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem6);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem7);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem9);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem10);
      assertSame(cMASystem2, cMASystem8);
      assertSame(cMASystem5, cMASystem9);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem7);
      assertSame(cMASystem5, cMASystem10);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem8);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem6);
      assertSame(cMASystem6, cMASystem8);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem9);
      assertSame(cMASystem6, cMASystem7);
      assertSame(cMASystem6, cMASystem10);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      
      CMAType cMAType0 = CMAType.OrganizationPeriodicUsage;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CMASystem cMASystem2 = cMASystem1.setVersion(integer0);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      cMASystem0.version = integer0;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      
      cMASystem0.publishedAt = "*";
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUrn());
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      
      cMASystem2.createdBy = cMALink0;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem2.createdBy.getVisibility());
      assertNull(cMASystem2.createdBy.getVersion());
      assertFalse(cMASystem2.createdBy.isArchived());
      assertFalse(cMASystem2.createdBy.isPublished());
      assertEquals("master", cMASystem2.createdBy.getEnvironmentId());
      assertNull(cMASystem2.createdBy.getSpaceId());
      assertNull(cMASystem2.createdBy.getId());
      
      String string0 = cMALink0.toString();
      assertNotNull(string0);
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link } } }", string0);
      
      CMASystem cMASystem3 = cMASystem2.setSpace(cMALink0);
      assertNotNull(cMASystem3);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      
      CMAType cMAType1 = CMAType.PersonalAccessToken;
      cMASystem3.urn = "status";
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("status", cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertNull(cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      
      CMASystem cMASystem4 = cMASystem3.setType(cMAType1);
      assertNotNull(cMASystem4);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("status", cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      
      CMASystem cMASystem5 = cMASystem4.setContentType(cMALink0);
      assertNotNull(cMASystem5);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("status", cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem5.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem5.getLinkType());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getId());
      assertEquals("*", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getType());
      assertEquals("status", cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      
      cMASystem5.publishedAt = "*";
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("status", cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem5.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem5.getLinkType());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getId());
      assertEquals("*", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getType());
      assertEquals("status", cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      
      cMASystem5.createdAt = "*";
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getId());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals("*", cMASystem3.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertEquals("*", cMASystem4.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem5.getLinkType());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getId());
      assertEquals("*", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals("*", cMASystem5.getCreatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getType());
      assertEquals("status", cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      
      cMASystem5.id = "t~73vRs0z(n0fcD";
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals("*", cMASystem3.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals("t~73vRs0z(n0fcD", cMASystem4.getId());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertEquals("*", cMASystem4.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem5.getLinkType());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals("*", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals("*", cMASystem5.getCreatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getType());
      assertEquals("status", cMASystem5.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem5.getId());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      
      Integer integer1 = cMASystem5.getPublishedVersion();
      assertNull(integer1);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals("*", cMASystem3.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals("t~73vRs0z(n0fcD", cMASystem4.getId());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertEquals("*", cMASystem4.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem5.getLinkType());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals("*", cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals("*", cMASystem5.getCreatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getType());
      assertEquals("status", cMASystem5.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem5.getId());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      
      String string1 = cMASystem0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertEquals("CMASystem { publishedAt = *, type = PersonalAccessToken, version = 0, space = CMALink { CMAResource { system = CMASystem { type = Link } } }, urn = status, createdAt = *, createdBy = CMALink { CMAResource { system = CMASystem { type = Link } } }, linkType = OrganizationPeriodicUsage, id = t~73vRs0z(n0fcD, contentType = CMALink { CMAResource { system = CMASystem { type = Link } } } }", string1);
      
      CMAType cMAType2 = cMASystem4.getType();
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType2.equals((Object)cMAType0));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals("*", cMASystem3.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals("t~73vRs0z(n0fcD", cMASystem4.getId());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertEquals("*", cMASystem4.getCreatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertNotSame(cMAType2, cMAType0);
      assertSame(cMAType2, cMAType1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMAType1, cMAType2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertEquals(CMAType.PersonalAccessToken, cMAType2);
      
      String string2 = cMASystem3.getUpdatedAt();
      assertNull(string2);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals("*", cMASystem3.getCreatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      
      String string3 = cMASystem1.getUpdatedAt();
      assertNull(string3);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      
      CMALink cMALink1 = cMASystem4.getPublishedBy();
      assertNull(cMALink1);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem3.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getType());
      assertEquals("status", cMASystem3.getUrn());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals("*", cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertEquals("*", cMASystem3.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getType());
      assertEquals("*", cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals("status", cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals("t~73vRs0z(n0fcD", cMASystem4.getId());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem4.getLinkType());
      assertNull(cMASystem4.getVisibility());
      assertEquals("*", cMASystem4.getCreatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMAType1, cMAType2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      
      CMAType cMAType3 = cMASystem2.getType();
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType3.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMAType3, cMAType1);
      assertNotSame(cMAType3, cMAType0);
      assertSame(cMAType3, cMAType2);
      assertEquals(CMAType.PersonalAccessToken, cMAType3);
      
      Integer integer2 = cMASystem2.getArchivedVersion();
      assertNull(integer2);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("*", cMASystem0.getCreatedAt());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem0.getLinkType());
      assertEquals("status", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("*", cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("t~73vRs0z(n0fcD", cMASystem0.getId());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getType());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertEquals("*", cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals("status", cMASystem1.getUrn());
      assertEquals("t~73vRs0z(n0fcD", cMASystem1.getId());
      assertEquals("*", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("status", cMASystem2.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getType());
      assertEquals("*", cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.OrganizationPeriodicUsage, cMASystem2.getLinkType());
      assertEquals("t~73vRs0z(n0fcD", cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertEquals("*", cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      
      CMAType cMAType0 = CMAType.Role;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMASystem cMASystem2 = cMASystem1.setId((String) null);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      Integer integer0 = new Integer((-1771));
      assertNotNull(integer0);
      assertEquals((-1771), (int)integer0);
      
      CMASystem cMASystem3 = cMASystem2.setVersion(integer0);
      assertNotNull(cMASystem3);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      
      CMASystem cMASystem4 = cMASystem3.setSpace(cMALink0);
      assertNotNull(cMASystem4);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMASystem4.getType());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals((-1771), (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      
      CMALink cMALink1 = cMALink0.setId((String) null);
      assertNotNull(cMALink1);
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertFalse(cMALink1.isArchived());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      
      CMAType cMAType1 = CMAType.Link;
      cMASystem1.createdBy = cMALink0;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMASystem1.createdBy.getVisibility());
      assertEquals("master", cMASystem1.createdBy.getEnvironmentId());
      assertNull(cMASystem1.createdBy.getVersion());
      assertFalse(cMASystem1.createdBy.isArchived());
      assertFalse(cMASystem1.createdBy.isPublished());
      assertNull(cMASystem1.createdBy.getSpaceId());
      assertNull(cMASystem1.createdBy.getId());
      
      CMASystem cMASystem5 = cMASystem4.setType(cMAType1);
      assertNotNull(cMASystem5);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem0.getType());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Link, cMASystem1.getType());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Link, cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Link, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals((-1771), (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem4.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals((-1771), (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getId());
      assertEquals(CMAType.Link, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      
      CMALink cMALink2 = cMASystem5.getUpdatedBy();
      assertNull(cMALink2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem0.getType());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Link, cMASystem1.getType());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Link, cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Link, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals((-1771), (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem4.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals((-1771), (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getId());
      assertEquals(CMAType.Link, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      
      String string0 = cMASystem5.getId();
      assertNull(string0);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem0.getType());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Link, cMASystem1.getType());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Link, cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Link, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertEquals((-1771), (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem4.getType());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals((-1771), (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertNull(cMASystem5.getId());
      assertEquals(CMAType.Link, cMASystem5.getType());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem3);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      
      String string1 = cMASystem3.getFirstPublishedAt();
      assertNull(string1);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem0.getType());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Link, cMASystem1.getType());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Link, cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Link, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      
      String string2 = cMASystem3.getPublishedAt();
      assertNull(string2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals((-1771), (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Link, cMASystem0.getType());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Link, cMASystem1.getType());
      assertEquals((-1771), (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAType.Link, cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals((-1771), (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Link, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getArchivedVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem5);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CMASystem cMASystem1 = cMASystem0.setVersion(integer0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMAType cMAType0 = CMAType.Webhook;
      CMALink cMALink0 = new CMALink(cMAType0);
      assertNotNull(cMALink0);
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      
      CMALink cMALink1 = new CMALink(cMALink0);
      assertNotNull(cMALink1);
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      
      CMAType cMAType1 = CMAType.Tag;
      CMALink cMALink2 = cMALink1.setSpaceId("WebhookDefinition");
      assertNotNull(cMALink2);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink2.equals((Object)cMALink0));
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink2.getId());
      assertEquals("WebhookDefinition", cMALink2.getSpaceId());
      assertNull(cMALink2.getVisibility());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertNull(cMALink2.getVersion());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink2, cMALink1);
      assertNotSame(cMALink2, cMALink0);
      
      CMASystem cMASystem2 = cMASystem1.setType(cMAType1);
      assertNotNull(cMASystem2);
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Tag, cMASystem2.getType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      CMALink cMALink3 = cMALink1.setEnvironmentId("a P");
      assertNotNull(cMALink3);
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertNull(cMALink3.getVisibility());
      assertEquals("a P", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getVersion());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("WebhookDefinition", cMALink3.getSpaceId());
      assertNull(cMALink3.getId());
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink1);
      
      CMAType cMAType2 = CMAType.Role;
      cMASystem2.linkType = cMAType2;
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(CMAType.Tag, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      
      CMALink cMALink4 = cMALink1.setSpaceId("WebhookDefinition");
      assertNotNull(cMALink4);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink1);
      
      CMASystem cMASystem3 = cMASystem1.setContentType(cMALink4);
      assertNotNull(cMASystem3);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      
      CMAType cMAType3 = CMAType.PersonalAccessToken;
      CMASystem cMASystem4 = cMASystem3.setLinkType(cMAType3);
      assertNotNull(cMASystem4);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertFalse(cMAType3.equals((Object)cMAType1));
      assertFalse(cMAType3.equals((Object)cMAType0));
      assertFalse(cMAType3.equals((Object)cMAType2));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getLinkType());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem4.getType());
      assertNull(cMASystem4.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertNotSame(cMAType3, cMAType1);
      assertNotSame(cMAType3, cMAType0);
      assertNotSame(cMAType3, cMAType2);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      
      cMASystem3.updatedAt = "WebhookDefinition";
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      
      CMAType cMAType4 = cMASystem4.getLinkType();
      assertFalse(cMAType4.equals((Object)cMAType2));
      assertFalse(cMAType4.equals((Object)cMAType0));
      assertFalse(cMAType4.equals((Object)cMAType1));
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertFalse(cMAType3.equals((Object)cMAType1));
      assertFalse(cMAType3.equals((Object)cMAType0));
      assertFalse(cMAType3.equals((Object)cMAType2));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getLinkType());
      assertEquals("WebhookDefinition", cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem4.getType());
      assertNull(cMASystem4.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMAType4, cMAType2);
      assertNotSame(cMAType4, cMAType0);
      assertSame(cMAType4, cMAType3);
      assertNotSame(cMAType4, cMAType1);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertNotSame(cMAType3, cMAType1);
      assertNotSame(cMAType3, cMAType0);
      assertNotSame(cMAType3, cMAType2);
      assertSame(cMAType3, cMAType4);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      assertEquals(CMAType.PersonalAccessToken, cMAType4);
      
      CMALink cMALink5 = cMASystem3.getCreatedBy();
      assertNull(cMALink5);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      
      cMASystem3.createdAt = "AgAAIW~/eo7Cer";
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      
      String string0 = cMASystem4.getUpdatedAt();
      assertNotNull(string0);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertFalse(cMAType3.equals((Object)cMAType1));
      assertFalse(cMAType3.equals((Object)cMAType0));
      assertFalse(cMAType3.equals((Object)cMAType2));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertNull(cMASystem4.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getLinkType());
      assertEquals("WebhookDefinition", cMASystem4.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem4.getType());
      assertNull(cMASystem4.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      assertNotSame(cMAType3, cMAType1);
      assertNotSame(cMAType3, cMAType0);
      assertNotSame(cMAType3, cMAType2);
      assertSame(cMAType3, cMAType4);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      assertEquals("WebhookDefinition", string0);
      
      CMALink cMALink6 = cMASystem3.getContentType();
      assertNotNull(cMALink6);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink6.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("a P", cMALink6.getEnvironmentId());
      assertEquals("WebhookDefinition", cMALink6.getSpaceId());
      assertNull(cMALink6.getVisibility());
      assertFalse(cMALink6.isArchived());
      assertFalse(cMALink6.isPublished());
      assertNull(cMALink6.getVersion());
      assertNull(cMALink6.getId());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink6, cMALink2);
      assertSame(cMALink6, cMALink3);
      assertNotSame(cMALink6, cMALink0);
      assertSame(cMALink6, cMALink4);
      assertSame(cMALink6, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink6);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem1);
      
      String string1 = cMASystem0.getFirstPublishedAt();
      assertNull(string1);
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      
      CMASystem cMASystem5 = cMASystem3.setLinkType(cMAType3);
      assertNotNull(cMASystem5);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertFalse(cMAType3.equals((Object)cMAType1));
      assertFalse(cMAType3.equals((Object)cMAType0));
      assertFalse(cMAType3.equals((Object)cMAType2));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getLinkType());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Tag, cMASystem5.getType());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertEquals("WebhookDefinition", cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink4);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink6);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertNotSame(cMAType3, cMAType1);
      assertNotSame(cMAType3, cMAType0);
      assertNotSame(cMAType3, cMAType2);
      assertSame(cMAType3, cMAType4);
      
      cMASystem5.createdBy = cMALink0;
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertNull(cMASystem5.getPublishedVersion());
      assertNull(cMASystem5.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem5.getLinkType());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Tag, cMASystem5.getType());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertEquals("WebhookDefinition", cMASystem5.getUpdatedAt());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.createdBy.getVisibility());
      assertEquals("master", cMASystem5.createdBy.getEnvironmentId());
      assertFalse(cMASystem5.createdBy.isArchived());
      assertFalse(cMASystem5.createdBy.isPublished());
      assertNull(cMASystem5.createdBy.getVersion());
      assertNull(cMASystem5.createdBy.getSpaceId());
      assertNull(cMASystem5.createdBy.getId());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getId());
      
      CMASystem cMASystem6 = cMASystem3.setId("*V2APG)eMw^");
      assertNotNull(cMASystem6);
      assertFalse(cMAType0.equals((Object)cMAType2));
      assertFalse(cMAType0.equals((Object)cMAType3));
      assertFalse(cMAType0.equals((Object)cMAType4));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMALink0.equals((Object)cMALink2));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertEquals(CMAType.Tag, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertNull(cMASystem0.getVisibility());
      assertEquals("*V2APG)eMw^", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("WebhookDefinition", cMASystem0.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("WebhookDefinition", cMASystem1.getUpdatedAt());
      assertEquals("AgAAIW~/eo7Cer", cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getVisibility());
      assertEquals("*V2APG)eMw^", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Tag, cMASystem1.getType());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("WebhookDefinition", cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("a P", cMALink1.getEnvironmentId());
      assertEquals("AgAAIW~/eo7Cer", cMASystem6.getCreatedAt());
      assertNull(cMASystem6.getFirstPublishedAt());
      assertNull(cMASystem6.getPublishedCounter());
      assertEquals("WebhookDefinition", cMASystem6.getUpdatedAt());
      assertEquals(0, (int)cMASystem6.getVersion());
      assertNull(cMASystem6.getUrn());
      assertNull(cMASystem6.getVisibility());
      assertNull(cMASystem6.getPublishedAt());
      assertEquals(CMAType.PersonalAccessToken, cMASystem6.getLinkType());
      assertNull(cMASystem6.getArchivedVersion());
      assertEquals(CMAType.Tag, cMASystem6.getType());
      assertEquals("*V2APG)eMw^", cMASystem6.getId());
      assertNull(cMASystem6.getPublishedVersion());
      assertEquals("a P", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertNull(cMALink4.getVersion());
      assertEquals("WebhookDefinition", cMALink4.getSpaceId());
      assertNull(cMALink4.getId());
      assertEquals("WebhookDefinition", cMASystem3.getUpdatedAt());
      assertEquals("*V2APG)eMw^", cMASystem3.getId());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals(CMAType.Tag, cMASystem3.getType());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertEquals("AgAAIW~/eo7Cer", cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem6);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem6);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem4);
      assertNotSame(cMAType0, cMAType2);
      assertNotSame(cMAType0, cMAType3);
      assertNotSame(cMAType0, cMAType4);
      assertNotSame(cMAType0, cMAType1);
      assertNotSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink4);
      assertSame(cMASystem6, cMASystem4);
      assertSame(cMASystem6, cMASystem0);
      assertSame(cMASystem6, cMASystem5);
      assertSame(cMASystem6, cMASystem2);
      assertSame(cMASystem6, cMASystem3);
      assertSame(cMASystem6, cMASystem1);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink6);
      assertSame(cMALink4, cMALink1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem6);
      assertSame(cMASystem3, cMASystem1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      
      Integer integer0 = new Integer((-1916));
      assertNotNull(integer0);
      assertEquals((-1916), (int)integer0);
      
      cMASystem0.publishedVersion = integer0;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      cMASystem0.publishedCounter = integer1;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      
      CMALink cMALink1 = new CMALink(cMALink0);
      assertNotNull(cMALink1);
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      
      CMALink cMALink2 = cMALink0.setSpaceId("\"{mFW^h4sLmRg");
      assertNotNull(cMALink2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink2.equals((Object)cMALink1));
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertNull(cMALink2.getVersion());
      assertNull(cMALink2.getId());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink2.getSpaceId());
      assertNull(cMALink2.getVisibility());
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink2, cMALink0);
      assertNotSame(cMALink2, cMALink1);
      
      CMALink cMALink3 = cMALink1.setId("\"{mFW^h4sLmRg");
      assertNotNull(cMALink3);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink2);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink1);
      
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink3);
      assertNotNull(cMASystem1);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink2);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem0);
      
      cMASystem1.version = null;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      
      cMASystem0.contentType = cMALink3;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertNull(cMASystem0.contentType.getSpaceId());
      assertNull(cMASystem0.contentType.getVersion());
      assertEquals("\"{mFW^h4sLmRg", cMASystem0.contentType.getId());
      assertFalse(cMASystem0.contentType.isArchived());
      assertFalse(cMASystem0.contentType.isPublished());
      assertEquals("master", cMASystem0.contentType.getEnvironmentId());
      assertNull(cMASystem0.contentType.getVisibility());
      
      CMASystem cMASystem2 = cMASystem1.setContentType(cMALink3);
      assertNotNull(cMASystem2);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals((-1916), (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink2);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      String string0 = cMASystem1.getId();
      assertNull(string0);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVersion());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink2);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      
      Integer integer2 = new Integer(764);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(764, (int)integer2);
      
      CMALink cMALink4 = cMALink1.setVersion(integer2);
      assertNotNull(cMALink4);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(cMALink4.equals((Object)cMALink2));
      assertFalse(cMALink4.equals((Object)cMALink0));
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertEquals(764, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink4.getId());
      assertEquals("master", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertEquals(764, (int)cMALink4.getVersion());
      assertNull(cMALink4.getSpaceId());
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink3);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertNotSame(cMALink4, cMALink2);
      assertNotSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink1);
      
      cMASystem2.space = cMALink4;
      assertFalse(cMASystem2.space.isArchived());
      assertFalse(cMASystem2.space.isPublished());
      assertNull(cMASystem2.space.getVisibility());
      assertNull(cMASystem2.space.getSpaceId());
      assertEquals("\"{mFW^h4sLmRg", cMASystem2.space.getId());
      assertEquals(764, (int)cMASystem2.space.getVersion());
      assertEquals("master", cMASystem2.space.getEnvironmentId());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertEquals(764, (int)cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink3.getId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals(764, (int)cMALink3.getVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals((-1916), (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertEquals("\"{mFW^h4sLmRg", cMALink4.getId());
      assertEquals("master", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVisibility());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertEquals(764, (int)cMALink4.getVersion());
      assertNull(cMALink4.getSpaceId());
      
      Integer integer3 = new Integer((-1993));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-1993), (int)integer3);
      
      CMALink cMALink5 = cMALink1.setVersion(integer3);
      assertNotNull(cMALink5);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(cMALink5.equals((Object)cMALink2));
      assertFalse(cMALink5.equals((Object)cMALink0));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertNull(cMALink5.getVisibility());
      assertEquals("\"{mFW^h4sLmRg", cMALink5.getId());
      assertFalse(cMALink5.isArchived());
      assertFalse(cMALink5.isPublished());
      assertEquals("master", cMALink5.getEnvironmentId());
      assertNull(cMALink5.getSpaceId());
      assertEquals((-1993), (int)cMALink5.getVersion());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("\"{mFW^h4sLmRg", cMALink1.getId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertSame(cMALink5, cMALink4);
      assertNotSame(cMALink5, cMALink2);
      assertNotSame(cMALink5, cMALink0);
      assertSame(cMALink5, cMALink3);
      assertSame(cMALink5, cMALink1);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      
      CMAType cMAType0 = CMAType.PersonalAccessToken;
      CMALink cMALink6 = cMALink3.setId((String) null);
      assertNotNull(cMALink6);
      assertFalse(cMALink6.equals((Object)cMALink2));
      assertFalse(cMALink6.equals((Object)cMALink0));
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertEquals((-1993), (int)cMALink6.getVersion());
      assertNull(cMALink6.getVisibility());
      assertFalse(cMALink6.isArchived());
      assertFalse(cMALink6.isPublished());
      assertEquals("master", cMALink6.getEnvironmentId());
      assertNull(cMALink6.getSpaceId());
      assertNull(cMALink6.getId());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNotSame(cMALink6, cMALink2);
      assertSame(cMALink6, cMALink3);
      assertSame(cMALink6, cMALink5);
      assertSame(cMALink6, cMALink4);
      assertSame(cMALink6, cMALink1);
      assertNotSame(cMALink6, cMALink0);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      
      CMASystem cMASystem3 = cMASystem1.setLinkType(cMAType0);
      assertNotNull(cMASystem3);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getVisibility());
      assertEquals((-1916), (int)cMASystem3.getPublishedVersion());
      assertEquals(0, (int)cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertEquals("\"{mFW^h4sLmRg", cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      
      CMALink cMALink7 = cMALink0.setSystem(cMASystem0);
      assertNotNull(cMALink7);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink7.equals((Object)cMALink3));
      assertFalse(cMALink7.equals((Object)cMALink5));
      assertFalse(cMALink7.equals((Object)cMALink4));
      assertFalse(cMALink7.equals((Object)cMALink6));
      assertFalse(cMALink7.equals((Object)cMALink1));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertNull(cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertNull(cMALink7.getVisibility());
      assertEquals("master", cMALink7.getEnvironmentId());
      assertNull(cMALink7.getVersion());
      assertFalse(cMALink7.isArchived());
      assertNull(cMALink7.getSpaceId());
      assertTrue(cMALink7.isPublished());
      assertNull(cMALink7.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink7, cMALink3);
      assertNotSame(cMALink7, cMALink5);
      assertNotSame(cMALink7, cMALink4);
      assertNotSame(cMALink7, cMALink6);
      assertSame(cMALink7, cMALink0);
      assertNotSame(cMALink7, cMALink1);
      assertSame(cMALink7, cMALink2);
      
      String string1 = cMASystem0.getId();
      assertNull(string1);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      
      CMASystem cMASystem4 = cMASystem0.setSpace(cMALink7);
      assertNotNull(cMASystem4);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink7.equals((Object)cMALink3));
      assertFalse(cMALink7.equals((Object)cMALink5));
      assertFalse(cMALink7.equals((Object)cMALink4));
      assertFalse(cMALink7.equals((Object)cMALink6));
      assertFalse(cMALink7.equals((Object)cMALink1));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertNull(cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertNull(cMALink7.getVisibility());
      assertEquals("master", cMALink7.getEnvironmentId());
      assertNull(cMALink7.getVersion());
      assertFalse(cMALink7.isArchived());
      assertNull(cMALink7.getSpaceId());
      assertTrue(cMALink7.isPublished());
      assertNull(cMALink7.getId());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertEquals((-1916), (int)cMASystem4.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getLinkType());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getType());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink7, cMALink3);
      assertNotSame(cMALink7, cMALink5);
      assertNotSame(cMALink7, cMALink4);
      assertNotSame(cMALink7, cMALink6);
      assertSame(cMALink7, cMALink0);
      assertNotSame(cMALink7, cMALink1);
      assertSame(cMALink7, cMALink2);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem1);
      
      CMAType cMAType1 = cMASystem3.getLinkType();
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink7));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink7));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertNull(cMASystem3.getVisibility());
      assertEquals((-1916), (int)cMASystem3.getPublishedVersion());
      assertEquals(0, (int)cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertNull(cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMAType0, cMAType1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink7);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink7);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      assertSame(cMAType1, cMAType0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertEquals(CMAType.PersonalAccessToken, cMAType1);
      
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem1.setVisibility(cMAVisibility0);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink7));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink7));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink7);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink7);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      
      cMASystem2.getType();
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink7));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink7));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem2.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals((-1916), (int)cMASystem2.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getLinkType());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink7);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink7);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      
      CMAVisibility cMAVisibility1 = cMASystem2.getVisibility();
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink7));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink7));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem2.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(0, (int)cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals((-1916), (int)cMASystem2.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem2.getLinkType());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink7);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink7);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMAVisibility1, cMAVisibility0);
      assertEquals(CMAVisibility.privateVisibility, cMAVisibility1);
      
      CMALink cMALink8 = cMASystem0.getOrganization();
      assertNull(cMALink8);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      
      CMALink cMALink9 = cMASystem3.getCreatedBy();
      assertNull(cMALink9);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMALink1.equals((Object)cMALink7));
      assertFalse(cMALink1.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink2));
      assertFalse(cMALink3.equals((Object)cMALink7));
      assertFalse(cMALink3.equals((Object)cMALink0));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.PersonalAccessToken, cMASystem3.getLinkType());
      assertEquals((-1916), (int)cMASystem3.getPublishedVersion());
      assertEquals(0, (int)cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertEquals((-1993), (int)cMALink1.getVersion());
      assertNull(cMALink1.getId());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink3.getVisibility());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getSpaceId());
      assertEquals((-1993), (int)cMALink3.getVersion());
      assertNull(cMALink3.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(0, (int)cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertEquals((-1916), (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMAType0, cMAType1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink6);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink5);
      assertNotSame(cMALink1, cMALink7);
      assertNotSame(cMALink1, cMALink2);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink3, cMALink6);
      assertSame(cMALink3, cMALink4);
      assertNotSame(cMALink3, cMALink2);
      assertNotSame(cMALink3, cMALink7);
      assertNotSame(cMALink3, cMALink0);
      assertSame(cMALink3, cMALink5);
      assertSame(cMALink3, cMALink1);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      
      Integer integer4 = cMASystem4.getVersion();
      assertNull(integer4);
      assertFalse(cMALink0.equals((Object)cMALink3));
      assertFalse(cMALink0.equals((Object)cMALink5));
      assertFalse(cMALink0.equals((Object)cMALink4));
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink0.equals((Object)cMALink6));
      assertFalse(cMALink7.equals((Object)cMALink3));
      assertFalse(cMALink7.equals((Object)cMALink5));
      assertFalse(cMALink7.equals((Object)cMALink4));
      assertFalse(cMALink7.equals((Object)cMALink6));
      assertFalse(cMALink7.equals((Object)cMALink1));
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals((-1916), (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals(CMAType.PersonalAccessToken, cMASystem0.getLinkType());
      assertEquals(0, (int)cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isPublished());
      assertEquals("master", cMALink7.getEnvironmentId());
      assertNull(cMALink7.getVersion());
      assertFalse(cMALink7.isArchived());
      assertNull(cMALink7.getSpaceId());
      assertTrue(cMALink7.isPublished());
      assertEquals(CMAVisibility.privateVisibility, cMALink7.getVisibility());
      assertNull(cMALink7.getId());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getUrn());
      assertEquals((-1916), (int)cMASystem4.getPublishedVersion());
      assertEquals(CMAType.PersonalAccessToken, cMASystem4.getLinkType());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem4.getVisibility());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(0, (int)cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getArchivedVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMALink0, cMALink7);
      assertNotSame(cMALink0, cMALink3);
      assertNotSame(cMALink0, cMALink5);
      assertNotSame(cMALink0, cMALink4);
      assertNotSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertNotSame(cMALink0, cMALink6);
      assertNotSame(cMALink7, cMALink3);
      assertNotSame(cMALink7, cMALink5);
      assertNotSame(cMALink7, cMALink4);
      assertNotSame(cMALink7, cMALink6);
      assertSame(cMALink7, cMALink0);
      assertNotSame(cMALink7, cMALink1);
      assertSame(cMALink7, cMALink2);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getId());
      
      Integer integer0 = new Integer(1041);
      assertNotNull(integer0);
      assertEquals(1041, (int)integer0);
      
      CMASystem cMASystem1 = cMASystem0.setVersion(integer0);
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMAType cMAType0 = CMAType.Space;
      CMALink cMALink0 = new CMALink(cMAType0);
      assertNotNull(cMALink0);
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      assertNotNull(cMALink1);
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals(1041, (int)cMALink0.getVersion());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals(1041, (int)cMALink1.getVersion());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getVisibility());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      
      CMASystem cMASystem2 = cMASystem1.setContentType(cMALink1);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals(1041, (int)cMALink0.getVersion());
      assertNull(cMALink0.getSpaceId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVisibility());
      assertEquals(1041, (int)cMALink1.getVersion());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink1.getVisibility());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(1041, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      cMASystem0.publishedVersion = integer0;
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem1.visibility = cMAVisibility0;
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      
      CMAType cMAType1 = CMAType.Role;
      CMASystem cMASystem3 = cMASystem1.setLinkType(cMAType1);
      assertNotNull(cMASystem3);
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertEquals(1041, (int)cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(1041, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getType());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      
      Integer integer1 = cMASystem3.getPublishedVersion();
      assertNotNull(integer1);
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertEquals(1041, (int)cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(1041, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getType());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertEquals(1041, (int)integer1);
      
      CMAVisibility cMAVisibility1 = CMAVisibility.publicVisibility;
      cMASystem3.setVisibility(cMAVisibility1);
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertFalse(cMAVisibility1.equals((Object)cMAVisibility0));
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAVisibility.publicVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals(CMAVisibility.publicVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertEquals(1041, (int)cMASystem3.getPublishedVersion());
      assertEquals(CMAVisibility.publicVisibility, cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(1041, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getType());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertNotSame(cMAVisibility1, cMAVisibility0);
      
      CMAVisibility cMAVisibility2 = CMAVisibility.privateVisibility;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      cMASystem0.archivedVersion = integer2;
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAVisibility.publicVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getId());
      
      cMASystem2.visibility = cMAVisibility2;
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals(1041, (int)cMALink0.getVersion());
      assertNull(cMALink0.getSpaceId());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isArchived());
      assertTrue(cMALink0.isPublished());
      assertEquals(1041, (int)cMALink1.getVersion());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertTrue(cMALink1.isArchived());
      assertTrue(cMALink1.isPublished());
      assertEquals(CMAVisibility.privateVisibility, cMALink1.getVisibility());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertEquals(1041, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(1041, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      
      cMASystem1.getType();
      assertFalse(integer0.equals((Object)integer2));
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      
      CMALink cMALink2 = cMASystem2.getUpdatedBy();
      assertNull(cMALink2);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals(1041, (int)cMALink0.getVersion());
      assertNull(cMALink0.getSpaceId());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertTrue(cMALink0.isArchived());
      assertTrue(cMALink0.isPublished());
      assertEquals(1041, (int)cMALink1.getVersion());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertTrue(cMALink1.isArchived());
      assertTrue(cMALink1.isPublished());
      assertEquals(CMAVisibility.privateVisibility, cMALink1.getVisibility());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertEquals(1041, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getUrn());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertEquals(1041, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem0);
      
      Integer integer3 = cMASystem3.getVersion();
      assertNotNull(integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getCreatedAt());
      assertEquals(1041, (int)cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertEquals(1041, (int)cMASystem0.getVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(1041, (int)cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertEquals(1041, (int)cMASystem1.getVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getUrn());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertEquals(1041, (int)cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem3.getVisibility());
      assertNull(cMASystem3.getId());
      assertEquals(0, (int)cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertEquals(1041, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getType());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem2);
      assertEquals(1041, (int)integer3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      
      CMASystem cMASystem1 = cMASystem0.setId("");
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMAType cMAType0 = CMAType.WebhookDefinition;
      CMALink cMALink0 = new CMALink(cMAType0);
      assertNotNull(cMALink0);
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      
      CMALink cMALink1 = cMALink0.setId("|'|3si:1m");
      assertNotNull(cMALink1);
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("|'|3si:1m", cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("|'|3si:1m", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      
      cMASystem0.setUrn((String) null);
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertSame(cMASystem0, cMASystem1);
      
      CMASystem cMASystem2 = cMASystem1.setContentType(cMALink1);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("|'|3si:1m", cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("|'|3si:1m", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      cMASystem0.space = cMALink1;
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("|'|3si:1m", cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("|'|3si:1m", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem0.space.getVisibility());
      assertEquals("master", cMASystem0.space.getEnvironmentId());
      assertFalse(cMASystem0.space.isArchived());
      assertFalse(cMASystem0.space.isPublished());
      assertNull(cMASystem0.space.getVersion());
      assertEquals("|'|3si:1m", cMASystem0.space.getId());
      assertNull(cMASystem0.space.getSpaceId());
      
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem2.setVisibility(cMAVisibility0);
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAVisibility.privateVisibility, cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("|'|3si:1m", cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("|'|3si:1m", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals("", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedVersion());
      assertEquals(CMAVisibility.privateVisibility, cMASystem2.getVisibility());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      CMALink cMALink2 = cMALink1.setSpaceId("");
      assertNotNull(cMALink2);
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("|'|3si:1m", cMALink0.getId());
      assertEquals("", cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("", cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("|'|3si:1m", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMALink2.getVisibility());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertNull(cMALink2.getVersion());
      assertEquals("|'|3si:1m", cMALink2.getId());
      assertEquals("", cMALink2.getSpaceId());
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink2, cMALink1);
      assertSame(cMALink2, cMALink0);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      CMALink cMALink3 = cMALink1.setVersion((Integer) null);
      assertNotNull(cMALink3);
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("|'|3si:1m", cMALink0.getId());
      assertEquals("", cMALink0.getSpaceId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals("", cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("|'|3si:1m", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertFalse(cMALink3.isArchived());
      assertFalse(cMALink3.isPublished());
      assertNull(cMALink3.getVisibility());
      assertEquals("", cMALink3.getSpaceId());
      assertEquals("|'|3si:1m", cMALink3.getId());
      assertEquals("master", cMALink3.getEnvironmentId());
      assertNull(cMALink3.getVersion());
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink3);
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink3, cMALink1);
      assertSame(cMALink3, cMALink2);
      assertSame(cMALink3, cMALink0);
      
      CMALink cMALink4 = cMALink1.setSystem(cMASystem0);
      assertNotNull(cMALink4);
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertEquals(CMAVisibility.privateVisibility, cMASystem0.getVisibility());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getVersion());
      assertEquals("", cMALink0.getSpaceId());
      assertEquals(CMAVisibility.privateVisibility, cMALink0.getVisibility());
      assertEquals("", cMALink0.getId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertEquals(CMAVisibility.privateVisibility, cMALink1.getVisibility());
      assertEquals("", cMALink1.getSpaceId());
      assertEquals("", cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(CMAVisibility.privateVisibility, cMALink4.getVisibility());
      assertEquals("", cMALink4.getId());
      assertEquals("", cMALink4.getSpaceId());
      assertEquals("master", cMALink4.getEnvironmentId());
      assertNull(cMALink4.getVersion());
      assertFalse(cMALink4.isArchived());
      assertFalse(cMALink4.isPublished());
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink0, cMALink3);
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink0, cMALink4);
      assertSame(cMALink1, cMALink4);
      assertSame(cMALink1, cMALink3);
      assertSame(cMALink1, cMALink0);
      assertSame(cMALink1, cMALink2);
      assertSame(cMALink4, cMALink3);
      assertSame(cMALink4, cMALink0);
      assertSame(cMALink4, cMALink2);
      assertSame(cMALink4, cMALink1);
      
      try { 
        Integer.valueOf("9m", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getType());
      
      cMASystem0.setUrn("7wY^`OwrRLKO,%!}");
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("7wY^`OwrRLKO,%!}", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getType());
      
      String string0 = cMASystem0.getUrn();
      assertNotNull(string0);
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals("7wY^`OwrRLKO,%!}", cMASystem0.getUrn());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getType());
      assertEquals("7wY^`OwrRLKO,%!}", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      
      CMALink cMALink1 = new CMALink(cMALink0);
      assertNotNull(cMALink1);
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink1);
      assertNotNull(cMASystem1);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertSame(cMASystem0, cMASystem1);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem0);
      
      CMAType cMAType0 = CMAType.Role;
      CMASystem cMASystem2 = cMASystem1.setLinkType(cMAType0);
      assertNotNull(cMASystem2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getType());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getCreatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      CMASystem cMASystem3 = cMASystem1.setType(cMAType0);
      assertNotNull(cMASystem3);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getUrn());
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CMASystem cMASystem4 = cMASystem2.setVersion(integer0);
      assertNotNull(cMASystem4);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      
      cMASystem3.type = cMAType0;
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getUrn());
      
      CMASystem cMASystem5 = cMASystem4.setId((String) null);
      assertNotNull(cMASystem5);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getType());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      
      String string0 = cMALink1.toString();
      assertNotNull(string0);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertEquals("CMALink { CMAResource { system = CMASystem { type = Link, linkType = Link } } }", string0);
      
      cMASystem5.publishedVersion = integer0;
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertEquals(0, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals(0, (int)cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getType());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals(0, (int)cMASystem5.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      
      cMASystem5.archivedVersion = integer0;
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      assertEquals(0, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals(0, (int)cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertEquals(0, (int)cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getType());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals(0, (int)cMASystem5.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertEquals(0, (int)cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      
      String string1 = cMASystem4.toString();
      assertNotNull(string1);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(string1.equals((Object)string0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      assertEquals(0, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals(0, (int)cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertEquals(0, (int)cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertEquals("CMASystem { type = Role, version = 0, publishedVersion = 0, linkType = Role, contentType = CMALink { CMAResource { system = CMASystem { type = Link, linkType = Link } } }, archivedVersion = 0 }", string1);
      
      CMALink cMALink2 = cMASystem5.getCreatedBy();
      assertNull(cMALink2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      assertEquals(0, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals(0, (int)cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertEquals(0, (int)cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getType());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals(0, (int)cMASystem5.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertEquals(0, (int)cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      
      Integer integer1 = cMASystem5.getPublishedCounter();
      assertNull(integer1);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      assertEquals(0, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals(0, (int)cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertEquals(0, (int)cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem5.getType());
      assertNull(cMASystem5.getUpdatedAt());
      assertEquals(0, (int)cMASystem5.getVersion());
      assertNull(cMASystem5.getVisibility());
      assertEquals(0, (int)cMASystem5.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getId());
      assertEquals(0, (int)cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getPublishedCounter());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem5, cMASystem2);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem4);
      
      CMAType cMAType1 = cMASystem1.getType();
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMAType1, cMAType0);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertEquals(CMAType.Role, cMAType1);
      
      CMALink cMALink3 = cMASystem0.getUpdatedBy();
      assertNull(cMALink3);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      
      String string2 = cMASystem3.getUpdatedAt();
      assertNull(string2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem3.getType());
      assertNull(cMASystem3.getId());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertEquals(0, (int)cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getVisibility());
      assertEquals(0, (int)cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getPublishedAt());
      assertEquals(CMAType.Role, cMASystem3.getLinkType());
      assertEquals(0, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getUrn());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMAType0, cMAType1);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem4);
      
      Integer integer2 = cMASystem4.getPublishedVersion();
      assertNotNull(integer2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(0, (int)cMASystem0.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(0, (int)cMASystem0.getVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertEquals(0, (int)cMASystem0.getArchivedVersion());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink0.getId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals(0, (int)cMASystem1.getPublishedVersion());
      assertEquals(CMAType.Role, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getVisibility());
      assertEquals(0, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUpdatedAt());
      assertEquals(CMAType.Role, cMASystem1.getType());
      assertNull(cMASystem1.getId());
      assertEquals(0, (int)cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertEquals(0, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem2.getType());
      assertEquals(CMAType.Role, cMASystem2.getLinkType());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getId());
      assertEquals(0, (int)cMASystem2.getArchivedVersion());
      assertEquals(0, (int)cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals(0, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getId());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getUpdatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertEquals(0, (int)cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getVisibility());
      assertEquals(0, (int)cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getUrn());
      assertEquals(CMAType.Role, cMASystem4.getType());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.Role, cMASystem4.getLinkType());
      assertSame(cMASystem0, cMASystem4);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMAType0, cMAType1);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem1);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem3);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      
      CMASystem cMASystem1 = cMASystem0.setId("");
      assertNotNull(cMASystem1);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem1, cMASystem0);
      
      CMAType cMAType0 = CMAType.UiExtension;
      CMASystem cMASystem2 = cMASystem1.setLinkType(cMAType0);
      assertNotNull(cMASystem2);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem0.getLinkType());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.UiExtension, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("", cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getType());
      assertEquals(CMAType.UiExtension, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      
      cMASystem2.archivedVersion = null;
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem0.getLinkType());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.UiExtension, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("", cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getType());
      assertEquals(CMAType.UiExtension, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      
      CMALink cMALink1 = cMALink0.setSystem(cMASystem2);
      assertNotNull(cMALink1);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem0.getLinkType());
      assertEquals("", cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.UiExtension, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertEquals("", cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals("", cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getType());
      assertEquals(CMAType.UiExtension, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("", cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertNull(cMALink1.getVersion());
      assertEquals("", cMALink1.getId());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink1, cMALink0);
      
      CMALink cMALink2 = cMALink0.setId("&pbpK@*=M");
      assertNotNull(cMALink2);
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("&pbpK@*=M", cMALink0.getId());
      assertNull(cMALink0.getSpaceId());
      assertEquals("&pbpK@*=M", cMALink2.getId());
      assertNull(cMALink2.getSpaceId());
      assertNull(cMALink2.getVisibility());
      assertNull(cMALink2.getVersion());
      assertFalse(cMALink2.isArchived());
      assertFalse(cMALink2.isPublished());
      assertEquals("master", cMALink2.getEnvironmentId());
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMALink2, cMALink0);
      assertSame(cMALink2, cMALink1);
      
      CMASystem cMASystem3 = cMASystem2.setSpace(cMALink0);
      assertNotNull(cMASystem3);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("&pbpK@*=M", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.UiExtension, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertEquals("&pbpK@*=M", cMASystem1.getId());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getType());
      assertEquals(CMAType.UiExtension, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("&pbpK@*=M", cMASystem2.getId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("&pbpK@*=M", cMALink0.getId());
      assertEquals("&pbpK@*=M", cMALink0.getSpaceId());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.UiExtension, cMASystem3.getLinkType());
      assertEquals("&pbpK@*=M", cMASystem3.getId());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      
      Integer integer0 = cMASystem3.getPublishedVersion();
      assertNull(integer0);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("&pbpK@*=M", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.UiExtension, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertEquals("&pbpK@*=M", cMASystem1.getId());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem2.getType());
      assertEquals(CMAType.UiExtension, cMASystem2.getLinkType());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertNull(cMASystem2.getVersion());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertEquals("&pbpK@*=M", cMASystem2.getId());
      assertNull(cMALink0.getVisibility());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertEquals("&pbpK@*=M", cMALink0.getId());
      assertEquals("&pbpK@*=M", cMALink0.getSpaceId());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.UiExtension, cMASystem3.getLinkType());
      assertEquals("&pbpK@*=M", cMASystem3.getId());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getType());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getVersion());
      assertNull(cMASystem3.getArchivedVersion());
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMALink0, cMALink2);
      assertSame(cMALink0, cMALink1);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem3, cMASystem2);
      
      CMALink cMALink3 = cMASystem1.getUpdatedBy();
      assertNull(cMALink3);
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals("&pbpK@*=M", cMASystem0.getId());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals(CMAType.UiExtension, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertEquals(CMAType.UiExtension, cMASystem1.getLinkType());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getType());
      assertEquals("&pbpK@*=M", cMASystem1.getId());
      assertNull(cMASystem1.getUpdatedAt());
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      
      CMALink cMALink0 = new CMALink();
      assertNotNull(cMALink0);
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      
      CMALink cMALink1 = new CMALink(cMALink0);
      assertNotNull(cMALink1);
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink1);
      assertNotNull(cMASystem1);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertNull(cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertSame(cMASystem0, cMASystem1);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem0);
      
      Integer integer0 = new Integer(25);
      assertNotNull(integer0);
      assertEquals(25, (int)integer0);
      
      CMASystem cMASystem2 = cMASystem1.setVersion(integer0);
      assertNotNull(cMASystem2);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(25, (int)cMASystem0.getVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getId());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertEquals(25, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getVisibility());
      assertEquals(25, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getId());
      assertNull(cMASystem2.getArchivedVersion());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      
      CMASystem cMASystem3 = cMASystem2.setId("[I,glAFr");
      assertNotNull(cMASystem3);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("[I,glAFr", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(25, (int)cMASystem0.getVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("[I,glAFr", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertNull(cMASystem1.getLinkType());
      assertEquals(25, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem2.getUpdatedAt());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getLinkType());
      assertNull(cMASystem2.getVisibility());
      assertEquals(25, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals("[I,glAFr", cMASystem2.getId());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getLinkType());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getType());
      assertEquals("[I,glAFr", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(25, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      
      CMAType cMAType0 = CMAType.EditorInterface;
      CMASystem cMASystem4 = cMASystem3.setLinkType(cMAType0);
      assertNotNull(cMASystem4);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("[I,glAFr", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(25, (int)cMASystem0.getVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("[I,glAFr", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getType());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(25, (int)cMASystem1.getVersion());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(CMAType.EditorInterface, cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertEquals(25, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals("[I,glAFr", cMASystem2.getId());
      assertNull(cMASystem2.getType());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertNull(cMASystem3.getType());
      assertEquals("[I,glAFr", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(25, (int)cMASystem3.getVersion());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem4.getType());
      assertNull(cMASystem4.getUrn());
      assertEquals("[I,glAFr", cMASystem4.getId());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem4.getLinkType());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals(25, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      
      CMAType cMAType1 = CMAType.WebhookDefinition;
      CMASystem cMASystem5 = cMASystem4.setType(cMAType1);
      assertNotNull(cMASystem5);
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.WebhookDefinition, cMASystem0.getType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("[I,glAFr", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(25, (int)cMASystem0.getVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("[I,glAFr", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(25, (int)cMASystem1.getVersion());
      assertEquals(CMAType.WebhookDefinition, cMASystem1.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(CMAType.WebhookDefinition, cMASystem2.getType());
      assertEquals(CMAType.EditorInterface, cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertEquals(25, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals("[I,glAFr", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals("[I,glAFr", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(25, (int)cMASystem3.getVersion());
      assertEquals(CMAType.WebhookDefinition, cMASystem3.getType());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem4.getUrn());
      assertEquals("[I,glAFr", cMASystem4.getId());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem4.getLinkType());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals(CMAType.WebhookDefinition, cMASystem4.getType());
      assertEquals(25, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("[I,glAFr", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals(25, (int)cMASystem5.getVersion());
      assertEquals(CMAType.WebhookDefinition, cMASystem5.getType());
      assertEquals(CMAType.EditorInterface, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem2);
      
      CMAType cMAType2 = cMASystem5.getLinkType();
      assertFalse(cMALink0.equals((Object)cMALink1));
      assertFalse(cMALink1.equals((Object)cMALink0));
      assertFalse(cMAType0.equals((Object)cMAType1));
      assertFalse(cMAType1.equals((Object)cMAType0));
      assertFalse(cMAType2.equals((Object)cMAType1));
      assertNull(cMASystem0.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem0.getLinkType());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.WebhookDefinition, cMASystem0.getType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getPublishedCounter());
      assertEquals("[I,glAFr", cMASystem0.getId());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertEquals(25, (int)cMASystem0.getVersion());
      assertNull(cMALink0.getId());
      assertNull(cMALink0.getVisibility());
      assertFalse(cMALink0.isArchived());
      assertFalse(cMALink0.isPublished());
      assertNull(cMALink0.getSpaceId());
      assertEquals("master", cMALink0.getEnvironmentId());
      assertNull(cMALink0.getVersion());
      assertNull(cMALink1.getSpaceId());
      assertNull(cMALink1.getVisibility());
      assertNull(cMALink1.getId());
      assertNull(cMALink1.getVersion());
      assertFalse(cMALink1.isArchived());
      assertFalse(cMALink1.isPublished());
      assertEquals("master", cMALink1.getEnvironmentId());
      assertEquals("[I,glAFr", cMASystem1.getId());
      assertNull(cMASystem1.getPublishedVersion());
      assertNull(cMASystem1.getPublishedAt());
      assertNull(cMASystem1.getVisibility());
      assertNull(cMASystem1.getArchivedVersion());
      assertNull(cMASystem1.getUpdatedAt());
      assertNull(cMASystem1.getPublishedCounter());
      assertNull(cMASystem1.getCreatedAt());
      assertEquals(25, (int)cMASystem1.getVersion());
      assertEquals(CMAType.WebhookDefinition, cMASystem1.getType());
      assertNull(cMASystem1.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem1.getLinkType());
      assertNull(cMASystem1.getUrn());
      assertNull(cMASystem2.getUpdatedAt());
      assertEquals(CMAType.WebhookDefinition, cMASystem2.getType());
      assertEquals(CMAType.EditorInterface, cMASystem2.getLinkType());
      assertNull(cMASystem2.getFirstPublishedAt());
      assertNull(cMASystem2.getVisibility());
      assertEquals(25, (int)cMASystem2.getVersion());
      assertNull(cMASystem2.getPublishedCounter());
      assertNull(cMASystem2.getCreatedAt());
      assertEquals("[I,glAFr", cMASystem2.getId());
      assertNull(cMASystem2.getPublishedAt());
      assertNull(cMASystem2.getUrn());
      assertNull(cMASystem2.getPublishedVersion());
      assertNull(cMASystem2.getArchivedVersion());
      assertNull(cMASystem3.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem3.getLinkType());
      assertNull(cMASystem3.getUpdatedAt());
      assertNull(cMASystem3.getArchivedVersion());
      assertNull(cMASystem3.getCreatedAt());
      assertNull(cMASystem3.getPublishedVersion());
      assertNull(cMASystem3.getPublishedCounter());
      assertEquals("[I,glAFr", cMASystem3.getId());
      assertNull(cMASystem3.getPublishedAt());
      assertNull(cMASystem3.getUrn());
      assertEquals(25, (int)cMASystem3.getVersion());
      assertEquals(CMAType.WebhookDefinition, cMASystem3.getType());
      assertNull(cMASystem3.getVisibility());
      assertNull(cMASystem4.getUrn());
      assertEquals("[I,glAFr", cMASystem4.getId());
      assertNull(cMASystem4.getPublishedAt());
      assertNull(cMASystem4.getArchivedVersion());
      assertNull(cMASystem4.getCreatedAt());
      assertNull(cMASystem4.getPublishedCounter());
      assertNull(cMASystem4.getPublishedVersion());
      assertNull(cMASystem4.getFirstPublishedAt());
      assertEquals(CMAType.EditorInterface, cMASystem4.getLinkType());
      assertNull(cMASystem4.getUpdatedAt());
      assertEquals(CMAType.WebhookDefinition, cMASystem4.getType());
      assertEquals(25, (int)cMASystem4.getVersion());
      assertNull(cMASystem4.getVisibility());
      assertNull(cMASystem5.getPublishedCounter());
      assertNull(cMASystem5.getCreatedAt());
      assertNull(cMASystem5.getFirstPublishedAt());
      assertEquals("[I,glAFr", cMASystem5.getId());
      assertNull(cMASystem5.getPublishedAt());
      assertNull(cMASystem5.getArchivedVersion());
      assertNull(cMASystem5.getVisibility());
      assertNull(cMASystem5.getUrn());
      assertNull(cMASystem5.getPublishedVersion());
      assertEquals(25, (int)cMASystem5.getVersion());
      assertEquals(CMAType.WebhookDefinition, cMASystem5.getType());
      assertEquals(CMAType.EditorInterface, cMASystem5.getLinkType());
      assertNull(cMASystem5.getUpdatedAt());
      assertSame(cMASystem0, cMASystem5);
      assertSame(cMASystem0, cMASystem1);
      assertSame(cMASystem0, cMASystem3);
      assertSame(cMASystem0, cMASystem2);
      assertSame(cMASystem0, cMASystem4);
      assertNotSame(cMALink0, cMALink1);
      assertNotSame(cMALink1, cMALink0);
      assertSame(cMASystem1, cMASystem2);
      assertSame(cMASystem1, cMASystem4);
      assertSame(cMASystem1, cMASystem0);
      assertSame(cMASystem1, cMASystem3);
      assertSame(cMASystem1, cMASystem5);
      assertSame(cMASystem2, cMASystem0);
      assertSame(cMASystem2, cMASystem5);
      assertSame(cMASystem2, cMASystem1);
      assertSame(cMASystem2, cMASystem3);
      assertSame(cMASystem2, cMASystem4);
      assertSame(cMASystem3, cMASystem4);
      assertSame(cMASystem3, cMASystem2);
      assertSame(cMASystem3, cMASystem5);
      assertSame(cMASystem3, cMASystem1);
      assertSame(cMASystem3, cMASystem0);
      assertNotSame(cMAType0, cMAType1);
      assertSame(cMAType0, cMAType2);
      assertSame(cMASystem4, cMASystem2);
      assertSame(cMASystem4, cMASystem3);
      assertSame(cMASystem4, cMASystem5);
      assertSame(cMASystem4, cMASystem0);
      assertSame(cMASystem4, cMASystem1);
      assertNotSame(cMAType1, cMAType2);
      assertNotSame(cMAType1, cMAType0);
      assertSame(cMASystem5, cMASystem1);
      assertSame(cMASystem5, cMASystem0);
      assertSame(cMASystem5, cMASystem3);
      assertSame(cMASystem5, cMASystem4);
      assertSame(cMASystem5, cMASystem2);
      assertNotSame(cMAType2, cMAType1);
      assertSame(cMAType2, cMAType0);
      assertEquals(CMAType.EditorInterface, cMAType2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      
      CMAType cMAType0 = CMAType.SpaceMembership;
      cMASystem0.linkType = cMAType0;
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      
      String string0 = cMASystem0.toString();
      assertNotNull(string0);
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertEquals(CMAType.SpaceMembership, cMASystem0.getLinkType());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getId());
      assertEquals("CMASystem { linkType = SpaceMembership }", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      assertNotNull(cMASystem0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
      
      Integer integer0 = cMASystem0.getPublishedVersion();
      assertNull(integer0);
      assertNull(cMASystem0.getFirstPublishedAt());
      assertNull(cMASystem0.getVersion());
      assertNull(cMASystem0.getUpdatedAt());
      assertNull(cMASystem0.getId());
      assertNull(cMASystem0.getArchivedVersion());
      assertNull(cMASystem0.getLinkType());
      assertNull(cMASystem0.getPublishedVersion());
      assertNull(cMASystem0.getCreatedAt());
      assertNull(cMASystem0.getType());
      assertNull(cMASystem0.getPublishedCounter());
      assertNull(cMASystem0.getVisibility());
      assertNull(cMASystem0.getPublishedAt());
      assertNull(cMASystem0.getUrn());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.Space;
      CMASystem cMASystem1 = cMASystem0.setType(cMAType0);
      cMASystem1.archivedVersion = null;
      cMASystem1.getCreatedAt();
      cMASystem0.getCreatedAt();
      cMASystem0.getVersion();
      cMASystem1.toString();
      CMAType cMAType1 = CMAType.PreviewApiKey;
      CMASystem cMASystem2 = cMASystem1.setType(cMAType1);
      cMASystem0.getPublishedCounter();
      CMALink cMALink0 = new CMALink(cMAType1);
      cMASystem2.firstPublishedAt = null;
      CMALink cMALink1 = cMALink0.setVersion((Integer) null);
      CMASystem cMASystem3 = cMASystem2.setLinkType(cMAType0);
      cMASystem3.publishedCounter = null;
      CMALink cMALink2 = cMALink1.setSystem(cMASystem3);
      CMALink cMALink3 = cMALink2.setId("*!'!N9");
      cMASystem2.setSpace(cMALink3);
      cMASystem3.toString();
      cMASystem2.setType(cMAType1);
      cMASystem0.getPublishedAt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.Asset;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMALink cMALink1 = cMALink0.setSpaceId("");
      cMALink1.setSystem(cMASystem0);
      CMALink cMALink2 = cMALink1.setSystem(cMASystem0);
      CMALink cMALink3 = cMALink2.setId("4jvjH");
      CMAVisibility cMAVisibility0 = CMAVisibility.publicVisibility;
      cMALink0.setVisibility(cMAVisibility0);
      Integer integer0 = new Integer((-1163));
      CMALink cMALink4 = cMALink0.setId("4jvjH");
      cMALink3.setVersion(integer0);
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink3);
      cMASystem1.getContentType();
      CMALink cMALink5 = cMASystem0.getSpace();
      assertSame(cMALink5, cMALink4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setId((String) null);
      CMAType cMAType0 = CMAType.WebhookCallOverview;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMASystem cMASystem2 = cMASystem1.setSpace(cMALink0);
      cMASystem1.setSpace(cMALink0);
      CMAType cMAType1 = CMAType.SpacePeriodicUsage;
      CMASystem cMASystem3 = cMASystem2.setLinkType(cMAType1);
      CMASystem cMASystem4 = cMASystem3.setContentType(cMALink0);
      CMASystem cMASystem5 = cMASystem4.setType(cMAType0);
      CMALink cMALink1 = cMASystem5.getPublishedBy();
      assertNull(cMALink1);
      
      cMASystem0.getId();
      assertEquals(CMAType.WebhookCallOverview, cMASystem0.getType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.Webhook;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      CMASystem cMASystem1 = cMASystem0.setContentType(cMALink1);
      cMASystem0.setType(cMAType0);
      CMALink cMALink2 = cMASystem1.getOrganization();
      assertNull(cMALink2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      cMASystem0.id = "c>)dW]";
      CMAType cMAType0 = CMAType.SpaceMembership;
      cMASystem0.linkType = cMAType0;
      Integer integer0 = new Integer(3972);
      cMASystem0.version = integer0;
      cMASystem0.getEnvironmentalStatus();
      CMAType cMAType1 = CMAType.Link;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType1);
      cMASystem1.updatedAt = "publishedCounter";
      CMASystem cMASystem2 = cMASystem1.setId("c>)dW]");
      cMASystem2.environmentStatus = null;
      Integer integer1 = new Integer(64);
      CMASystem cMASystem3 = cMASystem2.setVersion(integer1);
      cMASystem3.updatedBy = null;
      CMAType cMAType2 = CMAType.Webhook;
      cMASystem1.id = "c>)dW]";
      cMASystem1.linkType = cMAType2;
      cMASystem0.getFirstPublishedAt();
      cMASystem0.getPublishedBy();
      cMASystem1.getContentType();
      cMASystem0.getEnvironment();
      cMASystem0.setLinkType(cMAType2);
      cMASystem0.firstPublishedAt = "c>)dW]";
      cMASystem0.getPublishedCounter();
      cMASystem2.getOrganization();
      cMASystem3.getArchivedVersion();
      assertEquals(64, (int)cMASystem2.getVersion());
      assertEquals("c>)dW]", cMASystem0.getFirstPublishedAt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      Integer integer0 = new Integer(0);
      CMASystem cMASystem1 = cMASystem0.setVersion(integer0);
      CMASystem cMASystem2 = cMASystem1.setId("i8C`#06M.'5J");
      cMASystem2.publishedVersion = integer0;
      CMAType cMAType0 = CMAType.Upload;
      CMASystem cMASystem3 = cMASystem2.setType(cMAType0);
      CMALink cMALink0 = new CMALink(cMAType0);
      CMALink cMALink1 = cMALink0.setSpaceId("i8C`#06M.'5J");
      CMASystem cMASystem4 = cMASystem3.setContentType(cMALink1);
      CMASystem cMASystem5 = cMASystem4.setSpace(cMALink0);
      cMASystem5.setSpace(cMALink0);
      CMALink cMALink2 = cMASystem0.getEnvironment();
      assertNull(cMALink2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setContentType((CMALink) null);
      assertNull(cMASystem1.getArchivedVersion());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAVisibility cMAVisibility0 = CMAVisibility.privateVisibility;
      cMASystem0.setVisibility(cMAVisibility0);
      Integer integer0 = cMASystem0.getArchivedVersion();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      CMAVisibility cMAVisibility0 = CMAVisibility.publicVisibility;
      cMALink1.setVisibility(cMAVisibility0);
      Integer integer0 = new Integer((-1488));
      CMALink cMALink2 = cMALink1.setVersion(integer0);
      CMALink cMALink3 = cMALink2.setId("");
      CMALink cMALink4 = new CMALink(cMALink3);
      cMASystem0.publishedBy = cMALink4;
      cMASystem0.id = "MU}tC5Grv$HUj'Wo#,";
      cMASystem0.getUpdatedAt();
      cMASystem0.getContentType();
      cMASystem0.getArchivedVersion();
      cMASystem0.getArchivedVersion();
      CMAVisibility cMAVisibility1 = CMAVisibility.privateVisibility;
      cMASystem0.setVisibility(cMAVisibility1);
      cMASystem0.setContentType(cMALink3);
      CMAVisibility cMAVisibility2 = cMASystem0.getVisibility();
      assertFalse(cMAVisibility2.equals((Object)cMAVisibility0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      Integer integer0 = new Integer(0);
      CMASystem cMASystem1 = cMASystem0.setVersion(integer0);
      CMAType cMAType0 = CMAType.Organization;
      CMASystem cMASystem2 = cMASystem1.setType(cMAType0);
      CMASystem cMASystem3 = cMASystem2.setId("> [j<");
      CMAType cMAType1 = CMAType.WebhookDefinition;
      CMASystem cMASystem4 = cMASystem3.setLinkType(cMAType1);
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = cMALink0.setSpaceId("> [j<");
      CMALink cMALink2 = new CMALink(cMALink1);
      CMASystem cMASystem5 = cMASystem4.setSpace(cMALink2);
      CMALink cMALink3 = cMASystem5.getContentType();
      assertNull(cMALink3);
      assertEquals(CMAType.WebhookDefinition, cMASystem5.getLinkType());
      assertEquals(CMAType.Organization, cMASystem5.getType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setId("i!#}$UF\"Az/ng=W3zT@");
      assertEquals("i!#}$UF\"Az/ng=W3zT@", cMASystem1.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setSpace((CMALink) null);
      assertNull(cMASystem1.getCreatedAt());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setVersion((Integer) null);
      assertSame(cMASystem0, cMASystem1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      CMAType cMAType0 = CMAType.Webhook;
      CMASystem cMASystem1 = cMASystem0.setLinkType(cMAType0);
      assertNull(cMASystem1.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CMASystem cMASystem0 = new CMASystem();
      Integer integer0 = new Integer(22);
      CMASystem cMASystem1 = cMASystem0.setVersion(integer0);
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = new CMALink(cMALink0);
      CMASystem cMASystem2 = cMASystem1.setSpace(cMALink1);
      CMAType cMAType0 = CMAType.Asset;
      CMASystem cMASystem3 = cMASystem2.setType(cMAType0);
      CMASystem cMASystem4 = cMASystem3.setId("7}11+{h9kwZz:vcxK");
      CMAType cMAType1 = CMAType.Entry;
      CMASystem cMASystem5 = cMASystem4.setLinkType(cMAType1);
      assertEquals(CMAType.Entry, cMASystem5.getLinkType());
      
      cMASystem5.setLinkType(cMAType0);
      CMALink cMALink2 = cMALink1.setSystem(cMASystem2);
      cMASystem2.setSpace(cMALink2);
      cMASystem3.createdAt = "9sd&DP?";
      cMASystem4.getId();
      cMASystem4.getVersion();
      assertEquals("7}11+{h9kwZz:vcxK", cMASystem0.getId());
  }
}
