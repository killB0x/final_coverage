/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:06:13 GMT 2022
 */

package com.contentful.java.cma.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMASpaceMembership;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMASpaceMembership_ESTest extends CMASpaceMembership_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.setIsAdmin(true);
      Integer integer0 = new Integer(0);
      cMASpaceMembership0.setVersion(integer0);
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setIsAdmin(true);
      CMAType cMAType0 = CMAType.Link;
      CMALink cMALink0 = new CMALink(cMAType0);
      cMASpaceMembership1.setUser(cMALink0);
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setIsAdmin(true);
      cMASpaceMembership1.setSpaceId((String) null);
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setIsAdmin(true);
      CMALink[] cMALinkArray0 = new CMALink[9];
      cMASpaceMembership1.setRoles(cMALinkArray0);
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setIsAdmin(false);
      assertFalse(cMASpaceMembership1.isAdmin());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setIsAdmin(true);
      cMASpaceMembership1.setId(":d4bGjdBn1");
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setAdmin(false);
      assertFalse(cMASpaceMembership1.isAdmin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.setIsAdmin(true);
      boolean boolean0 = cMASpaceMembership0.isAdmin();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMALink cMALink0 = new CMALink(cMASpaceMembership0);
      cMASpaceMembership0.setUser(cMALink0);
      CMALink cMALink1 = cMASpaceMembership0.getUser();
      assertSame(cMALink1, cMALink0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMAType cMAType0 = CMAType.Space;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.addRole(cMALink0);
      List<CMALink> list0 = cMASpaceMembership1.getRoles();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setEmail("@");
      String string0 = cMASpaceMembership1.getEmail();
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASystem cMASystem0 = cMASpaceMembership0.system;
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      cMASystem0.setSpace(cMALink1);
      // Undeclared exception!
      try { 
        cMASpaceMembership0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASystem cMASystem0 = cMASpaceMembership0.system;
      CMALink cMALink0 = new CMALink();
      CMALink cMALink1 = cMALink0.setSystem(cMASystem0);
      cMASystem0.publishedBy = cMALink1;
      // Undeclared exception!
      try { 
        cMASpaceMembership0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.setSystem((CMASystem) null);
      Integer integer0 = new Integer((-1619));
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setVersion(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.system = null;
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setSpaceId("CMALink { ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.setSystem((CMASystem) null);
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setId("version");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.CMAResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      String string0 = cMASpaceMembership0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      List<CMALink> list0 = cMASpaceMembership0.getRoles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setEmail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // email needs to contain an '@' symbol.
         //
         verifyException("com.contentful.java.cma.model.CMASpaceMembership", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setEmail((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // email cannot be null.
         //
         verifyException("com.contentful.java.cma.model.CMASpaceMembership", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMALink[] cMALinkArray0 = new CMALink[8];
      CMAType cMAType0 = CMAType.Space;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setRoles(cMALinkArray0);
      CMASpaceMembership cMASpaceMembership2 = cMASpaceMembership1.addRole(cMALink0);
      assertFalse(cMASpaceMembership2.isPublished());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      // Undeclared exception!
      try { 
        cMASpaceMembership0.addRole((CMALink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Role cannot be null!
         //
         verifyException("com.contentful.java.cma.model.CMASpaceMembership", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMALink[] cMALinkArray0 = new CMALink[0];
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setRoles(cMALinkArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Roles cannot be empty!
         //
         verifyException("com.contentful.java.cma.model.CMASpaceMembership", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      // Undeclared exception!
      try { 
        cMASpaceMembership0.setRoles((CMALink[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Roles cannot be null!
         //
         verifyException("com.contentful.java.cma.model.CMASpaceMembership", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      Integer integer0 = new Integer(2);
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setVersion(integer0);
      assertNull(cMASpaceMembership1.getVisibility());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.setIsAdmin(true);
      CMAType cMAType0 = CMAType.Entry;
      CMALink cMALink0 = new CMALink(cMAType0);
      cMASpaceMembership0.addRole(cMALink0);
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setSpaceId("A2\"2Q^SHkA1{,[i>P=");
      assertFalse(cMASpaceMembership1.isPublished());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      String string0 = cMASpaceMembership0.toString();
      assertEquals("CMASpaceMembership { CMAResource { system = CMASystem { type = SpaceMembership } } admin = false, email = null, roles = null, user = null }", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      cMASpaceMembership0.setAdmin(true);
      cMASpaceMembership0.setEmail("iZl;dA6DS/[@yI~1$b");
      assertTrue(cMASpaceMembership0.isAdmin());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMALink cMALink0 = cMASpaceMembership0.getUser();
      assertNull(cMALink0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      CMASpaceMembership cMASpaceMembership1 = cMASpaceMembership0.setId("A2\"2Q^SHkA1{,[i>P=");
      assertSame(cMASpaceMembership1, cMASpaceMembership0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CMASpaceMembership cMASpaceMembership0 = new CMASpaceMembership();
      boolean boolean0 = cMASpaceMembership0.isAdmin();
      assertFalse(boolean0);
  }
}
