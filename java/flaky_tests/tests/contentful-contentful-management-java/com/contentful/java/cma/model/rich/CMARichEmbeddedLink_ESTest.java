/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:22:27 GMT 2022
 */

package com.contentful.java.cma.model.rich;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contentful.java.cma.model.CMALink;
import com.contentful.java.cma.model.CMASystem;
import com.contentful.java.cma.model.CMAType;
import com.contentful.java.cma.model.rich.CMARichEmbeddedLink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMARichEmbeddedLink_ESTest extends CMARichEmbeddedLink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMALink cMALink0 = new CMALink();
      cMALink0.setSystem((CMASystem) null);
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMALink0);
      // Undeclared exception!
      try { 
        cMARichEmbeddedLink0.getNodeType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.rich.CMARichEmbeddedLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem0 = new CMASystem();
      CMASystem cMASystem1 = cMASystem0.setSpace(cMALink0);
      cMALink0.setSystem(cMASystem1);
      CMARichEmbeddedLink cMARichEmbeddedLink0 = null;
      try {
        cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMASystem0, true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMARichEmbeddedLink cMARichEmbeddedLink0 = null;
      try {
        cMARichEmbeddedLink0 = new CMARichEmbeddedLink((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.rich.CMARichHyperLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMALink cMALink0 = new CMALink();
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMALink0);
      CMARichEmbeddedLink cMARichEmbeddedLink1 = null;
      try {
        cMARichEmbeddedLink1 = new CMARichEmbeddedLink(cMARichEmbeddedLink0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target com.contentful.java.cma.model.rich.CMARichEmbeddedLink@3 of type 'com.contentful.java.cma.model.rich.CMARichEmbeddedLink'is neither a String, nor a CMAAsset, nor a  CMAEntry.
         //
         verifyException("com.contentful.java.cma.model.rich.CMARichHyperLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMALink cMALink0 = new CMALink();
      CMASystem cMASystem0 = new CMASystem();
      cMASystem0.setContentType(cMALink0);
      cMALink0.setSystem(cMASystem0);
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMASystem0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMARichEmbeddedLink cMARichEmbeddedLink0 = null;
      try {
        cMARichEmbeddedLink0 = new CMARichEmbeddedLink((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contentful.java.cma.model.rich.CMARichHyperLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMALink cMALink0 = new CMALink();
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMALink0);
      CMARichEmbeddedLink cMARichEmbeddedLink1 = null;
      try {
        cMARichEmbeddedLink1 = new CMARichEmbeddedLink(cMARichEmbeddedLink0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target com.contentful.java.cma.model.rich.CMARichEmbeddedLink@3 of type 'com.contentful.java.cma.model.rich.CMARichEmbeddedLink'is neither a String, nor a CMAAsset, nor a  CMAEntry.
         //
         verifyException("com.contentful.java.cma.model.rich.CMARichHyperLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAType cMAType0 = CMAType.Entry;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMALink0);
      String string0 = cMARichEmbeddedLink0.getNodeType();
      assertEquals("embedded-entry-block", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAType cMAType0 = CMAType.Asset;
      CMALink cMALink0 = new CMALink(cMAType0);
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMALink0);
      String string0 = cMARichEmbeddedLink0.getNodeType();
      assertEquals("embedded-asset-block", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CMALink cMALink0 = new CMALink();
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink(cMALink0, true);
      String string0 = cMARichEmbeddedLink0.getNodeType();
      assertEquals("hyperlink", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMARichEmbeddedLink cMARichEmbeddedLink0 = new CMARichEmbeddedLink("l3wB2A8' qI");
      String string0 = cMARichEmbeddedLink0.getNodeType();
      assertEquals("hyperlink", string0);
  }
}
