/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 02:12:25 GMT 2022
 */

package com.uaihebert.uaidummy.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.uaihebert.uaidummy.utils.RandomUtils;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Integer> list0 = RandomUtils.randomNumberList((-870), (-870), (-978));
      assertFalse(list0.contains((-978)));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Integer> list0 = RandomUtils.randomNumberList((-887));
      assertFalse(list0.contains((-887)));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = RandomUtils.nextIntBetween(0, (-1870));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = RandomUtils.nextIntBetween(9, (-870));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = RandomUtils.nextIntBetween((-595), (-921));
      assertEquals((-595), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1057);
      int int0 = RandomUtils.nextInt(1079);
      assertEquals(1057, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.randomNumberList(2477, 1, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Integer> list0 = RandomUtils.randomNumberList(3955);
      assertFalse(list0.contains(3955));
      assertFalse(list0.isEmpty());
      assertEquals(3955, list0.size());
      assertNotNull(list0);
      
      List<Integer> list1 = RandomUtils.randomNumberList(3955, 3955, 9);
      assertTrue(list1.contains(3955));
      assertFalse(list1.contains(9));
      assertEquals(3955, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      
      // Undeclared exception!
      RandomUtils.randomNumberList(2850);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = RandomUtils.nextInt(1079);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextIntBetween(925, 925);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomUtils.randomNumberList(4004);
      RandomUtils.randomNumberList(4004, 4004, 4004);
      // Undeclared exception!
      RandomUtils.randomNumberList(4004, 4004, 4004);
  }
}
