/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:14:03 GMT 2022
 */

package com.teodorstoev.adaptivestreams;

import org.junit.Test;
import static org.junit.Assert.*;
import com.teodorstoev.adaptivestreams.DefaultResourceMonitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultResourceMonitor_ESTest extends DefaultResourceMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor(0.0);
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor(1.0);
      defaultResourceMonitor0.isEnoughMemoryAvailable();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor(3690.35);
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor((-1.0));
      defaultResourceMonitor0.isEnoughMemoryAvailable();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor(99.1371458886);
      defaultResourceMonitor0.isEnoughCpuAvailable();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor((-808.0));
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      defaultResourceMonitor0.isEnoughMemoryAvailable();
      defaultResourceMonitor0.isEnoughCpuAvailable();
      boolean boolean0 = defaultResourceMonitor0.isEnoughMemoryAvailable();
      assertFalse(boolean0);
      
      boolean boolean1 = defaultResourceMonitor0.isEnoughCpuAvailable();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultResourceMonitor defaultResourceMonitor0 = new DefaultResourceMonitor((-1.0));
      boolean boolean0 = defaultResourceMonitor0.isEnoughCpuAvailable();
      assertFalse(boolean0);
  }
}
