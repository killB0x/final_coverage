/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 08:42:23 GMT 2022
 */

package org.jeesy.classinfo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jeesy.classinfo.AnnotatedNode;
import org.jeesy.classinfo.ClassInfo;
import org.jeesy.classinfo.ClassInfoScanner;
import org.jeesy.classinfo.MethodInfo;
import org.jeesy.classinfo.PropertyInfo;
import org.jeesy.classinfo.TypeInfo;
import org.jeesy.classinfo.Types;
import org.jeesy.classinfo.indexes.ClassIndex;
import org.jeesy.classinfo.indexes.PropertyByAnnotationIndex;
import org.jeesy.classinfo.selector.InstantiationBehaviour;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInfo_ESTest extends TypeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0, methodInfo_ParameterInfo0);
      Class<Types.WildcardTypeImpl> class1 = typeInfo0.rawType;
      TypeInfo<Object> typeInfo1 = new TypeInfo<Object>(class1);
      TypeInfo<Object> typeInfo2 = typeInfo1.withAnnotatedNode(methodInfo_ParameterInfo0);
      assertFalse(typeInfo2.hasParameters());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      Type type0 = typeInfo0.resolveType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      ClassInfo<Types.WildcardTypeImpl> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      TypeInfo<ClassIndex> typeInfo0 = new TypeInfo<ClassIndex>(types_ParameterizedTypeImpl0, classInfo0);
      TypeInfo typeInfo1 = typeInfo0.resolveParameter(1);
      assertFalse(typeInfo1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Class<Object> class1 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfo(class1);
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      ClassInfo<Types.WildcardTypeImpl> classInfo1 = new ClassInfo<Types.WildcardTypeImpl>(class0, classInfo0, classInfoScanner0);
      Class<Types.WildcardTypeImpl> class2 = classInfo1.getType();
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class2);
      Class<ClassIndex> class3 = ClassIndex.class;
      ClassInfo classInfo2 = classInfoScanner0.computeValue(class3);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0, classInfo2);
      TypeInfo typeInfo1 = typeInfo0.resolveForClass(class3);
      assertTrue(typeInfo1.isArray());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      TypeInfo<?> typeInfo1 = typeInfo0.resolve(types_ParameterizedTypeImpl0);
      assertTrue(typeInfo1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(class0);
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      TypeInfo<?> typeInfo1 = typeInfo0.resolve(types_GenericArrayTypeImpl0);
      assertTrue(typeInfo1.isArray());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0);
      boolean boolean0 = typeInfo0.isArray();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      TypeInfo<Object> typeInfo0 = new TypeInfo<Object>(types_ParameterizedTypeImpl0);
      boolean boolean0 = typeInfo0.hasParameters();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0, methodInfo_ParameterInfo0);
      Class<Types.WildcardTypeImpl> class1 = typeInfo0.rawType;
      TypeInfo<Object> typeInfo1 = new TypeInfo<Object>(class1);
      TypeInfo<?> typeInfo2 = typeInfo1.getSupertype(class1);
      assertTrue(typeInfo2.isArray());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      TypeInfo<Object> typeInfo0 = new TypeInfo<Object>(types_ParameterizedTypeImpl0);
      TypeInfo<?> typeInfo1 = typeInfo0.getSupertype(class0);
      assertTrue(typeInfo1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ClassIndex> class0 = ClassIndex.class;
      TypeInfo<ClassIndex> typeInfo0 = TypeInfo.forClass(class0);
      Class<ClassIndex> class1 = typeInfo0.getRawType();
      assertEquals("interface org.jeesy.classinfo.indexes.ClassIndex", class1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Class<Object>> typeInfo0 = new TypeInfo<Class<Object>>(class0);
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode();
      TypeInfo<Class<Object>> typeInfo1 = typeInfo0.withAnnotatedNode(annotatedNode_BaseAnnotatedNode0);
      AnnotatedNode annotatedNode0 = typeInfo1.getAnnotatedNode();
      assertSame(annotatedNode0, annotatedNode_BaseAnnotatedNode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0);
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      TypeInfo<?> typeInfo0 = TypeInfo.forType((Type) types_GenericArrayTypeImpl0, (AnnotatedNode) classInfo0);
      assertTrue(typeInfo0.isArray());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<?> typeInfo0 = TypeInfo.forType((Type) class0, (AnnotatedNode) null);
      assertFalse(typeInfo0.isArray());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      TypeInfo<?> typeInfo0 = TypeInfo.forType((Type) types_GenericArrayTypeImpl0);
      assertTrue(typeInfo0.isArray());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      TypeInfo<?> typeInfo0 = TypeInfo.forType((Type) types_ParameterizedTypeImpl0);
      assertFalse(typeInfo0.isArray());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0, methodInfo_ParameterInfo0);
      Class<Types.WildcardTypeImpl> class1 = typeInfo0.rawType;
      TypeInfo<Types.WildcardTypeImpl> typeInfo1 = TypeInfo.forClass(class1, (AnnotatedNode) methodInfo_ParameterInfo0);
      assertNotSame(typeInfo0, typeInfo1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0);
      Class<Types.WildcardTypeImpl> class1 = typeInfo0.getRawType();
      TypeInfo<Types.WildcardTypeImpl> typeInfo1 = TypeInfo.forClass(class1);
      assertNotSame(typeInfo1, typeInfo0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[0];
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      ClassInfo<Types.WildcardTypeImpl> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      TypeInfo<ClassIndex> typeInfo0 = new TypeInfo<ClassIndex>(types_ParameterizedTypeImpl0, classInfo0);
      // Undeclared exception!
      try { 
        typeInfo0.resolveParameter((-2985));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2985 out of bounds for length 0
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        typeInfo0.resolveForClass((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        typeInfo0.resolve((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeInfo<Object> typeInfo0 = TypeInfo.forClass(class0);
      Class<Types.WildcardTypeImpl> class1 = Types.WildcardTypeImpl.class;
      // Undeclared exception!
      try { 
        typeInfo0.getSupertype(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class org.jeesy.classinfo.Types$WildcardTypeImpl is not a supertype of class java.lang.Object
         //
         verifyException("org.jeesy.classinfo.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeInfo.getSuperclassTypeParameter(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing type parameter.
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<ClassIndex> class0 = ClassIndex.class;
      TypeInfo<ClassIndex> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        typeInfo0.getSuperType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<ClassIndex> class0 = ClassIndex.class;
      // Undeclared exception!
      try { 
        TypeInfo.fromSuperclassTypeParameter(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode();
      // Undeclared exception!
      try { 
        TypeInfo.forType((Type) null, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.forType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode();
      // Undeclared exception!
      try { 
        TypeInfo.forClass((Class<Object>) null, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.forClass((Class<ClassIndex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = null;
      try {
        typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>((Type) null, methodInfo_ParameterInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[0];
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl1 = new Types.ParameterizedTypeImpl(types_ParameterizedTypeImpl0, types_ParameterizedTypeImpl0, typeArray0);
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0);
      Class<Object> class1 = Object.class;
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfo(class1);
      PropertyInfo<Types.WildcardTypeImpl> propertyInfo0 = new PropertyInfo<Types.WildcardTypeImpl>("%piU~5s|'IpaQX", class0, classInfo0);
      TypeInfo<PropertyByAnnotationIndex> typeInfo0 = null;
      try {
        typeInfo0 = new TypeInfo<PropertyByAnnotationIndex>(types_ParameterizedTypeImpl1, propertyInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a Class, but <org.jeesy.classinfo.Types$ParameterizedTypeImpl@0000000001> is of type org.jeesy.classinfo.Types$ParameterizedTypeImpl
         //
         verifyException("org.jeesy.classinfo.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeInfo<Object> typeInfo0 = null;
      try {
        typeInfo0 = new TypeInfo<Object>((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) types_GenericArrayTypeImpl0;
      typeArray0[1] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(types_GenericArrayTypeImpl0, types_GenericArrayTypeImpl0, typeArray0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = null;
      try {
        typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_ParameterizedTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a Class, but <org.jeesy.classinfo.Types$GenericArrayTypeImpl@0000000001<org.jeesy.classinfo.Types$GenericArrayTypeImpl@0000000001, org.jeesy.classinfo.Types$WildcardTypeImpl>> is of type org.jeesy.classinfo.Types$ParameterizedTypeImpl
         //
         verifyException("org.jeesy.classinfo.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      Type[] typeArray0 = new Type[0];
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(types_ParameterizedTypeImpl0);
      Type type0 = typeInfo0.resolveType(types_GenericArrayTypeImpl0);
      assertSame(type0, types_GenericArrayTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeInfo<Object> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        typeInfo0.getExceptionTypes((Member) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a method or a constructor: null
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        typeInfo0.getParameterTypes((Member) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a method or a constructor: null
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) types_GenericArrayTypeImpl0;
      typeArray0[2] = (Type) types_GenericArrayTypeImpl0;
      typeArray0[3] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(types_GenericArrayTypeImpl0, class0, typeArray0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_ParameterizedTypeImpl0);
      TypeInfo typeInfo1 = typeInfo0.resolveParameter(1);
      assertTrue(typeInfo1.isArray());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      TypeInfo typeInfo1 = typeInfo0.resolveParameter((-1));
      assertNull(typeInfo1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0, methodInfo_ParameterInfo0);
      Class<Types.WildcardTypeImpl> class1 = typeInfo0.rawType;
      TypeInfo<Types.WildcardTypeImpl> typeInfo1 = new TypeInfo<Types.WildcardTypeImpl>(class1);
      TypeInfo<?> typeInfo2 = typeInfo1.getComponentType();
      assertFalse(typeInfo2.hasParameters());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[0];
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      TypeInfo<Class<Object>> typeInfo0 = new TypeInfo<Class<Object>>(types_ParameterizedTypeImpl0);
      TypeInfo<?> typeInfo1 = typeInfo0.getComponentType();
      assertNull(typeInfo1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Types.GenericArrayTypeImpl types_GenericArrayTypeImpl0 = new Types.GenericArrayTypeImpl(class0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = new TypeInfo<Types.WildcardTypeImpl>(types_GenericArrayTypeImpl0);
      TypeInfo<?> typeInfo1 = typeInfo0.getComponentType();
      assertFalse(typeInfo1.isArray());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeInfo<Class<ClassIndex>> typeInfo0 = new TypeInfo<Class<ClassIndex>>(class0, (AnnotatedNode) null);
      TypeInfo<?> typeInfo1 = typeInfo0.getComponentType();
      assertNull(typeInfo1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      Class<ClassIndex> class1 = ClassIndex.class;
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<ClassIndex> typeInfo1 = TypeInfo.forClass(class1, (AnnotatedNode) methodInfo_ParameterInfo0);
      boolean boolean0 = typeInfo1.equals(typeInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      boolean boolean0 = typeInfo0.equals(typeInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      Object object0 = new Object();
      boolean boolean0 = typeInfo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeInfo.getSuperclassTypeParameter(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TypeInfo.ClassVariableResolver typeInfo_ClassVariableResolver0 = new TypeInfo.ClassVariableResolver();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      Class class1 = (Class)typeInfo0.getType();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeInfo<Class<Types.WildcardTypeImpl>> typeInfo0 = null;
      try {
        typeInfo0 = new TypeInfo<Class<Types.WildcardTypeImpl>>();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing type parameter.
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      AnnotatedNode annotatedNode0 = typeInfo0.getAnnotatedNode();
      assertNull(annotatedNode0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      String string0 = typeInfo0.toString();
      assertEquals("org.jeesy.classinfo.Types$WildcardTypeImpl", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      TypeInfo[] typeInfoArray0 = typeInfo0.getInterfaces();
      assertNull(typeInfoArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        typeInfo0.getReturnType((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      TypeInfo<?> typeInfo1 = typeInfo0.getSuperType();
      assertFalse(typeInfo1.isArray());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfo(class0);
      TypeInfo<Object> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) classInfo0);
      boolean boolean0 = typeInfo0.hasParameters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Class<Object> class1 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfo(class1);
      PropertyInfo<Types.WildcardTypeImpl> propertyInfo0 = new PropertyInfo<Types.WildcardTypeImpl>("org.jeesy.classinfo.TypeInfo", class0, classInfo0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) propertyInfo0);
      typeInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, (InstantiationBehaviour) null);
      Class<Object> class1 = Object.class;
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class1);
      TypeInfo<?> typeInfo0 = TypeInfo.forType((Type) types_ParameterizedTypeImpl0, (AnnotatedNode) classInfo0);
      assertTrue(typeInfo0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      Class<Types.WildcardTypeImpl> class1 = typeInfo0.getRawType();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class1;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class1, class0, typeArray0);
      TypeInfo<Types.WildcardTypeImpl> typeInfo1 = new TypeInfo<Types.WildcardTypeImpl>(types_ParameterizedTypeImpl0);
      Class<PropertyByAnnotationIndex> class2 = PropertyByAnnotationIndex.class;
      TypeInfo typeInfo2 = typeInfo1.resolveForClass(class2);
      assertTrue(typeInfo2.hasParameters());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeInfo<PropertyByAnnotationIndex> typeInfo0 = new TypeInfo<PropertyByAnnotationIndex>(class0);
      // Undeclared exception!
      try { 
        typeInfo0.getFieldType((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeInfo.fromSuperclassTypeParameter(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing type parameter.
         //
         verifyException("org.jeesy.classinfo.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Types.ParameterizedTypeImpl types_ParameterizedTypeImpl0 = new Types.ParameterizedTypeImpl(class0, class0, typeArray0);
      TypeInfo<Class<PropertyByAnnotationIndex>> typeInfo0 = new TypeInfo<Class<PropertyByAnnotationIndex>>(types_ParameterizedTypeImpl0, (AnnotatedNode) null);
      TypeInfo<Class<PropertyByAnnotationIndex>> typeInfo1 = typeInfo0.withAnnotatedNode((AnnotatedNode) null);
      assertFalse(typeInfo1.isArray());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Types.WildcardTypeImpl> class0 = Types.WildcardTypeImpl.class;
      TypeInfo<Types.WildcardTypeImpl> typeInfo0 = TypeInfo.forClass(class0);
      boolean boolean0 = typeInfo0.isArray();
      assertFalse(boolean0);
  }
}
