/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 08:53:04 GMT 2022
 */

package org.jeesy.classinfo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jeesy.classinfo.AnnotatedNode;
import org.jeesy.classinfo.ClassInfo;
import org.jeesy.classinfo.ClassInfoScanner;
import org.jeesy.classinfo.PropertyInfo;
import org.jeesy.classinfo.indexes.ClassIndex;
import org.jeesy.classinfo.indexes.PropertyByTypeIndex;
import org.jeesy.classinfo.selector.InstantiationBehaviour;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassInfoScanner_ESTest extends ClassInfoScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner((ClassInfoScanner.ScanBehaviour) null);
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = classInfoScanner0.getScanBehaviour();
      assertNull(classInfoScanner_ScanBehaviour0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, (InstantiationBehaviour) null);
      InstantiationBehaviour instantiationBehaviour0 = classInfoScanner0.getInstantiationBehaviour();
      assertNull(instantiationBehaviour0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      // Undeclared exception!
      try { 
        classInfoScanner0.getInfo((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0);
      // Undeclared exception!
      try { 
        classInfoScanner0.computeValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.ClassInfoScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassInfoScanner.classInfoNoCache((Class<PropertyByTypeIndex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.ClassInfoScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassInfoScanner.classInfo((Class<PropertyByTypeIndex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0);
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      assertNotNull(classInfo0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      Class<Annotation> class1 = Annotation.class;
      ClassInfo classInfo0 = classInfoScanner0.get(class1);
      PropertyByTypeIndex propertyByTypeIndex0 = classInfoScanner_DefaultInstantiationBehaviour0.newInstance(class0, (AnnotatedNode) classInfo0);
      assertNotNull(propertyByTypeIndex0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      ClassInfo classInfo0 = classInfoScanner0.computeValue(class0);
      assertNotNull(classInfo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      assertNotNull(classInfo0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner((ClassInfoScanner.ScanBehaviour) null);
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      Class<Annotation> class0 = Annotation.class;
      ClassInfo<Annotation> classInfo0 = classInfoScanner0.getInfo(class0);
      boolean boolean0 = classInfoScanner_DefaultScanBehaviour0.useParent(classInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      boolean boolean0 = classInfoScanner_DefaultScanBehaviour0.useProperty((PropertyInfo) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = classInfoScanner_DefaultScanBehaviour0.mergeAnnotations(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      List<Class<? extends ClassIndex>> list0 = classInfoScanner0.getScanIndexes();
      ClassInfoScanner classInfoScanner1 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0, list0);
      assertFalse(classInfoScanner1.equals((Object)classInfoScanner0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassInfo<Annotation> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      assertNotNull(classInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = classInfoScanner0.getScanBehaviour();
      assertSame(classInfoScanner_ScanBehaviour0, classInfoScanner_DefaultScanBehaviour0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      InstantiationBehaviour instantiationBehaviour0 = classInfoScanner0.getInstantiationBehaviour();
      assertSame(instantiationBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo0 = ClassInfoScanner.classInfo(class0);
      ClassInfoScanner classInfoScanner0 = classInfo0.getScanner();
      Class<Annotation> class1 = Annotation.class;
      ClassInfo<Annotation> classInfo1 = classInfoScanner0.getInfoNoCache(class1);
      assertNotNull(classInfo1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner.DefaultScanBehaviour classInfoScanner_DefaultScanBehaviour0 = new ClassInfoScanner.DefaultScanBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_DefaultScanBehaviour0);
      Class<Annotation> class0 = Annotation.class;
      ClassInfo classInfo0 = classInfoScanner0.computeValue(class0);
      // Undeclared exception!
      try { 
        classInfoScanner_DefaultInstantiationBehaviour0.newInstance(class0, (AnnotatedNode) classInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.annotation.Annotation
         //
         verifyException("org.jeesy.classinfo.ClassInfoScanner$DefaultInstantiationBehaviour", e);
      }
  }
}
