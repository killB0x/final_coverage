/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 08:39:34 GMT 2022
 */

package org.jeesy.classinfo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.util.Collection;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jeesy.classinfo.ClassInfo;
import org.jeesy.classinfo.ClassInfoScanner;
import org.jeesy.classinfo.PropertyInfo;
import org.jeesy.classinfo.converter.annotations.Format;
import org.jeesy.classinfo.indexes.ClassIndex;
import org.jeesy.classinfo.indexes.PropertyByAnnotationIndex;
import org.jeesy.classinfo.indexes.PropertyByTypeIndex;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassInfo_ESTest extends ClassInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ClassIndex> class0 = ClassIndex.class;
      ClassInfo<ClassIndex> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      Class<ClassIndex> class1 = classInfo0.getType();
      assertEquals(1537, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      Class<String> class1 = String.class;
      ClassInfo<String> classInfo1 = new ClassInfo<String>(class1, classInfo0, (ClassInfoScanner) null);
      ClassInfoScanner classInfoScanner0 = classInfo1.getScanner();
      assertNull(classInfoScanner0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = mock(ClassInfoScanner.ScanBehaviour.class, new ViolatedAssumptionAnswer());
      ClassInfoScanner.DefaultInstantiationBehaviour classInfoScanner_DefaultInstantiationBehaviour0 = new ClassInfoScanner.DefaultInstantiationBehaviour();
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_ScanBehaviour0, classInfoScanner_DefaultInstantiationBehaviour0);
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      PropertyInfo propertyInfo0 = classInfo0.getPropertyInfo("class");
      assertFalse(propertyInfo0.isWritable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = mock(ClassInfoScanner.ScanBehaviour.class, new ViolatedAssumptionAnswer());
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_ScanBehaviour0);
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      Class<String> class1 = String.class;
      ClassInfo<String> classInfo1 = new ClassInfo<String>(class1, classInfo0, classInfoScanner0);
      ClassInfo<String> classInfo2 = classInfo1.introspect(classInfoScanner0);
      PropertyInfo propertyInfo0 = classInfo2.getPropertyInfo("uals");
      assertNotNull(propertyInfo0);
      assertFalse(propertyInfo0.isReadable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner((ClassInfoScanner.ScanBehaviour) null);
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      ClassInfo<Object> classInfo1 = new ClassInfo<Object>(class0, classInfo0, classInfoScanner0);
      ClassInfo classInfo2 = classInfo1.getParent();
      assertNotNull(classInfo2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = ClassInfoScanner.classInfo(class0);
      // Undeclared exception!
      try { 
        classInfo0.introspect((ClassInfoScanner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfo(class0);
      ClassInfoScanner classInfoScanner0 = classInfo0.getScanner();
      ClassInfo<String> classInfo1 = new ClassInfo<String>((Class<String>) null, classInfo0, classInfoScanner0);
      // Undeclared exception!
      try { 
        classInfo1.getPropertyInfoByPath((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfo(class0);
      // Undeclared exception!
      try { 
        classInfo0.getPropertyInfoByPath((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      Class<ClassIndex> class1 = ClassIndex.class;
      // Undeclared exception!
      try { 
        classInfo0.getIndex(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.jeesy.classinfo.indexes.ClassIndex
         //
         verifyException("org.jeesy.classinfo.ClassInfoScanner$DefaultInstantiationBehaviour", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      // Undeclared exception!
      try { 
        classInfo0.getIndex((Class<PropertyByTypeIndex>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo0 = new ClassInfo<PropertyByTypeIndex>(class0, (ClassInfo) null, (ClassInfoScanner) null);
      // Undeclared exception!
      try { 
        classInfo0.getIndex(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner((ClassInfoScanner.ScanBehaviour) null);
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      Class<Object> class1 = classInfo0.getType();
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<PropertyByTypeIndex> class0 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo0 = ClassInfoScanner.classInfo(class0);
      PropertyByTypeIndex propertyByTypeIndex0 = classInfo0.getIndex(class0);
      assertNotNull(propertyByTypeIndex0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = ClassInfoScanner.classInfo(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        classInfo0.getPropertyInfo("ualsIgnoreCase", class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property ualsIgnoreCase is not assignable from class class java.lang.Object
         //
         verifyException("org.jeesy.classinfo.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      PropertyInfo<String> propertyInfo0 = classInfo0.getPropertyInfo("I:", class0);
      assertNull(propertyInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = ClassInfoScanner.classInfo(class0);
      PropertyInfo<String> propertyInfo0 = classInfo0.getPropertyInfo("ualsIgnoreCase", class0);
      assertFalse(propertyInfo0.isReadable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      Map<String, PropertyInfo> map0 = (Map<String, PropertyInfo>)classInfo0.getProperties();
      assertEquals(11, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      ClassInfoScanner classInfoScanner0 = classInfo0.getScanner();
      Class<PropertyByTypeIndex> class1 = PropertyByTypeIndex.class;
      ClassInfo<PropertyByTypeIndex> classInfo1 = classInfoScanner0.getInfoNoCache(class1);
      Map<String, PropertyInfo> map0 = (Map<String, PropertyInfo>)classInfo1.getProperties();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = mock(ClassInfoScanner.ScanBehaviour.class, new ViolatedAssumptionAnswer());
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_ScanBehaviour0);
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      Class<PropertyByTypeIndex> class1 = PropertyByTypeIndex.class;
      PropertyByTypeIndex propertyByTypeIndex0 = classInfo0.getIndex(class1);
      assertNotNull(propertyByTypeIndex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner((ClassInfoScanner.ScanBehaviour) null);
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      ClassInfo classInfo1 = classInfo0.getParent();
      assertNull(classInfo1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner((ClassInfoScanner.ScanBehaviour) null);
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ClassInfo<Object> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      ClassInfo<String> classInfo1 = new ClassInfo<String>(class1, classInfo0, classInfoScanner0);
      // Undeclared exception!
      try { 
        classInfo1.getPropertyInfoByPath((String[]) null, class1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      String string0 = classInfo0.getName();
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = mock(ClassInfoScanner.ScanBehaviour.class, new ViolatedAssumptionAnswer());
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_ScanBehaviour0);
      Class<Object> class0 = Object.class;
      ClassInfo<Object> classInfo0 = classInfoScanner0.getInfoNoCache(class0);
      Class<String> class1 = String.class;
      ClassInfo<String> classInfo1 = new ClassInfo<String>(class1, classInfo0, classInfoScanner0);
      PropertyInfo propertyInfo0 = classInfo1.getPropertyInfo("uals");
      assertNull(propertyInfo0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<PropertyByAnnotationIndex> class0 = PropertyByAnnotationIndex.class;
      ClassInfo<PropertyByAnnotationIndex> classInfo0 = ClassInfoScanner.classInfoNoCache(class0);
      Collection<Annotation> collection0 = classInfo0.getAnnotataions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassInfoScanner.ScanBehaviour classInfoScanner_ScanBehaviour0 = mock(ClassInfoScanner.ScanBehaviour.class, new ViolatedAssumptionAnswer());
      ClassInfoScanner classInfoScanner0 = new ClassInfoScanner(classInfoScanner_ScanBehaviour0);
      Class<String> class0 = String.class;
      ClassInfo<String> classInfo0 = classInfoScanner0.getInfo(class0);
      Class<Format.Instance> class1 = Format.Instance.class;
      boolean boolean0 = classInfo0.hasAnnotation(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Format.Instance> class0 = Format.Instance.class;
      ClassInfo<Format.Instance> classInfo0 = ClassInfoScanner.classInfo(class0);
      Format.Instance format_Instance0 = classInfo0.getAnnotation(class0);
      assertNull(format_Instance0);
  }
}
