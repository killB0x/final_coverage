/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 08:52:01 GMT 2022
 */

package org.jeesy.classinfo.converter.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jeesy.classinfo.AnnotatedNode;
import org.jeesy.classinfo.MethodInfo;
import org.jeesy.classinfo.TypeInfo;
import org.jeesy.classinfo.converter.api.ConversionException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversionException_ESTest extends ConversionException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("~x983NUQW,6");
      TypeInfo<Object> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      Class<Annotation> class1 = Annotation.class;
      TypeInfo<Annotation> typeInfo1 = TypeInfo.forClass(class1);
      ConversionException conversionException0 = new ConversionException(object0, typeInfo0, typeInfo1, "WNRsor<U#JI\"QDoVR");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("b");
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      TypeInfo<?> typeInfo1 = TypeInfo.forType((Type) class0);
      ConversionException conversionException0 = new ConversionException((Object) null, typeInfo1, typeInfo0, "b");
      conversionException0.getSrcNodeName();
      assertEquals("Failed to convert  value 'null' of type java.lang.Integer to 'b' of type java.lang.Integer : b", conversionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("");
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      ConversionException conversionException0 = new ConversionException(object0, typeInfo0, typeInfo0, (Throwable) null);
      String string0 = conversionException0.getSrcNodeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeInfo<?> typeInfo0 = TypeInfo.forType((Type) class0);
      ConversionException conversionException0 = new ConversionException((Object) null, typeInfo0, typeInfo0, "Failed to convert 'b' value 'java.lang.Object@2bd028dd' of type java.lang.Integer to 'b' of type java.lang.Integer", (Throwable) null);
      String string0 = conversionException0.getDstNodeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("");
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      ConversionException conversionException0 = new ConversionException(object0, typeInfo0, typeInfo0, (Throwable) null);
      String string0 = conversionException0.getDstNodeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      ConversionException conversionException0 = null;
      try {
        conversionException0 = new ConversionException((Object) null, (TypeInfo<?>) null, (TypeInfo<?>) null, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.converter.api.ConversionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("C<v=k$ '/r><~bsAm");
      ConversionException conversionException0 = null;
      try {
        conversionException0 = new ConversionException("C<v=k$ '/r><~bsAm", (TypeInfo<?>) null, (TypeInfo<?>) null, "C<v=k$ '/r><~bsAm", mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.converter.api.ConversionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConversionException conversionException0 = null;
      try {
        conversionException0 = new ConversionException("hDFR4fk_4", (TypeInfo<?>) null, (TypeInfo<?>) null, "hDFR4fk_4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.converter.api.ConversionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("b");
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      ConversionException conversionException0 = new ConversionException(object0, typeInfo0, typeInfo0, (Throwable) null);
      String string0 = conversionException0.getSrcNodeName();
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("b");
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      ConversionException conversionException0 = new ConversionException(object0, typeInfo0, typeInfo0, (Throwable) null);
      String string0 = conversionException0.getDstNodeName();
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Annotation> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) methodInfo_ParameterInfo0);
      ConversionException conversionException0 = new ConversionException("jgE9GjI(?_5Y706", typeInfo0, typeInfo0, "jgE9GjI(?_5Y706");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("b");
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      ConversionException conversionException0 = new ConversionException(object0, typeInfo0, typeInfo0, (Throwable) null);
      String string0 = conversionException0.getMessage();
      assertNotNull(string0);
  }
}
