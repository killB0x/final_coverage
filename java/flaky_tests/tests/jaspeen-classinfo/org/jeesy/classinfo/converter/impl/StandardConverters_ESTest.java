/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 09:00:19 GMT 2022
 */

package org.jeesy.classinfo.converter.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jeesy.classinfo.AnnotatedNode;
import org.jeesy.classinfo.MethodInfo;
import org.jeesy.classinfo.TypeInfo;
import org.jeesy.classinfo.converter.api.Converter;
import org.jeesy.classinfo.converter.impl.StandardConverters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardConverters_ESTest extends StandardConverters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2984);
      Class<Integer> class0 = Integer.class;
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0);
      StandardConverters.IntConverter standardConverters_IntConverter0 = new StandardConverters.IntConverter(integer0);
      Integer integer1 = standardConverters_IntConverter0.fromString("2984", typeInfo0);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Short short0 = new Short((short)0);
      StandardConverters.ShortConverter standardConverters_ShortConverter0 = new StandardConverters.ShortConverter(short0);
      // Undeclared exception!
      try { 
        standardConverters_ShortConverter0.fromString("", (TypeInfo<Short>) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      StandardConverters.BigIntegerConverter standardConverters_BigIntegerConverter0 = new StandardConverters.BigIntegerConverter(bigInteger0);
      Class<BigInteger> class0 = BigInteger.class;
      TypeInfo<BigInteger> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        standardConverters_BigIntegerConverter0.fromString("o/NECr3]!X't,7", typeInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o/NEC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      StandardConverters.BigIntegerConverter standardConverters_BigIntegerConverter0 = new StandardConverters.BigIntegerConverter(bigInteger0);
      Class<BigInteger> class0 = BigInteger.class;
      TypeInfo<BigInteger> typeInfo0 = TypeInfo.forClass(class0);
      BigInteger bigInteger1 = standardConverters_BigIntegerConverter0.fromString("", typeInfo0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      StandardConverters.BigIntegerConverter standardConverters_BigIntegerConverter0 = new StandardConverters.BigIntegerConverter(bigInteger0);
      Class<BigInteger> class0 = BigInteger.class;
      TypeInfo<BigInteger> typeInfo0 = TypeInfo.forClass(class0);
      BigInteger bigInteger1 = standardConverters_BigIntegerConverter0.fromString((String) null, typeInfo0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      StandardConverters.BigDecimalConverter standardConverters_BigDecimalConverter0 = new StandardConverters.BigDecimalConverter(bigDecimal0);
      // Undeclared exception!
      try { 
        standardConverters_BigDecimalConverter0.fromString("yyyy-MM-dd'T'HH:mm:ss", (TypeInfo<BigDecimal>) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character array is missing \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      StandardConverters.BigDecimalConverter standardConverters_BigDecimalConverter0 = new StandardConverters.BigDecimalConverter(bigDecimal0);
      BigDecimal bigDecimal1 = standardConverters_BigDecimalConverter0.fromString("", (TypeInfo<BigDecimal>) null);
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2726);
      StandardConverters.IntConverter standardConverters_IntConverter0 = new StandardConverters.IntConverter(integer0);
      Class<Integer> class0 = Integer.class;
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) null);
      Integer integer1 = standardConverters_IntConverter0.convert((String) null, (TypeInfo<String>) null, typeInfo0);
      assertEquals(2726, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardConverters.NumberToStringConverter<Integer> standardConverters_NumberToStringConverter0 = new StandardConverters.NumberToStringConverter<Integer>();
      Integer integer0 = new Integer((-829));
      Class<Integer> class0 = Integer.class;
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) null);
      Class<String> class1 = String.class;
      TypeInfo<String> typeInfo1 = TypeInfo.forClass(class1);
      String string0 = standardConverters_NumberToStringConverter0.convert(integer0, typeInfo0, typeInfo1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)125);
      StandardConverters.ByteConverter standardConverters_ByteConverter0 = new StandardConverters.ByteConverter(byte0);
      Class<Byte> class0 = Byte.class;
      TypeInfo<Byte> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        standardConverters_ByteConverter0.fromString("3*`mUK-.", typeInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3*`mUK-.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2726);
      StandardConverters.IntConverter standardConverters_IntConverter0 = new StandardConverters.IntConverter(integer0);
      // Undeclared exception!
      try { 
        standardConverters_IntConverter0.convert("i", (TypeInfo<String>) null, (TypeInfo<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeesy.classinfo.converter.api.ConversionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardConverters.DoubleConverter standardConverters_DoubleConverter0 = new StandardConverters.DoubleConverter((Double) null);
      Class<Double> class0 = Double.class;
      MethodInfo.ParameterInfo<Object> methodInfo_ParameterInfo0 = new MethodInfo.ParameterInfo<Object>();
      TypeInfo<Double> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) methodInfo_ParameterInfo0);
      // Undeclared exception!
      try { 
        standardConverters_DoubleConverter0.fromString("fJE>", typeInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardConverters.LongConverter standardConverters_LongConverter0 = new StandardConverters.LongConverter((Long) null);
      Class<Long> class0 = Long.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("NJ9;`");
      TypeInfo<Long> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      // Undeclared exception!
      try { 
        standardConverters_LongConverter0.fromString(" value '", typeInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" value '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float(0.0);
      StandardConverters.FloatConverter standardConverters_FloatConverter0 = new StandardConverters.FloatConverter(float0);
      Class<Float> class0 = Float.class;
      TypeInfo<Float> typeInfo0 = TypeInfo.forClass(class0);
      // Undeclared exception!
      try { 
        standardConverters_FloatConverter0.fromString("!-GFPObb>B*7x", typeInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardConverters.BooleanConverter standardConverters_BooleanConverter0 = new StandardConverters.BooleanConverter();
      Class<Boolean> class0 = Boolean.class;
      TypeInfo<Boolean> typeInfo0 = TypeInfo.forClass(class0);
      Boolean boolean0 = standardConverters_BooleanConverter0.convert("", (TypeInfo<String>) null, typeInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardConverters standardConverters0 = new StandardConverters();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardConverters.SimpleToStringConverter<Integer> standardConverters_SimpleToStringConverter0 = new StandardConverters.SimpleToStringConverter<Integer>();
      Integer integer0 = new Integer(2984);
      Class<Integer> class0 = Integer.class;
      TypeInfo<Integer> typeInfo0 = TypeInfo.forClass(class0);
      Class<String> class1 = String.class;
      AnnotatedNode.BaseAnnotatedNode annotatedNode_BaseAnnotatedNode0 = new AnnotatedNode.BaseAnnotatedNode("5[}~p0r\"rAD;,Wn;");
      TypeInfo<String> typeInfo1 = TypeInfo.forClass(class1, (AnnotatedNode) annotatedNode_BaseAnnotatedNode0);
      String string0 = standardConverters_SimpleToStringConverter0.convert(integer0, typeInfo0, typeInfo1);
      assertEquals("2984", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeInfo<String> typeInfo0 = TypeInfo.forClass(class0);
      Short short0 = new Short((short)4538);
      StandardConverters.ShortConverter standardConverters_ShortConverter0 = new StandardConverters.ShortConverter(short0);
      Class<Short> class1 = Short.class;
      TypeInfo<Short> typeInfo1 = TypeInfo.forClass(class1, (AnnotatedNode) null);
      try { 
        standardConverters_ShortConverter0.convert("Qw:mw=p_[`YeRg", typeInfo0, typeInfo1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to convert  value 'Qw:mw=p_[`YeRg' of type java.lang.String to type java.lang.Short
         //
         verifyException("org.jeesy.classinfo.converter.impl.StandardConverters$StringToNumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardConverters.NumberToStringConverter<Integer> standardConverters_NumberToStringConverter0 = new StandardConverters.NumberToStringConverter<Integer>();
      Class<String> class0 = String.class;
      TypeInfo<String> typeInfo0 = TypeInfo.forClass(class0, (AnnotatedNode) null);
      String string0 = standardConverters_NumberToStringConverter0.convert((Integer) null, (TypeInfo<Integer>) null, typeInfo0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      StandardConverters.BigDecimalConverter standardConverters_BigDecimalConverter0 = new StandardConverters.BigDecimalConverter(bigDecimal0);
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeInfo<BigDecimal> typeInfo0 = TypeInfo.forClass(class0);
      BigDecimal bigDecimal1 = standardConverters_BigDecimalConverter0.fromString((String) null, typeInfo0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardConverters.DateStringConverter standardConverters_DateStringConverter0 = new StandardConverters.DateStringConverter();
      Converter<Date, String> converter0 = standardConverters_DateStringConverter0.getReverse();
      assertNotNull(converter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardConverters.DateStringConverter standardConverters_DateStringConverter0 = new StandardConverters.DateStringConverter();
      Converter<String, Date> converter0 = standardConverters_DateStringConverter0.getDirect();
      assertNotNull(converter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      StandardConverters.IntConverter standardConverters_IntConverter0 = new StandardConverters.IntConverter(integer0);
      Class<String> class0 = String.class;
      TypeInfo<String> typeInfo0 = TypeInfo.forClass(class0);
      Integer integer1 = standardConverters_IntConverter0.convert("", typeInfo0, (TypeInfo<Integer>) null);
      assertEquals((-1), (int)integer1);
  }
}
