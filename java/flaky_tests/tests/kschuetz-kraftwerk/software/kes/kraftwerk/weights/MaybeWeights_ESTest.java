/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:36:31 GMT 2022
 */

package software.kes.kraftwerk.weights;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.weights.BinaryWeights;
import software.kes.kraftwerk.weights.MaybeWeights;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MaybeWeights_ESTest extends MaybeWeights_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(125, 0);
      BinaryWeights binaryWeights0 = maybeWeights0.getWeights();
      assertEquals(125, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(125, 125);
      BinaryWeights binaryWeights0 = maybeWeights0.getWeights();
      assertEquals(250, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(2332, 2332);
      int int0 = maybeWeights0.getNothingWeight();
      assertEquals(2332, int0);
      assertEquals(2332, maybeWeights0.getJustWeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(8, 0);
      int int0 = maybeWeights0.getJustWeight();
      assertEquals(8, maybeWeights0.getNothingWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MaybeWeights.nothings((-530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MaybeWeights.maybeWeights((-1913), (-1913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MaybeWeights.justs((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(125, 125);
      Object object0 = new Object();
      boolean boolean0 = maybeWeights0.equals(object0);
      assertEquals(125, maybeWeights0.getNothingWeight());
      assertFalse(boolean0);
      assertEquals(125, maybeWeights0.getJustWeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MaybeWeights.MaybeWeightsBuilderJusts maybeWeights_MaybeWeightsBuilderJusts0 = MaybeWeights.justs(2332);
      MaybeWeights maybeWeights0 = maybeWeights_MaybeWeightsBuilderJusts0.toNothings(2332);
      boolean boolean0 = maybeWeights0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2332, maybeWeights0.getNothingWeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(0, 31);
      MaybeWeights maybeWeights1 = MaybeWeights.maybeWeights(31, 31);
      boolean boolean0 = maybeWeights1.equals(maybeWeights0);
      assertFalse(boolean0);
      assertEquals(31, maybeWeights1.getJustWeight());
      assertEquals(31, maybeWeights1.getNothingWeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(125, 125);
      maybeWeights0.hashCode();
      assertEquals(125, maybeWeights0.getJustWeight());
      assertEquals(125, maybeWeights0.getNothingWeight());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(0, 31);
      int int0 = maybeWeights0.getNothingWeight();
      assertEquals(31, maybeWeights0.getJustWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(0, 31);
      BinaryWeights binaryWeights0 = maybeWeights0.getWeights();
      assertEquals(31, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(0, 31);
      String string0 = maybeWeights0.toString();
      assertEquals("MaybeWeights{weights=BinaryWeights{weightA=0, weightB=31}}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaybeWeights.MaybeWeightsBuilderNothings maybeWeights_MaybeWeightsBuilderNothings0 = MaybeWeights.nothings(8);
      MaybeWeights maybeWeights0 = maybeWeights_MaybeWeightsBuilderNothings0.toJusts(1368);
      int int0 = maybeWeights0.getJustWeight();
      assertEquals(1368, int0);
      assertEquals(8, maybeWeights0.getNothingWeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MaybeWeights maybeWeights0 = MaybeWeights.maybeWeights(2332, 2332);
      boolean boolean0 = maybeWeights0.equals(maybeWeights0);
      assertEquals(2332, maybeWeights0.getNothingWeight());
      assertTrue(boolean0);
      assertEquals(2332, maybeWeights0.getJustWeight());
  }
}
