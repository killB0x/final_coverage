/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:18:57 GMT 2022
 */

package software.kes.kraftwerk.weights;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.weights.BinaryWeights;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryWeights_ESTest extends BinaryWeights_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.binaryWeights(1, 1);
      BinaryWeights binaryWeights1 = binaryWeights0.toB(0);
      boolean boolean0 = binaryWeights1.equals(binaryWeights0);
      assertFalse(boolean0);
      assertEquals(2, binaryWeights0.getTotalWeight());
      assertFalse(binaryWeights0.equals((Object)binaryWeights1));
      assertEquals(1, binaryWeights1.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA(0);
      BinaryWeights binaryWeights1 = BinaryWeights.binaryWeights(1, 1);
      boolean boolean0 = binaryWeights1.equals(binaryWeights0);
      assertEquals(2, binaryWeights1.getTotalWeight());
      assertFalse(binaryWeights0.equals((Object)binaryWeights1));
      assertFalse(boolean0);
      assertEquals(1, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA((-1));
      assertEquals(0, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA(31);
      BinaryWeights binaryWeights1 = binaryWeights0.toA(0);
      BinaryWeights binaryWeights2 = binaryWeights1.toB(3772);
      assertEquals(3772, binaryWeights2.getTotalWeight());
      assertEquals(1, binaryWeights1.getTotalWeight());
      assertEquals(32, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(0);
      BinaryWeights binaryWeights1 = binaryWeights0.toA(528);
      assertEquals(528, binaryWeights1.getTotalWeight());
      assertEquals(0, binaryWeights0.getWeightB());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA(0);
      int int0 = binaryWeights0.getWeightB();
      assertEquals(1, binaryWeights0.getTotalWeight());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB((-375));
      int int0 = binaryWeights0.getWeightB();
      assertEquals((-375), int0);
      assertEquals(1, binaryWeights0.getWeightA());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA(0);
      int int0 = binaryWeights0.getWeightA();
      assertEquals(0, int0);
      assertEquals(1, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA((-1490));
      int int0 = binaryWeights0.getWeightA();
      assertEquals((-1490), int0);
      assertEquals((-1489), binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB((-1));
      int int0 = binaryWeights0.getTotalWeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(527);
      int int0 = binaryWeights0.getTotalWeight();
      assertEquals(528, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.binaryWeights(1174, 0);
      assertEquals(1174, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.binaryWeights(0, 31);
      assertEquals(31, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA(42);
      BinaryWeights binaryWeights1 = binaryWeights0.toA(42);
      boolean boolean0 = binaryWeights1.equals(binaryWeights0);
      assertTrue(boolean0);
      assertEquals(43, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(527);
      BinaryWeights binaryWeights1 = BinaryWeights.binaryWeights(527, 527);
      BinaryWeights binaryWeights2 = binaryWeights0.toB(0);
      boolean boolean0 = binaryWeights2.equals(binaryWeights1);
      assertFalse(binaryWeights1.equals((Object)binaryWeights0));
      assertEquals(527, binaryWeights1.getWeightB());
      assertEquals(1, binaryWeights2.getTotalWeight());
      assertEquals(528, binaryWeights0.getTotalWeight());
      assertFalse(binaryWeights0.equals((Object)binaryWeights1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(125);
      BinaryWeights binaryWeights1 = binaryWeights0.toB(0);
      boolean boolean0 = binaryWeights0.equals(binaryWeights1);
      assertEquals(1, binaryWeights1.getTotalWeight());
      assertFalse(binaryWeights1.equals((Object)binaryWeights0));
      assertFalse(boolean0);
      assertEquals(126, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA((-1908));
      boolean boolean0 = binaryWeights0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-1907), binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(1253);
      boolean boolean0 = binaryWeights0.equals(binaryWeights0);
      assertEquals(1254, binaryWeights0.getTotalWeight());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(1253);
      Object object0 = new Object();
      boolean boolean0 = binaryWeights0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1254, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryWeights.binaryWeights(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sum of weights must be >= 1
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(1253);
      int int0 = binaryWeights0.getWeightA();
      assertEquals(1, int0);
      assertEquals(1254, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(0);
      int int0 = binaryWeights0.getWeightB();
      assertEquals(0, int0);
      assertEquals(1, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB(1253);
      String string0 = binaryWeights0.toString();
      assertEquals("BinaryWeights{weightA=1, weightB=1253}", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA((-3224));
      int int0 = binaryWeights0.getTotalWeight();
      assertEquals((-3223), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA(1200);
      binaryWeights0.hashCode();
      assertEquals(1201, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightA((-2568));
      // Undeclared exception!
      try { 
        binaryWeights0.toA((-2568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryWeights binaryWeights0 = BinaryWeights.weightB((-553));
      // Undeclared exception!
      try { 
        binaryWeights0.toB((-553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }
}
