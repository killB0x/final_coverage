/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:33:26 GMT 2022
 */

package software.kes.kraftwerk.weights;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.weights.BinaryWeights;
import software.kes.kraftwerk.weights.EitherWeights;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EitherWeights_ESTest extends EitherWeights_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderLefts eitherWeights_EitherWeightsBuilderLefts0 = EitherWeights.lefts(2563);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderLefts0.toRights(0);
      BinaryWeights binaryWeights0 = eitherWeights0.getWeights();
      assertEquals(1, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderRights eitherWeights_EitherWeightsBuilderRights0 = EitherWeights.rights(2122);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderRights0.toLefts(0);
      BinaryWeights binaryWeights0 = eitherWeights0.getWeights();
      assertEquals(0, binaryWeights0.getWeightA());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderLefts eitherWeights_EitherWeightsBuilderLefts0 = EitherWeights.lefts(0);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderLefts0.toRights(0);
      int int0 = eitherWeights0.getRightWeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderRights eitherWeights_EitherWeightsBuilderRights0 = EitherWeights.rights(2122);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderRights0.toLefts(0);
      int int0 = eitherWeights0.getLeftWeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(575, 0);
      assertEquals(575, eitherWeights0.getLeftWeight());
      assertEquals(0, eitherWeights0.getRightWeight());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(0, 575);
      assertEquals(575, eitherWeights0.getRightWeight());
      assertEquals(0, eitherWeights0.getLeftWeight());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        EitherWeights.rights((-789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        EitherWeights.lefts((-817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderLefts eitherWeights_EitherWeightsBuilderLefts0 = EitherWeights.lefts(125);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderLefts0.toRights(125);
      boolean boolean0 = eitherWeights0.equals(eitherWeights_EitherWeightsBuilderLefts0);
      assertEquals(1, eitherWeights0.getLeftWeight());
      assertEquals(125, eitherWeights0.getRightWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(1, 1);
      boolean boolean0 = eitherWeights0.equals((Object) null);
      assertEquals(1, eitherWeights0.getLeftWeight());
      assertEquals(1, eitherWeights0.getRightWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(1, 1);
      boolean boolean0 = eitherWeights0.equals(eitherWeights0);
      assertEquals(1, eitherWeights0.getLeftWeight());
      assertTrue(boolean0);
      assertEquals(1, eitherWeights0.getRightWeight());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(31, 31);
      int int0 = eitherWeights0.getLeftWeight();
      assertEquals(31, eitherWeights0.getRightWeight());
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderLefts eitherWeights_EitherWeightsBuilderLefts0 = EitherWeights.lefts(102);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderLefts0.toRights(102);
      EitherWeights eitherWeights1 = EitherWeights.eitherWeights(102, 102);
      boolean boolean0 = eitherWeights0.equals(eitherWeights1);
      assertEquals(102, eitherWeights0.getRightWeight());
      assertEquals(1, eitherWeights0.getLeftWeight());
      assertFalse(boolean0);
      assertEquals(102, eitherWeights1.getLeftWeight());
      assertEquals(102, eitherWeights1.getRightWeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(816, 816);
      String string0 = eitherWeights0.toString();
      assertEquals("EitherWeights{weights=BinaryWeights{weightA=816, weightB=816}}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EitherWeights.EitherWeightsBuilderRights eitherWeights_EitherWeightsBuilderRights0 = EitherWeights.rights(1);
      EitherWeights eitherWeights0 = eitherWeights_EitherWeightsBuilderRights0.toLefts(1);
      eitherWeights0.hashCode();
      assertEquals(1, eitherWeights0.getRightWeight());
      assertEquals(1, eitherWeights0.getLeftWeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EitherWeights eitherWeights0 = EitherWeights.eitherWeights(816, 816);
      int int0 = eitherWeights0.getRightWeight();
      assertEquals(816, eitherWeights0.getLeftWeight());
      assertEquals(816, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        EitherWeights.eitherWeights((-35), (-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }
}
