/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:12:35 GMT 2022
 */

package software.kes.kraftwerk.weights;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.weights.TernaryWeights;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TernaryWeights_ESTest extends TernaryWeights_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightA(0);
      ternaryWeights0.hashCode();
      assertEquals(2, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightC(1);
      TernaryWeights ternaryWeights1 = TernaryWeights.weightC(2070);
      boolean boolean0 = ternaryWeights1.equals(ternaryWeights0);
      assertEquals(2072, ternaryWeights1.getTotalWeight());
      assertFalse(boolean0);
      assertFalse(ternaryWeights0.equals((Object)ternaryWeights1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB(2067);
      TernaryWeights ternaryWeights1 = TernaryWeights.weightC((-1378));
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights1);
      assertFalse(boolean0);
      assertEquals((-1376), ternaryWeights1.getTotalWeight());
      assertEquals(2069, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightC(1);
      TernaryWeights ternaryWeights1 = TernaryWeights.weightA(1113);
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights1);
      assertEquals(3, ternaryWeights0.getTotalWeight());
      assertFalse(boolean0);
      assertFalse(ternaryWeights1.equals((Object)ternaryWeights0));
      assertEquals(1115, ternaryWeights1.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB((-2));
      assertEquals(0, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      TernaryWeights ternaryWeights1 = ternaryWeights0.toB(0);
      TernaryWeights ternaryWeights2 = ternaryWeights1.toC(0);
      assertEquals(1, ternaryWeights2.getTotalWeight());
      assertEquals(2, ternaryWeights1.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightC(0);
      TernaryWeights ternaryWeights1 = ternaryWeights0.toA(623);
      assertEquals(624, ternaryWeights1.getTotalWeight());
      assertEquals(1, ternaryWeights0.getWeightA());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB(0);
      TernaryWeights ternaryWeights1 = ternaryWeights0.toA(1);
      assertEquals(1, ternaryWeights0.getWeightA());
      assertEquals(2, ternaryWeights1.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      TernaryWeights ternaryWeights1 = ternaryWeights0.toA(0);
      TernaryWeights ternaryWeights2 = ternaryWeights1.toB(1167);
      assertEquals(2, ternaryWeights1.getTotalWeight());
      assertEquals(1168, ternaryWeights2.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.ternaryWeights(0, 2067, 2067);
      assertEquals(4134, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightA(0);
      TernaryWeights ternaryWeights1 = ternaryWeights0.toC(0);
      int int0 = ternaryWeights1.getWeightC();
      assertEquals(2, ternaryWeights0.getTotalWeight());
      assertEquals(1, ternaryWeights1.getTotalWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightC((-10));
      int int0 = ternaryWeights0.getWeightC();
      assertEquals((-8), ternaryWeights0.getTotalWeight());
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB(0);
      int int0 = ternaryWeights0.getWeightB();
      assertEquals(0, int0);
      assertEquals(2, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB((-176));
      int int0 = ternaryWeights0.getWeightB();
      assertEquals((-174), ternaryWeights0.getTotalWeight());
      assertEquals((-176), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightA(0);
      int int0 = ternaryWeights0.getWeightA();
      assertEquals(0, int0);
      assertEquals(2, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightA((-239));
      int int0 = ternaryWeights0.getWeightA();
      assertEquals((-239), int0);
      assertEquals((-237), ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      int int0 = ternaryWeights0.getTotalWeight();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB((-176));
      int int0 = ternaryWeights0.getTotalWeight();
      assertEquals((-174), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB(2067);
      // Undeclared exception!
      try { 
        ternaryWeights0.toC((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.TernaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.ternaryWeights();
      // Undeclared exception!
      try { 
        ternaryWeights0.toA((-1452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.TernaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.ternaryWeights(1, 0, 0);
      TernaryWeights ternaryWeights1 = ternaryWeights0.toB(0);
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights1);
      assertTrue(boolean0);
      assertEquals(1, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.ternaryWeights(1, 0, 0);
      TernaryWeights ternaryWeights1 = TernaryWeights.weightB(0);
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights1);
      assertFalse(ternaryWeights1.equals((Object)ternaryWeights0));
      assertEquals(2, ternaryWeights1.getTotalWeight());
      assertFalse(boolean0);
      assertEquals(1, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.ternaryWeights(1, 0, 0);
      TernaryWeights ternaryWeights1 = TernaryWeights.weightB(1);
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights1);
      assertEquals(3, ternaryWeights1.getTotalWeight());
      assertEquals(1, ternaryWeights0.getTotalWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      Object object0 = new Object();
      boolean boolean0 = ternaryWeights0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB(2067);
      boolean boolean0 = ternaryWeights0.equals((Object) null);
      assertEquals(2069, ternaryWeights0.getTotalWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      TernaryWeights ternaryWeights1 = TernaryWeights.weightA(0);
      boolean boolean0 = ternaryWeights0.equals(ternaryWeights1);
      assertEquals(2, ternaryWeights1.getTotalWeight());
      assertFalse(ternaryWeights1.equals((Object)ternaryWeights0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TernaryWeights.ternaryWeights(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sum of weights must be >= 1
         //
         verifyException("software.kes.kraftwerk.weights.TernaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightB(1653);
      TernaryWeights ternaryWeights1 = ternaryWeights0.toC(1653);
      assertEquals(3307, ternaryWeights1.getTotalWeight());
      assertEquals(1655, ternaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightA((-2));
      String string0 = ternaryWeights0.toString();
      assertEquals("TernaryWeights{weightA=-2, weightB=1, weightC=1}", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      ternaryWeights0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      int int0 = ternaryWeights0.getWeightC();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.ternaryWeights();
      // Undeclared exception!
      try { 
        ternaryWeights0.toB((-341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.TernaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      int int0 = ternaryWeights0.getWeightB();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.BALANCED;
      int int0 = ternaryWeights0.getWeightA();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightA((-2));
      int int0 = ternaryWeights0.getTotalWeight();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TernaryWeights ternaryWeights0 = TernaryWeights.weightC((-2));
      assertEquals(0, ternaryWeights0.getTotalWeight());
  }
}
