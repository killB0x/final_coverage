/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:35:29 GMT 2022
 */

package software.kes.kraftwerk.weights;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.weights.BinaryWeights;
import software.kes.kraftwerk.weights.NullWeights;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullWeights_ESTest extends NullWeights_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullWeights.NullWeightsBuilderNonNull nullWeights_NullWeightsBuilderNonNull0 = NullWeights.nonNulls(0);
      NullWeights nullWeights0 = nullWeights_NullWeightsBuilderNonNull0.toNulls(125);
      BinaryWeights binaryWeights0 = nullWeights0.getWeights();
      assertEquals(125, binaryWeights0.getWeightA());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullWeights.NullWeightsBuilderNonNull nullWeights_NullWeightsBuilderNonNull0 = NullWeights.nonNulls(948);
      NullWeights nullWeights0 = nullWeights_NullWeightsBuilderNonNull0.toNulls(0);
      BinaryWeights binaryWeights0 = nullWeights0.getWeights();
      assertEquals(948, binaryWeights0.getTotalWeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullWeights nullWeights0 = NullWeights.nullWeights(0, 792);
      int int0 = nullWeights0.getNullWeight();
      assertEquals(0, int0);
      assertEquals(792, nullWeights0.getNonNullWeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullWeights nullWeights0 = NullWeights.nullWeights(785, 0);
      int int0 = nullWeights0.getNonNullWeight();
      assertEquals(785, nullWeights0.getNullWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        NullWeights.nulls((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        NullWeights.nullWeights(1514, (-2221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullWeights.NullWeightsBuilderNulls nullWeights_NullWeightsBuilderNulls0 = NullWeights.nulls(77);
      NullWeights nullWeights0 = nullWeights_NullWeightsBuilderNulls0.toNonNulls(1938);
      Object object0 = new Object();
      boolean boolean0 = nullWeights0.equals(object0);
      assertEquals(1938, nullWeights0.getNonNullWeight());
      assertFalse(boolean0);
      assertEquals(77, nullWeights0.getNullWeight());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullWeights nullWeights0 = NullWeights.nullWeights(2153, 1);
      boolean boolean0 = nullWeights0.equals((Object) null);
      assertEquals(1, nullWeights0.getNonNullWeight());
      assertEquals(2153, nullWeights0.getNullWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullWeights.NullWeightsBuilderNulls nullWeights_NullWeightsBuilderNulls0 = NullWeights.nulls(792);
      NullWeights nullWeights0 = nullWeights_NullWeightsBuilderNulls0.toNonNulls(0);
      boolean boolean0 = nullWeights0.equals(nullWeights0);
      assertEquals(0, nullWeights0.getNonNullWeight());
      assertEquals(792, nullWeights0.getNullWeight());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullWeights.NullWeightsBuilderNulls nullWeights_NullWeightsBuilderNulls0 = NullWeights.nulls(6);
      NullWeights nullWeights0 = nullWeights_NullWeightsBuilderNulls0.toNonNulls(6);
      NullWeights nullWeights1 = nullWeights_NullWeightsBuilderNulls0.toNonNulls(6);
      boolean boolean0 = nullWeights0.equals(nullWeights1);
      assertTrue(boolean0);
      assertEquals(6, nullWeights1.getNonNullWeight());
      assertEquals(6, nullWeights1.getNullWeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullWeights nullWeights0 = NullWeights.nullWeights(3237, 3237);
      int int0 = nullWeights0.getNonNullWeight();
      assertEquals(3237, nullWeights0.getNullWeight());
      assertEquals(3237, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullWeights nullWeights0 = NullWeights.nullWeights(2768, 2768);
      String string0 = nullWeights0.toString();
      assertEquals("NullWeights{weights=BinaryWeights{weightA=2768, weightB=2768}}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullWeights.NullWeightsBuilderNonNull nullWeights_NullWeightsBuilderNonNull0 = NullWeights.nonNulls(1);
      NullWeights nullWeights0 = nullWeights_NullWeightsBuilderNonNull0.toNulls(1);
      nullWeights0.hashCode();
      assertEquals(1, nullWeights0.getNullWeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        NullWeights.nonNulls((-1363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight must be >= 0
         //
         verifyException("software.kes.kraftwerk.weights.BinaryWeights", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullWeights nullWeights0 = NullWeights.nullWeights(1989, 1989);
      int int0 = nullWeights0.getNullWeight();
      assertEquals(1989, int0);
      assertEquals(1989, nullWeights0.getNonNullWeight());
  }
}
