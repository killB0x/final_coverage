/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:32:24 GMT 2022
 */

package software.kes.kraftwerk.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.Seed;
import software.kes.kraftwerk.core.StandardSeed;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardSeed_ESTest extends StandardSeed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeed standardSeed1 = (StandardSeed)standardSeed0.setNextSeedValue((-488L));
      standardSeed1.hashCode();
      assertEquals((-488L), standardSeed1.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeed standardSeed1 = StandardSeed.initStandardSeed();
      boolean boolean0 = standardSeed0.equals(standardSeed1);
      assertFalse(boolean0);
      assertEquals(1L, standardSeed1.getSeedValue());
      assertFalse(standardSeed1.equals((Object)standardSeed0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed(1334L);
      standardSeed0.setNextSeedValue(0L);
      assertEquals(25214903131L, standardSeed0.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed(25214903917L);
      assertEquals(0L, standardSeed0.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(Integer.MIN_VALUE);
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      assertEquals((-2147483648L), standardSeed0.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed((-1176L));
      long long0 = standardSeed0.getSeedValue();
      assertEquals(281449761807621L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      Seed seed0 = standardSeed0.setNextSeedValue((-488L));
      long long0 = seed0.getSeedValue();
      assertEquals((-488L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      Seed seed0 = standardSeed0.setNextSeedValue(25214903917L);
      assertEquals(25214903917L, seed0.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed(11L);
      StandardSeed standardSeed1 = StandardSeed.initStandardSeed(11L);
      boolean boolean0 = standardSeed0.equals(standardSeed1);
      assertTrue(boolean0);
      assertEquals(25214903910L, standardSeed1.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeed standardSeed1 = StandardSeed.initStandardSeed();
      boolean boolean0 = standardSeed1.equals(standardSeed0);
      assertFalse(standardSeed0.equals((Object)standardSeed1));
      assertEquals(1L, standardSeed1.getSeedValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      boolean boolean0 = standardSeed0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      boolean boolean0 = standardSeed0.equals(standardSeed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      Object object0 = new Object();
      boolean boolean0 = standardSeed0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      String string0 = standardSeed0.toString();
      assertEquals("StandardSeed{seedValue=0}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed(126L);
      // Undeclared exception!
      try { 
        standardSeed0.perturb(6L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // software/kes/kraftwerk/Result
         //
         verifyException("software.kes.kraftwerk.core.BuildingBlocks", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      long long0 = standardSeed0.getSeedValue();
      assertEquals(0L, long0);
  }
}
