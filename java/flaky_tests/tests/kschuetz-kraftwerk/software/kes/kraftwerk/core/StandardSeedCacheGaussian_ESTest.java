/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:30:12 GMT 2022
 */

package software.kes.kraftwerk.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.Seed;
import software.kes.kraftwerk.core.StandardSeed;
import software.kes.kraftwerk.core.StandardSeedCacheGaussian;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardSeedCacheGaussian_ESTest extends StandardSeedCacheGaussian_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed(2327L);
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, (-619.962070585267));
      standardSeedCacheGaussian0.hashCode();
      assertEquals((-619.962070585267), standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed(1923L);
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, (-1.0));
      StandardSeedCacheGaussian standardSeedCacheGaussian1 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0.0);
      boolean boolean0 = standardSeedCacheGaussian0.equals(standardSeedCacheGaussian1);
      assertEquals(0.0, standardSeedCacheGaussian1.getNextGaussian(), 0.01);
      assertFalse(boolean0);
      assertFalse(standardSeedCacheGaussian1.equals((Object)standardSeedCacheGaussian0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, 0.0);
      StandardSeedCacheGaussian standardSeedCacheGaussian1 = (StandardSeedCacheGaussian)standardSeedCacheGaussian0.setNextSeedValue(0L);
      standardSeedCacheGaussian1.hashCode();
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
      assertEquals(0.0, standardSeedCacheGaussian1.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, 0.0);
      StandardSeedCacheGaussian standardSeedCacheGaussian1 = (StandardSeedCacheGaussian)standardSeedCacheGaussian0.setNextSeedValue(956L);
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
      assertEquals(0.0, standardSeedCacheGaussian1.getNextGaussian(), 0.01);
      assertEquals(956L, standardSeedCacheGaussian1.getSeedValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, 0.0);
      StandardSeedCacheGaussian standardSeedCacheGaussian1 = (StandardSeedCacheGaussian)standardSeedCacheGaussian0.setNextSeedValue((-1179L));
      assertEquals((-1179L), standardSeedCacheGaussian1.getSeedValue());
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
      assertEquals(0.0, standardSeedCacheGaussian1.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0.0);
      standardSeedCacheGaussian0.getUnderlying();
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, 0.0);
      standardSeedCacheGaussian0.getUnderlying();
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed((-3802L));
      Seed seed0 = standardSeed0.setNextSeedValue((-63L));
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, (-3802L));
      standardSeedCacheGaussian0.getUnderlying();
      assertEquals((-3802.0), standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed((-3156L));
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, (-3156L));
      standardSeedCacheGaussian0.getSeedValue();
      assertEquals((-3156.0), standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seed seed0 = Seed.random();
      Seed seed1 = seed0.setNextSeedValue((-1895L));
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed1, 0.0);
      standardSeedCacheGaussian0.getSeedValue();
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 2196.0);
      double double0 = standardSeedCacheGaussian0.getNextGaussian();
      assertEquals(2196.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed((-3156L));
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, (-3156L));
      double double0 = standardSeedCacheGaussian0.getNextGaussian();
      assertEquals((-3156.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, (-18.11));
      // Undeclared exception!
      try { 
        standardSeedCacheGaussian0.perturb(1L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // software/kes/kraftwerk/Result
         //
         verifyException("software.kes.kraftwerk.core.BuildingBlocks", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0.0);
      StandardSeedCacheGaussian standardSeedCacheGaussian1 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeedCacheGaussian0, 0.0);
      boolean boolean0 = standardSeedCacheGaussian0.equals(standardSeedCacheGaussian1);
      assertFalse(boolean0);
      assertEquals(0.0, standardSeedCacheGaussian1.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0.0);
      StandardSeedCacheGaussian standardSeedCacheGaussian1 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeedCacheGaussian0, (-18.11));
      boolean boolean0 = standardSeedCacheGaussian0.equals(standardSeedCacheGaussian1);
      assertEquals((-18.11), standardSeedCacheGaussian1.getNextGaussian(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, 0.0);
      boolean boolean0 = standardSeedCacheGaussian0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Seed seed0 = Seed.random();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(seed0, (-18.11));
      boolean boolean0 = standardSeedCacheGaussian0.equals(standardSeedCacheGaussian0);
      assertEquals((-18.11), standardSeedCacheGaussian0.getNextGaussian(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0L);
      boolean boolean0 = standardSeedCacheGaussian0.equals(standardSeed0);
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0L);
      double double0 = standardSeedCacheGaussian0.getNextGaussian();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian((Seed) null, 5155.68769144);
      standardSeedCacheGaussian0.getUnderlying();
      assertEquals(5155.68769144, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian((Seed) null, (-1535.66828));
      // Undeclared exception!
      try { 
        standardSeedCacheGaussian0.setNextSeedValue(3710L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.core.StandardSeedCacheGaussian", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian((Seed) null, 5155.68769144);
      // Undeclared exception!
      try { 
        standardSeedCacheGaussian0.perturb((-3395L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.core.StandardSeedCacheGaussian", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian((Seed) null, 5155.68769144);
      String string0 = standardSeedCacheGaussian0.toString();
      assertEquals("StandardSeedCacheGaussian{underlying=null, nextGaussian=5155.68769144}", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardSeed standardSeed0 = StandardSeed.initStandardSeed();
      StandardSeedCacheGaussian standardSeedCacheGaussian0 = StandardSeedCacheGaussian.standardSeedCacheGaussian(standardSeed0, 0L);
      standardSeedCacheGaussian0.getSeedValue();
      assertEquals(0.0, standardSeedCacheGaussian0.getNextGaussian(), 0.01);
  }
}
