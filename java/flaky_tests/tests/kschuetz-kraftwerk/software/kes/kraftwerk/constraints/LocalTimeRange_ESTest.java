/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:10:59 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.LocalTimeRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalTimeRange_ESTest extends LocalTimeRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange0 = LocalTimeRange.inclusive(localTime0, localTime0);
      localTimeRange0.hashCode();
      assertTrue(localTimeRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      LocalTime localTime1 = MockLocalTime.of(1, 1, 1);
      LocalTimeRange localTimeRange0 = LocalTimeRange.exclusive(localTime0, localTime1);
      boolean boolean0 = localTimeRange0.maxIncluded();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTime localTime1 = MockLocalTime.of(1, 1);
      LocalTimeRange localTimeRange0 = LocalTimeRange.localTimeRange(localTime1, localTime0, false);
      assertFalse(localTimeRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalTime localTime1 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalTimeRange localTimeRange0 = LocalTimeRange.exclusive(localTime0, localTime1);
      localTimeRange0.withMinInclusive(localTime0);
      assertFalse(localTimeRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      // Undeclared exception!
      try { 
        localTimeRange0.withMinInclusive((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMaxExclusive(localTime0);
      // Undeclared exception!
      try { 
        localTimeRange1.withMinInclusive(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      // Undeclared exception!
      try { 
        localTimeRange0.withMaxInclusive((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      // Undeclared exception!
      try { 
        localTimeRange0.withMaxExclusive((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange0 = LocalTimeRange.inclusive(localTime0, localTime0);
      // Undeclared exception!
      try { 
        localTimeRange0.withMaxExclusive(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        LocalTimeRange.localTimeRange(localTime0, localTime0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTimeRange.inclusive((LocalTime) null, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTime localTime1 = MockLocalTime.ofNanoOfDay(2570L);
      // Undeclared exception!
      try { 
        LocalTimeRange.inclusive(localTime0, localTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      // Undeclared exception!
      try { 
        localTimeRange0.includes((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.LocalTimeRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTimeRange.exclusive((LocalTime) null, (LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange0 = LocalTimeRange.localTimeRange(localTime0, localTime0, true);
      LocalTime localTime1 = MockLocalTime.ofNanoOfDay(1320L);
      // Undeclared exception!
      try { 
        localTimeRange0.withMaxInclusive(localTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTimeRange.localTimeRange((LocalTime) null, (LocalTime) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMaxExclusive(localTime0);
      localTimeRange1.hashCode();
      assertFalse(localTimeRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMaxExclusive(localTime0);
      boolean boolean0 = localTimeRange1.equals(localTimeRange0);
      assertFalse(boolean0);
      assertFalse(localTimeRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      Object object0 = new Object();
      boolean boolean0 = localTimeRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      boolean boolean0 = localTimeRange0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      boolean boolean0 = localTimeRange0.equals(localTimeRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMinInclusive(localTime0);
      boolean boolean0 = localTimeRange0.equals(localTimeRange1);
      assertTrue(localTimeRange1.maxIncluded());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMaxExclusive(localTime0);
      LocalTime localTime1 = MockLocalTime.ofNanoOfDay(1351L);
      boolean boolean0 = localTimeRange1.includes(localTime1);
      assertFalse(localTimeRange1.maxIncluded());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = MockLocalTime.now();
      boolean boolean0 = localTimeRange0.includes(localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = localTimeRange0.minInclusive();
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange0 = LocalTimeRange.inclusive(localTime0, localTime0);
      LocalTime localTime1 = MockLocalTime.of(1, 1, 1);
      boolean boolean0 = localTimeRange0.includes(localTime1);
      assertTrue(localTimeRange0.maxIncluded());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMaxExclusive(localTime0);
      boolean boolean0 = localTimeRange1.includes(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange localTimeRange1 = localTimeRange0.withMaxInclusive(localTime0);
      boolean boolean0 = localTimeRange1.equals(localTimeRange0);
      assertTrue(localTimeRange1.maxIncluded());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      String string0 = localTimeRange0.toString();
      assertEquals("LocalTimeRange{00:00 .. 23:59:59.999999999}", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      boolean boolean0 = localTimeRange0.maxIncluded();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalTimeRange localTimeRange0 = LocalTimeRange.fullRange();
      LocalTime localTime0 = localTimeRange0.max();
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 0);
      // Undeclared exception!
      try { 
        LocalTimeRange.exclusive(localTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTimeRange.LocalTimeRangeFrom localTimeRange_LocalTimeRangeFrom0 = LocalTimeRange.from(localTime0);
      assertNotNull(localTimeRange_LocalTimeRangeFrom0);
  }
}
