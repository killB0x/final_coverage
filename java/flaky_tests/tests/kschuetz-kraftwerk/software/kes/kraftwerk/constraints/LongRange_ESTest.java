/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:14:24 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.LongRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongRange_ESTest extends LongRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(0L, 0L);
      longRange0.toString();
      longRange0.minInclusive();
      long long0 = (-9223372036854765845L);
      // Undeclared exception!
      try { 
        longRange0.withMaxExclusive((-9223372036854765845L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      Long long0 = null;
      // Undeclared exception!
      try { 
        longRange0.includes((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.LongRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      long long0 = 924L;
      longRange0.equals(longRange0);
      long long1 = (-597L);
      // Undeclared exception!
      try { 
        LongRange.exclusive(924L, (-597L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(3798L);
      LongRange longRange1 = LongRange.fullRange();
      LongRange longRange2 = longRange1.withMaxInclusive(979L);
      LongRange longRange3 = longRange2.withMaxInclusive(3798L);
      longRange3.toString();
      longRange0.equals(longRange3);
      longRange0.hashCode();
      Long long0 = new Long(3798L);
      // Undeclared exception!
      try { 
        LongRange.exclusive(1L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long((-9223372036854775808L));
      LongRange.from((-1L));
      LongRange.fullRange();
      LongRange.fullRange();
      LongRange longRange0 = LongRange.exclusive(711L);
      longRange0.toString();
      longRange0.toString();
      LongRange.fullRange();
      LongRange.exclusive((-2069L), 1L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(993L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(993L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive(993L);
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      LongRange longRange3 = LongRange.inclusive(993L, 993L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange0));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertEquals(993L, longRange3.minInclusive());
      assertEquals(993L, longRange3.maxInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals("LongRange{0 .. 993}", string0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Iterator<Long> iterator0 = longRange2.iterator();
      assertNotNull(iterator0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange2.forEach(consumer0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Long long0 = new Long(993L);
      assertNotNull(long0);
      assertEquals(993L, (long)long0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange1.forEach(consumer1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      boolean boolean0 = longRange2.includes(long0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertTrue(boolean0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertFalse(boolean1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      LongRange longRange4 = LongRange.exclusive(25L, 993L);
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange2));
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange2);
      assertEquals(992L, longRange4.maxInclusive());
      assertEquals(25L, longRange4.minInclusive());
      
      LongRange longRange5 = LongRange.exclusive(25L);
      assertNotNull(longRange5);
      assertFalse(longRange5.equals((Object)longRange4));
      assertFalse(longRange5.equals((Object)longRange2));
      assertFalse(longRange5.equals((Object)longRange1));
      assertFalse(longRange5.equals((Object)longRange3));
      assertFalse(longRange5.equals((Object)longRange0));
      assertNotSame(longRange5, longRange4);
      assertNotSame(longRange5, longRange2);
      assertNotSame(longRange5, longRange1);
      assertNotSame(longRange5, longRange3);
      assertNotSame(longRange5, longRange0);
      assertEquals(24L, longRange5.maxInclusive());
      assertEquals(0L, longRange5.minInclusive());
      
      longRange3.hashCode();
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange5));
      assertFalse(longRange3.equals((Object)longRange4));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange0));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange5);
      assertNotSame(longRange3, longRange4);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertEquals(993L, longRange3.minInclusive());
      assertEquals(993L, longRange3.maxInclusive());
      
      LongRange longRange6 = LongRange.inclusive(968L, 968L);
      assertNotNull(longRange6);
      assertFalse(longRange6.equals((Object)longRange1));
      assertFalse(longRange6.equals((Object)longRange3));
      assertFalse(longRange6.equals((Object)longRange0));
      assertFalse(longRange6.equals((Object)longRange2));
      assertFalse(longRange6.equals((Object)longRange4));
      assertFalse(longRange6.equals((Object)longRange5));
      assertNotSame(longRange6, longRange1);
      assertNotSame(longRange6, longRange3);
      assertNotSame(longRange6, longRange0);
      assertNotSame(longRange6, longRange2);
      assertNotSame(longRange6, longRange4);
      assertNotSame(longRange6, longRange5);
      assertEquals(968L, longRange6.maxInclusive());
      assertEquals(968L, longRange6.minInclusive());
      
      long long1 = longRange4.minInclusive();
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange6));
      assertFalse(longRange4.equals((Object)longRange5));
      assertFalse(longRange4.equals((Object)longRange2));
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange6);
      assertNotSame(longRange4, longRange5);
      assertNotSame(longRange4, longRange2);
      assertEquals(25L, long1);
      assertEquals(992L, longRange4.maxInclusive());
      assertEquals(25L, longRange4.minInclusive());
      
      LongRange longRange7 = LongRange.fullRange();
      assertNotNull(longRange7);
      assertFalse(longRange7.equals((Object)longRange1));
      assertFalse(longRange7.equals((Object)longRange0));
      assertFalse(longRange7.equals((Object)longRange2));
      assertFalse(longRange7.equals((Object)longRange4));
      assertFalse(longRange7.equals((Object)longRange6));
      assertFalse(longRange7.equals((Object)longRange3));
      assertFalse(longRange7.equals((Object)longRange5));
      assertNotSame(longRange7, longRange1);
      assertNotSame(longRange7, longRange0);
      assertNotSame(longRange7, longRange2);
      assertNotSame(longRange7, longRange4);
      assertNotSame(longRange7, longRange6);
      assertNotSame(longRange7, longRange3);
      assertNotSame(longRange7, longRange5);
      assertEquals(9223372036854775807L, longRange7.maxInclusive());
      assertEquals((-9223372036854775808L), longRange7.minInclusive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(356L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      Spliterator<Long> spliterator0 = longRange0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange2 = LongRange.exclusive(356L, 1595L);
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(356L, longRange2.minInclusive());
      assertEquals(1594L, longRange2.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LongRange longRange3 = LongRange.inclusive(356L, 636L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange2);
      assertEquals(356L, longRange3.minInclusive());
      assertEquals(636L, longRange3.maxInclusive());
      
      longRange2.forEach(consumer0);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange3);
      assertEquals(356L, longRange2.minInclusive());
      assertEquals(1594L, longRange2.maxInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange3);
      assertEquals("LongRange{356 .. 1594}", string0);
      assertEquals(356L, longRange2.minInclusive());
      assertEquals(1594L, longRange2.maxInclusive());
      
      long long0 = longRange1.minInclusive();
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), long0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      LongRange longRange4 = longRange1.withMaxExclusive((-9223372036854775808L));
      assertNotNull(longRange4);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange1));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      assertEquals((-9223372036854775808L), longRange4.maxInclusive());
      
      Spliterator<Long> spliterator1 = longRange0.spliterator();
      assertNotNull(spliterator1);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(spliterator1, spliterator0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from((-1L));
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange5 = LongRange.inclusive(218L, 1595L);
      assertNotNull(longRange5);
      assertFalse(longRange5.equals((Object)longRange2));
      assertFalse(longRange5.equals((Object)longRange4));
      assertFalse(longRange5.equals((Object)longRange0));
      assertFalse(longRange5.equals((Object)longRange1));
      assertFalse(longRange5.equals((Object)longRange3));
      assertNotSame(longRange5, longRange2);
      assertNotSame(longRange5, longRange4);
      assertNotSame(longRange5, longRange0);
      assertNotSame(longRange5, longRange1);
      assertNotSame(longRange5, longRange3);
      assertEquals(218L, longRange5.minInclusive());
      assertEquals(1595L, longRange5.maxInclusive());
      
      Spliterator<Long> spliterator2 = longRange4.spliterator();
      assertNotNull(spliterator2);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange4));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange5));
      assertFalse(longRange4.equals((Object)longRange5));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(spliterator2.equals((Object)spliterator1));
      assertFalse(spliterator2.equals((Object)spliterator0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange5);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange5);
      assertNotSame(longRange4, longRange5);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange1);
      assertNotSame(spliterator2, spliterator1);
      assertNotSame(spliterator2, spliterator0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      assertEquals((-9223372036854775808L), longRange4.maxInclusive());
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      Long long2 = Long.getLong(" hoN:yA[ORp:", long1);
      assertNotNull(long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      LongRange longRange6 = longRange1.withMaxExclusive(0L);
      assertNotNull(longRange6);
      assertFalse(longRange6.equals((Object)longRange5));
      assertFalse(longRange6.equals((Object)longRange0));
      assertFalse(longRange6.equals((Object)longRange1));
      assertFalse(longRange6.equals((Object)longRange4));
      assertFalse(longRange6.equals((Object)longRange2));
      assertFalse(longRange6.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange4));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange5));
      assertNotSame(longRange6, longRange5);
      assertNotSame(longRange6, longRange0);
      assertNotSame(longRange6, longRange1);
      assertNotSame(longRange6, longRange4);
      assertNotSame(longRange6, longRange2);
      assertNotSame(longRange6, longRange3);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange6);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange5);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange6);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange5);
      assertEquals((-9223372036854775808L), longRange6.minInclusive());
      assertEquals(0L, longRange6.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      boolean boolean0 = longRange1.includes(long2);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange6));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange4));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange6));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange5));
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange6);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange5);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange6);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange5);
      assertTrue(boolean0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      LongRange longRange7 = longRange1.withMinInclusive((-1L));
      assertNotNull(longRange7);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange6));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange4));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange6));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange5));
      assertFalse(longRange7.equals((Object)longRange4));
      assertFalse(longRange7.equals((Object)longRange2));
      assertFalse(longRange7.equals((Object)longRange5));
      assertFalse(longRange7.equals((Object)longRange6));
      assertFalse(longRange7.equals((Object)longRange0));
      assertFalse(longRange7.equals((Object)longRange1));
      assertFalse(longRange7.equals((Object)longRange3));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange6);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange7);
      assertNotSame(longRange0, longRange5);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange6);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange5);
      assertNotSame(longRange1, longRange7);
      assertNotSame(longRange7, longRange4);
      assertNotSame(longRange7, longRange2);
      assertNotSame(longRange7, longRange5);
      assertNotSame(longRange7, longRange6);
      assertNotSame(longRange7, longRange0);
      assertNotSame(longRange7, longRange1);
      assertNotSame(longRange7, longRange3);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(356L, longRange7.maxInclusive());
      assertEquals((-1L), longRange7.minInclusive());
      
      boolean boolean1 = longRange0.equals(longRange7);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange6));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange7));
      assertFalse(longRange0.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange4));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange6));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange7));
      assertFalse(longRange7.equals((Object)longRange4));
      assertFalse(longRange7.equals((Object)longRange2));
      assertFalse(longRange7.equals((Object)longRange5));
      assertFalse(longRange7.equals((Object)longRange6));
      assertFalse(longRange7.equals((Object)longRange0));
      assertFalse(longRange7.equals((Object)longRange1));
      assertFalse(longRange7.equals((Object)longRange3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange6);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange7);
      assertNotSame(longRange0, longRange5);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange6);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange5);
      assertNotSame(longRange1, longRange7);
      assertNotSame(longRange7, longRange4);
      assertNotSame(longRange7, longRange2);
      assertNotSame(longRange7, longRange5);
      assertNotSame(longRange7, longRange6);
      assertNotSame(longRange7, longRange0);
      assertNotSame(longRange7, longRange1);
      assertNotSame(longRange7, longRange3);
      assertFalse(boolean1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(356L, longRange7.maxInclusive());
      assertEquals((-1L), longRange7.minInclusive());
      
      LongRange longRange8 = LongRange.exclusive(218L);
      assertNotNull(longRange8);
      assertFalse(longRange8.equals((Object)longRange5));
      assertFalse(longRange8.equals((Object)longRange2));
      assertFalse(longRange8.equals((Object)longRange7));
      assertFalse(longRange8.equals((Object)longRange0));
      assertFalse(longRange8.equals((Object)longRange3));
      assertFalse(longRange8.equals((Object)longRange1));
      assertFalse(longRange8.equals((Object)longRange4));
      assertFalse(longRange8.equals((Object)longRange6));
      assertNotSame(longRange8, longRange5);
      assertNotSame(longRange8, longRange2);
      assertNotSame(longRange8, longRange7);
      assertNotSame(longRange8, longRange0);
      assertNotSame(longRange8, longRange3);
      assertNotSame(longRange8, longRange1);
      assertNotSame(longRange8, longRange4);
      assertNotSame(longRange8, longRange6);
      assertEquals(0L, longRange8.minInclusive());
      assertEquals(217L, longRange8.maxInclusive());
      
      longRange4.hashCode();
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange6));
      assertFalse(longRange0.equals((Object)longRange8));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange7));
      assertFalse(longRange0.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange4));
      assertFalse(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange6));
      assertFalse(longRange1.equals((Object)longRange8));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange5));
      assertFalse(longRange1.equals((Object)longRange7));
      assertFalse(longRange4.equals((Object)longRange5));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange7));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange6));
      assertFalse(longRange4.equals((Object)longRange8));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange6);
      assertNotSame(longRange0, longRange8);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange7);
      assertNotSame(longRange0, longRange5);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange6);
      assertNotSame(longRange1, longRange8);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange5);
      assertNotSame(longRange1, longRange7);
      assertNotSame(longRange4, longRange5);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange7);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange6);
      assertNotSame(longRange4, longRange8);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(356L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      assertEquals((-9223372036854775808L), longRange4.maxInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.inclusive(2237L, 948L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(2599L, 2599L);
      assertNotNull(longRange0);
      assertEquals(2599L, longRange0.maxInclusive());
      assertEquals(2599L, longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(2599L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(2599L, longRange0.maxInclusive());
      assertEquals(2599L, longRange0.minInclusive());
      assertEquals(2599L, longRange1.minInclusive());
      assertEquals(2599L, longRange1.maxInclusive());
      
      LongRange longRange2 = LongRange.exclusive(2599L);
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(2598L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      LongRange longRange3 = LongRange.inclusive(2599L, 2599L);
      assertNotNull(longRange3);
      assertTrue(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange2));
      assertTrue(longRange3.equals((Object)longRange0));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange1);
      assertEquals(2599L, longRange3.minInclusive());
      assertEquals(2599L, longRange3.maxInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals("LongRange{0 .. 2598}", string0);
      assertEquals(2598L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange2.forEach(consumer0);
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(2598L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      Long long0 = new Long(2599L);
      assertNotNull(long0);
      assertEquals(2599L, (long)long0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange1.forEach(consumer1);
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange1.equals((Object)longRange3));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertEquals(2599L, longRange0.maxInclusive());
      assertEquals(2599L, longRange0.minInclusive());
      assertEquals(2599L, longRange1.minInclusive());
      assertEquals(2599L, longRange1.maxInclusive());
      
      boolean boolean0 = longRange2.includes(long0);
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertFalse(boolean0);
      assertEquals(2598L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange1.equals((Object)longRange3));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertTrue(boolean1);
      assertEquals(2599L, longRange0.maxInclusive());
      assertEquals(2599L, longRange0.minInclusive());
      assertEquals(2599L, longRange1.minInclusive());
      assertEquals(2599L, longRange1.maxInclusive());
      
      LongRange longRange4 = LongRange.fullRange();
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange1));
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange1);
      assertEquals(9223372036854775807L, longRange4.maxInclusive());
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      
      LongRange longRange5 = LongRange.exclusive(2599L);
      assertNotNull(longRange5);
      assertFalse(longRange5.equals((Object)longRange0));
      assertFalse(longRange5.equals((Object)longRange4));
      assertTrue(longRange5.equals((Object)longRange2));
      assertFalse(longRange5.equals((Object)longRange1));
      assertFalse(longRange5.equals((Object)longRange3));
      assertNotSame(longRange5, longRange0);
      assertNotSame(longRange5, longRange4);
      assertNotSame(longRange5, longRange1);
      assertNotSame(longRange5, longRange2);
      assertNotSame(longRange5, longRange3);
      assertEquals(2598L, longRange5.maxInclusive());
      assertEquals(0L, longRange5.minInclusive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 993L;
      LongRange longRange0 = LongRange.inclusive(993L, 993L);
      assertNotNull(longRange0);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(993L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive(993L);
      assertNotNull(longRange2);
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertTrue(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      LongRange longRange3 = LongRange.exclusive(993L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange0));
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange0);
      assertEquals(992L, longRange3.maxInclusive());
      assertEquals(0L, longRange3.minInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertTrue(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals("LongRange{993 .. 993}", string0);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Iterator<Long> iterator0 = longRange2.iterator();
      assertNotNull(iterator0);
      assertTrue(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange2.forEach(consumer0);
      assertTrue(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Long long1 = new Long(993L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(993L, (long)long1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange1.forEach(consumer1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      boolean boolean0 = longRange2.includes(long1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange0));
      assertTrue(long1.equals((Object)long0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertTrue(boolean0);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange2);
      assertTrue(boolean1);
      assertEquals(993L, longRange0.maxInclusive());
      assertEquals(993L, longRange0.minInclusive());
      assertEquals(993L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      LongRange longRange4 = LongRange.exclusive((-1L), 993L);
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange0));
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange0);
      assertEquals(992L, longRange4.maxInclusive());
      assertEquals((-1L), longRange4.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(0L, 0L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      long long0 = (-9223372036854775808L);
      LongRange longRange1 = LongRange.exclusive(1L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange1.maxInclusive());
      
      long long1 = 241L;
      LongRange longRange2 = LongRange.inclusive((-2166L), (-9L));
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals((-9L), longRange2.maxInclusive());
      assertEquals((-2166L), longRange2.minInclusive());
      
      Spliterator<Long> spliterator0 = longRange1.spliterator();
      assertNotNull(spliterator0);
      assertFalse(longRange1.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange1.maxInclusive());
      
      LongRange longRange3 = LongRange.exclusive(241L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange2);
      assertEquals(0L, longRange3.minInclusive());
      assertEquals(240L, longRange3.maxInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-2166L), (-2166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive((-3099L), (-3099L));
      assertNotNull(longRange0);
      assertEquals((-3099L), longRange0.maxInclusive());
      assertEquals((-3099L), longRange0.minInclusive());
      
      long long0 = 730L;
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(730L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange1 = LongRange.inclusive((-3099L), (-3099L));
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange1, longRange0);
      assertEquals((-3099L), longRange1.maxInclusive());
      assertEquals((-3099L), longRange1.minInclusive());
      
      longRange0.hashCode();
      assertTrue(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals((-3099L), longRange0.maxInclusive());
      assertEquals((-3099L), longRange0.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 993L;
      LongRange longRange0 = LongRange.exclusive(993L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(993L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive(993L);
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      LongRange longRange3 = LongRange.exclusive(993L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange1));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertEquals(992L, longRange3.maxInclusive());
      assertEquals(0L, longRange3.minInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertEquals("LongRange{0 .. 993}", string0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Iterator<Long> iterator0 = longRange2.iterator();
      assertNotNull(iterator0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange2.forEach(consumer0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Long long1 = new Long(993L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(993L, (long)long1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange1.forEach(consumer1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      boolean boolean0 = longRange2.includes(long1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertTrue(long1.equals((Object)long0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertTrue(boolean0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertFalse(boolean1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      LongRange longRange4 = LongRange.exclusive((-1L), 993L);
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertEquals((-1L), longRange4.minInclusive());
      assertEquals(992L, longRange4.maxInclusive());
      
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(993L);
      assertNotNull(longRange_LongRangeFrom0);
      
      boolean boolean2 = longRange3.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(longRange3.equals((Object)longRange4));
      assertFalse(longRange3.equals((Object)longRange1));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange4);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertFalse(boolean2);
      assertEquals(992L, longRange3.maxInclusive());
      assertEquals(0L, longRange3.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(993L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(993L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive(993L);
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      LongRange longRange3 = LongRange.exclusive(993L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange1));
      assertTrue(longRange3.equals((Object)longRange0));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertEquals(992L, longRange3.maxInclusive());
      assertEquals(0L, longRange3.minInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals("LongRange{0 .. 993}", string0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Iterator<Long> iterator0 = longRange2.iterator();
      assertNotNull(iterator0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange2.forEach(consumer0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      Long long0 = new Long(993L);
      assertNotNull(long0);
      assertEquals(993L, (long)long0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange1.forEach(consumer1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      boolean boolean0 = longRange2.includes(long0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertTrue(boolean0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertFalse(boolean1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      long long1 = (-1L);
      LongRange longRange4 = LongRange.exclusive((-1L), 993L);
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange2));
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange2);
      assertEquals((-1L), longRange4.minInclusive());
      assertEquals(992L, longRange4.maxInclusive());
      
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(993L);
      assertNotNull(longRange_LongRangeFrom0);
      
      boolean boolean2 = longRange3.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange1));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange4));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange4);
      assertFalse(boolean2);
      assertEquals(992L, longRange3.maxInclusive());
      assertEquals(0L, longRange3.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 831L;
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(831L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange0 = LongRange.inclusive(831L, 1144L);
      assertNotNull(longRange0);
      assertEquals(1144L, longRange0.maxInclusive());
      assertEquals(831L, longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxInclusive(1144L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(1144L, longRange0.maxInclusive());
      assertEquals(831L, longRange0.minInclusive());
      assertEquals(1144L, longRange1.maxInclusive());
      assertEquals(831L, longRange1.minInclusive());
      
      LongRange longRange2 = LongRange.exclusive(831L);
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(830L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      LongRange longRange3 = LongRange.exclusive(1144L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange2);
      assertEquals(0L, longRange3.minInclusive());
      assertEquals(1143L, longRange3.maxInclusive());
      
      Iterator<Long> iterator0 = longRange0.iterator();
      assertNotNull(iterator0);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertEquals(1144L, longRange0.maxInclusive());
      assertEquals(831L, longRange0.minInclusive());
      
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        LongRange.exclusive(831L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(1144L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxInclusive(1144L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(1144L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      LongRange longRange2 = longRange0.withMaxInclusive(0L);
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(0L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      String string0 = longRange0.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertEquals("LongRange{-9223372036854775808 .. 9223372036854775807}", string0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      boolean boolean0 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange2));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(1144L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      longRange2.hashCode();
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(0L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      long long0 = longRange0.maxInclusive();
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertEquals(9223372036854775807L, long0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-437L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(3798L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3797L, longRange0.maxInclusive());
      
      Long long0 = new Long(3798L);
      assertNotNull(long0);
      assertEquals(3798L, (long)long0);
      
      boolean boolean0 = longRange0.includes(long0);
      assertFalse(boolean0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3797L, longRange0.maxInclusive());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = longRange0.equals(long0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3797L, longRange0.maxInclusive());
      
      long long1 = (-90L);
      // Undeclared exception!
      try { 
        LongRange.exclusive(3798L, 3798L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive((-9223372036854765834L), (-9223372036854765823L));
      assertNotNull(longRange0);
      assertEquals((-9223372036854765834L), longRange0.minInclusive());
      assertEquals((-9223372036854765824L), longRange0.maxInclusive());
      
      // Undeclared exception!
      try { 
        longRange0.withMinInclusive((-2365L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(1685L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(1684L, longRange0.maxInclusive());
      
      // Undeclared exception!
      try { 
        longRange0.withMaxExclusive((-9223372036854765834L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(9223372036854775807L, 9223372036854775807L);
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(9223372036854775807L, longRange0.minInclusive());
      
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(730L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange1 = LongRange.inclusive(9223372036854775807L, 9223372036854775807L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange1, longRange0);
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals(9223372036854775807L, longRange1.minInclusive());
      
      longRange1.hashCode();
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange1, longRange0);
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals(9223372036854775807L, longRange1.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(3853L);
      assertNotNull(longRange0);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      Spliterator<Long> spliterator0 = longRange0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMinInclusive((-9223372036854765822L));
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals((-9223372036854765822L), longRange1.minInclusive());
      assertEquals(3852L, longRange1.maxInclusive());
      
      long long0 = longRange0.minInclusive();
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals(0L, long0);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      Spliterator<Long> spliterator1 = longRange1.spliterator();
      assertNotNull(spliterator1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertNotSame(spliterator1, spliterator0);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals((-9223372036854765822L), longRange1.minInclusive());
      assertEquals(3852L, longRange1.maxInclusive());
      
      String string0 = longRange0.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals("LongRange{0 .. 3852}", string0);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      long long1 = longRange0.maxInclusive();
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(long1 == long0);
      assertNotSame(longRange0, longRange1);
      assertEquals(3852L, long1);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      LongRange longRange2 = longRange1.withMaxExclusive((-9223372036854765822L));
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals((-9223372036854765822L), longRange1.minInclusive());
      assertEquals(3852L, longRange1.maxInclusive());
      assertEquals((-9223372036854765822L), longRange2.maxInclusive());
      assertEquals((-9223372036854765822L), longRange2.minInclusive());
      
      LongRange longRange3 = longRange0.withMaxInclusive(3852L);
      assertNotNull(longRange3);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange2));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertEquals(3852L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3852L, longRange3.maxInclusive());
      assertEquals(0L, longRange3.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      String string0 = longRange0.toString();
      assertNotNull(string0);
      assertEquals("LongRange{-9223372036854775808 .. 9223372036854775807}", string0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      long long0 = (-486L);
      LongRange longRange1 = longRange0.withMinInclusive((-486L));
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-486L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      
      LongRange longRange2 = longRange1.withMinInclusive((-486L));
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-486L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals((-486L), longRange2.minInclusive());
      assertEquals(9223372036854775807L, longRange2.maxInclusive());
      
      long long1 = longRange2.minInclusive();
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertTrue(long1 == long0);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals((-486L), long1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-486L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals((-486L), longRange2.minInclusive());
      assertEquals(9223372036854775807L, longRange2.maxInclusive());
      
      long long2 = longRange0.minInclusive();
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertEquals((-9223372036854775808L), long2);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      String string1 = longRange2.toString();
      assertNotNull(string1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals("LongRange{-486 .. 9223372036854775807}", string1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-486L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals((-486L), longRange2.minInclusive());
      assertEquals(9223372036854775807L, longRange2.maxInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.inclusive((-486L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxInclusive(9223372036854775807L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      String string0 = longRange0.toString();
      assertNotNull(string0);
      assertTrue(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals("LongRange{-9223372036854775808 .. 9223372036854775807}", string0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      String string1 = longRange0.toString();
      assertNotNull(string1);
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(longRange0, longRange1);
      assertEquals("LongRange{-9223372036854775808 .. 9223372036854775807}", string1);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      LongRange longRange2 = LongRange.inclusive(3105L, 9223372036854775807L);
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(3105L, longRange2.minInclusive());
      assertEquals(9223372036854775807L, longRange2.maxInclusive());
      
      LongRange longRange3 = longRange1.withMaxExclusive(9223372036854775807L);
      assertNotNull(longRange3);
      assertFalse(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange3.equals((Object)longRange1));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-9223372036854775808L), longRange3.minInclusive());
      assertEquals(9223372036854775807L, longRange3.maxInclusive());
      
      LongRange longRange4 = longRange3.withMinInclusive(1481L);
      assertNotNull(longRange4);
      assertFalse(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange3));
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange3));
      assertFalse(longRange1.equals((Object)longRange2));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange3.equals((Object)longRange1));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange2));
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange4);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange3, longRange4);
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange2);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-9223372036854775808L), longRange3.minInclusive());
      assertEquals(9223372036854775807L, longRange3.maxInclusive());
      assertEquals(9223372036854775807L, longRange4.maxInclusive());
      assertEquals(1481L, longRange4.minInclusive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(0L, 0L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMinInclusive(0L);
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(0L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      longRange0.hashCode();
      assertTrue(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      Long long0 = new Long((-9223372036854765854L));
      assertNotNull(long0);
      assertEquals((-9223372036854765854L), (long)long0);
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-9223372036854765854L), (-9223372036854765854L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive((-2169L), (-2169L));
      assertNotNull(longRange0);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive((-2169L));
      assertNotNull(longRange1);
      assertTrue(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      assertEquals((-2169L), longRange1.minInclusive());
      assertEquals((-2169L), longRange1.maxInclusive());
      
      LongRange longRange2 = longRange1.withMinInclusive((-2169L));
      assertNotNull(longRange2);
      assertTrue(longRange0.equals((Object)longRange1));
      assertTrue(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertTrue(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      assertEquals((-2169L), longRange1.minInclusive());
      assertEquals((-2169L), longRange1.maxInclusive());
      assertEquals((-2169L), longRange2.minInclusive());
      assertEquals((-2169L), longRange2.maxInclusive());
      
      LongRange longRange3 = LongRange.inclusive(1L, 1L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertEquals(1L, longRange3.minInclusive());
      assertEquals(1L, longRange3.maxInclusive());
      
      Spliterator<Long> spliterator0 = longRange3.spliterator();
      assertNotNull(spliterator0);
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertEquals(1L, longRange3.minInclusive());
      assertEquals(1L, longRange3.maxInclusive());
      
      Spliterator<Long> spliterator1 = longRange2.spliterator();
      assertNotNull(spliterator1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertTrue(longRange2.equals((Object)longRange0));
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertNotSame(spliterator1, spliterator0);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      assertEquals((-2169L), longRange1.minInclusive());
      assertEquals((-2169L), longRange1.maxInclusive());
      assertEquals((-2169L), longRange2.minInclusive());
      assertEquals((-2169L), longRange2.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange0.forEach(consumer1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      longRange0.forEach(consumer0);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      String string0 = longRange0.toString();
      assertNotNull(string0);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertEquals("LongRange{-2169 .. -2169}", string0);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      Iterator<Long> iterator0 = longRange0.iterator();
      assertNotNull(iterator0);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      Iterator<Long> iterator1 = longRange0.iterator();
      assertNotNull(iterator1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(iterator1, iterator0);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      long long0 = (-9223372036854775808L);
      Long long1 = new Long((-9223372036854775808L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-9223372036854775808L), (long)long1);
      
      boolean boolean0 = longRange0.includes(long1);
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertTrue(long1.equals((Object)long0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertFalse(boolean0);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from((-2169L));
      assertNotNull(longRange_LongRangeFrom0);
      
      long long2 = longRange0.maxInclusive();
      assertTrue(longRange0.equals((Object)longRange2));
      assertTrue(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(long2 == long0);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertEquals((-2169L), long2);
      assertEquals((-2169L), longRange0.minInclusive());
      assertEquals((-2169L), longRange0.maxInclusive());
      
      LongRange longRange4 = LongRange.fullRange();
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange3));
      assertNotSame(longRange4, longRange0);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange3);
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      assertEquals(9223372036854775807L, longRange4.maxInclusive());
      
      LongRange longRange5 = LongRange.fullRange();
      assertNotNull(longRange5);
      assertFalse(longRange5.equals((Object)longRange1));
      assertFalse(longRange5.equals((Object)longRange3));
      assertFalse(longRange5.equals((Object)longRange0));
      assertFalse(longRange5.equals((Object)longRange2));
      assertNotSame(longRange5, longRange1);
      assertSame(longRange5, longRange4);
      assertNotSame(longRange5, longRange3);
      assertNotSame(longRange5, longRange0);
      assertNotSame(longRange5, longRange2);
      assertEquals((-9223372036854775808L), longRange5.minInclusive());
      assertEquals(9223372036854775807L, longRange5.maxInclusive());
      
      long long3 = 1L;
      long long4 = 0L;
      // Undeclared exception!
      try { 
        LongRange.exclusive(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 3798L;
      LongRange longRange0 = LongRange.exclusive(3798L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3797L, longRange0.maxInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange0.forEach(consumer0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3797L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(969L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(3797L, longRange0.maxInclusive());
      assertEquals(969L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      long long1 = (-3044L);
      LongRange longRange2 = LongRange.exclusive((-3044L), 994L);
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals((-3044L), longRange2.minInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      
      long long2 = (-2339L);
      LongRange longRange3 = LongRange.inclusive((-2339L), 1883L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertEquals((-2339L), longRange3.minInclusive());
      assertEquals(1883L, longRange3.maxInclusive());
      
      Long long3 = new Long((-4726L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-4726L), (long)long3);
      
      boolean boolean0 = longRange3.includes(long3);
      assertFalse(longRange3.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertFalse(boolean0);
      assertEquals((-2339L), longRange3.minInclusive());
      assertEquals(1883L, longRange3.maxInclusive());
      
      // Undeclared exception!
      try { 
        longRange1.withMinInclusive(3773L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive((-1400L), (-1400L));
      assertNotNull(longRange0);
      assertEquals((-1400L), longRange0.maxInclusive());
      assertEquals((-1400L), longRange0.minInclusive());
      
      String string0 = longRange0.toString();
      assertNotNull(string0);
      assertEquals("LongRange{-1400 .. -1400}", string0);
      assertEquals((-1400L), longRange0.maxInclusive());
      assertEquals((-1400L), longRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(3724L, 3724L);
      assertNotNull(longRange0);
      assertEquals(3724L, longRange0.minInclusive());
      assertEquals(3724L, longRange0.maxInclusive());
      
      // Undeclared exception!
      try { 
        longRange0.withMaxInclusive(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 3008L;
      LongRange longRange0 = LongRange.exclusive(3008L);
      assertNotNull(longRange0);
      assertEquals(3007L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      long long1 = (-2372L);
      long long2 = 0L;
      LongRange longRange1 = longRange0.withMaxInclusive(0L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(3007L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(0L, longRange1.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      
      LongRange longRange2 = longRange0.withMinInclusive((-2372L));
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(3007L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      assertEquals((-2372L), longRange2.minInclusive());
      assertEquals(3007L, longRange2.maxInclusive());
      
      long long3 = (-2345L);
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from((-2345L));
      assertNotNull(longRange_LongRangeFrom0);
      
      long long4 = (-2589L);
      // Undeclared exception!
      try { 
        longRange2.withMaxInclusive((-2589L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(831L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxInclusive(831L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive((-1619L));
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-1619L), longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      String string0 = longRange1.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertEquals("LongRange{-9223372036854775808 .. 831}", string0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      boolean boolean0 = longRange1.equals(longRange0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertFalse(boolean0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = longRange1.equals(object0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertFalse(boolean1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      longRange2.hashCode();
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-1619L), longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      Long long0 = new Long((-1619L));
      assertNotNull(long0);
      assertEquals((-1619L), (long)long0);
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-1619L), (-1619L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange1 = LongRange.fullRange();
      assertNotNull(longRange1);
      assertSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      
      LongRange longRange2 = longRange0.withMaxInclusive(491L);
      assertNotNull(longRange2);
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertSame(longRange0, longRange1);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(491L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertSame(longRange0, longRange1);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals("LongRange{-9223372036854775808 .. 491}", string0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(491L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      LongRange longRange3 = LongRange.fullRange();
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange2));
      assertSame(longRange3, longRange1);
      assertSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange2);
      assertEquals((-9223372036854775808L), longRange3.minInclusive());
      assertEquals(9223372036854775807L, longRange3.maxInclusive());
      
      String string1 = longRange1.toString();
      assertNotNull(string1);
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(longRange1, longRange2);
      assertSame(longRange1, longRange3);
      assertSame(longRange1, longRange0);
      assertEquals("LongRange{-9223372036854775808 .. 9223372036854775807}", string1);
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      
      boolean boolean0 = longRange0.equals(longRange2);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange2);
      assertSame(longRange0, longRange1);
      assertSame(longRange0, longRange3);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertFalse(boolean0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(491L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange2);
      assertSame(longRange0, longRange1);
      assertSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange2);
      assertSame(longRange1, longRange3);
      assertSame(longRange1, longRange0);
      assertTrue(boolean1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      
      longRange1.hashCode();
      assertFalse(longRange1.equals((Object)longRange2));
      assertNotSame(longRange1, longRange2);
      assertSame(longRange1, longRange3);
      assertSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      
      long long0 = 849L;
      Long long1 = new Long(849L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(849L, (long)long1);
      
      // Undeclared exception!
      try { 
        LongRange.exclusive(849L, 849L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      long long0 = 924L;
      LongRange longRange1 = LongRange.inclusive(924L, 924L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange1, longRange0);
      assertEquals(924L, longRange1.minInclusive());
      assertEquals(924L, longRange1.maxInclusive());
      
      boolean boolean0 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertFalse(boolean0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(924L, longRange1.minInclusive());
      assertEquals(924L, longRange1.maxInclusive());
      
      long long1 = (-597L);
      // Undeclared exception!
      try { 
        LongRange.exclusive(924L, (-597L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(831L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxInclusive(831L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      
      LongRange longRange2 = longRange0.withMaxInclusive(831L);
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      assertEquals(831L, longRange2.maxInclusive());
      
      LongRange longRange3 = LongRange.inclusive(1568L, 1568L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertEquals(1568L, longRange3.maxInclusive());
      assertEquals(1568L, longRange3.minInclusive());
      
      long long0 = longRange3.maxInclusive();
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange2);
      assertEquals(1568L, long0);
      assertEquals(1568L, longRange3.maxInclusive());
      assertEquals(1568L, longRange3.minInclusive());
      
      LongRange longRange4 = longRange2.withMaxInclusive((-1619L));
      assertNotNull(longRange4);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange4);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      assertEquals(831L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      assertEquals((-1619L), longRange4.maxInclusive());
      
      Long long1 = new Long(1565L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1565L, (long)long1);
      
      boolean boolean0 = longRange4.includes(long1);
      assertFalse(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange0.equals((Object)longRange4));
      assertFalse(longRange2.equals((Object)longRange3));
      assertFalse(longRange2.equals((Object)longRange4));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange0));
      assertFalse(long1.equals((Object)long0));
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange4);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange4);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange0);
      assertFalse(boolean0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      assertEquals(831L, longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange4.minInclusive());
      assertEquals((-1619L), longRange4.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(831L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxInclusive(831L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive((-1619L));
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      assertEquals((-1619L), longRange2.maxInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals("LongRange{-9223372036854775808 .. -1619}", string0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      assertEquals((-1619L), longRange2.maxInclusive());
      
      boolean boolean0 = longRange1.equals(longRange_LongRangeFrom0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange2));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      
      longRange0.hashCode();
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      long long0 = longRange2.maxInclusive();
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange2.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange0);
      assertNotSame(longRange2, longRange1);
      assertEquals((-1619L), long0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      assertEquals((-1619L), longRange2.maxInclusive());
      
      LongRange longRange3 = longRange1.withMinInclusive((-437L));
      assertNotNull(longRange3);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange1.equals((Object)longRange2));
      assertFalse(longRange3.equals((Object)longRange1));
      assertFalse(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange2));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange3, longRange1);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange2);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(831L, longRange1.maxInclusive());
      assertEquals(831L, longRange3.maxInclusive());
      assertEquals((-437L), longRange3.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-437L), (-1619L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = 993L;
      LongRange longRange0 = LongRange.exclusive(993L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(993L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      LongRange longRange2 = longRange1.withMaxInclusive(993L);
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      LongRange longRange3 = LongRange.exclusive(993L);
      assertNotNull(longRange3);
      assertFalse(longRange3.equals((Object)longRange2));
      assertTrue(longRange3.equals((Object)longRange0));
      assertFalse(longRange3.equals((Object)longRange1));
      assertNotSame(longRange3, longRange2);
      assertNotSame(longRange3, longRange0);
      assertNotSame(longRange3, longRange1);
      assertEquals(0L, longRange3.minInclusive());
      assertEquals(992L, longRange3.maxInclusive());
      
      String string0 = longRange2.toString();
      assertNotNull(string0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertEquals("LongRange{0 .. 993}", string0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      Iterator<Long> iterator0 = longRange2.iterator();
      assertNotNull(iterator0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange2.forEach(consumer0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      Long long1 = new Long(993L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(993L, (long)long1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange1.forEach(consumer1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      boolean boolean0 = longRange2.includes(long1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange3));
      assertTrue(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertTrue(long1.equals((Object)long0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange3);
      assertNotSame(longRange2, longRange0);
      assertTrue(boolean0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      assertEquals(993L, longRange2.maxInclusive());
      assertEquals(0L, longRange2.minInclusive());
      
      boolean boolean1 = longRange0.equals(longRange1);
      assertFalse(longRange0.equals((Object)longRange1));
      assertTrue(longRange0.equals((Object)longRange3));
      assertFalse(longRange0.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange3));
      assertTrue(longRange1.equals((Object)longRange2));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange3);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange3);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange1, longRange2);
      assertFalse(boolean1);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(992L, longRange0.maxInclusive());
      assertEquals(0L, longRange1.minInclusive());
      assertEquals(993L, longRange1.maxInclusive());
      
      LongRange longRange4 = LongRange.exclusive((-1L), 993L);
      assertNotNull(longRange4);
      assertFalse(longRange4.equals((Object)longRange3));
      assertFalse(longRange4.equals((Object)longRange1));
      assertFalse(longRange4.equals((Object)longRange2));
      assertFalse(longRange4.equals((Object)longRange0));
      assertNotSame(longRange4, longRange3);
      assertNotSame(longRange4, longRange1);
      assertNotSame(longRange4, longRange2);
      assertNotSame(longRange4, longRange0);
      assertEquals(992L, longRange4.maxInclusive());
      assertEquals((-1L), longRange4.minInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(0L, 0L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = longRange0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      Long long0 = new Long((-9223372036854765831L));
      assertNotNull(long0);
      assertEquals((-9223372036854765831L), (long)long0);
      
      // Undeclared exception!
      try { 
        LongRange.exclusive((-9223372036854765831L), (-9223372036854765831L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(0L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive(0L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(0L, longRange1.maxInclusive());
      
      Spliterator<Long> spliterator0 = longRange0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = longRange0.includes(long0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertNotSame(longRange0, longRange1);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 0L;
      LongRange longRange0 = LongRange.inclusive(0L, 0L);
      assertNotNull(longRange0);
      assertEquals(0L, longRange0.minInclusive());
      assertEquals(0L, longRange0.maxInclusive());
      
      // Undeclared exception!
      try { 
        LongRange.exclusive(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      Iterator<Long> iterator0 = longRange0.iterator();
      assertNotNull(iterator0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMaxExclusive((-770L));
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-770L), longRange1.maxInclusive());
      
      Spliterator<Long> spliterator0 = longRange1.spliterator();
      assertNotNull(spliterator0);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-770L), longRange1.maxInclusive());
      
      long long0 = (-1L);
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from(0L);
      assertNotNull(longRange_LongRangeFrom0);
      
      LongRange longRange2 = longRange1.withMaxInclusive((-1L));
      assertNotNull(longRange2);
      assertFalse(longRange0.equals((Object)longRange1));
      assertFalse(longRange1.equals((Object)longRange0));
      assertFalse(longRange2.equals((Object)longRange1));
      assertFalse(longRange2.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange0, longRange2);
      assertNotSame(longRange1, longRange2);
      assertNotSame(longRange1, longRange0);
      assertNotSame(longRange2, longRange1);
      assertNotSame(longRange2, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals((-770L), longRange1.maxInclusive());
      assertEquals((-1L), longRange2.maxInclusive());
      assertEquals((-9223372036854775808L), longRange2.minInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      longRange2.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongRange.exclusive((-2811L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      Spliterator<Long> spliterator0 = longRange0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(3798L);
      assertNotNull(longRange0);
      assertEquals(3797L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange0.forEach(consumer0);
      assertEquals(3797L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      longRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      assertNotNull(longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      
      LongRange longRange1 = longRange0.withMinInclusive(3792L);
      assertNotNull(longRange1);
      assertFalse(longRange1.equals((Object)longRange0));
      assertNotSame(longRange0, longRange1);
      assertNotSame(longRange1, longRange0);
      assertEquals((-9223372036854775808L), longRange0.minInclusive());
      assertEquals(9223372036854775807L, longRange0.maxInclusive());
      assertEquals(9223372036854775807L, longRange1.maxInclusive());
      assertEquals(3792L, longRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive((-2371L), 0L);
      LongRange longRange1 = longRange0.withMinInclusive(0L);
      LongRange longRange2 = longRange1.withMinInclusive((-2371L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LongRange longRange3 = longRange0.withMaxInclusive(3378L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      longRange3.forEach(consumer1);
      longRange2.forEach(consumer0);
      longRange2.maxInclusive();
      longRange2.maxInclusive();
      // Undeclared exception!
      try { 
        LongRange.exclusive(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(1516L);
      longRange0.maxInclusive();
      longRange0.withMaxInclusive(1018L);
      LongRange.exclusive((-4421L), 0L);
      // Undeclared exception!
      try { 
        LongRange.inclusive(1516L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LongRange.fullRange();
      // Undeclared exception!
      try { 
        LongRange.inclusive(1846L, (-9223372036854765831L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      LongRange longRange1 = longRange0.withMaxExclusive(282L);
      assertEquals(282L, longRange1.maxInclusive());
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 2267L;
      LongRange.from(2267L);
      long long1 = 973L;
      LongRange longRange0 = LongRange.exclusive(973L);
      LongRange longRange1 = longRange0.withMaxInclusive(973L);
      longRange1.withMaxExclusive(2267L);
      LongRange.exclusive(973L, 2267L);
      LongRange.inclusive(973L, 2267L);
      // Undeclared exception!
      try { 
        LongRange.inclusive(973L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongRange.exclusive(3771L, 3771L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LongRange longRange0 = LongRange.exclusive(1L);
      assertEquals(0L, longRange0.maxInclusive());
      assertEquals(0L, longRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LongRange longRange0 = LongRange.fullRange();
      LongRange longRange1 = longRange0.withMaxInclusive(3246L);
      assertEquals((-9223372036854775808L), longRange1.minInclusive());
      assertEquals(3246L, longRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LongRange.LongRangeFrom longRange_LongRangeFrom0 = LongRange.from((-2655L));
      assertNotNull(longRange_LongRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LongRange longRange0 = LongRange.inclusive(3731L, 3731L);
      assertEquals(3731L, longRange0.minInclusive());
      assertEquals(3731L, longRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = 0L;
      long long1 = 9223372036854775807L;
      LongRange longRange0 = LongRange.exclusive(0L, 9223372036854775807L);
      LongRange.from(0L);
      longRange0.withMaxInclusive(9223372036854775807L);
      // Undeclared exception!
      try { 
        LongRange.exclusive(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }
}
