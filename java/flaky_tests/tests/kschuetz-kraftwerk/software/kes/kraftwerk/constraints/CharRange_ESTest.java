/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:17:28 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.CharRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('N', 'c');
      charRange0.hashCode();
      assertEquals('N', charRange0.minInclusive());
      assertEquals('c', charRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('N', 'c');
      CharRange charRange1 = CharRange.inclusive('N', 'N');
      boolean boolean0 = charRange0.equals(charRange1);
      assertFalse(boolean0);
      assertFalse(charRange1.equals((Object)charRange0));
      assertEquals('c', charRange0.maxInclusive());
      assertEquals('N', charRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      CharRange charRange1 = CharRange.inclusive('#', 'E');
      boolean boolean0 = charRange0.equals(charRange1);
      assertEquals('E', charRange1.maxInclusive());
      assertFalse(boolean0);
      assertEquals('#', charRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('.', '.');
      Character character0 = Character.valueOf('.');
      boolean boolean0 = charRange0.includes(character0);
      assertTrue(boolean0);
      assertEquals('.', charRange0.maxInclusive());
      assertEquals('.', charRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      char char0 = charRange0.minInclusive();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      CharRange charRange1 = charRange0.withMinInclusive('2');
      char char0 = charRange1.minInclusive();
      assertEquals('\uFFFF', charRange1.maxInclusive());
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharRange charRange0 = CharRange.exclusive('L', '~');
      char char0 = charRange0.maxInclusive();
      assertEquals('}', char0);
      assertEquals('L', charRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('/', '6');
      char char0 = charRange0.maxInclusive();
      assertEquals('6', char0);
      assertEquals('/', charRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive(',', ',');
      // Undeclared exception!
      try { 
        charRange0.withMinInclusive('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('V', 'V');
      // Undeclared exception!
      try { 
        charRange0.withMaxInclusive('*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive(')', ')');
      // Undeclared exception!
      try { 
        charRange0.withMaxExclusive(')');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharRange.inclusive('7', '2');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharRange.exclusive(' ', ' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      charRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('2', '2');
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('2', charRange0.minInclusive());
      assertEquals('2', charRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('N', 'N');
      CharRange charRange1 = CharRange.inclusive('N', 'N');
      boolean boolean0 = charRange0.equals(charRange1);
      assertEquals('N', charRange1.maxInclusive());
      assertEquals('N', charRange1.minInclusive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      CharRange charRange1 = CharRange.inclusive('W', 'W');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('W', charRange1.minInclusive());
      assertEquals('W', charRange1.maxInclusive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('\'', '\'');
      CharRange charRange1 = CharRange.inclusive('\'', 'W');
      boolean boolean0 = charRange0.equals(charRange1);
      assertEquals('W', charRange1.maxInclusive());
      assertFalse(charRange1.equals((Object)charRange0));
      assertFalse(boolean0);
      assertEquals('\'', charRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('N', 'c');
      boolean boolean0 = charRange0.equals((Object) null);
      assertEquals('c', charRange0.maxInclusive());
      assertFalse(boolean0);
      assertEquals('N', charRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('N', 'c');
      boolean boolean0 = charRange0.equals(charRange0);
      assertEquals('c', charRange0.maxInclusive());
      assertTrue(boolean0);
      assertEquals('N', charRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      Object object0 = new Object();
      boolean boolean0 = charRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharRange charRange0 = CharRange.exclusive('!', 'B');
      CharRange charRange1 = charRange0.withMaxInclusive('Z');
      Character character0 = Character.valueOf('F');
      boolean boolean0 = charRange1.includes(character0);
      assertEquals('!', charRange0.minInclusive());
      assertTrue(boolean0);
      assertEquals('!', charRange1.minInclusive());
      assertEquals('Z', charRange1.maxInclusive());
      assertEquals('A', charRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharRange charRange0 = CharRange.exclusive('!', 'B');
      Character character0 = Character.valueOf('F');
      boolean boolean0 = charRange0.includes(character0);
      assertEquals('!', charRange0.minInclusive());
      assertEquals('A', charRange0.maxInclusive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      CharRange charRange1 = charRange0.withMinInclusive('F');
      Character character0 = Character.valueOf('6');
      boolean boolean0 = charRange1.includes(character0);
      assertEquals('F', charRange1.minInclusive());
      assertFalse(boolean0);
      assertEquals('\uFFFF', charRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharRange.CharRangeFrom charRange_CharRangeFrom0 = CharRange.from('X');
      assertNotNull(charRange_CharRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharRange charRange0 = CharRange.exclusive('L', 'o');
      char char0 = charRange0.maxInclusive();
      assertEquals('L', charRange0.minInclusive());
      assertEquals('n', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      String string0 = charRange0.toString();
      assertEquals("CharRange{\u0000 .. \uFFFF}", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharRange charRange0 = CharRange.inclusive('N', 'N');
      char char0 = charRange0.minInclusive();
      assertEquals('N', charRange0.maxInclusive());
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      Iterator<Character> iterator0 = charRange0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharRange charRange0 = CharRange.fullRange();
      CharRange charRange1 = charRange0.withMaxExclusive('0');
      assertEquals('\u0000', charRange1.minInclusive());
      assertEquals('/', charRange1.maxInclusive());
  }
}
