/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:22:14 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.ShortRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortRange_ESTest extends ShortRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)714);
      ShortRange shortRange1 = ShortRange.fullRange();
      boolean boolean0 = shortRange0.equals(shortRange1);
      assertEquals((short)713, shortRange0.maxInclusive());
      assertEquals((short)0, shortRange0.minInclusive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short) (-1), (short)0);
      Short short0 = new Short((short) (-1));
      boolean boolean0 = shortRange0.includes(short0);
      assertTrue(boolean0);
      assertEquals((short) (-1), shortRange0.minInclusive());
      assertEquals((short) (-1), shortRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)0, (short)1);
      ShortRange shortRange1 = shortRange0.withMinInclusive((short)0);
      assertEquals((short)0, shortRange0.maxInclusive());
      assertEquals((short)0, shortRange1.minInclusive());
      assertTrue(shortRange1.equals((Object)shortRange0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short) (-1299), (short) (-1));
      ShortRange shortRange1 = shortRange0.withMinInclusive((short) (-1299));
      assertTrue(shortRange1.equals((Object)shortRange0));
      assertEquals((short) (-1299), shortRange1.minInclusive());
      assertEquals((short) (-2), shortRange0.maxInclusive());
      assertEquals((short) (-2), shortRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      ShortRange shortRange1 = shortRange0.withMaxInclusive((short)0);
      assertEquals((short) (-32768), shortRange1.minInclusive());
      assertEquals((short)0, shortRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)1, (short)486);
      ShortRange shortRange1 = shortRange0.withMaxExclusive((short)486);
      assertEquals((short)1, shortRange0.minInclusive());
      assertEquals((short)485, shortRange1.maxInclusive());
      assertEquals((short)486, shortRange0.maxInclusive());
      assertEquals((short)1, shortRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      ShortRange shortRange1 = shortRange0.withMaxExclusive((short) (-861));
      boolean boolean0 = shortRange1.equals(shortRange0);
      assertEquals((short) (-32768), shortRange1.minInclusive());
      assertEquals((short) (-862), shortRange1.maxInclusive());
      assertFalse(boolean0);
      assertFalse(shortRange0.equals((Object)shortRange1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      ShortRange shortRange1 = shortRange0.withMinInclusive((short)1475);
      short short0 = shortRange1.minInclusive();
      assertEquals((short)1475, short0);
      assertEquals((short)32767, shortRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      short short0 = shortRange0.minInclusive();
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short) (-2939), (short) (-2939));
      short short0 = shortRange0.maxInclusive();
      assertEquals((short) (-2939), shortRange0.minInclusive());
      assertEquals((short) (-2939), short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)0, (short)0);
      short short0 = shortRange0.maxInclusive();
      assertEquals((short)0, shortRange0.minInclusive());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)0, (short)1);
      ShortRange shortRange1 = shortRange0.withMaxExclusive((short)1);
      assertEquals((short)0, shortRange1.maxInclusive());
      assertEquals((short)0, shortRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)2439, (short)2847);
      assertEquals((short)2439, shortRange0.minInclusive());
      assertEquals((short)2846, shortRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)1);
      assertEquals((short)0, shortRange0.maxInclusive());
      assertEquals((short)0, shortRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)869);
      // Undeclared exception!
      try { 
        shortRange0.withMinInclusive((short)869);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)714, (short)714);
      // Undeclared exception!
      try { 
        shortRange0.withMaxInclusive((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)714, (short)714);
      // Undeclared exception!
      try { 
        shortRange0.withMaxExclusive((short)714);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShortRange.inclusive((short)2845, (short) (-653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShortRange.exclusive((short) (-2035), (short) (-2035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      shortRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)714, (short)714);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      shortRange0.forEach(consumer0);
      assertEquals((short)714, shortRange0.maxInclusive());
      assertEquals((short)714, shortRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)714);
      ShortRange shortRange1 = shortRange0.withMaxInclusive((short)714);
      boolean boolean0 = shortRange1.equals(shortRange0);
      assertFalse(boolean0);
      assertEquals((short)0, shortRange1.minInclusive());
      assertFalse(shortRange0.equals((Object)shortRange1));
      assertEquals((short)713, shortRange0.maxInclusive());
      assertEquals((short)714, shortRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)746, (short)746);
      ShortRange shortRange1 = ShortRange.fullRange();
      boolean boolean0 = shortRange1.equals(shortRange0);
      assertEquals((short)746, shortRange0.minInclusive());
      assertFalse(boolean0);
      assertEquals((short)746, shortRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)714, (short)714);
      ShortRange shortRange1 = shortRange0.withMaxInclusive((short)714);
      boolean boolean0 = shortRange1.equals(shortRange0);
      assertEquals((short)714, shortRange0.minInclusive());
      assertEquals((short)714, shortRange1.maxInclusive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      Object object0 = new Object();
      boolean boolean0 = shortRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short)721, (short)721);
      boolean boolean0 = shortRange0.equals(shortRange0);
      assertEquals((short)721, shortRange0.minInclusive());
      assertTrue(boolean0);
      assertEquals((short)721, shortRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      boolean boolean0 = shortRange0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      Short short0 = new Short((short) (-1));
      boolean boolean0 = shortRange0.includes(short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short) (-1299), (short) (-1));
      Short short0 = new Short((short) (-1));
      boolean boolean0 = shortRange0.includes(short0);
      assertFalse(boolean0);
      assertEquals((short) (-2), shortRange0.maxInclusive());
      assertEquals((short) (-1299), shortRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.inclusive((short) (-454), (short)3853);
      Short short0 = new Short((short) (-2071));
      boolean boolean0 = shortRange0.includes(short0);
      assertEquals((short) (-454), shortRange0.minInclusive());
      assertFalse(boolean0);
      assertEquals((short)3853, shortRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      String string0 = shortRange0.toString();
      assertEquals("ShortRange{-32768 .. 32767}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      shortRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      Iterator<Short> iterator0 = shortRange0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.exclusive((short)714);
      short short0 = shortRange0.minInclusive();
      assertEquals((short)0, short0);
      assertEquals((short)713, shortRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShortRange.ShortRangeFrom shortRange_ShortRangeFrom0 = ShortRange.from((short)2845);
      assertNotNull(shortRange_ShortRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ShortRange.exclusive((short) (-22791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      short short0 = shortRange0.maxInclusive();
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShortRange shortRange0 = ShortRange.fullRange();
      ShortRange shortRange1 = shortRange0.withMaxInclusive((short) (-22789));
      assertEquals((short) (-32768), shortRange1.minInclusive());
      assertEquals((short) (-22789), shortRange1.maxInclusive());
  }
}
