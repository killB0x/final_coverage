/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:09:10 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.BigDecimalRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigDecimalRange_ESTest extends BigDecimalRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      bigDecimalRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMinInclusive(bigDecimal0);
      assertTrue(bigDecimalRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.exclusive(bigDecimal0, bigDecimal1);
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMinInclusive(bigDecimal0);
      assertTrue(bigDecimalRange1.equals((Object)bigDecimalRange0));
      assertTrue(bigDecimalRange1.minIncluded());
      assertFalse(bigDecimalRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((-434L));
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMinExclusive(bigDecimal1);
      BigDecimalRange bigDecimalRange2 = bigDecimalRange1.withMaxInclusive(bigDecimal0);
      assertTrue(bigDecimalRange2.maxIncluded());
      assertFalse(bigDecimalRange2.minIncluded());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-899.73912681447));
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMaxExclusive(bigDecimal1);
      assertTrue(bigDecimalRange1.minIncluded());
      assertFalse(bigDecimalRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.exclusive(bigDecimal0, bigDecimal1);
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.negate();
      BigDecimalRange bigDecimalRange2 = bigDecimalRange1.withMaxExclusive(bigDecimal0);
      assertFalse(bigDecimalRange2.equals((Object)bigDecimalRange1));
      assertFalse(bigDecimalRange2.minIncluded());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((-434L));
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMinExclusive(bigDecimal1);
      BigDecimalRange bigDecimalRange2 = bigDecimalRange1.negate();
      assertFalse(bigDecimalRange2.maxIncluded());
      assertTrue(bigDecimalRange2.minIncluded());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(2583);
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.exclusive(bigDecimal0, bigDecimal1);
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMinExclusive(bigDecimal0);
      boolean boolean0 = bigDecimalRange1.minIncluded();
      assertFalse(bigDecimalRange0.maxIncluded());
      assertFalse(bigDecimalRange1.equals((Object)bigDecimalRange0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = bigDecimalRange0.min();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = bigDecimalRange0.min();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      boolean boolean0 = bigDecimalRange0.maxIncluded();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = bigDecimalRange0.max();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = bigDecimalRange0.max();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.bigDecimalRange(bigDecimal0, true, bigDecimal0, true);
      assertTrue(bigDecimalRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMinInclusive((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMinExclusive(bigDecimal0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMaxInclusive(bigDecimal1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMaxExclusive((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigDecimalRange.inclusive((BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        BigDecimalRange.inclusive(bigDecimal0, bigDecimal1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigDecimalRange.exclusive((BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        BigDecimalRange.exclusive(bigDecimal0, bigDecimal0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        BigDecimalRange.bigDecimalRange(bigDecimal0, false, bigDecimal0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        BigDecimalRange.bigDecimalRange((BigDecimal) null, true, (BigDecimal) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal((-194L));
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.bigDecimalRange(bigDecimal1, false, bigDecimal0, false);
      bigDecimalRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMaxInclusive(bigDecimal0);
      boolean boolean0 = bigDecimalRange0.equals(bigDecimalRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(2121L);
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal1, bigDecimal1);
      BigDecimalRange bigDecimalRange1 = BigDecimalRange.bigDecimalRange(bigDecimal0, true, bigDecimal1, false);
      boolean boolean0 = bigDecimalRange0.equals(bigDecimalRange1);
      assertFalse(bigDecimalRange1.maxIncluded());
      assertTrue(bigDecimalRange1.minIncluded());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.withMinExclusive(bigDecimal1);
      boolean boolean0 = bigDecimalRange0.equals(bigDecimalRange1);
      assertTrue(bigDecimalRange1.maxIncluded());
      assertFalse(boolean0);
      assertFalse(bigDecimalRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      assertTrue(bigDecimalRange0.minIncluded());
      assertTrue(bigDecimalRange0.maxIncluded());
      
      BigDecimalRange bigDecimalRange1 = bigDecimalRange0.negate();
      boolean boolean0 = bigDecimalRange0.equals(bigDecimalRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      boolean boolean0 = bigDecimalRange0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(bigDecimalRange0.minIncluded());
      assertTrue(bigDecimalRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      boolean boolean0 = bigDecimalRange0.equals(bigDecimalRange0);
      assertTrue(bigDecimalRange0.maxIncluded());
      assertTrue(bigDecimalRange0.minIncluded());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      boolean boolean0 = bigDecimalRange0.equals(bigDecimal0);
      assertTrue(bigDecimalRange0.minIncluded());
      assertTrue(bigDecimalRange0.maxIncluded());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.includes(bigDecimal0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jnape/palatable/lambda/functions/builtin/fn2/GTE
         //
         verifyException("software.kes.kraftwerk.constraints.BigDecimalRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal((-194L));
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.bigDecimalRange(bigDecimal1, false, bigDecimal0, false);
      // Undeclared exception!
      try { 
        bigDecimalRange0.includes(bigDecimal1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jnape/palatable/lambda/functions/builtin/fn2/GT
         //
         verifyException("software.kes.kraftwerk.constraints.BigDecimalRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      bigDecimalRange0.min();
      assertTrue(bigDecimalRange0.maxIncluded());
      assertTrue(bigDecimalRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimalRange.BigDecimalRangeFrom bigDecimalRange_BigDecimalRangeFrom0 = BigDecimalRange.fromExclusive(bigDecimal0);
      assertNotNull(bigDecimalRange_BigDecimalRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      String string0 = bigDecimalRange0.toString();
      assertEquals("BigDecimalRange{0 .. 0}", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        BigDecimalRange.exclusive(bigDecimal0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jnape/palatable/lambda/functions/builtin/fn2/LTE
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.exclusive(bigDecimal1, bigDecimal0);
      boolean boolean0 = bigDecimalRange0.maxIncluded();
      assertFalse(boolean0);
      assertTrue(bigDecimalRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalRange.BigDecimalRangeFrom bigDecimalRange_BigDecimalRangeFrom0 = BigDecimalRange.from(bigDecimal0);
      assertNotNull(bigDecimalRange_BigDecimalRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMinExclusive((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMaxExclusive(bigDecimal0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.bigDecimalRange(bigDecimal0, true, bigDecimal1, false);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMinInclusive(bigDecimal1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimalRange0.withMaxInclusive((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      boolean boolean0 = bigDecimalRange0.minIncluded();
      assertTrue(boolean0);
      assertTrue(bigDecimalRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimalRange bigDecimalRange0 = BigDecimalRange.inclusive(bigDecimal0, bigDecimal0);
      bigDecimalRange0.max();
      assertTrue(bigDecimalRange0.maxIncluded());
      assertTrue(bigDecimalRange0.minIncluded());
  }
}
