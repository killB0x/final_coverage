/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:06:59 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.DoubleRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleRange_ESTest extends DoubleRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      doubleRange1.hashCode();
      assertEquals(4.9E-324, doubleRange1.maxExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(Double.POSITIVE_INFINITY);
      DoubleRange doubleRange1 = doubleRange0.negate();
      boolean boolean0 = doubleRange0.equals(doubleRange1);
      assertEquals((-1.7976931348623157E308), doubleRange1.minInclusive(), 0.01);
      assertEquals(-0.0, doubleRange1.maxInclusive(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      boolean boolean0 = doubleRange1.includes(double0);
      assertEquals((-4.9E-324), doubleRange1.maxInclusive(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0000000000000002), doubleRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-115.5097922412), (-115.5097922412));
      Double double0 = new Double((-115.5097922412));
      boolean boolean0 = doubleRange0.includes(double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      Double double0 = new Double(0.0);
      boolean boolean0 = doubleRange2.includes(double0);
      assertFalse(boolean0);
      assertEquals(1.0, doubleRange2.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMinInclusive(0.0);
      assertEquals(0.0, doubleRange1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.withMinInclusive((-1718.038));
      assertEquals(0.0, doubleRange2.maxExclusive(), 0.01);
      assertEquals((-1718.038), doubleRange2.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-323.5480174), (-323.5480174));
      DoubleRange doubleRange1 = doubleRange0.withMinInclusive((-3050.16748320523));
      assertNotSame(doubleRange0, doubleRange1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(Double.POSITIVE_INFINITY);
      DoubleRange doubleRange1 = doubleRange0.withMinExclusive(1187.02860484);
      assertEquals(1187.02860484, doubleRange1.minExclusive(), 0.01);
      assertEquals((-4.9E-324), doubleRange0.minExclusive(), 0.01);
      assertEquals(1.7976931348623157E308, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.withMinExclusive(-0.0);
      assertEquals((-4.9E-324), doubleRange1.maxInclusive(), 0.01);
      assertEquals(4.9E-324, doubleRange2.minInclusive(), 0.01);
      assertEquals((-1.0000000000000002), doubleRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      DoubleRange doubleRange2 = doubleRange1.withMinExclusive((-1718.0379999999998));
      assertFalse(doubleRange1.minIncluded());
      assertEquals(4.9E-324, doubleRange2.maxExclusive(), 0.01);
      assertEquals((-1718.0379999999998), doubleRange2.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(Double.NEGATIVE_INFINITY, (-42.52182931));
      DoubleRange doubleRange1 = doubleRange0.withMinExclusive(Double.NEGATIVE_INFINITY);
      assertEquals((-1.7976931348623157E308), doubleRange1.minInclusive(), 0.01);
      assertTrue(doubleRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      DoubleRange doubleRange3 = doubleRange2.withMaxInclusive(0.0);
      assertEquals(-0.0, doubleRange3.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      DoubleRange doubleRange1 = doubleRange0.withMaxInclusive(Double.POSITIVE_INFINITY);
      assertEquals(1.7976931348623157E308, doubleRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive((-1.0), 1.0);
      doubleRange0.withMaxInclusive(0.0);
      assertTrue(doubleRange0.minIncluded());
      assertFalse(doubleRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(Double.NEGATIVE_INFINITY, (-42.52182931));
      DoubleRange doubleRange1 = doubleRange0.withMaxInclusive(Double.NEGATIVE_INFINITY);
      assertEquals((-1.7976931348623157E308), doubleRange1.maxExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(596.6090150918232);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(596.6090150918232);
      assertEquals(0.0, doubleRange1.minInclusive(), 0.01);
      assertEquals(596.609015091823, doubleRange1.maxInclusive(), 0.01);
      assertTrue(doubleRange1.equals((Object)doubleRange0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(1.0, 4375.624797);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(4375.624797);
      assertEquals(4375.624797, doubleRange1.maxExclusive(), 0.01);
      assertEquals(0.9999999999999999, doubleRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive((-1.0), 1.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(4.9E-324);
      assertEquals(1.0, doubleRange0.maxExclusive(), 0.01);
      assertFalse(doubleRange1.maxIncluded());
      assertEquals((-1.0), doubleRange1.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      DoubleRange doubleRange2 = doubleRange1.withMaxExclusive((-104.8329916));
      assertEquals(4.9E-324, doubleRange1.maxExclusive(), 0.01);
      assertFalse(doubleRange2.maxIncluded());
      assertFalse(doubleRange2.minIncluded());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive((-819.68), (-726.5263574832882));
      DoubleRange doubleRange1 = doubleRange0.negate();
      assertEquals(819.6800000000001, doubleRange1.maxExclusive(), 0.01);
      assertEquals(726.5263574832883, doubleRange1.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      DoubleRange doubleRange3 = doubleRange2.negate();
      assertEquals(0.0, doubleRange3.maxExclusive(), 0.01);
      assertEquals((-1.0000000000000002), doubleRange3.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(1718.038, 1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      assertEquals((-1718.0380000000002), doubleRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(1.0, 1.0);
      double double0 = doubleRange0.minInclusive();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      boolean boolean0 = doubleRange2.minIncluded();
      assertFalse(boolean0);
      assertEquals(1.0000000000000002, doubleRange2.maxExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      double double0 = doubleRange2.minExclusive();
      assertEquals(1.0, doubleRange2.maxInclusive(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 26.385532357202727);
      assertEquals(26.385532357202727, doubleRange0.maxInclusive(), 0.01);
      
      DoubleRange doubleRange1 = doubleRange0.withMinInclusive(26.385532357202727);
      double double0 = doubleRange1.minExclusive();
      assertEquals(26.385532357202724, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1869.135312);
      double double0 = doubleRange0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1869.1353119999999, doubleRange0.maxInclusive(), 0.01);
      assertEquals(0.0, doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      double double0 = doubleRange1.min();
      assertEquals((-1718.038), double0, 0.01);
      assertEquals((-1718.0379999999998), doubleRange1.minInclusive(), 0.01);
      assertEquals(-0.0, doubleRange1.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(0.0, 0.0);
      double double0 = doubleRange0.maxInclusive();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-4.9E-324), doubleRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      double double0 = doubleRange1.maxInclusive();
      assertEquals((-4.9E-324), double0, 0.01);
      assertEquals((-1.0), doubleRange0.minInclusive(), 0.01);
      assertEquals((-1.0), doubleRange1.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      boolean boolean0 = doubleRange1.maxIncluded();
      assertEquals(-0.0, doubleRange1.maxInclusive(), 0.01);
      assertEquals((-1718.0379999999998), doubleRange1.minInclusive(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive((-819.68), (-726.5263574832882));
      double double0 = doubleRange0.maxExclusive();
      assertEquals((-726.5263574832882), double0, 0.01);
      assertTrue(doubleRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(556.0, 556.0);
      double double0 = doubleRange0.max();
      assertEquals(556.0, doubleRange0.minInclusive(), 0.01);
      assertEquals(556.0000000000001, doubleRange0.maxExclusive(), 0.01);
      assertEquals(556.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(0.0, 1.0);
      assertEquals(1.0, doubleRange0.maxExclusive(), 0.01);
      assertEquals((-4.9E-324), doubleRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(128.8796, 4756.80824557113);
      assertEquals(4756.80824557113, doubleRange0.maxExclusive(), 0.01);
      assertEquals(128.87959999999998, doubleRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive((-3416.81523), 0.0);
      assertEquals(0.0, doubleRange0.maxExclusive(), 0.01);
      assertTrue(doubleRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(4.9E-324);
      assertEquals((-4.9E-324), doubleRange0.minExclusive(), 0.01);
      assertEquals(0.0, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange(-0.0, false, 1718.038, false);
      assertEquals(1718.038, doubleRange0.maxExclusive(), 0.01);
      assertEquals(-0.0, doubleRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange(1785.1776725077416, false, 2189.0, false);
      assertFalse(doubleRange0.minIncluded());
      assertEquals(2188.9999999999995, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange(0.0, true, 0.0, true);
      DoubleRange doubleRange1 = doubleRange0.withMinInclusive((-1.0));
      assertEquals(0.0, doubleRange1.max(), 0.01);
      assertEquals(4.9E-324, doubleRange0.maxExclusive(), 0.01);
      assertEquals((-1.0), doubleRange1.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(158.3369116271277);
      // Undeclared exception!
      try { 
        doubleRange0.withMaxInclusive((-95.767815543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        doubleRange0.withMaxExclusive((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleRange.inclusive(1.0, (-2666.108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive((-819.68), Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        doubleRange0.includes((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.DoubleRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleRange.exclusive((-468.483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > 0
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleRange.doubleRange((-104.8329916), false, (-104.8329916), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange((-965.0), false, 2189.0, true);
      assertEquals(2189.0000000000005, doubleRange0.maxExclusive(), 0.01);
      assertEquals((-964.9999999999999), doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange((-1684.024168), true, (-1684.024168), true);
      double double0 = doubleRange0.max();
      assertEquals((-1684.024168), double0, 0.01);
      assertEquals((-1684.024168), doubleRange0.maxInclusive(), 0.01);
      assertTrue(doubleRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange((-1.0), true, 0.0, false);
      assertEquals((-4.9E-324), doubleRange0.maxInclusive(), 0.01);
      assertTrue(doubleRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-2698.0), 117.80747);
      doubleRange0.hashCode();
      assertEquals((-2698.0), doubleRange0.minInclusive(), 0.01);
      assertEquals(117.80747000000001, doubleRange0.maxExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.doubleRange((-717.4), false, 0.0, false);
      doubleRange0.hashCode();
      assertEquals(0.0, doubleRange0.maxExclusive(), 0.01);
      assertFalse(doubleRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 26.385532357202727);
      DoubleRange doubleRange1 = doubleRange0.withMaxInclusive(26.385532357202727);
      boolean boolean0 = doubleRange1.equals(doubleRange0);
      assertEquals(26.385532357202727, doubleRange1.maxInclusive(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 26.385532357202727);
      DoubleRange doubleRange1 = doubleRange0.withMaxInclusive(1010.82);
      boolean boolean0 = doubleRange1.equals(doubleRange0);
      assertFalse(boolean0);
      assertEquals((-1.0000000000000002), doubleRange0.minExclusive(), 0.01);
      assertEquals((-1.0), doubleRange1.minInclusive(), 0.01);
      assertFalse(doubleRange0.equals((Object)doubleRange1));
      assertEquals(1010.82, doubleRange1.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 26.385532357202727);
      DoubleRange doubleRange1 = doubleRange0.withMinExclusive((-1.0));
      boolean boolean0 = doubleRange1.equals(doubleRange0);
      assertEquals(26.38553235720273, doubleRange0.maxExclusive(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), doubleRange1.minExclusive(), 0.01);
      assertEquals(26.38553235720273, doubleRange1.maxExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      boolean boolean0 = doubleRange1.equals(doubleRange0);
      assertEquals((-1.0), doubleRange1.minInclusive(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), doubleRange0.minInclusive(), 0.01);
      assertEquals(0.0, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(Double.NEGATIVE_INFINITY, (-42.52182931));
      Object object0 = new Object();
      boolean boolean0 = doubleRange0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-42.52182931), doubleRange0.maxInclusive(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1064.11360250168);
      boolean boolean0 = doubleRange0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1064.11360250168, doubleRange0.maxExclusive(), 0.01);
      assertEquals(0.0, doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 26.385532357202727);
      boolean boolean0 = doubleRange0.equals(doubleRange0);
      assertTrue(boolean0);
      assertEquals((-1.0000000000000002), doubleRange0.minExclusive(), 0.01);
      assertEquals(26.385532357202727, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(546.705657409321, 546.705657409321);
      double double0 = doubleRange0.maxExclusive();
      assertEquals(546.7056574093209, doubleRange0.minExclusive(), 0.01);
      assertEquals(546.7056574093211, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      double double0 = doubleRange1.maxExclusive();
      assertEquals(0.0, double0, 0.01);
      assertTrue(doubleRange1.minIncluded());
      assertEquals(0.0, doubleRange0.max(), 0.01);
      assertEquals((-1.0000000000000002), doubleRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-2698.0), 117.80747);
      double double0 = doubleRange0.maxInclusive();
      assertEquals(117.80747, double0, 0.01);
      assertEquals((-2698.0000000000005), doubleRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 26.385532357202727);
      double double0 = doubleRange0.minExclusive();
      assertEquals((-1.0000000000000002), double0, 0.01);
      assertEquals(26.38553235720273, doubleRange0.maxExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(0.0, 0.0);
      double double0 = doubleRange0.minInclusive();
      assertEquals(0.0, double0, 0.01);
      assertTrue(doubleRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(1718.038);
      DoubleRange doubleRange1 = doubleRange0.negate();
      double double0 = doubleRange1.minInclusive();
      assertEquals(-0.0, doubleRange1.maxInclusive(), 0.01);
      assertEquals((-1718.0379999999998), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Double double0 = new Double((-819.68));
      DoubleRange doubleRange0 = DoubleRange.exclusive((-819.68), (-726.5263574832882));
      boolean boolean0 = doubleRange0.includes(double0);
      assertTrue(boolean0);
      assertEquals((-726.5263574832883), doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-2698.0), 117.80747);
      Double double0 = new Double(1.0);
      boolean boolean0 = doubleRange0.includes(double0);
      assertTrue(boolean0);
      assertEquals(117.80747000000001, doubleRange0.maxExclusive(), 0.01);
      assertEquals((-2698.0), doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      Double double0 = new Double(1785.1776725077416);
      boolean boolean0 = doubleRange2.includes(double0);
      assertFalse(boolean0);
      assertEquals(0.0, doubleRange0.max(), 0.01);
      assertEquals((-1.0), doubleRange1.minInclusive(), 0.01);
      assertEquals(4.9E-324, doubleRange2.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(0.0, 0.0);
      Double double0 = new Double((-717.4));
      boolean boolean0 = doubleRange0.includes(double0);
      assertEquals(4.9E-324, doubleRange0.maxExclusive(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(556.0);
      Double double0 = new Double(556.0);
      boolean boolean0 = doubleRange0.includes(double0);
      assertFalse(boolean0);
      assertEquals(0.0, doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      // Undeclared exception!
      try { 
        doubleRange0.withMinInclusive(1086.42766207889);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive(2351.680538191954, 2351.680538191954);
      double double0 = doubleRange0.min();
      assertEquals(2351.680538191954, double0, 0.01);
      assertEquals(2351.6805381919535, doubleRange0.minExclusive(), 0.01);
      assertTrue(doubleRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      // Undeclared exception!
      try { 
        doubleRange0.withMinExclusive(2217.219);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      double double0 = doubleRange0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, doubleRange0.maxInclusive(), 0.01);
      assertTrue(doubleRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DoubleRange.DoubleRangeFrom doubleRange_DoubleRangeFrom0 = DoubleRange.fromExclusive((-93.086706799));
      assertNotNull(doubleRange_DoubleRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      boolean boolean0 = doubleRange0.minIncluded();
      assertTrue(boolean0);
      assertEquals(0.0, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.negate();
      boolean boolean0 = doubleRange0.equals(doubleRange1);
      assertEquals(-0.0, doubleRange1.minInclusive(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, doubleRange1.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      String string0 = doubleRange0.toString();
      assertEquals("DoubleRange{-1.0 .. 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DoubleRange.DoubleRangeFrom doubleRange_DoubleRangeFrom0 = DoubleRange.from(0.0);
      assertNotNull(doubleRange_DoubleRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(Double.POSITIVE_INFINITY);
      DoubleRange doubleRange1 = doubleRange0.withMaxInclusive(1222.013493);
      boolean boolean0 = doubleRange1.equals(doubleRange0);
      assertFalse(boolean0);
      assertEquals(0.0, doubleRange1.minInclusive(), 0.01);
      assertEquals(1222.013493, doubleRange1.maxInclusive(), 0.01);
      assertEquals(0.0, doubleRange0.minInclusive(), 0.01);
      assertEquals(1.7976931348623157E308, doubleRange0.maxInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.exclusive(Double.POSITIVE_INFINITY);
      boolean boolean0 = doubleRange0.maxIncluded();
      assertFalse(boolean0);
      assertEquals(0.0, doubleRange0.minInclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleRange.exclusive((-1604.0), (-1604.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DoubleRange doubleRange0 = DoubleRange.inclusive((-1.0), 0.0);
      DoubleRange doubleRange1 = doubleRange0.withMaxExclusive(0.0);
      DoubleRange doubleRange2 = doubleRange1.negate();
      DoubleRange doubleRange3 = doubleRange2.withMaxExclusive(0.0);
      Double double0 = new Double((-1.0));
      boolean boolean0 = doubleRange3.includes(double0);
      assertEquals(-0.0, doubleRange2.minExclusive(), 0.01);
      assertEquals((-1.0), doubleRange0.minInclusive(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, doubleRange0.maxInclusive(), 0.01);
      assertTrue(doubleRange2.maxIncluded());
  }
}
