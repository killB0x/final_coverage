/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:23:46 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.ByteRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteRange_ESTest extends ByteRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      byteRange0.iterator();
      assertEquals((byte)0, byteRange0.maxInclusive());
      assertEquals((byte)0, byteRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMaxInclusive((byte)1);
      boolean boolean0 = byteRange0.equals(byteRange1);
      assertFalse(byteRange1.equals((Object)byteRange0));
      assertFalse(boolean0);
      assertEquals((byte)1, byteRange1.maxInclusive());
      assertEquals((byte) (-128), byteRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMinInclusive((byte) (-22));
      boolean boolean0 = byteRange0.equals(byteRange1);
      assertEquals((byte) (-22), byteRange1.minInclusive());
      assertEquals((byte)127, byteRange1.maxInclusive());
      assertFalse(byteRange1.equals((Object)byteRange0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      Byte byte0 = new Byte((byte)106);
      boolean boolean0 = byteRange0.includes(byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      ByteRange byteRange1 = byteRange0.withMinInclusive((byte)0);
      assertEquals((byte)0, byteRange0.minInclusive());
      assertEquals((byte)0, byteRange0.maxInclusive());
      assertTrue(byteRange1.equals((Object)byteRange0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte) (-89), (byte) (-89));
      ByteRange byteRange1 = byteRange0.withMinInclusive((byte) (-123));
      assertEquals((byte) (-123), byteRange1.minInclusive());
      assertEquals((byte) (-89), byteRange1.maxInclusive());
      assertEquals((byte) (-89), byteRange0.minInclusive());
      assertEquals((byte) (-89), byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)127, (byte)127);
      ByteRange byteRange1 = byteRange0.withMaxInclusive((byte)127);
      assertEquals((byte)127, byteRange1.minInclusive());
      assertTrue(byteRange1.equals((Object)byteRange0));
      assertEquals((byte)127, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)34);
      ByteRange byteRange1 = byteRange0.withMaxInclusive((byte)0);
      assertEquals((byte)0, byteRange1.maxInclusive());
      assertEquals((byte)0, byteRange1.minInclusive());
      assertEquals((byte)0, byteRange0.minInclusive());
      assertEquals((byte)34, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte) (-121), (byte)103);
      ByteRange byteRange1 = byteRange0.withMaxInclusive((byte) (-1));
      assertEquals((byte) (-1), byteRange1.maxInclusive());
      assertEquals((byte)103, byteRange0.maxInclusive());
      assertEquals((byte) (-121), byteRange0.minInclusive());
      assertEquals((byte) (-121), byteRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)34);
      ByteRange byteRange1 = byteRange0.withMaxExclusive((byte)55);
      assertEquals((byte)54, byteRange1.maxInclusive());
      assertEquals((byte)0, byteRange1.minInclusive());
      assertEquals((byte)34, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMinInclusive((byte)101);
      ByteRange byteRange2 = byteRange1.withMaxExclusive((byte)111);
      assertEquals((byte)101, byteRange2.minInclusive());
      assertEquals((byte)101, byteRange1.minInclusive());
      assertEquals((byte)110, byteRange2.maxInclusive());
      assertEquals((byte)127, byteRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMaxExclusive((byte)1);
      assertEquals((byte) (-128), byteRange1.minInclusive());
      assertEquals((byte)0, byteRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte) (-54), (byte) (-54));
      ByteRange byteRange1 = byteRange0.withMaxExclusive((byte)0);
      assertEquals((byte) (-54), byteRange1.minInclusive());
      assertEquals((byte) (-1), byteRange1.maxInclusive());
      assertEquals((byte) (-54), byteRange0.minInclusive());
      assertEquals((byte) (-54), byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      byte byte0 = byteRange0.minInclusive();
      assertEquals((byte)0, byte0);
      assertEquals((byte)0, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      byte byte0 = byteRange0.minInclusive();
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      byte byte0 = byteRange0.maxInclusive();
      assertEquals((byte)0, byte0);
      assertEquals((byte)0, byteRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte) (-22), (byte) (-22));
      byte byte0 = byteRange0.maxInclusive();
      assertEquals((byte) (-22), byteRange0.minInclusive());
      assertEquals((byte) (-22), byte0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.exclusive((byte)112, (byte)126);
      assertEquals((byte)125, byteRange0.maxInclusive());
      assertEquals((byte)112, byteRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.exclusive((byte) (-101), (byte)1);
      assertEquals((byte) (-101), byteRange0.minInclusive());
      assertEquals((byte)0, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.exclusive((byte)0, (byte)85);
      assertEquals((byte)84, byteRange0.maxInclusive());
      assertEquals((byte)0, byteRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.exclusive((byte) (-73), (byte)0);
      assertEquals((byte) (-73), byteRange0.minInclusive());
      assertEquals((byte) (-1), byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.exclusive((byte)1);
      assertEquals((byte)0, byteRange0.minInclusive());
      assertEquals((byte)0, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte) (-14), (byte) (-14));
      // Undeclared exception!
      try { 
        byteRange0.withMaxInclusive((byte) (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteRange.inclusive((byte)0, (byte) (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      // Undeclared exception!
      try { 
        byteRange0.includes((Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.ByteRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteRange.exclusive((byte) (-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      byteRange0.forEach(consumer0);
      assertEquals((byte)127, byteRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMaxInclusive((byte)127);
      boolean boolean0 = byteRange1.equals(byteRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMinInclusive((byte)1);
      boolean boolean0 = byteRange1.equals(byteRange0);
      assertEquals((byte)127, byteRange1.maxInclusive());
      assertFalse(byteRange0.equals((Object)byteRange1));
      assertFalse(boolean0);
      assertEquals((byte)1, byteRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      Object object0 = new Object();
      boolean boolean0 = byteRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      boolean boolean0 = byteRange0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      boolean boolean0 = byteRange0.equals(byteRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      ByteRange byteRange1 = byteRange0.withMaxInclusive((byte)122);
      boolean boolean0 = byteRange1.equals(byteRange0);
      assertFalse(boolean0);
      assertFalse(byteRange0.equals((Object)byteRange1));
      assertEquals((byte)122, byteRange1.maxInclusive());
      assertEquals((byte) (-128), byteRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      Byte byte0 = new Byte((byte)92);
      boolean boolean0 = byteRange0.includes(byte0);
      assertEquals((byte)0, byteRange0.minInclusive());
      assertEquals((byte)0, byteRange0.maxInclusive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      Byte byte0 = new Byte((byte)0);
      boolean boolean0 = byteRange0.includes(byte0);
      assertEquals((byte)0, byteRange0.maxInclusive());
      assertEquals((byte)0, byteRange0.minInclusive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)0, (byte)0);
      Byte byte0 = new Byte((byte) (-91));
      boolean boolean0 = byteRange0.includes(byte0);
      assertEquals((byte)0, byteRange0.minInclusive());
      assertEquals((byte)0, byteRange0.maxInclusive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      String string0 = byteRange0.toString();
      assertEquals("ByteRange{-128 .. 127}", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.exclusive((byte)81);
      // Undeclared exception!
      try { 
        byteRange0.withMinInclusive((byte)81);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.inclusive((byte)42, (byte)42);
      byte byte0 = byteRange0.minInclusive();
      assertEquals((byte)42, byteRange0.maxInclusive());
      assertEquals((byte)42, byte0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      byte byte0 = byteRange0.maxInclusive();
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      byteRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteRange.exclusive((byte)35, (byte)35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteRange.ByteRangeFrom byteRange_ByteRangeFrom0 = ByteRange.from((byte)87);
      assertNotNull(byteRange_ByteRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteRange byteRange0 = ByteRange.fullRange();
      // Undeclared exception!
      try { 
        byteRange0.withMaxExclusive((byte) (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }
}
