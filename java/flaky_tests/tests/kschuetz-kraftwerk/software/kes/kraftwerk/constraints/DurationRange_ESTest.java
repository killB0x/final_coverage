/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:26:23 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.DurationRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DurationRange_ESTest extends DurationRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(1L);
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      DurationRange durationRange1 = durationRange0.withMinInclusive(duration0);
      durationRange1.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      // Undeclared exception!
      try { 
        durationRange0.withMinInclusive((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      DurationRange durationRange0 = DurationRange.exclusive(duration0);
      // Undeclared exception!
      try { 
        durationRange0.withMinInclusive(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      // Undeclared exception!
      try { 
        durationRange0.withMaxInclusive((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.ofSeconds((-1L));
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      // Undeclared exception!
      try { 
        durationRange0.withMaxInclusive(duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      // Undeclared exception!
      try { 
        durationRange0.withMaxExclusive((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      // Undeclared exception!
      try { 
        durationRange0.withMaxExclusive(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationRange.inclusive((Duration) null, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.ofSeconds((-1343L), (-1343L));
      // Undeclared exception!
      try { 
        DurationRange.inclusive(duration0, duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationRange.inclusive((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-3399L));
      // Undeclared exception!
      try { 
        DurationRange.inclusive(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      // Undeclared exception!
      try { 
        durationRange0.includes(duration0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jnape/palatable/lambda/functions/builtin/fn2/GTE
         //
         verifyException("software.kes.kraftwerk.constraints.DurationRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationRange.exclusive((Duration) null, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationRange.exclusive((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        DurationRange.exclusive(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = Duration.ofDays(362L);
      DurationRange durationRange0 = DurationRange.inclusive(duration1, duration1);
      DurationRange durationRange1 = DurationRange.exclusive(duration0, duration1);
      boolean boolean0 = durationRange0.equals(durationRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      boolean boolean0 = durationRange0.equals(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(3115L);
      DurationRange durationRange0 = DurationRange.exclusive(duration0);
      boolean boolean0 = durationRange0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      boolean boolean0 = durationRange0.equals(durationRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      String string0 = durationRange0.toString();
      assertEquals("DurationRange{PT0S .. PT0S}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      DurationRange durationRange1 = durationRange0.withMinInclusive(duration0);
      boolean boolean0 = durationRange0.equals(durationRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      Duration duration1 = durationRange0.maxInclusive();
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(1780L);
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      DurationRange durationRange1 = durationRange0.withMaxExclusive(duration0);
      assertFalse(durationRange1.equals((Object)durationRange0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationRange.DurationFrom durationRange_DurationFrom0 = DurationRange.from((Duration) null);
      assertNotNull(durationRange_DurationFrom0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0);
      DurationRange durationRange1 = durationRange0.withMaxInclusive(duration0);
      assertNotSame(durationRange0, durationRange1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        DurationRange.exclusive(duration0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationRange durationRange0 = DurationRange.inclusive(duration0, duration0);
      Duration duration1 = durationRange0.minInclusive();
      assertSame(duration0, duration1);
  }
}
