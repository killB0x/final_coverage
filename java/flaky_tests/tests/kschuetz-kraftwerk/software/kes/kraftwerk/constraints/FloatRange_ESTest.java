/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:03:54 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.FloatRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloatRange_ESTest extends FloatRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-83.19F), (-83.19F));
      floatRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1.0F, 2743.8F);
      floatRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.withMaxExclusive(2743.8F);
      boolean boolean0 = floatRange0.equals(floatRange1);
      assertEquals(2743.7998F, floatRange1.maxInclusive(), 0.01F);
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, floatRange1.minInclusive(), 0.01F);
      assertFalse(floatRange1.equals((Object)floatRange0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(3160.829F);
      FloatRange floatRange1 = FloatRange.floatRange((-126.72595F), true, 4348.0F, true);
      boolean boolean0 = floatRange1.equals(floatRange0);
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertFalse(boolean0);
      assertEquals(3160.829F, floatRange0.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      Float float0 = new Float(513.31F);
      boolean boolean0 = floatRange0.includes(float0);
      assertEquals((-1.401298464324817E-45), floatRange0.minExclusive(), 0.01);
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-1.0F), 1.0F);
      Float float0 = new Float(0.0F);
      boolean boolean0 = floatRange0.includes(float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      Float float0 = new Float((-1852.235));
      boolean boolean0 = floatRange1.includes(float0);
      assertFalse(boolean0);
      assertEquals((-1.0), floatRange1.minExclusive(), 0.01);
      assertEquals(-0.0F, floatRange1.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(0.0F, 0.0F);
      FloatRange floatRange1 = floatRange0.withMinInclusive(0.0F);
      assertEquals(0.0F, floatRange1.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(4082.3616F, 4082.3616F);
      FloatRange floatRange1 = floatRange0.withMinInclusive(4082.3616F);
      assertNotSame(floatRange0, floatRange1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-1158.0F), 0.0F);
      assertEquals(0.0F, floatRange0.maxInclusive(), 0.01F);
      
      FloatRange floatRange1 = floatRange0.withMinInclusive((-1.0F));
      assertEquals(0.0F, floatRange1.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-83.19F), (-83.19F));
      FloatRange floatRange1 = floatRange0.withMinInclusive((-83.19F));
      assertEquals((-83.19F), floatRange1.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-396.23F), false, 0.0F, false);
      FloatRange floatRange1 = floatRange0.withMinInclusive((-396.23F));
      assertEquals(0.0F, floatRange1.maxExclusive(), 0.01F);
      assertEquals((-396.23F), floatRange1.minInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1989.57F);
      FloatRange floatRange1 = floatRange0.withMinExclusive((-1.4E-45F));
      assertFalse(floatRange1.minIncluded());
      assertEquals((-1.401298464324817E-45), floatRange0.minExclusive(), 0.01);
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.withMaxExclusive(579.60443F);
      FloatRange floatRange2 = floatRange1.withMinExclusive(1.0F);
      assertEquals(579.6044F, floatRange2.maxInclusive(), 0.01F);
      assertEquals(1.0, floatRange2.minExclusive(), 0.01);
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
      assertEquals(0.0F, floatRange1.minInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(0.0F, 0.0F);
      FloatRange floatRange1 = floatRange0.withMinExclusive((-3873.3413F));
      assertEquals(1.4E-45F, floatRange1.maxExclusive(), 0.01F);
      assertEquals((-3873.341F), floatRange1.minInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-2348.2F), true, (-1050.0912F), false);
      FloatRange floatRange1 = floatRange0.withMinExclusive((-2348.2F));
      assertFalse(floatRange1.equals((Object)floatRange0));
      assertEquals((-1050.0913F), floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1758.23F, 1758.23F);
      FloatRange floatRange1 = floatRange0.withMaxInclusive(1758.23F);
      assertEquals(1758.23F, floatRange1.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-83.19F), (-83.19F));
      FloatRange floatRange1 = floatRange0.withMaxInclusive((-83.19F));
      assertNotSame(floatRange1, floatRange0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(0.0F, 0.0F);
      FloatRange floatRange1 = floatRange0.withMaxInclusive(0.0F);
      assertEquals(0.0F, floatRange1.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1.0F, 2743.8F);
      assertEquals(1.0F, floatRange0.minInclusive(), 0.01F);
      
      FloatRange floatRange1 = floatRange0.withMaxExclusive(2659.6348F);
      assertEquals(2659.6345F, floatRange1.maxInclusive(), 0.01F);
      assertEquals(2743.8003F, floatRange0.maxExclusive(), 0.01F);
      assertTrue(floatRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive((-2390.7263F), 1194.6F);
      FloatRange floatRange1 = floatRange0.withMaxExclusive(0.0F);
      FloatRange floatRange2 = floatRange1.negate();
      FloatRange floatRange3 = floatRange2.withMaxExclusive(1194.6F);
      assertEquals(1194.6F, floatRange3.maxExclusive(), 0.01F);
      assertEquals(2390.7263F, floatRange2.maxInclusive(), 0.01F);
      assertEquals(1194.5999F, floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(0.0F, 0.0F);
      FloatRange floatRange1 = floatRange0.negate();
      assertNotSame(floatRange1, floatRange0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-396.23F), false, 0.0F, false);
      FloatRange floatRange1 = floatRange0.negate();
      assertFalse(floatRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1717.421F, 1717.421F);
      float float0 = floatRange0.minInclusive();
      assertEquals(1717.421F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(513.31F);
      FloatRange floatRange1 = floatRange0.negate();
      boolean boolean0 = floatRange1.minIncluded();
      assertFalse(boolean0);
      assertEquals(-0.0F, floatRange1.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1.0F, 1.0F);
      float float0 = floatRange0.min();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-1.0F), 1.0F);
      float float0 = floatRange0.min();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(1.0F, floatRange0.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      float float0 = floatRange1.maxInclusive();
      assertEquals(-0.0F, float0, 0.01F);
      assertEquals((-1.0), floatRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-396.23F), false, (-6.23F), false);
      float float0 = floatRange0.maxInclusive();
      assertEquals((-6.2300005F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1717.421F, 1717.421F);
      boolean boolean0 = floatRange0.maxIncluded();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-83.19F), (-83.19F));
      float float0 = floatRange0.maxExclusive();
      assertEquals((-83.189995F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-1.0F), (-1.4E-45F));
      FloatRange floatRange1 = floatRange0.negate();
      double double0 = floatRange1.minExclusive();
      assertEquals((-1.0000001192092896), floatRange0.minExclusive(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange(0.0F, true, 1.0F, true);
      assertEquals((-1.401298464324817E-45), floatRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange(0.0F, false, 939.7F, false);
      assertEquals(939.69995F, floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-3040.64F), false, 0.0F, true);
      assertTrue(floatRange0.maxIncluded());
      assertFalse(floatRange0.minIncluded());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-396.23F), false, 0.0F, false);
      float float0 = floatRange0.max();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F, 1091.3F);
      double double0 = floatRange0.minExclusive();
      assertEquals(0.9999999403953552, double0, 0.01);
      assertEquals(1091.2999F, floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive((-1549.4725F), 0.0F);
      FloatRange floatRange1 = floatRange0.withMinExclusive((-1549.4725F));
      assertFalse(floatRange1.equals((Object)floatRange0));
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive((-1271.1478F), (-1.0F));
      assertEquals((-1271.1478F), floatRange0.minInclusive(), 0.01F);
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(2743.8F);
      // Undeclared exception!
      try { 
        floatRange0.withMinInclusive(2743.8F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(188.0F);
      // Undeclared exception!
      try { 
        floatRange0.withMinExclusive(188.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(345.0F);
      // Undeclared exception!
      try { 
        floatRange0.withMaxInclusive((-4614.3F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-806.21954F), (-806.21954F));
      // Undeclared exception!
      try { 
        floatRange0.withMaxExclusive((-806.21954F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloatRange.inclusive(8.002238F, (-3826.23F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-1.0F), (-1.0F));
      // Undeclared exception!
      try { 
        floatRange0.includes((Float) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.FloatRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloatRange.exclusive(42.19F, 42.19F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloatRange.exclusive((-1876.8F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > 0
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloatRange.floatRange((-1476.016F), false, (-1476.016F), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange((-533.6F), true, (-1.0F), false);
      float float0 = floatRange0.max();
      assertEquals((-1.0F), float0, 0.01F);
      assertTrue(floatRange0.minIncluded());
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      floatRange1.hashCode();
      assertEquals(-0.0F, floatRange1.maxInclusive(), 0.01F);
      assertFalse(floatRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      floatRange0.hashCode();
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(345.0F);
      FloatRange floatRange1 = floatRange0.withMaxInclusive(345.0F);
      boolean boolean0 = floatRange1.equals(floatRange0);
      assertFalse(boolean0);
      assertEquals((-1.401298464324817E-45), floatRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.withMaxExclusive(1.0F);
      boolean boolean0 = floatRange1.equals(floatRange0);
      assertEquals((-1.401298464324817E-45), floatRange1.minExclusive(), 0.01);
      assertTrue(boolean0);
      assertFalse(floatRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(345.0F);
      FloatRange floatRange1 = floatRange0.withMinExclusive(0.0F);
      boolean boolean0 = floatRange0.equals(floatRange1);
      assertFalse(boolean0);
      assertEquals(344.99997F, floatRange0.maxInclusive(), 0.01F);
      assertEquals(0.0F, floatRange0.min(), 0.01F);
      assertEquals(0.0, floatRange1.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1369.4F, 1369.4F);
      FloatRange floatRange1 = floatRange0.negate();
      boolean boolean0 = floatRange0.equals(floatRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      Object object0 = new Object();
      boolean boolean0 = floatRange0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      boolean boolean0 = floatRange0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
      assertEquals((-1.401298464324817E-45), floatRange0.minExclusive(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      boolean boolean0 = floatRange0.equals(floatRange0);
      assertTrue(boolean0);
      assertEquals((-1.401298464324817E-45), floatRange0.minExclusive(), 0.01);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.withMaxExclusive(2743.8F);
      boolean boolean0 = floatRange1.equals(floatRange0);
      assertFalse(floatRange0.equals((Object)floatRange1));
      assertEquals(0.0F, floatRange1.minInclusive(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
      assertFalse(floatRange1.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(3553.97F);
      Float float0 = new Float(0.0F);
      boolean boolean0 = floatRange0.includes(float0);
      assertEquals(0.0F, floatRange0.min(), 0.01F);
      assertTrue(boolean0);
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      Float float0 = new Float(1.0F);
      boolean boolean0 = floatRange1.includes(float0);
      assertFalse(boolean0);
      assertEquals(-0.0F, floatRange1.maxInclusive(), 0.01F);
      assertFalse(floatRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      Float float0 = new Float((-1.0F));
      boolean boolean0 = floatRange1.includes(float0);
      assertFalse(boolean0);
      assertEquals(-0.0F, floatRange1.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      Float float0 = new Float(1.0F);
      boolean boolean0 = floatRange0.includes(float0);
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      Float float0 = new Float(0.0);
      boolean boolean0 = floatRange1.includes(float0);
      assertTrue(boolean0);
      assertEquals(-0.0F, floatRange1.max(), 0.01F);
      assertFalse(floatRange1.minIncluded());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(1.0F, 1.0F);
      float float0 = floatRange0.maxExclusive();
      assertEquals(1.0000001F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.floatRange(1.0F, true, 1.0F, true);
      FloatRange floatRange1 = floatRange0.withMinExclusive(0.0F);
      FloatRange floatRange2 = floatRange1.negate();
      float float0 = floatRange2.maxExclusive();
      assertEquals(-0.0F, float0, 0.01F);
      assertTrue(floatRange2.minIncluded());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.withMaxInclusive(3615.12F);
      float float0 = floatRange1.maxInclusive();
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
      assertEquals(3615.12F, float0, 0.01F);
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      double double0 = floatRange0.minExclusive();
      assertEquals((-1.401298464324817E-45), double0, 0.01);
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      double double0 = floatRange1.minExclusive();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1.4E-45F, floatRange1.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      float float0 = floatRange0.minInclusive();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      FloatRange floatRange1 = floatRange0.negate();
      float float0 = floatRange1.minInclusive();
      assertEquals((-0.99999994F), float0, 0.01F);
      assertEquals(1.4E-45F, floatRange1.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(0.0F, 503.8143F);
      FloatRange floatRange1 = floatRange0.negate();
      assertEquals((-503.81427F), floatRange1.minInclusive(), 0.01F);
      assertEquals(1.4E-45F, floatRange1.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      float float0 = floatRange0.max();
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive((-3593.9543F), 2208.0F);
      FloatRange floatRange1 = floatRange0.withMaxInclusive((-1.4E-45F));
      assertTrue(floatRange1.maxIncluded());
      
      FloatRange floatRange2 = floatRange1.withMinInclusive((-1.4E-45F));
      assertEquals(-0.0F, floatRange2.maxExclusive(), 0.01F);
      assertEquals((-3593.95458984375), floatRange0.minExclusive(), 0.01);
      assertFalse(floatRange0.maxIncluded());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      boolean boolean0 = floatRange0.minIncluded();
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(0.0F, 503.8143F);
      FloatRange floatRange1 = floatRange0.withMinExclusive(0.0F);
      FloatRange floatRange2 = floatRange1.withMaxInclusive(503.8143F);
      assertEquals(0.0, floatRange2.minExclusive(), 0.01);
      assertEquals(503.8143F, floatRange2.maxInclusive(), 0.01F);
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(503.8143F, floatRange0.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive(0.0F, 0.0F);
      String string0 = floatRange0.toString();
      assertEquals("FloatRange{0.0 .. 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      boolean boolean0 = floatRange0.maxIncluded();
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(1.0F, floatRange0.maxExclusive(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.inclusive((-1.0F), (-1.0F));
      assertTrue(floatRange0.minIncluded());
      
      FloatRange floatRange1 = floatRange0.negate();
      Float float0 = new Float((double) (-1.0F));
      boolean boolean0 = floatRange1.includes(float0);
      assertFalse(boolean0);
      assertEquals((-0.99999994F), floatRange0.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FloatRange.FloatRangeFrom floatRange_FloatRangeFrom0 = FloatRange.from(0.0F);
      assertNotNull(floatRange_FloatRangeFrom0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive(1.0F);
      float float0 = floatRange0.min();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, floatRange0.minInclusive(), 0.01F);
      assertEquals(0.99999994F, floatRange0.maxInclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FloatRange floatRange0 = FloatRange.exclusive((-3593.9543F), 2208.0F);
      FloatRange floatRange1 = floatRange0.withMaxExclusive((-1049.47F));
      assertEquals(2207.9998F, floatRange0.maxInclusive(), 0.01F);
      assertEquals((-3593.95458984375), floatRange0.minExclusive(), 0.01);
      assertEquals((-1049.47F), floatRange1.maxExclusive(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FloatRange.FloatRangeFrom floatRange_FloatRangeFrom0 = FloatRange.fromExclusive(2208.0F);
      assertNotNull(floatRange_FloatRangeFrom0);
  }
}
