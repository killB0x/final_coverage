/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:20:36 GMT 2022
 */

package software.kes.kraftwerk.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.constraints.IntRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntRange_ESTest extends IntRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      intRange0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = intRange0.withMaxInclusive(455);
      intRange0.equals(intRange1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-2147473675), 455);
      IntRange intRange1 = IntRange.fullRange();
      intRange1.equals(intRange0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      Integer integer0 = Integer.valueOf((-622));
      intRange0.includes(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive(1);
      intRange0.withMinInclusive(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-1427), 0);
      intRange0.withMinInclusive((-1427));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-1), (-1));
      intRange0.withMinInclusive((-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-1653), 5769);
      intRange0.withMaxInclusive(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive(272);
      intRange0.withMaxExclusive(3893);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(1, 9974);
      intRange0.withMaxExclusive(9998);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive(272);
      intRange0.minInclusive();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      intRange0.minInclusive();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = intRange0.withMaxExclusive((-208));
      intRange1.maxInclusive();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntRange.exclusive(0, 2452);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntRange.exclusive(236, 2070);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntRange.exclusive((-1032), 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive(1);
      intRange0.withMaxInclusive(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive((-1), 2165);
      // Undeclared exception!
      try { 
        intRange0.withMinInclusive(2165);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(3, 3);
      // Undeclared exception!
      try { 
        intRange0.withMaxInclusive(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(2090, 2090);
      // Undeclared exception!
      try { 
        intRange0.withMaxExclusive(2090);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntRange.inclusive((-2147473700), (-2147473701));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be >= min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(2070, 2070);
      // Undeclared exception!
      try { 
        intRange0.includes((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.constraints.IntRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntRange.exclusive(10177, 10177);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntRange.exclusive((-1), 1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      intRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(2070, 2070);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      intRange0.forEach(consumer0);
      assertEquals(2070, intRange0.maxInclusive());
      assertEquals(2070, intRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = intRange0.withMaxInclusive(455);
      IntRange intRange2 = intRange1.withMaxInclusive(455);
      boolean boolean0 = intRange1.equals(intRange2);
      assertEquals(455, intRange2.maxInclusive());
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, intRange1.minInclusive());
      assertFalse(intRange2.equals((Object)intRange0));
      assertFalse(intRange0.equals((Object)intRange2));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = intRange0.withMaxInclusive(455);
      boolean boolean0 = intRange1.equals(intRange0);
      assertEquals(Integer.MIN_VALUE, intRange1.minInclusive());
      assertEquals(455, intRange1.maxInclusive());
      assertFalse(intRange0.equals((Object)intRange1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(2070, 2070);
      Object object0 = new Object();
      boolean boolean0 = intRange0.equals(object0);
      assertEquals(2070, intRange0.maxInclusive());
      assertEquals(2070, intRange0.minInclusive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive(2581);
      boolean boolean0 = intRange0.equals((Object) null);
      assertEquals(2580, intRange0.maxInclusive());
      assertFalse(boolean0);
      assertEquals(0, intRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      boolean boolean0 = intRange0.equals(intRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(26, 26);
      IntRange intRange1 = intRange0.withMaxInclusive(447);
      IntRange intRange2 = intRange1.withMinInclusive(447);
      boolean boolean0 = intRange2.equals(intRange1);
      assertEquals(447, intRange2.minInclusive());
      assertFalse(boolean0);
      assertEquals(26, intRange1.minInclusive());
      assertEquals(447, intRange1.maxInclusive());
      assertFalse(intRange1.equals((Object)intRange2));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-1653), 5769);
      IntRange intRange1 = intRange0.withMaxExclusive(1);
      Integer integer0 = new Integer(815);
      boolean boolean0 = intRange1.includes(integer0);
      assertEquals((-1653), intRange0.minInclusive());
      assertEquals((-1653), intRange1.minInclusive());
      assertFalse(boolean0);
      assertEquals(0, intRange1.maxInclusive());
      assertEquals(5769, intRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(0, 0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = intRange0.includes(integer0);
      assertEquals(0, intRange0.minInclusive());
      assertTrue(boolean0);
      assertEquals(0, intRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = intRange0.withMinInclusive(4447);
      Integer integer0 = new Integer(0);
      boolean boolean0 = intRange1.includes(integer0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, intRange1.maxInclusive());
      assertEquals(4447, intRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(2070, 2070);
      int int0 = intRange0.minInclusive();
      assertEquals(2070, int0);
      assertEquals(2070, intRange0.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      int int0 = intRange0.maxInclusive();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      String string0 = intRange0.toString();
      assertEquals("IntRange{-2147483648 .. 2147483647}", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      Iterator<Integer> iterator0 = intRange0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = intRange0.withMaxInclusive((-2147473667));
      assertEquals((-2147473667), intRange1.maxInclusive());
      assertEquals(Integer.MIN_VALUE, intRange1.minInclusive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(1, 9974);
      intRange0.hashCode();
      assertEquals(9974, intRange0.maxInclusive());
      assertEquals(1, intRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntRange.exclusive((-1176));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max must be > min
         //
         verifyException("software.kes.kraftwerk.constraints.RangeInputValidation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntRange.IntRangeFrom intRange_IntRangeFrom0 = IntRange.from((-2147473676));
      assertNotNull(intRange_IntRangeFrom0);
  }
}
