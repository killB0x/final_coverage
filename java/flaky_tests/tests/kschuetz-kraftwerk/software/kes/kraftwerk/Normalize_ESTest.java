/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:38:22 GMT 2022
 */

package software.kes.kraftwerk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.Normalize;
import software.kes.kraftwerk.constraints.IntRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-4011), (-4011));
      IntRange intRange1 = intRange0.withMaxExclusive(1);
      IntRange intRange2 = Normalize.normalizeSizeRange(intRange1);
      assertEquals(0, intRange2.minInclusive());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-1), 1274);
      IntRange intRange1 = intRange0.withMinInclusive(515);
      IntRange intRange2 = Normalize.normalizeSizeRange(intRange1);
      assertEquals(515, intRange2.minInclusive());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Normalize.normalizeSizeRange((IntRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.Normalize", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive((-12), (-12));
      IntRange intRange1 = Normalize.normalizeSizeRange(intRange0);
      assertEquals(0, intRange1.maxInclusive());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      IntRange intRange1 = Normalize.normalizeSizeRange(intRange0);
      IntRange intRange2 = Normalize.normalizeSizeRange(intRange1);
      assertSame(intRange2, intRange1);
      assertEquals(Integer.MAX_VALUE, intRange2.maxInclusive());
      assertEquals(0, intRange2.minInclusive());
  }
}
