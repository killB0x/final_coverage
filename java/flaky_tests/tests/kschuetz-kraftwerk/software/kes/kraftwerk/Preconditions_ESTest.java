/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:31:18 GMT 2022
 */

package software.kes.kraftwerk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import software.kes.kraftwerk.Preconditions;
import software.kes.kraftwerk.constraints.IntRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Preconditions_ESTest extends Preconditions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Preconditions.requireNaturalSize(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntRange intRange0 = IntRange.exclusive(972);
      Preconditions.requireNaturalSize(intRange0);
      assertEquals(0, intRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Preconditions.requirePositiveSize((IntRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Preconditions.requireNaturalSize((IntRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("software.kes.kraftwerk.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Preconditions.requireNaturalSize((-2654));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimum size must be >= 0
         //
         verifyException("software.kes.kraftwerk.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Preconditions.requireNaturalSize(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      // Undeclared exception!
      try { 
        Preconditions.requireNaturalSize(intRange0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimum size must be >= 0
         //
         verifyException("software.kes.kraftwerk.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(306, 306);
      Preconditions.requireNaturalSize(intRange0);
      assertEquals(306, intRange0.minInclusive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Preconditions.requirePositiveSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimum size must be >= 1
         //
         verifyException("software.kes.kraftwerk.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Preconditions.requirePositiveSize(52);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntRange intRange0 = IntRange.fullRange();
      // Undeclared exception!
      try { 
        Preconditions.requirePositiveSize(intRange0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimum size must be >= 1
         //
         verifyException("software.kes.kraftwerk.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntRange intRange0 = IntRange.inclusive(2090, 2090);
      Preconditions.requirePositiveSize(intRange0);
      assertEquals(2090, intRange0.minInclusive());
  }
}
