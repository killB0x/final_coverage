/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 18:38:19 GMT 2022
 */

package org.hswebframework.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.hswebframework.utils.StringUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitFirst("[-+]?d+.d+", ".pnA");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.underScoreCase2CamelCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.toUnicodeString(charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = StringUtils.toStringAndSplit(object0, "");
      assertEquals(25, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.toString((Object) "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.toUnicode("");
      String string1 = StringUtils.toString((Object) string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = StringUtils.toLong((Object) "nullnullnullnull", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-3128));
      long long0 = StringUtils.toLong((Object) integer0, 791L);
      assertEquals((-3128L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = StringUtils.toLong((Object) "");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1423);
      long long0 = StringUtils.toLong((Object) integer0);
      assertEquals(1423L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = StringUtils.toInt((Object) integer0, 1980);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1104);
      int int0 = StringUtils.toInt((Object) integer0, 2158);
      assertEquals(1104, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = StringUtils.toInt((Object) "t|SV");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = StringUtils.toInt((Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = StringUtils.toDouble((Object) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(701);
      double double0 = StringUtils.toDouble((Object) integer0);
      assertEquals(701.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.toASCII("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtils.matcherFirst("", "z[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtils.isTrue("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.concatSpiltWith("G'>G", objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.concat(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.camelCase2UnderScoreCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.underScoreCase2CamelCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toUpperCaseFirstOne("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toUpperCaseFirstOne((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toUnicodeString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toUnicode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toStringAndSplit("G'{VG", "G'{VG");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // G'{VG
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        StringUtils.toStringAndSplit(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toLowerCaseFirstOne("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toLowerCaseFirstOne((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toASCII((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("_+c&i8s`h");
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        StringUtils.throwable2String(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.splitFirst("G'{VG", "G'{VG");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // G'{VG
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.splitFirst((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.matcherFirst("dL%.v@Z;Ux;gsQF(zAN", "dL%.v@Z;Ux;gsQF(zAN");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 19
         // dL%.v@Z;Ux;gsQF(zAN
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.matcherFirst((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.isMessyCode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.containsChineseChar((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.concatSpiltWith("I{-NfiKDuF({O{jM|,G", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.concat((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.compileRegex("bEoq8r[~T1Yx_o`UX");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // bEoq8r[~T1Yx_o`UX
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.compileRegex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.camelCase2UnderScoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      String string0 = StringUtils.toString(object0, "P!ff)s_~@ug'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = StringUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(1916);
      long long0 = StringUtils.toLong((Object) integer0, (long) 1916);
      assertEquals(1916L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer((-2988));
      int int0 = StringUtils.toInt((Object) integer0, (-2988));
      assertEquals((-2988), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = StringUtils.isDouble(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = StringUtils.isDouble((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = StringUtils.isInt((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumber((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      boolean boolean0 = StringUtils.isNullOrEmpty(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = StringUtils.isNullOrEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = StringUtils.concatSpiltWith("u#mI&KNXOp04", objectArray0);
      assertEquals("nullu#mI&KNXOp04nullu#mI&KNXOp04nullu#mI&KNXOp04nullu#mI&KNXOp04null", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = StringUtils.isMessyCode("true");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = StringUtils.isMessyCode("_o>\",_l}ug$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = StringUtils.toStringAndSplit((Object) null, "/g9L*BkJ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = StringUtils.toStringAndSplit("Y}]d_%1K", "Y}]d_%1K");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = StringUtils.camelCase2UnderScoreCase("G'>G");
      String string1 = StringUtils.toString((Object) string0);
      assertNotNull(string1);
      assertEquals("_g'>_g", string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = StringUtils.toUpperCaseFirstOne("u#mI&KNXOp04");
      assertEquals("U#mI&KNXOp04", string0);
      
      long long0 = StringUtils.toLong((Object) string0, (long) 701);
      assertEquals(701L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[] stringArray0 = StringUtils.splitFirst("nullnullnullnullnullnullnull", "nullnullnullnullnullnullnull");
      boolean boolean0 = StringUtils.contains(stringArray0, objectArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[4];
      boolean boolean0 = StringUtils.contains(objectArray0, objectArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = StringUtils.contains(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = StringUtils.contains(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((Object[]) null, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = StringUtils.isBoolean("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = StringUtils.isBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(99);
      boolean boolean0 = StringUtils.isInt(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = StringUtils.matcherFirst("Y}]d_%1K", "Y}]d_%1K");
      assertEquals("Y}]d_%1K", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = StringUtils.matcherFirst("K_k:B@VE;7u\"+/r", "K_k:B@VE;7u\"+/r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(253);
      boolean boolean0 = StringUtils.isNumber(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = StringUtils.toDouble((Object) null, 0.4);
      assertEquals(0.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = StringUtils.containsChineseChar("f`p-*vM|a5K>2@j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.toUnicodeString(charArray0);
      assertEquals("\\u0\\u0", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = StringUtils.toUnicode("2c233d5e3f7e3d5a516a377b47");
      assertEquals("\\u32\\u63\\u32\\u33\\u33\\u64\\u35\\u65\\u33\\u66\\u37\\u65\\u33\\u64\\u35\\u61\\u35\\u31\\u36\\u61\\u33\\u37\\u37\\u62\\u34\\u37", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = StringUtils.toASCII("f`p-*vM|a5K>2@j");
      assertEquals("6660702d2a764d7f7c61354b3e32406a", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = StringUtils.camelCase2UnderScoreCase("G'>G");
      assertEquals("_g'>_g", string0);
      
      double double0 = StringUtils.toDouble((Object) string0, 1357.8747889563);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = StringUtils.underScoreCase2CamelCase("vQGPPlP<G");
      assertEquals("vQGPPlP<G", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = StringUtils.underScoreCase2CamelCase("_o>\",_l}ug$");
      assertEquals("_o>\",L}ug$", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = StringUtils.toUpperCaseFirstOne("Pa^qBed?hn}!j");
      assertEquals("Pa^qBed?hn}!j", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = StringUtils.toLowerCaseFirstOne("java.lang.Integer@0000000002");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = StringUtils.toLowerCaseFirstOne("K!]N6z<omV#,pc;}1)U");
      assertEquals("k!]N6z<omV#,pc;}1)U", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      boolean boolean0 = StringUtils.isBoolean(integer0);
      StringUtils.toDouble((Object) integer0, (-1.0));
      Object object0 = new Object();
      StringUtils.toLong((Object) integer0);
      StringUtils.toUpperCaseFirstOne("java.lang.Object@36c04065");
      Object object1 = new Object();
      boolean boolean1 = StringUtils.isInt(object1);
      assertTrue(boolean1 == boolean0);
      
      StringUtils.compileRegex(" YN1;&*K?;Gku");
      int int0 = StringUtils.toInt(object0, (-3093));
      assertEquals((-3093), int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer(99);
      int int0 = StringUtils.toInt((Object) integer0);
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.concat(objectArray0);
      assertEquals("nullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer((-4111));
      double double0 = StringUtils.toDouble((Object) integer0);
      assertEquals((-4111.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = StringUtils.toString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      boolean boolean0 = StringUtils.isTrue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = StringUtils.throwable2String(mockThrowable0);
      //  // Unstable assertion: assertEquals("jdk.internal.reflect.GeneratedConstructorAccessor43.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }
}
