/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 18:41:12 GMT 2022
 */

package org.hswebframework.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.hswebframework.utils.ClassUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type[] typeArray0 = new Type[7];
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();
      Class<?> class0 = ClassUtils.getGenericTypeByType(parameterizedType0, 1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = ClassUtils.getGenericType(class0, 1);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtils.getGenericType(class0);
      // Undeclared exception!
      try { 
        ClassUtils.getAnnotation(class1, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();
      Class<?> class1 = ClassUtils.getGenericTypeByType(parameterizedType0, 0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        ClassUtils.instanceOf(class0, (Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getGenericTypeByType((ParameterizedType) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        ClassUtils.getGenericType(class0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        ClassUtils.getGenericType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtils.getAnnotation((Method) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtils.cast((Object) class0, (Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = ClassUtils.instanceOf(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtils.getGenericType(class0);
      Class<Date> class2 = Date.class;
      boolean boolean0 = ClassUtils.instanceOf(class2, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtils.instanceOf((Class) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<Boolean> class0 = Boolean.TYPE;
      typeArray0[0] = (Type) class0;
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();
      Class<?> class1 = ClassUtils.getGenericTypeByType(parameterizedType0, 0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();
      Class<?> class0 = ClassUtils.getGenericTypeByType(parameterizedType0, 40869);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = ClassUtils.isBasicClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtils.isBasicClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        ClassUtils.cast((Object) class0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/joda/time/ReadableInstant
         //
         verifyException("org.hswebframework.utils.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = ClassUtils.cast((Object) null, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = ClassUtils.instanceOf(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Date> class0 = Date.class;
      Date date0 = ClassUtils.cast((Object) mockDate0, class0);
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ChronoLocalDate chronoLocalDate0 = ClassUtils.cast((Object) japaneseDate0, class0);
      assertSame(chronoLocalDate0, japaneseDate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtils.instanceOf(class0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type[] typeArray0 = new Type[9];
      ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();
      Class<?> class0 = ClassUtils.getGenericTypeByType(parameterizedType0, (-3773));
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = ClassUtils.getGenericType(class0);
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = ClassUtils.getAnnotation(class1, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtils.getGenericType(class0);
      Annotation annotation0 = ClassUtils.cast((Object) class1, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
  }
}
