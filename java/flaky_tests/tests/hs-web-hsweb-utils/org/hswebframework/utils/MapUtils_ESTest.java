/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 18:47:35 GMT 2022
 */

package org.hswebframework.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hswebframework.utils.MapUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Map<Integer, Integer> map0 = MapUtils.merge((Map<Integer, Integer>) hashMap0, (Map<Integer, Integer>) hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Supplier<Map<String, Object>> supplier0 = (Supplier<Map<String, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(supplier0).get();
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, Object>) hashMap0;
      mapArray0[1] = (Map<String, Object>) hashMap0;
      mapArray0[2] = (Map<String, Object>) hashMap0;
      mapArray0[3] = (Map<String, Object>) hashMap0;
      mapArray0[4] = (Map<String, Object>) hashMap0;
      mapArray0[5] = (Map<String, Object>) hashMap0;
      Map<String, Object> map0 = MapUtils.merge(supplier0, (Map<String, Object>) hashMap0, mapArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Supplier<Map<Integer, Integer>> supplier0 = (Supplier<Map<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(supplier0).get();
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 3);
      Integer integer0 = new Integer(6);
      hashMap0.put(integer0, integer0);
      mapArray0[0] = (Map<Integer, Integer>) hashMap0;
      mapArray0[1] = (Map<Integer, Integer>) hashMap0;
      mapArray0[2] = (Map<Integer, Integer>) hashMap0;
      Map<Integer, Integer> map0 = MapUtils.merge(supplier0, mapArray0[0], mapArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1859);
      hashMap0.put((Integer) null, integer0);
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<Integer, Integer>) hashMap0;
      mapArray0[1] = (Map<Integer, Integer>) hashMap0;
      mapArray0[2] = (Map<Integer, Integer>) hashMap0;
      mapArray0[3] = (Map<Integer, Integer>) hashMap0;
      mapArray0[4] = (Map<Integer, Integer>) hashMap0;
      mapArray0[5] = (Map<Integer, Integer>) hashMap0;
      Map<Integer, Integer> map0 = MapUtils.merge((Map<Integer, Integer>) hashMap0, (Map<Integer, Integer>) hashMap0, mapArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(6);
      hashMap0.put(integer0, integer0);
      Map<Integer, Integer> map0 = MapUtils.merge((Map<Integer, Integer>) hashMap0, (Map<Integer, Integer>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.sortMapByKey((Map<Integer, HashMap<HashMap, HashMap>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 4);
      hashMap0.put(hashMap0, (Object) null);
      // Undeclared exception!
      try { 
        MapUtils.merge((Map<Object, Object>) hashMap0, (Map<Object, Object>) hashMap0, mapArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        MapUtils.merge((Map<Integer, String>) hashMap0, (Map<Integer, String>) hashMap0, (Map<Integer, String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.merge((Map<Integer, Integer>) null, (Map<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      mapArray0[0] = (Map<String, Object>) hashMap0;
      mapArray0[1] = (Map<String, Object>) hashMap0;
      mapArray0[2] = (Map<String, Object>) hashMap0;
      mapArray0[3] = (Map<String, Object>) hashMap0;
      Map<String, Object> map0 = MapUtils.merge((Map<String, Object>) hashMap0, (Map<String, Object>) hashMap0, mapArray0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1859);
      hashMap0.put((Integer) null, integer0);
      Map<Integer, Integer> map0 = MapUtils.sortMapByKey((Map<Integer, Integer>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Map<Integer, Integer> map0 = MapUtils.sortMapByKey((Map<Integer, Integer>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(3);
      hashMap0.put("Hz?\"_`=J{|vI]alec", integer0);
      Map<String, Object> map0 = MapUtils.removeEmptyValue(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, (Object) null);
      Map<String, Object> map0 = MapUtils.removeEmptyValue(hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Map<String, Object> map0 = MapUtils.removeEmptyValue((Map<String, Object>) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1859);
      hashMap0.put((Integer) null, integer0);
      boolean boolean0 = MapUtils.isNullOrEmpty(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      boolean boolean0 = MapUtils.isNullOrEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MapUtils.isNullOrEmpty((Map) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      Supplier<Map<String, Object>> supplier0 = (Supplier<Map<String, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mapArray0[2]).when(supplier0).get();
      // Undeclared exception!
      try { 
        MapUtils.merge(supplier0, mapArray0[3], mapArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hswebframework.utils.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MapUtils mapUtils0 = new MapUtils();
  }
}
