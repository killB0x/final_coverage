/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 22:24:52 GMT 2022
 */

package no.sintef.jasm.ext;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import no.sintef.jasm.Component;
import no.sintef.jasm.Port;
import no.sintef.jasm.ext.Event;
import no.sintef.jasm.ext.EventType;
import no.sintef.jasm.ext.NullEvent;
import no.sintef.jasm.ext.NullEventType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Event_ESTest extends Event_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      Port port0 = new Port("no.sintef.jasm.ext.Event", (Component) null);
      Event event1 = event0.setPort(port0);
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      nullEvent0.setPort(port0);
      boolean boolean0 = nullEvent0.equals(event1);
      assertTrue(nullEvent0.equals((Object)event0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullEvent nullEvent0 = new NullEvent((EventType) null);
      EventType eventType0 = nullEvent0.getType();
      assertNull(eventType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      EventType eventType0 = event0.getType();
      assertEquals((short)0, eventType0.getCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      Event event0 = nullEvent0.clone();
      Event event1 = nullEvent0.clone();
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      event1.setPort(port0);
      Port port1 = event0.getPort();
      assertSame(port1, port0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullEvent nullEvent0 = new NullEvent((EventType) null);
      // Undeclared exception!
      try { 
        nullEvent0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.ext.Event", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      // Undeclared exception!
      try { 
        nullEvent0.equals(nullEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.ext.Event", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullEvent nullEvent0 = new NullEvent((EventType) null);
      // Undeclared exception!
      try { 
        nullEvent0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.ext.NullEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      Port port0 = event0.getPort();
      assertNull(port0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      Port port0 = new Port("Q", (Component) null);
      Event event0 = nullEvent0.setPort(port0);
      NullEvent nullEvent1 = new NullEvent(nullEventType0);
      boolean boolean0 = nullEvent1.equals(event0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      boolean boolean0 = nullEvent0.equals(port0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      Port port0 = new Port("no.sintef.jasm.ext.Event", (Component) null);
      event0.setPort(port0);
      event0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      event0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullEventType nullEventType0 = new NullEventType();
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      // Undeclared exception!
      try { 
        nullEvent0.toString("[hfVG,Sa~?Pp9_]M");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.ext.Event", e);
      }
  }
}
