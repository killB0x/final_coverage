/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 22:27:09 GMT 2022
 */

package no.sintef.jasm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import no.sintef.jasm.AtomicState;
import no.sintef.jasm.Component;
import no.sintef.jasm.Handler;
import no.sintef.jasm.Port;
import no.sintef.jasm.Status;
import no.sintef.jasm.ext.Event;
import no.sintef.jasm.ext.NullEvent;
import no.sintef.jasm.ext.NullEventType;
import no.sintef.jasm.ext.StateAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicState_ESTest extends AtomicState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("\"6Atomdc state ");
      Handler handler0 = new Handler();
      Handler handler1 = handler0.from(atomicState0);
      AtomicState atomicState1 = atomicState0.add(handler1);
      assertSame(atomicState1, atomicState0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("");
      StateAction stateAction0 = atomicState0.onEntry;
      atomicState0.onExit(stateAction0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("");
      NullEventType nullEventType0 = new NullEventType();
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      StateAction stateAction0 = atomicState0.onExit;
      Status status0 = new Status();
      atomicState0.handle(nullEvent0, status0);
      status0.next.onEntry(stateAction0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("ac9mIzvvs7Br");
      Status status0 = new Status();
      AtomicState atomicState1 = atomicState0.add((Handler) null);
      // Undeclared exception!
      try { 
        atomicState1.handle((Event) null, status0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.AtomicState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("- 0mZm|gP~WG");
      Handler handler0 = new Handler();
      atomicState0.transitions = null;
      // Undeclared exception!
      try { 
        atomicState0.add(handler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.AtomicState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.AtomicState");
      NullEventType nullEventType0 = Handler.nullEventType;
      Event event0 = nullEventType0.instantiate();
      Status status0 = new Status();
      Handler handler0 = new Handler();
      atomicState0.add(handler0);
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("no.sintef.jasm.AtomicState", component0);
      Event event1 = event0.setPort(port0);
      atomicState0.handle(event1, status0);
      assertSame(event0, event1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.AtomicState");
      NullEventType nullEventType0 = Handler.nullEventType;
      Event event0 = nullEventType0.instantiate();
      Status status0 = new Status();
      Handler handler0 = new Handler();
      AtomicState atomicState1 = atomicState0.add(handler0);
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.AtomicState");
      StateAction stateAction0 = atomicState0.onExit;
      atomicState0.onExit(stateAction0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.AtomicState");
      atomicState0.onEntry(atomicState0.onEntry);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.AtomicState");
      String string0 = atomicState0.toString();
      assertEquals("Atomic state no.sintef.jasm.AtomicState", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AtomicState atomicState0 = new AtomicState("");
      AtomicState atomicState1 = atomicState0.build();
      assertSame(atomicState0, atomicState1);
  }
}
