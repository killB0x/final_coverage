/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 22:22:08 GMT 2022
 */

package no.sintef.jasm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import no.sintef.jasm.AtomicState;
import no.sintef.jasm.Component;
import no.sintef.jasm.Handler;
import no.sintef.jasm.Port;
import no.sintef.jasm.Status;
import no.sintef.jasm.ext.Event;
import no.sintef.jasm.ext.EventType;
import no.sintef.jasm.ext.HandlerAction;
import no.sintef.jasm.ext.HandlerCheck;
import no.sintef.jasm.ext.NullEvent;
import no.sintef.jasm.ext.NullEventType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Handler_ESTest extends Handler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Handler handler0 = new Handler();
      // Undeclared exception!
      try { 
        handler0.from((AtomicState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.sintef.jasm.Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Handler handler0 = new Handler();
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      Handler handler1 = handler0.port(port0);
      HandlerCheck handlerCheck0 = mock(HandlerCheck.class, new ViolatedAssumptionAnswer());
      Handler handler2 = handler1.guard(handlerCheck0);
      AtomicState atomicState0 = new AtomicState("");
      NullEventType nullEventType0 = new NullEventType();
      AtomicState atomicState1 = atomicState0.add(handler2);
      Event event0 = nullEventType0.instantiate();
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Handler handler0 = new Handler();
      Status status0 = new Status();
      AtomicState atomicState0 = new AtomicState("");
      atomicState0.add(handler0);
      HandlerCheck handlerCheck0 = mock(HandlerCheck.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerCheck0).check(any(no.sintef.jasm.ext.Event.class));
      Handler handler1 = handler0.guard(handlerCheck0);
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      handler1.port(port0);
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      Event event1 = event0.setPort(port0);
      atomicState0.handle(event0, status0);
      assertSame(event0, event1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Handler handler0 = new Handler();
      AtomicState atomicState0 = new AtomicState("G");
      atomicState0.add(handler0);
      NullEventType nullEventType0 = Handler.nullEventType;
      NullEvent nullEvent0 = new NullEvent(nullEventType0);
      HandlerCheck handlerCheck0 = mock(HandlerCheck.class, new ViolatedAssumptionAnswer());
      handler0.guard(handlerCheck0);
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("bgEDu[d5/G!a0f,/x", component0);
      Event event0 = nullEvent0.setPort(port0);
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(event0, nullEvent0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Handler handler0 = new Handler();
      HandlerCheck handlerCheck0 = mock(HandlerCheck.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(handlerCheck0).check(any(no.sintef.jasm.ext.Event.class));
      handler0.guard(handlerCheck0);
      AtomicState atomicState0 = new AtomicState("");
      NullEventType nullEventType0 = new NullEventType();
      AtomicState atomicState1 = atomicState0.add(handler0);
      Event event0 = nullEventType0.instantiate();
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Handler handler0 = new Handler();
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      handler0.port(port0);
      AtomicState atomicState0 = new AtomicState("");
      NullEventType nullEventType0 = new NullEventType();
      AtomicState atomicState1 = atomicState0.add(handler0);
      Event event0 = nullEventType0.instantiate();
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Handler handler0 = new Handler();
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      AtomicState atomicState0 = new AtomicState("\"R67E:6uAmgfis@");
      AtomicState atomicState1 = atomicState0.add(handler0);
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      event0.setPort(port0);
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Handler handler0 = new Handler();
      AtomicState atomicState0 = new AtomicState("\"R67E:6uAmgfis@");
      AtomicState atomicState1 = atomicState0.add(handler0);
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Handler handler0 = new Handler();
      NullEvent nullEvent0 = new NullEvent((EventType) null);
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.Handler");
      AtomicState atomicState1 = atomicState0.add(handler0);
      Status status0 = new Status();
      atomicState1.handle(nullEvent0, status0);
      assertSame(atomicState1, atomicState0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Handler handler0 = new Handler();
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.Handler");
      Handler handler1 = handler0.from(atomicState0);
      assertSame(handler1, handler0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Handler handler0 = new Handler();
      HandlerAction handlerAction0 = mock(HandlerAction.class, new ViolatedAssumptionAnswer());
      Handler handler1 = handler0.action(handlerAction0);
      assertSame(handler1, handler0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Handler handler0 = new Handler();
      Component component0 = mock(Component.class, new ViolatedAssumptionAnswer());
      Port port0 = new Port("", component0);
      handler0.port(port0);
      AtomicState atomicState0 = new AtomicState("\"R67E:6uAmgfis@");
      AtomicState atomicState1 = atomicState0.add(handler0);
      NullEventType nullEventType0 = new NullEventType();
      Event event0 = nullEventType0.instantiate();
      event0.setPort(port0);
      Status status0 = new Status();
      atomicState0.handle(event0, status0);
      assertSame(atomicState0, atomicState1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Handler handler0 = new Handler();
      Handler handler1 = handler0.event((EventType) null);
      assertSame(handler1, handler0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Handler handler0 = new Handler();
      AtomicState atomicState0 = new AtomicState("no.sintef.jasm.Handler");
      Handler handler1 = handler0.to(atomicState0);
      assertSame(handler0, handler1);
  }
}
