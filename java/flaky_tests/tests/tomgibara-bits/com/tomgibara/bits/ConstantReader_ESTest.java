/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 00:28:01 GMT 2022
 */

package com.tomgibara.bits;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tomgibara.bits.ConstantReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantReader_ESTest extends ConstantReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1235L, 565L);
      long long0 = constantReader_ZerosReader0.readLong(64);
      assertEquals(629L, constantReader_ZerosReader0.getPosition());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader((-4407L), (-4407L));
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.read(32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(236L, (-1049L));
      long long0 = constantReader_OnesReader0.readLong(0);
      assertEquals((-1049L), constantReader_OnesReader0.getPosition());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(236L, (-1049L));
      int int0 = constantReader_OnesReader0.read(0);
      assertEquals(0, int0);
      assertEquals((-1049L), constantReader_OnesReader0.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1L, 236L);
      constantReader_ZerosReader0.advance((-377L));
      boolean boolean0 = constantReader_ZerosReader0.readBoolean();
      assertEquals((-140L), constantReader_ZerosReader0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1L, 236L);
      constantReader_ZerosReader0.advance((-377L));
      int int0 = constantReader_ZerosReader0.readBit();
      assertEquals((-140L), constantReader_ZerosReader0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1534L, (-714L));
      long long0 = constantReader_ZerosReader0.setPosition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(0L, (-1L));
      assertEquals((-1L), constantReader_OnesReader0.getPosition());
      
      constantReader_OnesReader0.readBit();
      long long0 = constantReader_OnesReader0.getPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1534L, (-714L));
      long long0 = constantReader_ZerosReader0.getPosition();
      assertEquals((-714L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(408L, 408L);
      // Undeclared exception!
      try { 
        constantReader_OnesReader0.advance(408L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader((-1271L), 565L);
      try { 
        constantReader_ZerosReader0.readUntil(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader$ZerosReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(9223372036854775123L, 642L);
      int int0 = constantReader_ZerosReader0.readUntil(false);
      assertEquals(643L, constantReader_ZerosReader0.getPosition());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(9223372036854775807L, 0);
      long long0 = constantReader_ZerosReader0.readLong(0);
      assertEquals(0L, constantReader_ZerosReader0.getPosition());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(417L, 417L);
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.readLong((-2802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative count
         //
         verifyException("com.tomgibara.bits.ConstantReader$ZerosReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(408L, 408L);
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.readLong(153);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count too great
         //
         verifyException("com.tomgibara.bits.ConstantReader$ZerosReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(3209L, 3209L);
      int int0 = constantReader_ZerosReader0.read(0);
      assertEquals(3209L, constantReader_ZerosReader0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(408L, 408L);
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.read((-4429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative count
         //
         verifyException("com.tomgibara.bits.ConstantReader$ZerosReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1L, 236L);
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.read(64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count too great
         //
         verifyException("com.tomgibara.bits.ConstantReader$ZerosReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(9223372036854775807L, 9223372036854775807L);
      int int0 = constantReader_OnesReader0.readUntil(true);
      assertEquals((-9223372036854775808L), constantReader_OnesReader0.getPosition());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(2611L, 2611L);
      try { 
        constantReader_OnesReader0.readUntil(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader$OnesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(9223372036854775807L, 16L);
      long long0 = constantReader_OnesReader0.readLong(62);
      assertEquals(78L, constantReader_OnesReader0.getPosition());
      assertEquals(4611686018427387903L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(234, 234);
      // Undeclared exception!
      try { 
        constantReader_OnesReader0.readLong(234);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count too great
         //
         verifyException("com.tomgibara.bits.ConstantReader$OnesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader((-549), (-549));
      // Undeclared exception!
      try { 
        constantReader_OnesReader0.readLong((-549));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative count
         //
         verifyException("com.tomgibara.bits.ConstantReader$OnesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(9223372036854775807L, 735L);
      long long0 = constantReader_OnesReader0.readLong(64);
      assertEquals(799L, constantReader_OnesReader0.getPosition());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader((-9223372036854765820L), (-9223372036854765820L));
      int int0 = constantReader_OnesReader0.read(4);
      assertEquals((-9223372036854765816L), constantReader_OnesReader0.getPosition());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(228, 228);
      // Undeclared exception!
      try { 
        constantReader_OnesReader0.read(228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count too great
         //
         verifyException("com.tomgibara.bits.ConstantReader$OnesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader((-1204L), (-1204L));
      // Undeclared exception!
      try { 
        constantReader_OnesReader0.read((-2216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative count
         //
         verifyException("com.tomgibara.bits.ConstantReader$OnesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(9223372036854775807L, 735L);
      int int0 = constantReader_OnesReader0.read(32);
      assertEquals(767L, constantReader_OnesReader0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(40L, 40L);
      long long0 = constantReader_ZerosReader0.setPosition(40L);
      assertEquals(40L, constantReader_ZerosReader0.getPosition());
      assertEquals(40L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader((-58L), (-58L));
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.setPosition((-58L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(1L, 4294967295L);
      // Undeclared exception!
      try { 
        constantReader_ZerosReader0.setPosition(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(16L, 9223372036854775807L);
      long long0 = constantReader_ZerosReader0.getPosition();
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = constantReader_OnesReader0.readBoolean();
      assertEquals((-9223372036854775808L), constantReader_OnesReader0.getPosition());
      assertTrue(boolean0);
  }
}
