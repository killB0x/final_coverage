/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 00:25:46 GMT 2022
 */

package com.tomgibara.bits;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tomgibara.bits.BitReader;
import com.tomgibara.bits.BitStreams;
import com.tomgibara.bits.ByteArrayBitReader;
import com.tomgibara.bits.CharBitReader;
import com.tomgibara.bits.ConstantReader;
import com.tomgibara.bits.FileChannelBitReader;
import com.tomgibara.bits.InputStreamBitReader;
import com.tomgibara.bits.IntArrayBitReader;
import com.tomgibara.bits.OpBitReader;
import java.io.FileDescriptor;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitStreams_ESTest extends BitStreams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BitStreams.checkPosition(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntArrayBitReader intArrayBitReader0 = new IntArrayBitReader(intArray0);
      OpBitReader.Xor opBitReader_Xor0 = new OpBitReader.Xor(intArrayBitReader0, intArrayBitReader0);
      long long0 = BitStreams.slowForwardSkip(opBitReader_Xor0, 1);
      assertEquals(2L, intArrayBitReader0.getPosition());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = BitStreams.slowForwardSkip((BitReader) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-42);
      ByteArrayBitReader byteArrayBitReader0 = new ByteArrayBitReader(byteArray0);
      boolean boolean0 = BitStreams.isSameBits(byteArrayBitReader0, byteArrayBitReader0);
      assertEquals(60L, byteArrayBitReader0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(2147483647L, 2147483647L);
      long long0 = BitStreams.slowForwardSkip(constantReader_ZerosReader0, 2147483647L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayBitReader byteArrayBitReader0 = new ByteArrayBitReader(byteArray0, (byte)0);
      long long0 = BitStreams.countBits(byteArrayBitReader0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBitReader charBitReader0 = new CharBitReader(charBuffer0);
      long long0 = BitStreams.countBits(charBitReader0);
      assertEquals(2L, charBitReader0.getPosition());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntArrayBitReader intArrayBitReader0 = new IntArrayBitReader((int[]) null, (-84L));
      long long0 = BitStreams.countBits(intArrayBitReader0);
      assertEquals((-84L), intArrayBitReader0.getPosition());
      assertEquals((-84L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      CharBitReader charBitReader0 = new CharBitReader(charBuffer0);
      OpBitReader.And opBitReader_And0 = new OpBitReader.And(charBitReader0, charBitReader0);
      // Undeclared exception!
      try { 
        BitStreams.slowForwardSkip(opBitReader_And0, 44L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non binary character '\u0000' found at index 0
         //
         verifyException("com.tomgibara.bits.CharBitReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      BitStreams.slowForwardSkip(constantReader_ZerosReader0, 9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitStreams.slowForwardSkip((BitReader) null, 1786L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(233);
      CharBitReader charBitReader0 = new CharBitReader(charBuffer0, (-605), 233);
      // Undeclared exception!
      try { 
        BitStreams.slowForwardSkip(charBitReader0, 2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntArrayBitReader intArrayBitReader0 = new IntArrayBitReader(intArray0, 138L);
      // Undeclared exception!
      try { 
        BitStreams.slowForwardSkip(intArrayBitReader0, 138L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.tomgibara.bits.IntArrayBitReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamBitReader inputStreamBitReader0 = new InputStreamBitReader(mockFileInputStream0);
      // Undeclared exception!
      try { 
        BitStreams.isSameBits(inputStreamBitReader0, inputStreamBitReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.tomgibara.bits.InputStreamBitReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U0&D;VPW");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("U0&D;VPW");
      FileChannelBitReader fileChannelBitReader0 = new FileChannelBitReader(fileChannel0, byteBuffer0);
      // Undeclared exception!
      try { 
        BitStreams.isSameBits(fileChannelBitReader0, fileChannelBitReader0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(0L, 16L);
      CharBitReader charBitReader0 = new CharBitReader("", (-3348), 3395);
      // Undeclared exception!
      try { 
        BitStreams.isSameBits(constantReader_ZerosReader0, charBitReader0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitStreams.isSameBits((BitReader) null, (BitReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.BitStreams", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(233);
      CharBitReader charBitReader0 = new CharBitReader(charBuffer0, (-605), 233);
      // Undeclared exception!
      try { 
        BitStreams.isSameBits(charBitReader0, charBitReader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[1];
      IntArrayBitReader intArrayBitReader0 = new IntArrayBitReader(intArray0, 875L);
      // Undeclared exception!
      try { 
        BitStreams.isSameBits(intArrayBitReader0, intArrayBitReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.tomgibara.bits.IntArrayBitReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader((-14L), (-14L));
      // Undeclared exception!
      try { 
        BitStreams.countBits(constantReader_OnesReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.ConstantReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamBitReader inputStreamBitReader0 = new InputStreamBitReader(mockFileInputStream0);
      // Undeclared exception!
      try { 
        BitStreams.bitsToString(inputStreamBitReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.tomgibara.bits.InputStreamBitReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      BitStreams.bitsToString(constantReader_OnesReader0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"+R>", "\"+R>");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      FileChannelBitReader fileChannelBitReader0 = new FileChannelBitReader(fileChannel0, byteBuffer0);
      // Undeclared exception!
      try { 
        BitStreams.bitsToString(fileChannelBitReader0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitStreams.bitsToString((BitReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.BitStreams", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBitReader charBitReader0 = new CharBitReader(charBuffer0, (-4280), 2141710842);
      // Undeclared exception!
      try { 
        BitStreams.bitsToString(charBitReader0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntArrayBitReader intArrayBitReader0 = new IntArrayBitReader(intArray0, 2402L);
      // Undeclared exception!
      try { 
        BitStreams.bitsToString(intArrayBitReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.tomgibara.bits.IntArrayBitReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitStreams.checkPosition((-3766L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // negative position
         //
         verifyException("com.tomgibara.bits.BitStreams", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BitStreams.checkPosition(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntArrayBitReader intArrayBitReader0 = new IntArrayBitReader(intArray0);
      BitStreams.slowForwardSkip(intArrayBitReader0, 257L);
      assertEquals(224L, intArrayBitReader0.getPosition());
      
      String string0 = BitStreams.bitsToString(intArrayBitReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = BitStreams.slowForwardSkip((BitReader) null, (-3766L));
      assertEquals((-3766L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(64L, 25L);
      String string0 = BitStreams.bitsToString(constantReader_OnesReader0);
      assertEquals("111111111111111111111111111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(237L, (-586L));
      String string0 = BitStreams.bitsToString(constantReader_ZerosReader0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader((-1724L), (-1724L));
      boolean boolean0 = BitStreams.isSameBits(constantReader_OnesReader0, constantReader_OnesReader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantReader.OnesReader constantReader_OnesReader0 = new ConstantReader.OnesReader(23L, (-3604L));
      boolean boolean0 = BitStreams.isSameBits(constantReader_OnesReader0, constantReader_OnesReader0);
      assertEquals(23L, constantReader_OnesReader0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantReader.ZerosReader constantReader_ZerosReader0 = new ConstantReader.ZerosReader(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      BitStreams.isSameBits(constantReader_ZerosReader0, constantReader_ZerosReader0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitStreams.countBits((BitReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomgibara.bits.BitStreams", e);
      }
  }
}
