/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 17:11:02 GMT 2022
 */

package com.github.wslf.datastructures.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.wslf.datastructures.cache.CachedItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CachedItem_ESTest extends CachedItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      boolean boolean0 = cachedItem0.needUpdate((-1), 1025L);
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
      assertFalse(boolean0);
      assertEquals(1L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1004));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0, (-1004));
      long long0 = cachedItem1.timeSinceCreated((-1004));
      assertEquals(0L, long0);
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
      assertEquals((-1004L), cachedItem1.getAccessTime());
      assertEquals(1L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, 0L, 1392409281320L, 226L);
      assertEquals(0L, cachedItem1.getCreationTime());
      
      cachedItem1.updateValue(integer0);
      long long0 = cachedItem1.timeSinceCreated(226L);
      assertEquals((-1392409281094L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, 0);
      cachedItem1.updateValue((Integer) null);
      cachedItem1.getValue();
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals(1L, cachedItem1.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0, (-1), 1L, 1L);
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0);
      CachedItem<Integer, Integer> cachedItem2 = cachedItem1.getValue();
      assertEquals(1392409281320L, cachedItem1.getAccessTime());
      assertEquals((-1L), cachedItem2.getCreationTime());
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1L, cachedItem2.getAccessNumber());
      assertEquals(1L, cachedItem2.getAccessTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>((Integer) null, integer0, (-1999L));
      Integer integer1 = cachedItem0.getKey();
      assertEquals((-1999L), cachedItem0.getAccessTime());
      assertNull(integer1);
      assertEquals(1L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(4900);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0, (-805), 1360L, (-322L));
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, 0L);
      cachedItem1.getCreationTime();
      assertEquals((-805L), cachedItem0.getCreationTime());
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1360L, cachedItem0.getAccessTime());
      assertEquals((-322L), cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>((Integer) null, (Integer) null, (-1835L));
      Integer integer0 = new Integer((-365));
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, (-1L), (-1L), (-1L));
      long long0 = cachedItem1.getCreationTime();
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals((-1835L), cachedItem0.getAccessTime());
      assertEquals((-1L), cachedItem1.getAccessNumber());
      assertEquals((-1L), cachedItem1.getAccessTime());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(4900);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0, (-805), 1360L, (-322L));
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, 0L);
      cachedItem1.getAccessTime();
      assertEquals((-322L), cachedItem0.getAccessNumber());
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1360L, cachedItem0.getAccessTime());
      assertEquals((-805L), cachedItem0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(4900);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0, (-1L));
      long long0 = cachedItem0.getAccessTime();
      assertEquals((-1L), long0);
      assertEquals(1L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1004));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, (-1L), (-554L), 0);
      long long0 = cachedItem1.getAccessNumber();
      assertEquals((-1L), cachedItem1.getCreationTime());
      assertEquals((-554L), cachedItem1.getAccessTime());
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals(0L, long0);
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1004));
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem0 = new CachedItem<Integer, CachedItem<Integer, Integer>>((CachedItem<Integer, Integer>) null, integer0, (-1L), (-1L), (-1004));
      long long0 = cachedItem0.getAccessNumber();
      assertEquals((-1004L), long0);
      assertEquals((-1L), cachedItem0.getAccessTime());
      assertEquals((-1L), cachedItem0.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<Integer, Integer> cachedItem1 = new CachedItem<Integer, Integer>(integer0, integer0, 0, (-1), 0);
      int int0 = cachedItem0.compareTo(cachedItem1);
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals(0L, cachedItem1.getAccessNumber());
      assertEquals(0L, cachedItem1.getCreationTime());
      assertEquals((-1), int0);
      assertEquals((-1L), cachedItem1.getAccessTime());
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      // Undeclared exception!
      try { 
        cachedItem0.compareTo((CachedItem<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.wslf.datastructures.cache.CachedItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0, 0L);
      long long0 = cachedItem1.timeSinceCreated(2L);
      assertEquals(2L, long0);
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-151));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0, (-151));
      CachedItem<CachedItem<Integer, Integer>, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, CachedItem<Integer, Integer>>(cachedItem0, cachedItem0, (-4255L), (-582L), (-151));
      boolean boolean0 = cachedItem1.needUpdate((-582L), (-151));
      assertEquals((-151L), cachedItem0.getAccessTime());
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals((-151L), cachedItem1.getAccessNumber());
      assertTrue(boolean0);
      assertEquals((-582L), cachedItem1.getAccessTime());
      assertEquals((-4255L), cachedItem1.getCreationTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0, 0L);
      cachedItem1.decrease();
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem2 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0);
      int int0 = cachedItem1.compareTo(cachedItem2);
      assertEquals(0L, cachedItem1.getAccessNumber());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(386);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      int int0 = cachedItem0.compareTo(cachedItem0);
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
      assertEquals(0, int0);
      assertEquals(1L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0, 0L);
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem2 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0);
      int int0 = cachedItem1.compareTo(cachedItem2);
      assertEquals(1, int0);
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1L, cachedItem2.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      long long0 = cachedItem0.getAccessNumber();
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      cachedItem0.use();
      assertEquals(3L, cachedItem0.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>((Integer) null, integer0, (-1999L));
      CachedItem<CachedItem<Integer, Integer>, Integer> cachedItem1 = new CachedItem<CachedItem<Integer, Integer>, Integer>(integer0, cachedItem0, 0, 1042L, 284L);
      cachedItem1.decrease();
      assertEquals(283L, cachedItem1.getAccessNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      long long0 = cachedItem0.getAccessTime();
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(3203);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0, 234L, (-658L), 2418L);
      long long0 = cachedItem0.getCreationTime();
      assertEquals((-658L), cachedItem0.getAccessTime());
      assertEquals(2418L, cachedItem0.getAccessNumber());
      assertEquals(234L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>((Integer) null, integer0, (-1999L));
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0);
      CachedItem<Integer, Integer> cachedItem2 = cachedItem1.getKey();
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertEquals(1L, cachedItem2.getAccessNumber());
      assertEquals(1392409281320L, cachedItem1.getAccessTime());
      assertEquals((-1999L), cachedItem2.getAccessTime());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      CachedItem<Integer, Integer> cachedItem0 = new CachedItem<Integer, Integer>(integer0, integer0);
      CachedItem<Integer, CachedItem<Integer, Integer>> cachedItem1 = new CachedItem<Integer, CachedItem<Integer, Integer>>(cachedItem0, integer0, 0);
      boolean boolean0 = cachedItem1.needUpdate(0, 0);
      assertEquals(1L, cachedItem1.getAccessNumber());
      assertFalse(boolean0);
      assertEquals(1L, cachedItem0.getAccessNumber());
      assertEquals(1392409281320L, cachedItem0.getAccessTime());
  }
}
