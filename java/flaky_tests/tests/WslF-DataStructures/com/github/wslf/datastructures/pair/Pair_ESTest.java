/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 17:09:34 GMT 2022
 */

package com.github.wslf.datastructures.pair;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.wslf.datastructures.pair.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = pair0.getSecond();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Pair<Pair<Integer, Integer>, Integer> pair1 = new Pair<Pair<Integer, Integer>, Integer>(pair0, integer0);
      Pair<Integer, Integer> pair2 = pair1.getFirst();
      assertSame(pair0, pair2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      // Undeclared exception!
      try { 
        pair0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.wslf.datastructures.pair.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer((-1307));
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>(integer0, pair0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Integer> pair0 = new Pair<Pair<Integer, Integer>, Integer>();
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer(2292);
      pair0.setFirst(integer0);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Integer> pair0 = new Pair<Pair<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer0);
      Integer integer1 = new Integer(0);
      pair1.setSecond(integer1);
      pair0.setSecond(integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Integer integer1 = new Integer(0);
      pair0.setFirst(integer1);
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>();
      pair1.setFirst(integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Integer> pair0 = new Pair<Pair<Integer, Integer>, Integer>();
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Pair<Pair<Integer, Integer>, Integer> pair1 = new Pair<Pair<Integer, Integer>, Integer>();
      boolean boolean0 = pair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair1 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>((Pair<Integer, Integer>) null, pair0);
      boolean boolean0 = pair1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<Integer, Pair<Integer, Integer>> pair0 = new Pair<Integer, Pair<Integer, Integer>>();
      Integer integer0 = pair0.getFirst();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer((-1307));
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>(integer0, pair0);
      Pair<Integer, Integer> pair2 = pair1.getSecond();
      assertSame(pair0, pair2);
  }
}
