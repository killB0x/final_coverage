/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 20:32:34 GMT 2022
 */

package com.venky.ocr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.venky.ocr.Histogram;
import com.venky.ocr.TextRecognizer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Histogram_ESTest extends Histogram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Character character0 = Character.valueOf('K');
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      textRecognizer_CharacterRegion0.endColumn = 0;
      Hashtable<Character, TextRecognizer.CharacterRegion> hashtable0 = new Hashtable<Character, TextRecognizer.CharacterRegion>();
      hashtable0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashtable0);
      Collection<Character> collection0 = histogram0.getCharactersThickerThan((-1493), 2774);
      assertTrue(collection0.contains('K'));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      Character character0 = Character.valueOf('T');
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      textRecognizer_CharacterRegion0.startRow = (-3292);
      Histogram histogram0 = new Histogram(hashMap0);
      Collection<Character> collection0 = histogram0.getCharactersTallerThan((-2078), (-701));
      assertTrue(collection0.contains('T'));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      Character character0 = Character.valueOf('t');
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      SortedMap<Integer, List<Character>> sortedMap0 = histogram0.getTrainingCharactersByWidth();
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      Character character0 = Character.valueOf('t');
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      SortedMap<Integer, List<Character>> sortedMap0 = histogram0.getTrainingCharactersByHeight();
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Histogram histogram0 = null;
      try {
        histogram0 = new Histogram((Map<Character, TextRecognizer.CharacterRegion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.venky.ocr.Histogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      Character character0 = Character.valueOf('t');
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      Collection<Character> collection0 = histogram0.getCharactersThickerThan((-1), 1);
      assertTrue(collection0.contains('t'));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      Character character0 = Character.valueOf('\u0081');
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      Collection<Character> collection0 = histogram0.getCharactersTallerThan(0, 1);
      assertTrue(collection0.contains('\u0081'));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      Character character0 = Character.valueOf('t');
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      Collection<Character> collection0 = histogram0.getCharactersTallerThan(0, 4706);
      assertTrue(collection0.contains('t'));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      Character character0 = Character.valueOf('t');
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      histogram0.printWidthDistribution();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hashtable<Character, TextRecognizer.CharacterRegion> hashtable0 = new Hashtable<Character, TextRecognizer.CharacterRegion>();
      Character character0 = Character.valueOf('}');
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      hashtable0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashtable0);
      histogram0.printHeightDistribution();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      Character character0 = Character.valueOf('T');
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Character character1 = Character.valueOf('x');
      hashMap0.put(character1, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      Character character0 = Character.valueOf('T');
      TextRecognizer.CharacterRegion textRecognizer_CharacterRegion0 = new TextRecognizer.CharacterRegion();
      hashMap0.put(character0, textRecognizer_CharacterRegion0);
      Histogram histogram0 = new Histogram(hashMap0);
      Collection<Character> collection0 = histogram0.getCharactersThickerThan(0, (-750));
      assertTrue(collection0.contains('T'));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      Histogram histogram0 = new Histogram(hashMap0);
      SortedMap<Integer, List<Character>> sortedMap0 = histogram0.getTrainingCharactersByWidth();
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Character, TextRecognizer.CharacterRegion> hashMap0 = new HashMap<Character, TextRecognizer.CharacterRegion>();
      Histogram histogram0 = new Histogram(hashMap0);
      SortedMap<Integer, List<Character>> sortedMap0 = histogram0.getTrainingCharactersByHeight();
      assertEquals(0, sortedMap0.size());
  }
}
