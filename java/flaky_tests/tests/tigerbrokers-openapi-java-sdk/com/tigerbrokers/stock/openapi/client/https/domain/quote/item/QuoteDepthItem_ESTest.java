/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:05:25 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.quote.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.DepthEntry;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.QuoteDepthItem;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuoteDepthItem_ESTest extends QuoteDepthItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      quoteDepthItem0.setSymbol("");
      String string0 = quoteDepthItem0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      LinkedList<DepthEntry> linkedList0 = new LinkedList<DepthEntry>();
      quoteDepthItem0.setBids(linkedList0);
      List<DepthEntry> list0 = quoteDepthItem0.getBids();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      LinkedList<DepthEntry> linkedList0 = new LinkedList<DepthEntry>();
      DepthEntry depthEntry0 = new DepthEntry();
      linkedList0.add(depthEntry0);
      quoteDepthItem0.setBids(linkedList0);
      List<DepthEntry> list0 = quoteDepthItem0.getBids();
      assertTrue(list0.contains(depthEntry0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      LinkedList<DepthEntry> linkedList0 = new LinkedList<DepthEntry>();
      DepthEntry depthEntry0 = new DepthEntry();
      linkedList0.add(depthEntry0);
      quoteDepthItem0.setAsks(linkedList0);
      List<DepthEntry> list0 = quoteDepthItem0.getAsks();
      assertTrue(list0.contains(depthEntry0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      quoteDepthItem0.setSymbol("com.tigerbrokers.stock.openapi.client.https.domain.quote.item.QuoteDepthItem");
      String string0 = quoteDepthItem0.getSymbol();
      assertEquals("com.tigerbrokers.stock.openapi.client.https.domain.quote.item.QuoteDepthItem", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      String string0 = quoteDepthItem0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      List<DepthEntry> list0 = quoteDepthItem0.getBids();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      List<DepthEntry> list0 = quoteDepthItem0.getAsks();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuoteDepthItem quoteDepthItem0 = new QuoteDepthItem();
      LinkedList<DepthEntry> linkedList0 = new LinkedList<DepthEntry>();
      quoteDepthItem0.setAsks(linkedList0);
      List<DepthEntry> list0 = quoteDepthItem0.getAsks();
      assertEquals(0, list0.size());
  }
}
