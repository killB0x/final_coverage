/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:03:29 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.quote.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.ShortInterest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortInterest_ESTest extends ShortInterest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = new Long(1081L);
      shortInterest0.setShortInterest(long0);
      Long long1 = shortInterest0.getShortInterest();
      assertEquals(1081L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = new Long((-4541L));
      shortInterest0.setShortInterest(long0);
      Long long1 = shortInterest0.getShortInterest();
      assertEquals((-4541L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      shortInterest0.setSettlementDate("Am-+h1i");
      String string0 = shortInterest0.getSettlementDate();
      assertEquals("Am-+h1i", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      shortInterest0.setSettlementDate("");
      String string0 = shortInterest0.getSettlementDate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = new Double(0.0);
      shortInterest0.setPercentOfFloat(double0);
      Double double1 = shortInterest0.getPercentOfFloat();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = new Double(611.9579688);
      shortInterest0.setPercentOfFloat(double0);
      Double double1 = shortInterest0.getPercentOfFloat();
      assertEquals(611.9579688, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = new Double((-1387.49887199497));
      shortInterest0.setPercentOfFloat(double0);
      Double double1 = shortInterest0.getPercentOfFloat();
      assertEquals((-1387.49887199497), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = new Double(0.0);
      shortInterest0.setDaysToCover(double0);
      Double double1 = shortInterest0.getDaysToCover();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = new Double(1L);
      shortInterest0.setDaysToCover(double0);
      Double double1 = shortInterest0.getDaysToCover();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = new Double((-1635.9426980818));
      shortInterest0.setDaysToCover(double0);
      Double double1 = shortInterest0.getDaysToCover();
      assertEquals((-1635.9426980818), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = new Long(1957L);
      shortInterest0.setAvgDailyVolume(long0);
      Long long1 = shortInterest0.getAvgDailyVolume();
      assertEquals(1957L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = new Long((-1L));
      shortInterest0.setAvgDailyVolume(long0);
      Long long1 = shortInterest0.getAvgDailyVolume();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = new Long(0L);
      shortInterest0.setShortInterest(long0);
      Long long1 = shortInterest0.getShortInterest();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      String string0 = shortInterest0.getSettlementDate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = shortInterest0.getShortInterest();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = new Long(0L);
      shortInterest0.setAvgDailyVolume(long0);
      Long long1 = shortInterest0.getAvgDailyVolume();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Long long0 = shortInterest0.getAvgDailyVolume();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = shortInterest0.getDaysToCover();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      String string0 = shortInterest0.toString();
      assertEquals("ShortInterest{daysToCover=null, avgDailyVolume=null, shortInterest=null, settlementDate='null', percentOfFloat=null}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortInterest shortInterest0 = new ShortInterest();
      Double double0 = shortInterest0.getPercentOfFloat();
      assertNull(double0);
  }
}
