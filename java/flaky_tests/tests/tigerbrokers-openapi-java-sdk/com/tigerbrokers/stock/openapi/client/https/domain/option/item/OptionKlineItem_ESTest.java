/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:21:42 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.option.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.option.item.OptionKlineItem;
import com.tigerbrokers.stock.openapi.client.https.domain.option.item.OptionKlinePoint;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionKlineItem_ESTest extends OptionKlineItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setSymbol("");
      String string0 = optionKlineItem0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setStrike("nNBAh%");
      String string0 = optionKlineItem0.getStrike();
      assertEquals("nNBAh%", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setRight("M{e?~ sZNJx(^iq{8");
      String string0 = optionKlineItem0.getRight();
      assertEquals("M{e?~ sZNJx(^iq{8", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setPeriod("");
      String string0 = optionKlineItem0.getPeriod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      LinkedList<OptionKlinePoint> linkedList0 = new LinkedList<OptionKlinePoint>();
      optionKlineItem0.setItems(linkedList0);
      List<OptionKlinePoint> list0 = optionKlineItem0.getItems();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      LinkedList<OptionKlinePoint> linkedList0 = new LinkedList<OptionKlinePoint>();
      OptionKlinePoint optionKlinePoint0 = new OptionKlinePoint();
      linkedList0.add(optionKlinePoint0);
      optionKlineItem0.setItems(linkedList0);
      List<OptionKlinePoint> list0 = optionKlineItem0.getItems();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      Long long0 = new Long(0L);
      optionKlineItem0.setExpiry(long0);
      Long long1 = optionKlineItem0.getExpiry();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      Long long0 = new Long(5072L);
      optionKlineItem0.setExpiry(long0);
      Long long1 = optionKlineItem0.getExpiry();
      assertEquals(5072L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setPeriod(", high=");
      String string0 = optionKlineItem0.getPeriod();
      assertEquals(", high=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setStrike("");
      String string0 = optionKlineItem0.getStrike();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      List<OptionKlinePoint> list0 = optionKlineItem0.getItems();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      Long long0 = optionKlineItem0.getExpiry();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      String string0 = optionKlineItem0.getStrike();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      Long long0 = new Long((-3587L));
      optionKlineItem0.setExpiry(long0);
      Long long1 = optionKlineItem0.getExpiry();
      assertEquals((-3587L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setRight("");
      String string0 = optionKlineItem0.getRight();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      String string0 = optionKlineItem0.toString();
      assertEquals("OptionKlineItem{symbol='null', expiry=null, right='null', strike='null', period='null', items=null}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      optionKlineItem0.setSymbol("[LjESV");
      String string0 = optionKlineItem0.getSymbol();
      assertEquals("[LjESV", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      String string0 = optionKlineItem0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      String string0 = optionKlineItem0.getPeriod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionKlineItem optionKlineItem0 = new OptionKlineItem();
      String string0 = optionKlineItem0.getRight();
      assertNull(string0);
  }
}
