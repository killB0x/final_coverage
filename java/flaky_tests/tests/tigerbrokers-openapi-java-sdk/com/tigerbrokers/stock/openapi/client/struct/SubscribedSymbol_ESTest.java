/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:08:53 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.struct;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.struct.SubscribedSymbol;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubscribedSymbol_ESTest extends SubscribedSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setUsed(787);
      int int0 = subscribedSymbol0.getUsed();
      assertEquals(787, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      HashMap<String, Set<String>> hashMap0 = new HashMap<String, Set<String>>();
      subscribedSymbol0.setSymbolFocusKeys(hashMap0);
      Map<String, Set<String>> map0 = subscribedSymbol0.getSymbolFocusKeys();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, Set<String>> hashMap0 = new HashMap<String, Set<String>>();
      hashMap0.put("", linkedHashSet0);
      subscribedSymbol0.setSymbolFocusKeys(hashMap0);
      Map<String, Set<String>> map0 = subscribedSymbol0.getSymbolFocusKeys();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      subscribedSymbol0.setSubscribedSymbols(linkedHashSet0);
      Set<String> set0 = subscribedSymbol0.getSubscribedSymbols();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      subscribedSymbol0.setSubscribedSymbols(linkedHashSet0);
      Set<String> set0 = subscribedSymbol0.getSubscribedSymbols();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      subscribedSymbol0.setSubscribedAskBidSymbols(linkedHashSet0);
      Set<String> set0 = subscribedSymbol0.getSubscribedAskBidSymbols();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setLimit(787);
      int int0 = subscribedSymbol0.getLimit();
      assertEquals(787, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setLimit((-2286));
      int int0 = subscribedSymbol0.getLimit();
      assertEquals((-2286), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setAskBidUsed(1);
      int int0 = subscribedSymbol0.getAskBidUsed();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setAskBidUsed((-5690));
      int int0 = subscribedSymbol0.getAskBidUsed();
      assertEquals((-5690), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setAskBidLimit(1399);
      int int0 = subscribedSymbol0.getAskBidLimit();
      assertEquals(1399, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setAskBidLimit((-822));
      int int0 = subscribedSymbol0.getAskBidLimit();
      assertEquals((-822), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      int int0 = subscribedSymbol0.getAskBidLimit();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      Set<String> set0 = subscribedSymbol0.getSubscribedAskBidSymbols();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      Set<String> set0 = subscribedSymbol0.getSubscribedSymbols();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      int int0 = subscribedSymbol0.getAskBidUsed();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      int int0 = subscribedSymbol0.getLimit();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      Map<String, Set<String>> map0 = subscribedSymbol0.getSymbolFocusKeys();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      subscribedSymbol0.setUsed((-1));
      int int0 = subscribedSymbol0.getUsed();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      subscribedSymbol0.setSubscribedAskBidSymbols(linkedHashSet0);
      Set<String> set0 = subscribedSymbol0.getSubscribedAskBidSymbols();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubscribedSymbol subscribedSymbol0 = new SubscribedSymbol();
      int int0 = subscribedSymbol0.getUsed();
      assertEquals(0, int0);
  }
}
