/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:22:09 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.future.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.future.item.FutureKlineBatchItem;
import com.tigerbrokers.stock.openapi.client.https.domain.future.item.FutureKlineItem;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureKlineBatchItem_ESTest extends FutureKlineBatchItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      futureKlineBatchItem0.setNextPageToken("");
      String string0 = futureKlineBatchItem0.getNextPageToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      LinkedList<FutureKlineItem> linkedList0 = new LinkedList<FutureKlineItem>();
      linkedList0.add((FutureKlineItem) null);
      futureKlineBatchItem0.setItems(linkedList0);
      List<FutureKlineItem> list0 = futureKlineBatchItem0.getItems();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      futureKlineBatchItem0.setContractCode("FutureKlineBatchItem{contractCode='");
      String string0 = futureKlineBatchItem0.getContractCode();
      assertEquals("FutureKlineBatchItem{contractCode='", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      futureKlineBatchItem0.setContractCode("");
      String string0 = futureKlineBatchItem0.getContractCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      String string0 = futureKlineBatchItem0.getContractCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      LinkedList<FutureKlineItem> linkedList0 = new LinkedList<FutureKlineItem>();
      futureKlineBatchItem0.setItems(linkedList0);
      List<FutureKlineItem> list0 = futureKlineBatchItem0.getItems();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      String string0 = futureKlineBatchItem0.toString();
      assertEquals("FutureKlineBatchItem{contractCode='null', nextPageToken=null, items=null}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      String string0 = futureKlineBatchItem0.getNextPageToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      futureKlineBatchItem0.setNextPageToken("XuY8aoKS+WL");
      String string0 = futureKlineBatchItem0.getNextPageToken();
      assertEquals("XuY8aoKS+WL", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FutureKlineBatchItem futureKlineBatchItem0 = new FutureKlineBatchItem();
      List<FutureKlineItem> list0 = futureKlineBatchItem0.getItems();
      assertNull(list0);
  }
}
