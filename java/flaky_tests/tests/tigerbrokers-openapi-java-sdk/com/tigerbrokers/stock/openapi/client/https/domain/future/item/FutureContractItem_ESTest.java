/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:14:08 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.future.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.future.item.FutureContractItem;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureContractItem_ESTest extends FutureContractItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setTrade(true);
      boolean boolean0 = futureContractItem0.isTrade();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setContinuous(true);
      boolean boolean0 = futureContractItem0.isContinuous();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setType(", continuous=");
      String string0 = futureContractItem0.getType();
      assertEquals(", continuous=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setName("szA=<.#O[U}#j");
      String string0 = futureContractItem0.getName();
      assertEquals("szA=<.#O[U}#j", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setName("");
      String string0 = futureContractItem0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      futureContractItem0.setMultiplier(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMultiplier();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      futureContractItem0.setMultiplier(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMultiplier();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = new BigDecimal((-2286));
      futureContractItem0.setMultiplier(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMultiplier();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = new BigDecimal((-108));
      futureContractItem0.setMultiplier(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMultiplier();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      futureContractItem0.setMinTick(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMinTick();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      futureContractItem0.setMinTick(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMinTick();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1L));
      futureContractItem0.setMinTick(bigDecimal0);
      BigDecimal bigDecimal1 = futureContractItem0.getMinTick();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setLastTradingDate(", exchangeCode='");
      String string0 = futureContractItem0.getLastTradingDate();
      assertEquals(", exchangeCode='", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setLastTradingDate("");
      String string0 = futureContractItem0.getLastTradingDate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setLastBiddingCloseTime(176L);
      long long0 = futureContractItem0.getLastBiddingCloseTime();
      assertEquals(176L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setLastBiddingCloseTime((-1L));
      long long0 = futureContractItem0.getLastBiddingCloseTime();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setIbCode("s:6=By<");
      String string0 = futureContractItem0.getIbCode();
      assertEquals("s:6=By<", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setFirstNoticeDate("{;l/vEBL0N");
      String string0 = futureContractItem0.getFirstNoticeDate();
      assertEquals("{;l/vEBL0N", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setExchangeCode("pf0u![>B`~y0;");
      String string0 = futureContractItem0.getExchangeCode();
      assertEquals("pf0u![>B`~y0;", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setCurrency("h@zv[\"I[i4^YOB~");
      String string0 = futureContractItem0.getCurrency();
      assertEquals("h@zv[\"I[i4^YOB~", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setCurrency("");
      String string0 = futureContractItem0.getCurrency();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setContractMonth("{;l/vEBL0N");
      String string0 = futureContractItem0.getContractMonth();
      assertEquals("{;l/vEBL0N", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setContractCode("L$[2q5GdS'dWBVLJJ");
      String string0 = futureContractItem0.getContractCode();
      assertEquals("L$[2q5GdS'dWBVLJJ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setContractCode("");
      String string0 = futureContractItem0.getContractCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.toString();
      assertEquals("FutureContractItem{type='null', name='null', ibCode='null', contractCode='null', contractMonth='null', exchangeCode='null', multiplier=null, minTick=null, lastTradingDate='null', firstNoticeDate='null', lastBiddingCloseTime=0, currency='null', continuous=false, trade=false}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = futureContractItem0.getMultiplier();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setExchangeCode("");
      String string0 = futureContractItem0.getExchangeCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = new BigDecimal((-2286));
      futureContractItem0.setMultiplier(bigDecimal0);
      String string0 = futureContractItem0.toString();
      assertEquals("FutureContractItem{type='null', name='null', ibCode='null', contractCode='null', contractMonth='null', exchangeCode='null', multiplier=-2286, minTick=null, lastTradingDate='null', firstNoticeDate='null', lastBiddingCloseTime=0, currency='null', continuous=false, trade=false}", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getContractMonth();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getLastTradingDate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getIbCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      boolean boolean0 = futureContractItem0.isContinuous();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getExchangeCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setFirstNoticeDate("");
      String string0 = futureContractItem0.getFirstNoticeDate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      BigDecimal bigDecimal0 = futureContractItem0.getMinTick();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getFirstNoticeDate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      long long0 = futureContractItem0.getLastBiddingCloseTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setIbCode("");
      String string0 = futureContractItem0.getIbCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      boolean boolean0 = futureContractItem0.isTrade();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setContractMonth("");
      String string0 = futureContractItem0.getContractMonth();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      futureContractItem0.setType("");
      String string0 = futureContractItem0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FutureContractItem futureContractItem0 = new FutureContractItem();
      String string0 = futureContractItem0.getContractCode();
      assertNull(string0);
  }
}
