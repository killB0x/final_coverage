/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:04:34 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.response.trade;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.https.domain.trade.item.TradeOrderItem;
import com.tigerbrokers.stock.openapi.client.https.response.trade.TradeOrderResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TradeOrderResponse_ESTest extends TradeOrderResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderResponse0.setItem(tradeOrderItem0);
      tradeOrderItem0.setOrderId(1L);
      TradeOrderItem tradeOrderItem1 = tradeOrderResponse0.getItem();
      assertEquals(1L, tradeOrderItem1.getOrderId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderResponse0.setItem(tradeOrderItem0);
      tradeOrderItem0.setOrderId((-1L));
      TradeOrderItem tradeOrderItem1 = tradeOrderResponse0.getItem();
      assertEquals((-1L), tradeOrderItem1.getOrderId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderItem0.setId(124L);
      tradeOrderResponse0.setItem(tradeOrderItem0);
      TradeOrderItem tradeOrderItem1 = tradeOrderResponse0.getItem();
      assertEquals(0L, tradeOrderItem1.getOrderId());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderResponse0.setItem(tradeOrderItem0);
      tradeOrderItem0.setId((-1L));
      TradeOrderItem tradeOrderItem1 = tradeOrderResponse0.getItem();
      assertEquals((-1L), tradeOrderItem1.getId());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      tradeOrderResponse0.setData("");
      String string0 = tradeOrderResponse0.getData();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      tradeOrderResponse0.setData("AHyS@(%-");
      // Undeclared exception!
      try { 
        tradeOrderResponse0.getItem();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.response.trade.TradeOrderResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      TradeOrderItem tradeOrderItem0 = tradeOrderResponse0.getItem();
      assertNull(tradeOrderItem0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      tradeOrderResponse0.setData("TradeOrderResponse{data='null', item=com.tigerbrokers.stock.openapi.client.https.domain.trade.item.TradeOrderItem@3}");
      String string0 = tradeOrderResponse0.getData();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      String string0 = tradeOrderResponse0.getData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TradeOrderResponse tradeOrderResponse0 = new TradeOrderResponse();
      String string0 = tradeOrderResponse0.toString();
      assertEquals("TradeOrderResponse{data='null', item=null}", string0);
  }
}
