/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:17:51 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.option.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.option.model.OptionChainFilterModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionChainFilterModel_ESTest extends OptionChainFilterModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double((-3383.13265968));
      Double double1 = new Double(0.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel_Greeks0.rho(double1, double0);
      assertSame(optionChainFilterModel_Greeks1, optionChainFilterModel_Greeks0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      Double double0 = Double.valueOf(0.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel_Greeks0.theta((Double) null, double0);
      assertSame(optionChainFilterModel_Greeks1, optionChainFilterModel_Greeks0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double((-3383.13265968));
      Double double1 = new Double(0.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel_Greeks0.vega(double1, double0);
      assertSame(optionChainFilterModel_Greeks0, optionChainFilterModel_Greeks1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      Double double1 = new Double(0.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel_Greeks0.gamma(double1, double0);
      assertSame(optionChainFilterModel_Greeks0, optionChainFilterModel_Greeks1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel_Greeks0.delta(double0, double1);
      assertSame(optionChainFilterModel_Greeks1, optionChainFilterModel_Greeks0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      Integer integer0 = new Integer(212);
      Integer integer1 = new Integer(212);
      OptionChainFilterModel optionChainFilterModel1 = optionChainFilterModel0.openInterest(integer0, integer1);
      assertSame(optionChainFilterModel0, optionChainFilterModel1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      Double double0 = new Double((-3383.13265968));
      Double double1 = new Double(0.0);
      OptionChainFilterModel optionChainFilterModel1 = optionChainFilterModel0.impliedVolatility(double0, double1);
      assertSame(optionChainFilterModel1, optionChainFilterModel0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      Boolean boolean0 = Boolean.valueOf(true);
      optionChainFilterModel0.setInTheMoney(boolean0);
      Boolean boolean1 = optionChainFilterModel0.getInTheMoney();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      OptionChainFilterModel optionChainFilterModel1 = optionChainFilterModel0.greeks(optionChainFilterModel_Greeks0);
      assertSame(optionChainFilterModel0, optionChainFilterModel1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      Boolean boolean0 = Boolean.valueOf("Greeks{delta=null, gamma=null, vega=null, theta=null, rho=null}");
      optionChainFilterModel0.setInTheMoney(boolean0);
      Boolean boolean1 = optionChainFilterModel0.getInTheMoney();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      Boolean boolean0 = optionChainFilterModel0.getInTheMoney();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      String string0 = optionChainFilterModel0.toString();
      assertEquals("OptionFilterModel{inTheMoney=null, impliedVolatility=null, openInterest=null, greeks=null}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      optionChainFilterModel0.setGreeks(optionChainFilterModel_Greeks0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel0.getGreeks();
      assertSame(optionChainFilterModel_Greeks1, optionChainFilterModel_Greeks0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      OptionChainFilterModel optionChainFilterModel1 = optionChainFilterModel0.inTheMoney((Boolean) null);
      assertSame(optionChainFilterModel1, optionChainFilterModel0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionChainFilterModel optionChainFilterModel0 = new OptionChainFilterModel();
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = optionChainFilterModel0.getGreeks();
      assertNull(optionChainFilterModel_Greeks0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      String string0 = optionChainFilterModel_Greeks0.toString();
      assertEquals("Greeks{delta=null, gamma=null, vega=null, theta=null, rho=null}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks0 = new OptionChainFilterModel.Greeks();
      Double double0 = new Double(0.0);
      OptionChainFilterModel.Greeks optionChainFilterModel_Greeks1 = optionChainFilterModel_Greeks0.gamma(double0, double0);
      String string0 = optionChainFilterModel_Greeks1.toString();
      assertEquals("Greeks{delta=null, gamma=Range{min=0.0, max=0.0}, vega=null, theta=null, rho=null}", string0);
  }
}
