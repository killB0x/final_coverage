/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:35:48 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.struct;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.struct.OptionFundamentals;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionFundamentals_ESTest extends OptionFundamentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setVolatility("g#{||`3h[z");
      String string0 = optionFundamentals0.getVolatility();
      assertEquals("g#{||`3h[z", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setVolatility("");
      String string0 = optionFundamentals0.getVolatility();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setVega("gC:VTY53");
      String string0 = optionFundamentals0.getVega();
      assertEquals("gC:VTY53", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setTimeValue("@:KP{i ");
      String string0 = optionFundamentals0.getTimeValue();
      assertEquals("@:KP{i ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.timeValue = "";
      String string0 = optionFundamentals0.getTimeValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setTheta("@:KP{i ");
      String string0 = optionFundamentals0.getTheta();
      assertEquals("@:KP{i ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setProfitRate("o((w=8Q]xcjCFh+C");
      String string0 = optionFundamentals0.getProfitRate();
      assertEquals("o((w=8Q]xcjCFh+C", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.profitRate = "";
      String string0 = optionFundamentals0.getProfitRate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.premiumRate = "EG+<-HNB'&\"o<2";
      String string0 = optionFundamentals0.getPremiumRate();
      assertEquals("EG+<-HNB'&\"o<2", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setOpenInterest("_p9JP=-ftp;");
      String string0 = optionFundamentals0.getOpenInterest();
      assertEquals("_p9JP=-ftp;", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.openInterest = "";
      String string0 = optionFundamentals0.getOpenInterest();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.leverage = "EG+<-HNB'&\"o<2";
      String string0 = optionFundamentals0.getLeverage();
      assertEquals("EG+<-HNB'&\"o<2", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.leverage = "";
      String string0 = optionFundamentals0.getLeverage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setInsideValue("BhHov}NhT");
      String string0 = optionFundamentals0.getInsideValue();
      assertEquals("BhHov}NhT", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setHistoryVolatility("L*#8R");
      String string0 = optionFundamentals0.getHistoryVolatility();
      assertEquals("L*#8R", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setHistoryVolatility("");
      String string0 = optionFundamentals0.getHistoryVolatility();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setGamma("n<4Ucl+/JyQOv");
      String string0 = optionFundamentals0.getGamma();
      assertEquals("n<4Ucl+/JyQOv", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setGamma("");
      String string0 = optionFundamentals0.getGamma();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.delta = "com.tigerbrokers.stock.openapi.client.struct.OptionFundamentals";
      String string0 = optionFundamentals0.getDelta();
      assertEquals("com.tigerbrokers.stock.openapi.client.struct.OptionFundamentals", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.delta = null;
      optionFundamentals0.delta = "";
      String string0 = optionFundamentals0.getDelta();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getTimeValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getPremiumRate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getVolatility();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setPremiumRate("");
      String string0 = optionFundamentals0.getPremiumRate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setVega("");
      String string0 = optionFundamentals0.getVega();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getGamma();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setLeverage("IC,muD6cu");
      assertNull(optionFundamentals0.getVolatility());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getVega();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getOpenInterest();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setTheta("");
      String string0 = optionFundamentals0.getTheta();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setInsideValue("");
      String string0 = optionFundamentals0.getInsideValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getTheta();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getLeverage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getProfitRate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getHistoryVolatility();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      optionFundamentals0.setDelta("u(j21B");
      assertNull(optionFundamentals0.getPremiumRate());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getInsideValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptionFundamentals optionFundamentals0 = new OptionFundamentals();
      String string0 = optionFundamentals0.getDelta();
      assertNull(string0);
  }
}
