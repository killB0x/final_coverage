/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:06:07 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.option.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.option.item.OptionTradeTickItem;
import com.tigerbrokers.stock.openapi.client.https.domain.option.item.TradeTickPoint;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionTradeTickItem_ESTest extends OptionTradeTickItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      optionTradeTickItem0.setSymbol("+e*xU/2");
      String string0 = optionTradeTickItem0.getSymbol();
      assertEquals("+e*xU/2", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      optionTradeTickItem0.setSymbol("");
      String string0 = optionTradeTickItem0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      optionTradeTickItem0.setStrike("@Aredew^;!z");
      String string0 = optionTradeTickItem0.getStrike();
      assertEquals("@Aredew^;!z", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      optionTradeTickItem0.setStrike("");
      String string0 = optionTradeTickItem0.getStrike();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      optionTradeTickItem0.setRight("");
      String string0 = optionTradeTickItem0.getRight();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      LinkedList<TradeTickPoint> linkedList0 = new LinkedList<TradeTickPoint>();
      optionTradeTickItem0.setItems(linkedList0);
      List<TradeTickPoint> list0 = optionTradeTickItem0.getItems();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      LinkedList<TradeTickPoint> linkedList0 = new LinkedList<TradeTickPoint>();
      TradeTickPoint tradeTickPoint0 = new TradeTickPoint();
      linkedList0.add(tradeTickPoint0);
      optionTradeTickItem0.setItems(linkedList0);
      List<TradeTickPoint> list0 = optionTradeTickItem0.getItems();
      assertTrue(list0.contains(tradeTickPoint0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      Long long0 = new Long(326L);
      optionTradeTickItem0.setExpiry(long0);
      Long long1 = optionTradeTickItem0.getExpiry();
      assertEquals(326L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      Long long0 = new Long((-28L));
      optionTradeTickItem0.setExpiry(long0);
      Long long1 = optionTradeTickItem0.getExpiry();
      assertEquals((-28L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      Long long0 = new Long(0L);
      optionTradeTickItem0.setExpiry(long0);
      Long long1 = optionTradeTickItem0.getExpiry();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      String string0 = optionTradeTickItem0.getRight();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      optionTradeTickItem0.setRight("TradeTickPoint{price=");
      String string0 = optionTradeTickItem0.getRight();
      assertEquals("TradeTickPoint{price=", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      String string0 = optionTradeTickItem0.getStrike();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      List<TradeTickPoint> list0 = optionTradeTickItem0.getItems();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      String string0 = optionTradeTickItem0.toString();
      assertEquals("OptionTradeTickItem{symbol='null', expiry=null, strike='null', right='null', items=null}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      Long long0 = optionTradeTickItem0.getExpiry();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionTradeTickItem optionTradeTickItem0 = new OptionTradeTickItem();
      String string0 = optionTradeTickItem0.getSymbol();
      assertNull(string0);
  }
}
