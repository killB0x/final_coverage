/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:18:11 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.quote.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.QuoteStockTradeItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuoteStockTradeItem_ESTest extends QuoteStockTradeItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.getInteger("com.tigerbrokers.stock.openapi.client.https.domain.ApiModel", 783);
      quoteStockTradeItem0.setLotSize(integer0);
      String string0 = quoteStockTradeItem0.toString();
      assertEquals("QuoteStockTradeItem{symbol='null', lotSize=783, spreadScale=null, minTick=null}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      quoteStockTradeItem0.setSymbol("`f[| r>r${%[i1");
      String string0 = quoteStockTradeItem0.getSymbol();
      assertEquals("`f[| r>r${%[i1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      quoteStockTradeItem0.setSymbol("");
      String string0 = quoteStockTradeItem0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.valueOf(0);
      quoteStockTradeItem0.spreadScale = integer0;
      Integer integer1 = quoteStockTradeItem0.getSpreadScale();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.valueOf(1);
      quoteStockTradeItem0.spreadScale = integer0;
      Integer integer1 = quoteStockTradeItem0.getSpreadScale();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Double double0 = Double.valueOf(0.0);
      quoteStockTradeItem0.minTick = double0;
      Double double1 = quoteStockTradeItem0.getMinTick();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Double double0 = Double.valueOf((-1.0));
      quoteStockTradeItem0.minTick = double0;
      Double double1 = quoteStockTradeItem0.getMinTick();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.getInteger("com.tigerbrokers.stock.openapi.client.https.domain.ApiModel", 783);
      quoteStockTradeItem0.setLotSize(integer0);
      Integer integer1 = quoteStockTradeItem0.getLotSize();
      assertEquals(783, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.valueOf((-319));
      quoteStockTradeItem0.lotSize = integer0;
      Integer integer1 = quoteStockTradeItem0.getLotSize();
      assertEquals((-319), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.valueOf(0);
      quoteStockTradeItem0.setLotSize(integer0);
      Integer integer1 = quoteStockTradeItem0.getLotSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      String string0 = quoteStockTradeItem0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = quoteStockTradeItem0.getLotSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Double double0 = Double.valueOf(3673.0);
      quoteStockTradeItem0.setMinTick(double0);
      Double double1 = quoteStockTradeItem0.getMinTick();
      assertEquals(3673.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Double double0 = quoteStockTradeItem0.getMinTick();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = Integer.getInteger("com.tigerbrokers.stock.openapi.client.https.domain.quote.item.QuoteStockTradeItem", (-1));
      quoteStockTradeItem0.setSpreadScale(integer0);
      Integer integer1 = quoteStockTradeItem0.getSpreadScale();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuoteStockTradeItem quoteStockTradeItem0 = new QuoteStockTradeItem();
      Integer integer0 = quoteStockTradeItem0.getSpreadScale();
      assertNull(integer0);
  }
}
