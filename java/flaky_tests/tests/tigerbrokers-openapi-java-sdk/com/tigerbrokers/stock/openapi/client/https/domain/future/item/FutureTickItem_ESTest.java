/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:00:04 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.future.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.future.item.FutureTickItem;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureTickItem_ESTest extends FutureTickItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      futureTickItem0.setVolume(1593L);
      long long0 = futureTickItem0.getVolume();
      assertEquals(1593L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      futureTickItem0.setVolume((-1221L));
      long long0 = futureTickItem0.getVolume();
      assertEquals((-1221L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      futureTickItem0.setTime((-1517L));
      long long0 = futureTickItem0.getTime();
      assertEquals((-1517L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      futureTickItem0.setPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureTickItem0.getPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      BigDecimal bigDecimal0 = new BigDecimal((-1221L));
      futureTickItem0.setPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureTickItem0.getPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      futureTickItem0.setIndex(2295L);
      long long0 = futureTickItem0.getIndex();
      assertEquals(2295L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      futureTickItem0.setIndex((-1221L));
      long long0 = futureTickItem0.getIndex();
      assertEquals((-1221L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      BigDecimal bigDecimal0 = new BigDecimal(224.8391708);
      futureTickItem0.setPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureTickItem0.getPrice();
      assertEquals((byte) (-32), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      BigDecimal bigDecimal0 = futureTickItem0.getPrice();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      long long0 = futureTickItem0.getVolume();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      futureTickItem0.setTime(1L);
      long long0 = futureTickItem0.getTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      long long0 = futureTickItem0.getTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      String string0 = futureTickItem0.toString();
      assertEquals("FutureTickItem{index=0, price=null, volume=0, time=0}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FutureTickItem futureTickItem0 = new FutureTickItem();
      long long0 = futureTickItem0.getIndex();
      assertEquals(0L, long0);
  }
}
