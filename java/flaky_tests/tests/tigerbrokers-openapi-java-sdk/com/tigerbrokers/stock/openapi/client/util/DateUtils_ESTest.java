/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:32:25 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.struct.enums.TimeZoneId;
import com.tigerbrokers.stock.openapi.client.util.DateUtils;
import java.time.Clock;
import java.time.LocalDate;
import java.time.OffsetTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      Date date0 = DateUtils.getZoneDate("1969-12-31 19:00:00.000", timeZoneId0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      Date date0 = DateUtils.getZoneDate("9", timeZoneId0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(offsetTime0);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      long long0 = DateUtils.parseEpochMill(localDate0, timeZoneId0);
      assertEquals(1392307200000L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      long long0 = DateUtils.parseEpochMill(localDate0, timeZoneId0);
      assertEquals((-28800000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = DateUtils.parseEpochMill((LocalDate) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      long long0 = DateUtils.parseEpochMill(localDate0);
      assertEquals((-28800000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      // Undeclared exception!
      try { 
        DateUtils.parseEpochMill(localDate0, (TimeZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.util.DateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      long long0 = DateUtils.parseEpochMill((LocalDate) null, timeZoneId0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      long long0 = DateUtils.parseEpochMill((String) null, timeZoneId0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      // Undeclared exception!
      try { 
        DateUtils.parseEpochMill("1_^:6HGk>fxjpF", timeZoneId0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '1_^:6HGk>fxjpF' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = DateUtils.isDateBeforeToday("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtils.isDateBeforeToday("RG.4kC|)b[Im\"a )=F#");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'RG.4kC|)b[Im\"a )=F#' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = DateUtils.isDateBeforeToday((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      Date date0 = DateUtils.getZoneDate("Lm 56{E%kJ", timeZoneId0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = DateUtils.getZoneDate("yyyy-MM-dd", (TimeZoneId) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      Date date0 = DateUtils.getZoneDate("RG.4kC|)b[Im\"a )=F#", timeZoneId0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      Date date0 = DateUtils.getZoneDate((String) null, timeZoneId0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = DateUtils.printTimeZoneET(2587L);
      assertEquals("1969-12-31 19:00:02.587", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(offsetTime0);
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      long long0 = DateUtils.parseEpochMill(localDate0);
      assertEquals(1392307200000L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
  }
}
