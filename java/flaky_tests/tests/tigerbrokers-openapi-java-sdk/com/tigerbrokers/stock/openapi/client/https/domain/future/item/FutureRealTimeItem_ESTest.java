/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:13:46 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.future.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.future.item.FutureRealTimeItem;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureRealTimeItem_ESTest extends FutureRealTimeItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(1L);
      futureRealTimeItem0.setVolume(long0);
      Long long1 = futureRealTimeItem0.getVolume();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long((-5574L));
      futureRealTimeItem0.setVolume(long0);
      Long long1 = futureRealTimeItem0.getVolume();
      assertEquals((-5574L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      futureRealTimeItem0.setSettlement(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getSettlement();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      futureRealTimeItem0.setSettlement(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getSettlement();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-1675L));
      futureRealTimeItem0.setSettlement(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getSettlement();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(0L);
      futureRealTimeItem0.setOpenInterest(long0);
      Long long1 = futureRealTimeItem0.getOpenInterest();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(3851L);
      futureRealTimeItem0.setOpenInterest(long0);
      Long long1 = futureRealTimeItem0.getOpenInterest();
      assertEquals(3851L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long((-691L));
      futureRealTimeItem0.setOpenInterest(long0);
      Long long1 = futureRealTimeItem0.getOpenInterest();
      assertEquals((-691L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      futureRealTimeItem0.setOpen(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getOpen();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      futureRealTimeItem0.setOpen(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getOpen();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-701L));
      futureRealTimeItem0.setOpen(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getOpen();
      assertEquals((byte)67, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      futureRealTimeItem0.setLow(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLow();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      futureRealTimeItem0.setLow(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLow();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      futureRealTimeItem0.setLimitUp(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLimitUp();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(1919L);
      futureRealTimeItem0.setLimitUp(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLimitUp();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      futureRealTimeItem0.setLimitDown(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLimitDown();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      futureRealTimeItem0.setLimitDown(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLimitDown();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      futureRealTimeItem0.setLimitDown(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLimitDown();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = Long.getLong("", 0L);
      futureRealTimeItem0.setLatestTime(long0);
      Long long1 = futureRealTimeItem0.getLatestTime();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(2167L);
      futureRealTimeItem0.setLatestTime(long0);
      Long long1 = futureRealTimeItem0.getLatestTime();
      assertEquals(2167L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(0L);
      futureRealTimeItem0.setLatestSize(long0);
      Long long1 = futureRealTimeItem0.getLatestSize();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(1337L);
      futureRealTimeItem0.setLatestSize(long0);
      Long long1 = futureRealTimeItem0.getLatestSize();
      assertEquals(1337L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long((-1285L));
      futureRealTimeItem0.setLatestSize(long0);
      Long long1 = futureRealTimeItem0.getLatestSize();
      assertEquals((-1285L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-4146));
      futureRealTimeItem0.setLatestPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLatestPrice();
      assertEquals((byte) (-50), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      futureRealTimeItem0.setLatestPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLatestPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      futureRealTimeItem0.setLatestPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLatestPrice();
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      futureRealTimeItem0.setHigh(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getHigh();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      futureRealTimeItem0.setHigh(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getHigh();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      futureRealTimeItem0.setHigh(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getHigh();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      futureRealTimeItem0.setHigh(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getHigh();
      assertEquals((short)255, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      futureRealTimeItem0.setContractCode(".\"o_c;4Gv(SgtTz");
      String string0 = futureRealTimeItem0.getContractCode();
      assertEquals(".\"o_c;4Gv(SgtTz", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      futureRealTimeItem0.setContractCode("");
      String string0 = futureRealTimeItem0.getContractCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(0L);
      futureRealTimeItem0.setBidSize(long0);
      Long long1 = futureRealTimeItem0.getBidSize();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(1L);
      futureRealTimeItem0.setBidSize(long0);
      Long long1 = futureRealTimeItem0.getBidSize();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long((-122L));
      futureRealTimeItem0.setBidSize(long0);
      Long long1 = futureRealTimeItem0.getBidSize();
      assertEquals((-122L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      futureRealTimeItem0.setBidPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getBidPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      futureRealTimeItem0.setBidPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getBidPrice();
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(704L);
      futureRealTimeItem0.setAskSize(long0);
      Long long1 = futureRealTimeItem0.getAskSize();
      assertEquals(704L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = Long.valueOf((-2065L));
      futureRealTimeItem0.setAskSize(long0);
      Long long1 = futureRealTimeItem0.getAskSize();
      assertEquals((-2065L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      MathContext mathContext0 = new MathContext(0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0L, mathContext0);
      futureRealTimeItem0.setAskPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getAskPrice();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(468);
      futureRealTimeItem0.setAskPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getAskPrice();
      assertEquals((byte) (-44), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = futureRealTimeItem0.getBidSize();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getLatestPrice();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getLimitUp();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = futureRealTimeItem0.getVolume();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      String string0 = futureRealTimeItem0.getContractCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = futureRealTimeItem0.getAskSize();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = futureRealTimeItem0.getOpenInterest();
      futureRealTimeItem0.setOpenInterest(long0);
      assertNull(futureRealTimeItem0.getVolume());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-331));
      futureRealTimeItem0.setBidPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getBidPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(0L);
      futureRealTimeItem0.setVolume(long0);
      Long long1 = futureRealTimeItem0.getVolume();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getBidPrice();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getSettlement();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = futureRealTimeItem0.getLatestTime();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = futureRealTimeItem0.getLatestSize();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getOpen();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      String string0 = futureRealTimeItem0.toString();
      assertEquals("FutureRealTimeItem{latestPrice=null, latestSize=null, latestTime=null, bidPrice=null, askPrice=null, bidSize=null, askSize=null, openInterest=null, volume=null, open=null, high=null, low=null, settlement=null, limitUp=null, limitDown=null}", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getLow();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getHigh();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long(0L);
      futureRealTimeItem0.setAskSize(long0);
      Long long1 = futureRealTimeItem0.getAskSize();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getLimitDown();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      Long long0 = new Long((-2943L));
      futureRealTimeItem0.setLatestTime(long0);
      Long long1 = futureRealTimeItem0.getLatestTime();
      assertEquals((-2943L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-1893));
      futureRealTimeItem0.setSettlement(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getSettlement();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      futureRealTimeItem0.setLow(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLow();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = new BigDecimal((-331));
      futureRealTimeItem0.setOpen(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getOpen();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1153.018759676109));
      futureRealTimeItem0.setAskPrice(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getAskPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal((-1L), mathContext0);
      futureRealTimeItem0.setLimitUp(bigDecimal0);
      BigDecimal bigDecimal1 = futureRealTimeItem0.getLimitUp();
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FutureRealTimeItem futureRealTimeItem0 = new FutureRealTimeItem();
      BigDecimal bigDecimal0 = futureRealTimeItem0.getAskPrice();
      assertNull(bigDecimal0);
  }
}
