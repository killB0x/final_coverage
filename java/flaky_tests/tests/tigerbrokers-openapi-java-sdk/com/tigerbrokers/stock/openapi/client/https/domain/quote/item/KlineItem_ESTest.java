/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:06:10 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.quote.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.KlineItem;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.KlinePoint;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KlineItem_ESTest extends KlineItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      klineItem0.setSymbol("ODOr");
      String string0 = klineItem0.getSymbol();
      assertEquals("ODOr", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      klineItem0.setPeriod("u#md::qaI;?)@!6%~61");
      String string0 = klineItem0.getPeriod();
      assertEquals("u#md::qaI;?)@!6%~61", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      klineItem0.setPeriod("");
      String string0 = klineItem0.getPeriod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      klineItem0.setNextPageToken("\"lY!YVEqE");
      String string0 = klineItem0.getNextPageToken();
      assertEquals("\"lY!YVEqE", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      LinkedList<KlinePoint> linkedList0 = new LinkedList<KlinePoint>();
      klineItem0.setItems(linkedList0);
      List<KlinePoint> list0 = klineItem0.getItems();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      LinkedList<KlinePoint> linkedList0 = new LinkedList<KlinePoint>();
      KlinePoint klinePoint0 = new KlinePoint();
      linkedList0.offerLast(klinePoint0);
      klineItem0.setItems(linkedList0);
      List<KlinePoint> list0 = klineItem0.getItems();
      assertTrue(list0.contains(klinePoint0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      klineItem0.setNextPageToken("");
      String string0 = klineItem0.getNextPageToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      String string0 = klineItem0.getNextPageToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      List<KlinePoint> list0 = klineItem0.getItems();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      klineItem0.setSymbol("");
      String string0 = klineItem0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      String string0 = klineItem0.getPeriod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      String string0 = klineItem0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KlineItem klineItem0 = new KlineItem();
      String string0 = klineItem0.toString();
      assertEquals("KlineItem{symbol='null', period='null', nextPageToken=null, items=null}", string0);
  }
}
