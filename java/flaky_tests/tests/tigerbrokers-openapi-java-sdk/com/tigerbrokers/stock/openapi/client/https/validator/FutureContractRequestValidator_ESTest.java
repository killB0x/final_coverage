/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:35:48 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.https.domain.ApiModel;
import com.tigerbrokers.stock.openapi.client.https.domain.BatchApiModel;
import com.tigerbrokers.stock.openapi.client.https.domain.future.model.FutureContinuousContractModel;
import com.tigerbrokers.stock.openapi.client.https.domain.future.model.FutureContractByConCodeModel;
import com.tigerbrokers.stock.openapi.client.https.domain.future.model.FutureContractByExchCodeModel;
import com.tigerbrokers.stock.openapi.client.https.domain.future.model.FutureCurrentContractModel;
import com.tigerbrokers.stock.openapi.client.https.validator.FutureContractRequestValidator;
import com.tigerbrokers.stock.openapi.client.struct.enums.Language;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureContractRequestValidator_ESTest extends FutureContractRequestValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      FutureContractByExchCodeModel futureContractByExchCodeModel0 = new FutureContractByExchCodeModel();
      futureContractByExchCodeModel0.setExchangeCode("exchange_code");
      futureContractRequestValidator0.validate(futureContractByExchCodeModel0);
      assertNull(futureContractByExchCodeModel0.getLang());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      FutureContractByExchCodeModel futureContractByExchCodeModel0 = new FutureContractByExchCodeModel();
      try { 
        futureContractRequestValidator0.validate(futureContractByExchCodeModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10101:client biz param error(exchange_code is requried)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureContractRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      Language language0 = Language.zh_CN;
      FutureContractByConCodeModel futureContractByConCodeModel0 = new FutureContractByConCodeModel((String) null, language0);
      try { 
        futureContractRequestValidator0.validate(futureContractByConCodeModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10101:client biz param error(contract_code is requried)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureContractRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      FutureContractByConCodeModel futureContractByConCodeModel0 = new FutureContractByConCodeModel("exchange_code");
      futureContractRequestValidator0.validate(futureContractByConCodeModel0);
      assertEquals("exchange_code", futureContractByConCodeModel0.getContractCode());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      FutureCurrentContractModel futureCurrentContractModel0 = new FutureCurrentContractModel();
      futureCurrentContractModel0.setType("contract_code");
      futureContractRequestValidator0.validate(futureCurrentContractModel0);
      assertEquals("contract_code", futureCurrentContractModel0.getType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      FutureCurrentContractModel futureCurrentContractModel0 = new FutureCurrentContractModel();
      try { 
        futureContractRequestValidator0.validate(futureCurrentContractModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10101:client biz param error(type is requried)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureContractRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      FutureContinuousContractModel futureContinuousContractModel0 = new FutureContinuousContractModel();
      try { 
        futureContractRequestValidator0.validate(futureContinuousContractModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10101:client biz param error(type is requried)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureContractRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      Language language0 = Language.zh_TW;
      FutureContinuousContractModel futureContinuousContractModel0 = new FutureContinuousContractModel("%{b<GgkDs({_CKt];2", language0);
      futureContractRequestValidator0.validate(futureContinuousContractModel0);
      assertEquals("%{b<GgkDs({_CKt];2", futureContinuousContractModel0.getType());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FutureContractRequestValidator futureContractRequestValidator0 = new FutureContractRequestValidator();
      BatchApiModel<FutureContractByConCodeModel> batchApiModel0 = new BatchApiModel<FutureContractByConCodeModel>((List<? extends ApiModel>) null);
      futureContractRequestValidator0.validate(batchApiModel0);
  }
}
