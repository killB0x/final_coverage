/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:02:47 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import com.tigerbrokers.stock.openapi.client.util.ApiLogger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ApiLogger_ESTest extends ApiLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object object0 = new Object();
      Object object1 = new Object();
      ApiLogger.info("yyyy-MM-dd", object1, (Object) "yyyy-MM-dd", object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      MockException mockException0 = new MockException();
      ApiLogger.error("tiger_openapi_", "yyyy-MM-dd HH:mm:ss.SSS", "tiger_openapi_", "", "%d %level - %msg%n", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApiLogger.error("j/", "tiger_openapi_", "", (Exception) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ApiLogger.setEnabled(true, "###");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // an error occurred while init log config, error message:{}create log error:Simulated IOException
         //
         verifyException("com.tigerbrokers.stock.openapi.client.util.ApiLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      MockException mockException0 = new MockException("###");
      mockException0.initCause(mockException0);
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) mockException0;
      // Undeclared exception!
      try { 
        ApiLogger.error("###", objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      MockException mockException0 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable("", mockException0);
      mockException0.addSuppressed(mockThrowable0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ApiLogger.error("", object0, (Object) mockThrowable0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApiLogger.error("kc|", "", "af5sL#K57{1{Y];gth", "", "com.tigerbrokers.stock.openapi.client.util.DateUtils", (Exception) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApiLogger.setEnabled(false, "log/");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object object0 = new Object();
      ApiLogger.setDebugEnabled(true);
      ApiLogger.debug("###", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object object0 = new Object();
      ApiLogger.debug("###", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApiLogger.debug("6Y", "6Y");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object[] objectArray0 = new Object[4];
      ApiLogger.setInfoEnabled(false);
      ApiLogger.info("h r2A/B$! 88mv", objectArray0[3], (Object) "an error occurred while writing the error log, origin error message:{}", objectArray0[3]);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      ApiLogger.info("###", object0, (Object) "###", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object object0 = new Object();
      ApiLogger.setInfoEnabled(false);
      ApiLogger.info("com.tigerbrokers.stock.openapi.client.struct.enums.TimeZoneId", (Object) "yyyy-MM-dd", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      LoggerContext loggerContext0 = new LoggerContext();
      Logger logger0 = loggerContext0.getLogger("an error occurred while writing the error log, origin error message:{}");
      ApiLogger.info("an error occurred while writing the error log, origin error message:{}", (Object) "###", (Object) logger0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ApiLogger.info("T", (Object) "pS5", (Object) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      ApiLogger.setInfoEnabled(false);
      ApiLogger.info("Iyh", (Object) "h r2A/B$! 88mv");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object object0 = new Object();
      ApiLogger.info("###", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "pS5";
      ApiLogger.info("pS5", (Object) string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      ApiLogger.setInfoEnabled(false);
      ApiLogger.info("###");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      ApiLogger.info("###");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ApiLogger.info("f8=7yLgLRcW2Ha2");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      Object[] objectArray0 = new Object[4];
      ApiLogger.error("###", objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ApiLogger.error("pS5", objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ApiLogger.setEnabled(true, "###");
      ApiLogger.error("^o{2KhS,;dg/");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApiLogger.error("###");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ApiLogger.error("WHzPL", (Object) "WHzPL", (Object) "WHzPL");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ApiLogger.setEnabled(false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ApiLogger apiLogger0 = new ApiLogger();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ApiLogger.setErrorEnabled(false);
  }
}
