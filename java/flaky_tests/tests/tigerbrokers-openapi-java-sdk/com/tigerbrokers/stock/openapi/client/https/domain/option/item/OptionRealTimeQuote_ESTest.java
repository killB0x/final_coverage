/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:27:47 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.option.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.option.item.OptionRealTimeQuote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionRealTimeQuote_ESTest extends OptionRealTimeQuote_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(0);
      optionRealTimeQuote0.setVolume(integer0);
      Integer integer1 = optionRealTimeQuote0.getVolume();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(1406);
      optionRealTimeQuote0.setVolume(integer0);
      Integer integer1 = optionRealTimeQuote0.getVolume();
      assertEquals(1406, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer((-1151));
      optionRealTimeQuote0.setVolume(integer0);
      Integer integer1 = optionRealTimeQuote0.getVolume();
      assertEquals((-1151), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      optionRealTimeQuote0.setStrike("eu_iu7:d*8");
      String string0 = optionRealTimeQuote0.getStrike();
      assertEquals("eu_iu7:d*8", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      optionRealTimeQuote0.setRight(", bidSize=");
      String string0 = optionRealTimeQuote0.getRight();
      assertEquals(", bidSize=", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(0.0);
      optionRealTimeQuote0.setPreClose(double0);
      Double double1 = optionRealTimeQuote0.getPreClose();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(1136.066509249699);
      optionRealTimeQuote0.setPreClose(double0);
      Double double1 = optionRealTimeQuote0.getPreClose();
      assertEquals(1136.066509249699, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double((-1.0));
      optionRealTimeQuote0.setPreClose(double0);
      Double double1 = optionRealTimeQuote0.getPreClose();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(0);
      optionRealTimeQuote0.setOpenInterest(integer0);
      Integer integer1 = optionRealTimeQuote0.getOpenInterest();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(1);
      optionRealTimeQuote0.setOpenInterest(integer0);
      Integer integer1 = optionRealTimeQuote0.getOpenInterest();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer((-1687));
      optionRealTimeQuote0.setOpenInterest(integer0);
      Integer integer1 = optionRealTimeQuote0.getOpenInterest();
      assertEquals((-1687), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(0);
      optionRealTimeQuote0.setMultiplier(integer0);
      Integer integer1 = optionRealTimeQuote0.getMultiplier();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer((-2109));
      optionRealTimeQuote0.setMultiplier(integer0);
      Integer integer1 = optionRealTimeQuote0.getMultiplier();
      assertEquals((-2109), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(0.0);
      optionRealTimeQuote0.setLatestPrice(double0);
      Double double1 = optionRealTimeQuote0.getLatestPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(3025.8396);
      optionRealTimeQuote0.setLatestPrice(double0);
      Double double1 = optionRealTimeQuote0.getLatestPrice();
      assertEquals(3025.8396, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Long long0 = Long.valueOf(0L);
      optionRealTimeQuote0.setLastTimestamp(long0);
      Long long1 = optionRealTimeQuote0.getLastTimestamp();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Long long0 = new Long(769L);
      optionRealTimeQuote0.setLastTimestamp(long0);
      Long long1 = optionRealTimeQuote0.getLastTimestamp();
      assertEquals(769L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Long long0 = new Long((-1));
      optionRealTimeQuote0.setLastTimestamp(long0);
      Long long1 = optionRealTimeQuote0.getLastTimestamp();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      optionRealTimeQuote0.setIdentifier(", bidSize=");
      String string0 = optionRealTimeQuote0.getIdentifier();
      assertEquals(", bidSize=", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      optionRealTimeQuote0.setIdentifier("");
      String string0 = optionRealTimeQuote0.getIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(0);
      optionRealTimeQuote0.setBidSize(integer0);
      Integer integer1 = optionRealTimeQuote0.getBidSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(39);
      optionRealTimeQuote0.setBidSize(integer0);
      Integer integer1 = optionRealTimeQuote0.getBidSize();
      assertEquals(39, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(0.0);
      optionRealTimeQuote0.setBidPrice(double0);
      Double double1 = optionRealTimeQuote0.getBidPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(1136.066509249699);
      optionRealTimeQuote0.setBidPrice(double0);
      Double double1 = optionRealTimeQuote0.getBidPrice();
      assertEquals(1136.066509249699, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(0);
      optionRealTimeQuote0.setAskSize(integer0);
      Integer integer1 = optionRealTimeQuote0.getAskSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(1);
      optionRealTimeQuote0.setAskSize(integer0);
      Integer integer1 = optionRealTimeQuote0.getAskSize();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer((-1));
      optionRealTimeQuote0.setAskSize(integer0);
      Integer integer1 = optionRealTimeQuote0.getAskSize();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(0.0);
      optionRealTimeQuote0.setAskPrice(double0);
      Double double1 = optionRealTimeQuote0.getAskPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double(2202.361926);
      optionRealTimeQuote0.setAskPrice(double0);
      Double double1 = optionRealTimeQuote0.getAskPrice();
      assertEquals(2202.361926, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = optionRealTimeQuote0.getMultiplier();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer(1);
      optionRealTimeQuote0.setMultiplier(integer0);
      Integer integer1 = optionRealTimeQuote0.getMultiplier();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      optionRealTimeQuote0.setRight("");
      String string0 = optionRealTimeQuote0.getRight();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = optionRealTimeQuote0.getAskSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double((-1.0));
      optionRealTimeQuote0.setBidPrice(double0);
      Double double1 = optionRealTimeQuote0.getBidPrice();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      String string0 = optionRealTimeQuote0.toString();
      assertEquals("OptionRealTimeQuote{identifier='null', strike='null', right='null', bidPrice=null, bidSize=null, askPrice=null, askSize=null, volume=null, latestPrice=null, preClose=null, openInterest=null, multiplier=null, lastTimestamp=null}", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = optionRealTimeQuote0.getBidSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      String string0 = optionRealTimeQuote0.getIdentifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      optionRealTimeQuote0.setStrike("");
      String string0 = optionRealTimeQuote0.getStrike();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      String string0 = optionRealTimeQuote0.getStrike();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = optionRealTimeQuote0.getOpenInterest();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      String string0 = optionRealTimeQuote0.getRight();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Long long0 = optionRealTimeQuote0.getLastTimestamp();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double((-1.0));
      optionRealTimeQuote0.setLatestPrice(double0);
      Double double1 = optionRealTimeQuote0.getLatestPrice();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = optionRealTimeQuote0.getLatestPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = optionRealTimeQuote0.getPreClose();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = optionRealTimeQuote0.getBidPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = optionRealTimeQuote0.getAskPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = optionRealTimeQuote0.getVolume();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Double double0 = new Double((-1.0));
      optionRealTimeQuote0.setAskPrice(double0);
      Double double1 = optionRealTimeQuote0.getAskPrice();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OptionRealTimeQuote optionRealTimeQuote0 = new OptionRealTimeQuote();
      Integer integer0 = new Integer((-1));
      optionRealTimeQuote0.setBidSize(integer0);
      Integer integer1 = optionRealTimeQuote0.getBidSize();
      assertEquals((-1), (int)integer1);
  }
}
