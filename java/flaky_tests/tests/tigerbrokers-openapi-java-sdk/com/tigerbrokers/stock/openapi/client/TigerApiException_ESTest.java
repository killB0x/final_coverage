/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:42:57 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.TigerApiException;
import com.tigerbrokers.stock.openapi.client.struct.enums.TigerApiCode;
import java.util.MissingFormatArgumentException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TigerApiException_ESTest extends TigerApiException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUBSCRIBE_SYMBOL_LIMIT_ERROR;
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
      TigerApiException tigerApiException1 = new TigerApiException(tigerApiException0);
      String string0 = tigerApiException1.getErrMsg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TigerApiException tigerApiException0 = new TigerApiException(1, "");
      String string0 = tigerApiException0.getErrMsg();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUBSCRIBE_SYMBOL_LIMIT_ERROR;
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
      TigerApiException tigerApiException1 = new TigerApiException(tigerApiException0);
      int int0 = tigerApiException1.getErrCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TigerApiException tigerApiException0 = new TigerApiException((-515), "");
      int int0 = tigerApiException0.getErrCode();
      assertEquals((-515), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUCCESS;
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0);
      TigerApiCode tigerApiCode1 = tigerApiException0.getApiError();
      assertEquals(TigerApiCode.SUCCESS, tigerApiCode1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.HTTP_BIZ_PARAM_RANGE_ERROR;
      String[] stringArray0 = new String[1];
      TigerApiException tigerApiException0 = null;
      try {
        tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = null;
      try {
        tigerApiException0 = new TigerApiException((TigerApiCode) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.TigerApiException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TigerApiException tigerApiException0 = null;
      try {
        tigerApiException0 = new TigerApiException((TigerApiCode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.TigerApiException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUBSCRIBE_SYMBOL_LIMIT_ERROR;
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
      int int0 = tigerApiException0.getErrCode();
      assertEquals(3002, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TigerApiException tigerApiException0 = new TigerApiException("\"$!RCQtq");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TigerApiException tigerApiException0 = new TigerApiException();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUBSCRIBE_SYMBOL_LIMIT_ERROR;
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
      TigerApiException tigerApiException1 = new TigerApiException(tigerApiException0);
      tigerApiException1.getApiError();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUBSCRIBE_SYMBOL_LIMIT_ERROR;
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
      String string0 = tigerApiException0.getErrMsg();
      assertEquals("subscribe symbol limit error", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      TigerApiException tigerApiException0 = new TigerApiException("", mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TigerApiCode tigerApiCode0 = TigerApiCode.SUBSCRIBE_SYMBOL_LIMIT_ERROR;
      String[] stringArray0 = new String[9];
      TigerApiException tigerApiException0 = new TigerApiException(tigerApiCode0, stringArray0);
      TigerApiCode tigerApiCode1 = tigerApiException0.getApiError();
      assertEquals("subscribe symbol limit error", tigerApiCode1.getMessage());
  }
}
