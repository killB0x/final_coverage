/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:03:09 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.request.quote;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.https.request.quote.QuoteTradeTickRequest;
import com.tigerbrokers.stock.openapi.client.struct.enums.Language;
import com.tigerbrokers.stock.openapi.client.struct.enums.TradeSession;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuoteTradeTickRequest_ESTest extends QuoteTradeTickRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      Language language0 = Language.zh_TW;
      QuoteTradeTickRequest quoteTradeTickRequest0 = QuoteTradeTickRequest.newRequest((List<String>) linkedList0, long0, long1, language0);
      assertEquals("2.0", quoteTradeTickRequest0.getApiVersion());
      assertEquals("trade_tick", quoteTradeTickRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long(3971);
      Long long1 = new Long(3971);
      QuoteTradeTickRequest quoteTradeTickRequest0 = QuoteTradeTickRequest.newRequest((List<String>) linkedList0, long1, long0);
      assertEquals("trade_tick", quoteTradeTickRequest0.getApiMethodName());
      assertEquals("2.0", quoteTradeTickRequest0.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Language language0 = Language.en_US;
      QuoteTradeTickRequest quoteTradeTickRequest0 = QuoteTradeTickRequest.newRequest((List<String>) linkedList0, language0);
      assertEquals("2.0", quoteTradeTickRequest0.getApiVersion());
      assertEquals("trade_tick", quoteTradeTickRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuoteTradeTickRequest quoteTradeTickRequest0 = new QuoteTradeTickRequest();
      TradeSession tradeSession0 = TradeSession.Regular;
      // Undeclared exception!
      try { 
        quoteTradeTickRequest0.setTradeSession(tradeSession0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.request.quote.QuoteTradeTickRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuoteTradeTickRequest quoteTradeTickRequest0 = new QuoteTradeTickRequest();
      quoteTradeTickRequest0.getResponseClass();
      assertEquals("trade_tick", quoteTradeTickRequest0.getApiMethodName());
      assertEquals("2.0", quoteTradeTickRequest0.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Language language0 = Language.zh_TW;
      QuoteTradeTickRequest quoteTradeTickRequest0 = QuoteTradeTickRequest.newRequest((List<String>) linkedList0, language0, (Integer) null);
      assertEquals("2.0", quoteTradeTickRequest0.getApiVersion());
      assertEquals("trade_tick", quoteTradeTickRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      QuoteTradeTickRequest quoteTradeTickRequest0 = QuoteTradeTickRequest.newRequest((List<String>) linkedList0);
      TradeSession tradeSession0 = TradeSession.AfterHours;
      quoteTradeTickRequest0.setTradeSession(tradeSession0);
      assertEquals("2.0", quoteTradeTickRequest0.getApiVersion());
      assertEquals("trade_tick", quoteTradeTickRequest0.getApiMethodName());
  }
}
