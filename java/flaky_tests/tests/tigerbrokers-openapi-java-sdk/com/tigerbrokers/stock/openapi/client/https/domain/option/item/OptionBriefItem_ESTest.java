/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:07:17 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.option.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.option.item.OptionBriefItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionBriefItem_ESTest extends OptionBriefItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((double) 618);
      optionBriefItem0.setRatesBonds(double0);
      String string0 = optionBriefItem0.toString();
      assertEquals("OptionBriefItem{identifier='null', symbol='null', strike='null', bidPrice=null, bidSize=null, askPrice=null, askSize=null, latestPrice=null, volume=null, high=null, low=null, open=null, preClose=null, openInterest=null, change=null, multiplier=null, right='null', volatility='null', expiry=null, ratesBonds=618.0, timestamp=null, latestTime=null}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(0);
      optionBriefItem0.setVolume(integer0);
      Integer integer1 = optionBriefItem0.getVolume();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(10);
      optionBriefItem0.setVolume(integer0);
      Integer integer1 = optionBriefItem0.getVolume();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer((-3158));
      optionBriefItem0.setVolume(integer0);
      Integer integer1 = optionBriefItem0.getVolume();
      assertEquals((-3158), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setVolatility(", volatility='");
      String string0 = optionBriefItem0.getVolatility();
      assertEquals(", volatility='", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long(1146L);
      optionBriefItem0.setTimestamp(long0);
      Long long1 = optionBriefItem0.getTimestamp();
      assertEquals(1146L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long((-80L));
      optionBriefItem0.setTimestamp(long0);
      Long long1 = optionBriefItem0.getTimestamp();
      assertEquals((-80L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setSymbol("Y+6$9#v");
      String string0 = optionBriefItem0.getSymbol();
      assertEquals("Y+6$9#v", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setStrike("(O.Vl@1DYef)~GS");
      String string0 = optionBriefItem0.getStrike();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setStrike("");
      String string0 = optionBriefItem0.getStrike();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setRight("OptionBriefItem{identifier='null', symbol='null', strike='null', bidPrice=null, bidSize=null, askPrice=null, askSize=null, latestPrice=null, volume=null, high=null, low=null, open=null, preClose=null, openInterest=null, change=null, multiplier=null, right='null', volatility='null', expiry=null, ratesBonds=null, timestamp=null, latestTime=null}");
      String string0 = optionBriefItem0.getRight();
      assertEquals("OptionBriefItem{identifier='null', symbol='null', strike='null', bidPrice=null, bidSize=null, askPrice=null, askSize=null, latestPrice=null, volume=null, high=null, low=null, open=null, preClose=null, openInterest=null, change=null, multiplier=null, right='null', volatility='null', expiry=null, ratesBonds=null, timestamp=null, latestTime=null}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setRight("");
      String string0 = optionBriefItem0.getRight();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.ratesBonds = double0;
      Double double1 = optionBriefItem0.getRatesBonds();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((double) 618);
      optionBriefItem0.setRatesBonds(double0);
      Double double1 = optionBriefItem0.getRatesBonds();
      assertEquals(618.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-1715.3171105592812));
      optionBriefItem0.ratesBonds = double0;
      Double double1 = optionBriefItem0.getRatesBonds();
      assertEquals((-1715.3171105592812), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((double) 0);
      optionBriefItem0.setPreClose(double0);
      Double double1 = optionBriefItem0.getPreClose();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(1.0);
      optionBriefItem0.setPreClose(double0);
      Double double1 = optionBriefItem0.getPreClose();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-1643.7387));
      optionBriefItem0.setPreClose(double0);
      Double double1 = optionBriefItem0.getPreClose();
      assertEquals((-1643.7387), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(0);
      optionBriefItem0.setOpenInterest(integer0);
      Integer integer1 = optionBriefItem0.getOpenInterest();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(10);
      optionBriefItem0.setOpenInterest(integer0);
      Integer integer1 = optionBriefItem0.getOpenInterest();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer((-1332));
      optionBriefItem0.setOpenInterest(integer0);
      Integer integer1 = optionBriefItem0.getOpenInterest();
      assertEquals((-1332), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setOpen(double0);
      Double double1 = optionBriefItem0.getOpen();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(705.2904183590831);
      optionBriefItem0.setOpen(double0);
      Double double1 = optionBriefItem0.getOpen();
      assertEquals(705.2904183590831, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-1.0));
      optionBriefItem0.setOpen(double0);
      Double double1 = optionBriefItem0.getOpen();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(0);
      optionBriefItem0.setMultiplier(integer0);
      Integer integer1 = optionBriefItem0.getMultiplier();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(6);
      optionBriefItem0.setMultiplier(integer0);
      Integer integer1 = optionBriefItem0.getMultiplier();
      assertEquals(6, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer((-818));
      optionBriefItem0.setMultiplier(integer0);
      Integer integer1 = optionBriefItem0.getMultiplier();
      assertEquals((-818), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setLow(double0);
      Double double1 = optionBriefItem0.getLow();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(705.2904183590831);
      optionBriefItem0.setLow(double0);
      Double double1 = optionBriefItem0.getLow();
      assertEquals(705.2904183590831, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-2225.78159456));
      optionBriefItem0.setLow(double0);
      Double double1 = optionBriefItem0.getLow();
      assertEquals((-2225.78159456), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setLatestTime("");
      String string0 = optionBriefItem0.getLatestTime();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setLatestPrice(double0);
      Double double1 = optionBriefItem0.getLatestPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(660.928386994);
      optionBriefItem0.setLatestPrice(double0);
      Double double1 = optionBriefItem0.getLatestPrice();
      assertEquals(660.928386994, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-1.0));
      optionBriefItem0.setLatestPrice(double0);
      Double double1 = optionBriefItem0.getLatestPrice();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setIdentifier("yyyy-MM-dd");
      String string0 = optionBriefItem0.getIdentifier();
      assertEquals("yyyy-MM-dd", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setIdentifier("");
      String string0 = optionBriefItem0.getIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setHigh(double0);
      Double double1 = optionBriefItem0.getHigh();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(1.0);
      optionBriefItem0.setHigh(double0);
      Double double1 = optionBriefItem0.getHigh();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-881.302613034));
      optionBriefItem0.setHigh(double0);
      Double double1 = optionBriefItem0.getHigh();
      assertEquals((-881.302613034), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long(1L);
      optionBriefItem0.setExpiry(long0);
      Long long1 = optionBriefItem0.getExpiry();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long((-250L));
      optionBriefItem0.setExpiry(long0);
      Long long1 = optionBriefItem0.getExpiry();
      assertEquals((-250L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setChange(double0);
      Double double1 = optionBriefItem0.getChange();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(705.2904183590831);
      optionBriefItem0.setChange(double0);
      Double double1 = optionBriefItem0.getChange();
      assertEquals(705.2904183590831, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-477.89));
      optionBriefItem0.setChange(double0);
      Double double1 = optionBriefItem0.getChange();
      assertEquals((-477.89), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(0);
      optionBriefItem0.setBidSize(integer0);
      Integer integer1 = optionBriefItem0.getBidSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(10);
      optionBriefItem0.setBidSize(integer0);
      Integer integer1 = optionBriefItem0.getBidSize();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer((-1794));
      optionBriefItem0.setBidSize(integer0);
      Integer integer1 = optionBriefItem0.getBidSize();
      assertEquals((-1794), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setBidPrice(double0);
      Double double1 = optionBriefItem0.getBidPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(705.2904183590831);
      optionBriefItem0.setBidPrice(double0);
      Double double1 = optionBriefItem0.getBidPrice();
      assertEquals(705.2904183590831, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-1.0));
      optionBriefItem0.setBidPrice(double0);
      Double double1 = optionBriefItem0.getBidPrice();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(0);
      optionBriefItem0.setAskSize(integer0);
      Integer integer1 = optionBriefItem0.getAskSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer(1);
      optionBriefItem0.setAskSize(integer0);
      Integer integer1 = optionBriefItem0.getAskSize();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = new Integer((-818));
      optionBriefItem0.setAskSize(integer0);
      Integer integer1 = optionBriefItem0.getAskSize();
      assertEquals((-818), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(0.0);
      optionBriefItem0.setAskPrice(double0);
      Double double1 = optionBriefItem0.getAskPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf(3103.686118);
      optionBriefItem0.setAskPrice(double0);
      Double double1 = optionBriefItem0.getAskPrice();
      assertEquals(3103.686118, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = Double.valueOf((-4418.134586));
      optionBriefItem0.setAskPrice(double0);
      Double double1 = optionBriefItem0.getAskPrice();
      assertEquals((-4418.134586), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long(1146L);
      optionBriefItem0.setTimestamp(long0);
      optionBriefItem0.getLatestTime();
      String string0 = optionBriefItem0.getLatestTime();
      assertEquals("1969-12-31 19:00:01.146", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      String string0 = optionBriefItem0.getLatestTime();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setSymbol("");
      String string0 = optionBriefItem0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = optionBriefItem0.getOpenInterest();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getHigh();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = optionBriefItem0.getAskSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      String string0 = optionBriefItem0.getIdentifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      String string0 = optionBriefItem0.getVolatility();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getPreClose();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      String string0 = optionBriefItem0.getStrike();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      String string0 = optionBriefItem0.getRight();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long(0L);
      optionBriefItem0.setTimestamp(long0);
      Long long1 = optionBriefItem0.getTimestamp();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getChange();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getLow();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      optionBriefItem0.setVolatility("");
      String string0 = optionBriefItem0.getVolatility();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = new Long(0L);
      optionBriefItem0.setExpiry(long0);
      Long long1 = optionBriefItem0.getExpiry();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getBidPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = optionBriefItem0.getVolume();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getRatesBonds();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getOpen();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = optionBriefItem0.getBidSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Integer integer0 = optionBriefItem0.getMultiplier();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getAskPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      String string0 = optionBriefItem0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Double double0 = optionBriefItem0.getLatestPrice();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = optionBriefItem0.getExpiry();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      OptionBriefItem optionBriefItem0 = new OptionBriefItem();
      Long long0 = optionBriefItem0.getTimestamp();
      assertNull(long0);
  }
}
