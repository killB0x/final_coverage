/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:57:55 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.request.future;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.request.future.FutureKlineRequest;
import com.tigerbrokers.stock.openapi.client.struct.enums.FutureKType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureKlineRequest_ESTest extends FutureKlineRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Long long0 = new Long(3194L);
      Integer integer0 = new Integer(1);
      FutureKlineRequest futureKlineRequest0 = FutureKlineRequest.newRequest((List<String>) null, (FutureKType) null, long0, long0, integer0);
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FutureKType futureKType0 = FutureKType.min5;
      Long long0 = new Long((-954L));
      Integer integer0 = new Integer(2932);
      FutureKlineRequest futureKlineRequest0 = FutureKlineRequest.newRequest((List<String>) null, futureKType0, long0, long0, integer0);
      futureKlineRequest0.withPageToken("3.0");
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FutureKlineRequest futureKlineRequest0 = new FutureKlineRequest();
      futureKlineRequest0.withPageToken((String) null);
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(1);
      FutureKlineRequest futureKlineRequest0 = FutureKlineRequest.newRequest((List<String>) null, (FutureKType) null, integer0);
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FutureKlineRequest futureKlineRequest0 = new FutureKlineRequest();
      futureKlineRequest0.getResponseClass();
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FutureKType futureKType0 = FutureKType.min5;
      FutureKlineRequest futureKlineRequest0 = FutureKlineRequest.newRequest((List<String>) null, futureKType0);
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FutureKlineRequest futureKlineRequest0 = FutureKlineRequest.newRequest((List<String>) null);
      assertEquals("1.0", futureKlineRequest0.getApiVersion());
      assertEquals("future_kline", futureKlineRequest0.getApiMethodName());
  }
}
