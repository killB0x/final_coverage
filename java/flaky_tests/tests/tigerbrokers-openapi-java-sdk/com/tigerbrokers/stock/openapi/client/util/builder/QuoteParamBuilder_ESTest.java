/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:36:47 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.util.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.struct.enums.KType;
import com.tigerbrokers.stock.openapi.client.struct.enums.Language;
import com.tigerbrokers.stock.openapi.client.struct.enums.Market;
import com.tigerbrokers.stock.openapi.client.struct.enums.TimeLineType;
import com.tigerbrokers.stock.openapi.client.struct.enums.TimeZoneId;
import com.tigerbrokers.stock.openapi.client.util.builder.QuoteParamBuilder;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuoteParamBuilder_ESTest extends QuoteParamBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Long long0 = new Long(0);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endTime(long0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Long long0 = new Long(0L);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginTime(long0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.setTime("JBZ31'K7[L$\u0004g+3S", "", timeZoneId0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginTime("#Y WzY15e5FR", timeZoneId0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endTime("limit", timeZoneId0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.industryLevel("");
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.industryLevel((String) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Integer integer0 = new Integer(1);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.industryId(integer0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.industryId((Integer) null);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Language language0 = Language.zh_CN;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.language(language0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.language((Language) null);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Integer integer0 = new Integer(3);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endIndex(integer0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endIndex((Integer) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Integer integer0 = new Integer(3);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginIndex(integer0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginIndex((Integer) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Market market0 = Market.US;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.market(market0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.market((Market) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Boolean boolean0 = Boolean.TRUE;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.askBid(boolean0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.askBid((Boolean) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Boolean boolean0 = Boolean.TRUE;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.hourTrading(boolean0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.hourTrading((Boolean) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.right("Z>,S$#V{");
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.right((String) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Integer integer0 = new Integer(3);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.limit(integer0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.limit((Integer) null);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Long long0 = new Long(1);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endTime(long0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Long long0 = new Long((-3367L));
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endTime(long0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endTime((Long) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Long long0 = new Long(455L);
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginTime(long0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      Long long0 = new Long((-3367L));
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginTime(long0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginTime((Long) null);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.symbols(linkedList0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.symbols((List<String>) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.symbol("g!i>]/[LT");
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.symbol((String) null);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      TimeLineType timeLineType0 = TimeLineType.day5;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(timeLineType0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      TimeLineType timeLineType0 = TimeLineType.day;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(timeLineType0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period((TimeLineType) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      KType kType0 = KType.min60;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(kType0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      KType kType0 = KType.min15;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(kType0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      KType kType0 = KType.min5;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(kType0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      KType kType0 = KType.min1;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(kType0);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      KType kType0 = KType.year;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(kType0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      KType kType0 = KType.min30;
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period(kType0);
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.period((KType) null);
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      // Undeclared exception!
      try { 
        quoteParamBuilder0.build();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("com.tigerbrokers.stock.openapi.client.util.builder.QuoteParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      // Undeclared exception!
      try { 
        quoteParamBuilder0.buildJson();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSONObject
         //
         verifyException("com.tigerbrokers.stock.openapi.client.util.builder.QuoteParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.endTime("");
      assertSame(quoteParamBuilder0, quoteParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      QuoteParamBuilder quoteParamBuilder0 = QuoteParamBuilder.instance();
      QuoteParamBuilder quoteParamBuilder1 = quoteParamBuilder0.beginTime("JBZ31'K7[L$\u0004g+3S");
      assertSame(quoteParamBuilder1, quoteParamBuilder0);
  }
}
