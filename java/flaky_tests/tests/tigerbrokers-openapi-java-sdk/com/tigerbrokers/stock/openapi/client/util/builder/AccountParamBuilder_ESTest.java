/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 03:46:51 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.util.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.struct.enums.Currency;
import com.tigerbrokers.stock.openapi.client.struct.enums.Market;
import com.tigerbrokers.stock.openapi.client.struct.enums.SecType;
import com.tigerbrokers.stock.openapi.client.struct.enums.TimeZoneId;
import com.tigerbrokers.stock.openapi.client.util.builder.AccountParamBuilder;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountParamBuilder_ESTest extends AccountParamBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long((-411L));
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.endDate(long0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long((-1L));
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.startDate(long0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.setTime("w", "w", timeZoneId0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.secretKey("ZX!Vl2`");
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.secretKey((String) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Integer integer0 = new Integer(0);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.parentId(integer0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.parentId((Integer) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Boolean boolean0 = Boolean.TRUE;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.isBrief(boolean0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.isBrief((Boolean) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long(1L);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.orderId(long0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.orderId((Long) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Integer integer0 = new Integer((-1));
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.orderId(integer0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.orderId((Integer) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long(1L);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.id(long0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.id((Long) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      SecType secType0 = SecType.IOPT;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.secType(secType0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.secType((SecType) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.states(linkedList0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.states((List<String>) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Integer integer0 = new Integer(0);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.limit(integer0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.limit((Integer) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long(4991L);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.endDate(long0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long(0L);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.endDate(long0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.endDate((Long) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long(1L);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.startDate(long0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Long long0 = new Long(0L);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.startDate(long0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.startDate((Long) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.right("`uUP.><X2I}^Wh;;");
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.right((String) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.expiry("yyyy-MM-dd HH:mm:ss.SSS");
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.expiry((String) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Double double0 = new Double((-610.39657));
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.strike(double0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.strike((Double) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Boolean boolean0 = Boolean.FALSE;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.marketValue(boolean0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.marketValue((Boolean) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Boolean boolean0 = Boolean.FALSE;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.segment(boolean0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.segment((Boolean) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Market market0 = Market.HK;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.market(market0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.market((Market) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.exchange("$X");
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.exchange((String) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Currency currency0 = Currency.SGD;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.currency(currency0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.currency((Currency) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      Boolean boolean0 = Boolean.valueOf(false);
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.continuous(boolean0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.continuous((Boolean) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.symbols(linkedList0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.symbols((List<String>) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.symbol("&");
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.symbol((String) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.subAccounts(linkedList0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.subAccounts((List<String>) null);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.account("&");
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.account((String) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.conid("end_date");
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.conid((String) null);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.startDate("", timeZoneId0);
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.endDate("", timeZoneId0);
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      // Undeclared exception!
      try { 
        accountParamBuilder0.buildJson();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSONObject
         //
         verifyException("com.tigerbrokers.stock.openapi.client.util.builder.AccountParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.startDate("/HM&!;Io");
      assertSame(accountParamBuilder0, accountParamBuilder1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AccountParamBuilder accountParamBuilder0 = AccountParamBuilder.instance();
      AccountParamBuilder accountParamBuilder1 = accountParamBuilder0.endDate("");
      assertSame(accountParamBuilder1, accountParamBuilder0);
  }
}
