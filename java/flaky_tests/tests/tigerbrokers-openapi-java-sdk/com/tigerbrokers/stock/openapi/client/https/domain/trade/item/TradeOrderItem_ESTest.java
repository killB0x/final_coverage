/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 07:02:06 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.trade.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.trade.item.TradeOrderItem;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TradeOrderItem_ESTest extends TradeOrderItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      tradeOrderItem0.setSubIds(linkedList0);
      List<Long> list0 = tradeOrderItem0.getSubIds();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      tradeOrderItem0.setSubIds(linkedList0);
      List<Long> list0 = tradeOrderItem0.getSubIds();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderItem0.setOrderId(131L);
      long long0 = tradeOrderItem0.getOrderId();
      assertEquals(131L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderItem0.setOrderId((-19L));
      long long0 = tradeOrderItem0.getOrderId();
      assertEquals((-19L), long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderItem0.setId(3059L);
      long long0 = tradeOrderItem0.getId();
      assertEquals(3059L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      tradeOrderItem0.setId((-19L));
      long long0 = tradeOrderItem0.getId();
      assertEquals((-19L), long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      long long0 = tradeOrderItem0.getOrderId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      List<Long> list0 = tradeOrderItem0.getSubIds();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TradeOrderItem tradeOrderItem0 = new TradeOrderItem();
      long long0 = tradeOrderItem0.getId();
      assertEquals(0L, long0);
  }
}
