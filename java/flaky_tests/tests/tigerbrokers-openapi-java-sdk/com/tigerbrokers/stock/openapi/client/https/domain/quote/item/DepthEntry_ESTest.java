/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:12:05 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.quote.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.DepthEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DepthEntry_ESTest extends DepthEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = new Integer(0);
      depthEntry0.setVolume(integer0);
      Integer integer1 = depthEntry0.getVolume();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = new Integer(1364);
      depthEntry0.setVolume(integer0);
      Integer integer1 = depthEntry0.getVolume();
      assertEquals(1364, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = new Integer((-52));
      depthEntry0.setVolume(integer0);
      Integer integer1 = depthEntry0.getVolume();
      assertEquals((-52), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Double double0 = new Double(0.0);
      depthEntry0.setPrice(double0);
      Double double1 = depthEntry0.getPrice();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Double double0 = new Double(599);
      depthEntry0.setPrice(double0);
      Double double1 = depthEntry0.getPrice();
      assertEquals(599.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Double double0 = new Double((-2619));
      depthEntry0.setPrice(double0);
      Double double1 = depthEntry0.getPrice();
      assertEquals((-2619.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = new Integer(0);
      depthEntry0.setCount(integer0);
      Integer integer1 = depthEntry0.getCount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = new Integer(1364);
      depthEntry0.setCount(integer0);
      Integer integer1 = depthEntry0.getCount();
      assertEquals(1364, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      String string0 = depthEntry0.toString();
      assertEquals("DepthEntry{price=null, count=null, volume=null}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = new Integer((-52));
      depthEntry0.setCount(integer0);
      Integer integer1 = depthEntry0.getCount();
      assertEquals((-52), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = depthEntry0.getCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Integer integer0 = depthEntry0.getVolume();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DepthEntry depthEntry0 = new DepthEntry();
      Double double0 = depthEntry0.getPrice();
      assertNull(double0);
  }
}
