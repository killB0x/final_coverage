/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 05:11:09 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.option.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.https.domain.option.model.OptionKlineModel;
import com.tigerbrokers.stock.openapi.client.struct.enums.TimeZoneId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionKlineModel_ESTest extends OptionKlineModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      optionKlineModel0.setRight(" 00:00:00");
      String string0 = optionKlineModel0.toString();
      assertEquals("OptionKlineModel{beginTime=null, endTime=null, symbol='null', right=' 00:00:00', strike='null', expiry='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      optionKlineModel0.strike = "";
      String string0 = optionKlineModel0.toString();
      assertEquals("OptionKlineModel{beginTime=null, endTime=null, symbol='null', right='null', strike='', expiry='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.valueOf((-1L));
      optionKlineModel0.setEndTime(long0);
      String string0 = optionKlineModel0.toString();
      assertEquals("OptionKlineModel{beginTime=null, endTime=-1, symbol='null', right='null', strike='null', expiry='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.getLong("QL,i)B0$,[I~<:=i", 424L);
      optionKlineModel0.setBeginTime(long0);
      String string0 = optionKlineModel0.toString();
      assertEquals("OptionKlineModel{beginTime=424, endTime=null, symbol='null', right='null', strike='null', expiry='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      optionKlineModel0.setBeginTime("Z[*M4|b!ayN=GbC!OF");
      assertNull(optionKlineModel0.getEndTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.getLong("Asia/Shanghai", 0L);
      optionKlineModel0.setEndTime(long0);
      Long long1 = optionKlineModel0.getEndTime();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.getLong("@*8QQ", 228L);
      optionKlineModel0.setEndTime(long0);
      Long long1 = optionKlineModel0.getEndTime();
      assertEquals(228L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.valueOf((-1L));
      optionKlineModel0.setEndTime(long0);
      Long long1 = optionKlineModel0.getEndTime();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.valueOf(0L);
      optionKlineModel0.setBeginTime(long0);
      Long long1 = optionKlineModel0.getBeginTime();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.getLong("QL,i)B0$,[I~<:=i", 424L);
      optionKlineModel0.setBeginTime(long0);
      Long long1 = optionKlineModel0.getBeginTime();
      assertEquals(424L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = Long.getLong((String) null, (-2511L));
      optionKlineModel0.setBeginTime(long0);
      Long long1 = optionKlineModel0.getBeginTime();
      assertEquals((-2511L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      optionKlineModel0.setEndTime("Asia/Shanghai", timeZoneId0);
      assertNull(optionKlineModel0.getStrike());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      TimeZoneId timeZoneId0 = TimeZoneId.NewYork;
      optionKlineModel0.setBeginTime("YxXD{0Nce", timeZoneId0);
      assertNull(optionKlineModel0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      optionKlineModel0.setEndTime(":25^:A]R|@Gm)");
      assertNull(optionKlineModel0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = optionKlineModel0.getEndTime();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = new OptionKlineModel();
      Long long0 = optionKlineModel0.getBeginTime();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionKlineModel optionKlineModel0 = null;
      try {
        optionKlineModel0 = new OptionKlineModel("`tT*V-C=z");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // option identifier format error
         //
         verifyException("com.tigerbrokers.stock.openapi.client.util.SymbolUtil", e);
      }
  }
}
