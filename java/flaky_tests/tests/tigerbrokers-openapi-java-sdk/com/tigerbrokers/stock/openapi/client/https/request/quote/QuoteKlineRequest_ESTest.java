/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:44:14 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.request.quote;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.request.quote.QuoteKlineRequest;
import com.tigerbrokers.stock.openapi.client.struct.enums.KType;
import com.tigerbrokers.stock.openapi.client.struct.enums.RightOption;
import com.tigerbrokers.stock.openapi.client.struct.enums.TimeZoneId;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuoteKlineRequest_ESTest extends QuoteKlineRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = new QuoteKlineRequest();
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withLimit(0);
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KType kType0 = KType.month;
      Long long0 = new Long(409L);
      Long long1 = new Long(3652L);
      QuoteKlineRequest quoteKlineRequest0 = QuoteKlineRequest.newRequest((List<String>) null, kType0, long0, long1);
      assertEquals("2.0", quoteKlineRequest0.getApiVersion());
      assertEquals("kline", quoteKlineRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      KType kType0 = KType.min30;
      TimeZoneId timeZoneId0 = TimeZoneId.Shanghai;
      QuoteKlineRequest quoteKlineRequest0 = QuoteKlineRequest.newRequest((List<String>) linkedList0, kType0, "", "Uo4`RwQ7F[wg!My0I:", timeZoneId0);
      quoteKlineRequest0.withPageToken("3.0");
      assertEquals("2.0", quoteKlineRequest0.getApiVersion());
      assertEquals("kline", quoteKlineRequest0.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = new QuoteKlineRequest();
      quoteKlineRequest0.withPageToken("");
      assertEquals("kline", quoteKlineRequest0.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest0.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = QuoteKlineRequest.newRequest((List<String>) null, (KType) null);
      RightOption rightOption0 = RightOption.br;
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withRight(rightOption0);
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = new QuoteKlineRequest();
      RightOption rightOption0 = RightOption.br;
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withRight(rightOption0);
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = new QuoteKlineRequest();
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withRight((RightOption) null);
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      KType kType0 = KType.month;
      QuoteKlineRequest quoteKlineRequest0 = QuoteKlineRequest.newRequest((List<String>) linkedList0, kType0, (String) null, "3.0");
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withLimit(1);
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = new QuoteKlineRequest();
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withLimit(2704);
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = new QuoteKlineRequest();
      QuoteKlineRequest quoteKlineRequest1 = quoteKlineRequest0.withLimit((-1716));
      assertEquals("kline", quoteKlineRequest1.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest1.getApiVersion());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuoteKlineRequest quoteKlineRequest0 = QuoteKlineRequest.newRequest((List<String>) null, (KType) null);
      quoteKlineRequest0.getResponseClass();
      assertEquals("kline", quoteKlineRequest0.getApiMethodName());
      assertEquals("2.0", quoteKlineRequest0.getApiVersion());
  }
}
