/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 06:25:19 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.domain.quote.item;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tigerbrokers.stock.openapi.client.https.domain.quote.item.KlinePoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KlinePoint_ESTest extends KlinePoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = new Long(1L);
      klinePoint0.setVolume(long0);
      Long long1 = klinePoint0.getVolume();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = new Long((-3841L));
      klinePoint0.setVolume(long0);
      Long long1 = klinePoint0.getVolume();
      assertEquals((-3841L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = new Long(0L);
      klinePoint0.setTime(long0);
      Long long1 = klinePoint0.getTime();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = new Long((-1179L));
      klinePoint0.setTime(long0);
      Long long1 = klinePoint0.getTime();
      assertEquals((-1179L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(0.0);
      klinePoint0.setOpen(double0);
      Double double1 = klinePoint0.getOpen();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(1010.0);
      klinePoint0.setOpen(double0);
      Double double1 = klinePoint0.getOpen();
      assertEquals(1010.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double((-2261.1658552));
      klinePoint0.setOpen(double0);
      Double double1 = klinePoint0.getOpen();
      assertEquals((-2261.1658552), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(0.0);
      klinePoint0.setLow(double0);
      Double double1 = klinePoint0.getLow();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(1010.0);
      klinePoint0.setLow(double0);
      Double double1 = klinePoint0.getLow();
      assertEquals(1010.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double((-1964.9));
      klinePoint0.setLow(double0);
      Double double1 = klinePoint0.getLow();
      assertEquals((-1964.9), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(0.0);
      klinePoint0.setHigh(double0);
      Double double1 = klinePoint0.getHigh();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(794.22099);
      klinePoint0.setHigh(double0);
      Double double1 = klinePoint0.getHigh();
      assertEquals(794.22099, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double((-1L));
      klinePoint0.setHigh(double0);
      Double double1 = klinePoint0.getHigh();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(3539.682123);
      klinePoint0.setClose(double0);
      Double double1 = klinePoint0.getClose();
      assertEquals(3539.682123, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double((-1L));
      klinePoint0.setClose(double0);
      Double double1 = klinePoint0.getClose();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = new Long(0L);
      klinePoint0.setVolume(long0);
      Long long1 = klinePoint0.getVolume();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = new Double(0.0);
      klinePoint0.setClose(double0);
      Double double1 = klinePoint0.getClose();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = klinePoint0.getClose();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = new Long(707L);
      klinePoint0.setTime(long0);
      Long long1 = klinePoint0.getTime();
      assertEquals(707L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = klinePoint0.getHigh();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      String string0 = klinePoint0.toString();
      assertEquals("KlinePoint{open=null, close=null, high=null, low=null, time=null, volume=null}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = klinePoint0.getOpen();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Double double0 = klinePoint0.getLow();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = klinePoint0.getVolume();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KlinePoint klinePoint0 = new KlinePoint();
      Long long0 = klinePoint0.getTime();
      assertNull(long0);
  }
}
