/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:56:20 GMT 2022
 */

package com.tigerbrokers.stock.openapi.client.https.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tigerbrokers.stock.openapi.client.https.domain.future.model.FutureExchangeModel;
import com.tigerbrokers.stock.openapi.client.https.validator.FutureExchangeRequestValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureExchangeRequestValidator_ESTest extends FutureExchangeRequestValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FutureExchangeRequestValidator futureExchangeRequestValidator0 = new FutureExchangeRequestValidator();
      FutureExchangeModel futureExchangeModel0 = new FutureExchangeModel("s^M3");
      try { 
        futureExchangeRequestValidator0.validate(futureExchangeModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10102:client biz param error(sec_type is incorrect)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureExchangeRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FutureExchangeRequestValidator futureExchangeRequestValidator0 = new FutureExchangeRequestValidator();
      // Undeclared exception!
      try { 
        futureExchangeRequestValidator0.validate((FutureExchangeModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureExchangeRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FutureExchangeRequestValidator futureExchangeRequestValidator0 = new FutureExchangeRequestValidator();
      FutureExchangeModel futureExchangeModel0 = new FutureExchangeModel("CASH");
      try { 
        futureExchangeRequestValidator0.validate(futureExchangeModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10102:client biz param error(sec_type is incorrect)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureExchangeRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FutureExchangeRequestValidator futureExchangeRequestValidator0 = new FutureExchangeRequestValidator();
      FutureExchangeModel futureExchangeModel0 = new FutureExchangeModel("FUT");
      futureExchangeRequestValidator0.validate(futureExchangeModel0);
      assertEquals("FUT", futureExchangeModel0.getSecType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FutureExchangeRequestValidator futureExchangeRequestValidator0 = new FutureExchangeRequestValidator();
      FutureExchangeModel futureExchangeModel0 = new FutureExchangeModel();
      try { 
        futureExchangeRequestValidator0.validate(futureExchangeModel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 10101:client biz param error(sec_type is requried)
         //
         verifyException("com.tigerbrokers.stock.openapi.client.https.validator.FutureExchangeRequestValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FutureExchangeRequestValidator futureExchangeRequestValidator0 = new FutureExchangeRequestValidator();
      FutureExchangeModel futureExchangeModel0 = new FutureExchangeModel("FOP");
      futureExchangeRequestValidator0.validate(futureExchangeModel0);
      assertNull(futureExchangeModel0.getLang());
  }
}
