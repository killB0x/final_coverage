/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 15:38:26 GMT 2022
 */

package pageunit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pageunit.Command;
import pageunit.TestHolder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestHolder_ESTest extends TestHolder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestHolder testHolder0 = null;
      try {
        testHolder0 = new TestHolder('0', "", "", '0');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant pageunit.Command.0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('N', "[X:+/m]Y+a+HR~2", "[X:+/m]Y+a+HR~2", 83);
      int int0 = testHolder0.getLineNumber();
      assertEquals("[X:+/m]Y+a+HR~2", testHolder0.getFileName());
      assertEquals(Command.N, testHolder0.getCommand());
      assertEquals("[X:+/m]Y+a+HR~2", testHolder0.getArguments());
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('F', "", "", (-1));
      int int0 = testHolder0.getLineNumber();
      assertEquals((-1), int0);
      assertEquals("", testHolder0.getFileName());
      assertEquals(Command.F, testHolder0.getCommand());
      assertEquals("", testHolder0.getArguments());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('R', (String) null, (String) null, (-112));
      String string0 = testHolder0.getFileName();
      assertEquals(Command.R, testHolder0.getCommand());
      assertNull(string0);
      assertEquals((-112), testHolder0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('R', "page~nit.VTestHoler", "page~nit.VTestHoler", 'R');
      String string0 = testHolder0.getFileName();
      assertEquals(82, testHolder0.getLineNumber());
      assertEquals("page~nit.VTestHoler", string0);
      assertEquals(Command.R, testHolder0.getCommand());
      assertEquals("page~nit.VTestHoler", testHolder0.getArguments());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('T', (String) null, (String) null, 766);
      String string0 = testHolder0.getArguments();
      assertEquals(766, testHolder0.getLineNumber());
      assertNull(string0);
      assertEquals(Command.T, testHolder0.getCommand());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('H', "", "", 0);
      String string0 = testHolder0.getArguments();
      assertEquals("", testHolder0.getFileName());
      assertEquals(0, testHolder0.getLineNumber());
      assertEquals(Command.H, testHolder0.getCommand());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('=', "I]gTlD;Y&<07B$2", "0~e_bB7(YyQ/", 38);
      assertEquals("0~e_bB7(YyQ/", testHolder0.getFileName());
      assertEquals("I]gTlD;Y&<07B$2", testHolder0.getArguments());
      assertEquals(38, testHolder0.getLineNumber());
      assertEquals(Command.SET, testHolder0.getCommand());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('<', "", "", '<');
      assertEquals(60, testHolder0.getLineNumber());
      assertEquals("", testHolder0.getFileName());
      assertEquals("", testHolder0.getArguments());
      assertEquals(Command.SOURCE, testHolder0.getCommand());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('H', "", "", 0);
      String string0 = testHolder0.getFileName();
      assertEquals("", string0);
      assertEquals(0, testHolder0.getLineNumber());
      assertEquals(Command.H, testHolder0.getCommand());
      assertEquals("", testHolder0.getArguments());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('B', "", "", 'B');
      int int0 = testHolder0.countTestCases();
      assertEquals(66, testHolder0.getLineNumber());
      assertEquals(1, int0);
      assertEquals(Command.B, testHolder0.getCommand());
      assertEquals("", testHolder0.getArguments());
      assertEquals("", testHolder0.getFileName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('H', "", "", 0);
      int int0 = testHolder0.getLineNumber();
      assertEquals(Command.H, testHolder0.getCommand());
      assertEquals(0, int0);
      assertEquals("", testHolder0.getFileName());
      assertEquals("", testHolder0.getArguments());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('B', "", "", 'B');
      String string0 = testHolder0.toString();
      assertEquals("PageTest[B  (:66)]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('B', "", "", 'B');
      Command command0 = testHolder0.getCommand();
      assertEquals(66, testHolder0.getLineNumber());
      assertEquals("", testHolder0.getArguments());
      assertEquals(Command.B, command0);
      assertEquals("", testHolder0.getFileName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestHolder testHolder0 = new TestHolder('E', "pY@!..X/QB", "pY@!..X/QB", 'E');
      String string0 = testHolder0.getArguments();
      assertEquals("pY@!..X/QB", testHolder0.getFileName());
      assertEquals(Command.E, testHolder0.getCommand());
      assertEquals("pY@!..X/QB", string0);
      assertEquals(69, testHolder0.getLineNumber());
  }
}
