/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 15:30:25 GMT 2022
 */

package pageunit.html;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JTextPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.html.HTML;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import pageunit.html.HTMLComponent;
import pageunit.html.HTMLComponentFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HTMLComponentFactory_ESTest extends HTMLComponentFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.A;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle0.addAttributes(styleContext_NamedStyle1);
      // Undeclared exception!
      try { 
        HTMLComponentFactory.create(hTML_Tag0, styleContext_NamedStyle0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.META;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLMetaImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.STRIKE;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLComponentBase", class0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.SCRIPT;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLScriptImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.TITLE;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLTitleImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.OPTION;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLOptionImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.SELECT;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLSelectImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.INPUT;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLInputImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.IMG;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLIMGImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.FORM;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLFormImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.STYLE;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLStyleImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.HTML;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.A;
      Class<?> class0 = HTMLComponentFactory.classForTagType(hTML_Tag0);
      assertEquals("class pageunit.html.HTMLAnchorImpl", class0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.META;
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, simpleAttributeSet0);
      assertEquals((short)0, hTMLComponent0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.DL;
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Style style0 = defaultStyledDocument0.addStyle("top", (Style) null);
      // Undeclared exception!
      try { 
        HTMLComponentFactory.create(hTML_Tag0, style0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // HTMLComponentFactory(dl): requested build of unknown tag
         //
         verifyException("pageunit.html.HTMLComponentFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.SCRIPT;
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle((-2120));
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, style0);
      assertFalse(hTMLComponent0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.TITLE;
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, mutableAttributeSet0);
      assertEquals("HTMLTitleImpl0", hTMLComponent0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.OPTION;
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Style style0 = defaultStyledDocument0.addStyle("pagenit.html.HTMLContainerBase", (Style) null);
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, style0);
      assertFalse(hTMLComponent0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      HTML.Tag hTML_Tag0 = HTML.Tag.SELECT;
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, mutableAttributeSet0);
      assertEquals("HTMLSelectImpl0", hTMLComponent0.getNodeName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.INPUT;
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, mutableAttributeSet0);
      assertEquals("", hTMLComponent0.getBody());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.IMG;
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, simpleAttributeSet0);
      assertEquals("HTMLIMGImpl0", hTMLComponent0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.FORM;
      // Undeclared exception!
      try { 
        HTMLComponentFactory.create(hTML_Tag0, (MutableAttributeSet) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class pageunit.html.HTMLFormImpl
         //
         verifyException("pageunit.html.HTMLComponentFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.STYLE;
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Style style0 = defaultStyledDocument0.addStyle("pagenit.html.HTMLContainerBase", (Style) null);
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, style0);
      assertFalse(hTMLComponent0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      HTML.Tag hTML_Tag0 = HTML.Tag.HTML;
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, simpleAttributeSet0);
      assertEquals("top", hTMLComponent0.getNodeName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HTML.Tag hTML_Tag0 = HTML.Tag.A;
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      HTMLComponent hTMLComponent0 = HTMLComponentFactory.create(hTML_Tag0, simpleAttributeSet0);
      assertEquals((short)0, hTMLComponent0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HTMLComponentFactory hTMLComponentFactory0 = new HTMLComponentFactory();
  }
}
