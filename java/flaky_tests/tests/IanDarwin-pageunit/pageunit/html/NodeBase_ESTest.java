/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 15:46:27 GMT 2022
 */

package pageunit.html;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.UserDataHandler;
import pageunit.html.GenericHTMLContainer;
import pageunit.html.HTMLAnchorImpl;
import pageunit.html.HTMLContainerBase;
import pageunit.html.HTMLIMGImpl;
import pageunit.html.HTMLPageImpl;
import pageunit.html.HTMLSelectImpl;
import pageunit.html.NodeBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeBase_ESTest extends NodeBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericHTMLContainer genericHTMLContainer0 = new GenericHTMLContainer("", "");
      genericHTMLContainer0.setPrefix((String) null);
      assertNull(genericHTMLContainer0.getBaseURI());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HTMLSelectImpl hTMLSelectImpl0 = new HTMLSelectImpl("Fk9?]H_");
      String string0 = hTMLSelectImpl0.getNodeName();
      assertEquals("Fk9?]H_", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("pageunit.html.HTMLStyleImpl", "pageunit.html.HTMLStyleImpl");
      hTMLAnchorImpl0.setName("");
      String string0 = hTMLAnchorImpl0.getNodeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.appendChild((Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericHTMLContainer genericHTMLContainer0 = new GenericHTMLContainer("", "");
      try { 
        genericHTMLContainer0.errorImmutable();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Immutable Tree
         //
         verifyException("pageunit.html.NodeBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      short short0 = nodeBase0.getNodeType();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericHTMLContainer genericHTMLContainer0 = new GenericHTMLContainer("", "");
      Node node0 = genericHTMLContainer0.getFirstChild();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      short short0 = nodeBase0.compareDocumentPosition((Node) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Document document0 = nodeBase0.getOwnerDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HTMLContainerBase hTMLContainerBase0 = new HTMLContainerBase("");
      hTMLContainerBase0.normalize();
      assertNull(hTMLContainerBase0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      boolean boolean0 = nodeBase0.hasChildNodes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.insertBefore((Node) null, (Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getBaseURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.removeChild(nodeBase0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Object object0 = nodeBase0.setUserData((String) null, (Object) null, (UserDataHandler) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.getPreviousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.lookupPrefix("Xktwc^RN!;% 7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getNodeValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.getNextSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      boolean boolean0 = nodeBase0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      NamedNodeMap namedNodeMap0 = nodeBase0.getAttributes();
      assertNull(namedNodeMap0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("sEpBrS?sG,+");
      hTMLPageImpl0.setTextContent("SUBMIT");
      assertFalse(hTMLPageImpl0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      NodeList nodeList0 = nodeBase0.getChildNodes();
      assertNull(nodeList0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.getParentNode();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Object object0 = nodeBase0.getFeature(")v7[?os", ")v7[?os");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.lookupNamespaceURI((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      boolean boolean0 = nodeBase0.isEqualNode((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.cloneNode(false);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HTMLIMGImpl hTMLIMGImpl0 = new HTMLIMGImpl((String) null, (String) null);
      boolean boolean0 = hTMLIMGImpl0.isDefaultNamespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("lA", "lA");
      boolean boolean0 = hTMLAnchorImpl0.isSupported("lA", "lA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.replaceChild((Node) null, (Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      nodeBase0.setNodeValue("");
      assertNull(nodeBase0.getNodeName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getNodeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getNamespaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getLocalName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Node node0 = nodeBase0.getLastChild();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      Object object0 = nodeBase0.getUserData("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      boolean boolean0 = nodeBase0.isSameNode((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NodeBase nodeBase0 = new NodeBase();
      String string0 = nodeBase0.getTextContent();
      assertNull(string0);
  }
}
