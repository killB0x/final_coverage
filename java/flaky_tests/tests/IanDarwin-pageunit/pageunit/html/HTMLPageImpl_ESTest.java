/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 15:32:38 GMT 2022
 */

package pageunit.html;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import pageunit.html.HTMLAnchor;
import pageunit.html.HTMLAnchorImpl;
import pageunit.html.HTMLForm;
import pageunit.html.HTMLPageImpl;
import pageunit.html.HTMLTitleImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HTMLPageImpl_ESTest extends HTMLPageImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("H");
      hTMLPageImpl0.HTMLVersion = null;
      String string0 = hTMLPageImpl0.getXmlVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("7]4 Qo&Gd=[+");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      
      hTMLPageImpl0.setXmlVersion("");
      String string0 = hTMLPageImpl0.getXmlVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      HTMLTitleImpl hTMLTitleImpl0 = new HTMLTitleImpl("V=qFVyKy(?`iM");
      hTMLTitleImpl0.setBody("V=qFVyKy(?`iM");
      hTMLPageImpl0.setTitle(hTMLTitleImpl0);
      hTMLPageImpl0.getTitleText();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("Ar*&V_{2HkE&)hK%");
      HTMLTitleImpl hTMLTitleImpl0 = new HTMLTitleImpl("Ar*&V_{2HkE&)hK%");
      hTMLPageImpl0.setTitle(hTMLTitleImpl0);
      hTMLTitleImpl0.appendBody("Ar*&V_{2HkE&)hK%");
      hTMLPageImpl0.getTitle();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4]d");
      hTMLPageImpl0.addForm((HTMLForm) null);
      hTMLPageImpl0.getForms();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.setContent("");
      int int0 = hTMLPageImpl0.getContentLength();
      assertEquals(0, int0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("kTSwzL/@~:@8K=A.X");
      hTMLPageImpl0.setContent("do<4%sFr)VOps|]=");
      int int0 = hTMLPageImpl0.getContentLength();
      assertEquals(16, int0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl(":&<5HzsLZo:J]OA,Nh/");
      hTMLPageImpl0.setContent(":&<5HzsLZo:J]OA,Nh/");
      String string0 = hTMLPageImpl0.getContent();
      assertEquals(":&<5HzsLZo:J]OA,Nh/", string0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("<HTML>");
      hTMLPageImpl0.setContent("");
      String string0 = hTMLPageImpl0.getContent();
      assertEquals("", string0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("RENAME");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("RENAME", "RENAME");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      hTMLPageImpl0.getAnchors();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("*O'");
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getFormByURL("*O'");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *O'
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("eQ> W}s~ (");
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getAnchorByURL("eQ> W}s~ (");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // eQ> W}s~ (
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl((String) null);
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getAnchorByURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("wqJTBmV^i&lF[T+rmm");
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getAnchorByText("wqJTBmV^i&lF[T+rmm");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // wqJTBmV^i&lF[T+rmm
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl((String) null);
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getAnchorByText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("U(4Zw");
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getAnchorByName("U(4Zw");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 5
         // U(4Zw
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl((String) null);
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getAnchorByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl((String) null, "");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      HTMLAnchor hTMLAnchor0 = hTMLPageImpl0.getAnchorByName("',O< >V");
      assertNull(hTMLAnchor0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("2$Q");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("", "77.Qro");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      HTMLAnchor hTMLAnchor0 = hTMLPageImpl0.getAnchorByURL("#document");
      assertNull(hTMLAnchor0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.getTitle();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("Ar*&V_{2HkE&)hK%");
      HTMLTitleImpl hTMLTitleImpl0 = new HTMLTitleImpl("Ar*&V_{2HkE&)hK%");
      hTMLPageImpl0.setTitle(hTMLTitleImpl0);
      String string0 = hTMLPageImpl0.getTitle();
      assertNotNull(string0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("H");
      hTMLPageImpl0.getTitleText();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("Ted");
      hTMLPageImpl0.getFormByURL("Ted");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("Ted");
      hTMLPageImpl0.addForm((HTMLForm) null);
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getFormByName("Ted");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pageunit.html.HTMLPageImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      hTMLPageImpl0.getFormByName("T4d");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4-d");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("T4-d", "T4-d");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      HTMLAnchor hTMLAnchor0 = hTMLPageImpl0.getAnchorByName("T4-d");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertNotNull(hTMLAnchor0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("R_ENAME");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("R_ENAME", "R_ENAME");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      HTMLAnchor hTMLAnchor0 = hTMLPageImpl0.getAnchorByText("R_ENAME");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertNull(hTMLAnchor0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4-d");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("T4-d", "T4-d");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      HTMLAnchor hTMLAnchor0 = hTMLPageImpl0.getAnchorByURL("T4-d");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertNotNull(hTMLAnchor0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.getNodeValue();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      boolean boolean0 = hTMLPageImpl0.getXmlStandalone();
      assertFalse(boolean0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      hTMLPageImpl0.addForm((HTMLForm) null);
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getFormByURL("T4d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pageunit.html.HTMLPageImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      hTMLPageImpl0.getAnchors();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      // Undeclared exception!
      try { 
        hTMLPageImpl0.getContentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("pageunit.html.HTMLPageImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("kTSwzL/@~:@8K=A.X");
      hTMLPageImpl0.setDocumentURI("");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("U(4Zw");
      hTMLPageImpl0.createCDATASection("U(4Zw");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("RENAME");
      // Undeclared exception!
      try { 
        hTMLPageImpl0.setStrictErrorChecking(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You can't be serious
         //
         verifyException("pageunit.html.HTMLPageImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("4_h|}C");
      hTMLPageImpl0.createTextNode("4_h|}C");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      String string0 = hTMLPageImpl0.getNodeName();
      assertEquals("#document", string0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.createProcessingInstruction("", "");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("kTSwzL/@~:@8K=A.X");
      hTMLPageImpl0.createElement("#document");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("<HTML>");
      String string0 = hTMLPageImpl0.getContent();
      assertNull(string0);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      hTMLPageImpl0.getAttributes();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      HTMLTitleImpl hTMLTitleImpl0 = new HTMLTitleImpl("V=qFVyKy(?`iM");
      try { 
        hTMLPageImpl0.adoptNode(hTMLTitleImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Immutable Tree
         //
         verifyException("pageunit.html.NodeBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      String string0 = hTMLPageImpl0.getInputEncoding();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.getDomConfig();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("Ar*&V_{2HkE&)hK%");
      hTMLPageImpl0.createComment("XXlaYH");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.getDoctype();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("7]4 Qo&Gd=[+");
      hTMLPageImpl0.getElementById("7]4 Qo&Gd=[+");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      hTMLPageImpl0.getImplementation();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      try { 
        hTMLPageImpl0.renameNode((Node) null, "", "");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Immutable Tree
         //
         verifyException("pageunit.html.NodeBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4]d");
      hTMLPageImpl0.getForms();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      hTMLPageImpl0.createAttributeNS("", "");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("<HTML>");
      hTMLPageImpl0.createDocumentFragment();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4]d");
      boolean boolean0 = hTMLPageImpl0.getStrictErrorChecking();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("9s`q>");
      hTMLPageImpl0.createElementNS("9s`q>", "9s`q>");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("7]4 Qo&Gd=[+");
      hTMLPageImpl0.createAttribute("");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("H");
      hTMLPageImpl0.getDocumentURI();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("kTSwzL/@~:@8K=A.X");
      hTMLPageImpl0.getXmlEncoding();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("");
      HTMLTitleImpl hTMLTitleImpl0 = new HTMLTitleImpl("");
      try { 
        hTMLPageImpl0.importNode(hTMLTitleImpl0, false);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Immutable Tree
         //
         verifyException("pageunit.html.NodeBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("#document");
      hTMLPageImpl0.normalizeDocument();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("H");
      String string0 = hTMLPageImpl0.getXmlVersion();
      assertEquals("<HTML>", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("7]4 Qo&Gd=[+");
      hTMLPageImpl0.createEntityReference((String) null);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("RENAME");
      hTMLPageImpl0.setXmlStandalone(true);
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4]d");
      hTMLPageImpl0.getElementsByTagNameNS("GET", "GET");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      hTMLPageImpl0.getElementsByTagName("V=qFVyKy(?`iM");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("7]4 Qo&Gd=[+");
      hTMLPageImpl0.getDocumentElement();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("V=qFVyKy(?`iM");
      HTMLTitleImpl hTMLTitleImpl0 = new HTMLTitleImpl("V=qFVyKy(?`iM");
      hTMLPageImpl0.setTitle(hTMLTitleImpl0);
      String string0 = hTMLPageImpl0.getTitleText();
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HTMLPageImpl hTMLPageImpl0 = new HTMLPageImpl("T4d");
      HTMLAnchorImpl hTMLAnchorImpl0 = new HTMLAnchorImpl("T4d", "T4d");
      hTMLPageImpl0.addAnchor(hTMLAnchorImpl0);
      HTMLAnchor hTMLAnchor0 = hTMLPageImpl0.getAnchorByText("");
      assertEquals("<HTML>", hTMLPageImpl0.getXmlVersion());
      assertNotNull(hTMLAnchor0);
  }
}
