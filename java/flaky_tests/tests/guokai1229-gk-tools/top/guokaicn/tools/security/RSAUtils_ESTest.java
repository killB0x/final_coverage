/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:15:39 GMT 2022
 */

package top.guokaicn.tools.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import top.guokaicn.tools.security.RSAUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RSAUtils_ESTest extends RSAUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      assertNotNull(keyPair0);
      
      String string0 = RSAUtils.getPrivateKey(keyPair0);
      assertNotNull(string0);
      
      try { 
        RSAUtils.privateDecryptBase64(string0, string0);
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RSAUtils rSAUtils0 = new RSAUtils();
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      String string0 = RSAUtils.getPrivateKey(keyPair0);
      PrivateKey privateKey0 = RSAUtils.string2PrivateKey(string0);
      try { 
        RSAUtils.privateDecrypt((byte[]) null, privateKey0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null input buffer
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      String string0 = RSAUtils.getPrivateKey(keyPair0);
      PrivateKey privateKey0 = RSAUtils.string2PrivateKey(string0);
      try { 
        RSAUtils.privateDecryptBase64(string0, privateKey0);
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      String string0 = RSAUtils.getPublicKey(keyPair0);
      assertEquals("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmvDNw0Eflv1xkMWLYtaapcHyMRizKoxCoZMm3q9JVVmCHgk4cf58yJa58AoOLnNv7MUJwrdcjW5mPBJG7MtLbfx6vDFGLi7lG/kuciBJzblZRvTyuivjES6BMwkQ7rCeC9kXsq0grPFWkc9SUXUqOSFwJLM2KsCdqBOw2AJllOyNq+WxaUcIHWPS5KbmG02eJDa6eDKuK4/SC4qTDevlJpDIPFh/fZr20phHSImbmaydc/78DQnb9HOprewvhmTwSfVGDoGdoFAvBwujj1Xvle9qfWNHFxw7cfwZ4lbA9uqYxvgFig3ysoxaMPlAPhCkIGFf29E6MDWx1MLSoUdMXQIDAQAB", string0);
      
      RSAUtils.publicEncryptBase64("", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmKwAuKE5nOKx2nVQNhpqrwCrmmTt8i1MQVVKpuqqXrVmvXhyUXZkasR9AW8oKv6XCoflntjiubVZaEG2gIEW5xNnUDsI0DwnQu4QSwwEG9M3SYVa0ygscQNagreFAY4gJum8QP5RS78g+qxVuqZyzmOXMbdSJ+tqp0fNHRDoT/cZixCEG0nW9RJ+z5zKidjdzd/bnfWf5McmDqHLhPagjeUGFRtm8KRT4sCpCU1XcnQ27otJK0aYZkEKkGUkdilzhRO4M2pazogpgTUZW47m3lJLykwzRm9yhfHrFXxl0+ktzkDPIGzo3ZA0LKRBJUBgUaydieZxGl08CzRwxyo5nQIDAQAB");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        RSAUtils.privateDecryptBase64((String) null, (PrivateKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        RSAUtils.privateDecryptBase64("|'s&\"sNg$27", (PrivateKey) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 7c
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        RSAUtils.getPublicKey((KeyPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.security.RSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPrivateKey(keyPair0);
      String string0 = RSAUtils.getPrivateKey(keyPair0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)113;
      PrivateKey privateKey0 = RSAUtils.string2PrivateKey(string0);
      try { 
        RSAUtils.privateDecrypt(byteArray0, privateKey0);
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      PrivateKey privateKey0 = null;
      try { 
        RSAUtils.privateDecryptBase64("", (PrivateKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        RSAUtils.privateDecryptBase64("", (PrivateKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      String string0 = RSAUtils.getPrivateKey(keyPair0);
      RSAUtils.getPrivateKey(keyPair0);
      try { 
        RSAUtils.privateDecryptBase64("OiyI$z^ZIqw", string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 24
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPublicKey(keyPair0);
      RSAUtils.getPublicKey(keyPair0);
      RSAUtils.getPrivateKey(keyPair0);
      PublicKey publicKey0 = RSAUtils.string2PublicKey("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqVYlmZeo5ZUTcXgNhKcuiI1rnaoCCuCztDcRBXasBWH2OVl+4cUEXj70i962MxCb16dC7lKWG/v0ZLwqPffyAzs3QUohjsjWYu0AWeplQF9s6jrkk8NkgkU10d2FAhnkaXN2N3K2MCDSfFD0wUq2L2FQ4UV3oY23RcuupO19TNDuCLTOAXtD39+8KC5ZnJu2xvNEo2NpVG8w/5WJmD8shkAWNBkDGinCK0Sq3Bx9LpXnpfQe8/uVYIcH+vI8LNI5qz4kTQUV/38ikp/kydEqGTfHiK32cUdvdLTwivzdO5a/QITcDv2P+rsv4zDbhB8DK4gfyGATHCJUVSTltQRXIQIDAQAB");
      try { 
        RSAUtils.publicEncryptBase64("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqVYlmZeo5ZUTcXgNhKcuiI1rnaoCCuCztDcRBXasBWH2OVl+4cUEXj70i962MxCb16dC7lKWG/v0ZLwqPffyAzs3QUohjsjWYu0AWeplQF9s6jrkk8NkgkU10d2FAhnkaXN2N3K2MCDSfFD0wUq2L2FQ4UV3oY23RcuupO19TNDuCLTOAXtD39+8KC5ZnJu2xvNEo2NpVG8w/5WJmD8shkAWNBkDGinCK0Sq3Bx9LpXnpfQe8/uVYIcH+vI8LNI5qz4kTQUV/38ikp/kydEqGTfHiK32cUdvdLTwivzdO5a/QITcDv2P+rsv4zDbhB8DK4gfyGATHCJUVSTltQRXIQIDAQAB", publicKey0);
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPrivateKey(keyPair0);
      String string0 = RSAUtils.getPrivateKey(keyPair0);
      byte[] byteArray0 = null;
      RSAUtils.string2PrivateKey(string0);
      try { 
        RSAUtils.privateDecrypt((byte[]) null, (PrivateKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RSAUtils rSAUtils0 = new RSAUtils();
      // Undeclared exception!
      try { 
        RSAUtils.getPrivateKey((KeyPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.security.RSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        RSAUtils.publicEncryptBase64((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPublicKey(keyPair0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      PublicKey publicKey0 = RSAUtils.string2PublicKey("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAk7R5E2vtglzHq5C0nvb3FeMKRwK954RWGNms0jiPOz7Uv1MCIj5G3N5APj5cYa3wAN9fmK2nZ5eXhHyj4IM/bjP7wUVjszJvUTNLkkp5QK5nqUvJZxOil/KiN3veiDtxbkZAKuWoo6luxAkaQOjiK0RX0WSFWrH1gASof9dC8gXf4GVkJl5hde6wk0PDL/bL3gqIW68IGO+k4KZBm8wWnqNu1RprKMSwqGHecXYZKOR6oQLk1a9PFWBGCjy+l58xQL0zNmPDItXfa2LjehwcBUS42cv0kBGHgIpyh9946nRDOMznn5dTcHgVofjnu16dF8LfFRCU8kJOlfu/VGPRZwIDAQAB");
      RSAUtils.publicEncrypt(byteArray0, publicKey0);
      RSAUtils rSAUtils0 = new RSAUtils();
      try { 
        RSAUtils.string2PrivateKey("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAk7R5E2vtglzHq5C0nvb3FeMKRwK954RWGNms0jiPOz7Uv1MCIj5G3N5APj5cYa3wAN9fmK2nZ5eXhHyj4IM/bjP7wUVjszJvUTNLkkp5QK5nqUvJZxOil/KiN3veiDtxbkZAKuWoo6luxAkaQOjiK0RX0WSFWrH1gASof9dC8gXf4GVkJl5hde6wk0PDL/bL3gqIW68IGO+k4KZBm8wWnqNu1RprKMSwqGHecXYZKOR6oQLk1a9PFWBGCjy+l58xQL0zNmPDItXfa2LjehwcBUS42cv0kBGHgIpyh9946nRDOMznn5dTcHgVofjnu16dF8LfFRCU8kJOlfu/VGPRZwIDAQAB");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        RSAUtils.publicEncryptBase64("", "\"})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 22
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        RSAUtils.privateDecryptBase64((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPrivateKey(keyPair0);
      RSAUtils.getPrivateKey(keyPair0);
      try { 
        RSAUtils.privateDecrypt((byte[]) null, (PrivateKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        RSAUtils.privateDecrypt((byte[]) null, (PrivateKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RSAUtils rSAUtils0 = new RSAUtils();
      PublicKey publicKey0 = null;
      try { 
        RSAUtils.publicEncrypt((byte[]) null, (PublicKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)50;
      try { 
        RSAUtils.publicEncrypt(byteArray0, (PublicKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RSAUtils.getKeyPair();
      String string0 = "";
      PublicKey publicKey0 = null;
      try { 
        RSAUtils.publicEncryptBase64("", (PublicKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPublicKey(keyPair0);
      try { 
        RSAUtils.publicEncryptBase64("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwh/DBPX9gtZ2lteMpvsuMinpRYrCKsDxkdLWno86Oh6BmPjZNRwfCv1exfGjFS4yz7QF2j8/dtAvc5IPXRorJJ/hDbf2zVWXBQcUrO6nO0joUWXSXSgk05mWLlrwabapkKx+H7xD4JhdtL3gJopl+mk4RdOKiVTBL3AJGnFUeWl1OmgmaleeEN5wW64/MO20HCNjuLvXmqw6VSkaVwfptglNH2Otcvc4fjs8+ZWBayQx0ybvPkqSMDZourfWWDApHzvY90pHxBXb5EKGpa0WJk2ofv/clui6wjM3GiKvDWLai5h2DJD11JByO93i21KZ8YFgY85fi2N5REYhq88jTwIDAQAB", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwh/DBPX9gtZ2lteMpvsuMinpRYrCKsDxkdLWno86Oh6BmPjZNRwfCv1exfGjFS4yz7QF2j8/dtAvc5IPXRorJJ/hDbf2zVWXBQcUrO6nO0joUWXSXSgk05mWLlrwabapkKx+H7xD4JhdtL3gJopl+mk4RdOKiVTBL3AJGnFUeWl1OmgmaleeEN5wW64/MO20HCNjuLvXmqw6VSkaVwfptglNH2Otcvc4fjs8+ZWBayQx0ybvPkqSMDZourfWWDApHzvY90pHxBXb5EKGpa0WJk2ofv/clui6wjM3GiKvDWLai5h2DJD11JByO93i21KZ8YFgY85fi2N5REYhq88jTwIDAQAB");
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KeyPair keyPair0 = RSAUtils.getKeyPair();
      RSAUtils.getPublicKey(keyPair0);
      try { 
        RSAUtils.publicEncryptBase64("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAi2Mpoe44/vZlLRUF9EFyJsKRnusNu6so9y6latVgaobIyxdPIDHhuz6/vqtDiswuoc2TXF4rHSFsG4WVylrcREB77q3XDwBq1J8JNOnzLiMVa1SE27jOzn89ggc+V4mU0Pn7yr7xzs6Zx96hHI4weRG8K3uWRZ/m1JWDf7rs0ogsEMlJ+2E4eZB6YW7rn0h+MXd/RvdsluOZ98Uc3kYRQ/VEJV+rTQEzLJcd9Lcz+3DgD2vdzzSThkTNpbjqXT2QkiNB02irgcbVL/WeR1qfHYYakR48uY+wl10nushrFqF3+mEzMfxAGPOZUDNF8ayCxm7rkhuCgsHbxJdbeUSb/wIDAQAB", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAi2Mpoe44/vZlLRUF9EFyJsKRnusNu6so9y6latVgaobIyxdPIDHhuz6/vqtDiswuoc2TXF4rHSFsG4WVylrcREB77q3XDwBq1J8JNOnzLiMVa1SE27jOzn89ggc+V4mU0Pn7yr7xzs6Zx96hHI4weRG8K3uWRZ/m1JWDf7rs0ogsEMlJ+2E4eZB6YW7rn0h+MXd/RvdsluOZ98Uc3kYRQ/VEJV+rTQEzLJcd9Lcz+3DgD2vdzzSThkTNpbjqXT2QkiNB02irgcbVL/WeR1qfHYYakR48uY+wl10nushrFqF3+mEzMfxAGPOZUDNF8ayCxm7rkhuCgsHbxJdbeUSb/wIDAQAB");
        fail("Expecting exception: IllegalBlockSizeException");
      
      } catch(IllegalBlockSizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        RSAUtils.publicEncryptBase64("", (PublicKey) null);
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
         //
         // No installed provider supports this key: (null)
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RSAUtils.getKeyPair();
      try { 
        RSAUtils.privateDecryptBase64("", "");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        RSAUtils.string2PrivateKey("]^_@7+yMbo.dT=zEW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 5d
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "*L%zP`SH";
      try { 
        RSAUtils.privateDecryptBase64("D>l", "*L%zP`SH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 2a
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = null;
      try { 
        RSAUtils.string2PublicKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        RSAUtils.privateDecryptBase64("", "");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      try { 
        RSAUtils.privateDecryptBase64("/", "/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      try { 
        RSAUtils.string2PrivateKey("");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      try { 
        RSAUtils.string2PrivateKey("");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      try { 
        RSAUtils.string2PrivateKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        RSAUtils.string2PublicKey("RSA");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RSAUtils rSAUtils0 = new RSAUtils();
      String string0 = "";
      try { 
        RSAUtils.string2PublicKey("");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        RSAUtils.publicEncryptBase64("", "");
        fail("Expecting exception: InvalidKeySpecException");
      
      } catch(InvalidKeySpecException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        RSAUtils.publicEncryptBase64("/", "/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      try { 
        RSAUtils.string2PublicKey("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }
}
