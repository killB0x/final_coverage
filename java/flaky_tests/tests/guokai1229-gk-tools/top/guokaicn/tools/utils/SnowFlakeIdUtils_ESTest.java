/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:01:50 GMT 2022
 */

package top.guokaicn.tools.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import top.guokaicn.tools.utils.SnowFlakeIdUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnowFlakeIdUtils_ESTest extends SnowFlakeIdUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SnowFlakeIdUtils snowFlakeIdUtils0 = new SnowFlakeIdUtils(17L, 1L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1480166465631L);
      SnowFlakeIdUtils snowFlakeIdUtils0 = new SnowFlakeIdUtils();
      long long0 = snowFlakeIdUtils0.nextId();
      assertEquals(4190208L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-917L));
      SnowFlakeIdUtils snowFlakeIdUtils0 = new SnowFlakeIdUtils();
      // Undeclared exception!
      try { 
        snowFlakeIdUtils0.nextId();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Clock moved backwards.  Refusing to generate id
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(1480166465631L);
      long long0 = SnowFlakeIdUtils.uniqueLong();
      assertEquals(4190208L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SnowFlakeIdUtils snowFlakeIdUtils0 = null;
      try {
        snowFlakeIdUtils0 = new SnowFlakeIdUtils(0L, (-1639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // machineId can't be greater than MAX_MACHINE_NUM or less than 0
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SnowFlakeIdUtils snowFlakeIdUtils0 = null;
      try {
        snowFlakeIdUtils0 = new SnowFlakeIdUtils(0L, 1839L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // machineId can't be greater than MAX_MACHINE_NUM or less than 0
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SnowFlakeIdUtils snowFlakeIdUtils0 = null;
      try {
        snowFlakeIdUtils0 = new SnowFlakeIdUtils((-733L), (-733L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SnowFlakeIdUtils snowFlakeIdUtils0 = null;
      try {
        snowFlakeIdUtils0 = new SnowFlakeIdUtils(2205L, 2205L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SnowFlakeIdUtils.uniqueLongStr();
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Clock moved backwards.  Refusing to generate id
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SnowFlakeIdUtils snowFlakeIdUtils0 = new SnowFlakeIdUtils();
      long long0 = snowFlakeIdUtils0.nextId();
      assertEquals((-368080309180174336L), long0);
      
      long long1 = snowFlakeIdUtils0.nextId();
      assertEquals((-368080309180174335L), long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SnowFlakeIdUtils.uniqueLongHex();
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Clock moved backwards.  Refusing to generate id
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SnowFlakeIdUtils.uniqueLong();
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Clock moved backwards.  Refusing to generate id
         //
         verifyException("top.guokaicn.tools.utils.SnowFlakeIdUtils", e);
      }
  }
}
