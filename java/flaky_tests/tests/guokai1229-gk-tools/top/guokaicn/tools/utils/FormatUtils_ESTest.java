/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 21:56:57 GMT 2022
 */

package top.guokaicn.tools.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import top.guokaicn.tools.utils.FormatUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      boolean boolean0 = FormatUtils.isInt(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      boolean boolean0 = FormatUtils.isFloat(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Character character0 = Character.valueOf('w');
      List<String> list0 = FormatUtils.stringToList("", character0);
      String string0 = FormatUtils.listToString((Collection<String>) list0, character0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      List<String> list0 = FormatUtils.stringToList("", character0);
      String string0 = FormatUtils.listToString((Collection<String>) list0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = FormatUtils.getFormatNumber(0.0, "`ocCKtRHcCcrdP%P4/");
      assertEquals("0`ocCKtRHcCcrdP%P4/", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = FormatUtils.formatString((String) null, (Map) hashMap0, "", "", '2');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = FormatUtils.formatString("", (Map) hashMap0, "top.guokaicn.tools.utils.FormatUtils", "hVk1s", 'W');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = FormatUtils.formatString((String) null, (Map) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toLong("", (-1402L));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toInt((String) null, (-2040109463));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Character character0 = Character.valueOf('{');
      // Undeclared exception!
      try { 
        FormatUtils.stringToList("v9:-+otBU}+<QEJ", character0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.stringToList("lS&D4qGv>gkrBD~", (Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.stringToList((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FormatUtils.listToString((Collection<String>) linkedList0, (Character) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start 0, end -1, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.listToString((Collection<String>) null, (Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        FormatUtils.listToString((Collection<String>) linkedList0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start 0, end -1, length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.listToString((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.getFormatNumber(0L, "top.guokaicn.tools.utils.FormatUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"#top.guokaicn.tools.utils.FormatUtils\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        FormatUtils.formatString("", (Map) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = FormatUtils.formatString("YrNWwCZD", (Map) null, "YrNWwCZD", "YrNWwCZD", '.');
      assertEquals("YrNWwCZD", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<String> list0 = FormatUtils.stringToList("(rQ0AR__7csp<%\",");
      Character character0 = Character.valueOf('T');
      String string0 = FormatUtils.listToString((Collection<String>) list0, character0);
      assertEquals("(rQ0AR__7csp<%\"", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toFloat("", 0.0F);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toDouble("v", 582.92861);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = FormatUtils.formatString("?j+j", (Map) null);
      assertEquals("?j+j", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      boolean boolean0 = FormatUtils.isFloat(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-1573";
      boolean boolean0 = FormatUtils.isFloat(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FormatUtils.isFloat(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = FormatUtils.isFloat(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FormatUtils.isFloat((String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "55";
      boolean boolean0 = FormatUtils.isDouble(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = FormatUtils.isDouble(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#";
      stringArray0[1] = "#";
      boolean boolean0 = FormatUtils.isDouble(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FormatUtils.isDouble(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = FormatUtils.isDouble(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FormatUtils.isDouble((String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "55";
      boolean boolean0 = FormatUtils.isLong(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      boolean boolean0 = FormatUtils.isLong(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nZgr";
      stringArray0[1] = "ox^";
      stringArray0[2] = "ox^";
      stringArray0[3] = "nZgr";
      stringArray0[4] = "nZgr";
      stringArray0[5] = "ox^";
      stringArray0[6] = "<0cYb[/";
      boolean boolean0 = FormatUtils.isLong(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FormatUtils.isLong(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = FormatUtils.isLong(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = FormatUtils.isLong((String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = FormatUtils.isInt(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-1573";
      boolean boolean0 = FormatUtils.isInt(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FormatUtils.isInt(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = FormatUtils.isInt(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FormatUtils.isInt((String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toDouble("#");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toBoolean("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/BooleanUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FormatUtils formatUtils0 = new FormatUtils();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(formatUtils0, object0);
      // Undeclared exception!
      try { 
        FormatUtils.formatString("", (Map) hashMap0, "|U", "", 'F');
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      List<String> list0 = FormatUtils.stringToList("#");
      String string0 = FormatUtils.listToString((Collection<String>) list0);
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.getFormatNumber(0.0, "top.guokaicn.tools.utils.FormatUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"#top.guokaicn.tools.utils.FormatUtils\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = FormatUtils.getFormatNumber((-1573L), "");
      assertEquals("-1573", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toInt("t\r<f5Xq");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toFloat("Ci]tVE/@;");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = FormatUtils.formatString("", (Map) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.toLong("v");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/math/NumberUtils
         //
         verifyException("top.guokaicn.tools.utils.FormatUtils", e);
      }
  }
}
