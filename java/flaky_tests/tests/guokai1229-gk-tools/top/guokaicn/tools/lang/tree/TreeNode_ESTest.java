/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:14:00 GMT 2022
 */

package top.guokaicn.tools.lang.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import top.guokaicn.tools.lang.tree.Tree;
import top.guokaicn.tools.lang.tree.TreeNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeNode_ESTest extends TreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Tree<Integer> tree0 = new Tree<Integer>();
      Tree<Object> tree1 = new Tree<Object>();
      Integer integer0 = new Integer((-1));
      tree1.setSort(integer0);
      int int0 = tree0.compareTo((TreeNode) tree1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Tree<Object> tree0 = new Tree<Object>();
      Integer integer0 = new Integer(3140);
      tree0.setSort(integer0);
      Tree<Integer> tree1 = new Tree<Integer>();
      int int0 = tree1.compareTo((TreeNode) tree0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Tree<Object> tree0 = new Tree<Object>();
      // Undeclared exception!
      try { 
        tree0.compareTo((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.lang.tree.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Tree<Integer> tree0 = new Tree<Integer>();
      int int0 = tree0.compareTo((TreeNode) tree0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Tree<Integer> tree0 = new Tree<Integer>();
      Integer integer0 = new Integer(1232);
      tree0.setSort(integer0);
      int int0 = tree0.compareTo((TreeNode) tree0);
      assertEquals(0, int0);
  }
}
