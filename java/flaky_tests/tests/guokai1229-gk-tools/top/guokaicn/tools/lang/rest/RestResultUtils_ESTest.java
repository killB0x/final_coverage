/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:14:48 GMT 2022
 */

package top.guokaicn.tools.lang.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import top.guokaicn.tools.lang.rest.RestResult;
import top.guokaicn.tools.lang.rest.RestResultUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RestResultUtils_ESTest extends RestResultUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RestResult<String> restResult0 = RestResultUtils.ok("top.guokaicn.tools.lang.rest.RestResult", "");
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      RestResult<Object> restResult0 = RestResultUtils.ok("", (Object) "12F' r(>:]*#P");
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RestResult<Object> restResult0 = RestResultUtils.ok("/${mY");
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      RestResult<String> restResult0 = RestResultUtils.ok("");
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.error();
      System.setCurrentTimeMillis(0L);
      RestResult<Object> restResult1 = RestResultUtils.ok((Object) restResult0);
      assertEquals(200, (int)restResult1.getCode());
      assertEquals(500, (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-405));
      RestResult<String> restResult0 = RestResultUtils.ok("top.guokaicn.tools.lang.rest.RestResultAccessException");
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      RestResult<Object> restResult0 = RestResultUtils.ok(0, "O&wW0", (Object) "top.guokaicn.tools.lang.rest.RestResult");
      assertEquals(0, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-405));
      RestResult<String> restResult0 = RestResultUtils.ok(0, "\u9519\u8BEF", "top.guokaicn.tools.lang.rest.RestResultAccessException");
      assertEquals(0, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      RestResult<Object> restResult0 = RestResultUtils.ok((-1687), "O&wW0");
      assertEquals((-1687), (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      RestResult<Object> restResult0 = RestResultUtils.ok((-448), "top.guokaicn.tools.lang.rest.RestResultAccessException");
      assertEquals((-448), (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RestResult<String> restResult0 = RestResultUtils.ok();
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      RestResult<Object> restResult0 = RestResultUtils.ok();
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestResult<String> restResult0 = RestResultUtils.error();
      RestResult<Object> restResult1 = RestResultUtils.ok((-935), "WeRL_M*EG?B?");
      restResult1.setData(restResult0);
      RestResult restResult2 = (RestResult)RestResultUtils.getData(restResult1);
      assertEquals(500, (int)restResult2.getCode());
      assertFalse(restResult2.getSuccess());
      assertEquals((-935), (int)restResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RestResult<String> restResult0 = new RestResult<String>();
      RestResult<Object> restResult1 = RestResultUtils.error("YegT4Ww[y~$SDP>", (Object) restResult0);
      assertEquals(500, (int)restResult1.getCode());
      assertFalse(restResult1.getSuccess());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      RestResult<String> restResult0 = RestResultUtils.error("result is null , access is fail!", "^[|{AG}^");
      assertFalse(restResult0.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((byte)0);
      RestResult<String> restResult0 = RestResultUtils.error("");
      assertEquals(500, (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-2146L));
      RestResult<String> restResult0 = RestResultUtils.error("`hlF*?");
      assertFalse(restResult0.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      RestResult<String> restResult0 = RestResultUtils.error("top.guokaicn.tools.lang.rest.RestResult");
      assertFalse(restResult0.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RestResult<String> restResult0 = RestResultUtils.ok("uh", "access is not success");
      System.setCurrentTimeMillis((-1L));
      RestResult<RestResult<String>> restResult1 = RestResultUtils.error(restResult0);
      assertFalse(restResult1.getSuccess());
      assertEquals(200, (int)restResult0.getCode());
      assertEquals(500, (int)restResult1.getCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException(mockThrowable0);
      RestResult<String> restResult0 = RestResultUtils.error((Exception) mockException0);
      assertFalse(restResult0.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockException mockException0 = new MockException();
      RestResult<String> restResult0 = RestResultUtils.error((Exception) mockException0);
      // Undeclared exception!
      try { 
        RestResultUtils.getData(restResult0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // access is not success
         //
         verifyException("top.guokaicn.tools.lang.rest.RestResultUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-405));
      MockThrowable mockThrowable0 = new MockThrowable("f:");
      MockException mockException0 = new MockException("f:", mockThrowable0);
      RestResult<String> restResult0 = RestResultUtils.error((Exception) mockException0);
      assertFalse(restResult0.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RestResult<Object> restResult0 = RestResultUtils.error(1, "/${mY", (Object) null);
      assertFalse(restResult0.getSuccess());
      assertEquals(1, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RestResult<Object> restResult0 = RestResultUtils.error((-3765), (String) null);
      assertFalse(restResult0.getSuccess());
      assertEquals((-3765), (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-2117L));
      RestResult<Object> restResult0 = RestResultUtils.error((int)  (-91), "top.guokaicn.tools.lang.rest.RestResultUtils$CODE");
      assertEquals((-91), (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      RestResult<Object> restResult0 = RestResultUtils.error();
      assertEquals(500, (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-405));
      RestResult<String> restResult0 = RestResultUtils.error();
      assertEquals(500, (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        RestResultUtils.getData((RestResult<RestResult<Object>>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // result is null , access is fail!
         //
         verifyException("top.guokaicn.tools.lang.rest.RestResultUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RestResult<Object> restResult0 = new RestResult<Object>();
      // Undeclared exception!
      try { 
        RestResultUtils.getData(restResult0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.lang.rest.RestResultUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.error(1, "/${mY", (Object) null);
      assertFalse(restResult0.getSuccess());
      assertEquals(1, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.ok((-405), "f:");
      System.setCurrentTimeMillis((-405));
      RestResult<Object> restResult1 = RestResultUtils.error(0, "", (Object) restResult0);
      assertEquals(0, (int)restResult1.getCode());
      assertEquals((-405), (int)restResult0.getCode());
      assertFalse(restResult1.getSuccess());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RestResult<String> restResult0 = RestResultUtils.ok(0, "\u9519\u8BEF", "top.guokaicn.tools.lang.rest.RestResultAccessException");
      assertEquals(0, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.error((-3765), (String) null);
      assertEquals((-3765), (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.error("4k", (Object) "4k");
      assertEquals(500, (int)restResult0.getCode());
      assertFalse(restResult0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        RestResultUtils.error((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("top.guokaicn.tools.lang.rest.RestResultUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RestResultUtils restResultUtils0 = new RestResultUtils();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.ok((Object) "eEhbE;M;pMO/");
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.ok();
      assertTrue(restResult0.getSuccess());
      
      RestResultUtils.getData(restResult0);
      assertEquals(200, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.error();
      RestResult<Object> restResult1 = RestResultUtils.error((Object) restResult0);
      assertFalse(restResult1.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RestResult<RestResult<Object>> restResult0 = RestResultUtils.error("}AT0qJH,06sL:u");
      assertFalse(restResult0.getSuccess());
      assertEquals(500, (int)restResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RestResult<Object> restResult0 = RestResultUtils.ok("mT*UVkl@`");
      assertEquals(200, (int)restResult0.getCode());
      assertTrue(restResult0.getSuccess());
  }
}
