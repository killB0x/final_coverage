/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:17:52 GMT 2022
 */

package top.guokaicn.tools.lang.page;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import top.guokaicn.tools.lang.page.PageResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PageResult_ESTest extends PageResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      pageResult0.setTotalPage((-1180));
      int int0 = pageResult0.getTotalPage();
      assertEquals((-1180), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      pageResult0.setTotal((-567));
      long long0 = pageResult0.getTotal();
      assertEquals((-567L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      Boolean boolean0 = Boolean.TRUE;
      pageResult0.setSuccess(boolean0);
      Boolean boolean1 = pageResult0.getSuccess();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      Boolean boolean0 = Boolean.valueOf("~mC");
      pageResult0.setSuccess(boolean0);
      Boolean boolean1 = pageResult0.getSuccess();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      pageResult0.setRows(linkedList0);
      List<Object> list0 = pageResult0.getRows();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "4dp5(:GaYS%P!]~");
      pageResult0.setRows(linkedList0);
      List<Object> list0 = pageResult0.getRows();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      pageResult0.setPageSize((-2566));
      int int0 = pageResult0.getPageSize();
      assertEquals((-2566), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      pageResult0.setPageIndex((-2143));
      int int0 = pageResult0.getPageIndex();
      assertEquals((-2143), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      pageResult0.setMessage("\"-fY");
      String string0 = pageResult0.getMessage();
      assertEquals("\"-fY", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      Integer integer0 = new Integer(0);
      pageResult0.setCode(integer0);
      Integer integer1 = pageResult0.getCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      Integer integer0 = new Integer((-1040));
      pageResult0.setCode(integer0);
      Integer integer1 = pageResult0.getCode();
      assertEquals((-1040), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      pageResult0.setTotalPage(5229);
      int int0 = pageResult0.getTotalPage();
      assertEquals(5229, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      pageResult0.setTotal(546);
      long long0 = pageResult0.getTotal();
      assertEquals(546L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      pageResult0.setMessage("");
      String string0 = pageResult0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      int int0 = pageResult0.getTotalPage();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      int int0 = pageResult0.getPageIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      Integer integer0 = Integer.getInteger("", 546);
      pageResult0.setCode(integer0);
      Integer integer1 = pageResult0.getCode();
      assertEquals(546, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      int int0 = pageResult0.getPageSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      pageResult0.setPageIndex(546);
      int int0 = pageResult0.getPageIndex();
      assertEquals(546, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      Integer integer0 = pageResult0.getCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      long long0 = pageResult0.getTotal();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      List<Integer> list0 = pageResult0.getRows();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      pageResult0.setPageSize(546);
      int int0 = pageResult0.getPageSize();
      assertEquals(546, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PageResult<Object> pageResult0 = new PageResult<Object>();
      Boolean boolean0 = pageResult0.getSuccess();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PageResult<Integer> pageResult0 = new PageResult<Integer>();
      String string0 = pageResult0.getMessage();
      assertNull(string0);
  }
}
