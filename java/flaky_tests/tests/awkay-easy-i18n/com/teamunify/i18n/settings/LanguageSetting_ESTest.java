/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 22:01:49 GMT 2022
 */

package com.teamunify.i18n.settings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.teamunify.i18n.settings.LanguageSetting;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LanguageSetting_ESTest extends LanguageSetting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        LanguageSetting.findBestTranslation("=.3NnTxK96Z;F_$|", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.teamunify.i18n.settings.LanguageSetting", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LanguageSetting languageSetting0 = null;
      try {
        languageSetting0 = new LanguageSetting((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.teamunify.i18n.settings.LanguageSetting", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      LanguageSetting languageSetting0 = new LanguageSetting(locale0);
      // Undeclared exception!
      try { 
        languageSetting0.emptyLanguageBundle.getStringArray("\u00A4");
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle com.teamunify.i18n.settings.LanguageSetting$1, key \u00A4
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      LanguageSetting languageSetting0 = new LanguageSetting(locale0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getNoFallbackControl(list0);
      List<String> list1 = resourceBundle_Control0.getFormats(";b|pB7=?w[<iDcZ#8");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)languageSetting0.getMilitaryTimeFormat(true);
      assertEquals("H:m:s", mockSimpleDateFormat0.toLocalizedPattern());
      
      MockSimpleDateFormat mockSimpleDateFormat1 = (MockSimpleDateFormat)languageSetting0.getMilitaryTimeFormat(false);
      assertEquals("H:m", mockSimpleDateFormat1.toPattern());
      
      languageSetting0.getCompactMilitaryTimeFormat();
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category1, languageSetting0.locale);
      languageSetting0.getAccurateTimeFormat();
      languageSetting0.getShortTimeFormat();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = languageSetting0.translation.keySet();
      Locale.lookupTag(linkedList0, set0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)languageSetting0.getShortTimeFormat();
      assertEquals("HH:mm", simpleDateFormat0.toLocalizedPattern());
      
      languageSetting0.getCompactMilitaryTimeFormat();
      languageSetting0.getAccurateTimeFormat();
      Locale locale1 = Locale.ROOT;
      LanguageSetting.findBestTranslation((String) null, locale1);
      LanguageSetting.findBestTranslation("~_fm&", languageSetting0.locale);
      MockSimpleDateFormat mockSimpleDateFormat2 = (MockSimpleDateFormat)languageSetting0.getCompactMilitaryTimeFormat();
      assertEquals("HHmm", mockSimpleDateFormat2.toPattern());
      
      languageSetting0.getLongTimeFormat();
      MockSimpleDateFormat mockSimpleDateFormat3 = (MockSimpleDateFormat)languageSetting0.getAccurateTimeFormat();
      assertEquals("H:m:s.S", mockSimpleDateFormat3.toPattern());
      
      SimpleDateFormat simpleDateFormat1 = (SimpleDateFormat)languageSetting0.getLongTimeFormat();
      assertEquals("HH:mm:ss", simpleDateFormat1.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      LanguageSetting languageSetting0 = new LanguageSetting(locale0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)languageSetting0.getLongTimeFormat();
      assertEquals("h:mm:ss a", simpleDateFormat0.toPattern());
  }
}
