/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:26:23 GMT 2022
 */

package com.mattunderscore.executors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mattunderscore.executors.FutureSetResult;
import com.mattunderscore.executors.ITaskCanceller;
import com.mattunderscore.executors.ITaskResultProcessor;
import com.mattunderscore.executors.RepeatingFuture;
import com.mattunderscore.executors.SingleFuture;
import com.mattunderscore.executors.TaskWrapper;
import com.mattunderscore.executors.UncaughtExceptionResult;
import java.util.concurrent.Callable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskWrapper_ESTest extends TaskWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable0, (ITaskResultProcessor<Object>) null);
      // Undeclared exception!
      try { 
        taskWrapper0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.TaskWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 1);
      FutureSetResult<Object> futureSetResult0 = new FutureSetResult<Object>(repeatingFuture0);
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable0, futureSetResult0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      futureSetResult0.onThrowable(taskWrapper0, mockThrowable0);
      // Undeclared exception!
      try { 
        taskWrapper0.execute();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      UncaughtExceptionResult<Object> uncaughtExceptionResult0 = new UncaughtExceptionResult<Object>();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable0, uncaughtExceptionResult0);
      boolean boolean0 = taskWrapper0.equals(taskWrapper0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      UncaughtExceptionResult<Object> uncaughtExceptionResult0 = new UncaughtExceptionResult<Object>();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable0, uncaughtExceptionResult0);
      boolean boolean0 = taskWrapper0.equals(uncaughtExceptionResult0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Integer> singleFuture0 = new SingleFuture<Integer>(iTaskCanceller0);
      FutureSetResult<Integer> futureSetResult0 = new FutureSetResult<Integer>(singleFuture0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TaskWrapper<Integer> taskWrapper0 = new TaskWrapper<Integer>(callable0, futureSetResult0);
      taskWrapper0.execute();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      UncaughtExceptionResult<Object> uncaughtExceptionResult0 = new UncaughtExceptionResult<Object>();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable0, uncaughtExceptionResult0);
      taskWrapper0.hashCode();
  }
}
