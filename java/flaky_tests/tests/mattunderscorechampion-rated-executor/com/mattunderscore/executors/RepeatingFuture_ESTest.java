/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:17:24 GMT 2022
 */

package com.mattunderscore.executors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mattunderscore.executors.ITaskCanceller;
import com.mattunderscore.executors.RepeatingFuture;
import com.mattunderscore.executors.TaskExecutionResult;
import com.mattunderscore.executors.TaskWrapper;
import com.mattunderscore.executors.UncaughtExceptionResult;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RepeatingFuture_ESTest extends RepeatingFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      repeatingFuture0.processCancellation(false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 1);
      repeatingFuture0.checkCancellationException((-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>((ITaskCanceller) null, 752);
      repeatingFuture0.getExpectedExecutions();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      TaskExecutionResult<Integer> taskExecutionResult0 = new TaskExecutionResult<Integer>((Throwable) null);
      TaskExecutionResult<Object> taskExecutionResult1 = new TaskExecutionResult<Object>(taskExecutionResult0);
      // Undeclared exception!
      try { 
        repeatingFuture0.processResult(taskExecutionResult1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>((ITaskCanceller) null, 0);
      // Undeclared exception!
      try { 
        repeatingFuture0.processCancellation(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 1898);
      // Undeclared exception!
      try { 
        repeatingFuture0.getStoredResult(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>((ITaskCanceller) null, 1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      try { 
        repeatingFuture0.getResult((-2070), (long) 2200, timeUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2070 out of bounds for length 1
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        repeatingFuture0.await(1L, timeUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      // Undeclared exception!
      try { 
        repeatingFuture0.await();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = null;
      try {
        repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      repeatingFuture0.taskDone();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 2522);
      repeatingFuture0.taskDone();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 0);
      repeatingFuture0.processCancellation(false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 2549);
      try { 
        repeatingFuture0.checkCancellationException(1835);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<TaskExecutionResult<Object>> repeatingFuture0 = new RepeatingFuture<TaskExecutionResult<Object>>(iTaskCanceller0, 1070);
      repeatingFuture0.checkCancellationException((-2213));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 2200);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      try { 
        repeatingFuture0.getResult(0, 0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<TaskExecutionResult<Integer>> repeatingFuture0 = new RepeatingFuture<TaskExecutionResult<Integer>>(iTaskCanceller0, 1);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      UncaughtExceptionResult<Integer> uncaughtExceptionResult0 = new UncaughtExceptionResult<Integer>();
      TaskWrapper<Integer> taskWrapper0 = new TaskWrapper<Integer>(callable0, uncaughtExceptionResult0);
      repeatingFuture0.setTask(taskWrapper0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 2526);
      repeatingFuture0.processResult((TaskExecutionResult<Object>) null);
      repeatingFuture0.getCompletedExecutions();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 2526);
      repeatingFuture0.getCompletedExecutions();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 2149);
      boolean boolean0 = repeatingFuture0.processCancellation(true);
      assertTrue(boolean0);
      
      repeatingFuture0.await();
      assertEquals(2149, repeatingFuture0.getExpectedExecutions());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      int int0 = repeatingFuture0.getExpectedExecutions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>((ITaskCanceller) null, 1413);
      try { 
        repeatingFuture0.getResult((-73));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -73 out of bounds for length 1413
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 0);
      // Undeclared exception!
      try { 
        repeatingFuture0.getResult();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = repeatingFuture0.await(0L, timeUnit0);
      assertEquals(1, repeatingFuture0.getExpectedExecutions());
      assertFalse(boolean0);
  }
}
