/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:22:19 GMT 2022
 */

package com.mattunderscore.executors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mattunderscore.executors.FutureSetResult;
import com.mattunderscore.executors.ITaskCanceller;
import com.mattunderscore.executors.RepeatingFuture;
import com.mattunderscore.executors.SingleFuture;
import com.mattunderscore.executors.TaskExecutionResult;
import com.mattunderscore.executors.TaskWrapper;
import com.mattunderscore.executors.UnboundedFuture;
import com.mattunderscore.executors.UncaughtExceptionResult;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseFuture_ESTest extends BaseFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer(0);
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      MockThrowable mockThrowable0 = new MockThrowable();
      singleFuture0.setException(mockThrowable0);
      try { 
        singleFuture0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.mattunderscore.executors.TaskExecutionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      singleFuture0.cancel(true);
      TaskExecutionResult<Object> taskExecutionResult0 = new TaskExecutionResult<Object>(singleFuture0);
      singleFuture0.processResult(taskExecutionResult0);
      long long0 = 45L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      try { 
        singleFuture0.get(45L, timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.BaseFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      singleFuture0.cancel(true);
      TaskExecutionResult<Object> taskExecutionResult0 = new TaskExecutionResult<Object>(singleFuture0);
      singleFuture0.processResult(taskExecutionResult0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      try { 
        singleFuture0.get(45L, timeUnit0);
        fail("Expecting exception: CancellationException");
      
      } catch(CancellationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.BaseFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      singleFuture0.cancel(true);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      MockThrowable mockThrowable0 = new MockThrowable("['Q?4ZS/lK*/etH");
      File file0 = MockFile.createTempFile("['Q?4ZS/lK*/etH", "");
      MockThrowable.getDefaultStackTrace();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      singleFuture0.await((-1869L), timeUnit0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockThrowable0.printStackTrace((PrintStream) mockPrintStream0);
      singleFuture0.setException(mockThrowable0);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iTaskCanceller1).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      SingleFuture<Integer> singleFuture1 = new SingleFuture<Integer>(iTaskCanceller1);
      singleFuture1.processCancellation(false);
      singleFuture0.getResult();
      ITaskCanceller iTaskCanceller2 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = (-6135);
      RepeatingFuture<Integer> repeatingFuture0 = null;
      try {
        repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller2, (-6135));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6135
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      repeatingFuture0.cancel(true);
      MockThrowable mockThrowable0 = new MockThrowable("com.mattunderscore.executors.TaskExecutionResult");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.print((-1.0F));
      mockThrowable1.printStackTrace((PrintWriter) mockPrintWriter0);
      mockThrowable1.getStackTrace();
      repeatingFuture0.isDone();
      // Undeclared exception!
      try { 
        repeatingFuture0.setException(mockThrowable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      MockThrowable mockThrowable0 = new MockThrowable("#5DdM1zllL5,h");
      singleFuture0.setException(mockThrowable0);
      singleFuture0.cancel(true);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      repeatingFuture0.cancel(true);
      MockThrowable mockThrowable0 = new MockThrowable("com.mattunderscore.executors.TaskExecutionResult");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      int int1 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.print((-1.0F));
      mockThrowable1.printStackTrace((PrintWriter) mockPrintWriter0);
      mockThrowable1.getStackTrace();
      repeatingFuture0.isDone();
      // Undeclared exception!
      try { 
        repeatingFuture0.setException(mockThrowable1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      singleFuture0.getResult();
      singleFuture0.processResult((TaskExecutionResult<Object>) null);
      singleFuture0.cancel(true);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        singleFuture0.get((long) 0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.BaseFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      boolean boolean0 = repeatingFuture0.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iTaskCanceller0).cancelTask(any(com.mattunderscore.executors.ITaskWrapper.class) , anyBoolean());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      singleFuture0.cancel(true);
      TaskExecutionResult<Object> taskExecutionResult0 = new TaskExecutionResult<Object>(singleFuture0);
      singleFuture0.processResult(taskExecutionResult0);
      long long0 = 45L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      singleFuture0.get(45L, timeUnit0);
      SingleFuture<Integer> singleFuture1 = new SingleFuture<Integer>((ITaskCanceller) null);
      singleFuture1.isCancelled();
      UnboundedFuture unboundedFuture0 = new UnboundedFuture((ITaskCanceller) null);
      // Undeclared exception!
      try { 
        unboundedFuture0.processCancellation(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.UnboundedFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 3136);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller1);
      singleFuture0.getResult();
      repeatingFuture0.processResult((TaskExecutionResult<Object>) null);
      repeatingFuture0.isDone();
      int int0 = repeatingFuture0.getCompletedExecutions();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 1952);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      try { 
        repeatingFuture0.get((-2978L), timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.BaseFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      try { 
        singleFuture0.get(0L, timeUnit0);
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.BaseFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Integer> singleFuture0 = new SingleFuture<Integer>(iTaskCanceller0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture1 = new SingleFuture<Object>(iTaskCanceller1);
      Integer integer0 = new Integer((-1));
      singleFuture0.setResult(integer0);
      FutureSetResult<Object> futureSetResult0 = new FutureSetResult<Object>(singleFuture1);
      String string0 = "{8gLBo%.z(3V\"<C7_u";
      MockThrowable mockThrowable0 = new MockThrowable();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable1, futureSetResult0);
      taskWrapper0.execute();
      futureSetResult0.onThrowable(taskWrapper0, mockThrowable0);
      futureSetResult0.onThrowable(taskWrapper0, mockThrowable0);
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      PrintStream printStream0 = null;
      // Undeclared exception!
      try { 
        mockThrowable1.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller0, 0);
      repeatingFuture0.checkCancellationException();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        repeatingFuture0.setResult(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        repeatingFuture0.setResult((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      singleFuture0.await((-5282L), timeUnit0);
      SingleFuture<Integer> singleFuture1 = new SingleFuture<Integer>((ITaskCanceller) null);
      Integer integer0 = new Integer(0);
      singleFuture1.setResult(integer0);
      boolean boolean0 = singleFuture1.taskDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller0);
      singleFuture0.checkCancellationException();
      singleFuture0.taskDone();
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller1, 0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FutureSetResult<Object> futureSetResult0 = new FutureSetResult<Object>(repeatingFuture0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable1, futureSetResult0);
      String string0 = "";
      // Undeclared exception!
      try { 
        taskWrapper0.execute();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RepeatingFuture<Object> repeatingFuture0 = new RepeatingFuture<Object>(iTaskCanceller0, 0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        repeatingFuture0.get((long) 0, timeUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Integer> singleFuture0 = new SingleFuture<Integer>(iTaskCanceller0);
      Integer integer0 = new Integer(0);
      TaskExecutionResult<Integer> taskExecutionResult0 = new TaskExecutionResult<Integer>(integer0);
      singleFuture0.checkExecutionException(taskExecutionResult0);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      UnboundedFuture unboundedFuture0 = new UnboundedFuture(iTaskCanceller1);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TaskExecutionResult<Integer> taskExecutionResult1 = new TaskExecutionResult<Integer>((Throwable) null);
      try { 
        singleFuture0.checkExecutionException(taskExecutionResult1);
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.TaskExecutionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Integer> singleFuture0 = new SingleFuture<Integer>(iTaskCanceller0);
      Integer integer0 = new Integer(3388);
      TaskExecutionResult<Integer> taskExecutionResult0 = new TaskExecutionResult<Integer>(integer0);
      singleFuture0.checkExecutionException(taskExecutionResult0);
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller1, 3388);
      try { 
        repeatingFuture0.getResult(3388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3388 out of bounds for length 3388
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer((byte) (-47));
      ITaskCanceller iTaskCanceller0 = null;
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>((ITaskCanceller) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      singleFuture0.setException(mockThrowable0);
      try { 
        singleFuture0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.mattunderscore.executors.TaskExecutionResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>((ITaskCanceller) null);
      SingleFuture<Object> singleFuture1 = new SingleFuture<Object>((ITaskCanceller) null);
      // Undeclared exception!
      try { 
        singleFuture1.cancel(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mattunderscore.executors.SingleFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ITaskCanceller iTaskCanceller0 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      UnboundedFuture unboundedFuture0 = new UnboundedFuture(iTaskCanceller0);
      MockThrowable mockThrowable0 = new MockThrowable("a]+v3kZn2&Z");
      MockThrowable mockThrowable1 = new MockThrowable("com.mattunderscore.executors.UnboundedFuture", mockThrowable0);
      TaskExecutionResult<Void> taskExecutionResult0 = new TaskExecutionResult<Void>((Throwable) mockThrowable1);
      unboundedFuture0.processResult(taskExecutionResult0);
      unboundedFuture0.await();
      ITaskCanceller iTaskCanceller1 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RepeatingFuture<Integer> repeatingFuture0 = new RepeatingFuture<Integer>(iTaskCanceller1, 0);
      int int1 = 0;
      Integer integer0 = new Integer(0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ITaskCanceller iTaskCanceller2 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      SingleFuture<Object> singleFuture0 = new SingleFuture<Object>(iTaskCanceller2);
      FutureSetResult<Object> futureSetResult0 = new FutureSetResult<Object>(singleFuture0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      UncaughtExceptionResult<Object> uncaughtExceptionResult0 = new UncaughtExceptionResult<Object>();
      TaskWrapper<Object> taskWrapper0 = new TaskWrapper<Object>(callable1, uncaughtExceptionResult0);
      futureSetResult0.onThrowable(taskWrapper0, mockThrowable0);
      TaskWrapper<Object> taskWrapper1 = new TaskWrapper<Object>(callable0, futureSetResult0);
      repeatingFuture0.setTask(taskWrapper1);
      TaskExecutionResult<Integer> taskExecutionResult1 = new TaskExecutionResult<Integer>(integer0);
      repeatingFuture0.checkExecutionException(taskExecutionResult1);
      unboundedFuture0.await();
      ITaskCanceller iTaskCanceller3 = mock(ITaskCanceller.class, new ViolatedAssumptionAnswer());
      RepeatingFuture<Object> repeatingFuture1 = new RepeatingFuture<Object>(iTaskCanceller3, 0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        repeatingFuture1.get((-1987L), timeUnit0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.mattunderscore.executors.RepeatingFuture", e);
      }
  }
}
