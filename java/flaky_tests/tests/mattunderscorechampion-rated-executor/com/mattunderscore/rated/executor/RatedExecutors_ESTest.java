/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 16:31:23 GMT 2022
 */

package com.mattunderscore.rated.executor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mattunderscore.executors.IUniversalExecutor;
import com.mattunderscore.rated.executor.IRatedExecutor;
import com.mattunderscore.rated.executor.RatedExecutorThreadFactory;
import com.mattunderscore.rated.executor.RatedExecutors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RatedExecutors_ESTest extends RatedExecutors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      RatedExecutorThreadFactory ratedExecutorThreadFactory0 = new RatedExecutorThreadFactory();
      IUniversalExecutor iUniversalExecutor0 = RatedExecutors.simpleRatedExecutor((-1L), timeUnit0, (ThreadFactory) ratedExecutorThreadFactory0);
      assertNotNull(iUniversalExecutor0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        RatedExecutors.ratedExecutor(0L, timeUnit0, (ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      IRatedExecutor iRatedExecutor0 = RatedExecutors.interruptableRatedExecutor(1959L, timeUnit0);
      assertNotNull(iRatedExecutor0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      RatedExecutorThreadFactory ratedExecutorThreadFactory0 = new RatedExecutorThreadFactory();
      IRatedExecutor iRatedExecutor0 = RatedExecutors.ratedExecutor(1959L, timeUnit0, (ThreadFactory) ratedExecutorThreadFactory0);
      assertNotNull(iRatedExecutor0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      RatedExecutorThreadFactory ratedExecutorThreadFactory0 = new RatedExecutorThreadFactory();
      IRatedExecutor iRatedExecutor0 = RatedExecutors.interruptableRatedExecutor(1959L, timeUnit0, (ThreadFactory) ratedExecutorThreadFactory0);
      assertNotNull(iRatedExecutor0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      IUniversalExecutor iUniversalExecutor0 = RatedExecutors.simpleRatedExecutor((-5L), timeUnit0);
      assertNotNull(iUniversalExecutor0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      IRatedExecutor iRatedExecutor0 = RatedExecutors.ratedExecutor(1L, timeUnit0);
      assertNotNull(iRatedExecutor0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        RatedExecutors.simpleRatedExecutor((-20L), timeUnit0, (ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
