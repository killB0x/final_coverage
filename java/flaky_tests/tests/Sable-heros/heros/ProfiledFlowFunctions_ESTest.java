/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:31:43 GMT 2022
 */

package heros;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.FlowFunction;
import heros.FlowFunctions;
import heros.ProfiledFlowFunctions;
import heros.ZeroedFlowFunctions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProfiledFlowFunctions_ESTest extends ProfiledFlowFunctions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallToReturnFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(2374);
      profiledFlowFunctions0.durationReturn = (long) 2374;
      profiledFlowFunctions0.getCallToReturnFlowFunction(integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationCallReturn);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallToReturnFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(1);
      profiledFlowFunctions0.durationNormal = (long) 1;
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(profiledFlowFunctions0, integer0);
      zeroedFlowFunctions0.getCallToReturnFlowFunction((Integer) null, (Integer) null);
      assertEquals(0L, profiledFlowFunctions0.durationCallReturn);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallToReturnFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      profiledFlowFunctions0.durationCallReturn = 567L;
      Integer integer0 = new Integer(0);
      profiledFlowFunctions0.getCallToReturnFlowFunction(integer0, integer0);
      assertEquals(567L, profiledFlowFunctions0.durationCallReturn);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallToReturnFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(3);
      profiledFlowFunctions0.durationCall = (long) 4;
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(profiledFlowFunctions0, integer0);
      zeroedFlowFunctions0.getCallToReturnFlowFunction((Integer) null, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationCallReturn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallToReturnFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(0);
      System.setCurrentTimeMillis(0L);
      FlowFunction<Integer> flowFunction0 = profiledFlowFunctions0.getCallToReturnFlowFunction(integer0, integer0);
      assertNull(flowFunction0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction<Integer>) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      Integer integer0 = new Integer(2);
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions1 = new ProfiledFlowFunctions<Integer, Integer, Integer>(profiledFlowFunctions0);
      profiledFlowFunctions1.durationNormal = 2L;
      profiledFlowFunctions1.getReturnFlowFunction(integer0, integer0, integer0, integer0);
      assertEquals(0L, profiledFlowFunctions1.durationReturn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      profiledFlowFunctions0.durationCallReturn = (long) 3;
      Integer integer0 = new Integer(3);
      profiledFlowFunctions0.getReturnFlowFunction(integer0, integer0, integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationReturn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(3);
      profiledFlowFunctions0.durationCall = (long) 4;
      profiledFlowFunctions0.getReturnFlowFunction(integer0, integer0, integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationReturn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      Integer integer0 = new Integer((-1));
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      profiledFlowFunctions0.durationReturn = (long) (-1);
      profiledFlowFunctions0.getReturnFlowFunction(integer0, integer0, integer0, integer0);
      assertEquals((-1L), profiledFlowFunctions0.durationReturn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      Integer integer0 = new Integer(222);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      System.setCurrentTimeMillis(0L);
      FlowFunction<Integer> flowFunction0 = profiledFlowFunctions0.getReturnFlowFunction(integer0, integer0, integer0, integer0);
      assertNull(flowFunction0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      Integer integer0 = new Integer((-1));
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      Integer integer1 = new Integer((-1));
      profiledFlowFunctions0.getReturnFlowFunction((Integer) null, integer0, integer1, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationReturn);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getReturnFlowFunction(anyInt() , anyInt() , anyInt() , anyInt());
      Integer integer0 = new Integer((-1));
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      Integer integer1 = new Integer(0);
      profiledFlowFunctions0.getReturnFlowFunction(integer1, integer1, integer1, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationReturn);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer((-1));
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      profiledFlowFunctions0.durationReturn = (long) (-1);
      profiledFlowFunctions0.getCallFlowFunction(integer0, (Integer) null);
      assertEquals(0L, profiledFlowFunctions0.durationCall);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction<Integer>) null).when(flowFunctions0).getCallFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer(2);
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      profiledFlowFunctions0.durationNormal = 2L;
      profiledFlowFunctions0.getCallFlowFunction(integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationCall);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(3);
      profiledFlowFunctions0.durationCall = (long) 4;
      profiledFlowFunctions0.getCallFlowFunction(integer0, integer0);
      assertEquals(4L, profiledFlowFunctions0.durationCall);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(35);
      profiledFlowFunctions0.durationCallReturn = 88L;
      profiledFlowFunctions0.getCallFlowFunction(integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationCall);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer(222);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      System.setCurrentTimeMillis(0L);
      FlowFunction<Integer> flowFunction0 = profiledFlowFunctions0.getCallFlowFunction((Integer) null, integer0);
      assertNull(flowFunction0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getNormalFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(335);
      profiledFlowFunctions0.durationNormal = (long) (-9);
      profiledFlowFunctions0.getNormalFlowFunction(integer0, integer0);
      assertEquals((-9L), profiledFlowFunctions0.durationNormal);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getNormalFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer((-1));
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      profiledFlowFunctions0.durationReturn = (long) (-1);
      profiledFlowFunctions0.getNormalFlowFunction((Integer) null, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationNormal);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getNormalFlowFunction(anyInt() , anyInt());
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      Integer integer0 = new Integer(35);
      profiledFlowFunctions0.durationCallReturn = 88L;
      profiledFlowFunctions0.getNormalFlowFunction(integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationNormal);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction<Integer>) null).when(flowFunctions0).getNormalFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer(2);
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      profiledFlowFunctions0.durationCall = (long) 2;
      profiledFlowFunctions0.getNormalFlowFunction(integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationNormal);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getNormalFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer(222);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(flowFunctions0);
      System.setCurrentTimeMillis(0L);
      FlowFunction<Integer> flowFunction0 = profiledFlowFunctions0.getNormalFlowFunction(integer0, (Integer) null);
      assertNull(flowFunction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>((FlowFunctions<Integer, Integer, Integer>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        profiledFlowFunctions0.getReturnFlowFunction(integer0, integer0, integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.ProfiledFlowFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>((FlowFunctions<Integer, Integer, Integer>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        profiledFlowFunctions0.getNormalFlowFunction(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.ProfiledFlowFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>((FlowFunctions<Integer, Integer, Integer>) null);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        profiledFlowFunctions0.getCallToReturnFlowFunction(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.ProfiledFlowFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>((FlowFunctions<Integer, Integer, Integer>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        profiledFlowFunctions0.getCallFlowFunction(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.ProfiledFlowFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FlowFunctions<Integer, Integer, Integer> flowFunctions0 = (FlowFunctions<Integer, Integer, Integer>) mock(FlowFunctions.class, new ViolatedAssumptionAnswer());
      doReturn((FlowFunction) null).when(flowFunctions0).getCallToReturnFlowFunction(anyInt() , anyInt());
      Integer integer0 = new Integer((-1));
      ZeroedFlowFunctions<Integer, Integer, Integer> zeroedFlowFunctions0 = new ZeroedFlowFunctions<Integer, Integer, Integer>(flowFunctions0, integer0);
      ProfiledFlowFunctions<Integer, Integer, Integer> profiledFlowFunctions0 = new ProfiledFlowFunctions<Integer, Integer, Integer>(zeroedFlowFunctions0);
      profiledFlowFunctions0.getCallToReturnFlowFunction(integer0, integer0);
      assertEquals(0L, profiledFlowFunctions0.durationCallReturn);
  }
}
