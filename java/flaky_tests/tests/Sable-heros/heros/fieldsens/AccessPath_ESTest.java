/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 04:44:52 GMT 2022
 */

package heros.fieldsens;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.fieldsens.AccessPath;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessPath_ESTest extends AccessPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = linkedHashSet0.add(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<AccessPath.Delta<Object>> linkedHashSet0 = new LinkedHashSet<AccessPath.Delta<Object>>();
      AccessPath<AccessPath.Delta<Object>> accessPath0 = new AccessPath<AccessPath.Delta<Object>>((AccessPath.Delta<Object>[]) null, linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>(linkedHashSet0);
      linkedHashSet1.add(accessPath0);
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>((Object[]) null, linkedHashSet1);
      boolean boolean0 = linkedHashSet0.add(accessPath_Delta0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.isPrefixOf(accessPath1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      accessPath0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      AccessPath<Integer> accessPath1 = accessPath0.removeFirst();
      assertTrue(accessPath1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      Object object0 = accessPath0.getFirstAccess();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object>[] accessPathArray0 = (AccessPath<Object>[]) Array.newInstance(AccessPath.class, 1);
      accessPathArray0[0] = accessPath0;
      LinkedHashSet<AccessPath<Object>> linkedHashSet1 = new LinkedHashSet<AccessPath<Object>>(1354, 1354);
      AccessPath<AccessPath<Object>> accessPath1 = new AccessPath<AccessPath<Object>>(accessPathArray0, linkedHashSet1);
      AccessPath accessPath2 = (AccessPath)accessPath1.getFirstAccess();
      assertTrue(accessPath2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      Set<Integer> set0 = accessPath0.getExclusions();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      linkedHashSet0.add(accessPath0);
      Set<Object> set0 = accessPath0.getExclusions();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.prepend((Object) null);
      AccessPath<Object> accessPath2 = accessPath1.append(objectArray0);
      assertSame(accessPath2, accessPath1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.removeFirst();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>((Object[]) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.removeAnyAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>((Object[]) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.prepend(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 3);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(linkedHashSetArray0, linkedHashSetArray0[0]);
      // Undeclared exception!
      try { 
        accessPath0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      // Undeclared exception!
      try { 
        accessPath0.isAccessInExclusions(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>((Object[]) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.hasEmptyAccessPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.hasAllExclusionsOf((AccessPath<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Function<Object, Object>> linkedHashSet0 = new LinkedHashSet<Function<Object, Object>>();
      AccessPath<Function<Object, Object>> accessPath0 = new AccessPath<Function<Object, Object>>((Function<Object, Object>[]) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.getFirstAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>((Object[]) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.append((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        accessPath0.append(objectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Joiner
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      boolean boolean0 = accessPath0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, linkedHashSet1);
      AccessPath.PrefixTestResult accessPath_PrefixTestResult0 = accessPath0.isPrefixOf(accessPath1);
      assertEquals(AccessPath.PrefixTestResult.NO_PREFIX, accessPath_PrefixTestResult0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.prepend(accessPath0);
      AccessPath.PrefixTestResult accessPath_PrefixTestResult0 = accessPath0.isPrefixOf(accessPath1);
      assertEquals(AccessPath.PrefixTestResult.GUARANTEED_PREFIX, accessPath_PrefixTestResult0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedHashSet0;
      objectArray0[1] = (Object) linkedHashSet0;
      objectArray0[2] = (Object) linkedHashSet0;
      objectArray0[3] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) linkedHashSet0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      AccessPath<Object> accessPath1 = accessPath0.prepend(linkedHashSet1);
      AccessPath.PrefixTestResult accessPath_PrefixTestResult0 = accessPath0.isPrefixOf(accessPath1);
      assertEquals(AccessPath.PrefixTestResult.NO_PREFIX, accessPath_PrefixTestResult0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedHashSet0;
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.isPrefixOf(accessPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath.PrefixTestResult accessPath_PrefixTestResult0 = accessPath0.isPrefixOf(accessPath0);
      assertEquals(AccessPath.PrefixTestResult.GUARANTEED_PREFIX, accessPath_PrefixTestResult0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer[] integerArray0 = new Integer[17];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.removeAnyAccess();
      accessPath0.isPrefixOf(accessPath1);
      assertTrue(accessPath1.isEmpty());
      assertTrue(accessPath1.hasEmptyAccessPath());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.append(objectArray0);
      assertSame(accessPath1, accessPath0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.isAccessInExclusions(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccessPath<Object> accessPath0 = null;
      try {
        accessPath0 = new AccessPath<Object>();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.hasEmptyAccessPath();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.hasEmptyAccessPath();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.removeAnyAccess();
      assertSame(accessPath1, accessPath0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      String string0 = accessPath0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      linkedHashSet0.add(linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Joiner
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      // Undeclared exception!
      try { 
        accessPath0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.equals(accessPath1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      boolean boolean0 = accessPath1.equals(accessPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      boolean boolean0 = accessPath0.equals(accessPath1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.removeAnyAccess();
      boolean boolean0 = accessPath1.equals(accessPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      boolean boolean0 = accessPath1.equals(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      linkedHashSet0.add(accessPath0);
      // Undeclared exception!
      try { 
        accessPath0.append(integerArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.equals(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.equals(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, (Set<Object>) null);
      boolean boolean0 = linkedHashSet0.add(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      assertTrue(accessPath0.isEmpty());
      
      linkedHashSet0.add(accessPath0);
      boolean boolean0 = accessPath0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 3);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSetArray0[0] = linkedHashSet0;
      AccessPath<Object> accessPath0 = new AccessPath<Object>(linkedHashSetArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.canRead(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.prepend(linkedHashSet0);
      boolean boolean0 = accessPath1.canRead(accessPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.canRead(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.canRead(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(objectArray0, (Set<Object>) null);
      LinkedHashSet<AccessPath.Delta<Object>> linkedHashSet1 = new LinkedHashSet<AccessPath.Delta<Object>>();
      linkedHashSet1.add(accessPath_Delta0);
      AccessPath.Delta<Object> accessPath_Delta1 = new AccessPath.Delta<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = linkedHashSet1.add(accessPath_Delta1);
      assertEquals(2, linkedHashSet1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer[] integerArray0 = new Integer[17];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(integerArray0, linkedHashSet0);
      LinkedHashSet<AccessPath.Delta<Object>> linkedHashSet1 = new LinkedHashSet<AccessPath.Delta<Object>>();
      linkedHashSet1.add(accessPath_Delta0);
      AccessPath.Delta<Object> accessPath_Delta1 = new AccessPath.Delta<Object>(integerArray0, linkedHashSet0);
      boolean boolean0 = linkedHashSet1.add(accessPath_Delta1);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(objectArray0, (Set<Object>) null);
      LinkedHashSet<AccessPath.Delta<Object>> linkedHashSet0 = new LinkedHashSet<AccessPath.Delta<Object>>();
      linkedHashSet0.add(accessPath_Delta0);
      AccessPath.Delta<Object> accessPath_Delta1 = new AccessPath.Delta<Object>(objectArray0, (Set<Object>) null);
      boolean boolean0 = linkedHashSet0.add(accessPath_Delta1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath_Delta0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(integerArray0, linkedHashSet0);
      boolean boolean0 = accessPath_Delta0.equals(accessPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Object>>();
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 0);
      AccessPath.Delta<LinkedHashSet<Object>> accessPath_Delta0 = new AccessPath.Delta<LinkedHashSet<Object>>(linkedHashSetArray0, linkedHashSet1);
      linkedHashSet1.add(linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath_Delta0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Joiner
         //
         verifyException("heros.fieldsens.AccessPath$Delta", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 4);
      AccessPath.Delta<LinkedHashSet<Object>> accessPath_Delta0 = new AccessPath.Delta<LinkedHashSet<Object>>(linkedHashSetArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath_Delta0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Joiner
         //
         verifyException("heros.fieldsens.AccessPath$Delta", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 0);
      AccessPath.Delta<LinkedHashSet<Object>> accessPath_Delta0 = new AccessPath.Delta<LinkedHashSet<Object>>(linkedHashSetArray0, linkedHashSet0);
      String string0 = accessPath_Delta0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath_Delta0.canBeAppliedTo(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath_Delta0.canBeAppliedTo(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      linkedHashSet0.add(accessPath0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath1 = new AccessPath<Object>(objectArray0, linkedHashSet1);
      // Undeclared exception!
      try { 
        accessPath0.getDeltaTo(accessPath1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      linkedHashSet0.add(accessPath0);
      // Undeclared exception!
      try { 
        accessPath0.getDeltaTo(accessPath0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.removeAnyAccess();
      // Undeclared exception!
      try { 
        accessPath1.getDeltaTo(accessPath0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.removeAnyAccess();
      // Undeclared exception!
      try { 
        accessPath1.getDeltaTo(accessPath0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) linkedHashSet0;
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath<Object> accessPath1 = accessPath0.removeFirst();
      // Undeclared exception!
      try { 
        accessPath1.getDeltaTo(accessPath0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(integerArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.getDeltaTo(accessPath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      boolean boolean0 = accessPath0.hasAllExclusionsOf(accessPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.append(objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Joiner
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      AccessPath.Delta<Object> accessPath_Delta0 = new AccessPath.Delta<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath_Delta0.applyTo(accessPath0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessPath.Delta.empty();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath$Delta", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.getFirstAccess();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 0);
      AccessPath<Object> accessPath0 = new AccessPath<Object>(linkedHashSetArray0, linkedHashSet0);
      Set<Object> set0 = accessPath0.getExclusions();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>((Object[]) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.removeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.appendExcludedFieldReference(objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.mergeExcludedFieldReferences(accessPath0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      AccessPath<Object> accessPath0 = new AccessPath<Object>(objectArray0, linkedHashSet0);
      // Undeclared exception!
      try { 
        accessPath0.appendExcludedFieldReference((Collection<Object>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessPath.empty();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }
}
