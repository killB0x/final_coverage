/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:13:09 GMT 2022
 */

package heros.fieldsens;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.fieldsens.AccessPath;
import heros.fieldsens.AccessPathHandler;
import heros.fieldsens.Debugger;
import heros.fieldsens.FlowFunction;
import heros.fieldsens.Resolver;
import heros.fieldsens.ZeroHandler;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessPathHandler_ESTest extends AccessPathHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      AccessPath<Integer> accessPath1 = accessPath0.removeAnyAccess();
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath1, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.mayBeEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.canRead(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.canRead(integerArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      // Undeclared exception!
      try { 
        accessPathHandler0.read((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPathHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      // Undeclared exception!
      try { 
        accessPathHandler0.overwrite((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPathHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      // Undeclared exception!
      try { 
        accessPathHandler0.mayCanRead((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPathHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      // Undeclared exception!
      try { 
        accessPathHandler0.mayBeEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.AccessPathHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.mayCanRead(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 1;
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      AccessPath<Integer> accessPath1 = accessPath0.removeFirst();
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath1, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.mayCanRead((Integer) int0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3605);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPath<Integer> accessPath1 = accessPath0.removeAnyAccess();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath1, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.mayCanRead(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, (Set<Integer>) null);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.mayBeEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3605);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPath<Integer> accessPath1 = accessPath0.removeAnyAccess();
      linkedHashSet0.add(integer0);
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath1, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      boolean boolean0 = accessPathHandler0.mayCanRead(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1106);
      integerArray0[0] = integer0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, (Debugger<Integer, Integer, Integer, Integer>) null);
      Integer integer1 = new Integer((-485));
      // Undeclared exception!
      try { 
        accessPathHandler0.read(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot read field -485
         //
         verifyException("heros.fieldsens.AccessPathHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1106);
      integerArray0[0] = integer0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, (Debugger<Integer, Integer, Integer, Integer>) null);
      AccessPathHandler.ResultBuilder<Integer, Integer, Integer, Integer> accessPathHandler_ResultBuilder0 = accessPathHandler0.read(integerArray0[0]);
      assertNotNull(accessPathHandler_ResultBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3605);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPath<Integer> accessPath1 = accessPath0.removeAnyAccess();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath1, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      AccessPathHandler.ResultBuilder<Integer, Integer, Integer, Integer> accessPathHandler_ResultBuilder0 = accessPathHandler0.overwrite(integer0);
      assertNotNull(accessPathHandler_ResultBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      FlowFunction.ConstrainedFact<Integer, Integer, Integer, Integer> flowFunction_ConstrainedFact0 = accessPathHandler0.generate((Integer) null);
      assertNotNull(flowFunction_ConstrainedFact0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3605);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>(integerArray0, linkedHashSet0);
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>(accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      // Undeclared exception!
      try { 
        accessPathHandler0.overwrite(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot write field 3605
         //
         verifyException("heros.fieldsens.AccessPathHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      // Undeclared exception!
      try { 
        accessPathHandler0.generateWithEmptyAccessPath((Integer) null, (ZeroHandler<Integer>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Sets
         //
         verifyException("heros.fieldsens.AccessPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Debugger.NullDebugger<Integer, Integer, Integer, Integer> debugger_NullDebugger0 = new Debugger.NullDebugger<Integer, Integer, Integer, Integer>();
      AccessPathHandler<Integer, Integer, Integer, Integer> accessPathHandler0 = new AccessPathHandler<Integer, Integer, Integer, Integer>((AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null, debugger_NullDebugger0);
      AccessPathHandler.ResultBuilder<Integer, Integer, Integer, Integer> accessPathHandler_ResultBuilder0 = accessPathHandler0.prepend((Integer) null);
      assertNotNull(accessPathHandler_ResultBuilder0);
  }
}
