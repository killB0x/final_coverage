/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 04:59:36 GMT 2022
 */

package heros.fieldsens.structs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.fieldsens.AccessPath;
import heros.fieldsens.Resolver;
import heros.fieldsens.structs.FactAtStatement;
import heros.fieldsens.structs.WrappedFact;
import heros.fieldsens.structs.WrappedFactAtStatement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WrappedFactAtStatement_ESTest extends WrappedFactAtStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      String string0 = wrappedFactAtStatement0.toString();
      assertEquals("null @ 0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>((Integer) null, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = wrappedFactAtStatement0.getWrappedFact();
      assertNull(wrappedFact0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WrappedFactAtStatement<Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer>((Integer) null, (WrappedFact<Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer>) null);
      Integer integer0 = wrappedFactAtStatement0.getStatement();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(31);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, wrappedFact0);
      FactAtStatement<Integer, Integer> factAtStatement0 = wrappedFactAtStatement0.getAsFactAtStatement();
      assertNotNull(factAtStatement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer>) null);
      // Undeclared exception!
      try { 
        wrappedFactAtStatement0.getResolver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.structs.WrappedFactAtStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer>) null);
      // Undeclared exception!
      try { 
        wrappedFactAtStatement0.getFact();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.structs.WrappedFactAtStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-4049));
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      // Undeclared exception!
      try { 
        wrappedFactAtStatement0.getAccessPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.structs.WrappedFactAtStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      Integer integer0 = new Integer(0);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement1 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = wrappedFactAtStatement1.equals(wrappedFactAtStatement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-85));
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement1 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = wrappedFactAtStatement1.equals(wrappedFactAtStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFact0 = new WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((WrappedFactAtStatement<Integer, Integer, Integer, Integer>) null, (AccessPath<WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null, (Resolver<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, wrappedFact0);
      Integer integer0 = new Integer(1);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement1 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, wrappedFact0);
      boolean boolean0 = wrappedFactAtStatement0.equals(wrappedFactAtStatement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      Integer integer0 = new Integer(1);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement1 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>((Integer) null, wrappedFact0);
      boolean boolean0 = wrappedFactAtStatement0.equals(wrappedFactAtStatement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement1 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = wrappedFactAtStatement1.equals(wrappedFactAtStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = wrappedFactAtStatement0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = wrappedFactAtStatement0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = wrappedFactAtStatement0.equals(wrappedFactAtStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFact0 = new WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((WrappedFactAtStatement<Integer, Integer, Integer, Integer>) null, (AccessPath<WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null, (Resolver<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>((Integer) null, wrappedFact0);
      Integer integer0 = new Integer(1);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement1 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      boolean boolean0 = wrappedFactAtStatement0.equals(wrappedFactAtStatement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(1);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      wrappedFactAtStatement0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>((Integer) null, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>((Integer) null, wrappedFact0);
      wrappedFactAtStatement0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>((Integer) null, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>((Integer) null, wrappedFact0);
      // Undeclared exception!
      try { 
        wrappedFactAtStatement0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>((Integer) null, (AccessPath<WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null, (Resolver<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>((Integer) null, wrappedFact0);
      Integer integer0 = wrappedFactAtStatement0.getFact();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-4026));
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, wrappedFact0);
      AccessPath<Integer> accessPath0 = wrappedFactAtStatement0.getAccessPath();
      assertNull(accessPath0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>((Integer) null, (AccessPath<WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null, (Resolver<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>((Integer) null, wrappedFact0);
      Resolver<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> resolver0 = wrappedFactAtStatement0.getResolver();
      assertNull(resolver0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>((Integer) null, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer> wrappedFactAtStatement1 = new WrappedFactAtStatement<Integer, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer>(wrappedFactAtStatement0, (WrappedFact<Integer, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer>) null);
      Object object0 = wrappedFactAtStatement1.getStatement();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(2);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>((Integer) null, wrappedFact0);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact1 = wrappedFactAtStatement0.getWrappedFact();
      assertSame(wrappedFact1, wrappedFact0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(102);
      WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<WrappedFactAtStatement<Integer, Integer, Integer, Integer>, Integer, Integer, WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        wrappedFactAtStatement0.canDeltaBeApplied((AccessPath.Delta<WrappedFactAtStatement<Integer, Integer, Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.structs.WrappedFactAtStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      // Undeclared exception!
      try { 
        wrappedFactAtStatement0.getAsFactAtStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.structs.WrappedFactAtStatement", e);
      }
  }
}
