/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 04:52:17 GMT 2022
 */

package heros.fieldsens;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.fieldsens.AccessPath;
import heros.fieldsens.CallEdge;
import heros.fieldsens.PerAccessPathMethodAnalyzer;
import heros.fieldsens.Resolver;
import heros.fieldsens.structs.WrappedFact;
import heros.fieldsens.structs.WrappedFactAtStatement;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CallEdge_ESTest extends CallEdge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      doReturn((WrappedFact) null).when(perAccessPathMethodAnalyzer0).wrappedSource();
      Integer integer0 = new Integer(31);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      String string0 = callEdge0.toString();
      assertEquals("[IncEdge CSite:31, Caller-Edge: null->null,  CalleeFact: null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, wrappedFact0);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, wrappedFact0);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact1 = callEdge0.getCallerCallSiteFact();
      assertSame(wrappedFact0, wrappedFact1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3958);
      WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>(integer0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null, wrappedFactAtStatement0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null);
      WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> wrappedFact0 = callEdge0.getCalleeSourceFact();
      assertNull(wrappedFact0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, wrappedFactAtStatement0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      Integer integer0 = callEdge0.getCallSite();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        callEdge0.registerInterestCallback((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.CallEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        callEdge0.getCallerSourceFact();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.CallEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        callEdge0.getCallerCallSiteFact();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.CallEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        callEdge0.getCallSite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.CallEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge1 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, wrappedFactAtStatement0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = callEdge1.equals(callEdge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge1 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = callEdge0.equals(callEdge1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((Integer) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge1 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, wrappedFactAtStatement0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = callEdge0.equals(callEdge1);
      assertFalse(callEdge1.equals((Object)callEdge0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(31);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge1 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      boolean boolean0 = callEdge0.equals(callEdge1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-50));
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge1 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      boolean boolean0 = callEdge1.equals(callEdge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      Integer integer0 = new Integer((-1));
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, (AccessPath<Integer>) null, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, wrappedFact0);
      CallEdge<Integer, Integer, Integer, Integer> callEdge1 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, wrappedFact0);
      boolean boolean0 = callEdge0.equals(callEdge1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2428);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge1 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      boolean boolean0 = callEdge1.equals(callEdge0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      boolean boolean0 = callEdge0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-2023));
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      boolean boolean0 = callEdge0.equals(callEdge0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(31);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      Object object0 = new Object();
      boolean boolean0 = callEdge0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(42);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      callEdge0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      callEdge0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(790);
      WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> wrappedFactAtStatement0 = new WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>(integer0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> wrappedFact0 = new WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>(integer0, (AccessPath<CallEdge<Integer, Integer, Integer, Integer>>) null, (Resolver<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, wrappedFactAtStatement0, wrappedFact0);
      callEdge0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(2428);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = callEdge0.getCallerCallSiteFact();
      assertNull(wrappedFact0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> callEdge0 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>>) null);
      PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, Integer, Integer, CallEdge<Integer, Integer, Integer, Integer>> perAccessPathMethodAnalyzer0 = callEdge0.getCallerAnalyzer();
      assertNull(perAccessPathMethodAnalyzer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      AccessPath<Integer> accessPath0 = new AccessPath<Integer>((Integer[]) null, linkedHashSet0);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = new WrappedFact<Integer, Integer, Integer, Integer>(integer0, accessPath0, (Resolver<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, wrappedFact0);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, wrappedFact0);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact1 = callEdge0.getCalleeSourceFact();
      assertSame(wrappedFact1, wrappedFact0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(2428);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>((PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) null, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      // Undeclared exception!
      try { 
        callEdge0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.fieldsens.CallEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      doReturn((WrappedFact) null).when(perAccessPathMethodAnalyzer0).wrappedSource();
      Integer integer0 = new Integer((-50));
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer> wrappedFactAtStatement1 = new WrappedFactAtStatement<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer>(callEdge0, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer>) null);
      CallEdge<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer> callEdge1 = new CallEdge<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer>((PerAccessPathMethodAnalyzer<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer>) null, wrappedFactAtStatement1, (WrappedFact<CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, CallEdge<Integer, Integer, Integer, Integer>, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge2 = callEdge1.getCallSite();
      assertSame(callEdge0, callEdge2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer> perAccessPathMethodAnalyzer0 = (PerAccessPathMethodAnalyzer<Integer, Integer, Integer, Integer>) mock(PerAccessPathMethodAnalyzer.class, new ViolatedAssumptionAnswer());
      doReturn((WrappedFact) null).when(perAccessPathMethodAnalyzer0).wrappedSource();
      Integer integer0 = new Integer(31);
      WrappedFactAtStatement<Integer, Integer, Integer, Integer> wrappedFactAtStatement0 = new WrappedFactAtStatement<Integer, Integer, Integer, Integer>(integer0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      CallEdge<Integer, Integer, Integer, Integer> callEdge0 = new CallEdge<Integer, Integer, Integer, Integer>(perAccessPathMethodAnalyzer0, wrappedFactAtStatement0, (WrappedFact<Integer, Integer, Integer, Integer>) null);
      WrappedFact<Integer, Integer, Integer, Integer> wrappedFact0 = callEdge0.getCallerSourceFact();
      assertNull(wrappedFact0);
  }
}
