/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:33:06 GMT 2022
 */

package heros;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.TwoElementSet;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TwoElementSet_ESTest extends TwoElementSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-991));
      Integer integer1 = new Integer((-991));
      TwoElementSet<Integer> twoElementSet0 = TwoElementSet.twoElementSet(integer0, integer1);
      assertTrue(twoElementSet0.contains((-991)));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      TwoElementSet<Integer> twoElementSet0 = new TwoElementSet<Integer>(integer0, integer1);
      assertTrue(twoElementSet0.contains(integer1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TwoElementSet<Integer> twoElementSet0 = new TwoElementSet<Integer>(integer0, integer0);
      Iterator<Integer> iterator0 = twoElementSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TwoElementSet<Integer> twoElementSet0 = new TwoElementSet<Integer>(integer0, integer0);
      int int0 = twoElementSet0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      TwoElementSet<Object> twoElementSet0 = new TwoElementSet<Object>(object0, object0);
      // Undeclared exception!
      try { 
        twoElementSet0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.TwoElementSet$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      TwoElementSet<Object> twoElementSet0 = new TwoElementSet<Object>(object0, object0);
      twoElementSet0.contains(twoElementSet0);
      assertTrue(twoElementSet0.contains(object0));
  }
}
