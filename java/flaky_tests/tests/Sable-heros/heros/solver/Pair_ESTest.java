/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 04:56:11 GMT 2022
 */

package heros.solver;

import org.junit.Test;
import static org.junit.Assert.*;
import heros.solver.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer(1);
      pair0.setO1(integer0);
      pair0.setPair((Integer) null, integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>((Integer) null, pair0);
      String string0 = pair1.toString();
      assertEquals("Pair null,Pair null,null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      pair0.hashCode = (-1);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer((-4387));
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>(integer0, pair0);
      Pair<Integer, Integer> pair2 = pair1.getO2();
      assertSame(pair0, pair2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pair<Integer, Pair<Integer, Integer>> pair0 = new Pair<Integer, Pair<Integer, Integer>>();
      Integer integer0 = pair0.getO1();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Pair<Pair<Integer, Integer>, Integer> pair1 = new Pair<Pair<Integer, Integer>, Integer>(pair0, integer0);
      Pair<Integer, Integer> pair2 = pair1.getO1();
      assertSame(pair2, pair0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Pair<Integer, Pair<Integer, Integer>> pair0 = new Pair<Integer, Pair<Integer, Integer>>();
      boolean boolean0 = pair0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair0 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>();
      pair0.setO2(pair1);
      Pair<Integer, Pair<Integer, Integer>> pair2 = new Pair<Integer, Pair<Integer, Integer>>();
      pair2.setO2(pair1);
      boolean boolean0 = pair2.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Pair<Integer, Pair<Integer, Integer>> pair0 = new Pair<Integer, Pair<Integer, Integer>>();
      pair0.setO1(integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer(1);
      pair0.setO1(integer0);
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>();
      pair1.setO1(integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>();
      assertTrue(pair1.equals((Object)pair0));
      
      pair1.o1 = integer0;
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair0 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>();
      pair0.setO2(pair1);
      Pair<Integer, Integer> pair2 = new Pair<Integer, Integer>();
      assertTrue(pair2.equals((Object)pair1));
      
      Integer integer0 = new Integer((-4387));
      pair2.o2 = integer0;
      boolean boolean0 = pair0.equals(pair2);
      assertFalse(pair2.equals((Object)pair1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      boolean boolean0 = pair0.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair0 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer((-4387));
      Pair<Integer, Pair<Integer, Integer>> pair2 = new Pair<Integer, Pair<Integer, Integer>>(integer0, pair1);
      boolean boolean0 = pair2.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer((-4387));
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>(integer0, pair0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Pair<Pair<Integer, Integer>, Integer> pair1 = new Pair<Pair<Integer, Integer>, Integer>(pair0, integer0);
      pair1.hashCode = 3590;
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pair<Pair<Integer, Integer>, Integer> pair0 = new Pair<Pair<Integer, Integer>, Integer>();
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = new Integer((-4387));
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>(integer0, pair0);
      pair1.setPair(integer0, pair0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>();
      Integer integer0 = pair0.getO2();
      assertNull(integer0);
  }
}
