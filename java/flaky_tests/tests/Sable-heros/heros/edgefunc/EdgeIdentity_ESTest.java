/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:14:21 GMT 2022
 */

package heros.edgefunc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.EdgeFunction;
import heros.edgefunc.AllBottom;
import heros.edgefunc.AllTop;
import heros.edgefunc.EdgeIdentity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EdgeIdentity_ESTest extends EdgeIdentity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EdgeIdentity<Integer> edgeIdentity0 = EdgeIdentity.v();
      Integer integer0 = edgeIdentity0.computeTarget((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EdgeIdentity<Object> edgeIdentity0 = EdgeIdentity.v();
      AllTop<Object> allTop0 = new AllTop<Object>(edgeIdentity0);
      EdgeIdentity<AllTop<Object>> edgeIdentity1 = EdgeIdentity.v();
      AllTop<Object> allTop1 = edgeIdentity1.computeTarget(allTop0);
      assertSame(allTop1, allTop0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EdgeIdentity<Object> edgeIdentity0 = EdgeIdentity.v();
      AllTop<Object> allTop0 = new AllTop<Object>(edgeIdentity0);
      EdgeFunction<Object> edgeFunction0 = edgeIdentity0.composeWith(allTop0);
      assertNotNull(edgeFunction0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EdgeIdentity<Integer> edgeIdentity0 = EdgeIdentity.v();
      // Undeclared exception!
      try { 
        edgeIdentity0.meetWith((EdgeFunction<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.edgefunc.EdgeIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EdgeIdentity<AllTop<Object>> edgeIdentity0 = EdgeIdentity.v();
      boolean boolean0 = edgeIdentity0.equalTo(edgeIdentity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EdgeIdentity<Object> edgeIdentity0 = EdgeIdentity.v();
      AllTop<Object> allTop0 = new AllTop<Object>(edgeIdentity0);
      boolean boolean0 = edgeIdentity0.equalTo(allTop0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EdgeIdentity<AllTop<Integer>> edgeIdentity0 = EdgeIdentity.v();
      Integer integer0 = new Integer((-2121));
      AllTop<Integer> allTop0 = new AllTop<Integer>(integer0);
      AllBottom<AllTop<Integer>> allBottom0 = new AllBottom<AllTop<Integer>>(allTop0);
      EdgeFunction<AllTop<Integer>> edgeFunction0 = edgeIdentity0.meetWith(allBottom0);
      assertNotNull(edgeFunction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EdgeIdentity<Object> edgeIdentity0 = EdgeIdentity.v();
      AllTop<Object> allTop0 = new AllTop<Object>(edgeIdentity0);
      EdgeFunction<Object> edgeFunction0 = edgeIdentity0.meetWith(allTop0);
      assertNotNull(edgeFunction0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EdgeIdentity<Object> edgeIdentity0 = EdgeIdentity.v();
      EdgeFunction<Object> edgeFunction0 = edgeIdentity0.meetWith(edgeIdentity0);
      assertNotNull(edgeFunction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EdgeIdentity<Integer> edgeIdentity0 = EdgeIdentity.v();
      String string0 = edgeIdentity0.toString();
      assertEquals("id", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EdgeIdentity<Object> edgeIdentity0 = EdgeIdentity.v();
      EdgeFunction<Object> edgeFunction0 = edgeIdentity0.composeWith((EdgeFunction<Object>) null);
      assertNull(edgeFunction0);
  }
}
