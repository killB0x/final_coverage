/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:10:43 GMT 2022
 */

package heros.flowfunc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.FlowFunction;
import heros.flowfunc.Identity;
import heros.flowfunc.Union;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Union_ESTest extends Union_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Union.union((FlowFunction<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.flowfunc.Union", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FlowFunction<Integer>[] flowFunctionArray0 = (FlowFunction<Integer>[]) Array.newInstance(FlowFunction.class, 1);
      FlowFunction<Integer> flowFunction0 = Union.union(flowFunctionArray0);
      assertNull(flowFunction0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FlowFunction<Integer>[] flowFunctionArray0 = (FlowFunction<Integer>[]) Array.newInstance(FlowFunction.class, 1);
      Identity<Integer> identity0 = Identity.v();
      flowFunctionArray0[0] = (FlowFunction<Integer>) identity0;
      FlowFunction<Integer> flowFunction0 = Union.union(flowFunctionArray0);
      assertNotNull(flowFunction0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FlowFunction<Object>[] flowFunctionArray0 = (FlowFunction<Object>[]) Array.newInstance(FlowFunction.class, 3);
      FlowFunction<Object> flowFunction0 = Union.union(flowFunctionArray0);
      assertNotNull(flowFunction0);
  }
}
