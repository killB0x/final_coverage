/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:25:33 GMT 2022
 */

package heros.flowfunc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.flowfunc.Gen;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Gen_ESTest extends Gen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Gen<Object> gen0 = new Gen<Object>(object0, (Object) null);
      // Undeclared exception!
      try { 
        gen0.computeTargets((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.flowfunc.Gen", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Gen<Object> gen0 = new Gen<Object>(object0, object0);
      Set<Object> set0 = gen0.computeTargets(object0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Gen<Object> gen0 = new Gen<Object>(object0, object0);
      Set<Object> set0 = gen0.computeTargets(gen0);
      assertFalse(set0.contains(object0));
  }
}
