/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 05:19:39 GMT 2022
 */

package heros.flowfunc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heros.flowfunc.Transfer;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transfer_ESTest extends Transfer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Transfer<Object> transfer0 = new Transfer<Object>((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        transfer0.computeTargets((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heros.flowfunc.Transfer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Transfer<Integer> transfer0 = new Transfer<Integer>(integer0, integer0);
      Transfer<Object> transfer1 = new Transfer<Object>(transfer0, integer0);
      Set<Object> set0 = transfer1.computeTargets(transfer0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Transfer<Integer> transfer0 = new Transfer<Integer>(integer0, integer0);
      Transfer<Object> transfer1 = new Transfer<Object>(transfer0, integer0);
      Set<Object> set0 = transfer1.computeTargets(integer0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Transfer<Object> transfer0 = new Transfer<Object>(object0, object0);
      Set<Object> set0 = transfer0.computeTargets(transfer0);
      assertEquals(1, set0.size());
  }
}
