/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 22:13:10 GMT 2022
 */

package io.github.hyunikn.jsonden;

import org.junit.Test;
import static org.junit.Assert.*;
import io.github.hyunikn.jsonden.StrOpt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrOpt_ESTest extends StrOpt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      strOpt0.SERIALIZING.omitComments(true);
      strOpt0.VALUES_ONLY.omitComments(true);
      strOpt0.sortObjectMembers(1683);
      assertEquals(1683, strOpt0.sortObjectMembers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt strOpt1 = strOpt0.initialIndentLevel((-692));
      strOpt1.sortObjectMembers(854);
      assertEquals((-692), strOpt0.initialIndentLevel());
      assertEquals(854, strOpt0.sortObjectMembers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.SERIALIZING;
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt strOpt1 = strOpt0.VALUES_ONLY.sortObjectMembers(0);
      assertEquals(0, strOpt1.sortObjectMembers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      strOpt0.sortObjectMembers(854);
      int int0 = strOpt0.sortObjectMembers();
      assertEquals(854, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt.VALUES_ONLY.sortObjectMembers((-1805));
      int int0 = strOpt0.sortObjectMembers();
      assertEquals((-1805), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      strOpt0.SERIALIZING.omitComments(true);
      strOpt0.VALUES_ONLY.omitComments(true);
      strOpt0.VALUES_ONLY.initialIndentLevel(4);
      strOpt0.omitRemarks(true);
      assertEquals(4, strOpt0.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt.SERIALIZING = strOpt0;
      StrOpt.VALUES_ONLY = strOpt0;
      assertEquals(0, StrOpt.VALUES_ONLY.sortObjectMembers());
      
      StrOpt strOpt1 = StrOpt.VALUES_ONLY.sortObjectMembers((-1805));
      assertFalse(strOpt1.omitRemarks());
      
      StrOpt strOpt2 = StrOpt.SERIALIZING.omitRemarks(false);
      assertEquals((-1805), strOpt2.sortObjectMembers());
      assertFalse(strOpt2.omitRemarks());
      assertFalse(strOpt2.omitComments());
      assertEquals(4, strOpt2.indentSize());
      assertEquals(0, strOpt2.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt strOpt1 = strOpt0.initialIndentLevel((-692));
      strOpt1.omitRemarks(false);
      assertFalse(strOpt1.omitRemarks());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt.SERIALIZING = strOpt0;
      assertEquals(4, StrOpt.SERIALIZING.indentSize());
      
      StrOpt.SERIALIZING.SERIALIZING.indentSize(0);
      strOpt0.omitRemarks(false);
      assertEquals(0, strOpt0.indentSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt.SERIALIZING = strOpt0;
      StrOpt.SERIALIZING.indentSize((-3730));
      strOpt0.omitRemarks(true);
      assertEquals((-3730), strOpt0.indentSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.SERIALIZING;
      StrOpt strOpt1 = strOpt0.indentSize(0);
      strOpt1.omitRemarks = true;
      boolean boolean0 = strOpt1.omitRemarks();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt.VALUES_ONLY.sortObjectMembers((-1805));
      strOpt0.omitComments(true);
      assertEquals((-1805), strOpt0.sortObjectMembers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.SERIALIZING;
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt.VALUES_ONLY.initialIndentLevel(3026);
      strOpt0.omitComments(true);
      assertTrue(strOpt0.omitComments());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt strOpt1 = strOpt0.initialIndentLevel((-692));
      strOpt1.omitComments(false);
      assertFalse(strOpt1.omitComments());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt.SERIALIZING = strOpt0;
      strOpt0.indentSize((-3730));
      assertEquals((-3730), strOpt0.indentSize());
      
      StrOpt strOpt1 = StrOpt.SERIALIZING.SERIALIZING.omitComments(true);
      assertTrue(strOpt1.omitComments());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      assertFalse(strOpt0.omitComments());
      
      strOpt0.omitComments(true);
      boolean boolean0 = strOpt0.omitComments();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt.VALUES_ONLY.sortObjectMembers((-1805));
      strOpt0.initialIndentLevel((-1805));
      assertEquals((-1805), strOpt0.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt strOpt1 = strOpt0.SERIALIZING.initialIndentLevel(0);
      assertEquals(0, strOpt1.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt.SERIALIZING = strOpt0;
      StrOpt.SERIALIZING.initialIndentLevel(1);
      int int0 = strOpt0.initialIndentLevel();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt strOpt1 = strOpt0.initialIndentLevel((-1805));
      int int0 = strOpt1.initialIndentLevel();
      assertEquals((-1805), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt.VALUES_ONLY.sortObjectMembers((-1805));
      strOpt0.indentSize((-1805));
      assertEquals((-1805), strOpt0.sortObjectMembers());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.SERIALIZING;
      StrOpt.VALUES_ONLY = strOpt0;
      StrOpt.VALUES_ONLY.initialIndentLevel(3026);
      strOpt0.indentSize(3026);
      assertEquals(3026, strOpt0.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      strOpt0.initialIndentLevel((-692));
      strOpt0.indentSize(0);
      assertEquals((-692), strOpt0.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      assertEquals(4, strOpt0.indentSize());
      
      strOpt0.indentSize(0);
      int int0 = StrOpt.VALUES_ONLY.indentSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrOpt strOpt0 = StrOpt.VALUES_ONLY;
      StrOpt.SERIALIZING = strOpt0;
      StrOpt.SERIALIZING.indentSize((-3730));
      int int0 = strOpt0.indentSize();
      assertEquals((-3730), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      int int0 = strOpt0.sortObjectMembers();
      assertEquals(4, strOpt0.indentSize());
      assertEquals(0, strOpt0.initialIndentLevel());
      assertFalse(strOpt0.omitComments());
      assertEquals(0, int0);
      assertFalse(strOpt0.omitRemarks());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      boolean boolean0 = strOpt0.omitComments();
      assertEquals(0, strOpt0.sortObjectMembers());
      assertFalse(boolean0);
      assertEquals(4, strOpt0.indentSize());
      assertEquals(0, strOpt0.initialIndentLevel());
      assertFalse(strOpt0.omitRemarks());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = StrOpt.SERIALIZING.initialIndentLevel();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      boolean boolean0 = strOpt0.omitRemarks();
      assertEquals(4, strOpt0.indentSize());
      assertFalse(boolean0);
      assertEquals(0, strOpt0.sortObjectMembers());
      assertFalse(strOpt0.omitComments());
      assertEquals(0, strOpt0.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      strOpt0.indentSize((-1805));
      strOpt0.initialIndentLevel((-1805));
      assertEquals((-1805), strOpt0.initialIndentLevel());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrOpt strOpt0 = new StrOpt();
      int int0 = strOpt0.indentSize();
      assertEquals(0, strOpt0.sortObjectMembers());
      assertFalse(strOpt0.omitComments());
      assertEquals(4, int0);
      assertFalse(strOpt0.omitRemarks());
      assertEquals(0, strOpt0.initialIndentLevel());
  }
}
