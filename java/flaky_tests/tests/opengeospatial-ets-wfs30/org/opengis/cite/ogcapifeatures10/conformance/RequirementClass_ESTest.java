/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 12:47:36 GMT 2022
 */

package org.opengis.cite.ogcapifeatures10.conformance;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.opengis.cite.ogcapifeatures10.conformance.RequirementClass;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RequirementClass_ESTest extends RequirementClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequirementClass[] requirementClassArray0 = RequirementClass.values();
      assertEquals(7, requirementClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.valueOf("GMLSF2");
      assertTrue(requirementClass0.hasMediaTypeForFeaturesAndCollections());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.valueOf("OPENAPI30");
      assertNull(requirementClass0.getMediaTypeOtherResources());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.GMLSF0;
      String string0 = requirementClass0.getMediaTypeOtherResources();
      assertEquals("application/xml", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.byConformanceClass("http://www.opengis.net/spec/ogcapi-features-2/1.0/conf/crs");
      assertEquals(RequirementClass.CRS, requirementClass0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.byConformanceClass("http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html");
      assertEquals(RequirementClass.HTML, requirementClass0);
      
      String string0 = requirementClass0.getMediaTypeFeaturesAndCollections();
      assertEquals("text/html", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequirementClass.byConformanceClass("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.HTML;
      boolean boolean0 = requirementClass0.hasMediaTypeForOtherResources();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.CRS;
      boolean boolean0 = requirementClass0.hasMediaTypeForOtherResources();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.HTML;
      boolean boolean0 = requirementClass0.hasMediaTypeForFeaturesAndCollections();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.CORE;
      boolean boolean0 = requirementClass0.hasMediaTypeForFeaturesAndCollections();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.CRS;
      String string0 = requirementClass0.getMediaTypeFeaturesAndCollections();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequirementClass requirementClass0 = RequirementClass.CORE;
      String string0 = requirementClass0.getMediaTypeOtherResources();
      assertNull(string0);
  }
}
