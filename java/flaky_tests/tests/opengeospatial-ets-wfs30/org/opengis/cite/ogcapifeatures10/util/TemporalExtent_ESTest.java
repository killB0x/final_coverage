/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 12:55:02 GMT 2022
 */

package org.opengis.cite.ogcapifeatures10.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;
import org.opengis.cite.ogcapifeatures10.util.TemporalExtent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemporalExtent_ESTest extends TemporalExtent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      ZonedDateTime zonedDateTime1 = MockZonedDateTime.now();
      TemporalExtent temporalExtent0 = new TemporalExtent(zonedDateTime0, zonedDateTime1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TemporalExtent temporalExtent0 = new TemporalExtent((ZonedDateTime) null, (ZonedDateTime) null);
      ZonedDateTime zonedDateTime0 = temporalExtent0.getEnd();
      assertNull(zonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TemporalExtent temporalExtent0 = new TemporalExtent((ZonedDateTime) null, (ZonedDateTime) null);
      ZonedDateTime zonedDateTime0 = temporalExtent0.getBegin();
      assertNull(zonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDateTime0, (ZoneId) zoneOffset0);
      TemporalExtent temporalExtent0 = new TemporalExtent(zonedDateTime0, zonedDateTime0);
      ZonedDateTime zonedDateTime1 = temporalExtent0.getEnd();
      assertSame(zonedDateTime0, zonedDateTime1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(localDateTime0, (ZoneId) zoneOffset0);
      TemporalExtent temporalExtent0 = new TemporalExtent(zonedDateTime0, zonedDateTime0);
      ZonedDateTime zonedDateTime1 = temporalExtent0.getBegin();
      assertSame(zonedDateTime0, zonedDateTime1);
  }
}
