/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 12:34:51 GMT 2022
 */

package com.kvn.poi.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.kvn.poi.common.ReflectionUtil;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionUtil_ESTest extends ReflectionUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ReflectionUtil.isWrapClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ReflectionUtil.isPrimitiveOrWrapClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ReflectionUtil.hasDefaultConstructor(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getMethodReturnType(class0, "clone");
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.isPrimitiveOrWrapClass((Class) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kvn.poi.common.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.hasDefaultConstructor((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kvn.poi.common.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.getParameterizedTypes(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kvn.poi.common.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionUtil.getParameterizedTypes(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.kvn.poi.common.ReflectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        ReflectionUtil.getClass((Type) class0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<?> class0 = ReflectionUtil.getClass((Type) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ReflectionUtil.getClassName(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ReflectionUtil.getClassName((Type) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ReflectionUtil.isWrapClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionUtil.getEnumConstant(class0, "com.kvn.poi.common.ReflectionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ReflectionUtil.getEnumConstant(class0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ReflectionUtil.getEnumConstant(class0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = ReflectionUtil.getEnumConstant((Class<?>) null, "LUK`");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getMethodReturnType(class0, "notify");
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ReflectionUtil.getMethodReturnType(class0, "");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getMethodReturnType(class0, (String) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getMethodReturnType(class0, "{~86RQ^H`VRQ52");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<?> class0 = ReflectionUtil.getMethodReturnType((Class<?>) null, "&LSH2s>RBA$]");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ReflectionUtil.getFieldClass(class0, "digits");
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ReflectionUtil.getFieldClass(class0, "value");
      assertNotNull(class1);
      
      boolean boolean0 = ReflectionUtil.isPrimitiveOrWrapClass(class1);
      assertTrue(boolean0);
      assertEquals("int", class1.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getFieldClass(class0, "");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getFieldClass(class0, (String) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ReflectionUtil.getFieldClass(class0, "%J|U5");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<?> class0 = ReflectionUtil.getFieldClass((Class<?>) null, "%J|U5");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = ReflectionUtil.getParameterizedTypes(class0);
      assertNull(typeArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = ReflectionUtil.getParameterizedTypes((Object) class0);
      assertNull(typeArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = ReflectionUtil.newInstance((Type) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        ReflectionUtil.newInstance(class0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ReflectionUtil.hasDefaultConstructor(class0);
      assertTrue(boolean0);
  }
}
