/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 06:46:54 GMT 2022
 */

package com.buck.commons.i18n;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.buck.commons.i18n.DateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTime_ESTest extends DateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, (-652));
      TimeZone timeZone0 = TimeZone.getDefault();
      long long0 = DateTime.getTimeZoneOffset(mockDate0, timeZone0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2262, 2262, 1, 2262, 1);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeZone.setDefault(timeZone0);
      long long0 = DateTime.getDefaultTimeZoneOffset(mockDate0);
      assertEquals(64800000L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, (-652));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-652), "k*PlV9 Rj{*`>%$+s");
      TimeZone.setDefault(simpleTimeZone0);
      long long0 = DateTime.getDefaultTimeZoneOffset(mockDate0);
      assertEquals((-652L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateTime.getTimeZoneOffset(mockDate0, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.buck.commons.i18n.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.getDefaultTimeZoneOffset((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, (-652));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-652), "k*PlV9 Rj{*`>%$+s");
      long long0 = DateTime.getTimeZoneOffset(mockDate0, simpleTimeZone0);
      assertEquals((-652L), long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "2F>s: DEQh=", 1, 1, 1, 1, 1, 1, 1, 1);
      long long0 = DateTime.getTimeZoneOffset(mockDate0, simpleTimeZone0);
      assertEquals(3600001L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, (-652));
      long long0 = DateTime.getDefaultTimeZoneOffset(mockDate0);
      assertEquals(0L, long0);
  }
}
