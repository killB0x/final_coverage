/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:38:24 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.dynjs.ir.Operand;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.Mul;
import org.dynjs.ir.operands.DynamicVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Mul_ESTest extends Mul_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "\"yC+@dw>7G|)';j'[h", true);
      Variable variable0 = scope0.acquireTemporaryVariable((-1615));
      Mul mul0 = new Mul(variable0, variable0, (Operand) null);
      assertEquals((-1), mul0.getIPC());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Mul mul0 = new Mul(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      Variable variable0 = mul0.getResult();
      assertSame(variable0, dynamicVariable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Mul mul0 = new Mul(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      Operand operand0 = mul0.getRHS();
      assertSame(operand0, dynamicVariable0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Mul mul0 = new Mul(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      DynamicVariable dynamicVariable1 = (DynamicVariable)mul0.getLHS();
      assertEquals("", dynamicVariable1.getName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      Mul mul0 = new Mul((Variable) null, (Operand) null, (Operand) null);
      // Undeclared exception!
      try { 
        mul0.simplifyOperands(hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Mul", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Mul mul0 = new Mul(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      mul0.simplifyOperands(hashMap0, false);
      assertEquals((-1), mul0.getIPC());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Mul mul0 = new Mul((Variable) null, (Operand) null, (Operand) null);
      Variable variable0 = mul0.getResult();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Mul mul0 = new Mul((Variable) null, (Operand) null, (Operand) null);
      Operand[] operandArray0 = mul0.getOperands();
      assertEquals(3, operandArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Mul mul0 = new Mul((Variable) null, (Operand) null, (Operand) null);
      Operand operand0 = mul0.getRHS();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Mul mul0 = new Mul((Variable) null, (Operand) null, (Operand) null);
      Operand operand0 = mul0.getLHS();
      assertNull(operand0);
  }
}
