/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 22:02:30 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.dynjs.ir.Operand;
import org.dynjs.ir.OperandType;
import org.dynjs.ir.Operation;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.LT;
import org.dynjs.ir.operands.BooleanLiteral;
import org.dynjs.ir.operands.LocalVariable;
import org.dynjs.ir.operands.TemporaryVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LT_ESTest extends LT_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "", false);
      Variable variable0 = scope0.createTemporaryVariable();
      LocalVariable localVariable0 = new LocalVariable("", 32, 32);
      BooleanLiteral booleanLiteral0 = BooleanLiteral.FALSE;
      LT lT0 = new LT(variable0, localVariable0, booleanLiteral0);
      assertEquals(Operation.LT, lT0.getOperation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "", false);
      Variable variable0 = scope0.createTemporaryVariable();
      LT lT0 = new LT(variable0, variable0, variable0);
      lT0.updateResult((Variable) null);
      Variable variable1 = lT0.getResult();
      assertNull(variable1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LT lT0 = new LT((Variable) null, (Operand) null, (Operand) null);
      Operand operand0 = lT0.getArg2();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((String) null, 3271, 0);
      LT lT0 = new LT(localVariable0, localVariable0, localVariable0);
      Operand operand0 = lT0.getArg1();
      assertEquals(OperandType.LOCAL_VAR, operand0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LT lT0 = new LT((Variable) null, (Operand) null, (Operand) null);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        lT0.simplifyOperands(hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.LT", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "", false);
      Variable variable0 = scope0.createTemporaryVariable();
      LT lT0 = new LT(variable0, variable0, variable0);
      String string0 = lT0.toString();
      assertEquals("%t_0{0} = %t_0{0} < %t_0{0}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "", false);
      Variable variable0 = scope0.createTemporaryVariable();
      LT lT0 = new LT(variable0, variable0, variable0);
      Variable variable1 = lT0.getResult();
      assertSame(variable1, variable0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "", false);
      Variable variable0 = scope0.createTemporaryVariable();
      LT lT0 = new LT(variable0, variable0, variable0);
      TemporaryVariable temporaryVariable0 = (TemporaryVariable)lT0.getArg2();
      assertEquals(0, temporaryVariable0.getOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LT lT0 = new LT((Variable) null, (Operand) null, (Operand) null);
      Operand operand0 = lT0.getArg1();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "", false);
      Variable variable0 = scope0.createTemporaryVariable();
      LT lT0 = new LT(variable0, variable0, variable0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      lT0.simplifyOperands(hashMap0, true);
      assertFalse(lT0.transfersControl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LT lT0 = new LT((Variable) null, (Operand) null, (Operand) null);
      Operand[] operandArray0 = lT0.getOperands();
      assertEquals(3, operandArray0.length);
  }
}
