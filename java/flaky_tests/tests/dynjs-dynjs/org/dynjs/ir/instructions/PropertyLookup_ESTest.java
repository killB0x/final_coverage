/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 22:12:02 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.dynjs.ir.Operand;
import org.dynjs.ir.OperandType;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.PropertyLookup;
import org.dynjs.ir.operands.TemporaryVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyLookup_ESTest extends PropertyLookup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporaryVariable temporaryVariable0 = new TemporaryVariable(0);
      PropertyLookup propertyLookup0 = new PropertyLookup(temporaryVariable0, temporaryVariable0, "n]lN3/3@M4lxJ");
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      propertyLookup0.simplifyOperands(hashMap0, false);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TemporaryVariable temporaryVariable0 = new TemporaryVariable(0);
      PropertyLookup propertyLookup0 = new PropertyLookup(temporaryVariable0, temporaryVariable0, "n]lN3/3@M4lxJ");
      Variable variable0 = propertyLookup0.getResult();
      assertSame(variable0, temporaryVariable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "OW", true);
      Variable variable0 = scope0.acquireTemporaryVariable(0);
      PropertyLookup propertyLookup0 = new PropertyLookup(variable0, variable0, (String) null);
      String string0 = propertyLookup0.getIdentifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemporaryVariable temporaryVariable0 = new TemporaryVariable(0);
      PropertyLookup propertyLookup0 = new PropertyLookup(temporaryVariable0, temporaryVariable0, "n]lN3/3@M4lxJ");
      String string0 = propertyLookup0.getIdentifier();
      assertEquals("n]lN3/3@M4lxJ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporaryVariable temporaryVariable0 = new TemporaryVariable(0);
      PropertyLookup propertyLookup0 = new PropertyLookup(temporaryVariable0, temporaryVariable0, "n]lN3/3@M4lxJ");
      Operand operand0 = propertyLookup0.getBase();
      assertEquals(OperandType.TEMP_VAR, operand0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "");
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        propertyLookup0.simplifyOperands(hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.PropertyLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "");
      String string0 = propertyLookup0.toString();
      assertEquals("null = null[]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "");
      Operand[] operandArray0 = propertyLookup0.getOperands();
      assertEquals(2, operandArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "");
      String string0 = propertyLookup0.getIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "*l@v=w%+");
      Variable variable0 = propertyLookup0.getResult();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "");
      Operand operand0 = propertyLookup0.getBase();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, (Operand) null, "");
      propertyLookup0.updateResult((Variable) null);
      assertEquals((-1), propertyLookup0.getIPC());
  }
}
