/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:46:13 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.dynjs.ir.Operand;
import org.dynjs.ir.instructions.Copy;
import org.dynjs.ir.operands.TemporaryLocalVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Copy_ESTest extends Copy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-1161));
      Copy copy0 = new Copy((Variable) null, temporaryLocalVariable0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      copy0.simplifyOperands(hashMap0, true);
      assertFalse(copy0.canRaiseException());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Copy copy0 = new Copy((Variable) null, (Operand) null);
      Operand operand0 = copy0.getValue();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-1161));
      Copy copy0 = new Copy((Variable) null, temporaryLocalVariable0);
      copy0.updateResult(temporaryLocalVariable0);
      TemporaryLocalVariable temporaryLocalVariable1 = (TemporaryLocalVariable)copy0.getResult();
      assertEquals((-1161), temporaryLocalVariable1.getOffset());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      Copy copy0 = new Copy((Variable) null, (Operand) null);
      // Undeclared exception!
      try { 
        copy0.simplifyOperands(hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Copy", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-1161));
      Copy copy0 = new Copy((Variable) null, temporaryLocalVariable0);
      Variable variable0 = copy0.getResult();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-1161));
      Copy copy0 = new Copy((Variable) null, temporaryLocalVariable0);
      String string0 = copy0.toString();
      assertEquals("null = %t__-1161{-1161} (copy)", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-1161));
      Copy copy0 = new Copy((Variable) null, temporaryLocalVariable0);
      TemporaryLocalVariable temporaryLocalVariable1 = (TemporaryLocalVariable)copy0.getValue();
      assertEquals((-1161), temporaryLocalVariable1.getOffset());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-1161));
      Copy copy0 = new Copy((Variable) null, temporaryLocalVariable0);
      Operand[] operandArray0 = copy0.getOperands();
      assertEquals(2, operandArray0.length);
  }
}
