/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:53:30 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.dynjs.ir.FunctionScope;
import org.dynjs.ir.Operand;
import org.dynjs.ir.Operation;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.Add;
import org.dynjs.ir.instructions.Instanceof;
import org.dynjs.ir.instructions.Sub;
import org.dynjs.ir.operands.DynamicVariable;
import org.dynjs.ir.operands.LocalVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryInstr_ESTest extends BinaryInstr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable("-`kS?}%1", 0, 0);
      String[] stringArray0 = new String[7];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "-`kS?}%1", true, stringArray0, "");
      Variable variable0 = functionScope0.createTemporaryVariable();
      Add add0 = new Add(variable0, localVariable0, variable0);
      assertFalse(add0.transfersControl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Sub sub0 = new Sub(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      sub0.simplifyOperands(hashMap0, true);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instanceof instanceof0 = new Instanceof((Variable) null, (Operand) null, (Operand) null);
      Variable variable0 = instanceof0.getResult();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "", false, stringArray0, "===");
      Variable variable0 = functionScope0.createTemporaryVariable();
      Instanceof instanceof0 = new Instanceof(variable0, variable0, variable0);
      Variable variable1 = instanceof0.getResult();
      assertSame(variable0, variable1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instanceof instanceof0 = new Instanceof((Variable) null, (Operand) null, (Operand) null);
      Operand operand0 = instanceof0.getRHS();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Add add0 = new Add(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      Operand operand0 = add0.getRHS();
      assertSame(dynamicVariable0, operand0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instanceof instanceof0 = new Instanceof((Variable) null, (Operand) null, (Operand) null);
      Operand operand0 = instanceof0.getLHS();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("");
      Sub sub0 = new Sub(dynamicVariable0, dynamicVariable0, dynamicVariable0);
      DynamicVariable dynamicVariable1 = (DynamicVariable)sub0.getLHS();
      assertEquals("", dynamicVariable1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instanceof instanceof0 = new Instanceof((Variable) null, (Operand) null, (Operand) null);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        instanceof0.simplifyOperands(hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.BinaryInstr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instanceof instanceof0 = new Instanceof((Variable) null, (Operand) null, (Operand) null);
      Operand[] operandArray0 = instanceof0.getOperands();
      assertEquals(3, operandArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instanceof instanceof0 = new Instanceof((Variable) null, (Operand) null, (Operand) null);
      instanceof0.updateResult((Variable) null);
      assertEquals(Operation.INSTANCEOF, instanceof0.getOperation());
  }
}
