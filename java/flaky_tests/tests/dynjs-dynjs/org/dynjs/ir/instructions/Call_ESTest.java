/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:13:51 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.dynjs.ir.Operand;
import org.dynjs.ir.OperandType;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.Call;
import org.dynjs.ir.operands.LocalVariable;
import org.dynjs.ir.operands.StringLiteral;
import org.dynjs.ir.operands.TemporaryLocalVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Call_ESTest extends Call_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", 1097);
      StringLiteral stringLiteral0 = new StringLiteral("");
      Operand[] operandArray0 = new Operand[3];
      Call call0 = new Call(temporaryLocalVariable0, temporaryLocalVariable0, stringLiteral0, operandArray0);
      // Undeclared exception!
      try { 
        call0.getUsedVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, operandArray0);
      Operand operand0 = call0.getSelf();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Operand[] operandArray0 = new Operand[5];
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, operandArray0);
      Variable variable0 = call0.getResult();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Operand[] operandArray0 = new Operand[2];
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, operandArray0);
      Operand operand0 = call0.getIdentifier();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, "7", true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Call call0 = new Call(variable0, variable0, variable0, (Operand[]) null);
      Operand[] operandArray0 = call0.getArgs();
      assertNull(operandArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, operandArray0);
      Operand[] operandArray1 = call0.getArgs();
      assertSame(operandArray0, operandArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, (Operand[]) null);
      // Undeclared exception!
      try { 
        call0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, (Operand[]) null);
      // Undeclared exception!
      try { 
        call0.getOperands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", 1097);
      StringLiteral stringLiteral0 = new StringLiteral("");
      Operand[] operandArray0 = new Operand[3];
      Call call0 = new Call(temporaryLocalVariable0, temporaryLocalVariable0, stringLiteral0, operandArray0);
      String string0 = call0.toString();
      assertEquals("%t__1097{1097} = call %t__1097{1097}, \"\", null, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String) null, true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Variable variable1 = scope0.acquireLocalVariable("");
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call(variable0, variable1, variable1, operandArray0);
      String string0 = call0.toString();
      assertEquals("%t_0{0} = call {0, 0}, {0, 0}, ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", 1097);
      StringLiteral stringLiteral0 = new StringLiteral("");
      Operand[] operandArray0 = new Operand[3];
      Call call0 = new Call(temporaryLocalVariable0, temporaryLocalVariable0, stringLiteral0, operandArray0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        call0.simplifyOperands(hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String) null, true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Variable variable1 = scope0.acquireLocalVariable("");
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call(variable0, variable1, variable1, operandArray0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      call0.simplifyOperands(hashMap0, false);
      assertFalse(call0.canRaiseException());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String) null, true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Variable variable1 = scope0.acquireLocalVariable("");
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call(variable0, variable1, variable1, operandArray0);
      Variable variable2 = call0.getResult();
      assertEquals(OperandType.TEMP_VAR, variable2.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String) null, true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Variable variable1 = scope0.acquireLocalVariable("");
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call(variable0, variable1, variable1, operandArray0);
      call0.updateResult(variable1);
      assertFalse(call0.canRaiseException());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String) null, true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Variable variable1 = scope0.acquireLocalVariable("");
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call(variable0, variable1, variable1, operandArray0);
      LocalVariable localVariable0 = (LocalVariable)call0.getIdentifier();
      assertEquals(0, localVariable0.getDepth());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Operand[] operandArray0 = new Operand[2];
      Call call0 = new Call((Variable) null, (Operand) null, (Operand) null, operandArray0);
      Operand[] operandArray1 = call0.getArgs();
      assertSame(operandArray1, operandArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", 1097);
      StringLiteral stringLiteral0 = new StringLiteral("");
      Operand[] operandArray0 = new Operand[3];
      Call call0 = new Call(temporaryLocalVariable0, temporaryLocalVariable0, stringLiteral0, operandArray0);
      TemporaryLocalVariable temporaryLocalVariable1 = (TemporaryLocalVariable)call0.getSelf();
      assertEquals(1097, temporaryLocalVariable1.getOffset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String) null, true);
      Variable variable0 = scope0.acquireTemporaryVariable((-568));
      Variable variable1 = scope0.acquireLocalVariable("");
      Operand[] operandArray0 = new Operand[0];
      Call call0 = new Call(variable0, variable1, variable1, operandArray0);
      Operand[] operandArray1 = call0.getOperands();
      assertEquals(3, operandArray1.length);
  }
}
