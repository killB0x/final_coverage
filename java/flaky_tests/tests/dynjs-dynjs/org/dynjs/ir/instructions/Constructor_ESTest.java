/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:09:16 GMT 2022
 */

package org.dynjs.ir.instructions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.dynjs.ir.FunctionScope;
import org.dynjs.ir.Operand;
import org.dynjs.ir.Operation;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.Constructor;
import org.dynjs.ir.operands.Label;
import org.dynjs.ir.operands.LocalVariable;
import org.dynjs.ir.operands.TemporaryVariable;
import org.dynjs.ir.operands.This;
import org.dynjs.ir.operands.Undefined;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Constructor_ESTest extends Constructor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Operand[] operandArray0 = new Operand[2];
      Constructor constructor0 = new Constructor((Variable) null, (Operand) null, operandArray0);
      Operand operand0 = constructor0.getIdentifier();
      assertNull(operand0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "Z", false, (String[]) null, "`bFIzu8%");
      Variable variable0 = functionScope0.acquireLocalVariable((String) null);
      Constructor constructor0 = new Constructor(variable0, variable0, (Operand[]) null);
      Operand[] operandArray0 = constructor0.getArgs();
      assertNull(operandArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable("k>a;q@b<Qg", 1692, 1692);
      Operand[] operandArray0 = new Operand[0];
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      Operand[] operandArray1 = constructor0.getArgs();
      assertSame(operandArray0, operandArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "Z", false, (String[]) null, "`bFIzu8%");
      Variable variable0 = functionScope0.acquireLocalVariable((String) null);
      Constructor constructor0 = new Constructor(variable0, variable0, (Operand[]) null);
      // Undeclared exception!
      try { 
        constructor0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Constructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Operand[] operandArray0 = new Operand[1];
      Constructor constructor0 = new Constructor((Variable) null, (Operand) null, operandArray0);
      // Undeclared exception!
      try { 
        constructor0.simplifyOperands((Map<Operand, Operand>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Constructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      This this0 = This.THIS;
      Operand[] operandArray0 = new Operand[1];
      Constructor constructor0 = new Constructor((Variable) null, this0, operandArray0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        constructor0.simplifyOperands(hashMap0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.dynjs.ir.instructions.Constructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constructor constructor0 = new Constructor((Variable) null, (Operand) null, (Operand[]) null);
      // Undeclared exception!
      try { 
        constructor0.getOperands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Constructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Operand[] operandArray0 = new Operand[0];
      Constructor constructor0 = new Constructor((Variable) null, (Operand) null, operandArray0);
      String string0 = constructor0.toString();
      assertEquals("null = new null()", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(", ", (-590), (-590));
      Operand[] operandArray0 = new Operand[8];
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      String string0 = constructor0.toString();
      assertEquals(", {-590, -590} = new , {-590, -590}(null, null, null, null, null, null, null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(", ", (-590), (-590));
      Operand[] operandArray0 = new Operand[8];
      Label label0 = new Label("", 0);
      operandArray0[1] = (Operand) label0;
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      constructor0.simplifyOperands(hashMap0, true);
      assertEquals(Operation.CONSTRUCTOR, constructor0.getOperation());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(", ", (-590), (-590));
      Operand[] operandArray0 = new Operand[8];
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      constructor0.updateResult((Variable) null);
      Variable variable0 = constructor0.getResult();
      assertNull(variable0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(", ", (-590), (-590));
      Operand[] operandArray0 = new Operand[8];
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      Operand[] operandArray1 = constructor0.getOperands();
      assertEquals(10, operandArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(", ", (-590), (-590));
      Operand[] operandArray0 = new Operand[8];
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      LocalVariable localVariable1 = (LocalVariable)constructor0.getResult();
      assertEquals((-590), localVariable1.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(", ", (-590), (-590));
      Operand[] operandArray0 = new Operand[8];
      Constructor constructor0 = new Constructor(localVariable0, localVariable0, operandArray0);
      Operand[] operandArray1 = constructor0.getArgs();
      assertSame(operandArray0, operandArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemporaryVariable temporaryVariable0 = new TemporaryVariable(0);
      Undefined undefined0 = (Undefined)Undefined.UNDEFINED;
      Operand[] operandArray0 = new Operand[2];
      Constructor constructor0 = new Constructor(temporaryVariable0, undefined0, operandArray0);
      Operand operand0 = constructor0.getIdentifier();
      assertEquals("%undefined", operand0.toString());
  }
}
