/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:11:02 GMT 2022
 */

package org.dynjs.ir;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.function.BiFunction;
import org.dynjs.ir.FunctionScope;
import org.dynjs.ir.Operand;
import org.dynjs.ir.Scope;
import org.dynjs.ir.instructions.Call;
import org.dynjs.ir.instructions.Constructor;
import org.dynjs.ir.instructions.ExceptionRegionEndMarker;
import org.dynjs.ir.instructions.ExceptionRegionStartMarker;
import org.dynjs.ir.instructions.Mul;
import org.dynjs.ir.instructions.PropertyLookup;
import org.dynjs.ir.instructions.Return;
import org.dynjs.ir.instructions.ThrowException;
import org.dynjs.ir.operands.BooleanLiteral;
import org.dynjs.ir.operands.DynamicVariable;
import org.dynjs.ir.operands.Label;
import org.dynjs.ir.operands.LocalVariable;
import org.dynjs.ir.operands.Null;
import org.dynjs.ir.operands.TemporaryLocalVariable;
import org.dynjs.ir.operands.TemporaryVariable;
import org.dynjs.ir.operands.Variable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Instruction_ESTest extends Instruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      return0.transfersControl();
      assertEquals((-1), return0.getIPC());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "", true, stringArray0, "org.dynjs.debugger.requests.SetBreakpointResponse");
      Variable variable0 = functionScope0.acquireTemporaryVariable(1);
      PropertyLookup propertyLookup0 = new PropertyLookup(variable0, variable0, "");
      List<Variable> list0 = propertyLookup0.getUsedVariables();
      assertEquals(2, list0.size());
      assertEquals((-1), propertyLookup0.getIPC());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      return0.getOperands();
      assertEquals((-1), return0.getIPC());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Label label0 = Label.UNRESCUED_REGION_LABEL;
      ExceptionRegionStartMarker exceptionRegionStartMarker0 = new ExceptionRegionStartMarker(label0);
      exceptionRegionStartMarker0.getOperands();
      assertEquals((-1), exceptionRegionStartMarker0.getIPC());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExceptionRegionEndMarker exceptionRegionEndMarker0 = new ExceptionRegionEndMarker();
      assertEquals((-1), exceptionRegionEndMarker0.getIPC());
      
      exceptionRegionEndMarker0.setIPC(0);
      int int0 = exceptionRegionEndMarker0.getIPC();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Return return0 = new Return((Operand) null);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        return0.renameVariables(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Return", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      BooleanLiteral booleanLiteral0 = BooleanLiteral.TRUE;
      hashMap0.put((Operand) null, booleanLiteral0);
      PropertyLookup propertyLookup0 = new PropertyLookup((Variable) null, booleanLiteral0, "");
      // Undeclared exception!
      try { 
        propertyLookup0.renameVariables(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.dynjs.ir.operands.BooleanLiteral cannot be cast to class org.dynjs.ir.operands.Variable (org.dynjs.ir.operands.BooleanLiteral and org.dynjs.ir.operands.Variable are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @14328ed2)
         //
         verifyException("org.dynjs.ir.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicVariable dynamicVariable0 = new DynamicVariable("-ih;1g|+");
      Operand[] operandArray0 = new Operand[1];
      Constructor constructor0 = new Constructor(dynamicVariable0, dynamicVariable0, operandArray0);
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      // Undeclared exception!
      try { 
        constructor0.renameVariables(hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.dynjs.ir.instructions.Constructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Return return0 = new Return((Operand) null);
      // Undeclared exception!
      try { 
        return0.getUsedVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      LocalVariable localVariable0 = new LocalVariable("EEyD/5vszDl@r", 9, 9);
      Call call0 = new Call(localVariable0, null0, localVariable0, (Operand[]) null);
      // Undeclared exception!
      try { 
        call0.getOperands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.ir.instructions.Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "", true, stringArray0, "org.dynjs.debugger.requests.SetBreakpointResponse");
      Variable variable0 = functionScope0.acquireTemporaryVariable(1);
      PropertyLookup propertyLookup0 = new PropertyLookup(variable0, variable0, "");
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      TemporaryLocalVariable temporaryLocalVariable0 = new TemporaryLocalVariable("", (-624));
      BiFunction<Object, Object, TemporaryVariable> biFunction0 = (BiFunction<Object, Object, TemporaryVariable>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(variable0, temporaryLocalVariable0, biFunction0);
      propertyLookup0.renameVariables(hashMap0);
      assertEquals((-1), propertyLookup0.getIPC());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "", true, stringArray0, "org.dynjs.debugger.requests.SetBreakpointResponse");
      Variable variable0 = functionScope0.acquireTemporaryVariable(1);
      PropertyLookup propertyLookup0 = new PropertyLookup(variable0, variable0, "");
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      propertyLookup0.renameVariables(hashMap0);
      assertEquals((-1), propertyLookup0.getIPC());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExceptionRegionEndMarker exceptionRegionEndMarker0 = new ExceptionRegionEndMarker();
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      exceptionRegionEndMarker0.renameVariables(hashMap0);
      assertEquals((-1), exceptionRegionEndMarker0.getIPC());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      return0.getUsedVariables();
      assertEquals((-1), return0.getIPC());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      boolean boolean0 = return0.canRaiseException();
      assertFalse(boolean0);
      assertEquals((-1), return0.getIPC());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      int int0 = return0.getIPC();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      String[] stringArray0 = new String[5];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, "org.dynjs.ir.Instruction", false, stringArray0, "");
      boolean boolean0 = return0.computeScopeFlags(functionScope0);
      assertFalse(boolean0);
      assertEquals((-1), return0.getIPC());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FunctionScope functionScope0 = new FunctionScope((Scope) null, (String) null, false, stringArray0, (String) null);
      Variable variable0 = functionScope0.acquireLocalVariable(stringArray0[1]);
      Variable variable1 = functionScope0.acquireTemporaryVariable(3623);
      Mul mul0 = new Mul(variable0, variable0, variable1);
      boolean boolean0 = mul0.transfersControl();
      assertEquals((-1), mul0.getIPC());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExceptionRegionEndMarker exceptionRegionEndMarker0 = new ExceptionRegionEndMarker();
      exceptionRegionEndMarker0.getOperation();
      assertEquals((-1), exceptionRegionEndMarker0.getIPC());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExceptionRegionEndMarker exceptionRegionEndMarker0 = new ExceptionRegionEndMarker();
      exceptionRegionEndMarker0.dump("");
      assertEquals((-1), exceptionRegionEndMarker0.getIPC());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Null null0 = (Null)Null.NULL;
      Return return0 = new Return(null0);
      return0.setIPC(10);
      int int0 = return0.getIPC();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThrowException throwException0 = new ThrowException();
      HashMap<Operand, Operand> hashMap0 = new HashMap<Operand, Operand>();
      throwException0.simplifyOperands(hashMap0, false);
      assertEquals((-1), throwException0.getIPC());
  }
}
