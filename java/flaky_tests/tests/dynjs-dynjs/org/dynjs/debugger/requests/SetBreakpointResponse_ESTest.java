/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 22:14:23 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.dynjs.debugger.requests.SetBreakpointRequest;
import org.dynjs.debugger.requests.SetBreakpointResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SetBreakpointResponse_ESTest extends SetBreakpointResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SetBreakpointResponse.ActualLocation setBreakpointResponse_ActualLocation0 = new SetBreakpointResponse.ActualLocation(1705, (-40), (-719));
      assertEquals((-719), setBreakpointResponse_ActualLocation0.getColumn());
      assertEquals(1705, setBreakpointResponse_ActualLocation0.getScriptId());
      assertEquals((-40), setBreakpointResponse_ActualLocation0.getLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, 0, false, true);
      setBreakpointRequest0.setType("nq");
      String string0 = setBreakpointResponse0.getType();
      assertEquals("nq", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      setBreakpointRequest0.setType("");
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, 0L, false, false);
      String string0 = setBreakpointResponse0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, 1279L, true, false);
      long long0 = setBreakpointResponse0.getNumber();
      assertEquals(1279L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, (-768L), true, false);
      long long0 = setBreakpointResponse0.getNumber();
      assertEquals((-768L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse((SetBreakpointRequest) null, (-3), true, true);
      // Undeclared exception!
      try { 
        setBreakpointResponse0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.debugger.requests.SetBreakpointResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, 0L, false, false);
      String string0 = setBreakpointResponse0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, 0L, false, false);
      long long0 = setBreakpointResponse0.getNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SetBreakpointRequest setBreakpointRequest0 = new SetBreakpointRequest();
      SetBreakpointResponse setBreakpointResponse0 = new SetBreakpointResponse(setBreakpointRequest0, 0L, false, false);
      List<SetBreakpointResponse.ActualLocation> list0 = setBreakpointResponse0.getActualLocations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SetBreakpointResponse.ActualLocation setBreakpointResponse_ActualLocation0 = new SetBreakpointResponse.ActualLocation(0, 0, 0);
      int int0 = setBreakpointResponse_ActualLocation0.getLine();
      assertEquals(0, setBreakpointResponse_ActualLocation0.getScriptId());
      assertEquals(0, int0);
      assertEquals(0, setBreakpointResponse_ActualLocation0.getColumn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SetBreakpointResponse.ActualLocation setBreakpointResponse_ActualLocation0 = new SetBreakpointResponse.ActualLocation(0, 0, 0);
      int int0 = setBreakpointResponse_ActualLocation0.getColumn();
      assertEquals(0, setBreakpointResponse_ActualLocation0.getScriptId());
      assertEquals(0, int0);
      assertEquals(0, setBreakpointResponse_ActualLocation0.getLine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SetBreakpointResponse.ActualLocation setBreakpointResponse_ActualLocation0 = new SetBreakpointResponse.ActualLocation(21, 21, 21);
      int int0 = setBreakpointResponse_ActualLocation0.getScriptId();
      assertEquals(21, setBreakpointResponse_ActualLocation0.getColumn());
      assertEquals(21, setBreakpointResponse_ActualLocation0.getLine());
      assertEquals(21, int0);
  }
}
