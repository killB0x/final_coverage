/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 22:04:21 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dynjs.debugger.requests.SourceRequest;
import org.dynjs.debugger.requests.SourceResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceResponse_ESTest extends SourceResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, " ^T\"m", 0, 0, false, false);
      int int0 = sourceResponse0.getToLine();
      assertEquals(0, int0);
      assertEquals(0, sourceResponse0.getFromLine());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, "+dc UD{\"!}", 2965, 2965, false, true);
      int int0 = sourceResponse0.getToLine();
      assertEquals(2965, int0);
      assertEquals(2965, sourceResponse0.getFromLine());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, "; toLine=", (-684), (-684), true, true);
      sourceResponse0.getSource();
      assertEquals((-684), sourceResponse0.getToLine());
      assertEquals((-684), sourceResponse0.getFromLine());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, "", 3903, 3903, false, true);
      sourceResponse0.getSource();
      assertEquals(3903, sourceResponse0.getFromLine());
      assertEquals(3903, sourceResponse0.getToLine());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, "", 0, 0, false, false);
      int int0 = sourceResponse0.getFromLine();
      assertEquals(0, int0);
      assertEquals(0, sourceResponse0.getToLine());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, "+dc UD{\"!}", 2965, 2965, false, true);
      int int0 = sourceResponse0.getFromLine();
      assertEquals(2965, sourceResponse0.getToLine());
      assertEquals(2965, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, (String) null, (-1790), (-1), false, false);
      int int0 = sourceResponse0.getToLine();
      assertEquals((-1790), sourceResponse0.getFromLine());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, (String) null, (-1790), (-1), false, false);
      int int0 = sourceResponse0.getFromLine();
      assertEquals((-1), sourceResponse0.getToLine());
      assertEquals((-1790), int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SourceRequest sourceRequest0 = new SourceRequest();
      SourceResponse sourceResponse0 = new SourceResponse(sourceRequest0, (String) null, (-1790), (-1), false, false);
      sourceResponse0.getSource();
      assertEquals((-1790), sourceResponse0.getFromLine());
      assertEquals((-1), sourceResponse0.getToLine());
  }
}
