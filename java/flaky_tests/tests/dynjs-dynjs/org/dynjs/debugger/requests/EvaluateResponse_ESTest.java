/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 20:54:49 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import org.dynjs.debugger.requests.EvaluateRequest;
import org.dynjs.debugger.requests.EvaluateResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvaluateResponse_ESTest extends EvaluateResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvaluateRequest evaluateRequest0 = new EvaluateRequest();
      EvaluateResponse evaluateResponse0 = new EvaluateResponse(evaluateRequest0, (Object) null, false, false);
      Object object0 = evaluateResponse0.getResult();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvaluateRequest evaluateRequest0 = new EvaluateRequest();
      EvaluateResponse evaluateResponse0 = new EvaluateResponse(evaluateRequest0, evaluateRequest0, false, false);
      EvaluateRequest evaluateRequest1 = (EvaluateRequest)evaluateResponse0.getResult();
      assertEquals(0, evaluateRequest1.getSeq());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvaluateRequest evaluateRequest0 = new EvaluateRequest();
      EvaluateResponse evaluateResponse0 = new EvaluateResponse(evaluateRequest0, evaluateRequest0, true, true);
      Collection<Object> collection0 = evaluateResponse0.getRefs();
      assertFalse(collection0.contains(true));
  }
}
