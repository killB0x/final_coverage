/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:37:37 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.dynjs.debugger.model.Breakpoint;
import org.dynjs.debugger.model.RegexpBreakpoint;
import org.dynjs.debugger.requests.ListBreakpointsRequest;
import org.dynjs.debugger.requests.ListBreakpointsResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListBreakpointsResponse_ESTest extends ListBreakpointsResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ListBreakpointsRequest listBreakpointsRequest0 = new ListBreakpointsRequest();
      ListBreakpointsResponse listBreakpointsResponse0 = new ListBreakpointsResponse(listBreakpointsRequest0, (List<Breakpoint>) null, true, false);
      List<Breakpoint> list0 = listBreakpointsResponse0.getBreakpoints();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ListBreakpointsRequest listBreakpointsRequest0 = new ListBreakpointsRequest();
      LinkedList<Breakpoint> linkedList0 = new LinkedList<Breakpoint>();
      ListBreakpointsResponse listBreakpointsResponse0 = new ListBreakpointsResponse(listBreakpointsRequest0, linkedList0, false, false);
      RegexpBreakpoint regexpBreakpoint0 = new RegexpBreakpoint("", 0, 0);
      linkedList0.add((Breakpoint) regexpBreakpoint0);
      List<Breakpoint> list0 = listBreakpointsResponse0.getBreakpoints();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ListBreakpointsRequest listBreakpointsRequest0 = new ListBreakpointsRequest();
      LinkedList<Breakpoint> linkedList0 = new LinkedList<Breakpoint>();
      ListBreakpointsResponse listBreakpointsResponse0 = new ListBreakpointsResponse(listBreakpointsRequest0, linkedList0, false, false);
      List<Breakpoint> list0 = listBreakpointsResponse0.getBreakpoints();
      assertTrue(list0.isEmpty());
  }
}
