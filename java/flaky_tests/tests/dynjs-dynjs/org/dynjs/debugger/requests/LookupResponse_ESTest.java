/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:01:26 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.dynjs.debugger.requests.LookupRequest;
import org.dynjs.debugger.requests.LookupResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LookupResponse_ESTest extends LookupResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LookupRequest lookupRequest0 = new LookupRequest();
      LookupResponse lookupResponse0 = new LookupResponse(lookupRequest0, true, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      lookupResponse0.getRefs((Object) null, (List<Object>) linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LookupRequest lookupRequest0 = new LookupRequest();
      LookupResponse lookupResponse0 = new LookupResponse(lookupRequest0, true, true);
      Collection<?> collection0 = lookupResponse0.getRefs();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LookupRequest lookupRequest0 = new LookupRequest();
      LookupResponse lookupResponse0 = new LookupResponse(lookupRequest0, true, true);
      List<Object> list0 = lookupResponse0.getList();
      assertFalse(list0.contains(true));
  }
}
