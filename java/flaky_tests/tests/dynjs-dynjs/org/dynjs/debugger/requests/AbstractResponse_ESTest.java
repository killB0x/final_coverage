/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 22:17:34 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dynjs.debugger.requests.ContinueRequest;
import org.dynjs.debugger.requests.ContinueResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractResponse_ESTest extends AbstractResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, false, false);
      boolean boolean0 = continueResponse0.isSuccess();
      assertFalse(continueResponse0.isRunning());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, false, false);
      boolean boolean0 = continueResponse0.isRunning();
      assertFalse(boolean0);
      assertFalse(continueResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinueResponse continueResponse0 = new ContinueResponse((ContinueRequest) null, true, true);
      continueResponse0.getRequest();
      assertTrue(continueResponse0.isRunning());
      assertTrue(continueResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      continueRequest0.setSeq(1);
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, false, true);
      continueResponse0.getRequest();
      assertTrue(continueResponse0.isRunning());
      assertFalse(continueResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, false, true);
      continueRequest0.setSeq((-208));
      continueResponse0.getRequest();
      assertTrue(continueResponse0.isRunning());
      assertFalse(continueResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, true, true);
      continueResponse0.getCommand();
      assertTrue(continueResponse0.isRunning());
      assertTrue(continueResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContinueResponse continueResponse0 = new ContinueResponse((ContinueRequest) null, true, true);
      // Undeclared exception!
      try { 
        continueResponse0.getCommand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.debugger.requests.AbstractResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, false, true);
      continueResponse0.getRequest();
      assertFalse(continueResponse0.isSuccess());
      assertTrue(continueResponse0.isRunning());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, true, true);
      continueResponse0.getRefs();
      assertTrue(continueResponse0.isRunning());
      assertTrue(continueResponse0.isSuccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinueRequest continueRequest0 = new ContinueRequest();
      ContinueResponse continueResponse0 = new ContinueResponse(continueRequest0, true, true);
      boolean boolean0 = continueResponse0.isSuccess();
      assertTrue(boolean0);
      assertTrue(continueResponse0.isRunning());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContinueResponse continueResponse0 = new ContinueResponse((ContinueRequest) null, true, true);
      boolean boolean0 = continueResponse0.isRunning();
      assertTrue(continueResponse0.isSuccess());
      assertTrue(boolean0);
  }
}
