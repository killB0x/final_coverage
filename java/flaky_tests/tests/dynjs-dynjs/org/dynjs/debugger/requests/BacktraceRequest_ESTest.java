/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:52:50 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dynjs.debugger.requests.BacktraceRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BacktraceRequest_ESTest extends BacktraceRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      backtraceRequest0.setInlineRefs(true);
      boolean boolean0 = backtraceRequest0.isInlineRefs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      assertEquals((-1), backtraceRequest0.getToFrame());
      
      backtraceRequest0.setToFrame(1);
      int int0 = backtraceRequest0.getToFrame();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      backtraceRequest0.setFromFrame(1499);
      int int0 = backtraceRequest0.getFromFrame();
      assertEquals(1499, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      assertEquals((-1), backtraceRequest0.getToFrame());
      
      backtraceRequest0.setToFrame(0);
      int int0 = backtraceRequest0.getToFrame();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      assertEquals((-1), backtraceRequest0.getFromFrame());
      
      backtraceRequest0.setFromFrame(0);
      int int0 = backtraceRequest0.getFromFrame();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      assertFalse(backtraceRequest0.getBottom());
      
      backtraceRequest0.setBottom(true);
      boolean boolean0 = backtraceRequest0.getBottom();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      int int0 = backtraceRequest0.getToFrame();
      assertEquals((-1), int0);
      assertEquals((-1), backtraceRequest0.getFromFrame());
      assertFalse(backtraceRequest0.getBottom());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      backtraceRequest0.isInlineRefs();
      assertFalse(backtraceRequest0.getBottom());
      assertEquals((-1), backtraceRequest0.getFromFrame());
      assertEquals((-1), backtraceRequest0.getToFrame());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      int int0 = backtraceRequest0.getFromFrame();
      assertFalse(backtraceRequest0.getBottom());
      assertEquals((-1), int0);
      assertEquals((-1), backtraceRequest0.getToFrame());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BacktraceRequest backtraceRequest0 = new BacktraceRequest();
      boolean boolean0 = backtraceRequest0.getBottom();
      assertEquals((-1), backtraceRequest0.getFromFrame());
      assertFalse(boolean0);
      assertEquals((-1), backtraceRequest0.getToFrame());
  }
}
