/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:43:05 GMT 2022
 */

package org.dynjs.debugger.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dynjs.debugger.requests.AbstractRequest;
import org.dynjs.debugger.requests.ScriptsResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractRequest_ESTest extends AbstractRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractRequest<ScriptsResponse> abstractRequest0 = new AbstractRequest<ScriptsResponse>("");
      abstractRequest0.setSeq((-1684));
      int int0 = abstractRequest0.getSeq();
      assertEquals((-1684), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractRequest<ScriptsResponse> abstractRequest0 = new AbstractRequest<ScriptsResponse>("org.dynjs.debugger.requests.AbstractRequest");
      String string0 = abstractRequest0.getCommand();
      assertEquals("org.dynjs.debugger.requests.AbstractRequest", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractRequest<ScriptsResponse> abstractRequest0 = new AbstractRequest<ScriptsResponse>("");
      String string0 = abstractRequest0.getCommand();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractRequest<ScriptsResponse> abstractRequest0 = new AbstractRequest<ScriptsResponse>("");
      int int0 = abstractRequest0.getSeq();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractRequest<ScriptsResponse> abstractRequest0 = new AbstractRequest<ScriptsResponse>("");
      abstractRequest0.setSeq(381);
      int int0 = abstractRequest0.getSeq();
      assertEquals(381, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbstractRequest<ScriptsResponse> abstractRequest0 = new AbstractRequest<ScriptsResponse>((String) null);
      String string0 = abstractRequest0.getCommand();
      assertNull(string0);
  }
}
