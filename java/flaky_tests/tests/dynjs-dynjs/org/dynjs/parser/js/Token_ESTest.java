/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:32:33 GMT 2022
 */

package org.dynjs.parser.js;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dynjs.parser.js.Token;
import org.dynjs.parser.js.TokenType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenType tokenType0 = TokenType.CONTINUE;
      Token token0 = new Token(tokenType0, "", "", (-359), 0);
      token0.isSkippable();
      assertEquals(0, token0.getColumn());
      assertEquals((-359), token0.getLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_NOT_EQUALITY;
      Token token0 = new Token(tokenType0, "; file=", "", 1, 1);
      token0.setEscapedString(true);
      boolean boolean0 = token0.isEscapedString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_NOT_EQUALITY;
      Token token0 = new Token(tokenType0, "; file=", "", 1, 1);
      token0.setEscapedOctalString(true);
      boolean boolean0 = token0.isEscapedOctalString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenType tokenType0 = TokenType.PLUS_PLUS;
      Token token0 = new Token(tokenType0, "", "", (-1743), 0);
      token0.setContinuedLine(true);
      boolean boolean0 = token0.isContinuedLine();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenType tokenType0 = TokenType.PARAGRAPH_SEPARATOR;
      Token token0 = new Token(tokenType0, "~u`qS|x", "~>UT", (-1515), 2775);
      token0.getType();
      assertEquals((-1515), token0.getLine());
      assertEquals(2775, token0.getColumn());
      assertEquals("~>UT", token0.getFileName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_NOT_EQUALITY;
      Token token0 = new Token(tokenType0, "; file=", "", 1, 1);
      token0.getType();
      assertEquals("; file=", token0.getText());
      assertEquals("", token0.getFileName());
      assertEquals(1, token0.getLine());
      assertEquals(1, token0.getColumn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenType tokenType0 = TokenType.NULL;
      Token token0 = new Token(tokenType0, (String) null, (String) null, 0, 0);
      String string0 = token0.getText();
      assertEquals(0, token0.getColumn());
      assertNull(string0);
      assertEquals(0, token0.getLine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenType tokenType0 = TokenType.CONTINUE;
      Token token0 = new Token(tokenType0, "", "", (-359), 0);
      String string0 = token0.getText();
      assertEquals("", string0);
      assertEquals((-359), token0.getLine());
      assertEquals(0, token0.getColumn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenType tokenType0 = TokenType.COMMA;
      Token token0 = new Token(tokenType0, "5(oT;):z]g", "5(oT;):z]g", 0, 1363);
      int int0 = token0.getLine();
      assertEquals(1363, token0.getColumn());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenType tokenType0 = TokenType.PLUS_PLUS;
      Token token0 = new Token(tokenType0, "", "", (-1743), 0);
      int int0 = token0.getLine();
      assertEquals(0, token0.getColumn());
      assertEquals((-1743), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_EQUALITY;
      Token token0 = new Token(tokenType0, "", (String) null, 0, 1);
      String string0 = token0.getFileName();
      assertEquals(0, token0.getLine());
      assertNull(string0);
      assertEquals(1, token0.getColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_NOT_EQUALITY;
      Token token0 = new Token(tokenType0, "; file=", "", 1, 1);
      String string0 = token0.getFileName();
      assertEquals(1, token0.getLine());
      assertEquals("; file=", token0.getText());
      assertEquals(1, token0.getColumn());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenType tokenType0 = TokenType.CONTINUE;
      Token token0 = new Token(tokenType0, "", "", (-359), 0);
      int int0 = token0.getColumn();
      assertEquals((-359), token0.getLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenType tokenType0 = TokenType.RIGHT_SHIFT_EQUALS;
      Token token0 = new Token(tokenType0, "", "", (-1343), (-1343));
      int int0 = token0.getColumn();
      assertEquals((-1343), int0);
      assertEquals((-1343), token0.getLine());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenType tokenType0 = TokenType.PARAGRAPH_SEPARATOR;
      Token token0 = new Token(tokenType0, "~u`qS|x", "~>UT", (-1515), 2775);
      String string0 = token0.getText();
      assertEquals(2775, token0.getColumn());
      assertEquals("~>UT", token0.getFileName());
      assertEquals((-1515), token0.getLine());
      assertEquals("paragraph-separator", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenType tokenType0 = TokenType.PARAGRAPH_SEPARATOR;
      Token token0 = new Token(tokenType0, "~u`qS|x", "~>UT", (-1515), 2775);
      token0.isSkippable();
      assertEquals("~>UT", token0.getFileName());
      assertEquals((-1515), token0.getLine());
      assertEquals(2775, token0.getColumn());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenType tokenType0 = TokenType.MODULO_EQUALS;
      Token token0 = new Token(tokenType0, "A[5:4_X", "A[5:4_X", 1, 1);
      token0.isContinuedLine();
      assertEquals(1, token0.getColumn());
      assertEquals(1, token0.getLine());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_EQUALITY;
      Token token0 = new Token(tokenType0, "", (String) null, 0, 1);
      String string0 = token0.toString();
      assertEquals("[Token: type====; text=; file=null; line=0; col=1]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenType tokenType0 = TokenType.PARAGRAPH_SEPARATOR;
      Token token0 = new Token(tokenType0, "~u`qS|x", "~>UT", (-1515), 2775);
      int int0 = token0.getColumn();
      assertEquals(2775, int0);
      assertEquals("~>UT", token0.getFileName());
      assertEquals((-1515), token0.getLine());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenType tokenType0 = TokenType.MODULO_EQUALS;
      Token token0 = new Token(tokenType0, "=I", "=I", 737, 737);
      int int0 = token0.getLine();
      assertEquals(737, token0.getColumn());
      assertEquals(737, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_EQUALITY;
      Token token0 = new Token(tokenType0, "", (String) null, 0, 1);
      token0.isEscapedOctalString();
      assertEquals(1, token0.getColumn());
      assertEquals(0, token0.getLine());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenType tokenType0 = TokenType.STRICT_NOT_EQUALITY;
      Token token0 = new Token(tokenType0, "; file=", "", 1, 1);
      token0.isEscapedString();
      assertEquals("", token0.getFileName());
      assertEquals(1, token0.getColumn());
      assertEquals(1, token0.getLine());
      assertEquals("; file=", token0.getText());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token token0 = new Token((TokenType) null, "; text=", (String) null, (-1673), (-1673));
      token0.getType();
      assertEquals((-1673), token0.getColumn());
      assertEquals((-1673), token0.getLine());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenType tokenType0 = TokenType.MODULO_EQUALS;
      Token token0 = new Token(tokenType0, "p@]&5.A1S.F,^W|", "p@]&5.A1S.F,^W|", (-7), (-7));
      token0.getFileName();
      assertEquals((-7), token0.getColumn());
      assertEquals((-7), token0.getLine());
  }
}
