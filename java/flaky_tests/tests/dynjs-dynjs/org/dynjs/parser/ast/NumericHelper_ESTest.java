/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 20:33:11 GMT 2022
 */

package org.dynjs.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dynjs.parser.ast.NumericHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumericHelper_ESTest extends NumericHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = NumericHelper.isRepresentableByLong(377.64450136946);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isZero((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isSameSign((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isPositiveZero((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isPositive((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isNegativeZero((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isNegative((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericHelper.isDifferentSign((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.parser.ast.NumericHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = Long.getLong("", 1L);
      boolean boolean0 = NumericHelper.isPositive(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = Float.valueOf((-1210.3F));
      boolean boolean0 = NumericHelper.isPositive(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      boolean boolean0 = NumericHelper.isNegative(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = Double.valueOf((-3822.3155014));
      boolean boolean0 = NumericHelper.isNegativeZero(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      boolean boolean0 = NumericHelper.isNegativeZero(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      boolean boolean0 = NumericHelper.isZero(double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = Integer.getInteger("U0`j<y]~?", (-487));
      boolean boolean0 = NumericHelper.isZero(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = NumericHelper.isRepresentableByLong((-1489.377027));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-1));
      Integer integer0 = Integer.valueOf((-2814));
      boolean boolean0 = NumericHelper.isDifferentSign(short0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = Double.valueOf((-3822.3155014));
      Long long0 = Long.getLong("", 1L);
      boolean boolean0 = NumericHelper.isDifferentSign(long0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      boolean boolean0 = NumericHelper.isDifferentSign(double0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = Double.valueOf((-3822.3155014));
      Byte byte0 = Byte.valueOf((byte)123);
      boolean boolean0 = NumericHelper.isDifferentSign(double0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = Double.valueOf((-3822.3155014));
      Long long0 = Long.getLong("", 1L);
      boolean boolean0 = NumericHelper.isSameSign(double0, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = Long.valueOf(1004L);
      Integer integer0 = Integer.getInteger("x^uGxRCjm", 2685);
      boolean boolean0 = NumericHelper.isSameSign(integer0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      Integer integer0 = Integer.getInteger("U0`j<y]~?", (-487));
      boolean boolean0 = NumericHelper.isSameSign(double0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = Integer.getInteger("U0`j<y]~?", (-487));
      boolean boolean0 = NumericHelper.isSameSign(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = Integer.getInteger("U0`j<y]~?", (-487));
      boolean boolean0 = NumericHelper.isNegative(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      boolean boolean0 = NumericHelper.isPositiveZero(double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = NumericHelper.isRepresentableByLong((-516.0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = Integer.getInteger("U0`j<y]~?", (-487));
      boolean boolean0 = NumericHelper.isPositiveZero(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumericHelper numericHelper0 = new NumericHelper();
  }
}
