/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 20:40:19 GMT 2022
 */

package org.dynjs.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.dynjs.runtime.DynJS;
import org.dynjs.runtime.DynObject;
import org.dynjs.runtime.ExecutionContext;
import org.dynjs.runtime.JSObject;
import org.dynjs.runtime.LexicalEnvironment;
import org.dynjs.runtime.ThreadContextManager;
import org.dynjs.runtime.builtins.types.error.StackElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadContextManager_ESTest extends ThreadContextManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      DynObject dynObject1 = new DynObject(dynObject0);
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      dynObject1.put((ExecutionContext) null, "", (Object) lexicalEnvironment0, true);
      LexicalEnvironment lexicalEnvironment1 = LexicalEnvironment.newObjectEnvironment(dynObject1, true, lexicalEnvironment0);
      Object object0 = new Object();
      LexicalEnvironment.newObjectEnvironment(dynObject1, true, lexicalEnvironment0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment1, lexicalEnvironment0, object0, true);
      ThreadContextManager.pushContext(executionContext0);
      ExecutionContext executionContext1 = ThreadContextManager.currentContext();
      ThreadContextManager.currentContext();
      LinkedList<StackElement> linkedList0 = new LinkedList<StackElement>();
      executionContext1.collectStackElements(linkedList0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      executionContext1.setColumnNumber((-1));
      ThreadContextManager.popContext();
      ThreadContextManager.pushContext(executionContext1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(65536L);
      ExecutionContext executionContext2 = ThreadContextManager.currentContext();
      System.setCurrentTimeMillis(65536L);
      ThreadContextManager.pushContext(executionContext0);
      MockThrowable mockThrowable0 = new MockThrowable();
      executionContext0.recordThrow(mockThrowable0, executionContext1);
      ThreadContextManager.popContext();
      ThreadContextManager.popContext();
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      ThreadContextManager.pushContext(executionContext0);
      assertEquals((-1), executionContext0.getColumnNumber());
      
      ThreadContextManager.pushContext(executionContext2);
      assertSame(executionContext2, executionContext0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThreadContextManager threadContextManager0 = new ThreadContextManager();
  }
}
