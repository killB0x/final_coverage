/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 20:43:52 GMT 2022
 */

package org.dynjs.runtime.builtins.types.error;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dynjs.runtime.DynJS;
import org.dynjs.runtime.DynObject;
import org.dynjs.runtime.ExecutionContext;
import org.dynjs.runtime.JSObject;
import org.dynjs.runtime.JSProgram;
import org.dynjs.runtime.LexicalEnvironment;
import org.dynjs.runtime.NullProgram;
import org.dynjs.runtime.builtins.types.error.StackElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StackElement_ESTest extends StackElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackElement stackElement0 = null;
      try {
        stackElement0 = new StackElement(".", (ExecutionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.runtime.builtins.types.error.StackElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.setLineNumber(6);
      StackElement stackElement0 = executionContext0.getStackElement();
      StackTraceElement stackTraceElement0 = stackElement0.toStackTraceElement();
      assertEquals(6, stackTraceElement0.getLineNumber());
      assertEquals("<global>.<eval>(Unknown Source)", stackTraceElement0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.setLineNumber((-468));
      StackElement stackElement0 = executionContext0.getStackElement();
      StackTraceElement stackTraceElement0 = stackElement0.toStackTraceElement();
      assertEquals((-468), stackTraceElement0.getLineNumber());
      assertEquals("<global>.<eval>(Unknown Source)", stackTraceElement0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.inEval(true);
      StackElement stackElement0 = executionContext0.getStackElement();
      boolean boolean0 = stackElement0.isEval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = executionContext0.getStackElement();
      Object object0 = stackElement0.getThis();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      executionContext0.setLineNumber(1573);
      StackElement stackElement0 = executionContext0.getStackElement();
      int int0 = stackElement0.getLineNumber();
      assertEquals(1573, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      executionContext0.setLineNumber((-993));
      StackElement stackElement0 = executionContext0.getStackElement();
      int int0 = stackElement0.getLineNumber();
      assertEquals((-993), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = new StackElement("", executionContext0);
      String string0 = stackElement0.getFunctionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      NullProgram nullProgram0 = new NullProgram("constructor");
      executionContext0.execute((JSProgram) nullProgram0);
      String string0 = stackElement0.getFileName();
      assertEquals("constructor", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.setColumnNumber(1977);
      executionContext0.inEval(true);
      StackElement stackElement0 = executionContext0.getStackElement();
      StackElement stackElement1 = stackElement0.getEvalOrigin();
      assertSame(stackElement1, stackElement0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = executionContext0.getStackElement();
      String string0 = stackElement0.getDebugContext();
      assertEquals("<eval>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.setColumnNumber(49);
      StackElement stackElement0 = executionContext0.getStackElement();
      int int0 = stackElement0.getColumnNumber();
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.setColumnNumber((-2214));
      StackElement stackElement0 = executionContext0.getStackElement();
      int int0 = stackElement0.getColumnNumber();
      assertEquals((-2214), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      dynObject0.setPrototype(dynObject0);
      // Undeclared exception!
      try { 
        stackElement0.isTopLevel();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = executionContext0.getStackElement();
      int int0 = stackElement0.getColumnNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = executionContext0.getStackElement();
      boolean boolean0 = stackElement0.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, ",A.4F$fk|k$qt@", false);
      StackElement stackElement0 = executionContext0.getStackElement();
      Object object0 = stackElement0.getFunction();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      executionContext0.inEval(true);
      StackElement stackElement0 = executionContext0.getStackElement();
      StackElement stackElement1 = stackElement0.getEvalOrigin();
      assertSame(stackElement1, stackElement0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      boolean boolean0 = stackElement0.isConstructor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      boolean boolean0 = stackElement0.isTopLevel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      boolean boolean0 = stackElement0.isTopLevel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      Object object0 = stackElement0.getMethodName();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      dynObject0.put("constructor", (Object) dynObject0);
      Object object0 = new Object();
      dynObject0.put("name", object0);
      Object object1 = stackElement0.getTypeName();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      dynObject0.put("constructor", (Object) dynObject0);
      Object object0 = stackElement0.getTypeName();
      assertEquals("Object", object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      // Undeclared exception!
      try { 
        stackElement0.getTypeName();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.dynjs.runtime.Types$Undefined cannot be cast to class org.dynjs.runtime.JSObject (org.dynjs.runtime.Types$Undefined and org.dynjs.runtime.JSObject are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3df17212)
         //
         verifyException("org.dynjs.runtime.builtins.types.error.StackElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      Object object0 = stackElement0.getTypeName();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackElement stackElement0 = null;
      try {
        stackElement0 = new StackElement("v.vA3\"j7", (ExecutionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.runtime.builtins.types.error.StackElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      DynObject dynObject1 = (DynObject)stackElement0.getThis();
      assertTrue(dynObject1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      StackElement stackElement1 = stackElement0.getEvalOrigin();
      assertNull(stackElement1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = new StackElement("", executionContext0);
      String string0 = stackElement0.getDebugContext();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      String string0 = stackElement0.getFunctionName();
      assertEquals("<eval>", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, true);
      StackElement stackElement0 = new StackElement("", executionContext0);
      StackTraceElement stackTraceElement0 = stackElement0.toStackTraceElement();
      assertEquals("<global>", stackTraceElement0.getClassName());
      assertEquals(0, stackTraceElement0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      boolean boolean0 = stackElement0.isNative();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, lexicalEnvironment0, lexicalEnvironment0, dynObject0, true);
      StackElement stackElement0 = executionContext0.getStackElement();
      String string0 = stackElement0.getFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = executionContext0.getStackElement();
      String string0 = stackElement0.toString();
      assertEquals("<eval> (null:0:0)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExecutionContext executionContext0 = new ExecutionContext((DynJS) null, (ExecutionContext) null, (LexicalEnvironment) null, (LexicalEnvironment) null, (Object) null, false);
      StackElement stackElement0 = executionContext0.getStackElement();
      int int0 = stackElement0.getLineNumber();
      assertEquals(0, int0);
  }
}
