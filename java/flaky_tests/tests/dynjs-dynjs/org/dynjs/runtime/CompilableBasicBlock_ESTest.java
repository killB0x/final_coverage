/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:29:19 GMT 2022
 */

package org.dynjs.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dynjs.Config;
import org.dynjs.codegen.CodeGeneratingVisitorFactory;
import org.dynjs.compiler.jit.JITBasicBlockCompiler;
import org.dynjs.runtime.BasicBlock;
import org.dynjs.runtime.BasicBlockDelegate;
import org.dynjs.runtime.CompilableBasicBlock;
import org.dynjs.runtime.ExecutionContext;
import org.dynjs.runtime.interp.InterpretingVisitorFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompilableBasicBlock_ESTest extends CompilableBasicBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InterpretingVisitorFactory interpretingVisitorFactory0 = new InterpretingVisitorFactory(true);
      JITBasicBlockCompiler jITBasicBlockCompiler0 = new JITBasicBlockCompiler((Config) null, interpretingVisitorFactory0, (CodeGeneratingVisitorFactory) null);
      CompilableBasicBlock compilableBasicBlock0 = new CompilableBasicBlock(jITBasicBlockCompiler0, "org.dynjs.runtime.ArgGetter", (BasicBlock) null);
      compilableBasicBlock0.enqueueCompilationRequest((ExecutionContext) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicBlockDelegate basicBlockDelegate0 = new BasicBlockDelegate((BasicBlock) null);
      CompilableBasicBlock compilableBasicBlock0 = new CompilableBasicBlock((JITBasicBlockCompiler) null, (String) null, basicBlockDelegate0);
      compilableBasicBlock0.getGrist();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InterpretingVisitorFactory interpretingVisitorFactory0 = new InterpretingVisitorFactory(true);
      JITBasicBlockCompiler jITBasicBlockCompiler0 = new JITBasicBlockCompiler((Config) null, interpretingVisitorFactory0, (CodeGeneratingVisitorFactory) null);
      CompilableBasicBlock compilableBasicBlock0 = new CompilableBasicBlock(jITBasicBlockCompiler0, "", (BasicBlock) null);
      compilableBasicBlock0.getGrist();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompilableBasicBlock compilableBasicBlock0 = new CompilableBasicBlock((JITBasicBlockCompiler) null, "", (BasicBlock) null);
      // Undeclared exception!
      try { 
        compilableBasicBlock0.enqueueCompilationRequest((ExecutionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.runtime.CompilableBasicBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompilableBasicBlock compilableBasicBlock0 = new CompilableBasicBlock((JITBasicBlockCompiler) null, "U)Z+%p_/S-jKd<d'G", (BasicBlock) null);
      compilableBasicBlock0.setDelegate(compilableBasicBlock0);
      // Undeclared exception!
      try { 
        compilableBasicBlock0.call((ExecutionContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.runtime.CompilableBasicBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CompilableBasicBlock compilableBasicBlock0 = new CompilableBasicBlock((JITBasicBlockCompiler) null, "U)Z+%p_/S-jKd<d'G", (BasicBlock) null);
      String string0 = compilableBasicBlock0.getGrist();
      assertEquals("U)Z+%p_/S-jKd<d'G", string0);
  }
}
