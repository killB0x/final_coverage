/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 21:16:54 GMT 2022
 */

package org.dynjs.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dynjs.runtime.DynJS;
import org.dynjs.runtime.DynObject;
import org.dynjs.runtime.EnvironmentRecord;
import org.dynjs.runtime.ExecutionContext;
import org.dynjs.runtime.JSObject;
import org.dynjs.runtime.LexicalEnvironment;
import org.dynjs.runtime.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LexicalEnvironment_ESTest extends LexicalEnvironment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) null);
      LexicalEnvironment lexicalEnvironment1 = LexicalEnvironment.newObjectEnvironment((JSObject) null, false, lexicalEnvironment0);
      LexicalEnvironment lexicalEnvironment2 = lexicalEnvironment1.getOuter();
      assertFalse(lexicalEnvironment2.equals((Object)lexicalEnvironment1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) null);
      // Undeclared exception!
      try { 
        lexicalEnvironment0.getIdentifierReference((ExecutionContext) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.runtime.ObjectEnvironmentRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      dynObject0.put((ExecutionContext) null, "=/{Fv+H\"p(", (Object) "=/{Fv+H\"p(", false);
      Reference reference0 = lexicalEnvironment0.getIdentifierReference((ExecutionContext) null, "=/{Fv+H\"p(", false);
      assertFalse(reference0.isPropertyReference());
      assertFalse(reference0.isStrictReference());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      Reference reference0 = lexicalEnvironment0.getIdentifierReference((ExecutionContext) null, "8H", true);
      assertTrue(reference0.isPropertyReference());
      assertTrue(reference0.isStrictReference());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) null);
      LexicalEnvironment lexicalEnvironment1 = lexicalEnvironment0.getOuter();
      assertNull(lexicalEnvironment1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        LexicalEnvironment.newGlobalEnvironment((DynJS) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dynjs.runtime.LexicalEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newDeclarativeEnvironment((LexicalEnvironment) null);
      EnvironmentRecord environmentRecord0 = lexicalEnvironment0.getRecord();
      assertFalse(environmentRecord0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DynObject dynObject0 = new DynObject();
      LexicalEnvironment lexicalEnvironment0 = LexicalEnvironment.newGlobalEnvironment((JSObject) dynObject0);
      LexicalEnvironment lexicalEnvironment1 = LexicalEnvironment.newObjectEnvironment(dynObject0, true, lexicalEnvironment0);
      Reference reference0 = lexicalEnvironment1.getIdentifierReference((ExecutionContext) null, "8H", true);
      assertTrue(reference0.isStrictReference());
      assertTrue(reference0.isPropertyReference());
  }
}
