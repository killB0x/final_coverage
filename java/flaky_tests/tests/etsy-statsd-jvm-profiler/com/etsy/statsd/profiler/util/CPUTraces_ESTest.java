/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 10:39:30 GMT 2022
 */

package com.etsy.statsd.profiler.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.etsy.statsd.profiler.util.CPUTraces;
import com.etsy.statsd.profiler.util.Range;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CPUTraces_ESTest extends CPUTraces_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CPUTraces cPUTraces0 = new CPUTraces();
      cPUTraces0.increment("", 0L);
      Map<String, Number> map0 = cPUTraces0.getDataToFlush();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CPUTraces cPUTraces0 = new CPUTraces();
      cPUTraces0.increment("com.etsy.statsd.profiler.util.Range", 0L);
      Range range0 = cPUTraces0.getBounds();
      assertEquals(4, range0.getLeft());
      assertEquals(4, range0.getRight());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CPUTraces cPUTraces0 = new CPUTraces();
      cPUTraces0.increment("", 0L);
      Range range0 = cPUTraces0.getBounds();
      assertEquals((-1), range0.getLeft());
      assertEquals((-1), range0.getRight());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CPUTraces cPUTraces0 = new CPUTraces();
      // Undeclared exception!
      try { 
        cPUTraces0.increment((String) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.etsy.statsd.profiler.util.CPUTraces", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CPUTraces cPUTraces0 = new CPUTraces();
      cPUTraces0.increment("S@/;|&3}Qc.D", 0L);
      Range range0 = cPUTraces0.getBounds();
      assertEquals(0, range0.getRight());
      assertEquals(0, range0.getLeft());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CPUTraces cPUTraces0 = new CPUTraces();
      Map<String, Number> map0 = cPUTraces0.getDataToFlush();
      assertEquals(0, map0.size());
  }
}
