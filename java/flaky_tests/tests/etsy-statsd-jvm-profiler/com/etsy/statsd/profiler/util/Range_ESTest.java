/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 26 10:37:10 GMT 2022
 */

package com.etsy.statsd.profiler.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.etsy.statsd.profiler.util.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-3102), (-3102));
      range0.hashCode();
      assertEquals((-3102), range0.getRight());
      assertEquals((-3102), range0.getLeft());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      Range range1 = new Range(0, 0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals(0, range0.getLeft());
      assertFalse(range0.equals((Object)range1));
      assertEquals(1901, range0.getRight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(0, 0);
      Range range1 = new Range((-1), (-1));
      boolean boolean0 = range0.equals(range1);
      assertEquals((-1), range1.getLeft());
      assertEquals((-1), range1.getRight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0, 0);
      int int0 = range0.getRight();
      assertEquals(0, int0);
      assertEquals(0, range0.getLeft());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-3102), (-3102));
      int int0 = range0.getRight();
      assertEquals((-3102), range0.getLeft());
      assertEquals((-3102), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(1331, 1331);
      int int0 = range0.getLeft();
      assertEquals(1331, int0);
      assertEquals(1331, range0.getRight());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-3102), (-3102));
      int int0 = range0.getLeft();
      assertEquals((-3102), range0.getRight());
      assertEquals((-3102), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-3102), (-3102));
      Range range1 = new Range((-3102), (-3102));
      boolean boolean0 = range0.equals(range1);
      assertEquals((-3102), range1.getRight());
      assertTrue(boolean0);
      assertEquals((-3102), range1.getLeft());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-3102), (-3102));
      Range range1 = new Range((-2030), (-2867));
      boolean boolean0 = range0.equals(range1);
      assertEquals((-2867), range1.getRight());
      assertEquals((-2030), range1.getLeft());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      boolean boolean0 = range0.equals("Range{left=0, right=0}");
      assertEquals(0, range0.getLeft());
      assertEquals(1901, range0.getRight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1901, range0.getRight());
      assertEquals(0, range0.getLeft());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(2404, 2404);
      boolean boolean0 = range0.equals(range0);
      assertEquals(2404, range0.getRight());
      assertTrue(boolean0);
      assertEquals(2404, range0.getLeft());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      Range range1 = new Range(0, 0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertEquals(1901, range0.getRight());
      assertEquals(0, range0.getLeft());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      int int0 = range0.getRight();
      assertEquals(0, range0.getLeft());
      assertEquals(1901, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      int int0 = range0.getLeft();
      assertEquals(1901, range0.getRight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0, 1901);
      String string0 = range0.toString();
      assertEquals("Range{left=0, right=1901}", string0);
  }
}
