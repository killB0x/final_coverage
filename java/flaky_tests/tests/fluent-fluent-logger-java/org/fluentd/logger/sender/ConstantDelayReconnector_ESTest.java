/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 03:35:15 GMT 2022
 */

package org.fluentd.logger.sender;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.fluentd.logger.sender.ConstantDelayReconnector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantDelayReconnector_ESTest extends ConstantDelayReconnector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector((-1));
      constantDelayReconnector0.addErrorHistory(0L);
      boolean boolean0 = constantDelayReconnector0.enableReconnection((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector((-1));
      constantDelayReconnector0.addErrorHistory((-1));
      boolean boolean0 = constantDelayReconnector0.isErrorHistoryEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector((-1));
      constantDelayReconnector0.addErrorHistory((-1));
      boolean boolean0 = constantDelayReconnector0.enableReconnection((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector();
      boolean boolean0 = constantDelayReconnector0.enableReconnection(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector();
      constantDelayReconnector0.addErrorHistory(0L);
      boolean boolean0 = constantDelayReconnector0.enableReconnection(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector((-1));
      boolean boolean0 = constantDelayReconnector0.isErrorHistoryEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector((-1));
      constantDelayReconnector0.clearErrorHistory();
  }
}
