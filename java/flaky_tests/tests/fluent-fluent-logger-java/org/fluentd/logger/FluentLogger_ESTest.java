/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 03:32:02 GMT 2022
 */

package org.fluentd.logger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.fluentd.logger.FluentLogger;
import org.fluentd.logger.errorhandler.ErrorHandler;
import org.fluentd.logger.sender.ConstantDelayReconnector;
import org.fluentd.logger.sender.NullSender;
import org.fluentd.logger.sender.Reconnector;
import org.fluentd.logger.sender.Sender;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FluentLogger_ESTest extends FluentLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector();
      // Undeclared exception!
      try { 
        FluentLogger.getLogger(".", ".", 0, (-652), 0, (Reconnector) constantDelayReconnector0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/msgpack/template/Template
         //
         verifyException("org.fluentd.logger.FluentLoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantDelayReconnector constantDelayReconnector0 = new ConstantDelayReconnector();
      // Undeclared exception!
      try { 
        FluentLogger.getLogger("ZFd%7Z", "", 586, 0, 0, (Reconnector) constantDelayReconnector0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/msgpack/template/Template
         //
         verifyException("org.fluentd.logger.FluentLoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentLogger.getLogger("}v?6C41", "", 0, 1610612736, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/msgpack/template/Template
         //
         verifyException("org.fluentd.logger.FluentLoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentLogger.getLogger("", "Q/aZw7SGo8{dsBK/", (-1844), (-1844), (-1811));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/msgpack/template/Template
         //
         verifyException("org.fluentd.logger.FluentLoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentLogger.getLogger("", (String) null, 3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/msgpack/template/Template
         //
         verifyException("org.fluentd.logger.FluentLoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullSender nullSender0 = new NullSender("", 1, 644, 2146768058);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      fluentLogger0.flush();
      assertTrue(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullSender nullSender0 = new NullSender("q6p|CB0QXz7t.;6ri4<", (-1), (-1), (-2122219133));
      FluentLogger fluentLogger0 = new FluentLogger("HUuW:n`)y-fI", nullSender0);
      String string0 = fluentLogger0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullSender nullSender0 = new NullSender("", (-989), (-989), 0);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      boolean boolean0 = fluentLogger0.log("", (Map<String, Object>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      NullSender nullSender0 = new NullSender("", 1, 644, 2146768058);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      boolean boolean0 = fluentLogger0.log("", "", object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullSender nullSender0 = new NullSender("", 0, 0, 0);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      Sender sender0 = fluentLogger0.getSender();
      assertEquals("null", sender0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullSender nullSender0 = new NullSender("", 1, 644, 2146768058);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      String string0 = fluentLogger0.getName();
      assertEquals("_null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      // Undeclared exception!
      try { 
        fluentLogger0.log("", "", (Object) "", (-410L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        fluentLogger0.log("BhnV)Hc#-7<hi5:", (Map<String, Object>) hashMap0, 126L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullSender nullSender0 = new NullSender("q6p|CB0QXz7t.;6ri4<", (-1), 267, 3000);
      FluentLogger fluentLogger0 = new FluentLogger("b$Fk'9g0u3y .y", nullSender0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      boolean boolean0 = fluentLogger0.log("o;$^n=2-", (Map<String, Object>) hashMap0, (long) 3000);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullSender nullSender0 = new NullSender("ruB^4]P^P5,jmGc6#{`", 0, 0, 0);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      boolean boolean0 = fluentLogger0.log("", (Map<String, Object>) hashMap0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullSender nullSender0 = new NullSender("", 36, 36, 36);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      fluentLogger0.removeErrorHandler();
      assertTrue(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      fluentLogger0.removeErrorHandler();
      assertFalse(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullSender nullSender0 = new NullSender("q6p|CB0QXz7t.;6ri4<", (-1), 267, 3000);
      FluentLogger fluentLogger0 = new FluentLogger("b$Fk'9g0u3y .y", nullSender0);
      fluentLogger0.close();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      fluentLogger0.setErrorHandler(errorHandler0);
      assertFalse(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      // Undeclared exception!
      try { 
        fluentLogger0.setErrorHandler((ErrorHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // errorHandler is null
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullSender nullSender0 = new NullSender("org.fluentd.logger.sener.ExponentialDelayReconnector", 2021, 2021, 2021);
      FluentLogger fluentLogger0 = new FluentLogger("org.fluentd.logger.sener.ExponentialDelayReconnector", nullSender0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      fluentLogger0.setErrorHandler(errorHandler0);
      assertTrue(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullSender nullSender0 = new NullSender("ruB^4]P^P5,jmGc6#{`", 0, 0, 0);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      boolean boolean0 = fluentLogger0.isConnected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      boolean boolean0 = fluentLogger0.isConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NullSender nullSender0 = new NullSender("", (-989), (-989), 0);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      fluentLogger0.finalize();
      assertTrue(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      fluentLogger0.finalize();
      assertFalse(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      fluentLogger0.close();
      assertFalse(fluentLogger0.isConnected());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NullSender nullSender0 = new NullSender("ruB^4]P^P5,jmGc6#{`", 0, 0, 0);
      FluentLogger fluentLogger0 = new FluentLogger("", nullSender0);
      Object object0 = new Object();
      boolean boolean0 = fluentLogger0.log(".", "%s{tagPrefix=%s,sender=%s}", object0, (-1L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger("OJ&:4Xu/rQJ", (Sender) null);
      // Undeclared exception!
      try { 
        fluentLogger0.log("OJ&:4Xu/rQJ", "OJ&:4Xu/rQJ", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FluentLogger.closeAll();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentLogger.getLogger("localhost");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/msgpack/template/Template
         //
         verifyException("org.fluentd.logger.FluentLoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      Sender sender0 = fluentLogger0.getSender();
      assertNull(sender0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Map<FluentLogger, String> map0 = FluentLogger.getLoggers();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      // Undeclared exception!
      try { 
        fluentLogger0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        fluentLogger0.log("org.fluentd.logger.sender.RawSocketSender", (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      // Undeclared exception!
      try { 
        fluentLogger0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FluentLogger.flushAll();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FluentLogger fluentLogger0 = new FluentLogger();
      // Undeclared exception!
      try { 
        fluentLogger0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.fluentd.logger.FluentLogger", e);
      }
  }
}
