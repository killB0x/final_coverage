/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 15:58:29 GMT 2022
 */

package impl.com.github.paulcwarren.ginkgo4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import impl.com.github.paulcwarren.ginkgo4j.IdBuilder;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IdBuilder_ESTest extends IdBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.setSize(5450);
      IdBuilder.fqid("D5{7<", stack0);
      // Undeclared exception!
      IdBuilder.fqid("D5{7<", stack0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Stack<Object> stack1 = new Stack<Object>();
      stack1.add((Object) stack0);
      stack0.add((Object) stack1);
      // Undeclared exception!
      try { 
        IdBuilder.fqid("!wzp8H[6b2Jt]^j", stack0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        IdBuilder.fqid("!$@|=:", (Stack<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.IdBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(0);
      stack0.add(integer0);
      String string0 = IdBuilder.fqid("", stack0);
      assertEquals("0._EMPTY_", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      String string0 = IdBuilder.fqid("ZHT,6Apve>", stack0);
      assertEquals("ZHT,6Apve>", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      String string0 = IdBuilder.fqid((String) null, stack0);
      assertEquals("_EMPTY_", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = IdBuilder.id("ZHT,6Apve>");
      assertEquals("ZHT,6Apve>", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = IdBuilder.id("");
      assertEquals("_EMPTY_", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = IdBuilder.id((String) null);
      assertEquals("_EMPTY_", string0);
  }
}
