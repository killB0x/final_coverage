/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 15:54:00 GMT 2022
 */

package impl.com.github.paulcwarren.ginkgo4j.chains;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.paulcwarren.ginkgo4j.ExecutableBlock;
import impl.com.github.paulcwarren.ginkgo4j.Context;
import impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChain;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutableChain_ESTest extends ExecutableChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("");
      executableChain0.setIsFocused(true);
      boolean boolean0 = executableChain0.isFocused();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain((String) null);
      String string0 = executableChain0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("`ES8\tJ2UeZ}VCx");
      String string0 = executableChain0.getId();
      assertEquals("`ES8\tJ2UeZ}VCx", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("");
      try { 
        executableChain0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("");
      executableChain0.setTestObject("");
      Object object0 = executableChain0.getTestObject();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("");
      String string0 = executableChain0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("");
      Object object0 = executableChain0.getTestObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain("");
      List<Context> list0 = executableChain0.getContext();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain((String) null);
      boolean boolean0 = executableChain0.isFocused();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain((String) null);
      executableChain0.setSpec((ExecutableBlock) null);
      assertFalse(executableChain0.isFocused());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutableChain executableChain0 = new ExecutableChain((String) null);
      ExecutableBlock executableBlock0 = executableChain0.getSpec();
      assertNull(executableBlock0);
  }
}
