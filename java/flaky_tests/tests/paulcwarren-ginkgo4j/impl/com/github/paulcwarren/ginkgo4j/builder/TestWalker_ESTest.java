/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 15:56:41 GMT 2022
 */

package impl.com.github.paulcwarren.ginkgo4j.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.paulcwarren.ginkgo4j.ExecutableBlock;
import impl.com.github.paulcwarren.ginkgo4j.builder.TestVisitor;
import impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestWalker_ESTest extends TestWalker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestWalker testWalker0 = new TestWalker((Class<?>) null);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        testWalker0.walk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.walk();
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      testWalker0.afterEach(executableBlock0);
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.describe("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", executableBlock1, true);
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock2 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.context("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", executableBlock2, true);
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      testWalker0.test(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.justBeforeEach(executableBlock0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.walk();
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      testWalker0.walk(testVisitorArray0);
      testWalker0.afterEach(executableBlock0);
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.describe("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", executableBlock1, true);
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock2 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.context("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", executableBlock2, true);
      testWalker0.beforeEach((ExecutableBlock) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.walk();
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      testWalker0.afterEach(executableBlock0);
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.describe("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", executableBlock1, true);
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock2 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.context("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", executableBlock2, true);
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      assertEquals(0, testVisitorArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[7];
      testVisitorArray0[2] = (TestVisitor) testWalker0;
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker0.justBeforeEach(executableBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker1.walk(testVisitorArray0);
      testWalker1.walk();
      testWalker0.walk(testVisitorArray0);
      testWalker1.describe("com.github.paulcwarren.ginkgo4j.Ginkgo4jDSL", executableBlock0, false);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.it("com.github.paulcwarren.ginkgo4j.Ginkgo4jDSL", executableBlock1, false);
      ExecutableBlock executableBlock2 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.justBeforeEach(executableBlock2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestWalker testWalker1 = new TestWalker(class1, testWalker0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker1.walk(testVisitorArray0);
      testWalker0.walk();
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker1.describe("", executableBlock0, false);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker0.it("", executableBlock1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      TestVisitor[] testVisitorArray0 = new TestVisitor[8];
      TestWalker testWalker1 = new TestWalker(class0);
      testVisitorArray0[0] = (TestVisitor) testWalker1;
      testVisitorArray0[1] = (TestVisitor) testWalker0;
      testVisitorArray0[2] = (TestVisitor) testWalker0;
      testVisitorArray0[3] = (TestVisitor) testWalker0;
      testVisitorArray0[4] = (TestVisitor) testWalker0;
      testVisitorArray0[5] = (TestVisitor) testWalker0;
      testVisitorArray0[6] = (TestVisitor) testWalker0;
      TestWalker testWalker2 = new TestWalker(class0);
      testVisitorArray0[7] = (TestVisitor) testWalker2;
      testWalker0.walk(testVisitorArray0);
      try { 
        testWalker0.it("", executableBlock0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        testWalker0.test(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.walk();
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      TestVisitor[] testVisitorArray1 = new TestVisitor[2];
      testVisitorArray1[0] = (TestVisitor) testWalker1;
      testVisitorArray1[1] = (TestVisitor) testWalker0;
      testWalker0.walk(testVisitorArray1);
      testWalker1.walk();
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker0.beforeEach(executableBlock1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      Class<Object> class1 = Object.class;
      TestWalker testWalker2 = new TestWalker(class1, testWalker0);
      try { 
        testWalker2.beforeEach((ExecutableBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestWalker testWalker1 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      testWalker1.walk(testVisitorArray0);
      Class<Integer> class1 = Integer.class;
      TestWalker testWalker2 = new TestWalker(class1, testWalker0);
      TestWalker testWalker3 = new TestWalker(class0, testWalker1);
      testWalker3.walk(testVisitorArray0);
      testWalker2.walk();
      testWalker3.beforeEach((ExecutableBlock) null);
      testWalker3.it("7){1x6;C9I*J h#xUHA", (ExecutableBlock) null, true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker1.walk(testVisitorArray0);
      testWalker1.walk();
      testWalker1.describe("com.github.paulcwarren.ginkgo4j.Ginkgo4jDSL", executableBlock0, false);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.it("com.github.paulcwarren.ginkgo4j.Ginkgo4jDSL", executableBlock1, false);
      ExecutableBlock executableBlock2 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.beforeEach(executableBlock2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      String string0 = "c/^`3";
      TestVisitor[] testVisitorArray0 = new TestVisitor[1];
      testVisitorArray0[0] = (TestVisitor) testWalker0;
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.walk(testVisitorArray0);
      boolean boolean0 = true;
      testWalker0.describe(string0, executableBlock0, boolean0);
      testWalker0.walk();
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.beforeEach(executableBlock1);
      ExecutableBlock executableBlock2 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.it(string0, executableBlock2, boolean0);
      testWalker0.walk(testVisitorArray0);
      testWalker0.walk(testVisitorArray0);
      ExecutableBlock executableBlock3 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      testWalker0.context(string0, executableBlock3, boolean1);
      String string1 = null;
      ExecutableBlock executableBlock4 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.describe(string1, executableBlock4, boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      testWalker0.walk();
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      testWalker0.afterEach(executableBlock0);
      testWalker0.walk(testVisitorArray0);
      String string0 = "impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker";
      ExecutableBlock executableBlock1 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      TestVisitor[] testVisitorArray1 = new TestVisitor[4];
      testVisitorArray1[0] = (TestVisitor) testWalker0;
      testVisitorArray1[1] = (TestVisitor) testWalker0;
      testVisitorArray1[2] = (TestVisitor) testWalker0;
      testVisitorArray1[3] = (TestVisitor) testWalker0;
      testWalker0.walk(testVisitorArray1);
      boolean boolean0 = true;
      testWalker0.describe(string0, executableBlock1, boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      try { 
        testWalker0.context("Context", (ExecutableBlock) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker0.describe("BeforeEach", executableBlock0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      testWalker0.walk();
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[5];
      Class<Object> class1 = Object.class;
      TestWalker testWalker2 = new TestWalker(class1);
      testVisitorArray0[0] = (TestVisitor) testWalker2;
      TestWalker testWalker3 = new TestWalker(class1);
      testVisitorArray0[1] = (TestVisitor) testWalker3;
      testVisitorArray0[2] = (TestVisitor) testWalker0;
      testVisitorArray0[3] = (TestVisitor) testWalker0;
      testVisitorArray0[4] = (TestVisitor) testWalker1;
      testWalker1.walk(testVisitorArray0);
      ExecutableBlock executableBlock0 = null;
      try { 
        testWalker1.afterEach((ExecutableBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      TestWalker testWalker0 = new TestWalker(class1);
      TestVisitor[] testVisitorArray0 = new TestVisitor[0];
      testWalker0.walk(testVisitorArray0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      testWalker0.walk(testVisitorArray0);
      testWalker1.walk(testVisitorArray0);
      testWalker1.walk();
      testWalker1.justBeforeEach((ExecutableBlock) null);
      testWalker1.walk();
      testWalker0.walk(testVisitorArray0);
      testWalker0.context("", (ExecutableBlock) null, true);
      testWalker1.walk(testVisitorArray0);
      testWalker1.context("", (ExecutableBlock) null, true);
      testWalker0.walk(testVisitorArray0);
      testWalker1.afterEach((ExecutableBlock) null);
      testWalker0.walk();
      testWalker1.walk();
      TestVisitor[] testVisitorArray1 = new TestVisitor[0];
      testWalker1.walk(testVisitorArray1);
      testWalker1.describe(")DUtGT7^", (ExecutableBlock) null, true);
      testWalker1.it("", (ExecutableBlock) null, false);
      testWalker0.beforeEach((ExecutableBlock) null);
      testWalker1.beforeEach((ExecutableBlock) null);
      Object object0 = new Object();
      testWalker0.test(object0);
      assertFalse(testWalker0.equals((Object)testWalker1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker1.justBeforeEach(executableBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      TestWalker testWalker0 = new TestWalker(class1);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      try { 
        testWalker1.afterEach((ExecutableBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker0.afterEach(executableBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestVisitor[] testVisitorArray0 = null;
      // Undeclared exception!
      try { 
        testWalker0.walk((TestVisitor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TestWalker testWalker0 = new TestWalker(class0);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[2];
      testWalker1.walk();
      Class<Object> class1 = Object.class;
      TestWalker testWalker2 = new TestWalker(class1);
      TestWalker testWalker3 = new TestWalker(class0, testWalker2);
      // Undeclared exception!
      try { 
        testWalker1.walk(testVisitorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      TestWalker testWalker0 = new TestWalker(class1);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      TestVisitor[] testVisitorArray0 = new TestVisitor[6];
      testVisitorArray0[0] = (TestVisitor) testWalker1;
      testVisitorArray0[1] = (TestVisitor) testWalker0;
      testVisitorArray0[2] = (TestVisitor) testWalker1;
      testVisitorArray0[3] = (TestVisitor) testWalker1;
      Class<Integer> class2 = Integer.class;
      TestWalker testWalker2 = new TestWalker(class2);
      testWalker2.walk();
      testWalker1.walk();
      testVisitorArray0[4] = (TestVisitor) testWalker2;
      testVisitorArray0[5] = (TestVisitor) testWalker0;
      // Undeclared exception!
      try { 
        testWalker0.walk(testVisitorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class0);
      testWalker0.walk((TestVisitor[]) null);
      try { 
        testWalker0.beforeEach((ExecutableBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      TestWalker testWalker0 = new TestWalker(class1);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      testWalker1.walk();
      assertFalse(testWalker1.equals((Object)testWalker0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      TestWalker testWalker0 = new TestWalker(class1);
      TestWalker testWalker1 = new TestWalker(class0, testWalker0);
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      try { 
        testWalker1.beforeEach(executableBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.builder.TestWalker", e);
      }
  }
}
