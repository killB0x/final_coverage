/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 16:01:27 GMT 2022
 */

package impl.com.github.paulcwarren.ginkgo4j.chains;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.paulcwarren.ginkgo4j.ExecutableBlock;
import impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChain;
import impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChainBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutableChainBuilder_ESTest extends ExecutableChainBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A.impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChainBuilder");
      executableChainBuilder0.context("", (ExecutableBlock) null, true);
      executableChainBuilder0.justBeforeEach((ExecutableBlock) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A.impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChainBuilder");
      executableChainBuilder0.context("", (ExecutableBlock) null, true);
      executableChainBuilder0.beforeEach((ExecutableBlock) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A");
      executableChainBuilder0.describe((String) null, (ExecutableBlock) null, false);
      executableChainBuilder0.afterEach((ExecutableBlock) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("`i$B1VP! Fyko%>a");
      executableChainBuilder0.it("`i$B1VP! Fyko%>a", (ExecutableBlock) null, true);
      ExecutableChain executableChain0 = executableChainBuilder0.getExecutableChain();
      assertTrue(executableChain0.isFocused());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder((String) null);
      // Undeclared exception!
      try { 
        executableChainBuilder0.it((String) null, (ExecutableBlock) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder((String) null);
      // Undeclared exception!
      try { 
        executableChainBuilder0.describe((String) null, (ExecutableBlock) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder((String) null);
      // Undeclared exception!
      try { 
        executableChainBuilder0.context((String) null, (ExecutableBlock) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("...");
      executableChainBuilder0.it("#+Pht'bH:+JC8Pvr", (ExecutableBlock) null, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("...");
      executableChainBuilder0.context(".", (ExecutableBlock) null, true);
      executableChainBuilder0.it(".", (ExecutableBlock) null, true);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A.impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChainBuilder");
      executableChainBuilder0.context("V/%l5", (ExecutableBlock) null, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("....~...");
      executableChainBuilder0.describe(".", (ExecutableBlock) null, true);
      executableChainBuilder0.context(".", (ExecutableBlock) null, true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("...");
      executableChainBuilder0.describe("Gl", (ExecutableBlock) null, true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A.impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChainBuilder");
      // Undeclared exception!
      try { 
        executableChainBuilder0.beforeEach((ExecutableBlock) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A");
      // Undeclared exception!
      try { 
        executableChainBuilder0.afterEach((ExecutableBlock) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("");
      ExecutableChain executableChain0 = executableChainBuilder0.getExecutableChain();
      assertEquals("", executableChain0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("");
      executableChainBuilder0.test((Object) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutableChainBuilder executableChainBuilder0 = new ExecutableChainBuilder("_EMPTY_.V+A.impl.com.github.paulcwarren.ginkgo4j.chains.ExecutableChainBuilder");
      // Undeclared exception!
      try { 
        executableChainBuilder0.justBeforeEach((ExecutableBlock) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
