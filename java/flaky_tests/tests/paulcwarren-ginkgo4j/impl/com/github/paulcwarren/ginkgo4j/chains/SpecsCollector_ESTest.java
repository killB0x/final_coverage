/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 16:09:43 GMT 2022
 */

package impl.com.github.paulcwarren.ginkgo4j.chains;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.paulcwarren.ginkgo4j.ExecutableBlock;
import impl.com.github.paulcwarren.ginkgo4j.Spec;
import impl.com.github.paulcwarren.ginkgo4j.chains.SpecsCollector;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpecsCollector_ESTest extends SpecsCollector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      try { 
        specsCollector0.describe("sd7H</", (ExecutableBlock) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.chains.SpecsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      try { 
        specsCollector0.context("", (ExecutableBlock) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.com.github.paulcwarren.ginkgo4j.chains.SpecsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      specsCollector0.describe("&Ve&IdJ F=", executableBlock0, false);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      Object object0 = new Object();
      specsCollector0.test(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      specsCollector0.context("", executableBlock0, true);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      specsCollector0.afterEach(executableBlock0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      specsCollector0.justBeforeEach((ExecutableBlock) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      specsCollector0.beforeEach((ExecutableBlock) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      specsCollector0.it("]", executableBlock0, false);
      List<Spec> list0 = specsCollector0.getSpecs();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SpecsCollector specsCollector0 = new SpecsCollector();
      List<Spec> list0 = specsCollector0.getSpecs();
      assertTrue(list0.isEmpty());
  }
}
