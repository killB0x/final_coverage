/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 16:12:34 GMT 2022
 */

package impl.com.github.paulcwarren.ginkgo4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.github.paulcwarren.ginkgo4j.ExecutableBlock;
import impl.com.github.paulcwarren.ginkgo4j.Spec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Spec_ESTest extends Spec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      Spec spec0 = new Spec("AFF1D@", executableBlock0, false);
      boolean boolean0 = spec0.isFocused();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      Spec spec0 = new Spec("AFF1D@", executableBlock0, false);
      spec0.getId();
      assertFalse(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      Spec spec0 = new Spec("", executableBlock0, true);
      spec0.getId();
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(executableBlock0).toString();
      Spec spec0 = new Spec("", executableBlock0, true);
      spec0.getExecutableBlock();
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Spec spec0 = new Spec((String) null, (ExecutableBlock) null, true);
      spec0.getDescription();
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutableBlock executableBlock0 = mock(ExecutableBlock.class, new ViolatedAssumptionAnswer());
      Spec spec0 = new Spec("", executableBlock0, true);
      spec0.getDescription();
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Spec spec0 = new Spec((String) null, (ExecutableBlock) null, true);
      boolean boolean0 = spec0.isFocused();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Spec spec0 = new Spec((String) null, (ExecutableBlock) null, true);
      spec0.getExecutableBlock();
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Spec spec0 = new Spec((String) null, (ExecutableBlock) null, true);
      spec0.getId();
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spec spec0 = new Spec((String) null, (ExecutableBlock) null, true);
      String string0 = spec0.toString();
      assertEquals("Spec [null]", string0);
      assertTrue(spec0.isFocused());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Spec spec0 = new Spec("B;vlm", (ExecutableBlock) null, true);
      spec0.getDescription();
      assertTrue(spec0.isFocused());
  }
}
