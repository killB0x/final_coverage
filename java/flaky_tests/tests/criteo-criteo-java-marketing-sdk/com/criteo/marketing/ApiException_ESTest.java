/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:57:32 GMT 2022
 */

package com.criteo.marketing;

import org.junit.Test;
import static org.junit.Assert.*;
import com.criteo.marketing.ApiException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ApiException_ESTest extends ApiException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ApiException apiException0 = new ApiException(684, "", hashMap0, "]3]gZ=!ewS:d");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApiException apiException0 = new ApiException(0, ":>)#QOESS");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>(0, 1834.4655F);
      ApiException apiException0 = new ApiException("", 0, hashMap0, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("", linkedList0);
      Map<String, List<String>> map0 = apiException0.getResponseHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApiException apiException0 = new ApiException("J~4NwWxc>$.Z7=P");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ApiException apiException1 = new ApiException("%7\"E ~|X", apiException0, 1, hashMap0, "J~4NwWxc>$.Z7=P");
      String string0 = apiException1.getResponseBody();
      assertEquals("J~4NwWxc>$.Z7=P", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApiException apiException0 = new ApiException("zZ1];;o");
      MockThrowable mockThrowable0 = new MockThrowable("zZ1];;o", apiException0);
      ApiException apiException1 = new ApiException("}", mockThrowable0, (-2079), (Map<String, List<String>>) null, "");
      String string0 = apiException1.getResponseBody();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApiException apiException0 = new ApiException(1, (Map<String, List<String>>) null, "{AT<$|8FsV");
      int int0 = apiException0.getCode();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApiException apiException0 = new ApiException("zZ1];;o");
      MockThrowable mockThrowable0 = new MockThrowable("zZ1];;o", apiException0);
      ApiException apiException1 = new ApiException("}", mockThrowable0, (-2079), (Map<String, List<String>>) null, "");
      int int0 = apiException1.getCode();
      assertEquals((-2079), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApiException apiException0 = new ApiException();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ApiException apiException1 = new ApiException("", apiException0, (-4004), hashMap0);
      assertFalse(apiException1.equals((Object)apiException0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApiException apiException0 = new ApiException("zZ1];;o");
      Map<String, List<String>> map0 = apiException0.getResponseHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApiException apiException0 = new ApiException("zZ1];;o");
      String string0 = apiException0.getResponseBody();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApiException apiException0 = new ApiException("zZ1];;o");
      int int0 = apiException0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ApiException apiException0 = new ApiException("", 0, hashMap0, "");
      Map<String, List<String>> map0 = apiException0.getResponseHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApiException apiException0 = new ApiException((Throwable) null);
  }
}
