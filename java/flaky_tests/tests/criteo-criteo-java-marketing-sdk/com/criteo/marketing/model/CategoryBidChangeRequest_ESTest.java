/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:42:03 GMT 2022
 */

package com.criteo.marketing.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.criteo.marketing.model.CategoryBidChangeRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CategoryBidChangeRequest_ESTest extends CategoryBidChangeRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Integer integer0 = new Integer(0);
      categoryBidChangeRequest0.categoryHashcode(integer0);
      Integer integer1 = categoryBidChangeRequest0.getCategoryHashcode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Integer integer0 = new Integer(1399);
      categoryBidChangeRequest0.setCategoryHashcode(integer0);
      Integer integer1 = categoryBidChangeRequest0.getCategoryHashcode();
      assertEquals(1399, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Integer integer0 = new Integer((-2503));
      categoryBidChangeRequest0.setCategoryHashcode(integer0);
      Integer integer1 = categoryBidChangeRequest0.getCategoryHashcode();
      assertEquals((-2503), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Double double0 = new Double(0.0);
      categoryBidChangeRequest0.bidValue(double0);
      Double double1 = categoryBidChangeRequest0.getBidValue();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Double double0 = new Double(1550);
      categoryBidChangeRequest0.setBidValue(double0);
      Double double1 = categoryBidChangeRequest0.getBidValue();
      assertEquals(1550.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Double double0 = new Double((-1370.2427659056));
      categoryBidChangeRequest0.bidValue(double0);
      Double double1 = categoryBidChangeRequest0.getBidValue();
      assertEquals((-1370.2427659056), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Integer integer0 = new Integer(0);
      categoryBidChangeRequest0.setCategoryHashcode(integer0);
      String string0 = categoryBidChangeRequest0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      CategoryBidChangeRequest categoryBidChangeRequest1 = new CategoryBidChangeRequest();
      assertTrue(categoryBidChangeRequest1.equals((Object)categoryBidChangeRequest0));
      
      Double double0 = new Double(1.0);
      categoryBidChangeRequest0.bidValue(double0);
      boolean boolean0 = categoryBidChangeRequest1.equals(categoryBidChangeRequest0);
      assertFalse(categoryBidChangeRequest1.equals((Object)categoryBidChangeRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      CategoryBidChangeRequest categoryBidChangeRequest1 = new CategoryBidChangeRequest();
      Integer integer0 = new Integer(2);
      CategoryBidChangeRequest categoryBidChangeRequest2 = categoryBidChangeRequest1.categoryHashcode(integer0);
      boolean boolean0 = categoryBidChangeRequest0.equals(categoryBidChangeRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Object object0 = new Object();
      boolean boolean0 = categoryBidChangeRequest0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      boolean boolean0 = categoryBidChangeRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      boolean boolean0 = categoryBidChangeRequest0.equals(categoryBidChangeRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      CategoryBidChangeRequest categoryBidChangeRequest1 = new CategoryBidChangeRequest();
      boolean boolean0 = categoryBidChangeRequest0.equals(categoryBidChangeRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Integer integer0 = categoryBidChangeRequest0.getCategoryHashcode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      Double double0 = categoryBidChangeRequest0.getBidValue();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryBidChangeRequest categoryBidChangeRequest0 = new CategoryBidChangeRequest();
      categoryBidChangeRequest0.hashCode();
  }
}
