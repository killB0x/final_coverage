/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:34:48 GMT 2022
 */

package com.criteo.marketing.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.criteo.marketing.model.CategoryUpdatesPerCatalogError;
import com.criteo.marketing.model.MessageWithDetailsCategoryUpdatesPerCatalogError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MessageWithDetailsCategoryUpdatesPerCatalogError_ESTest extends MessageWithDetailsCategoryUpdatesPerCatalogError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      messageWithDetailsCategoryUpdatesPerCatalogError0.setMessage("message");
      String string0 = messageWithDetailsCategoryUpdatesPerCatalogError0.getMessage();
      assertEquals("message", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      messageWithDetailsCategoryUpdatesPerCatalogError0.setMessage("");
      String string0 = messageWithDetailsCategoryUpdatesPerCatalogError0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      CategoryUpdatesPerCatalogError categoryUpdatesPerCatalogError0 = new CategoryUpdatesPerCatalogError();
      messageWithDetailsCategoryUpdatesPerCatalogError0.setDetails(categoryUpdatesPerCatalogError0);
      CategoryUpdatesPerCatalogError categoryUpdatesPerCatalogError1 = messageWithDetailsCategoryUpdatesPerCatalogError0.getDetails();
      assertNull(categoryUpdatesPerCatalogError1.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      CategoryUpdatesPerCatalogError categoryUpdatesPerCatalogError0 = new CategoryUpdatesPerCatalogError();
      messageWithDetailsCategoryUpdatesPerCatalogError0.details(categoryUpdatesPerCatalogError0);
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError1 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      boolean boolean0 = messageWithDetailsCategoryUpdatesPerCatalogError0.equals(messageWithDetailsCategoryUpdatesPerCatalogError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError1 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      assertTrue(messageWithDetailsCategoryUpdatesPerCatalogError1.equals((Object)messageWithDetailsCategoryUpdatesPerCatalogError0));
      
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError2 = messageWithDetailsCategoryUpdatesPerCatalogError0.message("errorCode");
      boolean boolean0 = messageWithDetailsCategoryUpdatesPerCatalogError1.equals(messageWithDetailsCategoryUpdatesPerCatalogError2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      Object object0 = new Object();
      boolean boolean0 = messageWithDetailsCategoryUpdatesPerCatalogError0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      boolean boolean0 = messageWithDetailsCategoryUpdatesPerCatalogError0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      boolean boolean0 = messageWithDetailsCategoryUpdatesPerCatalogError0.equals(messageWithDetailsCategoryUpdatesPerCatalogError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError1 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      boolean boolean0 = messageWithDetailsCategoryUpdatesPerCatalogError1.equals(messageWithDetailsCategoryUpdatesPerCatalogError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      String string0 = messageWithDetailsCategoryUpdatesPerCatalogError0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      CategoryUpdatesPerCatalogError categoryUpdatesPerCatalogError0 = messageWithDetailsCategoryUpdatesPerCatalogError0.getDetails();
      assertNull(categoryUpdatesPerCatalogError0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      messageWithDetailsCategoryUpdatesPerCatalogError0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MessageWithDetailsCategoryUpdatesPerCatalogError messageWithDetailsCategoryUpdatesPerCatalogError0 = new MessageWithDetailsCategoryUpdatesPerCatalogError();
      messageWithDetailsCategoryUpdatesPerCatalogError0.setMessage("message");
      messageWithDetailsCategoryUpdatesPerCatalogError0.toString();
      assertEquals("message", messageWithDetailsCategoryUpdatesPerCatalogError0.getMessage());
  }
}
