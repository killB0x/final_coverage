/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:47:03 GMT 2022
 */

package com.criteo.marketing.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.criteo.marketing.model.ProductUnitPricingBaseMeasureV3;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProductUnitPricingBaseMeasureV3_ESTest extends ProductUnitPricingBaseMeasureV3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      productUnitPricingBaseMeasureV3_0.value("eN};DP,eN58 _#");
      String string0 = productUnitPricingBaseMeasureV3_0.getValue();
      assertEquals("eN};DP,eN58 _#", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      productUnitPricingBaseMeasureV3_0.setValue("");
      String string0 = productUnitPricingBaseMeasureV3_0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_1 = productUnitPricingBaseMeasureV3_0.unit("unit");
      String string0 = productUnitPricingBaseMeasureV3_1.getUnit();
      assertEquals("unit", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      productUnitPricingBaseMeasureV3_0.setUnit("");
      String string0 = productUnitPricingBaseMeasureV3_0.getUnit();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      productUnitPricingBaseMeasureV3_0.unit("unit");
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_1 = new ProductUnitPricingBaseMeasureV3();
      boolean boolean0 = productUnitPricingBaseMeasureV3_1.equals(productUnitPricingBaseMeasureV3_0);
      assertFalse(boolean0);
      assertEquals("unit", productUnitPricingBaseMeasureV3_0.getUnit());
      assertFalse(productUnitPricingBaseMeasureV3_0.equals((Object)productUnitPricingBaseMeasureV3_1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      Object object0 = new Object();
      boolean boolean0 = productUnitPricingBaseMeasureV3_0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      boolean boolean0 = productUnitPricingBaseMeasureV3_0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      boolean boolean0 = productUnitPricingBaseMeasureV3_0.equals(productUnitPricingBaseMeasureV3_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_1 = new ProductUnitPricingBaseMeasureV3();
      boolean boolean0 = productUnitPricingBaseMeasureV3_1.equals(productUnitPricingBaseMeasureV3_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      String string0 = productUnitPricingBaseMeasureV3_0.toString();
      assertEquals("class ProductUnitPricingBaseMeasureV3 {\n    value: null\n    unit: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      productUnitPricingBaseMeasureV3_0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      String string0 = productUnitPricingBaseMeasureV3_0.getUnit();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      String string0 = productUnitPricingBaseMeasureV3_0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_1 = productUnitPricingBaseMeasureV3_0.value("value");
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_2 = new ProductUnitPricingBaseMeasureV3();
      boolean boolean0 = productUnitPricingBaseMeasureV3_2.equals(productUnitPricingBaseMeasureV3_1);
      assertFalse(productUnitPricingBaseMeasureV3_1.equals((Object)productUnitPricingBaseMeasureV3_2));
      assertFalse(boolean0);
      assertEquals("value", productUnitPricingBaseMeasureV3_1.getValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProductUnitPricingBaseMeasureV3 productUnitPricingBaseMeasureV3_0 = new ProductUnitPricingBaseMeasureV3();
      productUnitPricingBaseMeasureV3_0.setValue("unit");
      productUnitPricingBaseMeasureV3_0.toString();
      assertEquals("unit", productUnitPricingBaseMeasureV3_0.getValue());
  }
}
