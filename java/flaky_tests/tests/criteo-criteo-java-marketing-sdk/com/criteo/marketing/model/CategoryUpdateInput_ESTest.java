/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:30:11 GMT 2022
 */

package com.criteo.marketing.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.criteo.marketing.model.CategoryUpdateInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CategoryUpdateInput_ESTest extends CategoryUpdateInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Boolean boolean0 = Boolean.TRUE;
      categoryUpdateInput0.enabled(boolean0);
      Boolean boolean1 = categoryUpdateInput0.getEnabled();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Boolean boolean0 = Boolean.FALSE;
      CategoryUpdateInput categoryUpdateInput1 = categoryUpdateInput0.enabled(boolean0);
      Boolean boolean1 = categoryUpdateInput1.getEnabled();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Integer integer0 = new Integer(0);
      categoryUpdateInput0.categoryHashCode(integer0);
      Integer integer1 = categoryUpdateInput0.getCategoryHashCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Integer integer0 = new Integer((-2532));
      categoryUpdateInput0.categoryHashCode(integer0);
      Integer integer1 = categoryUpdateInput0.getCategoryHashCode();
      assertEquals((-2532), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      CategoryUpdateInput categoryUpdateInput1 = new CategoryUpdateInput();
      boolean boolean0 = categoryUpdateInput0.equals(categoryUpdateInput1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Integer integer0 = new Integer((-1));
      CategoryUpdateInput categoryUpdateInput1 = categoryUpdateInput0.categoryHashCode(integer0);
      CategoryUpdateInput categoryUpdateInput2 = new CategoryUpdateInput();
      boolean boolean0 = categoryUpdateInput1.equals(categoryUpdateInput2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = categoryUpdateInput0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      boolean boolean0 = categoryUpdateInput0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      boolean boolean0 = categoryUpdateInput0.equals(categoryUpdateInput0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      CategoryUpdateInput categoryUpdateInput1 = new CategoryUpdateInput();
      assertTrue(categoryUpdateInput1.equals((Object)categoryUpdateInput0));
      
      Boolean boolean0 = Boolean.FALSE;
      CategoryUpdateInput categoryUpdateInput2 = categoryUpdateInput1.enabled(boolean0);
      boolean boolean1 = categoryUpdateInput0.equals(categoryUpdateInput2);
      assertFalse(categoryUpdateInput1.equals((Object)categoryUpdateInput0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Boolean boolean0 = categoryUpdateInput0.getEnabled();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Boolean boolean0 = Boolean.FALSE;
      categoryUpdateInput0.setEnabled(boolean0);
      assertFalse(categoryUpdateInput0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Integer integer0 = Integer.getInteger("categoryHashCode", 2);
      categoryUpdateInput0.setCategoryHashCode(integer0);
      assertNull(categoryUpdateInput0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      String string0 = categoryUpdateInput0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Integer integer0 = Integer.getInteger("categoryHashCode", 2);
      CategoryUpdateInput categoryUpdateInput1 = categoryUpdateInput0.categoryHashCode(integer0);
      Integer integer1 = categoryUpdateInput1.getCategoryHashCode();
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      categoryUpdateInput0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Boolean boolean0 = Boolean.FALSE;
      categoryUpdateInput0.enabled(boolean0);
      String string0 = categoryUpdateInput0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryUpdateInput categoryUpdateInput0 = new CategoryUpdateInput();
      Integer integer0 = categoryUpdateInput0.getCategoryHashCode();
      assertNull(integer0);
  }
}
