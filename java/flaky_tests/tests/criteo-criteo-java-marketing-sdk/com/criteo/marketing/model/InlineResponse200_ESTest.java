/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:08:17 GMT 2022
 */

package com.criteo.marketing.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.criteo.marketing.model.InlineResponse200;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InlineResponse200_ESTest extends InlineResponse200_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.tokenType("\"o.");
      String string0 = inlineResponse200_0.getTokenType();
      assertEquals("\"o.", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.tokenType("");
      String string0 = inlineResponse200_0.getTokenType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      Integer integer0 = new Integer(0);
      inlineResponse200_0.setExpiresIn(integer0);
      Integer integer1 = inlineResponse200_0.getExpiresIn();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      Integer integer0 = new Integer(1);
      inlineResponse200_0.expiresIn(integer0);
      Integer integer1 = inlineResponse200_0.getExpiresIn();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      Integer integer0 = new Integer((-1));
      InlineResponse200 inlineResponse200_1 = inlineResponse200_0.expiresIn(integer0);
      Integer integer1 = inlineResponse200_1.getExpiresIn();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.accessToken("ETONARR3NX|");
      String string0 = inlineResponse200_0.getAccessToken();
      assertEquals("ETONARR3NX|", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.accessToken("");
      String string0 = inlineResponse200_0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      Integer integer0 = new Integer((-1));
      inlineResponse200_0.expiresIn(integer0);
      String string0 = inlineResponse200_0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      InlineResponse200 inlineResponse200_1 = inlineResponse200_0.tokenType("expires_in");
      InlineResponse200 inlineResponse200_2 = new InlineResponse200();
      boolean boolean0 = inlineResponse200_0.equals(inlineResponse200_2);
      assertFalse(boolean0);
      assertEquals("expires_in", inlineResponse200_0.getTokenType());
      assertFalse(inlineResponse200_2.equals((Object)inlineResponse200_1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      InlineResponse200 inlineResponse200_1 = new InlineResponse200();
      assertTrue(inlineResponse200_1.equals((Object)inlineResponse200_0));
      
      Integer integer0 = new Integer(1);
      inlineResponse200_1.expiresIn(integer0);
      boolean boolean0 = inlineResponse200_0.equals(inlineResponse200_1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      Object object0 = new Object();
      boolean boolean0 = inlineResponse200_0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      boolean boolean0 = inlineResponse200_0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      boolean boolean0 = inlineResponse200_0.equals(inlineResponse200_0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      InlineResponse200 inlineResponse200_1 = new InlineResponse200();
      boolean boolean0 = inlineResponse200_0.equals(inlineResponse200_1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      String string0 = inlineResponse200_0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.setAccessToken("access_token");
      assertEquals("access_token", inlineResponse200_0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      InlineResponse200 inlineResponse200_1 = inlineResponse200_0.accessToken("access_token");
      InlineResponse200 inlineResponse200_2 = new InlineResponse200();
      boolean boolean0 = inlineResponse200_0.equals(inlineResponse200_2);
      assertFalse(boolean0);
      assertEquals("access_token", inlineResponse200_0.getAccessToken());
      assertFalse(inlineResponse200_2.equals((Object)inlineResponse200_1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      Integer integer0 = inlineResponse200_0.getExpiresIn();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      String string0 = inlineResponse200_0.getTokenType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineResponse200 inlineResponse200_0 = new InlineResponse200();
      inlineResponse200_0.setTokenType("token_type");
      assertEquals("token_type", inlineResponse200_0.getTokenType());
  }
}
