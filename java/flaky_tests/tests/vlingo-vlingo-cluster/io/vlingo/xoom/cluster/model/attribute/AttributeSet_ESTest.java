/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 17:35:59 GMT 2022
 */

package io.vlingo.xoom.cluster.model.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.cluster.model.attribute.Attribute;
import io.vlingo.xoom.cluster.model.attribute.AttributeSet;
import io.vlingo.xoom.cluster.model.attribute.TrackedAttribute;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeSet_ESTest extends AttributeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      attributeSet0.hashCode();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      
      attributeSet0.hashCode();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("7, id=", attributeSet0, attribute_Type0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = trackedAttribute0.asDistributed();
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute1.isPresent());
      assertTrue(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isAbsent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(trackedAttribute1.distributed);
      
      boolean boolean0 = attributeSet0.isDefined();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(boolean0);
      
      AttributeSet attributeSet1 = AttributeSet.named("__none");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = AttributeSet.None;
      assertSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.isNone());
      assertFalse(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = AttributeSet.named("__none");
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet0);
      assertTrue(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.isDefined());
      assertFalse(attributeSet3.isNone());
      assertNotNull(attributeSet3);
      
      TrackedAttribute trackedAttribute2 = attributeSet0.addIfAbsent(attribute0);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertSame(attributeSet0, attributeSet2);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute2.isDistributed());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isAbsent());
      assertNotNull(trackedAttribute2);
      assertFalse(trackedAttribute2.distributed);
      
      TrackedAttribute trackedAttribute3 = attributeSet1.replace(trackedAttribute2.attribute);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet0);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertNotSame(trackedAttribute2, trackedAttribute3);
      assertNotSame(trackedAttribute3, trackedAttribute1);
      assertNotSame(trackedAttribute3, trackedAttribute0);
      assertNotSame(trackedAttribute3, trackedAttribute2);
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(trackedAttribute2.isDistributed());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isAbsent());
      assertTrue(trackedAttribute3.isAbsent());
      assertFalse(trackedAttribute3.isPresent());
      assertFalse(trackedAttribute3.isDistributed());
      assertNotNull(trackedAttribute3);
      assertFalse(trackedAttribute2.distributed);
      assertFalse(trackedAttribute3.distributed);
      
      AttributeSet attributeSet4 = AttributeSet.named(")M~_[|Bup");
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet0);
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet0));
      assertTrue(attributeSet4.isDefined());
      assertFalse(attributeSet4.isNone());
      assertNotNull(attributeSet4);
      
      TrackedAttribute trackedAttribute4 = attributeSet4.remove(trackedAttribute0.attribute);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet4);
      assertNotSame(trackedAttribute0, trackedAttribute4);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute0, trackedAttribute3);
      assertSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet0);
      assertNotSame(trackedAttribute4, trackedAttribute2);
      assertNotSame(trackedAttribute4, trackedAttribute0);
      assertNotSame(trackedAttribute4, trackedAttribute1);
      assertSame(trackedAttribute4, trackedAttribute3);
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet4));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute3));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(attributeSet4.isDefined());
      assertFalse(attributeSet4.isNone());
      assertTrue(trackedAttribute4.isAbsent());
      assertFalse(trackedAttribute4.isDistributed());
      assertFalse(trackedAttribute4.isPresent());
      assertNotNull(trackedAttribute4);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute4.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AttributeSet attributeSet5 = AttributeSet.named("__none");
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet1);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertTrue(attributeSet5.equals((Object)attributeSet3));
      assertTrue(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertNotNull(attributeSet5);
      
      // Undeclared exception!
      attributeSet0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("!TNaH&BA[Q3*Vd", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      AttributeSet attributeSet1 = AttributeSet.named("DgW1nk5k#oL/i:");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = trackedAttribute0.asDistributed();
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isDistributed());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(trackedAttribute1.distributed);
      
      boolean boolean0 = attributeSet0.isDefined();
      assertNotSame(attributeSet0, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(boolean0);
      
      TrackedAttribute trackedAttribute2 = attributeSet0.addIfAbsent(trackedAttribute1.attribute);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertNotSame(trackedAttribute1, trackedAttribute2);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute2.isDistributed());
      assertFalse(trackedAttribute2.isAbsent());
      assertTrue(trackedAttribute2.isPresent());
      assertNotNull(trackedAttribute2);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(trackedAttribute1.distributed);
      assertFalse(trackedAttribute2.distributed);
      
      AttributeSet attributeSet2 = AttributeSet.named("DgW1nk5k#oL/i:");
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = attributeSet1.copy(attributeSet0);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertTrue(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertTrue(attributeSet3.equals((Object)attributeSet0));
      assertFalse(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      TrackedAttribute trackedAttribute3 = attributeSet1.addIfAbsent(trackedAttribute2.attribute);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute0, trackedAttribute3);
      assertSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(trackedAttribute1, trackedAttribute3);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertNotSame(trackedAttribute1, trackedAttribute2);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertNotSame(trackedAttribute2, trackedAttribute3);
      assertNotSame(trackedAttribute3, trackedAttribute0);
      assertNotSame(trackedAttribute3, trackedAttribute1);
      assertNotSame(trackedAttribute3, trackedAttribute2);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute2));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute3.equals((Object)trackedAttribute0));
      assertFalse(trackedAttribute3.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute3.equals((Object)trackedAttribute2));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute2.isDistributed());
      assertFalse(trackedAttribute2.isAbsent());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute3.isAbsent());
      assertTrue(trackedAttribute3.isPresent());
      assertFalse(trackedAttribute3.isDistributed());
      assertNotNull(trackedAttribute3);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(trackedAttribute1.distributed);
      assertFalse(trackedAttribute2.distributed);
      assertFalse(trackedAttribute3.distributed);
      
      TrackedAttribute trackedAttribute4 = attributeSet2.replace(trackedAttribute1.attribute);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute0, trackedAttribute3);
      assertNotSame(trackedAttribute0, trackedAttribute4);
      assertSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(trackedAttribute1, trackedAttribute4);
      assertNotSame(trackedAttribute1, trackedAttribute3);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertNotSame(trackedAttribute1, trackedAttribute2);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(trackedAttribute4, trackedAttribute3);
      assertNotSame(trackedAttribute4, trackedAttribute1);
      assertNotSame(trackedAttribute4, trackedAttribute0);
      assertNotSame(trackedAttribute4, trackedAttribute2);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute3));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute3));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute2));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isDistributed());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertFalse(trackedAttribute4.isDistributed());
      assertFalse(trackedAttribute4.isPresent());
      assertTrue(trackedAttribute4.isAbsent());
      assertNotNull(trackedAttribute4);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(trackedAttribute1.distributed);
      assertFalse(trackedAttribute4.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AttributeSet attributeSet4 = AttributeSet.None;
      assertSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet3);
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertTrue(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.isDefined());
      assertTrue(attributeSet4.isNone());
      assertNotNull(attributeSet4);
      
      boolean boolean1 = attributeSet2.equals(attributeSet1);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet4);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet4));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet4));
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertFalse(boolean1);
      
      AttributeSet attributeSet5 = AttributeSet.named(", id=");
      assertNotSame(attributeSet5, attributeSet2);
      assertNotSame(attributeSet5, attributeSet1);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet0);
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertTrue(attributeSet5.isDefined());
      assertFalse(attributeSet5.isNone());
      assertNotNull(attributeSet5);
      
      AttributeSet attributeSet6 = attributeSet2.copy(attributeSet1);
      assertNotSame(attributeSet6, attributeSet4);
      assertNotSame(attributeSet6, attributeSet3);
      assertNotSame(attributeSet6, attributeSet5);
      assertNotSame(attributeSet6, attributeSet1);
      assertNotSame(attributeSet6, attributeSet2);
      assertNotSame(attributeSet6, attributeSet0);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet5);
      assertNotSame(attributeSet1, attributeSet6);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet5);
      assertNotSame(attributeSet2, attributeSet6);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet4);
      assertFalse(attributeSet6.equals((Object)attributeSet4));
      assertFalse(attributeSet6.equals((Object)attributeSet3));
      assertFalse(attributeSet6.equals((Object)attributeSet5));
      assertFalse(attributeSet6.equals((Object)attributeSet2));
      assertFalse(attributeSet6.equals((Object)attributeSet0));
      assertTrue(attributeSet6.equals((Object)attributeSet1));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet5));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet4));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet5));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet4));
      assertTrue(attributeSet6.isDefined());
      assertFalse(attributeSet6.isNone());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet6);
      
      attributeSet3.hashCode();
      assertSame(attributeSet0, attributeSet4);
      assertNotSame(attributeSet0, attributeSet6);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet5);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet5);
      assertNotSame(attributeSet1, attributeSet6);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet6);
      assertNotSame(attributeSet3, attributeSet5);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet4);
      assertFalse(attributeSet0.equals((Object)attributeSet6));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet5));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet5));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertTrue(attributeSet1.equals((Object)attributeSet6));
      assertFalse(attributeSet1.equals((Object)attributeSet4));
      assertTrue(attributeSet3.equals((Object)attributeSet4));
      assertFalse(attributeSet3.equals((Object)attributeSet6));
      assertFalse(attributeSet3.equals((Object)attributeSet5));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertTrue(attributeSet3.equals((Object)attributeSet0));
      assertFalse(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      AttributeSet attributeSet1 = AttributeSet.named("__none");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributeSet1.equals(attributeSet0);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>((String) null, (Object) null, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      // Undeclared exception!
      try { 
        attributeSet0.attributeNamed("__none:null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named((String) null);
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      // Undeclared exception!
      try { 
        attributeSet0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      attributeSet0.hashCode();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      
      attributeSet0.hashCode();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>(", id=", attributeSet0, attribute_Type0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = trackedAttribute0.asDistributed();
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute1.isDistributed());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(trackedAttribute1.distributed);
      
      boolean boolean0 = attributeSet0.isDefined();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(boolean0);
      
      AttributeSet attributeSet1 = AttributeSet.named("__none");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = AttributeSet.None;
      assertNotSame(attributeSet2, attributeSet1);
      assertSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.isDefined());
      assertTrue(attributeSet2.isNone());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = attributeSet0.copy(attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet2, attributeSet1);
      assertSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet1));
      assertTrue(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet2));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet2.isDefined());
      assertTrue(attributeSet2.isNone());
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      AttributeSet attributeSet4 = AttributeSet.named("__none");
      assertNotSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet1);
      assertFalse(attributeSet4.equals((Object)attributeSet0));
      assertTrue(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.isNone());
      assertTrue(attributeSet4.isDefined());
      assertNotNull(attributeSet4);
      
      TrackedAttribute trackedAttribute2 = attributeSet0.addIfAbsent(attribute0);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet4);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet4));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute2.isDistributed());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isAbsent());
      assertNotNull(trackedAttribute2);
      assertFalse(trackedAttribute2.distributed);
      
      TrackedAttribute trackedAttribute3 = attributeSet1.replace(trackedAttribute2.attribute);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet4);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertNotSame(trackedAttribute2, trackedAttribute3);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertNotSame(trackedAttribute3, trackedAttribute2);
      assertNotSame(trackedAttribute3, trackedAttribute0);
      assertNotSame(trackedAttribute3, trackedAttribute1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet4));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.equals((Object)attributeSet4));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(trackedAttribute2.isDistributed());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isAbsent());
      assertFalse(trackedAttribute3.isPresent());
      assertTrue(trackedAttribute3.isAbsent());
      assertFalse(trackedAttribute3.isDistributed());
      assertNotNull(trackedAttribute3);
      assertFalse(trackedAttribute2.distributed);
      assertFalse(trackedAttribute3.distributed);
      
      AttributeSet attributeSet5 = AttributeSet.named(")M~b_[|mBup");
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet1);
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertNotNull(attributeSet5);
      
      TrackedAttribute trackedAttribute4 = attributeSet5.remove(trackedAttribute0.attribute);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet4);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet5);
      assertSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute0, trackedAttribute4);
      assertNotSame(trackedAttribute0, trackedAttribute3);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet1);
      assertSame(trackedAttribute4, trackedAttribute3);
      assertNotSame(trackedAttribute4, trackedAttribute0);
      assertNotSame(trackedAttribute4, trackedAttribute1);
      assertNotSame(trackedAttribute4, trackedAttribute2);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet4));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet5));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute0.equals((Object)trackedAttribute3));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertFalse(trackedAttribute4.isDistributed());
      assertTrue(trackedAttribute4.isAbsent());
      assertFalse(trackedAttribute4.isPresent());
      assertNotNull(trackedAttribute4);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute4.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = attributeSet3.equals(attributeSet0);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet4);
      assertSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet5);
      assertNotSame(attributeSet2, attributeSet1);
      assertSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet5);
      assertNotSame(attributeSet2, attributeSet4);
      assertNotSame(attributeSet3, attributeSet4);
      assertNotSame(attributeSet3, attributeSet5);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet4));
      assertTrue(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet5));
      assertFalse(boolean1 == boolean0);
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet5));
      assertFalse(attributeSet2.equals((Object)attributeSet4));
      assertTrue(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet3.equals((Object)attributeSet4));
      assertFalse(attributeSet3.equals((Object)attributeSet5));
      assertFalse(attributeSet3.equals((Object)attributeSet1));
      assertTrue(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet2));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet2.isDefined());
      assertTrue(attributeSet2.isNone());
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertTrue(boolean1);
      
      AttributeSet attributeSet6 = AttributeSet.None;
      assertNotSame(attributeSet6, attributeSet5);
      assertSame(attributeSet6, attributeSet0);
      assertSame(attributeSet6, attributeSet2);
      assertNotSame(attributeSet6, attributeSet4);
      assertNotSame(attributeSet6, attributeSet3);
      assertNotSame(attributeSet6, attributeSet1);
      assertTrue(attributeSet6.equals((Object)attributeSet3));
      assertFalse(attributeSet6.equals((Object)attributeSet5));
      assertFalse(attributeSet6.equals((Object)attributeSet4));
      assertFalse(attributeSet6.equals((Object)attributeSet1));
      assertTrue(attributeSet6.isNone());
      assertFalse(attributeSet6.isDefined());
      assertNotNull(attributeSet6);
      
      // Undeclared exception!
      try { 
        attributeSet3.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      attributeSet0.hashCode();
      assertSame(attributeSet0, attributeSet1);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributeSet0.equals(attributeSet1);
      assertSame(attributeSet0, attributeSet1);
      assertSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Attribute.from("__none", (TrackedAttribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      TrackedAttribute trackedAttribute1 = attributeSet1.addIfAbsent(trackedAttribute0.attribute);
      assertSame(attributeSet0, attributeSet1);
      assertSame(trackedAttribute0, trackedAttribute1);
      assertSame(attributeSet1, attributeSet0);
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isDistributed());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute1.distributed);
      
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.String;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attributeSet0, attribute_Type0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      // Undeclared exception!
      try { 
        attributeSet0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named((String) null);
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      // Undeclared exception!
      try { 
        attributeSet0.equals(attributeSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("");
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Float;
      Attribute<Object> attribute0 = new Attribute<Object>("@d\"Of6rS<H0", object0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.addIfAbsent(attribute0);
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertFalse(trackedAttribute1.isDistributed());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      
      attributeSet0.hashCode();
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.addIfAbsent(attribute0);
      assertSame(trackedAttribute1, trackedAttribute0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("q");
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      boolean boolean0 = attributeSet0.equals(attributeSet1);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.named((String) null);
      assertNotSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet1.copy(attributeSet0);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = attributeSet0.copy(attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      boolean boolean0 = attributeSet0.isNone();
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(boolean0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.attributeNamed((String) null);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isPresent());
      assertTrue(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      String string0 = attributeSet2.toString();
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(string0);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string0);
      
      boolean boolean1 = attributeSet0.equals(attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(boolean1 == boolean0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(boolean1);
      
      attributeSet0.hashCode();
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      
      boolean boolean2 = attributeSet0.equals("AttributeSet[name=__none, attributes=[{}]]");
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(boolean2 == boolean0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        attributeSet1.remove((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      String string0 = attributeSet0.toString();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(string0);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string0);
      
      AttributeSet attributeSet1 = AttributeSet.named("AttributeSet[name=__none, attributes=[{}]]");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet1.copy(attributeSet0);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute.Type attribute_Type1 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("", attribute_Type0, attribute_Type1);
      assertFalse(attribute_Type0.equals((Object)attribute_Type1));
      assertFalse(attribute_Type1.equals((Object)attribute_Type0));
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet1.addIfAbsent(attribute0);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet2);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attribute_Type0.equals((Object)attribute_Type1));
      assertFalse(attribute_Type1.equals((Object)attribute_Type0));
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet1.attributeNamed("");
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AttributeSet attributeSet3 = AttributeSet.named((String) null);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      boolean boolean0 = attributeSet3.equals(attribute_Type0);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attribute_Type0.equals((Object)attribute_Type1));
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertFalse(boolean0);
      
      Collection<TrackedAttribute> collection0 = attributeSet0.all();
      assertFalse(collection0.contains(trackedAttribute0));
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(collection0);
      
      AttributeSet attributeSet4 = AttributeSet.None;
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet3);
      assertSame(attributeSet4, attributeSet0);
      assertTrue(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.isDefined());
      assertTrue(attributeSet4.isNone());
      assertNotNull(attributeSet4);
      
      attributeSet4.hashCode();
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet3);
      assertSame(attributeSet4, attributeSet0);
      assertTrue(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.isDefined());
      assertTrue(attributeSet4.isNone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.attributeNamed("__none");
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isAbsent());
      assertTrue(trackedAttribute1.isPresent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      boolean boolean0 = attributeSet0.isDefined();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.remove(trackedAttribute0.attribute);
      assertSame(trackedAttribute0, trackedAttribute1);
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute1.isAbsent());
      assertFalse(trackedAttribute1.isDistributed());
      assertTrue(trackedAttribute1.isPresent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.replace(trackedAttribute0.attribute);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertTrue(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute1.isDistributed());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attribute_Type0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.attributeNamed("__none:__none");
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isPresent());
      assertTrue(trackedAttribute1.isAbsent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("^<$O(RjS(/&?es");
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Character;
      Attribute<Object> attribute0 = new Attribute<Object>("^<$O(RjS(/&?es", attributeSet0, attribute_Type0);
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      AttributeSet attributeSet1 = AttributeSet.named((String) null);
      assertNotSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = TrackedAttribute.of(attributeSet0, trackedAttribute0.attribute);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertFalse(trackedAttribute1.isDistributed());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute1.distributed);
      
      TrackedAttribute trackedAttribute2 = TrackedAttribute.of(attributeSet0, trackedAttribute0.attribute);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertNotSame(trackedAttribute2, trackedAttribute0);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(trackedAttribute0.equals((Object)trackedAttribute1));
      assertTrue(trackedAttribute2.equals((Object)trackedAttribute1));
      assertTrue(trackedAttribute2.equals((Object)trackedAttribute0));
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute2.isDistributed());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isAbsent());
      assertNotNull(trackedAttribute2);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute2.distributed);
      
      boolean boolean0 = trackedAttribute0.sameAs(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(trackedAttribute0, trackedAttribute2);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(trackedAttribute0.equals((Object)trackedAttribute1));
      assertTrue(trackedAttribute0.equals((Object)trackedAttribute2));
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.distributed);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Attribute.from("^<$O(RjS(/&?es", trackedAttribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type 'io.vlingo.xoom.cluster.model.attribute.TrackedAttribute' is not recognized.
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      boolean boolean0 = attributeSet0.equals((Object) null);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "G\\{LUt#Z`T9g&q";
      AttributeSet attributeSet0 = AttributeSet.named("G{LUt#Z`T9g&q");
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.named("G{LUt#Z`T9g&q");
      assertNotSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertTrue(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet2);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("G{LUt#Z`T9g&q", (Object) null, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.replace(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertTrue(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isPresent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      // Undeclared exception!
      try { 
        Attribute.from("G{LUt#Z`T9g&q", (Object) attributeSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type 'io.vlingo.xoom.cluster.model.attribute.AttributeSet' is not recognized.
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      // Undeclared exception!
      try { 
        attributeSet0.copy((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("Em=q#9-|+O`xOS");
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = null;
      // Undeclared exception!
      try { 
        attributeSet0.copy((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      boolean boolean0 = attributeSet0.isNone();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(boolean0);
      
      String string0 = attributeSet0.toString();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(string0);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string0);
      
      Attribute<Object> attribute0 = Attribute.from("AttributeSet[name=__none, attributes=[{}]]", (Object) "AttributeSet[name=__none, attributes=[{}]]");
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.remove(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isPresent());
      assertTrue(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet0.attributeNamed("AttributeSet[name=__none, attributes=[{}]]");
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isPresent());
      assertTrue(trackedAttribute1.isAbsent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      
      String string1 = trackedAttribute1.toString();
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isPresent());
      assertTrue(trackedAttribute1.isAbsent());
      assertNotNull(string1);
      assertFalse(trackedAttribute1.distributed);
      assertEquals("TrackedAttribute[attribute=null, distributed=false, id=null]", string1);
      
      // Undeclared exception!
      try { 
        attributeSet0.addIfAbsent((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      // Undeclared exception!
      try { 
        attributeSet0.remove((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("Xg;4E)=1D4=sNm'I5@");
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      boolean boolean0 = attributeSet0.isNone();
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertFalse(boolean0);
      
      AttributeSet attributeSet3 = AttributeSet.None;
      assertSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet2));
      assertTrue(attributeSet3.isNone());
      assertFalse(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.String;
      Attribute<Object> attribute0 = new Attribute<Object>("", object0, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet3.replace(attribute0);
      assertSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet2));
      assertTrue(attributeSet3.isNone());
      assertFalse(attributeSet3.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      AttributeSet attributeSet4 = attributeSet1.copy(attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet4);
      assertSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet3, attributeSet4);
      assertSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet1);
      assertTrue(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet4.equals((Object)attributeSet0));
      assertTrue(attributeSet4.equals((Object)attributeSet2));
      assertTrue(attributeSet4.equals((Object)attributeSet3));
      assertTrue(attributeSet4.equals((Object)attributeSet1));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet3.isNone());
      assertFalse(attributeSet3.isDefined());
      assertFalse(attributeSet4.isNone());
      assertTrue(attributeSet4.isDefined());
      assertNotNull(attributeSet4);
      
      boolean boolean1 = attributeSet0.isDefined();
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet4);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet4));
      assertFalse(boolean1 == boolean0);
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet0.isDefined());
      assertTrue(boolean1);
      
      attributeSet1.hashCode();
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet4);
      assertSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.equals((Object)attributeSet4));
      assertTrue(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Collection<TrackedAttribute> collection0 = attributeSet0.all();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      String string0 = attributeSet0.toString();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(string0);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string0);
      
      String string1 = attributeSet0.toString();
      assertTrue(string1.equals((Object)string0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(string1);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string1);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("", attributeSet1, attribute_Type0);
      assertTrue(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isAbsent());
      assertTrue(trackedAttribute0.isPresent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet2.attributeNamed("AttributeSet[name=__none, attributes=[{}]]");
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(trackedAttribute1.isDistributed());
      assertTrue(trackedAttribute1.isAbsent());
      assertFalse(trackedAttribute1.isPresent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributeSet0.equals(object0);
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(boolean0);
      
      Collection<TrackedAttribute> collection0 = attributeSet1.all();
      assertTrue(collection0.contains(trackedAttribute0));
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertNotNull(collection0);
      
      attributeSet2.hashCode();
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributeSet0.equals(object0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attributeSet0, attribute_Type0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.remove(attribute0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      boolean boolean0 = attributeSet0.equals(attributeSet0);
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attributeSet0, attribute_Type0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.replace(attribute0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute0.isPresent());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      attributeSet0.hashCode();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      String string0 = attributeSet0.toString();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(string0);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string0);
      
      String string1 = attributeSet0.toString();
      assertTrue(string1.equals((Object)string0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(string1);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string1);
      
      attributeSet0.hashCode();
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      
      AttributeSet attributeSet1 = AttributeSet.named("(yyI`E!xHkk");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = AttributeSet.named("AttributeSet[name=__none, attributes=[{}]]");
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = AttributeSet.named("(yyI`E!xHkk");
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("3H", "3H", attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      AttributeSet attributeSet4 = AttributeSet.None;
      assertNotSame(attributeSet4, attributeSet3);
      assertSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet2);
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertTrue(attributeSet4.isNone());
      assertFalse(attributeSet4.isDefined());
      assertNotNull(attributeSet4);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.attributeNamed("__none");
      assertNotSame(attributeSet0, attributeSet1);
      assertSame(attributeSet0, attributeSet4);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      Attribute.Type attribute_Type1 = Attribute.Type.Integer;
      Attribute<TrackedAttribute> attribute1 = new Attribute<TrackedAttribute>("rLN~qZ(bhA]/.E?rr", trackedAttribute0, attribute_Type1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(attribute1.isUndefined());
      assertNotNull(attribute1);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet2.addIfAbsent(attribute1);
      assertNotSame(attributeSet0, attributeSet1);
      assertSame(attributeSet0, attributeSet4);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet4);
      assertNotSame(trackedAttribute0, trackedAttribute1);
      assertSame(attribute_Type1, attribute_Type0);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet4));
      assertFalse(trackedAttribute1.equals((Object)trackedAttribute0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertFalse(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(attribute1.isUndefined());
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.isAbsent());
      assertFalse(trackedAttribute1.isDistributed());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(trackedAttribute1.distributed);
      
      TrackedAttribute trackedAttribute2 = attributeSet1.attributeNamed("__none");
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertSame(trackedAttribute2, trackedAttribute0);
      assertTrue(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet4));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertTrue(trackedAttribute2.isAbsent());
      assertFalse(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isDistributed());
      assertNotNull(trackedAttribute2);
      assertFalse(trackedAttribute2.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Collection<TrackedAttribute> collection0 = attributeSet1.all();
      assertFalse(collection0.contains(trackedAttribute2));
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet1, attributeSet3);
      assertTrue(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet4));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(collection0);
      
      attributeSet4.hashCode();
      assertNotSame(attributeSet4, attributeSet3);
      assertSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet1);
      assertNotSame(attributeSet4, attributeSet2);
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertTrue(attributeSet4.isNone());
      assertFalse(attributeSet4.isDefined());
      
      AttributeSet attributeSet5 = AttributeSet.named("O95byxA|){S!E3y?JC");
      assertNotSame(attributeSet5, attributeSet1);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertNotNull(attributeSet5);
      
      AttributeSet attributeSet6 = attributeSet3.copy(attributeSet5);
      assertNotSame(attributeSet5, attributeSet1);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet6);
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertNotSame(attributeSet6, attributeSet0);
      assertNotSame(attributeSet6, attributeSet5);
      assertNotSame(attributeSet6, attributeSet2);
      assertNotSame(attributeSet6, attributeSet4);
      assertNotSame(attributeSet6, attributeSet1);
      assertNotSame(attributeSet6, attributeSet3);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet4);
      assertNotSame(attributeSet3, attributeSet5);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet6);
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertFalse(attributeSet6.equals((Object)attributeSet0));
      assertFalse(attributeSet6.equals((Object)attributeSet2));
      assertFalse(attributeSet6.equals((Object)attributeSet4));
      assertFalse(attributeSet6.equals((Object)attributeSet1));
      assertFalse(attributeSet6.equals((Object)attributeSet3));
      assertTrue(attributeSet6.equals((Object)attributeSet5));
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertFalse(attributeSet3.equals((Object)attributeSet4));
      assertFalse(attributeSet3.equals((Object)attributeSet5));
      assertTrue(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertFalse(attributeSet6.isNone());
      assertTrue(attributeSet6.isDefined());
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet6);
      
      AttributeSet attributeSet7 = attributeSet5.copy(attributeSet2);
      assertNotSame(attributeSet5, attributeSet1);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet7);
      assertNotSame(attributeSet5, attributeSet6);
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertNotSame(attributeSet7, attributeSet5);
      assertNotSame(attributeSet7, attributeSet6);
      assertNotSame(attributeSet7, attributeSet2);
      assertNotSame(attributeSet7, attributeSet1);
      assertNotSame(attributeSet7, attributeSet0);
      assertNotSame(attributeSet7, attributeSet3);
      assertNotSame(attributeSet7, attributeSet4);
      assertNotSame(attributeSet2, attributeSet5);
      assertNotSame(attributeSet2, attributeSet7);
      assertNotSame(attributeSet2, attributeSet6);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet4);
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertTrue(attributeSet5.equals((Object)attributeSet6));
      assertFalse(attributeSet7.equals((Object)attributeSet5));
      assertFalse(attributeSet7.equals((Object)attributeSet6));
      assertFalse(attributeSet7.equals((Object)attributeSet1));
      assertTrue(attributeSet7.equals((Object)attributeSet2));
      assertFalse(attributeSet7.equals((Object)attributeSet0));
      assertFalse(attributeSet7.equals((Object)attributeSet3));
      assertFalse(attributeSet7.equals((Object)attributeSet4));
      assertFalse(attributeSet2.equals((Object)attributeSet5));
      assertFalse(attributeSet2.equals((Object)attributeSet6));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet4));
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertTrue(attributeSet7.isDefined());
      assertFalse(attributeSet7.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet7);
      
      Attribute<Object> attribute2 = new Attribute<Object>("AttributeSet[name=__none, attributes=[{}]]", "__none", attribute_Type0);
      assertFalse(attribute2.equals((Object)attribute0));
      assertFalse(attribute2.isUndefined());
      assertNotNull(attribute2);
      
      TrackedAttribute trackedAttribute3 = attributeSet7.replace(attribute2);
      assertNotSame(attributeSet5, attributeSet1);
      assertNotSame(attributeSet5, attributeSet3);
      assertNotSame(attributeSet5, attributeSet7);
      assertNotSame(attributeSet5, attributeSet6);
      assertNotSame(attributeSet5, attributeSet0);
      assertNotSame(attributeSet5, attributeSet4);
      assertNotSame(attributeSet5, attributeSet2);
      assertNotSame(attributeSet7, attributeSet5);
      assertNotSame(attributeSet7, attributeSet6);
      assertNotSame(attributeSet7, attributeSet2);
      assertNotSame(attributeSet7, attributeSet1);
      assertNotSame(attributeSet7, attributeSet0);
      assertNotSame(attributeSet7, attributeSet3);
      assertNotSame(attributeSet7, attributeSet4);
      assertNotSame(attribute2, attribute0);
      assertNotSame(attributeSet2, attributeSet5);
      assertNotSame(attributeSet2, attributeSet7);
      assertNotSame(attributeSet2, attributeSet6);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet4);
      assertSame(trackedAttribute3, trackedAttribute0);
      assertSame(trackedAttribute3, trackedAttribute2);
      assertNotSame(trackedAttribute3, trackedAttribute1);
      assertSame(attribute_Type0, attribute_Type1);
      assertFalse(attributeSet5.equals((Object)attributeSet1));
      assertFalse(attributeSet5.equals((Object)attributeSet3));
      assertFalse(attributeSet5.equals((Object)attributeSet7));
      assertFalse(attributeSet5.equals((Object)attributeSet0));
      assertFalse(attributeSet5.equals((Object)attributeSet4));
      assertFalse(attributeSet5.equals((Object)attributeSet2));
      assertTrue(attributeSet5.equals((Object)attributeSet6));
      assertFalse(attributeSet7.equals((Object)attributeSet5));
      assertFalse(attributeSet7.equals((Object)attributeSet6));
      assertFalse(attributeSet7.equals((Object)attributeSet1));
      assertTrue(attributeSet7.equals((Object)attributeSet2));
      assertFalse(attributeSet7.equals((Object)attributeSet0));
      assertFalse(attributeSet7.equals((Object)attributeSet3));
      assertFalse(attributeSet7.equals((Object)attributeSet4));
      assertFalse(attribute2.equals((Object)attribute0));
      assertFalse(attributeSet2.equals((Object)attributeSet5));
      assertTrue(attributeSet2.equals((Object)attributeSet7));
      assertFalse(attributeSet2.equals((Object)attributeSet6));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet4));
      assertFalse(attributeSet5.isNone());
      assertTrue(attributeSet5.isDefined());
      assertTrue(attributeSet7.isDefined());
      assertFalse(attributeSet7.isNone());
      assertFalse(attribute2.isUndefined());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertTrue(trackedAttribute3.isAbsent());
      assertFalse(trackedAttribute3.isPresent());
      assertFalse(trackedAttribute3.isDistributed());
      assertNotNull(trackedAttribute3);
      assertFalse(trackedAttribute3.distributed);
      
      // Undeclared exception!
      try { 
        attributeSet1.addIfAbsent((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.named((String) null);
      assertNotSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet1.copy(attributeSet0);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = attributeSet0.copy(attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertTrue(attributeSet3.isDefined());
      assertFalse(attributeSet3.isNone());
      assertNotNull(attributeSet3);
      
      boolean boolean0 = attributeSet0.isNone();
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertTrue(boolean0);
      
      boolean boolean1 = attributeSet2.equals((Object) null);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet0, attributeSet3);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet3);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet3);
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet0.equals((Object)attributeSet3));
      assertTrue(attributeSet0.equals((Object)attributeSet2));
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet3));
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertFalse(boolean1 == boolean0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertSame(attributeSet1, attributeSet0);
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet1, attributeSet2);
      assertSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertTrue(attributeSet2.isDefined());
      assertFalse(attributeSet2.isNone());
      assertNotNull(attributeSet2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "dU 39;&\"+w";
      AttributeSet attributeSet0 = AttributeSet.named("dU 39;&\"+w");
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = attributeSet0.equals(object0);
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertFalse(boolean0);
      
      AttributeSet attributeSet1 = AttributeSet.None;
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertNotNull(attributeSet1);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("dU 39;&\"+w", "dU 39;&\"+w", attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.remove(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertFalse(trackedAttribute0.isPresent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet1.remove(attribute0);
      assertNotSame(attributeSet1, attributeSet0);
      assertSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute1.isDistributed());
      assertFalse(trackedAttribute1.isPresent());
      assertTrue(trackedAttribute1.isAbsent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      
      TrackedAttribute trackedAttribute2 = attributeSet0.addIfAbsent(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(trackedAttribute2, trackedAttribute1);
      assertNotSame(trackedAttribute2, trackedAttribute0);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute1));
      assertFalse(trackedAttribute2.equals((Object)trackedAttribute0));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertFalse(attribute0.isUndefined());
      assertFalse(trackedAttribute2.isAbsent());
      assertTrue(trackedAttribute2.isPresent());
      assertFalse(trackedAttribute2.isDistributed());
      assertNotNull(trackedAttribute2);
      assertFalse(trackedAttribute2.distributed);
      
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      TrackedAttribute trackedAttribute3 = attributeSet2.replace(attribute0);
      assertNotSame(attributeSet0, attributeSet1);
      assertNotSame(attributeSet0, attributeSet2);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet2, attributeSet0);
      assertNotSame(attributeSet2, attributeSet1);
      assertSame(trackedAttribute3, trackedAttribute1);
      assertSame(trackedAttribute3, trackedAttribute0);
      assertNotSame(trackedAttribute3, trackedAttribute2);
      assertFalse(attributeSet0.equals((Object)attributeSet1));
      assertFalse(attributeSet0.equals((Object)attributeSet2));
      assertTrue(attributeSet1.equals((Object)attributeSet2));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertTrue(attributeSet2.equals((Object)attributeSet1));
      assertTrue(attributeSet0.isDefined());
      assertFalse(attributeSet0.isNone());
      assertTrue(attributeSet1.isNone());
      assertFalse(attributeSet1.isDefined());
      assertFalse(attribute0.isUndefined());
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertFalse(trackedAttribute3.isPresent());
      assertFalse(trackedAttribute3.isDistributed());
      assertTrue(trackedAttribute3.isAbsent());
      assertNotNull(trackedAttribute3);
      assertFalse(trackedAttribute3.distributed);
      
      Attribute.Type attribute_Type1 = Attribute.Type.Short;
      AttributeSet attributeSet3 = AttributeSet.named("");
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertFalse(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      String string1 = attributeSet3.toString();
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet2);
      assertNotSame(attributeSet3, attributeSet0);
      assertFalse(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(string1);
      assertEquals("AttributeSet[name=, attributes=[{}]]", string1);
      
      // Undeclared exception!
      try { 
        trackedAttribute0.sameAs(attribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      String string0 = "Long";
      TrackedAttribute trackedAttribute0 = attributeSet0.attributeNamed("Long");
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(trackedAttribute0.isPresent());
      assertTrue(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      String string1 = attributeSet0.toString();
      assertFalse(string1.equals((Object)string0));
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(string1);
      assertEquals("AttributeSet[name=__none, attributes=[{}]]", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Attribute.from("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type 'java.lang.Object' is not recognized.
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      Attribute<Object> attribute0 = Attribute.from("__none", (Object) "__none");
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(attribute0.isUndefined());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertNotNull(attributeSet0);
      
      TrackedAttribute trackedAttribute0 = attributeSet0.attributeNamed("__none");
      assertTrue(attributeSet0.isNone());
      assertFalse(attributeSet0.isDefined());
      assertFalse(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isDistributed());
      assertTrue(trackedAttribute0.isAbsent());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      // Undeclared exception!
      try { 
        attributeSet0.addIfAbsent((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      assertNotNull(attributeSet0);
      
      attributeSet0.hashCode();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      
      attributeSet0.hashCode();
      assertFalse(attributeSet0.isDefined());
      assertTrue(attributeSet0.isNone());
      
      AttributeSet attributeSet1 = AttributeSet.named("rLN~qZ(bhA]/.E?rr");
      assertNotSame(attributeSet1, attributeSet0);
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(attributeSet1);
      
      AttributeSet attributeSet2 = AttributeSet.named("");
      assertNotSame(attributeSet2, attributeSet1);
      assertNotSame(attributeSet2, attributeSet0);
      assertFalse(attributeSet2.equals((Object)attributeSet1));
      assertFalse(attributeSet2.equals((Object)attributeSet0));
      assertFalse(attributeSet2.isNone());
      assertTrue(attributeSet2.isDefined());
      assertNotNull(attributeSet2);
      
      AttributeSet attributeSet3 = AttributeSet.named("rLN~qZ(bhA]/.E?rr");
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
      assertNotNull(attributeSet3);
      
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("", (Object) null, attribute_Type0);
      assertFalse(attribute0.isUndefined());
      assertNotNull(attribute0);
      
      AttributeSet attributeSet4 = AttributeSet.None;
      assertNotSame(attributeSet4, attributeSet1);
      assertSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet2);
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.isDefined());
      assertTrue(attributeSet4.isNone());
      assertNotNull(attributeSet4);
      
      TrackedAttribute trackedAttribute0 = attributeSet4.addIfAbsent(attribute0);
      assertNotSame(attributeSet4, attributeSet1);
      assertSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet2);
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attribute0.isUndefined());
      assertFalse(attributeSet4.isDefined());
      assertTrue(attributeSet4.isNone());
      assertTrue(trackedAttribute0.isPresent());
      assertFalse(trackedAttribute0.isAbsent());
      assertFalse(trackedAttribute0.isDistributed());
      assertNotNull(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      
      TrackedAttribute trackedAttribute1 = attributeSet4.attributeNamed(", id=");
      assertNotSame(attributeSet4, attributeSet1);
      assertSame(attributeSet4, attributeSet0);
      assertNotSame(attributeSet4, attributeSet3);
      assertNotSame(attributeSet4, attributeSet2);
      assertNotSame(trackedAttribute1, trackedAttribute0);
      assertFalse(attributeSet4.equals((Object)attributeSet1));
      assertFalse(attributeSet4.equals((Object)attributeSet3));
      assertFalse(attributeSet4.equals((Object)attributeSet2));
      assertFalse(attributeSet4.isDefined());
      assertTrue(attributeSet4.isNone());
      assertFalse(trackedAttribute1.isDistributed());
      assertTrue(trackedAttribute1.isAbsent());
      assertFalse(trackedAttribute1.isPresent());
      assertNotNull(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Collection<TrackedAttribute> collection0 = attributeSet1.all();
      assertFalse(collection0.contains(trackedAttribute1));
      assertNotSame(attributeSet1, attributeSet4);
      assertNotSame(attributeSet1, attributeSet0);
      assertNotSame(attributeSet1, attributeSet2);
      assertNotSame(attributeSet1, attributeSet3);
      assertTrue(attributeSet1.equals((Object)attributeSet3));
      assertFalse(attributeSet1.equals((Object)attributeSet4));
      assertFalse(attributeSet1.equals((Object)attributeSet0));
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      assertTrue(attributeSet1.isDefined());
      assertFalse(attributeSet1.isNone());
      assertNotNull(collection0);
      
      attributeSet3.hashCode();
      assertNotSame(attributeSet3, attributeSet1);
      assertNotSame(attributeSet3, attributeSet4);
      assertNotSame(attributeSet3, attributeSet0);
      assertNotSame(attributeSet3, attributeSet2);
      assertFalse(attributeSet3.equals((Object)attributeSet4));
      assertFalse(attributeSet3.equals((Object)attributeSet0));
      assertTrue(attributeSet3.equals((Object)attributeSet1));
      assertFalse(attributeSet3.equals((Object)attributeSet2));
      assertFalse(attributeSet3.isNone());
      assertTrue(attributeSet3.isDefined());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      attributeSet0.toString();
      attributeSet0.toString();
      AttributeSet attributeSet1 = AttributeSet.None;
      AttributeSet attributeSet2 = attributeSet0.copy(attributeSet1);
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("", attributeSet1, attribute_Type0);
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      trackedAttribute0.asDistributed();
      attributeSet1.isDefined();
      AttributeSet attributeSet3 = attributeSet1.copy(attributeSet2);
      AttributeSet attributeSet4 = AttributeSet.named("G\t-CM :i%j+");
      TrackedAttribute trackedAttribute1 = attributeSet4.addIfAbsent(attribute0);
      assertFalse(attributeSet1.equals((Object)attributeSet2));
      
      attributeSet0.replace(trackedAttribute1.attribute);
      attributeSet1.remove(trackedAttribute1.attribute);
      Object object0 = new Object();
      attributeSet0.equals(object0);
      attributeSet1.toString();
      assertNotSame(attributeSet1, attributeSet3);
      assertTrue(attributeSet1.equals((Object)attributeSet2));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      AttributeSet attributeSet1 = AttributeSet.named("__none");
      boolean boolean0 = attributeSet1.isDefined();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      // Undeclared exception!
      try { 
        attributeSet0.replace((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("");
      attributeSet0.isDefined();
      AttributeSet attributeSet1 = AttributeSet.None;
      Attribute<Object> attribute0 = null;
      attributeSet0.attributeNamed("__none");
      AttributeSet attributeSet2 = AttributeSet.named("__none");
      attributeSet0.attributeNamed("__none");
      AttributeSet.named("__none");
      // Undeclared exception!
      try { 
        attributeSet2.addIfAbsent((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.AttributeSet", e);
      }
  }
}
