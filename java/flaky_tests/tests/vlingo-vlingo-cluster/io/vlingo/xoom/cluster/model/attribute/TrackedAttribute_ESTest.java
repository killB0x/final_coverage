/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 17:37:25 GMT 2022
 */

package io.vlingo.xoom.cluster.model.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.cluster.model.attribute.Attribute;
import io.vlingo.xoom.cluster.model.attribute.AttributeSet;
import io.vlingo.xoom.cluster.model.attribute.TrackedAttribute;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TrackedAttribute_ESTest extends TrackedAttribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("");
      Attribute<Object> attribute0 = Attribute.from("S:h", (Object) "S:h");
      TrackedAttribute trackedAttribute0 = attributeSet0.remove(attribute0);
      TrackedAttribute trackedAttribute1 = trackedAttribute0.withAttribute(attribute0);
      assertTrue(trackedAttribute1.isPresent());
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named(".$7^5]@:8+");
      Attribute.Type attribute_Type0 = Attribute.Type.Double;
      Attribute<Object> attribute0 = new Attribute<Object>("", attributeSet0, attribute_Type0);
      TrackedAttribute trackedAttribute0 = TrackedAttribute.of(attributeSet0, attribute0);
      trackedAttribute0.hashCode();
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      TrackedAttribute trackedAttribute1 = trackedAttribute0.withAttribute((Attribute<?>) null);
      assertFalse(trackedAttribute1.distributed);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      TrackedAttribute trackedAttribute1 = trackedAttribute0.withAttribute(trackedAttribute0.attribute);
      assertTrue(trackedAttribute1.equals((Object)trackedAttribute0));
      assertFalse(trackedAttribute1.isAbsent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("x9Yi@U,Vmq66g");
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("x9Yi@U,Vmq66g", "x9Yi@U,Vmq66g", attribute_Type0);
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      boolean boolean0 = trackedAttribute0.sameAs((Attribute<?>) null);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      boolean boolean0 = trackedAttribute0.isPresent();
      assertTrue(boolean0);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("x9Yi@U,Vmq66g");
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute0 = new Attribute<Object>("aHE", "aHE", attribute_Type0);
      TrackedAttribute trackedAttribute0 = attributeSet0.remove(attribute0);
      TrackedAttribute trackedAttribute1 = trackedAttribute0.asDistributed();
      boolean boolean0 = trackedAttribute1.isDistributed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      boolean boolean0 = trackedAttribute0.isAbsent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      Attribute.Type attribute_Type0 = Attribute.Type.Short;
      Attribute<Object> attribute0 = new Attribute<Object>("__none", attributeSet0, attribute_Type0);
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      // Undeclared exception!
      try { 
        trackedAttribute0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      // Undeclared exception!
      try { 
        trackedAttribute0.sameAs((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      // Undeclared exception!
      try { 
        trackedAttribute0.replacingValueWith((Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      Attribute<Object> attribute0 = Attribute.from("__none", (Object) "__none");
      TrackedAttribute trackedAttribute0 = TrackedAttribute.of(attributeSet0, attribute0);
      Attribute.Type attribute_Type0 = Attribute.Type.Integer;
      Attribute<Object> attribute1 = new Attribute<Object>("__none:__none", attribute0, attribute_Type0);
      // Undeclared exception!
      try { 
        trackedAttribute0.replacingValueWith(attribute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source and target attributes have different types.
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named((String) null);
      // Undeclared exception!
      try { 
        TrackedAttribute.of(attributeSet0, (Attribute<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      Object object0 = new Object();
      Attribute.Type attribute_Type0 = Attribute.Type.Long;
      Attribute<Object> attribute0 = new Attribute<Object>("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", object0, attribute_Type0);
      TrackedAttribute trackedAttribute0 = attributeSet0.replace(attribute0);
      // Undeclared exception!
      try { 
        trackedAttribute0.Absent.equals(trackedAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named(".$7^5]@:8+");
      Attribute.Type attribute_Type0 = Attribute.Type.Double;
      Attribute<Object> attribute0 = new Attribute<Object>("", attributeSet0, attribute_Type0);
      TrackedAttribute trackedAttribute0 = TrackedAttribute.of(attributeSet0, attribute0);
      boolean boolean0 = trackedAttribute0.isAbsent();
      assertFalse(boolean0);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      AttributeSet attributeSet1 = AttributeSet.named("]");
      TrackedAttribute trackedAttribute1 = attributeSet1.addIfAbsent(attribute0);
      boolean boolean0 = trackedAttribute0.equals(trackedAttribute1);
      assertFalse(trackedAttribute1.distributed);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.None;
      Attribute<Object> attribute0 = Attribute.from("__none", (Object) "__none");
      TrackedAttribute trackedAttribute0 = TrackedAttribute.of(attributeSet0, attribute0);
      TrackedAttribute trackedAttribute1 = TrackedAttribute.Absent;
      boolean boolean0 = trackedAttribute0.equals(trackedAttribute1);
      assertFalse(trackedAttribute0.distributed);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      boolean boolean0 = trackedAttribute0.equals(trackedAttribute0.attribute);
      assertFalse(boolean0);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      boolean boolean0 = trackedAttribute0.equals(trackedAttribute0);
      assertFalse(trackedAttribute0.distributed);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      boolean boolean0 = trackedAttribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      boolean boolean0 = trackedAttribute0.isPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      trackedAttribute0.replacingValueWith(trackedAttribute0.attribute);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TrackedAttribute trackedAttribute0 = TrackedAttribute.Absent;
      // Undeclared exception!
      try { 
        trackedAttribute0.Absent.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.cluster.model.attribute.TrackedAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      String string0 = trackedAttribute0.toString();
      assertEquals("TrackedAttribute[attribute=Attribute[name=&uM<ii9`U, value=&uM<ii9`U, type=String], distributed=false, id=&uM<ii9`U:&uM<ii9`U]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      trackedAttribute0.sameAs(trackedAttribute0.attribute);
      assertFalse(trackedAttribute0.distributed);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      boolean boolean0 = trackedAttribute0.isDistributed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeSet attributeSet0 = AttributeSet.named("&uM<ii9`U");
      Attribute<Object> attribute0 = Attribute.from("&uM<ii9`U", (Object) "&uM<ii9`U");
      TrackedAttribute trackedAttribute0 = attributeSet0.addIfAbsent(attribute0);
      TrackedAttribute trackedAttribute1 = trackedAttribute0.asDistributed();
      boolean boolean0 = trackedAttribute0.equals(trackedAttribute1);
      assertFalse(boolean0);
      assertTrue(trackedAttribute1.isPresent());
  }
}
