/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 16:57:10 GMT 2022
 */

package org.jgroups.protocols.kubernetes.pem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jgroups.protocols.kubernetes.pem.Asn1Object;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Asn1Object_ESTest extends Asn1Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(0, 0, (byte[]) null);
      try { 
        asn1Object0.getInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not integer
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((-1637), 22, byteArray0);
      boolean boolean0 = asn1Object0.isConstructed();
      assertFalse(boolean0);
      assertEquals(22, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(26, 4622, (byte[]) null);
      asn1Object0.getValue();
      assertEquals(4622, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Asn1Object asn1Object0 = new Asn1Object(0, 0, byteArray0);
      asn1Object0.getValue();
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object(1314, 1314, byteArray0);
      int int0 = asn1Object0.getType();
      assertEquals(2, int0);
      assertEquals(1314, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object(1314, 1314, byteArray0);
      assertTrue(asn1Object0.isConstructed());
      
      asn1Object0.getParser();
      assertEquals(1314, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object(64, 0, byteArray0);
      int int0 = asn1Object0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(622, 8, (byte[]) null);
      int int0 = asn1Object0.getLength();
      assertEquals(8, int0);
      assertTrue(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-21);
      Asn1Object asn1Object0 = new Asn1Object(1314, 1314, byteArray0);
      asn1Object0.getInteger();
      assertTrue(asn1Object0.isConstructed());
      assertEquals(1314, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      Asn1Object asn1Object0 = new Asn1Object(2, 2, byteArray0);
      asn1Object0.getInteger();
      assertEquals(2, asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-61);
      Asn1Object asn1Object0 = new Asn1Object(1314, 1314, byteArray0);
      asn1Object0.getInteger();
      assertEquals(1314, asn1Object0.getLength());
      assertTrue(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = new Asn1Object(2, 2, byteArray0);
      // Undeclared exception!
      try { 
        asn1Object0.getInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(2, 2, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.getInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object(1314, 1314, byteArray0);
      boolean boolean0 = asn1Object0.isConstructed();
      assertTrue(boolean0);
      assertEquals(1314, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((-2070), (-1376), byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object(1310, 1310, byteArray0);
      asn1Object0.getString();
      assertEquals(1310, asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Asn1Object asn1Object0 = new Asn1Object((-3), (-3), byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object(2076, 2076, byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: can't handle UCS-4 string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Asn1Object asn1Object0 = new Asn1Object((-1030), (-1030), byteArray0);
      asn1Object0.getString();
      assertTrue(asn1Object0.isConstructed());
      assertEquals((-1030), asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((-1543), (byte) (-1), byteArray0);
      assertEquals(25, asn1Object0.getType());
      
      asn1Object0.getString();
      assertEquals((-1), asn1Object0.getLength());
      assertTrue(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object(1528, 1528, byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object(4983, 4983, byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = new Asn1Object(22, 8, byteArray0);
      asn1Object0.getString();
      assertEquals(8, asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((-1451), (-1451), (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Asn1Object asn1Object0 = new Asn1Object(84, 84, byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(19, 19, (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object((-718), (-718), byteArray0);
      asn1Object0.getString();
      assertTrue(asn1Object0.isConstructed());
      assertEquals((-718), asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(17, 17, (byte[]) null);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(16, 16, (byte[]) null);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((-1937), (-1937), (byte[]) null);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object((-530), (-530), byteArray0);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(13, 13, (byte[]) null);
      try { 
        asn1Object0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not a string
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Asn1Object asn1Object0 = new Asn1Object((-1637), 22, byteArray0);
      asn1Object0.getString();
      assertEquals(22, asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
      assertEquals(27, asn1Object0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Asn1Object asn1Object0 = new Asn1Object((byte)12, (-1), byteArray0);
      asn1Object0.getString();
      assertEquals((-1), asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Asn1Object asn1Object0 = new Asn1Object((-1), (-1), byteArray0);
      try { 
        asn1Object0.getInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: object is not integer
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Asn1Object asn1Object0 = new Asn1Object(2, 2, byteArray0);
      assertEquals(2, asn1Object0.getType());
      
      asn1Object0.getInteger();
      assertEquals(2, asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(3, 3, (byte[]) null);
      try { 
        asn1Object0.getParser();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid DER: can't parse primitive entity
         //
         verifyException("org.jgroups.protocols.kubernetes.pem.Asn1Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object((-1), (-1), (byte[]) null);
      // Undeclared exception!
      try { 
        asn1Object0.getParser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Asn1Object asn1Object0 = new Asn1Object(0, 0, (byte[]) null);
      int int0 = asn1Object0.getType();
      assertEquals(0, int0);
      assertEquals(0, asn1Object0.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Asn1Object asn1Object0 = new Asn1Object(19, 19, byteArray0);
      byte[] byteArray1 = asn1Object0.getValue();
      assertNotNull(byteArray1);
      assertEquals(19, asn1Object0.getLength());
      assertFalse(asn1Object0.isConstructed());
      assertEquals(19, asn1Object0.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Asn1Object asn1Object0 = new Asn1Object((byte) (-18), (byte) (-18), byteArray0);
      int int0 = asn1Object0.getLength();
      assertEquals((-18), int0);
      assertTrue(asn1Object0.isConstructed());
      assertEquals(14, asn1Object0.getType());
  }
}
