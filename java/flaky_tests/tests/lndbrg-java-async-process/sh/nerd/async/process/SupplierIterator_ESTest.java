/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 11:02:28 GMT 2022
 */

package sh.nerd.async.process;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sh.nerd.async.process.SupplierIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SupplierIterator_ESTest extends SupplierIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SupplierIterator<Integer> supplierIterator0 = SupplierIterator.supplyUntilNull(supplier0);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(supplierIterator0).when(supplier1).get();
      SupplierIterator<Object> supplierIterator1 = SupplierIterator.supplyUntilNull(supplier1);
      Object object0 = supplierIterator1.next();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      SupplierIterator<Integer> supplierIterator0 = SupplierIterator.supplyUntilNull(supplier0);
      boolean boolean0 = supplierIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      SupplierIterator<Object> supplierIterator0 = SupplierIterator.supplyUntilNull(supplier0);
      supplierIterator0.hasNext();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      supplierIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      SupplierIterator<Integer> supplierIterator0 = SupplierIterator.supplyUntilNull(supplier0);
      // Undeclared exception!
      try { 
        supplierIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.SupplierIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SupplierIterator<Integer> supplierIterator0 = SupplierIterator.supplyUntilNull((Supplier<Integer>) null);
      // Undeclared exception!
      try { 
        supplierIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.SupplierIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SupplierIterator<Object> supplierIterator0 = SupplierIterator.supplyUntilNull((Supplier<Object>) null);
      // Undeclared exception!
      try { 
        supplierIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.SupplierIterator", e);
      }
  }
}
