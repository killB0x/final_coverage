/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 11:03:29 GMT 2022
 */

package sh.nerd.async.process;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ForkJoinPool;
import java.util.function.Consumer;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import sh.nerd.async.process.AsyncProcess;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsyncProcess_ESTest extends AsyncProcess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "";
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AsyncProcess.run(consumer0, (Consumer<String>) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncProcess.Builder asyncProcess_Builder0 = new AsyncProcess.Builder();
      File file0 = MockFile.createTempFile("sh.nerd.async.process.NamedThreadFactory", "I+Rs@QZ/6jEcl2w ");
      AsyncProcess.Builder asyncProcess_Builder1 = asyncProcess_Builder0.cwd(file0);
      assertSame(asyncProcess_Builder1, asyncProcess_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncProcess.Builder asyncProcess_Builder0 = new AsyncProcess.Builder();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      asyncProcess_Builder0.executor(forkJoinPool0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(33, 33);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        AsyncProcess.run(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        AsyncProcess.run((Supplier<String>) null, (Consumer<String>) null, (Consumer<String>) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncProcess.run((Consumer<String>) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        AsyncProcess.run(consumer0, consumer0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncProcess.cmd((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      AsyncProcess.Builder asyncProcess_Builder0 = AsyncProcess.cmd(stringArray0);
      try { 
        asyncProcess_Builder0.start();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "sh.nerd.async.process.AsyncProcess";
      AsyncProcess.Builder asyncProcess_Builder0 = AsyncProcess.cmd(stringArray0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      AsyncProcess.Builder asyncProcess_Builder1 = asyncProcess_Builder0.err(consumer0);
      AsyncProcess.Builder asyncProcess_Builder2 = asyncProcess_Builder1.cwd("sh.nerd.async.process.AsyncProcess");
      assertSame(asyncProcess_Builder2, asyncProcess_Builder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "sh.nerd.async.process.AsyncProcess";
      AsyncProcess.Builder asyncProcess_Builder0 = AsyncProcess.cmd(stringArray0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      asyncProcess_Builder0.cmd(stringArray0);
      AsyncProcess.Builder asyncProcess_Builder1 = asyncProcess_Builder0.out(consumer0);
      assertSame(asyncProcess_Builder1, asyncProcess_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncProcess.Builder asyncProcess_Builder0 = new AsyncProcess.Builder();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      asyncProcess_Builder0.in(supplier0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncProcess.run((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      AsyncProcess asyncProcess0 = new AsyncProcess(stringArray0, supplier0, consumer0, consumer1, map0, (File) null, forkJoinPool0);
      try { 
        asyncProcess0.start();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsyncProcess.Builder asyncProcess_Builder0 = new AsyncProcess.Builder();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      asyncProcess_Builder0.env(map0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        AsyncProcess.run(supplier0, consumer0, consumer0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        AsyncProcess.run(consumer0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }
}
