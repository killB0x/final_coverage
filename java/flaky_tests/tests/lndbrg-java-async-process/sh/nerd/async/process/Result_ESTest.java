/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 11:00:59 GMT 2022
 */

package sh.nerd.async.process;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.util.concurrent.CompletionStage;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sh.nerd.async.process.Result;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Result_ESTest extends Result_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Process process0 = mock(Process.class, new ViolatedAssumptionAnswer());
      Result result0 = Result.of(process0, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        result0.in(supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.Result", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Process process0 = mock(Process.class, new ViolatedAssumptionAnswer());
      Result result0 = Result.of(process0, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        result0.err(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.Result", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Process process0 = mock(Process.class, new ViolatedAssumptionAnswer());
      Result result0 = Result.of(process0, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        result0.out(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.Result", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Process process0 = mock(Process.class, new ViolatedAssumptionAnswer());
      Result result0 = Result.of(process0, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      CompletionStage<Process> completionStage0 = result0.process();
      assertNotNull(completionStage0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Result result0 = Result.of((Process) null, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      // Undeclared exception!
      try { 
        result0.waitFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.Result", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Result result0 = Result.of((Process) null, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      // Undeclared exception!
      try { 
        result0.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Result result0 = Result.of((Process) null, (Function<Supplier<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Consumer<String>, CompletionStage<Void>>) null, (Function<Runnable, CompletionStage<Void>>) null);
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        result0.waitFor(duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sh.nerd.async.process.Result", e);
      }
  }
}
