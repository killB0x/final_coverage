# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0
import pygments.filters as module_1
import httpie.context as module_2
import pygments.lexers.console as module_3


def test_case_0():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()


def test_case_1():
    str_0 = "{method} {pth}{query} HTP/1.l"
    none_type_0 = module_0.get_lexer(str_0, str_0)


def test_case_2():
    str_0 = "{method} {path}{query} HTTP/1.1"
    none_type_0 = module_0.get_lexer(str_0)


def test_case_3():
    str_0 = "{method} {pth{query} HTP/.l"
    none_type_0 = module_0.get_lexer(str_0, str_0, str_0)


def test_case_4():
    str_0 = "/<HOST>/<SESSION_NAME>.json.\n\n    "
    json_lexer_0 = module_0.get_lexer(str_0, str_0, str_0)


def test_case_5():
    str_0 = "^bytes (?P<first_byte_pos>\\d+)-(?P<last_byte_pos>\\d+)/(\\*|(?P<instance_length>\\d+))$"
    none_type_0 = module_0.get_lexer(str_0, body=str_0)


def test_case_6():
    str_0 = "{method} {pth{query} HTP/.l"
    name_highlight_filter_0 = module_1.NameHighlightFilter()
    module_0.get_lexer(str_0, str_0, name_highlight_filter_0)


def test_case_7():
    str_0 = ']\tlBa5iB\rnC9$"d& @/k'
    k_lexer_0 = module_0.get_lexer(str_0, str_0, str_0)


def test_case_8():
    environment_0 = module_2.Environment()
    str_0 = "format_options"
    dict_0 = {
        str_0: environment_0,
        str_0: str_0,
        str_0: environment_0,
        str_0: environment_0,
    }
    color_formatter_0 = module_0.ColorFormatter(
        environment_0, color_scheme=str_0, **dict_0
    )


def test_case_9():
    environment_0 = module_2.Environment()
    str_0 = "format_options"
    v_c_tree_status_lexer_0 = module_3.VCTreeStatusLexer()
    dict_0 = {str_0: environment_0, str_0: str_0, str_0: v_c_tree_status_lexer_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)
    str_1 = color_formatter_0.format_headers(str_0)


def test_case_10():
    environment_0 = module_2.Environment()
    str_0 = "format_options"
    v_c_tree_status_lexer_0 = module_3.VCTreeStatusLexer()
    dict_0 = {str_0: environment_0, str_0: str_0, str_0: v_c_tree_status_lexer_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)


def test_case_11():
    environment_0 = module_2.Environment()
    str_0 = "format_options"
    str_1 = environment_0.__repr__()
    dict_0 = {str_0: environment_0, str_0: str_0, str_0: str_1, str_0: str_1}
    color_formatter_0 = module_0.ColorFormatter(
        environment_0, color_scheme=str_0, **dict_0
    )
    color_formatter_0.get_lexer_for_body(str_0, str_1)


def test_case_12():
    environment_0 = module_2.Environment()
    str_0 = "format_options"
    environment_1 = module_2.Environment(environment_0)
    str_1 = "="
    str_2 = "k|t?\te`yQd"
    dict_0 = {str_1: environment_1, str_0: environment_0, str_2: str_0}
    module_0.ColorFormatter(environment_1, environment_0, environment_0, **dict_0)


def test_case_13():
    environment_0 = module_2.Environment()
    str_0 = "zfIm\x0b(m{l"
    str_1 = "format_options"
    dict_0 = {
        str_0: environment_0,
        str_0: str_0,
        str_0: environment_0,
        str_1: environment_0,
    }
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)
    str_2 = "!i%/&"
    str_3 = color_formatter_0.format_body(str_0, str_2)
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()


def test_case_14():
    environment_0 = module_2.Environment()
    str_0 = "zfIm\x0b(m{l"
    str_1 = "format_options"
    str_2 = environment_0.__repr__()
    v_c_tree_status_lexer_0 = module_3.VCTreeStatusLexer()
    dict_0 = {
        str_0: environment_0,
        str_0: str_0,
        str_0: v_c_tree_status_lexer_0,
        str_1: v_c_tree_status_lexer_0,
    }
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)
    none_type_0 = module_0.get_lexer(str_2)
    str_3 = "A=qTVw\tQ"
    str_4 = "gPG9x\tW-r^?/p|1+S"
    str_5 = color_formatter_0.format_body(str_3, str_4)
    color_formatter_0.format_body(str_1, str_3)
