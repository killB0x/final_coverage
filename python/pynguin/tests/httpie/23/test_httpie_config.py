# Automatically generated by Pynguin.
import httpie.config as module_0


def test_case_0():
    posix_path_0 = module_0.get_default_config_dir()


def test_case_1():
    config_0 = module_0.Config()
    none_type_0 = config_0.ensure_directory()


def test_case_2():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    bool_0 = base_config_dict_0.is_new()
    base_config_dict_1 = module_0.BaseConfigDict(posix_path_0)
    base_config_dict_2 = module_0.BaseConfigDict(posix_path_0)
    base_config_dict_2.load()


def test_case_3():
    config_0 = module_0.Config()
    none_type_0 = config_0.save()


def test_case_4():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    base_config_dict_0.save()


def test_case_5():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    base_config_dict_0.delete()


def test_case_6():
    config_0 = module_0.Config()


def test_case_7():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    bool_0 = base_config_dict_0.is_new()


def test_case_8():
    str_0 = "WKzTox"
    config_0 = module_0.Config(str_0)
    bool_0 = config_0.is_new()
    none_type_0 = config_0.load()
    config_1 = module_0.Config(str_0)
    none_type_1 = config_1.ensure_directory()
    base_config_dict_0 = module_0.BaseConfigDict(none_type_1)
    none_type_0.save()


def test_case_9():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    none_type_0 = base_config_dict_0.save(posix_path_0)


def test_case_10():
    posix_path_0 = module_0.get_default_config_dir()
    config_0 = module_0.Config()
    bool_0 = config_0.is_new()
    posix_path_1 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    posix_path_2 = module_0.get_default_config_dir()
    none_type_0 = config_0.delete()
    none_type_1 = config_0.load()
    none_type_2 = base_config_dict_0.ensure_directory()
    base_config_dict_0.save()


def test_case_11():
    posix_path_0 = module_0.get_default_config_dir()
    config_0 = module_0.Config()
    none_type_0 = config_0.delete()
    config_file_error_0 = module_0.ConfigFileError()
    config_1 = module_0.Config()
    base_config_dict_0 = module_0.BaseConfigDict(none_type_0)
    base_config_dict_0.save()


def test_case_12():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    config_0 = module_0.Config()
    config_1 = module_0.Config()
    posix_path_1 = module_0.get_default_config_dir()
    base_config_dict_1 = module_0.BaseConfigDict(posix_path_1)
    int_0 = -3654
    none_type_0 = base_config_dict_1.save(int_0)
    list_0 = []
    config_file_error_0 = module_0.ConfigFileError(*list_0)
    config_2 = module_0.Config()
    none_type_1 = config_1.ensure_directory()
    none_type_2 = config_0.load()
    posix_path_2 = module_0.get_default_config_dir()
    base_config_dict_2 = module_0.BaseConfigDict(posix_path_2)
    base_config_dict_3 = module_0.BaseConfigDict(config_2)
    posix_path_3 = module_0.get_default_config_dir()
    base_config_dict_4 = module_0.BaseConfigDict(none_type_0)
    base_config_dict_3.load()


def test_case_13():
    posix_path_0 = module_0.get_default_config_dir()
    base_config_dict_0 = module_0.BaseConfigDict(posix_path_0)
    none_type_0 = base_config_dict_0.ensure_directory()
    config_0 = module_0.Config()
    none_type_1 = config_0.delete()
    config_1 = module_0.Config()
    none_type_2 = config_1.load()
    none_type_3 = config_1.delete()
    bool_0 = config_1.is_new()
    base_config_dict_1 = module_0.BaseConfigDict(none_type_0)
    base_config_dict_1.delete()


def test_case_14():
    str_0 = "\n        If `auth_parse` is set to `True`, then `username`\n        and `password` contain the parsed credentials.\n\n        Use `self.raw_auth` to access the raw value passed through\n        `--auth, -a`.\n\n        Return a ``requests.auth.AuthBase`` subclass instance.\n\n        "
    config_0 = module_0.Config(str_0)
    config_0.ensure_directory()
