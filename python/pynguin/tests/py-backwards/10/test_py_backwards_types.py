# Automatically generated by Pynguin.
import py_backwards.types as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2


def test_case_0():
    module_0.CompilationResult()


def test_case_1():
    module_0.TransformationResult()


def test_case_2():
    module_0.InputOutput()


def test_case_3():
    module_0.InputOutput()


def test_case_4():
    module_0.TransformationResult()


def test_case_5():
    str_0 = "R)\r3g0f37^\x0b\x0bmf_N81["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.TransformationResult(**dict_0)


def test_case_6():
    module_0.CompilationResult()


def test_case_7():
    module_0.InputOutput()


def test_case_8():
    list_0 = []
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: list_0,
        none_type_0: list_0,
        none_type_0: list_0,
    }
    module_1.Global(*list_0, **dict_0)


def test_case_9():
    module_0.TransformationResult()


def test_case_10():
    module_0.CompilationResult()


def test_case_11():
    dict_0 = {}
    module_0.TransformationResult(**dict_0)


def test_case_12():
    dict_0 = {}
    module_0.CompilationResult(**dict_0)


def test_case_13():
    module_0.TransformationResult()


def test_case_14():
    module_0.TransformationResult()


def test_case_15():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.InputOutput(*list_0)


def test_case_16():
    str_0 = "copy_reg"
    str_1 = "TSG"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.InputOutput(**dict_0)


def test_case_17():
    in_0 = module_1.In()
    list_0 = [in_0, in_0, in_0]
    class_def_0 = module_1.ClassDef(*list_0)
    list_1 = [in_0, class_def_0]
    str_0 = "email.MIMEMultipart"
    str_1 = "a?B}xWT8b$J!UJ"
    dict_0 = {str_0: class_def_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_0.CompilationResult(*list_1, **dict_0)


def test_case_18():
    arg_0 = module_1.arg()
    list_0 = [arg_0, arg_0]
    module_0.CompilationResult(*list_0)


def test_case_19():
    module_0.TransformationResult()


def test_case_20():
    module_0.TransformationResult()


def test_case_21():
    str_0 = "o+9Pi~jDQ.\r8!d@`XO3"
    str_1 = "wX\rzpxK(~tL'a_\ngs\"<"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_0.CompilationResult(**dict_0)


def test_case_22():
    module_0.InputOutput()


def test_case_23():
    mod_0 = module_1.Mod()
    str_0 = "2d&nDau"
    dict_0 = {str_0: str_0}
    module_0.CompilationResult(**dict_0)


def test_case_24():
    module_0.TransformationResult()


def test_case_25():
    str_0 = "fsa\x0b5Y"
    list_0 = [str_0, str_0]
    module_0.CompilationResult(*list_0)


def test_case_26():
    comprehension_0 = module_1.comprehension()
    list_0 = [comprehension_0, comprehension_0, comprehension_0]
    module_1.Tuple(*list_0)


def test_case_27():
    ellipsis_0 = module_1.Ellipsis()
    list_0 = [ellipsis_0, ellipsis_0, ellipsis_0, ellipsis_0]
    module_0.TransformationResult(*list_0)


def test_case_28():
    module_0.InputOutput()


def test_case_29():
    module_0.InputOutput()


def test_case_30():
    module_0.CompilationResult()


def test_case_31():
    list_0 = []
    module_0.TransformationResult(*list_0)


def test_case_32():
    module_0.CompilationResult()


def test_case_33():
    str_0 = "$"
    str_1 = "zip"
    str_2 = "XDy3@N1ysfzLOrK\r"
    str_3 = " :P~6"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_3}
    module_0.InputOutput(**dict_0)


def test_case_34():
    module_0.CompilationResult()


def test_case_35():
    module_0.TransformationResult()


def test_case_36():
    str_0 = "~Bzn5h*.F@fXC"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.CompilationResult(*list_0, **none_type_0)


def test_case_37():
    module_0.TransformationResult()


def test_case_38():
    str_0 = "build_opener"
    str_1 = "$#HR=_{e"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    module_0.TransformationResult(**dict_0)


def test_case_39():
    module_0.TransformationResult()


def test_case_40():
    str_0 = "Jf`29Ylj i'p\t5W$\""
    str_1 = "1\x0cN"
    str_2 = ";KSf-D["
    none_type_0 = None
    str_3 = "s 09wwF]\x0bsS:o:D"
    dict_0 = {str_1: str_0, str_2: none_type_0, str_3: str_3, str_0: none_type_0}
    bin_op_0 = module_1.BinOp(**dict_0)
    dict_1 = {str_0: bin_op_0, str_0: str_0, str_2: str_1}
    module_0.CompilationResult(**dict_1)


def test_case_41():
    str_0 = "tkinter.dialog"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.CompilationResult(**dict_0)


def test_case_42():
    node_transformer_0 = module_2.NodeTransformer()
    dict_0 = {
        node_transformer_0: node_transformer_0,
        node_transformer_0: node_transformer_0,
        node_transformer_0: node_transformer_0,
        node_transformer_0: node_transformer_0,
    }
    list_0 = [dict_0, dict_0]
    module_0.CompilationResult(*list_0)


def test_case_43():
    module_0.TransformationResult()


def test_case_44():
    module_0.TransformationResult()


def test_case_45():
    list_0 = []
    module_0.TransformationResult(*list_0)


def test_case_46():
    list_0 = []
    expr_context_0 = module_1.expr_context(*list_0)
    list_1 = [expr_context_0, expr_context_0, list_0]
    module_0.InputOutput(*list_1)


def test_case_47():
    str_0 = "6KLZRI>45R"
    dict_0 = {str_0: str_0}
    module_0.CompilationResult(**dict_0)


def test_case_48():
    none_type_0 = None
    str_0 = "R.\nG"
    str_1 = '"!*LRt[S\x0csN&3P\x0b\\11\n'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.CompilationResult(*none_type_0, **dict_0)


def test_case_49():
    dict_0 = {}
    bit_xor_0 = module_1.BitXor(**dict_0)
    aug_load_0 = module_1.AugLoad()
    list_0 = [bit_xor_0, aug_load_0, aug_load_0, dict_0]
    module_1.BitOr(*list_0)
