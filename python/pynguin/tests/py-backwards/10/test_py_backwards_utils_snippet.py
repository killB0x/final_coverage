# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1


def test_case_0():
    ann_assign_0 = module_0.AnnAssign()
    list_0 = module_1.find_variables(ann_assign_0)


def test_case_1():
    none_type_0 = None
    str_0 = '/05\x0b$iI-Y"#va'
    none_type_1 = None
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, none_type_1: none_type_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    variables_replacer_0.visit_FunctionDef(none_type_0)


def test_case_2():
    name_0 = module_0.Name()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)


def test_case_3():
    constant_0 = module_0.Constant()
    dict_0 = {}
    module_1.extend_tree(constant_0, dict_0)


def test_case_4():
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)


def test_case_5():
    str_0 = "n*\r,<\tf()w<Rj"
    attribute_0 = module_0.Attribute()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    alias_0 = module_0.alias()
    dict_1 = {str_0: alias_0, str_0: alias_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)


def test_case_6():
    str_0 = "`MV "
    str_1 = ".r(?g.~wB$lF"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    list_0 = [variables_replacer_0, str_1, variables_replacer_0, str_1]
    function_def_0 = module_0.FunctionDef(*list_0)
    attribute_0 = module_0.Attribute()
    none_type_0 = None
    variables_replacer_0.visit_keyword(none_type_0)


def test_case_7():
    class_def_0 = module_0.ClassDef()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    module_1.extend_tree(class_def_1, dict_0)


def test_case_8():
    arg_0 = module_0.arg()
    str_0 = "H#=',> v{mI?+9I"
    str_1 = "U|0fA6~f~j"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    str_2 = "tkinter.simpledialog"
    dict_1 = {str_2: str_2}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    arg_2 = variables_replacer_1.visit_arg(arg_1)


def test_case_9():
    list_0 = []
    import_from_0 = module_0.ImportFrom(*list_0)
    str_0 = "t"
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    variables_replacer_0.visit_ImportFrom(import_from_0)


def test_case_10():
    none_type_0 = None
    str_0 = "Y"
    str_1 = "0x&6z7=s8]yv"
    str_2 = "E\tE."
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    variables_replacer_0.visit_alias(none_type_0)


def test_case_11():
    none_type_0 = None
    str_0 = "8iPk;["
    str_1 = "unquote_plus"
    bit_and_0 = module_0.BitAnd()
    list_0 = [none_type_0, bit_and_0]
    except_handler_0 = module_0.ExceptHandler(*list_0)
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    str_2 = '`_",2h;}F+>'
    str_3 = "UaAfp,gS\n<*AtrU `Y"
    dict_1 = {str_2: str_0, str_0: str_2, str_3: str_1}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    except_handler_2 = variables_replacer_1.visit_ExceptHandler(except_handler_1)
    dict_2 = {str_1: str_1, str_1: str_0}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    except_handler_3 = variables_replacer_2.visit_ExceptHandler(except_handler_2)
    dict_3 = {str_0: str_0, str_1: str_1}
    variables_replacer_3 = module_1.VariablesReplacer(dict_3)
    variables_replacer_3.visit_Name(none_type_0)


def test_case_12():
    constant_0 = module_0.Constant()
    snippet_0 = module_1.snippet(constant_0)


def test_case_13():
    constant_0 = module_0.Constant()
    dict_0 = {}
    none_type_0 = None
    snippet_0 = module_1.snippet(none_type_0)
    module_1.extend_tree(constant_0, dict_0)
    snippet_0.get_body()


def test_case_14():
    keyword_0 = module_0.keyword()
    module_1.let(keyword_0)


def test_case_15():
    dict_0 = {}
    module_1.extend(dict_0)


def test_case_16():
    keyword_0 = module_0.keyword()
    name_0 = module_0.Name()
    none_type_0 = None
    list_0 = [keyword_0]
    str_0 = "\n^.n\t [%)\\_lqd|"
    dict_0 = {none_type_0: list_0, none_type_0: none_type_0, str_0: none_type_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    variables_replacer_0.visit_Name(name_0)


def test_case_17():
    attribute_0 = module_0.Attribute()
    none_type_0 = None
    none_type_1 = None
    str_0 = "functools"
    str_1 = "aUD\tNT["
    snippet_0 = module_1.snippet(str_1)
    dict_0 = {
        none_type_0: none_type_1,
        str_0: str_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    snippet_0.get_body()


def test_case_18():
    invert_0 = module_0.Invert()
    list_0 = [invert_0, invert_0, invert_0]
    str_0 = "splitquery"
    dict_0 = {str_0: invert_0, str_0: invert_0, str_0: list_0, str_0: invert_0}
    call_0 = module_0.Call(*list_0, **dict_0)
    list_1 = [call_0, call_0, str_0]
    attribute_0 = module_0.Attribute(*list_1, **dict_0)
    dict_1 = {}
    list_2 = module_1.find_variables(attribute_0)
    import_from_0 = module_0.ImportFrom(*list_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    variables_replacer_0.visit_ImportFrom(import_from_0)


def test_case_19():
    except_handler_0 = module_0.ExceptHandler()
    str_0 = "tkinter_commondialog"
    str_1 = "?Oe[\txp?o4"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    str_2 = "\nIoOe\nC4Fvq#a:)!:"
    none_type_0 = None
    str_3 = '$"vVRFv\\'
    dict_1 = {str_2: str_2, none_type_0: str_3}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    except_handler_2 = variables_replacer_1.visit_ExceptHandler(except_handler_1)
    none_type_1 = None
    module_0.Call(*none_type_1)


def test_case_20():
    dict_0 = {}
    name_0 = module_0.Name(**dict_0)
    str_0 = "ur@FR2;u@o"
    class_def_0 = module_0.ClassDef()
    arg_0 = module_0.arg()
    list_0 = [name_0, class_def_0, name_0, name_0]
    dict_1 = {str_0: str_0, str_0: name_0, str_0: list_0}
    int_0 = -2546
    module_1.extend(int_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    dict_2 = {str_0: str_0}
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    dict_3 = {}
    module_1.extend(name_0)
    arg_2 = variables_replacer_1.visit_arg(arg_1)
    class_def_2 = variables_replacer_0.visit_ClassDef(class_def_0)
    dict_4 = {str_0: str_0}
    variables_replacer_2 = module_1.VariablesReplacer(dict_4)
    module_1.extend_tree(class_def_2, dict_3)
    module_1.extend_tree(class_def_0, dict_4)
    function_def_0 = module_0.FunctionDef(**dict_0)
    variables_replacer_3 = module_1.VariablesReplacer(dict_4)
    class_def_3 = variables_replacer_0.visit_ClassDef(class_def_1)
    list_1 = module_1.find_variables(arg_1)
    function_def_1 = variables_replacer_2.visit_FunctionDef(function_def_0)
    list_2 = [str_0]
    alias_0 = module_0.alias(*list_2)
    alias_1 = variables_replacer_3.visit_alias(alias_0)


def test_case_21():
    attribute_0 = module_0.Attribute()
    str_0 = "email.MIMEMultipart"
    str_1 = "|nm"
    list_0 = [str_0, attribute_0]
    import_from_0 = module_0.ImportFrom(*list_0)
    str_2 = "]"
    dict_0 = {str_1: attribute_0, str_2: str_2, str_0: attribute_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    str_3 = "X% \x0c<lM00~Hs<wz]"
    generator_exp_0 = module_0.GeneratorExp()
    list_1 = [attribute_0, attribute_0, generator_exp_0]
    none_type_0 = None
    str_4 = "y(L"
    dict_1 = {str_1: str_0, str_3: list_1, none_type_0: str_0, str_4: str_4}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
    dict_2 = {str_0: str_0, str_1: str_1}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    attribute_1 = variables_replacer_2.visit_Attribute(attribute_0)
    none_type_1 = None
    str_5 = "itdK\\*NI\t)bj?D"
    str_6 = "(H&\\,[.3B7PzLys>?,"
    dict_3 = {none_type_1: none_type_1, str_5: str_5, str_6: none_type_1}
    variables_replacer_3 = module_1.VariablesReplacer(dict_3)
    attribute_2 = variables_replacer_3.visit_Attribute(attribute_1)


def test_case_22():
    dict_0 = {}
    name_0 = module_0.Name(**dict_0)
    str_0 = "ur@FR2;u@o"
    class_def_0 = module_0.ClassDef()
    arg_0 = module_0.arg()
    list_0 = [name_0, class_def_0, name_0, name_0]
    dict_1 = {str_0: str_0, str_0: name_0, str_0: list_0}
    int_0 = -2557
    module_1.extend(int_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    arg_1 = variables_replacer_1.visit_arg(arg_0)
    dict_2 = {str_0: str_0}
    class_def_1 = variables_replacer_1.visit_ClassDef(class_def_0)
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    dict_3 = {}
    none_type_0 = None
    snippet_0 = module_1.snippet(none_type_0)
    module_1.extend(name_0)
    variables_replacer_3 = module_1.VariablesReplacer(dict_3)
    arg_2 = variables_replacer_2.visit_arg(arg_1)
    class_def_2 = variables_replacer_3.visit_ClassDef(class_def_0)
    dict_4 = {str_0: str_0}
    variables_replacer_4 = module_1.VariablesReplacer(dict_4)
    module_1.extend_tree(class_def_2, dict_3)
    function_def_0 = module_0.FunctionDef()
    module_1.extend_tree(class_def_0, dict_4)
    function_def_1 = module_0.FunctionDef(**dict_0)
    class_def_3 = variables_replacer_1.visit_ClassDef(class_def_1)
    list_1 = module_1.find_variables(arg_1)
    function_def_2 = variables_replacer_3.visit_FunctionDef(function_def_1)
    list_2 = [str_0]
    alias_0 = module_0.alias(*list_2)
    alias_1 = variables_replacer_1.visit_alias(alias_0)


def test_case_23():
    invert_0 = module_0.Invert()
    list_0 = [invert_0, invert_0, invert_0]
    str_0 = "splitquery"
    dict_0 = {str_0: invert_0, str_0: invert_0, str_0: list_0, str_0: invert_0}
    module_1.extend(str_0)
    call_0 = module_0.Call(*list_0, **dict_0)
    list_1 = [call_0, call_0, str_0]
    attribute_0 = module_0.Attribute(*list_1, **dict_0)
    dict_1 = {}
    module_1.extend_tree(attribute_0, dict_1)


def test_case_24():
    invert_0 = module_0.Invert()
    list_0 = [invert_0, invert_0, invert_0]
    str_0 = "splitquery"
    dict_0 = {str_0: invert_0, str_0: invert_0, str_0: list_0, str_0: invert_0}
    call_0 = module_0.Call(*list_0, **dict_0)
    list_1 = [call_0, call_0, str_0]
    attribute_0 = module_0.Attribute(*list_1, **dict_0)
    list_2 = module_1.find_variables(attribute_0)
