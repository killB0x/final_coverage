# Automatically generated by Pynguin.
import mimesis.providers.numbers as module_0
import mimesis.enums as module_1


def test_case_0():
    numbers_0 = module_0.Numbers()
    num_types_0 = module_1.NumTypes.COMPLEXES
    numbers_1 = module_0.Numbers()
    int_0 = 2530
    list_0 = numbers_1.matrix(int_0)
    list_1 = numbers_1.matrix(num_type=num_types_0)


def test_case_1():
    int_0 = -2948
    numbers_0 = module_0.Numbers()
    int_1 = -3302
    int_2 = 1210
    list_0 = numbers_0.matrix(int_1, int_2)
    list_1 = numbers_0.complexes(precision_real=int_0, n=int_0)


def test_case_2():
    float_0 = -2138.0
    numbers_0 = module_0.Numbers()
    decimal_0 = numbers_0.decimal_number(float_0, float_0)
    list_0 = numbers_0.decimals()
    numbers_1 = module_0.Numbers()
    float_1 = 123.816503
    list_1 = numbers_1.complexes(float_1)
    list_2 = numbers_1.decimals()


def test_case_3():
    int_0 = -684
    numbers_0 = module_0.Numbers()
    int_1 = numbers_0.integer_number(end=int_0)


def test_case_4():
    list_0 = []
    list_1 = [list_0]
    numbers_0 = module_0.Numbers()
    list_2 = numbers_0.integers()
    module_0.Numbers(list_1)


def test_case_5():
    none_type_0 = None
    none_type_1 = None
    numbers_0 = module_0.Numbers()
    numbers_0.complex_number(end_real=none_type_0, precision_imag=none_type_1)
