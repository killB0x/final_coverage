# Automatically generated by Pynguin.
import thonny.roughparse as module_0
import collections as module_1
import enum as module_2
import locale as module_3
import builtins as module_4
import re as module_5
import string as module_6


def test_case_0():
    float_0 = -0.0
    rough_parser_0 = module_0.RoughParser(float_0, float_0)
    none_type_0 = rough_parser_0.set_lo(float_0)
    rough_parser_0.set_lo(rough_parser_0)


def test_case_1():
    chain_map_0 = module_1.ChainMap()
    rough_parser_0 = module_0.RoughParser(chain_map_0, chain_map_0)


def test_case_2():
    float_0 = -0.0
    enum_dict_0 = module_2._EnumDict()
    string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(
        enum_dict_0, float_0
    )
    float_1 = string_translate_pseudo_mapping_0.__getitem__(float_0)
    rough_parser_0 = module_0.RoughParser(float_0, float_0)
    none_type_0 = rough_parser_0.set_lo(float_0)
    rough_parser_0.set_lo(rough_parser_0)


def test_case_3():
    error_0 = module_3.Error()
    rough_parser_0 = module_0.RoughParser(error_0, error_0)
    rough_parser_0.get_continuation_type()


def test_case_4():
    str_0 = "=(*}#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    int_0 = rough_parser_0.get_num_lines_in_stmt()
    module_2.EnumMeta(**rough_parser_0)


def test_case_5():
    bool_0 = False
    exception_0 = module_4.Exception()
    dict_0 = {}
    rough_parser_0 = module_0.RoughParser(dict_0, dict_0)
    none_type_0 = rough_parser_0.set_lo(bool_0)
    enum_dict_0 = module_2._EnumDict()
    rough_parser_1 = module_0.RoughParser(enum_dict_0, enum_dict_0)
    none_type_1 = rough_parser_1.set_str(enum_dict_0)
    rough_parser_1.get_last_stmt_bracketing()


def test_case_6():
    enum_dict_0 = module_2._EnumDict()
    rough_parser_0 = module_0.RoughParser(enum_dict_0, enum_dict_0)
    none_type_0 = rough_parser_0.set_str(enum_dict_0)
    rough_parser_0.get_last_open_bracket_pos()


def test_case_7():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    bool_0 = rough_parser_0.is_block_opener()


def test_case_8():
    bool_0 = True
    rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
    rough_parser_0.is_block_closer()


def test_case_9():
    str_0 = "3t\\C{"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    rough_parser_0.set_str(str_0)


def test_case_10():
    float_0 = -0.0
    rough_parser_0 = module_0.RoughParser(float_0, float_0)
    none_type_0 = rough_parser_0.set_lo(float_0)


def test_case_11():
    enum_dict_0 = module_2._EnumDict()
    string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(
        enum_dict_0, enum_dict_0
    )
    int_0 = string_translate_pseudo_mapping_0.__len__()
    rough_parser_0 = module_0.RoughParser(enum_dict_0, enum_dict_0)
    rough_parser_0.find_good_parse_start(enum_dict_0, enum_dict_0)


def test_case_12():
    enum_dict_0 = module_2._EnumDict()
    rough_parser_0 = module_0.RoughParser(enum_dict_0, enum_dict_0)
    string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(
        enum_dict_0, enum_dict_0
    )
    dict_keyiterator_0 = string_translate_pseudo_mapping_0.__iter__()
    none_type_0 = rough_parser_0.set_str(enum_dict_0)
    rough_parser_0.is_block_opener()


def test_case_13():
    str_0 = "9"
    dict_0 = {}
    scanner_0 = module_5.Scanner(dict_0)
    rough_parser_0 = module_0.RoughParser(dict_0, scanner_0)
    none_type_0 = rough_parser_0.set_str(dict_0)
    string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(
        dict_0, str_0
    )
    str_1 = string_translate_pseudo_mapping_0.get(rough_parser_0)
    rough_parser_0.is_block_opener()


def test_case_14():
    enum_dict_0 = module_2._EnumDict()
    rough_parser_0 = module_0.RoughParser(enum_dict_0, enum_dict_0)
    none_type_0 = rough_parser_0.set_str(enum_dict_0)
    none_type_1 = rough_parser_0.find_good_parse_start()
    none_type_0.get(none_type_0)


def test_case_15():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_backslash_indent()


def test_case_16():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    str_1 = rough_parser_0.get_base_indent_string()


def test_case_17():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    str_1 = rough_parser_0.get_base_indent_string()
    rough_parser_0.compute_backslash_indent()


def test_case_18():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    none_type_1 = rough_parser_0.find_good_parse_start(rough_parser_0)
    none_type_0.__iter__()


def test_case_19():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_bracket_indent()


def test_case_20():
    str_0 = "=C6zmW\ryWUm?DWxC\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    str_1 = rough_parser_0.get_base_indent_string()
    none_type_0.is_block_closer()


def test_case_21():
    str_0 = "(jV?A^Z6A\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    bool_0 = rough_parser_0.is_block_closer()
    none_type_0.copy()


def test_case_22():
    str_0 = "=(*}#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    str_1 = rough_parser_0.get_base_indent_string()
    str_1.get_last_open_bracket_pos()


def test_case_23():
    str_0 = "=C6}mW\ryWUm?DWZC\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    str_1 = rough_parser_0.get_base_indent_string()


def test_case_24():
    str_0 = ""
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    int_0 = rough_parser_0.get_continuation_type()
    str_1 = rough_parser_0.get_base_indent_string()
    none_type_1 = rough_parser_0.set_lo(int_0)
    rough_parser_0.compute_backslash_indent()


def test_case_25():
    str_0 = "=!(*'#r}+piU?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    int_0 = rough_parser_0.get_last_open_bracket_pos()
    str_0.is_block_closer()


def test_case_26():
    str_0 = "=m(#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_bracket_indent()


def test_case_27():
    str_0 = "=(*#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_bracket_indent()


def test_case_28():
    str_0 = "#=\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_backslash_indent()


def test_case_29():
    str_0 = "=m(#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    int_0 = rough_parser_0.get_last_open_bracket_pos()
    str_1 = module_6.capwords(str_0)
    int_1 = str_1.__len__()
    str_2 = rough_parser_0.get_base_indent_string()
    rough_parser_0.set_lo(int_0)


def test_case_30():
    str_0 = "=m(#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    int_0 = str_0.__len__()
    str_1 = rough_parser_0.get_base_indent_string()
    none_type_1 = rough_parser_0.set_lo(int_0)
    int_1 = rough_parser_0.get_last_open_bracket_pos()
    str_1.is_block_closer()


def test_case_31():
    str_0 = "j\\#=\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_backslash_indent()


def test_case_32():
    str_0 = "=m(#r}+i?OZ\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    int_0 = str_0.__len__()
    str_1 = rough_parser_0.get_base_indent_string()
    none_type_1 = rough_parser_0.set_lo(int_0)
    rough_parser_0.compute_bracket_indent()


def test_case_33():
    str_0 = "j\\\n"
    rough_parser_0 = module_0.RoughParser(str_0, str_0)
    none_type_0 = rough_parser_0.set_str(str_0)
    rough_parser_0.compute_backslash_indent()
