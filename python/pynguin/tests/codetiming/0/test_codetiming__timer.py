# Automatically generated by Pynguin.
import codetiming._timer as module_0
import codetiming._timers as module_1
import builtins as module_2


def test_case_0():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = -2771.70918
    timer_2 = module_0.Timer(text=timer_1, logger=float_0)
    timer_3 = timer_2.__enter__()
    timer_3.__enter__()


def test_case_1():
    bytes_0 = b"a\xbc/h"
    timer_0 = module_0.Timer(text=bytes_0, logger=bytes_0)
    timer_0.start()


def test_case_2():
    timers_0 = module_1.Timers()
    timer_0 = module_0.Timer(timers_0, timers_0)
    timer_0.stop()


def test_case_3():
    timer_0 = module_0.Timer()
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()


def test_case_4():
    timer_0 = module_0.Timer()


def test_case_5():
    timer_0 = module_0.Timer()
    timer_0.__exit__()


def test_case_6():
    str_0 = "Definition of Timer\n\nSee help(codetiming) for quick instructions, and\nhttps://pypi.org/project/codetiming/ for more details.\n"
    timer_0 = module_0.Timer(str_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_1.stop()


def test_case_7():
    bytes_0 = b"a\xbc/h"
    none_type_0 = None
    timer_0 = module_0.Timer(text=bytes_0, logger=none_type_0)
    timer_1 = timer_0.__enter__()
    float_0 = timer_0.stop()
    timer_0.start()


def test_case_8():
    timer_0 = module_0.Timer()
    timer_1 = module_0.Timer(text=timer_0, logger=timer_0)
    timer_2 = timer_1.__enter__()
    str_0 = timer_2.__repr__()
    float_0 = timer_1.stop()
    tuple_0 = module_2.tuple()
