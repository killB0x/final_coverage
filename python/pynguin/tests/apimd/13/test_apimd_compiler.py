# Automatically generated by Pynguin.
import apimd.compiler as module_0
import builtins as module_1


def test_case_0():
    str_0 = "Y"
    str_1 = module_0.load_root(str_0, str_0)


def test_case_1():
    none_type_0 = None
    module_0.is_staticmethod(none_type_0, none_type_0)


def test_case_2():
    module_0.table_row()


def test_case_3():
    str_0 = "-7i#*Z>cE<z-e"
    bool_0 = module_0.is_enum(str_0)


def test_case_4():
    none_type_0 = None
    bool_0 = module_0.is_alias(none_type_0)


def test_case_5():
    str_0 = "typing"
    module_0.load_root(str_0, str_0)


def test_case_6():
    str_0 = ")i[O%<SN"
    module_0 = module_0.import_from(str_0)


def test_case_7():
    none_type_0 = None
    module_0.import_from(none_type_0)


def test_case_8():
    str_0 = "_W%Z"
    none_type_0 = None
    bool_0 = module_0.load_file(str_0, none_type_0)


def test_case_9():
    str_0 = "R"
    str_1 = module_0.ref_link(str_0)


def test_case_10():
    none_type_0 = None
    str_0 = module_0.get_method_doc(none_type_0, none_type_0)
    str_1 = module_0.full_name(str_0, str_0)


def test_case_11():
    str_0 = "z^#14O7K0V4[J2!Kbp"
    str_1 = module_0.linker(str_0)


def test_case_12():
    str_0 = "!_\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    module_0.gen_api(dict_0, dry=bool_0)


def test_case_13():
    none_type_0 = None
    str_0 = module_0.get_method_doc(none_type_0, none_type_0)


def test_case_14():
    str_0 = ")i[O%<SN"
    dict_0 = {str_0: str_0}
    module_0.gen_api(dict_0)


def test_case_15():
    str_0 = "Mu~K)/T)+aq9_&r"
    str_1 = ":qzu/"
    module_0 = module_0.import_from(str_1)
    generator_0 = module_0.local_vars(module_0)
    list_0 = [generator_0]
    str_2 = module_0.table_row(*list_0)
    dict_0 = {str_0: str_0}
    module_0.GenericClass(**dict_0)


def test_case_16():
    str_0 = ")i[O%<SN"
    dict_0 = {str_0: str_0}
    module_0.gen_api(dict_0)


def test_case_17():
    str_0 = "!_\t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    module_0.gen_api(dict_0, dry=bool_0)


def test_case_18():
    str_0 = "# str(object='') -> str\nstr(bytes\\_or_buffer\\[, encoding\\[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOthe^wise, returns the result of object.\\_\\_str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'. API\n\n## Module `5S/TQP6^Z28SU\"\nxU@Y_`\n"
    dict_0 = {str_0: str_0}
    module_0.gen_api(dict_0)


def test_case_19():
    str_0 = "J|6!,"
    str_1 = '5S/TQP6^Z28SU"\nxU@Y@'
    str_2 = "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOthe^wise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
    dict_0 = {str_0: str_0, str_1: str_2, str_2: str_0, str_2: str_2}
    bool_0 = True
    module_0.gen_api(dict_0, dry=bool_0)
    str_3 = "wf$\n\x0c?"
    bool_1 = module_0.is_abstractmethod(bool_0)
    str_4 = module_0.escape(str_3)
    module_0.table_row()


def test_case_20():
    str_0 = ")i[O%<SN"
    dict_0 = {str_0: str_0}
    module_0.gen_api(dict_0)


def test_case_21():
    str_0 = "J|6!,"
    str_1 = 'F|q,6-wbNd"\x0ce|5'
    int_0 = module_0.get_level(str_1)
    str_2 = "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOthe^wise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
    str_3 = module_0.get_method_doc(str_0, str_2)
    dict_0 = {str_1: str_3, str_0: str_0, str_1: str_1}
    none_type_0 = None
    tuple_0 = module_0.parameters(none_type_0)
    bool_0 = True
    module_0.gen_api(dict_0, dry=bool_0)


def test_case_22():
    none_type_0 = None
    bool_0 = module_0.is_classmethod(none_type_0, none_type_0)
    str_0 = "h[D3$,_Rxd"
    module_0.get_stub_doc(bool_0, str_0, bool_0, str_0)


def test_case_23():
    str_0 = "8@cCKad&_34r<g'"
    generator_0 = module_0.interpret_mode(str_0)
    list_0 = [generator_0]
    type_0 = module_1.type(*list_0)
    bool_0 = module_0.is_staticmethod(type_0, generator_0)
    module_1.type()


def test_case_24():
    int_0 = 433
    str_0 = "__ne__"
    module_0 = module_0.import_from(str_0)
    tuple_0 = (int_0, module_0)
    str_1 = module_0.get_stub_doc(tuple_0, str_0, int_0)
    bytes_0 = b"\xec\x1bR\x13<"
    str_2 = module_0.get_name(bytes_0)
