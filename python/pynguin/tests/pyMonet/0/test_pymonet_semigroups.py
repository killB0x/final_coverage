# Automatically generated by Pynguin.
import pymonet.semigroups as module_0


def test_case_0():
    none_type_0 = None
    sum_0 = module_0.Sum(none_type_0)
    none_type_1 = None
    max_0 = module_0.Max(none_type_1)
    last_0 = module_0.Last(max_0)
    bool_0 = last_0.__eq__(last_0)
    all_0 = module_0.All(bool_0)
    all_1 = module_0.All(max_0)
    all_2 = all_1.concat(all_0)
    all_3 = module_0.All(bool_0)
    all_4 = all_3.concat(all_2)


def test_case_1():
    float_0 = 447.18
    one_0 = module_0.One(float_0)
    map_0 = module_0.Map(float_0)
    one_1 = one_0.concat(float_0)
    str_0 = one_1.__str__()
    sum_0 = module_0.Sum(map_0)
    last_0 = module_0.Last(sum_0)
    str_1 = one_1.__str__()
    one_2 = module_0.One(one_0)
    min_0 = module_0.Min(one_2)
    str_2 = one_1.__str__()
    first_0 = module_0.First(sum_0)
    one_2.fold(float_0)


def test_case_2():
    dict_0 = {}
    sum_0 = module_0.Sum(dict_0)


def test_case_3():
    none_type_0 = None
    sum_0 = module_0.Sum(none_type_0)
    none_type_1 = None
    max_0 = module_0.Max(none_type_1)
    last_0 = module_0.Last(max_0)
    bool_0 = last_0.__eq__(last_0)


def test_case_4():
    float_0 = -167.12706
    all_0 = module_0.All(float_0)
    all_1 = all_0.concat(all_0)
    str_0 = all_0.__str__()
    str_1 = all_1.__str__()
    all_1.fold(float_0)


def test_case_5():
    str_0 = "{?|\r}5~%5*_\t`=N"
    sum_0 = module_0.Sum(str_0)
    bool_0 = sum_0.__eq__(sum_0)
    int_0 = 1108
    tuple_0 = (str_0, int_0)
    dict_0 = {tuple_0: int_0}
    dict_1 = {}
    last_0 = module_0.Last(dict_1)
    str_1 = last_0.__str__()
    sum_1 = module_0.Sum(dict_0)
    list_0 = [sum_1, tuple_0]
    max_0 = module_0.Max(list_0)
    map_0 = module_0.Map(str_1)
    str_2 = map_0.__str__()
    str_3 = "`4-XJ+g+{zF3"
    str_4 = sum_1.__str__()
    max_1 = module_0.Max(str_3)
    max_1.__eq__(str_3)


def test_case_6():
    bool_0 = False
    none_type_0 = None
    sum_0 = module_0.Sum(bool_0)
    sum_0.concat(none_type_0)


def test_case_7():
    str_0 = "$d\n;K>"
    last_0 = module_0.Last(str_0)
    all_0 = module_0.All(str_0)
    str_1 = all_0.__str__()
    last_0.concat(str_0)


def test_case_8():
    float_0 = -1421.33802
    sum_0 = module_0.Sum(float_0)
    one_0 = module_0.One(float_0)
    str_0 = one_0.__str__()


def test_case_9():
    str_0 = "h0a*2h\re7FD\\o\x0b8"
    first_0 = module_0.First(str_0)
    map_0 = module_0.Map(str_0)
    str_1 = map_0.__str__()
    tuple_0 = (map_0, str_0)
    first_1 = module_0.First(tuple_0)
    str_2 = first_1.__str__()
    first_2 = first_0.concat(first_0)


def test_case_10():
    str_0 = "B"
    min_0 = module_0.Min(str_0)
    last_0 = module_0.Last(min_0)
    str_1 = last_0.__str__()
    one_0 = module_0.One(str_1)
    max_0 = module_0.Max(str_1)
    max_1 = max_0.concat(one_0)


def test_case_11():
    str_0 = "$X+<s]P#D!tE%^"
    map_0 = module_0.Map(str_0)
    one_0 = module_0.One(map_0)
    str_1 = one_0.__str__()
    str_2 = one_0.__str__()
    bool_0 = True
    sum_0 = module_0.Sum(bool_0)


def test_case_12():
    list_0 = []
    min_0 = module_0.Min(list_0)
    str_0 = "0`"
    list_1 = [min_0, list_0, str_0, str_0]
    max_0 = module_0.Max(list_1)
    first_0 = module_0.First(max_0)
    bytes_0 = b"K\xb20F"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    map_0 = module_0.Map(dict_0)
    map_0.concat(first_0)


def test_case_13():
    bool_0 = False
    max_0 = module_0.Max(bool_0)
    min_0 = module_0.Min(max_0)
    str_0 = min_0.__str__()
    str_1 = min_0.__str__()


def test_case_14():
    bool_0 = True
    min_0 = module_0.Min(bool_0)
    str_0 = min_0.__str__()


def test_case_15():
    none_type_0 = None
    one_0 = module_0.One(none_type_0)
    one_0.concat(none_type_0)


def test_case_16():
    bool_0 = True
    min_0 = module_0.Min(bool_0)
    min_1 = min_0.concat(min_0)
    str_0 = min_0.__str__()


def test_case_17():
    none_type_0 = None
    none_type_1 = None
    all_0 = module_0.All(none_type_0)
    all_1 = module_0.All(none_type_0)
    first_0 = module_0.First(none_type_0)
    first_1 = first_0.concat(all_1)
    str_0 = all_0.__str__()
    all_2 = module_0.All(none_type_1)
    all_3 = all_1.concat(all_0)
    str_1 = all_3.__str__()
    all_1.__eq__(none_type_1)


def test_case_18():
    str_0 = "qx"
    list_0 = [str_0, str_0, str_0, str_0]
    last_0 = module_0.Last(list_0)
    max_0 = module_0.Max(last_0)
    float_0 = -166.8002139977339
    list_1 = [str_0, str_0, str_0]
    all_0 = module_0.All(list_1)
    map_0 = module_0.Map(list_1)
    str_1 = map_0.__str__()
    all_1 = module_0.All(float_0)
    str_2 = max_0.__str__()
    first_0 = module_0.First(str_2)
    all_2 = all_0.concat(all_0)
    str_3 = all_0.__str__()
    first_1 = module_0.First(last_0)
    last_1 = module_0.Last(first_1)
    min_0 = module_0.Min(str_0)
    min_1 = min_0.concat(first_0)
    last_2 = module_0.Last(all_1)
    last_3 = last_2.concat(last_1)
    last_4 = module_0.Last(last_3)
    all_2.fold(str_0)


def test_case_19():
    dict_0 = {}
    map_0 = module_0.Map(dict_0)
    map_1 = map_0.concat(dict_0)
    map_2 = map_1.concat(map_1)
    bool_0 = False
    map_3 = map_2.concat(map_1)
    first_0 = module_0.First(bool_0)
    str_0 = map_1.__str__()


def test_case_20():
    str_0 = "|~joqp"
    max_0 = module_0.Max(str_0)
    sum_0 = module_0.Sum(max_0)
    map_0 = module_0.Map(sum_0)
    str_1 = map_0.__str__()
    max_1 = max_0.concat(max_0)
    max_2 = module_0.Max(max_0)
    sum_1 = module_0.Sum(str_1)
    sum_2 = module_0.Sum(sum_0)
    sum_3 = module_0.Sum(str_1)
    max_3 = max_1.concat(sum_3)
    sum_1.fold(sum_0)
