# Automatically generated by Pynguin.
import pymonet.box as module_0
import typing as module_1


def test_case_0():
    str_0 = "\n        Transform Lazy into Either (Right) with constructor_fn result.\n\n        :returns: Right monad with constructor_fn result\n        :rtype: Right[A]\n        "
    str_1 = "RqO}5/ s+0V"
    dict_0 = {str_0: str_0, str_1: str_1}
    box_0 = module_0.Box(dict_0)
    box_1 = module_0.Box(box_0)
    str_2 = box_1.__str__()
    box_2 = module_0.Box(dict_0)
    bool_0 = box_0.__eq__(box_2)
    int_0 = 1735
    bytes_0 = b'\xc09\x1eR"3<\x9d\x8cP\xa9'
    bytes_1 = b""
    box_3 = module_0.Box(bytes_1)
    maybe_0 = box_3.to_maybe()
    box_4 = module_0.Box(bytes_0)
    box_5 = module_0.Box(int_0)
    box_5.bind(box_4)


def test_case_1():
    bytes_0 = b"\x8f\xc1\xe2\xd4d\n\xf5.?}8 \xd7"
    box_0 = module_0.Box(bytes_0)
    bool_0 = box_0.__eq__(bytes_0)
    try_0 = box_0.to_try()
    try_0.to_try()


def test_case_2():
    generic_0 = module_1.Generic()
    str_0 = "Jb-Te`3\x0bm1/"
    box_0 = module_0.Box(str_0)
    box_0.bind(generic_0)


def test_case_3():
    bytes_0 = b""
    box_0 = module_0.Box(bytes_0)
    maybe_0 = box_0.to_maybe()
    none_type_0 = None
    box_1 = module_0.Box(none_type_0)
    str_0 = box_1.__str__()
    bool_0 = box_1.__eq__(none_type_0)
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    box_2 = module_0.Box(dict_0)
    box_2.ap(list_0)


def test_case_4():
    none_type_0 = None
    set_0 = {none_type_0}
    box_0 = module_0.Box(set_0)
    str_0 = "\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        "
    box_1 = module_0.Box(str_0)
    box_1.ap(box_0)


def test_case_5():
    str_0 = "qM.B1"
    list_0 = [str_0, str_0, str_0]
    box_0 = module_0.Box(list_0)
    try_0 = box_0.to_try()
    none_type_0 = None
    bool_0 = try_0.__eq__(str_0)
    box_1 = module_0.Box(none_type_0)
    right_0 = box_1.to_either()


def test_case_6():
    bool_0 = False
    box_0 = module_0.Box(bool_0)
    lazy_0 = box_0.to_lazy()


def test_case_7():
    bytes_0 = b"F\xd5\xa6JdT\xbc\xb8\xef\xaa\xe5\xb6L\xe0\xab\x16\x9d\x1f\xd3"
    box_0 = module_0.Box(bytes_0)
    str_0 = box_0.__str__()
    list_0 = []
    box_1 = module_0.Box(list_0)
    bool_0 = box_1.__eq__(list_0)
    try_0 = box_1.to_try()
    lazy_0 = box_1.to_lazy()
    try_1 = lazy_0.to_try()
    try_1.to_validation()


def test_case_8():
    generic_0 = module_1.Generic()
    box_0 = module_0.Box(generic_0)
    validation_0 = box_0.to_validation()
    lazy_0 = box_0.to_lazy()
    bool_0 = False
    box_1 = module_0.Box(bool_0)
    right_0 = box_1.to_either()
    none_type_0 = None
    box_1.map(none_type_0)
