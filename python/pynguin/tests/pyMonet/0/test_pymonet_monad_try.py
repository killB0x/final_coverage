# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.monad_try as module_1


def test_case_0():
    object_0 = module_0.object()
    bool_0 = False
    try_0 = module_1.Try(object_0, bool_0)
    try_1 = module_1.Try(bool_0, bool_0)
    try_2 = module_1.Try(object_0, bool_0)
    try_3 = try_2.get_or_else(try_1)
    try_4 = try_1.filter(try_1)
    try_5 = try_0.on_success(object_0)
    try_6 = try_1.on_success(try_0)
    object_1 = try_0.get()
    try_7 = try_2.filter(try_1)
    try_8 = try_0.on_success(object_0)
    bool_1 = try_0.__eq__(try_6)
    str_0 = try_0.__str__()
    try_9 = try_0.get_or_else(try_1)


def test_case_1():
    int_0 = 897
    bool_0 = False
    bool_1 = True
    try_0 = module_1.Try(bool_0, bool_1)
    bool_2 = try_0.__eq__(int_0)


def test_case_2():
    none_type_0 = None
    str_0 = "^0u"
    set_0 = {none_type_0, none_type_0, none_type_0, str_0}
    bool_0 = True
    try_0 = module_1.Try(set_0, bool_0)
    none_type_1 = None
    list_0 = [none_type_1, none_type_1, none_type_1]
    bool_1 = True
    try_1 = module_1.Try(list_0, bool_1)
    try_1.map(try_0)


def test_case_3():
    str_0 = "8GZ-HxGt6"
    bool_0 = False
    try_0 = module_1.Try(str_0, bool_0)
    try_1 = try_0.map(str_0)
    str_1 = "\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        "
    bool_1 = False
    try_2 = module_1.Try(str_1, bool_1)
    try_2.on_fail(str_0)


def test_case_4():
    bool_0 = True
    float_0 = 2631.0
    bool_1 = True
    bool_2 = True
    try_0 = module_1.Try(bool_0, bool_2)
    bool_3 = try_0.get_or_else(bool_0)
    dict_0 = {bool_2: bool_2, bool_1: bool_1}
    bool_4 = try_0.__eq__(dict_0)
    bool_5 = True
    try_1 = module_1.Try(bool_4, bool_5)
    try_2 = module_1.Try(float_0, bool_1)
    try_2.bind(float_0)


def test_case_5():
    bytes_0 = b"\xe3\xab\x96\xcd:\x1elk\xf3\xaa"
    none_type_0 = None
    try_0 = module_1.Try(bytes_0, none_type_0)
    try_1 = try_0.bind(none_type_0)


def test_case_6():
    str_0 = "P(|ed<)orF?*Pi5a4>"
    bool_0 = False
    try_0 = module_1.Try(str_0, bool_0)
    try_1 = try_0.filter(try_0)
    try_2 = try_0.bind(str_0)
    str_1 = try_2.__str__()
    try_3 = try_2.on_success(try_1)
    bool_1 = True
    try_4 = module_1.Try(try_1, bool_1)
    try_4.on_success(try_1)


def test_case_7():
    bytes_0 = b"\xfc\x93"
    bytes_1 = b""
    str_0 = "All"
    bool_0 = False
    try_0 = module_1.Try(str_0, bool_0)
    try_1 = try_0.filter(bytes_1)
    try_2 = module_1.Try(try_1, bool_0)
    try_3 = try_2.on_success(bytes_0)


def test_case_8():
    int_0 = 0
    str_0 = "/O?x]Y>=:3II\x0b"
    list_0 = [str_0]
    bool_0 = True
    try_0 = module_1.Try(list_0, bool_0)
    try_1 = try_0.on_fail(int_0)


def test_case_9():
    tuple_0 = ()
    int_0 = 1
    bool_0 = False
    try_0 = module_1.Try(int_0, bool_0)
    try_0.on_fail(tuple_0)


def test_case_10():
    str_0 = "Yt{\t\x0c^f!|"
    bool_0 = False
    try_0 = module_1.Try(str_0, bool_0)
    try_1 = try_0.filter(bool_0)
    try_2 = module_1.Try(str_0, try_1)
    try_2.filter(str_0)


def test_case_11():
    int_0 = 897
    bool_0 = False
    bool_1 = True
    try_0 = module_1.Try(bool_0, bool_1)
    try_1 = try_0.on_fail(try_0)
    bool_2 = try_0.__eq__(int_0)
    bool_3 = try_1.get_or_else(bool_1)
    bool_3.get()


def test_case_12():
    int_0 = 1716
    tuple_0 = ()
    bool_0 = False
    try_0 = module_1.Try(tuple_0, bool_0)
    int_1 = try_0.get_or_else(int_0)


def test_case_13():
    bool_0 = False
    try_0 = module_1.Try(bool_0, bool_0)


def test_case_14():
    none_type_0 = None
    bool_0 = False
    try_0 = module_1.Try(none_type_0, bool_0)
    str_0 = try_0.__str__()
    str_1 = "\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        "
    list_0 = [str_1, str_1, str_1]
    bool_1 = True
    try_1 = module_1.Try(list_0, bool_1)
    try_2 = module_1.Try(try_1, bool_1)
    try_3 = try_2.on_fail(none_type_0)


def test_case_15():
    int_0 = -289
    bool_0 = True
    try_0 = module_1.Try(int_0, bool_0)
    int_1 = try_0.get()


def test_case_16():
    bytes_0 = b""
    str_0 = "All"
    bool_0 = False
    try_0 = module_1.Try(str_0, bool_0)
    bool_1 = try_0.get_or_else(bool_0)
    try_1 = try_0.filter(bytes_0)
    none_type_0 = None
    try_2 = try_0.filter(none_type_0)
    bool_2 = False
    try_3 = module_1.Try(str_0, bool_2)
    bool_3 = try_0.__eq__(try_2)
    bool_4 = try_0.__eq__(str_0)
    try_4 = try_3.map(bool_3)
