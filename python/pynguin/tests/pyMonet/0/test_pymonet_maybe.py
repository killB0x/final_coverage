# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import typing as module_1
import builtins as module_2


def test_case_0():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_1():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)


def test_case_2():
    bytes_0 = b"(\xf1\x8c\xb2%),\xc7\xeb("
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    tuple_1 = maybe_0.get_or_else(bytes_0)
    str_0 = "\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        "
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    try_0 = maybe_2.to_try()
    try_1 = maybe_1.to_try()
    bool_2 = maybe_2.__eq__(str_0)
    try_1.bind(try_1)


def test_case_3():
    generic_0 = module_1.Generic()
    str_0 = "|W:"
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    none_type_0 = None
    maybe_1 = maybe_0.filter(str_0)
    maybe_2 = maybe_0.map(none_type_0)
    try_0 = maybe_0.to_try()
    box_0 = maybe_0.to_box()
    maybe_3 = maybe_0.ap(generic_0)
    maybe_4 = module_0.Maybe(generic_0, bool_0)
    maybe_5 = module_0.Maybe(try_0, box_0)
    maybe_4.map(maybe_3)


def test_case_4():
    none_type_0 = None
    generic_0 = module_1.Generic()
    bool_0 = False
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    maybe_0.map(none_type_0)


def test_case_5():
    float_0 = 1581.40535
    float_1 = 1968.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_1, bool_0)
    none_type_0 = None
    float_2 = 2095.35
    dict_0 = {}
    tuple_0 = (float_2, dict_0, bool_0)
    tuple_1 = (maybe_0, none_type_0, tuple_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(tuple_1, bool_1)
    maybe_2 = maybe_1.bind(float_0)


def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    int_0 = -1197
    bool_1 = False
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_0.bind(list_0)


def test_case_7():
    none_type_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    maybe_1 = maybe_0.ap(none_type_0)
    bool_1 = False
    list_0 = [none_type_0, none_type_0, none_type_0, bool_1]
    bool_2 = False
    maybe_2 = module_0.Maybe(list_0, bool_2)
    box_0 = maybe_2.to_box()
    validation_0 = box_0.to_validation()
    box_0.get_or_else(none_type_0)


def test_case_8():
    str_0 = 'Mku=f]-~\x0c%k"@=v1s'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    lazy_0 = maybe_0.to_lazy()
    bytes_0 = b"\x15\xae]\xa5\xed\x19\x19~>\x85\n\x07\xdc\xb5\xae\xcd\x96\x16"
    bool_1 = False
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    try_0 = maybe_1.to_try()
    maybe_1.ap(str_0)


def test_case_9():
    str_0 = ":VZDG1\r,\x0c:/\x0c"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = maybe_0.filter(str_0)
    bool_1 = False
    maybe_2 = module_0.Maybe(str_0, bool_1)
    maybe_2.filter(str_0)


def test_case_10():
    str_0 = "{n)WXxY"
    str_1 = ":VZDG1\r,\x0c:/\x0c"
    bool_0 = False
    maybe_0 = module_0.Maybe(str_1, bool_0)
    maybe_0.filter(str_0)


def test_case_11():
    none_type_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(none_type_0, bool_0)
    int_0 = 914
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_2 = module_0.Maybe(maybe_1, bool_1)
    maybe_3 = maybe_2.get_or_else(maybe_0)


def test_case_12():
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    left_0 = maybe_0.to_either()
    str_0 = "U%\t4DVTs"
    bool_2 = True
    maybe_1 = module_0.Maybe(str_0, bool_2)


def test_case_13():
    int_0 = 0
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    right_0 = maybe_0.to_either()


def test_case_14():
    generic_0 = module_1.Generic()
    str_0 = "|W:"
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    maybe_1 = maybe_0.filter(str_0)
    box_0 = maybe_0.to_box()
    maybe_2 = maybe_0.ap(generic_0)
    maybe_3 = module_0.Maybe(generic_0, bool_0)
    bool_2 = True
    maybe_4 = module_0.Maybe(maybe_2, bool_2)
    maybe_3.map(maybe_2)


def test_case_15():
    int_0 = -150
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    lazy_0 = maybe_0.to_lazy()


def test_case_16():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    lazy_0 = maybe_0.to_lazy()


def test_case_17():
    int_0 = -172
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    validation_0 = maybe_0.to_validation()


def test_case_18():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    validation_0 = maybe_0.to_validation()


def test_case_19():
    int_0 = 78
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    lazy_0 = maybe_0.to_lazy()
    bool_1 = False
    maybe_1 = module_0.Maybe(bool_0, bool_1)
    box_0 = maybe_1.to_box()
    maybe_2 = module_0.Maybe(lazy_0, lazy_0)
    validation_0 = maybe_2.to_validation()
    try_0 = maybe_2.to_try()
    try_1 = lazy_0.to_try()
    validation_1 = maybe_2.to_validation()
    lazy_0.filter(validation_0)


def test_case_20():
    str_0 = '1"h[Oy@C&z|;hN$ 8.'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = False
    bool_2 = False
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    bool_3 = maybe_1.__eq__(maybe_0)
    float_0 = 46.212
    bool_4 = False
    float_1 = 917.6
    bool_5 = False
    bool_6 = maybe_1.get_or_else(float_0)
    bool_7 = False
    maybe_2 = module_0.Maybe(float_0, bool_7)
    try_0 = maybe_2.to_try()
    maybe_3 = module_0.Maybe(bool_5, bool_5)
    maybe_4 = module_0.Maybe(bool_4, bool_5)
    float_2 = try_0.get_or_else(maybe_4)
    maybe_5 = module_0.Maybe(maybe_3, try_0)
    maybe_4.map(float_1)


def test_case_21():
    str_0 = "\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        "
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    none_type_0 = None
    maybe_1 = maybe_0.bind(none_type_0)
    str_1 = ';FbD3"1\rwp\r'
    maybe_2 = module_0.Maybe(str_1, bool_0)
    lazy_0 = maybe_2.to_lazy()
    bool_1 = maybe_2.__eq__(bool_0)
    try_0 = maybe_0.to_try()
    try_1 = try_0.filter(try_0)
    bool_2 = True
    maybe_3 = module_0.Maybe(none_type_0, bool_2)
    bool_3 = maybe_3.get_or_else(bool_0)
    maybe_4 = maybe_0.filter(try_0)
    maybe_5 = module_0.Maybe(str_0, bool_1)
    maybe_6 = module_0.Maybe(bool_0, bool_0)
    maybe_7 = maybe_6.bind(try_0)
    box_0 = maybe_3.to_box()
    maybe_8 = maybe_2.ap(bool_1)
    bool_4 = False
    maybe_9 = module_0.Maybe(maybe_5, bool_4)
    bool_5 = maybe_2.__eq__(str_0)
    generic_0 = module_1.Generic()
    object_0 = module_2.object()
    bool_6 = maybe_8.__eq__(bool_0)
    maybe_10 = maybe_3.map(box_0)
    try_2 = maybe_9.to_try()
    bool_7 = maybe_2.__eq__(str_1)
    maybe_11 = maybe_2.filter(maybe_8)
    try_3 = lazy_0.to_try()
    try_4 = maybe_8.to_try()
    try_5 = try_0.filter(box_0)
    try_6 = maybe_5.to_try()


def test_case_22():
    generic_0 = module_1.Generic()
    bool_0 = True
    maybe_0 = module_0.Maybe(generic_0, bool_0)
    bool_1 = maybe_0.__eq__(generic_0)
    maybe_1 = maybe_0.ap(bool_0)
    float_0 = 2036.0
    maybe_2 = maybe_0.get_or_else(maybe_0)
    bool_2 = False
    maybe_3 = module_0.Maybe(generic_0, bool_2)
    bool_3 = maybe_1.get_or_else(bool_0)
    maybe_4 = module_0.Maybe(maybe_1, maybe_1)
    bool_4 = True
    maybe_5 = module_0.Maybe(maybe_3, bool_4)
    maybe_6 = maybe_5.filter(maybe_1)
    bool_5 = True
    maybe_7 = module_0.Maybe(maybe_6, bool_5)
    bool_6 = True
    maybe_8 = module_0.Maybe(maybe_4, bool_6)
    bool_7 = False
    maybe_9 = module_0.Maybe(float_0, bool_7)
    try_0 = maybe_0.to_try()
    try_1 = maybe_0.to_try()
    maybe_10 = module_0.Maybe(maybe_5, bool_7)
    bool_8 = maybe_8.__eq__(maybe_10)
    maybe_10.map(try_0)


def test_case_23():
    set_0 = set()
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    str_0 = "\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        "
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    bool_2 = maybe_1.__eq__(maybe_0)
    generic_0 = module_1.Generic()
    bool_3 = True
    maybe_2 = module_0.Maybe(generic_0, bool_3)
    bool_4 = maybe_2.__eq__(generic_0)
    maybe_3 = maybe_2.ap(bool_3)
    float_0 = 2036.0
    bool_5 = False
    maybe_4 = module_0.Maybe(bool_5, bool_4)
    lazy_0 = maybe_4.to_lazy()
    lazy_1 = maybe_3.to_lazy()
    maybe_5 = maybe_3.filter(maybe_3)
    bool_6 = True
    bool_7 = True
    maybe_6 = module_0.Maybe(bool_6, bool_7)
    maybe_7 = module_0.Maybe(float_0, bool_6)
    lazy_1.get_or_else(maybe_4)
