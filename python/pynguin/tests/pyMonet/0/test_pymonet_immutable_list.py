# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0


def test_case_0():
    int_0 = 0
    immutable_list_0 = module_0.ImmutableList(int_0)
    bool_0 = immutable_list_0.__eq__(int_0)
    immutable_list_0.find(int_0)


def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.append(immutable_list_0)
    immutable_list_0.filter(immutable_list_1)


def test_case_2():
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    int_0 = immutable_list_0.__len__()


def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()


def test_case_4():
    bytes_0 = b"k0e\r\xce"
    none_type_0 = None
    int_0 = -501
    tuple_0 = (bytes_0, none_type_0, int_0)
    immutable_list_0 = module_0.ImmutableList(tail=tuple_0)
    immutable_list_0.to_list()


def test_case_5():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    set_0 = {str_0, str_0, str_0}
    immutable_list_0.map(set_0)


def test_case_6():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_0.filter(none_type_0)


def test_case_7():
    str_0 = "\n        Applies the function inside the Lazy[A] structure to another applicative type for notempty Lazy.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Lazy[Function(A) -> B]\n        :returns: new Lazy with result of contains function\n        :rtype: Lazy[B]\n        "
    int_0 = -245
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(tail=int_0, is_empty=bool_0)
    immutable_list_0.filter(str_0)


def test_case_8():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList()
    none_type_1 = immutable_list_0.find(none_type_0)


def test_case_9():
    int_0 = 0
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_0.find(int_0)


def test_case_10():
    int_0 = -600
    immutable_list_0 = module_0.ImmutableList()
    int_1 = immutable_list_0.reduce(int_0, int_0)
    immutable_list_1 = module_0.ImmutableList(int_1)
    immutable_list_1.find(int_0)


def test_case_11():
    immutable_list_0 = module_0.ImmutableList()


def test_case_12():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    immutable_list_0.filter(immutable_list_1)


def test_case_13():
    str_0 = "0v,9YeLT\x0b<v(3%#e"
    int_0 = 938
    immutable_list_0 = module_0.ImmutableList(tail=int_0)
    immutable_list_1 = immutable_list_0.append(str_0)
    none_type_0 = None
    immutable_list_2 = module_0.ImmutableList(none_type_0)


def test_case_14():
    immutable_list_0 = module_0.ImmutableList()
    list_0 = immutable_list_0.to_list()
    bool_0 = False
    immutable_list_1 = module_0.ImmutableList(is_empty=bool_0)
    immutable_list_1.__add__(list_0)


def test_case_15():
    float_0 = -484.354022
    bool_0 = True
    immutable_list_0 = module_0.ImmutableList(is_empty=bool_0)
    none_type_0 = immutable_list_0.find(float_0)
    bytes_0 = b""
    int_0 = 0
    immutable_list_1 = module_0.ImmutableList(int_0)
    immutable_list_1.reduce(bytes_0, bytes_0)


def test_case_16():
    bytes_0 = b"|\x86"
    tuple_0 = (bytes_0, bytes_0)
    immutable_list_0 = module_0.ImmutableList(bytes_0, tuple_0)
    immutable_list_0.find(immutable_list_0)


def test_case_17():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    list_0 = [immutable_list_0]
    immutable_list_2 = immutable_list_0.reduce(list_0, immutable_list_1)
    bool_0 = False
    immutable_list_3 = module_0.ImmutableList()
    none_type_0 = None
    none_type_1 = immutable_list_0.find(none_type_0)
    immutable_list_4 = module_0.ImmutableList()
    immutable_list_5 = immutable_list_2.unshift(bool_0)
    int_0 = immutable_list_3.__len__()
    immutable_list_6 = module_0.ImmutableList()
    immutable_list_2.map(immutable_list_2)


def test_case_18():
    int_0 = 0
    immutable_list_0 = module_0.ImmutableList(int_0)
    bool_0 = immutable_list_0.__eq__(immutable_list_0)
    immutable_list_0.find(int_0)


def test_case_19():
    immutable_list_0 = module_0.ImmutableList()
    none_type_0 = immutable_list_0.find(immutable_list_0)
    none_type_1 = immutable_list_0.find(none_type_0)
    immutable_list_1 = immutable_list_0.unshift(immutable_list_0)
    bool_0 = True
    immutable_list_2 = module_0.ImmutableList(none_type_0, is_empty=bool_0)
    bool_1 = immutable_list_0.__eq__(immutable_list_2)
    list_0 = [immutable_list_0]
    immutable_list_3 = immutable_list_0.reduce(list_0, immutable_list_1)
    immutable_list_4 = module_0.ImmutableList()
    immutable_list_3.reduce(immutable_list_3, immutable_list_1)


def test_case_20():
    int_0 = 0
    immutable_list_0 = module_0.ImmutableList(int_0)
    immutable_list_1 = immutable_list_0.append(int_0)
    immutable_list_2 = module_0.ImmutableList(tail=immutable_list_1)
    bool_0 = immutable_list_0.__eq__(immutable_list_2)
    immutable_list_0.find(int_0)


def test_case_21():
    tuple_0 = ()
    immutable_list_0 = module_0.ImmutableList(tuple_0)
    int_0 = immutable_list_0.__len__()
    immutable_list_0.find(int_0)


def test_case_22():
    none_type_0 = None
    immutable_list_0 = module_0.ImmutableList(tail=none_type_0)
    set_0 = set()
    immutable_list_1 = module_0.ImmutableList(tail=set_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_0)
    list_0 = immutable_list_0.to_list()
    none_type_1 = None
    immutable_list_2 = module_0.ImmutableList()
    none_type_2 = immutable_list_2.find(none_type_1)


def test_case_23():
    bytes_0 = b"|\x86"
    tuple_0 = (bytes_0, bytes_0)
    immutable_list_0 = module_0.ImmutableList(bytes_0, tuple_0)
    int_0 = immutable_list_0.__len__()
    immutable_list_0.find(immutable_list_0)
