# Automatically generated by Pynguin.
import isort._future._dataclasses as module_0
import ast as module_1
import enum as module_2
import collections.abc as module_3
import collections as module_4
import re as module_5
import inspect as module_6


def test_case_0():
    field_0 = module_0.field()


def test_case_1():
    list_0 = []
    field_0 = module_0.field(default_factory=list_0, compare=list_0, metadata=list_0)


def test_case_2():
    lt_e_0 = module_1.LtE()
    enum_dict_0 = module_2._EnumDict()
    field_0 = module_0.Field(
        enum_dict_0,
        enum_dict_0,
        enum_dict_0,
        enum_dict_0,
        enum_dict_0,
        enum_dict_0,
        enum_dict_0,
    )
    none_type_0 = field_0.__set_name__(lt_e_0, lt_e_0)


def test_case_3():
    if_exp_0 = module_1.IfExp()
    keys_view_0 = module_3.KeysView(if_exp_0)
    module_0.field(default=keys_view_0, default_factory=keys_view_0)


def test_case_4():
    function_0 = module_0.dataclass()


def test_case_5():
    not_eq_0 = module_1.NotEq()
    module_0.fields(not_eq_0)


def test_case_6():
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    module_0.replace(frozen_instance_error_0)


def test_case_7():
    list_0 = module_1.List()
    module_0.asdict(list_0)


def test_case_8():
    function_def_0 = module_1.FunctionDef()
    module_0.astuple(function_def_0)


def test_case_9():
    list_0 = []
    h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0 = (
        module_0._HAS_DEFAULT_FACTORY_CLASS(*list_0)
    )
    str_0 = h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0.__repr__()
    match_star_0 = module_1.MatchStar(*list_0)
    module_0.asdict(match_star_0)


def test_case_10():
    m_i_s_s_i_n_g__t_y_p_e_0 = module_0._MISSING_TYPE()
    for_0 = module_1.For()
    list_0 = [for_0, for_0, m_i_s_s_i_n_g__t_y_p_e_0]
    f_i_e_l_d__b_a_s_e_0 = module_0._FIELD_BASE(for_0)
    for_1 = f_i_e_l_d__b_a_s_e_0.__repr__()
    match_case_0 = module_1.match_case(*list_0)
    module_0._InitVarMeta()


def test_case_11():
    list_0 = []
    field_0 = module_0.Field(list_0, list_0, list_0, list_0, list_0, list_0, list_0)
    str_0 = field_0.__repr__()
    str_1 = list_0.__repr__()
    user_string_0 = module_4.UserString(list_0)
    module_0.make_dataclass(
        list_0,
        user_string_0,
        bases=list_0,
        repr=user_string_0,
        eq=list_0,
        order=list_0,
        frozen=user_string_0,
    )


def test_case_12():
    str_0 = ""
    type_0 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_0)


def test_case_13():
    list_0 = []
    str_0 = "comment_prefix"
    str_1 = "l:UNEV'"
    error_0 = module_5.error(str_0, pos=str_0)
    dict_0 = {str_0: str_0, str_1: error_0}
    match_mapping_0 = module_1.MatchMapping(*list_0, **dict_0)
    raise_0 = module_1.Raise(*list_0, **dict_0)
    field_0 = module_0.Field(
        match_mapping_0, raise_0, str_0, str_1, str_0, str_0, str_1
    )
    dataclass_params_0 = module_0._DataclassParams(
        field_0, error_0, error_0, error_0, match_mapping_0, field_0
    )
    str_2 = dataclass_params_0.__repr__()
    pass_0 = module_1.Pass()
    module_0.astuple(pass_0)


def test_case_14():
    list_0 = []
    bool_0 = module_0.is_dataclass(list_0)


def test_case_15():
    str_0 = "~: w(/\x0c\tvB[I%b\\wof_e"
    field_0 = module_0.field(compare=str_0, metadata=str_0)


def test_case_16():
    list_0 = []
    str_0 = "comment_prefix"
    str_1 = "l:UNEV'"
    error_0 = module_5.error(str_0, pos=str_0)
    field_0 = module_0.Field(list_0, error_0, list_0, error_0, list_0, str_1, str_0)
    none_type_0 = field_0.__set_name__(str_1, str_1)
    dict_0 = {str_0: str_0, str_1: error_0}
    match_mapping_0 = module_1.MatchMapping(*list_0, **dict_0)
    field_1 = module_0.Field(
        match_mapping_0, none_type_0, str_0, str_1, str_0, str_0, str_1
    )
    unparser_0 = module_1._Unparser()
    field_2 = module_0.field(default=str_0, init=none_type_0, compare=field_0)
    module_0.replace(error_0)


def test_case_17():
    str_0 = "_"
    module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_0, order=str_0)


def test_case_18():
    str_0 = "store_true"
    module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_0, order=str_0)


def test_case_19():
    str_0 = ""
    enum_dict_0 = module_2._EnumDict()
    store_0 = module_1.Store(**enum_dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    module_0.make_dataclass(
        type_0, store_0, namespace=store_0, repr=store_0, order=enum_dict_0
    )


def test_case_20():
    list_0 = []
    str_0 = list_0.__repr__()
    user_string_0 = module_4.UserString(list_0)
    module_0.make_dataclass(
        list_0,
        user_string_0,
        bases=list_0,
        repr=user_string_0,
        eq=list_0,
        order=list_0,
        frozen=user_string_0,
    )


def test_case_21():
    str_0 = "_4T"
    module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_0, order=str_0)


def test_case_22():
    str_0 = ""
    str_1 = "_"
    type_0 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    module_0.replace(type_0)


def test_case_23():
    str_0 = ""
    type_0 = module_0.make_dataclass(str_0, str_0, repr=str_0, frozen=str_0)


def test_case_24():
    str_0 = ""
    str_1 = "_"
    type_0 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)


def test_case_25():
    str_0 = ""
    enum_dict_0 = module_2._EnumDict()
    store_0 = module_1.Store(**enum_dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)


def test_case_26():
    str_0 = ""
    enum_dict_0 = module_2._EnumDict()
    store_0 = module_1.Store(**enum_dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    tuple_0 = module_0.fields(type_0)


def test_case_27():
    str_0 = ""
    dict_0 = {}
    store_0 = module_1.Store(**dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    str_1 = "q"
    module_0.make_dataclass(
        str_1, dict_0, init=str_1, eq=str_0, order=str_1, unsafe_hash=store_0
    )


def test_case_28():
    str_0 = ""
    enum_dict_0 = module_2._EnumDict()
    store_0 = module_1.Store(**enum_dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    str_1 = "q"
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    type_1 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    bool_0 = module_0.is_dataclass(str_1)
    type_2 = module_0.dataclass(type_0, repr=store_0, eq=str_1)
    field_0 = module_0.Field(str_1, str_1, str_1, str_1, str_1, type_1, str_1)
    frozen_instance_error_1 = module_0.FrozenInstanceError()
    tuple_0 = module_0.fields(type_0)
    user_string_0 = module_4.UserString(field_0)
    module_0.make_dataclass(type_1, user_string_0, bases=str_0, eq=bool_0)


def test_case_29():
    str_0 = ""
    dict_0 = {}
    store_0 = module_1.Store(**dict_0)
    str_1 = "q"
    type_0 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    bool_0 = module_0.is_dataclass(str_1)
    type_1 = module_0.dataclass(type_0, repr=store_0, eq=str_1)
    field_0 = module_0.Field(str_1, str_1, str_1, str_1, str_1, type_0, str_1)
    none_type_0 = field_0.__set_name__(str_0, type_0)
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    module_0.fields(str_0)


def test_case_30():
    str_0 = ""
    dict_0 = {}
    store_0 = module_1.Store(**dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    str_1 = "q"
    type_1 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    bool_0 = module_0.is_dataclass(str_1)
    type_2 = module_0.dataclass(type_0, repr=store_0, eq=str_1)
    field_0 = module_0.Field(str_1, str_1, str_1, str_1, str_1, type_1, str_1)
    none_type_0 = field_0.__set_name__(str_0, type_1)
    frozen_instance_error_0 = module_0.FrozenInstanceError()
    dataclass_params_0 = module_0._DataclassParams(
        store_0, str_1, str_1, store_0, store_0, type_0
    )
    list_0 = []
    h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0 = (
        module_0._HAS_DEFAULT_FACTORY_CLASS(*list_0)
    )
    yield_from_0 = module_1.YieldFrom()
    field_1 = module_0.Field(
        frozen_instance_error_0,
        str_1,
        yield_from_0,
        str_0,
        dataclass_params_0,
        list_0,
        str_0,
    )
    str_2 = h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0.__repr__()
    ordered_dict_0 = module_4.OrderedDict()
    module_0.dataclass(type_1, order=type_2, frozen=ordered_dict_0)


def test_case_31():
    str_0 = ""
    dict_0 = {}
    store_0 = module_1.Store(**dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    str_1 = "q"
    type_1 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    type_2 = module_0.dataclass(type_0, repr=store_0, eq=str_1)
    field_0 = module_0.Field(str_1, str_1, str_1, str_1, str_1, type_1, str_1)
    tuple_0 = module_0.fields(type_0)
    dataclass_params_0 = module_0._DataclassParams(
        store_0, str_1, str_1, store_0, store_0, type_0
    )
    list_0 = []
    h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0 = (
        module_0._HAS_DEFAULT_FACTORY_CLASS(*list_0)
    )
    yield_from_0 = module_1.YieldFrom()
    field_1 = module_0.Field(
        type_2, str_1, yield_from_0, yield_from_0, dataclass_params_0, list_0, str_0
    )
    str_2 = h_a_s__d_e_f_a_u_l_t__f_a_c_t_o_r_y__c_l_a_s_s_0.__repr__()
    signature_0 = module_6.Signature(return_annotation=str_2)
    field_2 = module_0.Field(field_0, tuple_0, tuple_0, type_2, str_0, type_0, tuple_0)
    none_type_0 = field_2.__set_name__(type_2, signature_0)
    module_0.fields(store_0)


def test_case_32():
    str_0 = ""
    enum_dict_0 = module_2._EnumDict()
    store_0 = module_1.Store(**enum_dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    str_1 = "q"
    type_1 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    bool_0 = module_0.is_dataclass(str_1)
    module_0.dataclass(type_0, repr=type_0, eq=str_1, frozen=store_0)


def test_case_33():
    str_0 = ""
    enum_dict_0 = module_2._EnumDict()
    break_0 = module_1.Break(**enum_dict_0)
    dataclass_params_0 = module_0._DataclassParams(
        break_0, enum_dict_0, str_0, str_0, break_0, enum_dict_0
    )
    store_0 = module_1.Store(**enum_dict_0)
    type_0 = module_0.make_dataclass(str_0, str_0, frozen=store_0)
    str_1 = "Y"
    type_1 = module_0.make_dataclass(str_0, str_0, init=str_0, eq=str_1, order=str_1)
    bool_0 = module_0.is_dataclass(str_1)
    module_0.dataclass(type_0, init=str_1, unsafe_hash=break_0)
