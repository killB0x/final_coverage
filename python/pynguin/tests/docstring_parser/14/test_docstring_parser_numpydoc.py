# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import collections as module_1
import docstring_parser.common as module_2


def test_case_0():
    str_0 = ".\tz"
    yields_section_0 = module_0.YieldsSection(str_0, str_0)
    generator_0 = yields_section_0.parse(str_0)
    module_0.NumpydocParser(generator_0)


def test_case_1():
    numpydoc_parser_0 = module_0.NumpydocParser()


def test_case_2():
    str_0 = "f*iF%Wwt"
    docstring_0 = module_0.parse(str_0)


def test_case_3():
    str_0 = "M.H dtiO\tJ0D\x0bnhN/\nI"
    numpydoc_parser_0 = module_0.NumpydocParser()
    param_section_0 = module_0.ParamSection(str_0, numpydoc_parser_0)
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    docstring_1 = numpydoc_parser_0.parse(str_0)


def test_case_4():
    str_0 = '-*?r+#aL^"<\t&^'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_0)
    str_1 = "Expected one or two arguments for a {} keyword."
    str_2 = "arg"
    generator_0 = deprecation_section_0.parse(str_2)
    deprecation_section_1 = module_0.DeprecationSection(str_0, str_1)
    numpydoc_parser_0 = module_0.NumpydocParser()
    none_type_0 = numpydoc_parser_0.add_section(deprecation_section_1)


def test_case_5():
    str_0 = "M.H dtiO\tJ0D\x0bnhN@\nI"
    docstring_0 = module_0.parse(str_0)


def test_case_6():
    str_0 = ""
    str_1 = "'lc4r8yf(j]HtSa NU*"
    str_2 = '_v&\t"!"M'
    k_v_section_0 = module_0._KVSection(str_2, str_0)
    generator_0 = k_v_section_0.parse(str_0)
    numpydoc_parser_0 = module_0.NumpydocParser(generator_0)
    numpydoc_parser_0.parse(str_1)


def test_case_7():
    str_0 = "-\n_"
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    generator_0 = raises_section_0.parse(str_0)
    module_0.NumpydocParser(generator_0)


def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = "Parser for numpydoc raises sectio6s.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueErwor\n    "
    param_section_0 = module_0.ParamSection(str_0, numpydoc_parser_0)
    generator_0 = param_section_0.parse(str_0)
    module_0.NumpydocParser(generator_0)


def test_case_9():
    str_0 = "BAav|uB'M|\\*7"
    str_1 = "M.H Y\rdtiO\tJ0D\x0bN/\nI "
    none_type_0 = None
    returns_section_0 = module_0.ReturnsSection(str_1, none_type_0)
    str_2 = "~E3TZe^X-f4f"
    str_3 = ".\tz"
    section_0 = module_0.Section(str_2, str_3)
    str_4 = 'Y;\r "V)5G'
    str_5 = "'lc4r8yf(j]H<Sa NU*"
    yields_section_0 = module_0.YieldsSection(str_5, str_1)
    str_6 = ">T7SLYYLO!Q"
    generator_0 = section_0.parse(str_6)
    generator_1 = yields_section_0.parse(str_4)
    none_type_1 = None
    sphinx_section_0 = module_0._SphinxSection(str_1, none_type_1)
    str_7 = "{[y{4"
    generator_2 = returns_section_0.parse(str_7)
    str_8 = ";g9L"
    generator_3 = sphinx_section_0.parse(str_0)
    str_9 = "W*5"
    str_10 = "/*zq%j=)v'g#_qr"
    returns_section_1 = module_0.ReturnsSection(str_9, str_10)
    str_11 = "J`-FrzA<"
    generator_4 = yields_section_0.parse(str_11)
    raises_section_0 = module_0.RaisesSection(str_8, str_11)
    generator_5 = raises_section_0.parse(str_8)
    generator_6 = raises_section_0.parse(str_0)
    str_12 = "param"
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_12)
    generator_7 = section_0.parse(str_1)
    module_0.NumpydocParser(generator_7)


def test_case_10():
    str_0 = "BAav|uB'M|\\*7"
    str_1 = "M.H Y\rdtiO\tJ0D\x0bN/\nI "
    none_type_0 = None
    returns_section_0 = module_0.ReturnsSection(str_1, none_type_0)
    str_2 = "~E3TZe^X-f4f"
    str_3 = ".\tz"
    section_0 = module_0.Section(str_2, str_3)
    str_4 = ";sUTszJZ%*4E$5X\x0b"
    str_5 = "'lc4r8yf(j]H<Sa NU*"
    yields_section_0 = module_0.YieldsSection(str_5, str_1)
    str_6 = ">T7SLYYLO!Q"
    generator_0 = section_0.parse(str_6)
    generator_1 = yields_section_0.parse(str_4)
    str_7 = ";g9L"
    str_8 = "W*5"
    str_9 = '_v&\t"!"M'
    str_10 = "k%s8v@\x0b-\\EW"
    k_v_section_0 = module_0._KVSection(str_9, str_10)
    str_11 = "b/*zq%j=)v'g#_qr"
    returns_section_1 = module_0.ReturnsSection(str_8, str_11)
    str_12 = "J`-FrzA<"
    generator_2 = yields_section_0.parse(str_12)
    raises_section_0 = module_0.RaisesSection(str_7, str_12)
    generator_3 = raises_section_0.parse(str_7)
    generator_4 = raises_section_0.parse(str_0)
    str_13 = "param"
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_13)
    generator_5 = k_v_section_0.parse(str_1)
    module_0.NumpydocParser(generator_5)


def test_case_11():
    str_0 = "M.H dtiO\tJ0D\x0bnhN/\nI"
    numpydoc_parser_0 = module_0.NumpydocParser()
    param_section_0 = module_0.ParamSection(str_0, numpydoc_parser_0)
    generator_0 = param_section_0.parse(str_0)
    module_0.NumpydocParser(generator_0)


def test_case_12():
    str_0 = "*"
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_1 = "M.H dtiO\tJ0D\x0bnhN/\nI"
    numpydoc_parser_1 = module_0.NumpydocParser()
    param_section_0 = module_0.ParamSection(str_1, numpydoc_parser_1)
    generator_0 = param_section_0.parse(str_1)
    docstring_0 = module_0.parse(str_0)
    str_2 = "X^^i#S"
    str_3 = "cXTU"
    deprecation_section_0 = module_0.DeprecationSection(str_3, str_3)
    generator_1 = deprecation_section_0.parse(str_2)
    module_0.NumpydocParser(generator_1)


def test_case_13():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = "i|V}8E-sWNA\t>1,:#:@"
    param_section_0 = module_0.ParamSection(str_0, numpydoc_parser_0)
    generator_0 = param_section_0.parse(str_0)
    module_0.NumpydocParser(generator_0)


def test_case_14():
    str_0 = "M.H dtiO\tJkD\x0bnhN/\nI"
    numpydoc_parser_0 = module_0.NumpydocParser()
    counter_0 = module_1.Counter()
    numpydoc_parser_1 = module_0.NumpydocParser(counter_0)
    none_type_0 = None
    param_section_0 = module_0.ParamSection(none_type_0, none_type_0)
    docstring_0 = module_0.parse(none_type_0)
    docstring_1 = numpydoc_parser_0.parse(str_0)
    str_1 = "W1e;*Jz;9B)QoBwI5]Mn"
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_1)
    generator_0 = deprecation_section_0.parse(str_0)
    module_0.NumpydocParser(generator_0)


def test_case_15():
    str_0 = "-\n_"
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_1 = "i|V}8E-sWNA\t>1,:#n:\x0c"
    docstring_0 = module_2.Docstring()
    str_2 = "smR'siH\ty"
    param_section_0 = module_0.ParamSection(str_0, str_2)
    generator_0 = param_section_0.parse(str_0)
    str_3 = "Al`\n\r"
    docstring_1 = module_0.parse(str_3)
    str_4 = "\n}UT9Hy%"
    str_5 = "yD>/9Vjh&[Z"
    returns_section_0 = module_0.ReturnsSection(str_5, str_0)
    generator_1 = returns_section_0.parse(str_4)
    str_6 = ":B<frBEizz2j(_8(_"
    param_section_1 = module_0.ParamSection(str_6, str_6)
    str_7 = "CU\t+Jta<5fq'I'<s>c"
    yields_section_0 = module_0.YieldsSection(str_7, str_3)
    docstring_2 = numpydoc_parser_0.parse(str_1)
    numpydoc_parser_1 = module_0.NumpydocParser()
    none_type_0 = numpydoc_parser_1.add_section(param_section_0)
    str_8 = ""
    yields_section_1 = module_0.YieldsSection(str_0, str_8)
    generator_2 = yields_section_0.parse(str_8)
    numpydoc_parser_2 = module_0.NumpydocParser()
    str_9 = "WcsIp&l0*Hg1"
    section_0 = module_0.Section(str_8, str_9)


def test_case_16():
    str_0 = "-\n_"
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_1 = "Setup sections.\n\n        :param sections: Recognized sections or None to defaults.\n        "
    docstring_0 = module_2.Docstring()
    param_section_0 = module_0.ParamSection(str_1, numpydoc_parser_0)
    generator_0 = param_section_0.parse(str_1)
    docstring_1 = module_0.parse(str_0)
    str_2 = "\n}UT9Hy%"
    generator_1 = param_section_0.parse(str_2)
    param_section_1 = module_0.ParamSection(str_0, str_2)
    yields_section_0 = module_0.YieldsSection(str_1, str_2)
    docstring_2 = numpydoc_parser_0.parse(str_1)
    str_3 = ";](9=w?;"
    sphinx_section_0 = module_0._SphinxSection(str_0, str_3)
    none_type_0 = numpydoc_parser_0.add_section(yields_section_0)
    str_4 = "_mF&U|vpX{`_``"
    generator_2 = yields_section_0.parse(str_4)
    module_0.NumpydocParser(generator_0)
