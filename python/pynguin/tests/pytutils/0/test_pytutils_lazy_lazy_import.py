# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0
import builtins as module_1


def test_case_0():
    str_0 = "7\tV(i*g?q.lb,YAyw"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        str_0, str_0, str_0
    )
    illegal_use_of_scope_replacer_0.__repr__()


def test_case_1():
    str_0 = "hN+\x0b1k-0^N|mj23F$0"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_2():
    str_0 = "h"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    not_implemented_type_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
    illegal_use_of_scope_replacer_0.__str__()


def test_case_3():
    str_0 = "MD"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    module_0.lazy_import(str_0, import_replacer_0, dict_0)


def test_case_4():
    str_0 = "MD"
    dict_0 = {}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, children=str_0)
    module_0.lazy_import(dict_0, import_replacer_0, import_replacer_0)


def test_case_5():
    import_processor_0 = module_0.ImportProcessor()


def test_case_6():
    str_0 = "hN+\x0b1k-0^N|mj23F$0"
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_7():
    str_0 = "hN+\x0b1k-0^N|mj23F$0"
    module_0.lazy_import(str_0, str_0)


def test_case_8():
    str_0 = "ni T;2V87s<`P(>p["
    module_0.lazy_import(str_0, str_0)


def test_case_9():
    none_type_0 = module_0.disallow_proxying()


def test_case_10():
    base_exception_0 = module_1.BaseException()
    none_type_0 = None
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(
        base_exception_0, none_type_0
    )
    str_0 = "#"
    str_1 = "I"
    import_processor_0 = module_0.ImportProcessor(str_1)
    import_processor_1 = module_0.ImportProcessor(import_processor_0)
    import_processor_1.lazy_import(str_0, str_0)


def test_case_11():
    str_0 = "hN+\x0b1k-0^N|mj23F$0"
    import_processor_0 = module_0.ImportProcessor(str_0)
    module_0.ImportReplacer(
        str_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
        import_processor_0,
    )


def test_case_12():
    str_0 = '~"b*#udV }1'
    module_0.lazy_import(str_0, str_0, str_0)


def test_case_13():
    str_0 = "\n    Derive a namespace from the module containing the caller's caller.\n\n    :return: the fully qualified python name of a module.\n    :rtype: str\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_14():
    str_0 = "hN+\x0b1k-0^N|mj23F$0"
    illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
    bool_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
    illegal_use_of_scope_replacer_0.__unicode__()


def test_case_15():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_16():
    str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(objectS:\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.muotiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
    module_0.lazy_import(str_0, str_0)


def test_case_17():
    str_0 = "\\{(mw+)\\}"
    module_0.lazy_import(str_0, str_0)


def test_case_18():
    str_0 = ";D"
    dict_0 = {str_0: str_0, str_0: str_0}
    import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, dict_0, str_0)
    scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
    module_0.lazy_import(import_replacer_0, scope_replacer_0, dict_0)
