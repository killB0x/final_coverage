# Automatically generated by Pynguin.
import pytutils.trees as module_0
import collections as module_1
import collections.abc as module_2


def test_case_0():
    str_0 = "Hy556k"
    module_0.get_tree_node(str_0, str_0)


def test_case_1():
    list_0 = []
    chain_map_0 = module_1.ChainMap(*list_0)
    registry_tree_0 = module_0.RegistryTree(chain_map_0)


def test_case_2():
    registry_tree_0 = module_0.RegistryTree()


def test_case_3():
    registry_tree_0 = module_0.RegistryTree()
    registry_tree_0.__getitem__(registry_tree_0)


def test_case_4():
    defaultdict_0 = module_0.tree()


def test_case_5():
    none_type_0 = None
    module_0.set_tree_node(none_type_0, none_type_0, none_type_0)


def test_case_6():
    registry_tree_0 = module_0.RegistryTree()
    registry_tree_0.__setitem__(registry_tree_0, registry_tree_0, registry_tree_0)


def test_case_7():
    bytes_0 = b""
    items_view_0 = module_2.ItemsView(bytes_0)
    registry_tree_0 = module_0.RegistryTree(bytes_0, items_view_0)
    set_0 = items_view_0.__and__(bytes_0)
    set_1 = items_view_0.__xor__(registry_tree_0)
    bool_0 = items_view_0.__lt__(items_view_0)
    not_implemented_type_0 = items_view_0.__ge__(bool_0)
    module_0.Tree(not_implemented_type_0, initial_is_ref=not_implemented_type_0)


def test_case_8():
    str_0 = "Hy556k"
    module_0.get_tree_node(str_0, str_0, parent=str_0)


def test_case_9():
    dict_0 = {}
    deque_0 = module_1.deque(**dict_0)
    user_dict_0 = module_1.UserDict(deque_0, **dict_0)
    registry_tree_0 = module_0.RegistryTree(namespace=user_dict_0)
    tree_0 = module_0.Tree()
    defaultdict_0 = module_0.tree()
    bytes_0 = b"\x80\xfe"
    tree_0.__setitem__(defaultdict_0, defaultdict_0, bytes_0)
