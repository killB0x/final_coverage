# Automatically generated by Pynguin.
import sanic.config as module_0
import builtins as module_1


def test_case_0():
    bool_0 = False
    config_0 = module_0.Config(bool_0)
    module_0.Config(load_env=config_0, keep_alive=bool_0)


def test_case_1():
    config_0 = module_0.Config()


def test_case_2():
    config_0 = module_0.Config()
    str_0 = "P"
    bool_0 = False
    object_0 = module_1.object()
    config_1 = module_0.Config(load_env=str_0)
    config_2 = module_0.Config(keep_alive=str_0)
    none_type_0 = config_2.__setattr__(bool_0, config_2)
    config_3 = module_0.Config(keep_alive=bool_0)
    none_type_1 = config_3.update_config(config_1)
    config_4 = module_0.Config(load_env=none_type_0, keep_alive=none_type_1)
    none_type_2 = config_3.update_config(config_1)


def test_case_3():
    bytes_0 = b"q\xa1^\xa3\xf2\x87\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.Config(dict_0, dict_0)


def test_case_4():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    config_0.__getattr__(bool_0)


def test_case_5():
    bool_0 = False
    config_0 = module_0.Config(keep_alive=bool_0)
    tuple_0 = (config_0,)
    config_1 = module_0.Config()
    config_1.__getattr__(tuple_0)


def test_case_6():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    config_0 = module_0.Config()
    config_0.update_config(dict_0)


def test_case_7():
    none_type_0 = None
    config_0 = module_0.Config()
    config_0.update_config(none_type_0)


def test_case_8():
    bytes_0 = b"T\xba\xfc\xc9\xbfha\x02h\xe4C\x88\x88\xcd\xbc\xfb\xaf\xb4v\xc2"
    bytes_1 = b"Not Implemented"
    config_0 = module_0.Config(keep_alive=bytes_1)
    config_1 = module_0.Config(keep_alive=config_0)
    none_type_0 = config_1.update_config(config_1)
    config_1.update_config(bytes_0)


def test_case_9():
    str_0 = "P"
    config_0 = module_0.Config(load_env=str_0)
