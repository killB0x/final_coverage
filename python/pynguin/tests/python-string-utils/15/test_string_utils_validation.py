# Automatically generated by Pynguin.
import string_utils.validation as module_0
import enum as module_1
import codecs as module_2
import collections as module_3
import string as module_4
import json.encoder as module_5
import _frozen_importlib as module_6
import re as module_7
import json.decoder as module_8


def test_case_0():
    str_0 = "g"
    bool_0 = module_0.is_isbn_10(str_0)


def test_case_1():
    none_type_0 = None
    module_0.is_isbn_10(none_type_0)


def test_case_2():
    str_0 = "s~exb2ln}nq,o"
    bool_0 = module_0.is_isbn(str_0)


def test_case_3():
    str_0 = "\n        :param input_data: Any received object\n        "
    bool_0 = module_0.is_isbn(str_0)


def test_case_4():
    str_0 = "KmrP\rQ-pPk:"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_10()


def test_case_5():
    str_0 = "'CR}\n\x0b"
    bool_0 = module_0.is_slug(str_0)


def test_case_6():
    enum_dict_0 = module_1._EnumDict()
    bool_0 = module_0.is_credit_card(enum_dict_0)


def test_case_7():
    str_0 = "=KUFMn!Ti_<eAP,<2("
    bool_0 = module_0.is_integer(str_0)


def test_case_8():
    str_0 = "\x0c`>k"
    bool_0 = module_0.is_decimal(str_0)


def test_case_9():
    str_0 = "="
    bool_0 = module_0.is_url(str_0)


def test_case_10():
    str_0 = "<%5A4oDI"
    bool_0 = module_0.is_integer(str_0)
    bool_1 = module_0.is_isbn_13(str_0)
    str_1 = ")%y\x0c\nu*9l{^\n1<f~d)"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_2 = i_s_b_n_checker_0.is_isbn_13()
    list_0 = []
    bool_3 = module_0.is_url(bool_2)
    bool_4 = module_0.is_ip_v4(list_0)


def test_case_11():
    str_0 = "}`5d^H|G"
    bool_0 = module_0.is_email(str_0)


def test_case_12():
    none_type_0 = None
    bool_0 = module_0.is_email(none_type_0)


def test_case_13():
    str_0 = "}`5d^H|G"
    bool_0 = module_0.is_credit_card(str_0)


def test_case_14():
    str_0 = "=KUFMn!Ti_<eAP,<2("
    bool_0 = module_0.is_camel_case(str_0)


def test_case_15():
    none_type_0 = None
    bool_0 = module_0.is_camel_case(none_type_0)


def test_case_16():
    str_0 = "}q`5^(H(|G"
    str_1 = "o\rtVf8"
    bool_0 = module_0.is_snake_case(str_0, str_1)
    bool_1 = module_0.is_email(str_0)


def test_case_17():
    none_type_0 = None
    bool_0 = module_0.is_snake_case(none_type_0)


def test_case_18():
    none_type_0 = None
    bool_0 = module_0.is_json(none_type_0)


def test_case_19():
    str_0 = "h8dbXMf?6mdP:,<Kjw"
    bool_0 = module_0.is_uuid(str_0)


def test_case_20():
    str_0 = "@\x0cO'x=PrDv?Y"
    bool_0 = module_0.is_ip(str_0)


def test_case_21():
    none_type_0 = None
    bool_0 = module_0.is_ip_v4(none_type_0)


def test_case_22():
    str_0 = "g"
    bool_0 = module_0.is_ip_v6(str_0)


def test_case_23():
    buffered_incremental_encoder_0 = module_2.BufferedIncrementalEncoder()
    bool_0 = module_0.is_ip_v6(buffered_incremental_encoder_0)


def test_case_24():
    str_0 = "xK"
    bool_0 = module_0.is_palindrome(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()
    int_0 = module_0.words_count(str_0)
    str_1 = "<"
    module_0.is_credit_card(str_1, str_1)


def test_case_25():
    tuple_0 = ()
    bool_0 = module_0.is_palindrome(tuple_0)


def test_case_26():
    str_0 = "xn3OI\\R"
    str_1 = "'4"
    bool_0 = module_0.is_integer(str_1)
    list_0 = [bool_0, bool_0, str_1]
    bool_1 = module_0.is_url(str_0, list_0)
    bool_2 = module_0.is_pangram(str_0)


def test_case_27():
    none_type_0 = None
    bool_0 = module_0.is_pangram(none_type_0)


def test_case_28():
    str_0 = "q+Rk?4V|Y\r\rJYy,~}"
    bool_0 = module_0.is_isogram(str_0)


def test_case_29():
    chain_map_0 = module_3.ChainMap()
    bool_0 = module_0.is_isogram(chain_map_0)


def test_case_30():
    float_0 = -997.64
    bool_0 = module_0.is_slug(float_0)


def test_case_31():
    str_0 = ":aL"
    bool_0 = module_0.contains_html(str_0)


def test_case_32():
    none_type_0 = None
    module_0.contains_html(none_type_0)


def test_case_33():
    str_0 = "}q`5^(H(|G"
    int_0 = module_0.words_count(str_0)


def test_case_34():
    str_0 = "'Hb{J^^ycw;"
    bool_0 = module_0.is_isbn_13(str_0)


def test_case_35():
    str_0 = "is_integer"
    bool_0 = False
    bool_1 = module_0.is_isbn(str_0, bool_0)


def test_case_36():
    str_0 = "dn,"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = module_0.is_url(str_0, list_0)


def test_case_37():
    str_0 = "_`SOwh\r,jw"
    bool_0 = module_0.is_integer(str_0)
    str_1 = "z\r\x0bi:@a03y}y 8FM9"
    str_2 = "mQ)$beR"
    str_3 = "Y.r`\ngUTt `)"
    bool_1 = module_0.is_isbn(str_3)
    bool_2 = module_0.is_decimal(str_2)
    bool_3 = module_0.is_email(str_0)
    str_4 = "1"
    bool_4 = module_0.is_isbn_10(str_4)
    bool_5 = module_0.is_email(bool_2)
    bool_6 = True
    bool_7 = module_0.is_palindrome(str_0, bool_6)
    bool_8 = module_0.is_snake_case(bool_3, str_1)
    bool_9 = module_0.is_email(str_1)
    str_5 = "#Tb^vaA$D"
    bool_10 = False
    bool_11 = module_0.is_isbn(str_5, bool_10)
    bool_12 = True
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_5, bool_12)
    bool_13 = module_0.is_email(bool_1)


def test_case_38():
    none_type_0 = None
    module_0.is_integer(none_type_0)


def test_case_39():
    list_0 = []
    str_0 = ""
    bool_0 = module_0.is_isbn(str_0)
    str_1 = "(<([a-z]+:)?[a-z]+[^>]*/?>|</([a-z]+:)?[a-z]+>|<!--.*-->|<!doctype.*>)"
    bool_1 = module_0.contains_html(str_1)
    chain_map_0 = module_3.ChainMap(*list_0)
    bool_2 = module_0.is_email(list_0)
    template_0 = module_4.Template(chain_map_0)
    str_2 = "^$"
    bool_3 = module_0.is_slug(str_2)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_4 = i_s_b_n_checker_0.is_isbn_13()
    bool_5 = module_0.is_isogram(template_0)
    bool_6 = True
    bool_7 = module_0.is_palindrome(bool_5, ignore_case=bool_6)
    bool_8 = i_s_b_n_checker_0.is_isbn_13()
    j_s_o_n_encoder_0 = module_5.JSONEncoder(ensure_ascii=bool_8)
    buffered_incremental_encoder_0 = module_2.BufferedIncrementalEncoder()
    bool_9 = module_0.is_url(template_0)
    bool_10 = module_0.is_isogram(bool_0)
    bool_11 = True
    bool_12 = module_0.is_uuid(bool_1, bool_11)


def test_case_40():
    str_0 = "}@5A^H\t;|G"
    bool_0 = module_0.is_email(str_0)


def test_case_41():
    str_0 = "="
    bool_0 = module_0.is_json(str_0)


def test_case_42():
    str_0 = "b;zF\no(`!U9>}!OPi0"
    bool_0 = module_0.is_decimal(str_0)
    bool_1 = module_0.is_integer(str_0)
    int_0 = 209
    bool_2 = module_0.is_uuid(int_0)
    str_1 = "<c`YuIzFX)Ml|p"
    bool_3 = module_0.is_slug(bool_2, str_1)
    bool_4 = module_0.is_snake_case(int_0)
    bool_5 = module_0.is_url(int_0)
    bool_6 = module_0.is_camel_case(bool_5)
    str_2 = "JB0v=fj"
    int_1 = module_0.words_count(str_2)
    str_3 = "?7w&T.f#9\\)X"
    list_0 = [str_3, str_1, str_1]
    bool_7 = module_0.is_url(int_0, list_0)
    bool_8 = module_0.is_isogram(str_2)
    bool_9 = module_0.is_ip(bool_0)
    str_4 = "|"
    bool_10 = module_0.is_isbn_13(str_4)
    str_5 = "e"
    bool_11 = module_0.is_email(str_5)
    bool_12 = module_0.is_email(bool_0)
    bool_13 = module_0.is_palindrome(str_4)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_14 = i_s_b_n_checker_0.is_isbn_13()


def test_case_43():
    str_0 = "b;zF\no(`!U9>}!OPi0"
    bool_0 = module_0.is_decimal(str_0)
    bool_1 = module_0.is_integer(str_0)
    int_0 = 209
    bool_2 = module_0.is_json(bool_0)
    bool_3 = module_0.is_uuid(int_0)
    str_1 = "<c`YuIzFX)Ml|p"
    bool_4 = module_0.is_slug(bool_3, str_1)
    bool_5 = module_0.is_snake_case(int_0)
    bool_6 = module_0.is_url(int_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_7 = i_s_b_n_checker_0.is_isbn_13()
    none_type_0 = None
    module_0.words_count(none_type_0)


def test_case_44():
    str_0 = "_`SOwh\r,jw"
    bool_0 = module_0.is_integer(str_0)
    str_1 = "mQ)$beR"
    str_2 = "Y.r`\ngUTt `)"
    bool_1 = module_0.is_isbn(str_2)
    bool_2 = module_0.is_decimal(str_1)
    bool_3 = module_0.is_email(str_0)
    str_3 = "5#7Ya+Xt\x0c\n.V_}w"
    str_4 = ""
    bool_4 = module_0.is_number(str_4)
    bool_5 = module_0.is_ip_v4(str_0)
    bool_6 = True
    bool_7 = module_0.is_palindrome(str_3, ignore_case=bool_6)
    bool_8 = module_0.is_snake_case(str_3)
    float_0 = 2300.21952
    bool_9 = module_0.is_email(float_0)
    str_5 = "%/0"
    bool_10 = module_0.is_isbn(str_5)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    tuple_0 = ()
    bool_11 = module_0.is_email(tuple_0)


def test_case_45():
    str_0 = "z\r\x0bi:@a03y}y 8FM9"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_13()
    str_1 = "mQ)beR"
    formatter_0 = module_4.Formatter()
    str_2 = "+;ZZ\t{ "
    bool_1 = module_0.is_number(str_2)
    bool_2 = module_0.is_email(str_1)
    str_3 = "T"
    bool_3 = module_0.is_ip_v4(str_1)
    str_4 = ""
    bool_4 = False
    bool_5 = module_0.is_isbn_10(str_3, bool_4)
    str_5 = "MP"
    none_type_0 = None
    bool_6 = module_0.is_camel_case(none_type_0)
    bool_7 = module_0.is_isbn_13(str_4)
    bool_8 = module_0.is_pangram(str_5)
    bool_9 = module_0.is_ip_v6(bool_5)
    str_6 = "a3<\x0bkM+fk9C"
    bool_10 = module_0.is_integer(str_6)
    str_7 = "6"
    bool_11 = module_0.is_integer(str_7)
    template_0 = module_4.Template(bool_0)
    bool_12 = module_0.is_credit_card(str_1)
    none_type_1 = None
    module_0.contains_html(none_type_1)


def test_case_46():
    str_0 = "_`SOwh\r,jwX"
    str_1 = "z\r\x0bi:@a03y}y 8FM9"
    str_2 = "W6+8atJ8h"
    bool_0 = module_0.is_isbn_10(str_2)
    bool_1 = module_0.is_url(bool_0)
    str_3 = "mQ)$beR"
    str_4 = "9.r`\ngUTt a`0"
    bool_2 = module_0.is_isbn(str_4)
    bool_3 = module_0.is_decimal(str_3)
    bool_4 = module_0.contains_html(str_4)
    bool_5 = module_0.is_email(str_0)
    bool_6 = module_0.is_isbn_10(str_3)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_4, bool_1)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_4)
    str_5 = "!w0a*I>\\?n\r>H(S7R>tg"
    bool_7 = module_0.is_ip(str_5)
    str_6 = "'?"
    bool_8 = module_0.is_isbn_13(str_6)
    bool_9 = module_0.is_email(str_1)
    bool_10 = module_0.is_integer(str_0)
    bool_11 = module_0.is_credit_card(bool_6, str_1)
    bool_12 = i_s_b_n_checker_0.is_isbn_13()
    str_7 = "~6v=]u7sV&\x0c`BlJ5m#"
    bool_13 = module_0.contains_html(str_7)
    bool_14 = module_0.is_json(bool_12)


def test_case_47():
    str_0 = "3"
    bool_0 = module_0.is_decimal(str_0)
    str_1 = "_`SOwh\r,jw"
    bool_1 = module_0.is_integer(str_1)
    str_2 = "z\r\x0bi:@a03y}y 8FM9"
    bool_2 = module_0.is_url(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    chain_map_0 = module_3.ChainMap()
    bool_3 = module_0.is_decimal(str_1)
    bool_4 = module_0.is_credit_card(str_1)
    str_3 = "[rNI+.uI_^?"
    bool_5 = module_0.is_email(str_3)
    bool_6 = module_0.is_ip_v4(i_s_b_n_checker_0)
    str_4 = "C"
    bool_7 = module_0.is_isbn_10(str_4)
    bool_8 = module_0.is_email(bool_7)
    str_5 = "!w_a*Id\\?n\r>H(S7RDtg"
    bool_9 = module_0.is_ip(bool_5)
    str_6 = "=XHd\t4C+r=Tg`"
    bool_10 = module_0.is_isbn_13(str_6, bool_8)
    none_type_0 = None
    bool_11 = module_0.is_email(none_type_0)
    str_7 = "5"
    bool_12 = module_0.is_palindrome(str_7)
    bool_13 = module_0.is_integer(str_0)
    bool_14 = module_0.is_json(str_5)


def test_case_48():
    str_0 = "\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    "
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_url(str_0)
    bool_2 = module_0.is_email(str_0)
    bool_3 = False
    bool_4 = module_0.is_email(bool_3)
    bool_5 = module_0.is_pangram(bool_0)
    bool_6 = module_0.is_number(str_0)
    bool_7 = module_0.is_ip_v6(bool_6)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_0, bool_3)
    bool_8 = module_0.is_uuid(i_s_b_n_checker_1)
    builtin_importer_0 = module_6.BuiltinImporter()
    builtin_importer_0.create_module(bool_3)


def test_case_49():
    str_0 = ".K4[5"
    bool_0 = module_0.is_integer(str_0)
    str_1 = "TW\x0bPVFANb\x0bme"
    bool_1 = module_0.is_url(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_2 = module_0.is_credit_card(str_0)
    str_2 = "5#7Ya+Xt\x0c\n.V_}"
    list_0 = [str_2, str_0, str_1]
    bool_3 = module_0.is_url(str_2, list_0)
    bool_4 = module_0.is_email(str_1)
    bool_5 = module_0.is_ip_v4(i_s_b_n_checker_0)
    bool_6 = module_0.is_slug(bool_2, str_1)
    bool_7 = module_0.is_ip(str_0)
    str_3 = "C"
    bool_8 = module_0.is_isbn_10(str_3)
    str_4 = "!w_a*Id\\?n\r>H(N7RDtg"
    bool_9 = module_0.is_ip(bool_4)
    str_5 = "=XHd\t4C+r=Tg`"
    bool_10 = module_0.is_isbn_13(str_5, bool_0)
    bool_11 = module_0.is_email(str_0)
    bool_12 = module_0.is_email(str_1)
    bool_13 = module_0.is_palindrome(str_2, ignore_case=bool_6)
    str_6 = 'B|j"k>2_\t\t'
    bool_14 = module_0.is_isogram(bool_7)
    bool_15 = module_0.is_isogram(str_5)
    bool_16 = module_0.is_isbn(str_6)
    bool_17 = module_0.is_slug(str_4)
    bool_18 = module_0.is_full_string(bool_5)
    bool_19 = i_s_b_n_checker_0.is_isbn_10()
    bool_20 = module_0.is_json(str_2)


def test_case_50():
    str_0 = ";g#$Nj7*Hr<>7"
    bool_0 = module_0.is_integer(str_0)
    str_1 = "h;<UKE{O?=x..d-SD>w@"
    bool_1 = module_0.is_credit_card(str_0)
    str_2 = "#7Ya+Xt\x0c._"
    list_0 = [str_2, str_0, str_1]
    bool_2 = module_0.is_url(str_2, list_0)
    bool_3 = module_0.is_email(str_1)
    bool_4 = module_0.is_ip_v4(str_1)
    bool_5 = module_0.is_slug(bool_1, str_2)
    bool_6 = module_0.is_isbn_10(str_0)
    str_3 = "!w_a*Id\\?n\r>H(N7RDtg"
    bool_7 = module_0.is_ip(bool_3)
    str_4 = "=XHd\t4C+r=Tg`"
    bool_8 = module_0.is_isbn_13(str_4, bool_0)
    bool_9 = module_0.is_email(str_0)
    bool_10 = module_0.is_email(str_1)
    bool_11 = module_0.is_palindrome(str_2, ignore_case=bool_5)
    str_5 = 'B|j"k>2_\t\t'
    bool_12 = module_0.is_isogram(bool_1)
    str_6 = "zYfP\\zNBiSw:.mmil["
    bool_13 = module_0.is_isbn(str_6)
    bool_14 = module_0.is_isogram(str_4)
    bool_15 = module_0.is_isbn(str_5)
    bool_16 = module_0.is_slug(str_3)
    bool_17 = module_0.is_json(str_2)


def test_case_51():
    str_0 = "@zR$LCzM(IE\x0bZi\x0c\x0bC,a\x0b"
    bool_0 = module_0.is_integer(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()
    bool_2 = module_0.is_string(i_s_b_n_checker_0)
    str_1 = ";"
    list_0 = [str_1, str_0, str_0]
    bool_3 = module_0.is_url(str_1, list_0)
    bool_4 = module_0.is_email(str_1)
    bool_5 = module_0.is_ip_v4(str_1)
    str_2 = "%I"
    bool_6 = True
    bool_7 = module_0.is_uuid(bool_1)
    bool_8 = module_0.is_isbn_13(str_1, bool_6)
    bool_9 = module_0.is_slug(bool_5, str_2)
    bool_10 = module_0.is_isbn_10(str_0)
    str_3 = "H(t5:^+g }Yg.@k7[-by"
    bool_11 = module_0.is_ip(bool_4)
    str_4 = "=XHd\t4C+r=Tg`"
    bool_12 = module_0.is_isbn_13(str_4, bool_0)
    bool_13 = module_0.is_email(str_0)
    bool_14 = module_0.is_email(str_3)
    str_5 = "%"
    bool_15 = module_0.is_palindrome(str_1, ignore_case=bool_9)
    str_6 = 'B|j"k>2_\t\t'
    bool_16 = i_s_b_n_checker_0.is_isbn_10()
    bool_17 = module_0.is_isogram(bool_5)
    bool_18 = module_0.is_isbn(str_2)
    bool_19 = module_0.is_isogram(str_4)
    bool_20 = module_0.is_isbn(str_6)
    bool_21 = module_0.is_url(str_5)
    bool_22 = module_0.is_slug(str_3)
    bool_23 = module_0.is_full_string(bool_14)
    bool_24 = module_0.is_json(str_1)


def test_case_52():
    str_0 = "\x0c[>mX~g=af]"
    error_0 = module_7.error(str_0, pos=str_0)
    bool_0 = module_0.is_json(str_0)
    bool_1 = module_0.is_json(str_0)
    dict_0 = {str_0: error_0, str_0: error_0, str_0: str_0}
    j_s_o_n_decoder_0 = module_8.JSONDecoder(
        parse_int=str_0, parse_constant=dict_0, strict=error_0
    )
    bool_2 = module_0.is_url(j_s_o_n_decoder_0)
    bool_3 = module_0.is_ip(dict_0)
    module_2.CodecInfo(**dict_0)
