# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.json_registration_protocol as module_0
import wolk_gateway_module.model.device_registration_request as module_1

def test_case_0():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'

def test_case_1():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'
    str_0 = json_registration_protocol_0.__repr__()
    assert str_0 == 'JsonRegistrationProtocol()'
    device_registration_request_0 = module_1.DeviceRegistrationRequest(str_0, str_0, default_binding=str_0)
    assert device_registration_request_0.name == 'JsonRegistrationProtocol()'
    assert device_registration_request_0.key == 'JsonRegistrationProtocol()'
    assert device_registration_request_0.default_binding == 'JsonRegistrationProtocol()'
    message_0 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/register_subdevice_request/d/JsonRegistrationProtocol()'
    assert message_0.payload == '{"name": "JsonRegistrationProtocol()", "deviceKey": "JsonRegistrationProtocol()", "defaultBinding": "JsonRegistrationProtocol()", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'

@pytest.mark.xfail(strict=True)
def test_case_2():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'
    str_0 = json_registration_protocol_0.__repr__()
    assert str_0 == 'JsonRegistrationProtocol()'
    device_registration_request_0 = module_1.DeviceRegistrationRequest(str_0, str_0, default_binding=str_0)
    assert device_registration_request_0.name == 'JsonRegistrationProtocol()'
    assert device_registration_request_0.key == 'JsonRegistrationProtocol()'
    assert device_registration_request_0.default_binding == 'JsonRegistrationProtocol()'
    message_0 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/register_subdevice_request/d/JsonRegistrationProtocol()'
    assert message_0.payload == '{"name": "JsonRegistrationProtocol()", "deviceKey": "JsonRegistrationProtocol()", "defaultBinding": "JsonRegistrationProtocol()", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'
    json_registration_protocol_0.get_inbound_topics_for_device(json_registration_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'
    str_0 = ' is not a member of ActuatorState!'
    json_registration_protocol_1 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_1.log).__module__}.{type(json_registration_protocol_1.log).__qualname__}' == 'logging.Logger'
    device_registration_request_0 = module_1.DeviceRegistrationRequest(str_0, str_0, default_binding=str_0)
    message_0 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/register_subdevice_request/d/ is not a member of ActuatorState!'
    assert message_0.payload == '{"name": " is not a member of ActuatorState!", "deviceKey": " is not a member of ActuatorState!", "defaultBinding": " is not a member of ActuatorState!", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'
    str_1 = json_registration_protocol_1.extract_key_from_message(message_0)
    assert str_1 == ' is not a member of ActuatorState!'
    json_registration_protocol_0.make_registration_response(message_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'
    str_0 = ' is not a member of ActuatorState!'
    device_registration_request_0 = module_1.DeviceRegistrationRequest(str_0, str_0, default_binding=str_0)
    message_0 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/register_subdevice_request/d/ is not a member of ActuatorState!'
    assert message_0.payload == '{"name": " is not a member of ActuatorState!", "deviceKey": " is not a member of ActuatorState!", "defaultBinding": " is not a member of ActuatorState!", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'
    bool_0 = json_registration_protocol_0.is_registration_response_message(message_0)
    assert bool_0 is False
    list_0 = json_registration_protocol_0.get_inbound_topics_for_device(str_0)
    json_registration_protocol_0.make_registration_response(message_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'
    str_0 = ' is not a member of ActuatorState!'
    device_registration_request_0 = module_1.DeviceRegistrationRequest(str_0, str_0, default_binding=str_0)
    message_0 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/register_subdevice_request/d/ is not a member of ActuatorState!'
    assert message_0.payload == '{"name": " is not a member of ActuatorState!", "deviceKey": " is not a member of ActuatorState!", "defaultBinding": " is not a member of ActuatorState!", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'
    message_1 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert message_1.topic == 'd2p/register_subdevice_request/d/ is not a member of ActuatorState!'
    assert message_1.payload == '{"name": " is not a member of ActuatorState!", "deviceKey": " is not a member of ActuatorState!", "defaultBinding": " is not a member of ActuatorState!", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'
    json_registration_protocol_0.make_registration_response(message_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    json_registration_protocol_0 = module_0.JsonRegistrationProtocol()
    assert f'{type(json_registration_protocol_0).__module__}.{type(json_registration_protocol_0).__qualname__}' == 'wolk_gateway_module.json_registration_protocol.JsonRegistrationProtocol'
    assert f'{type(json_registration_protocol_0.log).__module__}.{type(json_registration_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonRegistrationProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonRegistrationProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_REQUEST_TOPIC_ROOT == 'd2p/register_subdevice_request/'
    assert module_0.JsonRegistrationProtocol.DEVICE_REGISTRATION_RESPONSE_TOPIC_ROOT == 'p2d/register_subdevice_response/'
    str_0 = ' is not a member of ActuatorState!'
    device_registration_request_0 = module_1.DeviceRegistrationRequest(str_0, str_0, default_binding=str_0)
    message_0 = json_registration_protocol_0.make_registration_message(device_registration_request_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/register_subdevice_request/d/ is not a member of ActuatorState!'
    assert message_0.payload == '{"name": " is not a member of ActuatorState!", "deviceKey": " is not a member of ActuatorState!", "defaultBinding": " is not a member of ActuatorState!", "typeParameters": {}, "connectivityParameters": {}, "firmwareUpdateType": "", "sensors": [], "actuators": [], "alarms": [], "configurations": [], "firmwareUpdateParameters": {"supportsFirmwareUpdate": false}}'
    json_registration_protocol_0.make_registration_response(message_0)