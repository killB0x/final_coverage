# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.json_firmware_update_protocol as module_0

def test_case_0():
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'

@pytest.mark.xfail(strict=True)
def test_case_1():
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'
    str_0 = json_firmware_update_protocol_0.__repr__()
    assert str_0 == 'JsonFirmwareUpdateProtocol()'
    json_firmware_update_protocol_0.extract_key_from_message(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'
    json_firmware_update_protocol_0.get_inbound_topics_for_device(json_firmware_update_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'
    json_firmware_update_protocol_0.make_version_message(json_firmware_update_protocol_0, json_firmware_update_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'
    json_firmware_update_protocol_0.is_firmware_abort_command(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'
    json_firmware_update_protocol_0.is_firmware_install_command(json_firmware_update_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    json_firmware_update_protocol_0 = module_0.JsonFirmwareUpdateProtocol()
    assert f'{type(json_firmware_update_protocol_0).__module__}.{type(json_firmware_update_protocol_0).__qualname__}' == 'wolk_gateway_module.json_firmware_update_protocol.JsonFirmwareUpdateProtocol'
    assert f'{type(json_firmware_update_protocol_0.log).__module__}.{type(json_firmware_update_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonFirmwareUpdateProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_INSTALL_TOPIC_ROOT == 'p2d/firmware_update_install/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_ABORT_TOPIC_ROOT == 'p2d/firmware_update_abort/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_UPDATE_STATUS_TOPIC_ROOT == 'd2p/firmware_update_status/'
    assert module_0.JsonFirmwareUpdateProtocol.FIRMWARE_VERSION_UPDATE_TOPIC_ROOT == 'd2p/firmware_version_update/'
    json_firmware_update_protocol_0.make_firmware_file_path(json_firmware_update_protocol_0)