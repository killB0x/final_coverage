# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.model.data_type as module_0
import wolk_gateway_module.model.configuration_template as module_1

def test_case_0():
    str_0 = '<oLWf23ja'
    str_1 = 'T&\x0bD.'
    data_type_0 = module_0.DataType.BOOLEAN
    bool_0 = False
    with pytest.raises(ValueError):
        module_1.ConfigurationTemplate(str_0, str_1, data_type_0, size=bool_0, minimum=bool_0)

def test_case_1():
    str_0 = '1gkW&tgZ.cRGD!n/dZ"'
    data_type_0 = module_0.DataType.STRING
    configuration_template_0 = module_1.ConfigurationTemplate(str_0, str_0, data_type_0)
    assert f'{type(configuration_template_0).__module__}.{type(configuration_template_0).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_0.name == '1gkW&tgZ.cRGD!n/dZ"'
    assert configuration_template_0.reference == '1gkW&tgZ.cRGD!n/dZ"'
    assert configuration_template_0.description is None
    assert configuration_template_0.minimum is None
    assert configuration_template_0.maximum is None
    assert configuration_template_0.default_value is None
    assert configuration_template_0.size == 1
    assert configuration_template_0.labels is None
    assert configuration_template_0.data_type == module_0.DataType.STRING
    dict_0 = configuration_template_0.to_dto()

def test_case_2():
    complex_0 = (-2295+564.86j)
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    str_0 = 'Error occurred when sending actuator status for device '
    data_type_0 = module_0.DataType.NUMERIC
    int_0 = -318
    configuration_template_0 = module_1.ConfigurationTemplate(list_0, str_0, data_type_0, default_value=str_0, minimum=int_0, maximum=int_0)
    assert f'{type(configuration_template_0).__module__}.{type(configuration_template_0).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_0.name == [(-2295+564.86j), (-2295+564.86j), (-2295+564.86j), (-2295+564.86j)]
    assert configuration_template_0.reference == 'Error occurred when sending actuator status for device '
    assert configuration_template_0.description is None
    assert configuration_template_0.minimum == -318
    assert configuration_template_0.maximum == -318
    assert configuration_template_0.default_value == 'Error occurred when sending actuator status for device '
    assert configuration_template_0.size == 1
    assert configuration_template_0.labels is None
    assert configuration_template_0.data_type == module_0.DataType.NUMERIC
    dict_0 = configuration_template_0.to_dto()
    none_type_0 = None
    str_1 = '7E}{Hj:IDuX1P'
    with pytest.raises(ValueError):
        module_1.ConfigurationTemplate(none_type_0, str_1, str_1, default_value=str_1, maximum=none_type_0)

def test_case_3():
    str_0 = '%w{(\nXB<f#{5{wI\x0b>'
    data_type_0 = module_0.DataType.BOOLEAN
    float_0 = 776.106006
    configuration_template_0 = module_1.ConfigurationTemplate(str_0, str_0, data_type_0, minimum=float_0)
    assert f'{type(configuration_template_0).__module__}.{type(configuration_template_0).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_0.name == '%w{(\nXB<f#{5{wI\x0b>'
    assert configuration_template_0.reference == '%w{(\nXB<f#{5{wI\x0b>'
    assert configuration_template_0.description is None
    assert configuration_template_0.minimum == pytest.approx(776.106006, abs=0.01, rel=0.01)
    assert configuration_template_0.maximum is None
    assert configuration_template_0.default_value is None
    assert configuration_template_0.size == 1
    assert configuration_template_0.labels is None
    assert configuration_template_0.data_type == module_0.DataType.BOOLEAN
    dict_0 = configuration_template_0.to_dto()

def test_case_4():
    str_0 = 'xn$O'
    str_1 = '\n        Handle when the client receives a CONNACK response from the server.\n\n        :param client: Client that received the message\n        :type client: paho.mqtt.Client\n        :param userdata: private user data set in Client()\n        :type userdata: str\n        :param flags: Response flags sent by the broker\n        :type flags: int\n        :param rc: Connection result\n        :type rc: int\n        '
    data_type_0 = module_0.DataType.STRING
    none_type_0 = None
    configuration_template_0 = module_1.ConfigurationTemplate(str_0, str_1, data_type_0, default_value=none_type_0, minimum=data_type_0)
    assert f'{type(configuration_template_0).__module__}.{type(configuration_template_0).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_0.name == 'xn$O'
    assert configuration_template_0.reference == '\n        Handle when the client receives a CONNACK response from the server.\n\n        :param client: Client that received the message\n        :type client: paho.mqtt.Client\n        :param userdata: private user data set in Client()\n        :type userdata: str\n        :param flags: Response flags sent by the broker\n        :type flags: int\n        :param rc: Connection result\n        :type rc: int\n        '
    assert configuration_template_0.description is None
    assert configuration_template_0.minimum == module_0.DataType.STRING
    assert configuration_template_0.maximum is None
    assert configuration_template_0.default_value is None
    assert configuration_template_0.size == 1
    assert configuration_template_0.labels is None
    assert configuration_template_0.data_type == module_0.DataType.STRING
    str_2 = configuration_template_0.__repr__()
    assert str_2 == "ConfigurationTemplate(name='xn$O', reference='\n        Handle when the client receives a CONNACK response from the server.\n\n        :param client: Client that received the message\n        :type client: paho.mqtt.Client\n        :param userdata: private user data set in Client()\n        :type userdata: str\n        :param flags: Response flags sent by the broker\n        :type flags: int\n        :param rc: Connection result\n        :type rc: int\n        ', description='None', data_type='DataType.STRING', minimum='DataType.STRING', maximum='None')default_value='None', size='1', labels='None')"

def test_case_5():
    str_0 = '8ab\r`~C-JxI'
    data_type_0 = module_0.DataType.NUMERIC
    none_type_0 = None
    int_0 = 2172
    with pytest.raises(ValueError):
        module_1.ConfigurationTemplate(str_0, none_type_0, data_type_0, size=int_0)

def test_case_6():
    str_0 = "Received firmware installation status message '"
    str_1 = '|\x0c{/chdQ$wh2O8?II1'
    str_2 = "6uS6k:#j\x0c/'\x0c"
    list_0 = [str_1, str_2]
    with pytest.raises(ValueError):
        module_1.ConfigurationTemplate(str_0, str_1, str_0, labels=list_0)

def test_case_7():
    str_0 = "@K,'htL$Dcr "
    data_type_0 = module_0.DataType.NUMERIC
    str_1 = ''
    configuration_template_0 = module_1.ConfigurationTemplate(str_1, str_0, data_type_0, default_value=str_1)
    assert f'{type(configuration_template_0).__module__}.{type(configuration_template_0).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_0.name == ''
    assert configuration_template_0.reference == "@K,'htL$Dcr "
    assert configuration_template_0.description is None
    assert configuration_template_0.minimum is None
    assert configuration_template_0.maximum is None
    assert configuration_template_0.default_value == ''
    assert configuration_template_0.size == 1
    assert configuration_template_0.labels is None
    assert configuration_template_0.data_type == module_0.DataType.NUMERIC
    str_2 = configuration_template_0.__repr__()
    assert str_2 == "ConfigurationTemplate(name='', reference='@K,'htL$Dcr ', description='None', data_type='DataType.NUMERIC', minimum='None', maximum='None')default_value='', size='1', labels='None')"
    dict_0 = configuration_template_0.to_dto()
    str_3 = '\\Q++'
    dict_1 = configuration_template_0.to_dto()
    data_type_1 = module_0.DataType.NUMERIC
    str_4 = '<L'
    int_0 = 3
    with pytest.raises(ValueError):
        module_1.ConfigurationTemplate(str_3, str_4, data_type_1, size=int_0)

def test_case_8():
    str_0 = 'IYj\twYXeE'
    str_1 = '~,<&%k1k'
    data_type_0 = module_0.DataType.NUMERIC
    int_0 = 3
    configuration_template_0 = module_1.ConfigurationTemplate(str_0, str_1, data_type_0, maximum=int_0)
    assert f'{type(configuration_template_0).__module__}.{type(configuration_template_0).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_0.name == 'IYj\twYXeE'
    assert configuration_template_0.reference == '~,<&%k1k'
    assert configuration_template_0.description is None
    assert configuration_template_0.minimum is None
    assert configuration_template_0.maximum == 3
    assert configuration_template_0.default_value is None
    assert configuration_template_0.size == 1
    assert configuration_template_0.labels is None
    assert configuration_template_0.data_type == module_0.DataType.NUMERIC
    str_2 = configuration_template_0.__repr__()
    assert str_2 == "ConfigurationTemplate(name='IYj\twYXeE', reference='~,<&%k1k', description='None', data_type='DataType.NUMERIC', minimum='None', maximum='3')default_value='None', size='1', labels='None')"
    dict_0 = configuration_template_0.to_dto()
    str_3 = '[N\n"Mmj'
    data_type_1 = module_0.DataType.BOOLEAN
    configuration_template_1 = module_1.ConfigurationTemplate(str_3, str_3, data_type_1, minimum=str_3)
    assert configuration_template_1.size == 1
    str_4 = configuration_template_1.__repr__()
    assert str_4 == 'ConfigurationTemplate(name=\'[N\n"Mmj\', reference=\'[N\n"Mmj\', description=\'None\', data_type=\'DataType.BOOLEAN\', minimum=\'[N\n"Mmj\', maximum=\'None\')default_value=\'None\', size=\'1\', labels=\'None\')'
    dict_1 = configuration_template_1.to_dto()
    dict_2 = configuration_template_0.to_dto()
    str_5 = 'bNj2jSx[(,\\e\t\rPE'
    str_6 = 'jl^?Sl;|;\x0bvM/nl[=[\x0b['
    list_0 = [str_5, str_6]
    configuration_template_2 = module_1.ConfigurationTemplate(str_1, str_4, data_type_1, size=int_0, labels=list_0)
    assert f'{type(configuration_template_2).__module__}.{type(configuration_template_2).__qualname__}' == 'wolk_gateway_module.model.configuration_template.ConfigurationTemplate'
    assert configuration_template_2.name == '~,<&%k1k'
    assert configuration_template_2.reference == 'ConfigurationTemplate(name=\'[N\n"Mmj\', reference=\'[N\n"Mmj\', description=\'None\', data_type=\'DataType.BOOLEAN\', minimum=\'[N\n"Mmj\', maximum=\'None\')default_value=\'None\', size=\'1\', labels=\'None\')'
    assert configuration_template_2.description is None
    assert configuration_template_2.minimum is None
    assert configuration_template_2.maximum is None
    assert configuration_template_2.default_value is None
    assert configuration_template_2.size == 3
    assert configuration_template_2.labels == ['bNj2jSx[(,\\e\t\rPE', 'jl^?Sl;|;\x0bvM/nl[=[\x0b[']
    assert configuration_template_2.data_type == module_0.DataType.BOOLEAN
    dict_3 = configuration_template_2.to_dto()
    str_7 = 'vWwE'
    str_8 = 'K<r}\t9n'
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.ConfigurationTemplate(str_7, str_8, none_type_0, str_2, labels=configuration_template_2)