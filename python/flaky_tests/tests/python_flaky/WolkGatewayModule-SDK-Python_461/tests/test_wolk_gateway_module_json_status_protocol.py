# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.json_status_protocol as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    json_status_protocol_0 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_0).__module__}.{type(json_status_protocol_0).__qualname__}' == 'wolk_gateway_module.json_status_protocol.JsonStatusProtocol'
    assert f'{type(json_status_protocol_0.log).__module__}.{type(json_status_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonStatusProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_UPDATE_TOPIC_ROOT == 'd2p/subdevice_status_update/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_RESPONSE_TOPIC_ROOT == 'd2p/subdevice_status_response/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_REQUEST_TOPIC_ROOT == 'p2d/subdevice_status_request/'
    assert module_0.JsonStatusProtocol.LAST_WILL_TOPIC == 'lastwill'
    json_status_protocol_0.is_device_status_request_message(json_status_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    json_status_protocol_0 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_0).__module__}.{type(json_status_protocol_0).__qualname__}' == 'wolk_gateway_module.json_status_protocol.JsonStatusProtocol'
    assert f'{type(json_status_protocol_0.log).__module__}.{type(json_status_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonStatusProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_UPDATE_TOPIC_ROOT == 'd2p/subdevice_status_update/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_RESPONSE_TOPIC_ROOT == 'd2p/subdevice_status_response/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_REQUEST_TOPIC_ROOT == 'p2d/subdevice_status_request/'
    assert module_0.JsonStatusProtocol.LAST_WILL_TOPIC == 'lastwill'
    str_0 = json_status_protocol_0.__repr__()
    assert str_0 == 'JsonStatusProtocol()'
    json_status_protocol_0.get_inbound_topics_for_device(json_status_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    json_status_protocol_0 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_0).__module__}.{type(json_status_protocol_0).__qualname__}' == 'wolk_gateway_module.json_status_protocol.JsonStatusProtocol'
    assert f'{type(json_status_protocol_0.log).__module__}.{type(json_status_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonStatusProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_UPDATE_TOPIC_ROOT == 'd2p/subdevice_status_update/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_RESPONSE_TOPIC_ROOT == 'd2p/subdevice_status_response/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_REQUEST_TOPIC_ROOT == 'p2d/subdevice_status_request/'
    assert module_0.JsonStatusProtocol.LAST_WILL_TOPIC == 'lastwill'
    str_0 = 'Mx'
    json_status_protocol_0.make_device_status_response_message(str_0, json_status_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    json_status_protocol_0 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_0).__module__}.{type(json_status_protocol_0).__qualname__}' == 'wolk_gateway_module.json_status_protocol.JsonStatusProtocol'
    assert f'{type(json_status_protocol_0.log).__module__}.{type(json_status_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonStatusProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_UPDATE_TOPIC_ROOT == 'd2p/subdevice_status_update/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_RESPONSE_TOPIC_ROOT == 'd2p/subdevice_status_response/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_REQUEST_TOPIC_ROOT == 'p2d/subdevice_status_request/'
    assert module_0.JsonStatusProtocol.LAST_WILL_TOPIC == 'lastwill'
    str_0 = '9.|F>}/w@t.&v9'
    list_0 = json_status_protocol_0.get_inbound_topics_for_device(str_0)
    json_status_protocol_1 = module_0.JsonStatusProtocol()
    json_status_protocol_0.make_device_status_update_message(str_0, json_status_protocol_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    json_status_protocol_0 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_0).__module__}.{type(json_status_protocol_0).__qualname__}' == 'wolk_gateway_module.json_status_protocol.JsonStatusProtocol'
    assert f'{type(json_status_protocol_0.log).__module__}.{type(json_status_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonStatusProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_UPDATE_TOPIC_ROOT == 'd2p/subdevice_status_update/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_RESPONSE_TOPIC_ROOT == 'd2p/subdevice_status_response/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_REQUEST_TOPIC_ROOT == 'p2d/subdevice_status_request/'
    assert module_0.JsonStatusProtocol.LAST_WILL_TOPIC == 'lastwill'
    str_0 = json_status_protocol_0.__repr__()
    assert str_0 == 'JsonStatusProtocol()'
    json_status_protocol_1 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_1.log).__module__}.{type(json_status_protocol_1.log).__qualname__}' == 'logging.Logger'
    json_status_protocol_0.make_last_will_message(json_status_protocol_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    json_status_protocol_0 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_0).__module__}.{type(json_status_protocol_0).__qualname__}' == 'wolk_gateway_module.json_status_protocol.JsonStatusProtocol'
    assert f'{type(json_status_protocol_0.log).__module__}.{type(json_status_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonStatusProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_UPDATE_TOPIC_ROOT == 'd2p/subdevice_status_update/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_RESPONSE_TOPIC_ROOT == 'd2p/subdevice_status_response/'
    assert module_0.JsonStatusProtocol.DEVICE_STATUS_REQUEST_TOPIC_ROOT == 'p2d/subdevice_status_request/'
    assert module_0.JsonStatusProtocol.LAST_WILL_TOPIC == 'lastwill'
    json_status_protocol_1 = module_0.JsonStatusProtocol()
    assert f'{type(json_status_protocol_1.log).__module__}.{type(json_status_protocol_1.log).__qualname__}' == 'logging.Logger'
    json_status_protocol_1.extract_key_from_message(json_status_protocol_1)