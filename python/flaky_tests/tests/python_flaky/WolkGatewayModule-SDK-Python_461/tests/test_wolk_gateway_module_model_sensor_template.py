# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.model.data_type as module_0
import wolk_gateway_module.model.sensor_template as module_1
import wolk_gateway_module.model.reading_type_measurement_unit as module_2
import wolk_gateway_module.model.reading_type_name as module_3

def test_case_0():
    data_type_0 = module_0.DataType.STRING
    sensor_template_0 = module_1.SensorTemplate(data_type_0, data_type_0, data_type_0, unit=data_type_0, maximum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == module_0.DataType.STRING
    assert sensor_template_0.reference == module_0.DataType.STRING
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum == module_0.DataType.STRING
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'

def test_case_1():
    str_0 = 't<a2tp'
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_0, str_0, reading_type_name=str_0)

def test_case_2():
    data_type_0 = module_0.DataType.STRING
    sensor_template_0 = module_1.SensorTemplate(data_type_0, data_type_0, data_type_0, unit=data_type_0, maximum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == module_0.DataType.STRING
    assert sensor_template_0.reference == module_0.DataType.STRING
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum == module_0.DataType.STRING
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()

def test_case_3():
    str_0 = '6!L.H-h\\S3\\\tOF~xa'
    data_type_0 = module_0.DataType.STRING
    sensor_template_0 = module_1.SensorTemplate(str_0, str_0, data_type_0, minimum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == '6!L.H-h\\S3\\\tOF~xa'
    assert sensor_template_0.reference == '6!L.H-h\\S3\\\tOF~xa'
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum == module_0.DataType.STRING
    assert sensor_template_0.maximum is None
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()
    str_1 = sensor_template_0.__repr__()
    assert str_1 == "SensorTemplate(name='6!L.H-h\\S3\\\tOF~xa', reference='6!L.H-h\\S3\\\tOF~xa', description='None', unit='ReadingType(name='ReadingTypeName.GENERIC_TEXT', unit='ReadingTypeMeasurementUnit.NUMERIC')', minimum='DataType.STRING', maximum='None')"

def test_case_4():
    str_0 = 'info'
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_0, str_0)

def test_case_5():
    str_0 = 'X10%'
    data_type_0 = module_0.DataType.STRING
    str_1 = 'pxl5[e |CL?\\0'
    int_0 = 1117
    sensor_template_0 = module_1.SensorTemplate(str_1, str_0, data_type_0, maximum=int_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == 'pxl5[e |CL?\\0'
    assert sensor_template_0.reference == 'X10%'
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum == 1117
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    str_2 = sensor_template_0.__repr__()
    assert str_2 == "SensorTemplate(name='pxl5[e |CL?\\0', reference='X10%', description='None', unit='ReadingType(name='ReadingTypeName.GENERIC_TEXT', unit='ReadingTypeMeasurementUnit.NUMERIC')', minimum='None', maximum='1117')"
    dict_0 = sensor_template_0.to_dto()
    reading_type_measurement_unit_0 = module_2.ReadingTypeMeasurementUnit.SPEED_OF_LIGHT
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_1, str_2, str_1, unit=reading_type_measurement_unit_0)

def test_case_6():
    str_0 = 'k`3|5G\x0b;X'
    str_1 = 'Y_#W`#c&B6UZAA('
    bool_0 = False
    data_type_0 = module_0.DataType.NUMERIC
    none_type_0 = None
    sensor_template_0 = module_1.SensorTemplate(bool_0, str_1, data_type_0, unit=none_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name is False
    assert sensor_template_0.reference == 'Y_#W`#c&B6UZAA('
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum is None
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_0, str_1, unit=str_0, description=str_0, maximum=bool_0)

def test_case_7():
    data_type_0 = module_0.DataType.NUMERIC
    sensor_template_0 = module_1.SensorTemplate(data_type_0, data_type_0, data_type_0, unit=data_type_0, maximum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == module_0.DataType.NUMERIC
    assert sensor_template_0.reference == module_0.DataType.NUMERIC
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum == module_0.DataType.NUMERIC
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()

def test_case_8():
    str_0 = '}&-nm^XUN-8'
    str_1 = 'UopL5M)'
    reading_type_name_0 = module_3.ReadingTypeName.FREQUENCY
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_1, str_0, reading_type_name=reading_type_name_0, unit=str_1)

def test_case_9():
    data_type_0 = module_0.DataType.BOOLEAN
    sensor_template_0 = module_1.SensorTemplate(data_type_0, data_type_0, data_type_0, unit=data_type_0, maximum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == module_0.DataType.BOOLEAN
    assert sensor_template_0.reference == module_0.DataType.BOOLEAN
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum == module_0.DataType.BOOLEAN
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()

def test_case_10():
    str_0 = 'y'
    str_1 = 'V:#jD,k=fOhT:sJjR\x0b}'
    reading_type_name_0 = module_3.ReadingTypeName.ACCELEROMETER
    reading_type_measurement_unit_0 = module_2.ReadingTypeMeasurementUnit.METRE
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_0, str_1, reading_type_name=reading_type_name_0, unit=reading_type_measurement_unit_0, description=reading_type_measurement_unit_0)

def test_case_11():
    str_0 = 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    data_type_0 = module_0.DataType.STRING
    sensor_template_0 = module_1.SensorTemplate(str_0, str_0, data_type_0, minimum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    assert sensor_template_0.reference == 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum == module_0.DataType.STRING
    assert sensor_template_0.maximum is None
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()

def test_case_12():
    str_0 = 'Handle messages rrceived from WolkGateway.\n\n        :param message: Message received\n        :type meEsage: Message\n        '
    data_type_0 = module_0.DataType.STRING
    sensor_template_0 = module_1.SensorTemplate(data_type_0, str_0, data_type_0, description=str_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == module_0.DataType.STRING
    assert sensor_template_0.reference == 'Handle messages rrceived from WolkGateway.\n\n        :param message: Message received\n        :type meEsage: Message\n        '
    assert sensor_template_0.description == 'Handle messages rrceived from WolkGateway.\n\n        :param message: Message received\n        :type meEsage: Message\n        '
    assert sensor_template_0.minimum is None
    assert sensor_template_0.maximum is None
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()

def test_case_13():
    str_0 = 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    data_type_0 = module_0.DataType.STRING
    sensor_template_0 = module_1.SensorTemplate(str_0, str_0, data_type_0, minimum=str_0, maximum=data_type_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    assert sensor_template_0.reference == 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum == 'Handle messages received from WolkGateway.\n\n        :param message: Message received\n        :type message: Message\n        '
    assert sensor_template_0.maximum == module_0.DataType.STRING
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_0 = sensor_template_0.to_dto()

def test_case_14():
    str_0 = '%k|OI\n4!E^\rFV\x0b>l'
    str_1 = 'h'
    dict_0 = {str_1: str_0, str_0: str_0, str_1: str_0}
    sensor_template_0 = module_1.SensorTemplate(str_0, str_1, reading_type_name=str_1, unit=str_1, minimum=dict_0)
    assert f'{type(sensor_template_0).__module__}.{type(sensor_template_0).__qualname__}' == 'wolk_gateway_module.model.sensor_template.SensorTemplate'
    assert sensor_template_0.name == '%k|OI\n4!E^\rFV\x0b>l'
    assert sensor_template_0.reference == 'h'
    assert sensor_template_0.description is None
    assert sensor_template_0.minimum == {'h': '%k|OI\n4!E^\rFV\x0b>l', '%k|OI\n4!E^\rFV\x0b>l': '%k|OI\n4!E^\rFV\x0b>l'}
    assert sensor_template_0.maximum is None
    assert f'{type(sensor_template_0.unit).__module__}.{type(sensor_template_0.unit).__qualname__}' == 'wolk_gateway_module.model.reading_type.ReadingType'
    dict_1 = sensor_template_0.to_dto()
    none_type_0 = None
    str_2 = ''
    str_3 = 'zK)^:b%N/6h[8I'
    with pytest.raises(ValueError):
        module_1.SensorTemplate(str_2, str_3, unit=none_type_0, description=str_0)