# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.logger_factory as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    logger_factory_0 = module_0.LoggerFactory()
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logger_factory_1 = module_0.LoggerFactory()
    assert logger_factory_1.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    var_0 = logger_factory_0.get_logger(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.RootLogger'
    assert var_0.filters == []
    assert var_0.name == 'root'
    assert var_0.level == 20
    assert var_0.parent is None
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert var_0.disabled is False
    logger_factory_2 = module_0.LoggerFactory(log_file=logger_factory_1)
    assert logger_factory_2.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    bool_0.get_logger(bool_0, bool_0)

def test_case_1():
    str_0 = 'Rd'
    logger_factory_0 = module_0.LoggerFactory(log_file=str_0)
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    var_0 = logger_factory_0.get_logger(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.Logger'
    assert var_0.filters == []
    assert var_0.name == 'Rd'
    assert var_0.level == 20
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'logging.RootLogger'
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert var_0.disabled is False
    assert f'{type(var_0.manager).__module__}.{type(var_0.manager).__qualname__}' == 'logging.Manager'

def test_case_2():
    str_0 = 'HZ>xa'
    bool_0 = False
    var_0 = module_0.logging_config(str_0)
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logger_factory_0 = module_0.LoggerFactory()
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    var_1 = logger_factory_0.get_logger(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.RootLogger'
    assert var_1.filters == []
    assert var_1.name == 'root'
    assert var_1.level == 20
    assert var_1.parent is None
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert var_1.disabled is False
    var_2 = logger_factory_0.get_logger(bool_0, bool_0)
    dict_0 = {bool_0: bool_0}
    logger_factory_1 = module_0.LoggerFactory(log_file=dict_0)
    assert logger_factory_1.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

def test_case_3():
    float_0 = -1121.988477
    var_0 = module_0.logging_config(float_0, float_0)
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.log_file == pytest.approx(-1121.988477, abs=0.01, rel=0.01)

def test_case_4():
    none_type_0 = None
    var_0 = module_0.logging_config(none_type_0)
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.log_file == pytest.approx(-1121.988477, abs=0.01, rel=0.01)

def test_case_5():
    str_0 = 'mA'
    bool_0 = True
    var_0 = module_0.logging_config(str_0, bool_0)
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.log_file is True
    list_0 = []
    logger_factory_0 = module_0.LoggerFactory(console=list_0)
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    var_1 = logger_factory_0.get_logger(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'logging.RootLogger'
    assert var_1.filters == []
    assert var_1.name == 'root'
    assert var_1.level == 20
    assert var_1.parent is None
    assert var_1.propagate is True
    assert f'{type(var_1.handlers).__module__}.{type(var_1.handlers).__qualname__}' == 'builtins.list'
    assert var_1.disabled is False
    float_0 = -1121.988477
    logger_factory_1 = module_0.LoggerFactory(float_0, float_0)
    var_2 = module_0.logging_config(float_0, float_0)
    assert module_0.logger_factory.log_file == pytest.approx(-1121.988477, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '|g'
    logger_factory_0 = module_0.LoggerFactory(log_file=str_0)
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    int_0 = 2
    var_0 = logger_factory_0.get_logger(str_0, int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.Logger'
    assert var_0.filters == []
    assert var_0.name == '|g'
    assert var_0.level == 2
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'logging.RootLogger'
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert var_0.disabled is False
    assert f'{type(var_0.manager).__module__}.{type(var_0.manager).__qualname__}' == 'logging.Manager'
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: logger_factory_0, object_0: str_0, object_0: bool_0}
    object_0.get_logger(dict_0, logger_factory_0)

def test_case_7():
    str_0 = 'f'
    logger_factory_0 = module_0.LoggerFactory(log_file=str_0)
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.level == 20
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logger_factory_1 = module_0.LoggerFactory(log_file=str_0)
    assert logger_factory_1.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    var_0 = module_0.logging_config(logger_factory_1)
    logger_factory_2 = module_0.LoggerFactory(logger_factory_0, logger_factory_0)
    var_1 = module_0.logging_config(str_0, str_0)
    assert module_0.logger_factory.log_file == 'f'
    object_0 = module_1.object()
    logger_factory_3 = module_0.LoggerFactory(object_0, logger_factory_0, object_0)
    logger_factory_4 = module_0.LoggerFactory()
    assert logger_factory_4.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    str_1 = 'notset'
    var_2 = module_0.logging_config(str_1, logger_factory_2)
    assert module_0.logger_factory.level == 0
    assert f'{type(module_0.logger_factory.log_file).__module__}.{type(module_0.logger_factory.log_file).__qualname__}' == 'wolk_gateway_module.logger_factory.LoggerFactory'
    var_3 = logger_factory_1.get_logger(var_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'logging.RootLogger'
    assert var_3.filters == []
    assert var_3.name == 'root'
    assert var_3.level == 20
    assert var_3.parent is None
    assert var_3.propagate is True
    assert f'{type(var_3.handlers).__module__}.{type(var_3.handlers).__qualname__}' == 'builtins.list'
    assert var_3.disabled is False

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'r\xf8'
    var_0 = module_0.logging_config(bytes_0)
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    set_0 = {var_0}
    str_0 = 'debug'
    var_1 = module_0.logging_config(str_0)
    assert module_0.logger_factory.level == 10
    var_1.get_logger(set_0)

def test_case_9():
    str_0 = 'f'
    logger_factory_0 = module_0.LoggerFactory(log_file=str_0)
    assert logger_factory_0.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    assert module_0.logger_factory.level == 10
    assert module_0.logger_factory.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logger_factory_1 = module_0.LoggerFactory(console=str_0)
    assert logger_factory_1.log_format == '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    var_0 = logger_factory_0.get_logger(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.Logger'
    assert var_0.filters == []
    assert var_0.name == 'f'
    assert var_0.level == 20
    assert f'{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}' == 'logging.RootLogger'
    assert var_0.propagate is True
    assert f'{type(var_0.handlers).__module__}.{type(var_0.handlers).__qualname__}' == 'builtins.list'
    assert var_0.disabled is False
    assert f'{type(var_0.manager).__module__}.{type(var_0.manager).__qualname__}' == 'logging.Manager'
    var_1 = module_0.logging_config(var_0)
    object_0 = module_1.object()
    var_2 = module_0.logging_config(object_0, str_0)
    assert module_0.logger_factory.log_file == 'f'
    var_3 = logger_factory_1.get_logger(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'logging.RootLogger'
    assert var_3.filters == []
    assert var_3.name == 'root'
    assert var_3.level == 20
    assert var_3.parent is None
    assert var_3.propagate is True
    assert f'{type(var_3.handlers).__module__}.{type(var_3.handlers).__qualname__}' == 'builtins.list'
    assert var_3.disabled is False
    str_1 = 'info'
    var_4 = module_0.logging_config(var_3)
    var_5 = module_0.logging_config(str_1)
    assert module_0.logger_factory.level == 20