# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.outbound_message_deque as module_0
import wolk_gateway_module.model.message as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    str_0 = outbound_message_deque_0.__repr__()
    assert str_0 == 'OutboundMessageDeque()'
    var_0 = outbound_message_deque_0.remove(outbound_message_deque_0)
    assert var_0 is True
    var_0.get()

def test_case_1():
    str_0 = ''
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    var_0 = outbound_message_deque_0.get()
    outbound_message_deque_1 = module_0.OutboundMessageDeque()
    outbound_message_deque_2 = module_0.OutboundMessageDeque()
    var_1 = var_0.__repr__()
    list_0 = outbound_message_deque_2.get_messages_for_device(str_0)
    str_1 = outbound_message_deque_2.__repr__()
    assert str_1 == 'OutboundMessageDeque()'
    var_2 = outbound_message_deque_2.get()
    int_0 = outbound_message_deque_2.queue_size()

@pytest.mark.xfail(strict=True)
def test_case_2():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    str_0 = '%Tw'
    var_0 = outbound_message_deque_0.put(str_0)
    assert var_0 is True
    assert len(outbound_message_deque_0.queue) == 1
    outbound_message_deque_0.get_messages_for_device(var_0)

def test_case_3():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    var_0 = outbound_message_deque_0.get()

def test_case_4():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'

@pytest.mark.xfail(strict=True)
def test_case_5():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    var_0 = outbound_message_deque_0.queue_size()
    assert var_0 == 0
    var_0.get()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '3hLi1;'
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    var_0 = outbound_message_deque_0.get()
    str_1 = var_0.__repr__()
    outbound_message_deque_1 = module_0.OutboundMessageDeque()
    bool_0 = outbound_message_deque_0.put(var_0)
    bool_1 = outbound_message_deque_1.put(var_0)
    var_1 = outbound_message_deque_1.queue_size()
    outbound_message_deque_2 = module_0.OutboundMessageDeque()
    bool_2 = outbound_message_deque_1.remove(str_0)
    assert bool_2 is True
    bool_3 = outbound_message_deque_0.remove(var_0)
    var_1.queue_size()

@pytest.mark.xfail(strict=True)
def test_case_7():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    str_0 = 'HM0Sei<U;q'
    message_0 = module_1.Message(str_0)
    bool_0 = outbound_message_deque_0.put(message_0)
    assert bool_0 is True
    assert len(outbound_message_deque_0.queue) == 1
    var_0 = outbound_message_deque_0.get()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == 'HM0Sei<U;q'
    assert var_0.payload is None
    list_0 = outbound_message_deque_0.get_messages_for_device(str_0)
    var_1 = var_0.__eq__(str_0)
    str_1 = outbound_message_deque_0.__repr__()
    assert str_1 == 'OutboundMessageDeque()'
    var_1.get_messages_for_device(var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    outbound_message_deque_0 = module_0.OutboundMessageDeque()
    assert f'{type(outbound_message_deque_0).__module__}.{type(outbound_message_deque_0).__qualname__}' == 'wolk_gateway_module.outbound_message_deque.OutboundMessageDeque'
    assert f'{type(outbound_message_deque_0.queue).__module__}.{type(outbound_message_deque_0.queue).__qualname__}' == 'collections.deque'
    assert len(outbound_message_deque_0.queue) == 0
    assert f'{type(outbound_message_deque_0.log).__module__}.{type(outbound_message_deque_0.log).__qualname__}' == 'logging.Logger'
    str_0 = 'HM0Sei<U;q'
    message_0 = module_1.Message(str_0)
    bool_0 = outbound_message_deque_0.put(message_0)
    assert bool_0 is True
    assert len(outbound_message_deque_0.queue) == 1
    var_0 = outbound_message_deque_0.get()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == 'HM0Sei<U;q'
    assert var_0.payload is None
    str_1 = outbound_message_deque_0.__repr__()
    assert str_1 == 'OutboundMessageDeque()'
    list_0 = outbound_message_deque_0.get_messages_for_device(str_1)
    var_1 = var_0.__eq__(str_1)
    str_2 = outbound_message_deque_0.__repr__()
    assert str_2 == 'OutboundMessageDeque()'
    var_1.get_messages_for_device(var_1)