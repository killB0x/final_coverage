# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.json_data_protocol as module_0
import wolk_gateway_module.model.message as module_1
import wolk_gateway_module.model.alarm as module_2
import wolk_gateway_module.model.sensor_reading as module_3
import wolk_gateway_module.model.actuator_state as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'Make string representation of JsonStatusProtocol.\n\n        :returns: representation\n        :rtype: str\n        '
    list_0 = json_data_protocol_0.get_inbound_topics_for_device(str_0)
    json_data_protocol_0.make_sensor_readings_message(str_0, str_0)

def test_case_1():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'

def test_case_2():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'Make string representation of JsonStatusProtocol.\n\n        :returns: representation\n        :rtype: str\n        '
    dict_0 = {str_0: str_0, str_0: json_data_protocol_0}
    message_0 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/configuration_get/d/Make string representation of JsonStatusProtocol.\n\n        :returns: representation\n        :rtype: str\n        '
    assert message_0.payload == '{"values": {"Make string representation of JsonStatusProtocol.\\n\\n        :returns: representation\\n        :rtype: str\\n        ": "JsonDataProtocol()"}}'

@pytest.mark.xfail(strict=True)
def test_case_3():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'qdXYs+ITN6J;f%'
    message_0 = module_1.Message(str_0)
    json_data_protocol_0.make_actuator_command(message_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    json_data_protocol_0.is_configuration_get_message(json_data_protocol_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    json_data_protocol_0.make_configuration_command(json_data_protocol_0)

def test_case_6():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = '& q&qj.W[Zh'
    dict_0 = {str_0: str_0}
    message_0 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/configuration_get/d/& q&qj.W[Zh'
    assert message_0.payload == '{"values": {"& q&qj.W[Zh": "& q&qj.W[Zh"}}'

@pytest.mark.xfail(strict=True)
def test_case_7():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'yY09s0M'
    list_0 = []
    var_0 = json_data_protocol_0.make_sensor_readings_message(str_0, list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == 'd2p/sensor_reading/d/yY09s0M'
    assert var_0.payload == '{}'
    json_data_protocol_0.make_configuration_command(var_0)

def test_case_8():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    dict_0 = {}
    str_0 = ''
    message_0 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/configuration_get/d/'
    assert message_0.payload == '{"values": {}}'
    str_1 = json_data_protocol_0.extract_key_from_message(message_0)
    assert str_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_9():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'qdXYs+ITN6J;f%'
    message_0 = module_1.Message(str_0)
    json_data_protocol_0.make_configuration_command(message_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'l]j=Uc2,e6IURjHnF\x0bb'
    dict_0 = {str_0: json_data_protocol_0}
    message_0 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/configuration_get/d/l]j=Uc2,e6IURjHnF\x0bb'
    assert message_0.payload == '{"values": {"l]j=Uc2,e6IURjHnF\\u000bb": "JsonDataProtocol()"}}'
    list_0 = []
    bool_0 = False
    var_0 = json_data_protocol_0.make_sensor_readings_message(str_0, list_0, bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == 'd2p/sensor_reading/d/l]j=Uc2,e6IURjHnF\x0bb'
    assert var_0.payload == '{"utc": false}'
    json_data_protocol_0.make_configuration_command(var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    none_type_0 = None
    str_0 = 'ltNURakxpKE2B21l'
    bool_0 = False
    dict_0 = {json_data_protocol_0: json_data_protocol_0, json_data_protocol_0: json_data_protocol_0, none_type_0: str_0, bool_0: bool_0}
    json_data_protocol_0.make_configuration_message(str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'l]j=8Uc2,6IURjHnF\x0bb'
    dict_0 = {str_0: json_data_protocol_0}
    str_1 = ":%MQA{=AT\tB\x0b@aF]RF'"
    bool_0 = True
    alarm_0 = module_2.Alarm(str_0, bool_0, bool_0)
    message_0 = json_data_protocol_0.make_alarm_message(str_1, alarm_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == "d2p/events/d/:%MQA{=AT\tB\x0b@aF]RF'/r/l]j=8Uc2,6IURjHnF\x0bb"
    assert message_0.payload == '{"data": "true", "utc": 1}'
    message_1 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_1).__module__}.{type(message_1).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_1.topic == 'd2p/configuration_get/d/l]j=8Uc2,6IURjHnF\x0bb'
    assert message_1.payload == '{"values": {"l]j=8Uc2,6IURjHnF\\u000bb": "JsonDataProtocol()"}}'
    str_2 = 'yY09s0M'
    str_3 = json_data_protocol_0.extract_key_from_message(message_0)
    assert str_3 == ":%MQA{=AT\tB\x0b@aF]RF'"
    list_0 = []
    var_0 = json_data_protocol_0.make_sensor_readings_message(str_2, list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == 'd2p/sensor_reading/d/yY09s0M'
    assert var_0.payload == '{}'
    json_data_protocol_0.make_configuration_command(var_0)

def test_case_13():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'avl,;on\r)s?5'
    int_0 = 0
    sensor_reading_0 = module_3.SensorReading(str_0, str_0, int_0)
    message_0 = json_data_protocol_0.make_sensor_reading_message(str_0, sensor_reading_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/sensor_reading/d/avl,;on\r)s?5/r/avl,;on\r)s?5'
    assert message_0.payload == '{"data": "avl,;on\\r)s?5", "utc": 0}'

def test_case_14():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = ":%MQA{=AT\tB\x0b@aF]RF'"
    bool_0 = True
    alarm_0 = module_2.Alarm(str_0, bool_0, bool_0)
    message_0 = json_data_protocol_0.make_alarm_message(str_0, alarm_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == "d2p/events/d/:%MQA{=AT\tB\x0b@aF]RF'/r/:%MQA{=AT\tB\x0b@aF]RF'"
    assert message_0.payload == '{"data": "true", "utc": 1}'
    list_0 = []
    var_0 = json_data_protocol_0.make_sensor_readings_message(str_0, list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == "d2p/sensor_reading/d/:%MQA{=AT\tB\x0b@aF]RF'"
    assert var_0.payload == '{}'

@pytest.mark.xfail(strict=True)
def test_case_15():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'l]j=8Uc2,6IURjHnF\x0bb'
    str_1 = ":%MQA{=AT\tB\x0b@aF]RF'"
    bool_0 = True
    none_type_0 = None
    alarm_0 = module_2.Alarm(str_0, bool_0, none_type_0)
    message_0 = json_data_protocol_0.make_alarm_message(str_1, alarm_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == "d2p/events/d/:%MQA{=AT\tB\x0b@aF]RF'/r/l]j=8Uc2,6IURjHnF\x0bb"
    assert message_0.payload == '{"data": "true"}'
    json_data_protocol_0.is_actuator_get_message(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = ":%MQP{=AT\tB\x0b@aF]R*'"
    actuator_state_0 = module_4.ActuatorState.ERROR
    list_0 = [actuator_state_0]
    json_data_protocol_0.make_sensor_readings_message(str_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'kGVv'
    dict_0 = {str_0: json_data_protocol_0}
    message_0 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/configuration_get/d/kGVv'
    assert message_0.payload == '{"values": {"kGVv": "JsonDataProtocol()"}}'
    bool_0 = False
    sensor_reading_0 = module_3.SensorReading(str_0, bool_0)
    list_0 = [sensor_reading_0]
    var_0 = json_data_protocol_0.make_sensor_readings_message(str_0, list_0, bool_0)
    assert sensor_reading_0.value == 'false'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert var_0.topic == 'd2p/sensor_reading/d/kGVv'
    assert var_0.payload == '{"kGVv": "false", "utc": false}'
    json_data_protocol_0.make_actuator_command(var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = ":%MQA{=AT\tB\x0b@aF]RF'"
    bool_0 = False
    sensor_reading_0 = module_3.SensorReading(str_0, bool_0)
    message_0 = json_data_protocol_0.make_sensor_reading_message(str_0, sensor_reading_0)
    assert sensor_reading_0.value == 'false'
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == "d2p/sensor_reading/d/:%MQA{=AT\tB\x0b@aF]RF'/r/:%MQA{=AT\tB\x0b@aF]RF'"
    assert message_0.payload == '{"data": "false"}'
    str_1 = ' T`[=B*O_K)!*C^:\x0cB\r'
    json_data_protocol_0.make_actuator_status_message(str_1, sensor_reading_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'i'
    bool_0 = False
    sensor_reading_0 = module_3.SensorReading(str_0, bool_0)
    json_data_protocol_0.make_actuator_status_message(str_0, sensor_reading_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    json_data_protocol_0 = module_0.JsonDataProtocol()
    assert f'{type(json_data_protocol_0).__module__}.{type(json_data_protocol_0).__qualname__}' == 'wolk_gateway_module.json_data_protocol.JsonDataProtocol'
    assert f'{type(json_data_protocol_0.log).__module__}.{type(json_data_protocol_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.JsonDataProtocol.DEVICE_PATH_PREFIX == 'd/'
    assert module_0.JsonDataProtocol.REFERENCE_PATH_PREFIX == 'r/'
    assert module_0.JsonDataProtocol.CHANNEL_WILDCARD == '#'
    assert module_0.JsonDataProtocol.CHANNEL_DELIMITER == '/'
    assert module_0.JsonDataProtocol.SENSOR_READING == 'd2p/sensor_reading/'
    assert module_0.JsonDataProtocol.ALARM == 'd2p/events/'
    assert module_0.JsonDataProtocol.ACTUATOR_SET == 'p2d/actuator_set/'
    assert module_0.JsonDataProtocol.ACTUATOR_GET == 'p2d/actuator_get/'
    assert module_0.JsonDataProtocol.ACTUATOR_STATUS == 'd2p/actuator_status/'
    assert module_0.JsonDataProtocol.CONFIGURATION_SET == 'p2d/configuration_set/'
    assert module_0.JsonDataProtocol.CONFIGURATION_GET == 'p2d/configuration_get/'
    assert module_0.JsonDataProtocol.CONFIGURATION_STATUS == 'd2p/configuration_get/'
    str_0 = 'l]j=8Uc2,6IURjHnF\x0bb'
    dict_0 = {str_0: json_data_protocol_0}
    str_1 = 'Ta#;}B'
    bool_0 = False
    alarm_0 = module_2.Alarm(str_0, bool_0, bool_0)
    message_0 = json_data_protocol_0.make_configuration_message(str_0, dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'wolk_gateway_module.model.message.Message'
    assert message_0.topic == 'd2p/configuration_get/d/l]j=8Uc2,6IURjHnF\x0bb'
    assert message_0.payload == '{"values": {"l]j=8Uc2,6IURjHnF\\u000bb": "JsonDataProtocol()"}}'
    str_2 = '};R?t)'
    tuple_0 = (str_0, str_2)
    sensor_reading_0 = module_3.SensorReading(str_0, tuple_0, str_1)
    json_data_protocol_0.make_sensor_reading_message(str_0, sensor_reading_0)