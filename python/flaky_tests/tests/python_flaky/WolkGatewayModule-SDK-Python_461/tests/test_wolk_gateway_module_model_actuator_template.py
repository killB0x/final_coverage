# Automatically generated by Pynguin.
import pytest
import wolk_gateway_module.model.data_type as module_0
import wolk_gateway_module.model.actuator_template as module_1

def test_case_0():
    data_type_0 = module_0.DataType.STRING
    actuator_template_0 = module_1.ActuatorTemplate(data_type_0, data_type_0, data_type_0, minimum=data_type_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == module_0.DataType.STRING
    assert actuator_template_0.reference == module_0.DataType.STRING
    assert actuator_template_0.description is None
    assert actuator_template_0.minimum == module_0.DataType.STRING
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'TEXT(ACTUATOR)', 'symbol': ''}

def test_case_1():
    bool_0 = True
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(bool_0, bool_0, description=none_type_0)

def test_case_2():
    str_0 = '"6\t[gIA\x0b5}<Zfk'
    str_1 = 'B]O}Rnm'
    data_type_0 = module_0.DataType.STRING
    int_0 = 2
    actuator_template_0 = module_1.ActuatorTemplate(str_1, str_0, data_type_0, minimum=int_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == 'B]O}Rnm'
    assert actuator_template_0.reference == '"6\t[gIA\x0b5}<Zfk'
    assert actuator_template_0.description is None
    assert actuator_template_0.minimum == 2
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'TEXT(ACTUATOR)', 'symbol': ''}
    str_2 = actuator_template_0.__repr__()
    assert str_2 == 'ActuatorTemplate(name=\'B]O}Rnm\', reference=\'"6\t[gIA\x0b5}<Zfk\', description=\'None\', unit=\'{\'readingTypeName\': \'TEXT(ACTUATOR)\', \'symbol\': \'\'}\', minimum=\'2\', maximum=\'None\')'
    data_type_1 = module_0.DataType.NUMERIC
    actuator_template_1 = module_1.ActuatorTemplate(str_0, str_1, data_type_1, unit=str_0)
    assert actuator_template_1.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    dict_0 = actuator_template_1.to_dto()
    dict_1 = actuator_template_0.to_dto()
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(str_0, data_type_1, minimum=int_0, maximum=int_0)

def test_case_3():
    str_0 = "6'C8\x0cr)-$"
    data_type_0 = module_0.DataType.NUMERIC
    actuator_template_0 = module_1.ActuatorTemplate(str_0, str_0, data_type_0, description=str_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == "6'C8\x0cr)-$"
    assert actuator_template_0.reference == "6'C8\x0cr)-$"
    assert actuator_template_0.description == "6'C8\x0cr)-$"
    assert actuator_template_0.minimum is None
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    dict_0 = actuator_template_0.to_dto()

def test_case_4():
    str_0 = 'valuesH'
    data_type_0 = module_0.DataType.STRING
    actuator_template_0 = module_1.ActuatorTemplate(str_0, str_0, data_type_0, unit=data_type_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == 'valuesH'
    assert actuator_template_0.reference == 'valuesH'
    assert actuator_template_0.description is None
    assert actuator_template_0.minimum is None
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'TEXT(ACTUATOR)', 'symbol': ''}
    dict_0 = actuator_template_0.to_dto()
    str_1 = 'v^\x0cZ$W}2d|+`E@*H'
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(str_0, str_1, unit=str_0, maximum=str_0)

def test_case_5():
    bool_0 = True
    data_type_0 = module_0.DataType.NUMERIC
    str_0 = 'Glp~iIlR,A0\tbO'
    str_1 = '9@7'
    str_2 = 'k|fUx|"e9M]"^'
    actuator_template_0 = module_1.ActuatorTemplate(str_1, str_2, data_type_0, str_0, description=str_1)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == '9@7'
    assert actuator_template_0.reference == 'k|fUx|"e9M]"^'
    assert actuator_template_0.description == '9@7'
    assert actuator_template_0.minimum is None
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    actuator_template_1 = module_1.ActuatorTemplate(bool_0, bool_0, data_type_0, data_type_0, description=str_0, maximum=bool_0)
    assert actuator_template_1.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    dict_0 = actuator_template_1.to_dto()
    str_3 = actuator_template_1.__repr__()
    assert str_3 == "ActuatorTemplate(name='True', reference='True', description='Glp~iIlR,A0\tbO', unit='{'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}', minimum='None', maximum='True')"

def test_case_6():
    str_0 = '_\\RW%,F\\s?SX`9?'
    bytes_0 = b'\x04\r\x1b\x88\x89\xbdm\xa0[\xa2+}^\xaf\xb2E\xd0P\xc4\x9e'
    str_1 = '\x0cmF|W;|sA8g b9'
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(bytes_0, str_1, reading_type_name=str_0, description=str_0)

def test_case_7():
    data_type_0 = module_0.DataType.NUMERIC
    str_0 = ',uBg\neVeCA0e"<\''
    int_0 = 555
    actuator_template_0 = module_1.ActuatorTemplate(str_0, str_0, data_type_0, minimum=str_0, maximum=int_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == ',uBg\neVeCA0e"<\''
    assert actuator_template_0.reference == ',uBg\neVeCA0e"<\''
    assert actuator_template_0.description is None
    assert actuator_template_0.minimum == ',uBg\neVeCA0e"<\''
    assert actuator_template_0.maximum == 555
    assert actuator_template_0.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    dict_0 = actuator_template_0.to_dto()
    str_1 = '=YST@d'
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(str_1, str_1, unit=none_type_0, description=none_type_0, minimum=data_type_0)

def test_case_8():
    bool_0 = True
    data_type_0 = module_0.DataType.NUMERIC
    str_0 = 'Glp~iIlR,A0\tbO'
    str_1 = '9@7'
    str_2 = 'k|fUx|"e9M]"^'
    actuator_template_0 = module_1.ActuatorTemplate(str_1, str_2, data_type_0, str_0, description=str_1)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == '9@7'
    assert actuator_template_0.reference == 'k|fUx|"e9M]"^'
    assert actuator_template_0.description == '9@7'
    assert actuator_template_0.minimum is None
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    actuator_template_1 = module_1.ActuatorTemplate(bool_0, bool_0, data_type_0, data_type_0, description=str_0, maximum=bool_0)
    assert actuator_template_1.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    str_3 = actuator_template_1.__repr__()
    assert str_3 == "ActuatorTemplate(name='True', reference='True', description='Glp~iIlR,A0\tbO', unit='{'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}', minimum='None', maximum='True')"
    float_0 = 1337.043
    str_4 = 'u\nsB'
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(str_2, str_4, str_3, str_3, actuator_template_0, minimum=float_0)

def test_case_9():
    str_0 = 'N '
    data_type_0 = module_0.DataType.NUMERIC
    int_0 = 285
    actuator_template_0 = module_1.ActuatorTemplate(str_0, str_0, data_type_0, description=str_0, minimum=int_0, maximum=data_type_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == 'N '
    assert actuator_template_0.reference == 'N '
    assert actuator_template_0.description == 'N '
    assert actuator_template_0.minimum == 285
    assert actuator_template_0.maximum == module_0.DataType.NUMERIC
    assert actuator_template_0.unit == {'readingTypeName': 'RANGE (ACTUATOR)', 'symbol': 'count'}
    str_1 = '^$`zoCT`s/a'
    actuator_template_1 = module_1.ActuatorTemplate(str_1, str_1, reading_type_name=str_0, unit=str_1, description=str_1)
    assert f'{type(actuator_template_1).__module__}.{type(actuator_template_1).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_1.name == '^$`zoCT`s/a'
    assert actuator_template_1.reference == '^$`zoCT`s/a'
    assert actuator_template_1.description == '^$`zoCT`s/a'
    assert actuator_template_1.minimum is None
    assert actuator_template_1.maximum is None
    assert actuator_template_1.unit == {'readingTypeName': 'N ', 'symbol': '^$`zoCT`s/a'}
    str_2 = actuator_template_1.__repr__()
    assert str_2 == "ActuatorTemplate(name='^$`zoCT`s/a', reference='^$`zoCT`s/a', description='^$`zoCT`s/a', unit='{'readingTypeName': 'N ', 'symbol': '^$`zoCT`s/a'}', minimum='None', maximum='None')"
    dict_0 = actuator_template_1.to_dto()
    dict_1 = actuator_template_1.to_dto()
    str_3 = '.YqJJ,\t;C;?)eTbNH@"'
    str_4 = actuator_template_1.__repr__()
    assert str_4 == "ActuatorTemplate(name='^$`zoCT`s/a', reference='^$`zoCT`s/a', description='^$`zoCT`s/a', unit='{'readingTypeName': 'N ', 'symbol': '^$`zoCT`s/a'}', minimum='None', maximum='None')"
    dict_2 = actuator_template_1.to_dto()
    bytes_0 = b't\xfa\x183\xd0v\x0e\xe1E\xe3bv\xa13\xee'
    bool_0 = True
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(str_3, bytes_0, reading_type_name=bool_0, maximum=dict_1)

def test_case_10():
    str_0 = '"6\t[gIA\x0b5}<Zfk'
    str_1 = 'B]O}Rnm'
    data_type_0 = module_0.DataType.BOOLEAN
    actuator_template_0 = module_1.ActuatorTemplate(str_0, str_1, data_type_0, unit=str_0)
    assert f'{type(actuator_template_0).__module__}.{type(actuator_template_0).__qualname__}' == 'wolk_gateway_module.model.actuator_template.ActuatorTemplate'
    assert actuator_template_0.name == '"6\t[gIA\x0b5}<Zfk'
    assert actuator_template_0.reference == 'B]O}Rnm'
    assert actuator_template_0.description is None
    assert actuator_template_0.minimum is None
    assert actuator_template_0.maximum is None
    assert actuator_template_0.unit == {'readingTypeName': 'SWITCH(ACTUATOR)', 'symbol': ''}
    dict_0 = actuator_template_0.to_dto()
    with pytest.raises(ValueError):
        module_1.ActuatorTemplate(str_0, str_0, unit=str_0, description=str_0, maximum=str_0)