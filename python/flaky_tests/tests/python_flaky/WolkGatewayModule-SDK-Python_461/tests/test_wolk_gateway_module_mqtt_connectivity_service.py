# Automatically generated by Pynguin.
import pytest
import platform as module_0
import wolk_gateway_module.mqtt_connectivity_service as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = (-2266.3+2370.13511j)
    complex_0.reconnect()

def test_case_1():
    var_0 = module_0.freedesktop_os_release()
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(var_0, var_0, var_0, var_0, var_0, var_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.port == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.client_id == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.topics == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.qos == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.lastwill_message == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ')ri7|2<g4A'
    none_type_0 = None
    bool_0 = False
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(none_type_0, bool_0, str_0, bool_0, bool_0, bool_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host is None
    assert m_q_t_t_connectivity_service_0.port is False
    assert m_q_t_t_connectivity_service_0.client_id == ')ri7|2<g4A'
    assert m_q_t_t_connectivity_service_0.topics is False
    assert m_q_t_t_connectivity_service_0.qos is False
    assert m_q_t_t_connectivity_service_0.lastwill_message is False
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    bool_1 = m_q_t_t_connectivity_service_0.publish(bool_0)
    assert bool_1 is False
    var_0 = m_q_t_t_connectivity_service_0.connected()
    m_q_t_t_connectivity_service_0.connect()

def test_case_3():
    str_0 = "0`7[\\u'_BZ]C"
    none_type_0 = None
    var_0 = module_0.machine()
    var_1 = var_0.__contains__(str_0)
    var_2 = var_1.__sub__(none_type_0)
    int_0 = -1096
    int_1 = -1091
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(var_2, int_0, int_0, int_1, int_0, var_2)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(m_q_t_t_connectivity_service_0.host).__module__}.{type(m_q_t_t_connectivity_service_0.host).__qualname__}' == 'builtins.NotImplementedType'
    assert m_q_t_t_connectivity_service_0.port == -1096
    assert m_q_t_t_connectivity_service_0.client_id == -1096
    assert f'{type(m_q_t_t_connectivity_service_0.topics).__module__}.{type(m_q_t_t_connectivity_service_0.topics).__qualname__}' == 'builtins.NotImplementedType'
    assert m_q_t_t_connectivity_service_0.qos == -1091
    assert m_q_t_t_connectivity_service_0.lastwill_message == -1096
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    none_type_1 = m_q_t_t_connectivity_service_0.set_inbound_message_listener(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ')ri7|2<g4A'
    none_type_0 = None
    bool_0 = False
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(none_type_0, bool_0, str_0, bool_0, bool_0, bool_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host is None
    assert m_q_t_t_connectivity_service_0.port is False
    assert m_q_t_t_connectivity_service_0.client_id == ')ri7|2<g4A'
    assert m_q_t_t_connectivity_service_0.topics is False
    assert m_q_t_t_connectivity_service_0.qos is False
    assert m_q_t_t_connectivity_service_0.lastwill_message is False
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    m_q_t_t_connectivity_service_0.reconnect()

def test_case_5():
    var_0 = module_0.freedesktop_os_release()
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(var_0, var_0, var_0, var_0, var_0, var_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.port == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.client_id == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.topics == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.qos == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.lastwill_message == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    bool_0 = m_q_t_t_connectivity_service_0.publish(var_0)
    assert bool_0 is False
    none_type_0 = m_q_t_t_connectivity_service_0.disconnect()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '5U(sbep/'
    none_type_0 = None
    bool_0 = True
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(none_type_0, bool_0, str_0, bool_0, bool_0, bool_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host is None
    assert m_q_t_t_connectivity_service_0.port is True
    assert m_q_t_t_connectivity_service_0.client_id == '5U(sbep/'
    assert m_q_t_t_connectivity_service_0.topics is True
    assert m_q_t_t_connectivity_service_0.qos is True
    assert m_q_t_t_connectivity_service_0.lastwill_message is True
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    m_q_t_t_connectivity_service_0.add_subscription_topics(m_q_t_t_connectivity_service_0)

def test_case_7():
    var_0 = module_0.freedesktop_os_release()
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(var_0, var_0, var_0, var_0, var_0, var_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.port == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.client_id == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.topics == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.qos == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.lastwill_message == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    bool_0 = m_q_t_t_connectivity_service_0.publish(var_0)
    assert bool_0 is False

def test_case_8():
    str_0 = ')ri7|2<g4A'
    none_type_0 = None
    bool_0 = False
    m_q_t_t_connectivity_service_0 = module_1.MQTTConnectivityService(none_type_0, bool_0, str_0, bool_0, bool_0, bool_0)
    assert f'{type(m_q_t_t_connectivity_service_0).__module__}.{type(m_q_t_t_connectivity_service_0).__qualname__}' == 'wolk_gateway_module.mqtt_connectivity_service.MQTTConnectivityService'
    assert f'{type(m_q_t_t_connectivity_service_0.log).__module__}.{type(m_q_t_t_connectivity_service_0.log).__qualname__}' == 'logging.Logger'
    assert m_q_t_t_connectivity_service_0.host is None
    assert m_q_t_t_connectivity_service_0.port is False
    assert m_q_t_t_connectivity_service_0.client_id == ')ri7|2<g4A'
    assert m_q_t_t_connectivity_service_0.topics is False
    assert m_q_t_t_connectivity_service_0.qos is False
    assert m_q_t_t_connectivity_service_0.lastwill_message is False
    assert m_q_t_t_connectivity_service_0.inbound_message_listener is None
    assert m_q_t_t_connectivity_service_0.connected_rc is None
    var_0 = m_q_t_t_connectivity_service_0.set_lastwill_message(bool_0)