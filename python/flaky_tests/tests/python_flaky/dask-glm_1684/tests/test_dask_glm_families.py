# Automatically generated by Pynguin.
import pytest
import dask_glm.families as module_0

def test_case_0():
    poisson_0 = module_0.Poisson()

@pytest.mark.xfail(strict=True)
def test_case_1():
    logistic_0 = module_0.Logistic()
    logistic_0.loglike(logistic_0, logistic_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 853
    logistic_0 = module_0.Logistic()
    logistic_0.pointwise_loss(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    logistic_0 = module_0.Logistic()
    none_type_0 = None
    logistic_0.pointwise_gradient(none_type_0, logistic_0, logistic_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    logistic_0 = module_0.Logistic()
    logistic_0.hessian(logistic_0, logistic_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'#d\xef~\x8f0\x97\xa6k\x98\xa9\xc5'
    normal_0 = module_0.Normal()
    normal_0.loglike(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ' The family for which this is the estimator '
    list_0 = [str_0, str_0, str_0, str_0]
    normal_0 = module_0.Normal()
    normal_0.gradient(list_0, str_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    normal_0 = module_0.Normal()
    none_type_0 = None
    str_0 = '}qt'
    normal_0.hessian(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    poisson_0 = module_0.Poisson()
    none_type_0 = None
    poisson_0.loglike(poisson_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    poisson_0 = module_0.Poisson()
    poisson_0.pointwise_loss(none_type_0, poisson_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    poisson_0 = module_0.Poisson()
    none_type_0 = None
    poisson_0.pointwise_gradient(none_type_0, none_type_0, poisson_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    poisson_0 = module_0.Poisson()
    list_0 = [poisson_0, poisson_0]
    bytes_0 = b'\xfc\xc6i*C3\xd3\x11\t \x89O@\x9f\\\xb2*\x02\xd4\xc0'
    tuple_0 = (bytes_0,)
    poisson_0.gradient(poisson_0, list_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    none_type_0 = None
    dict_0 = {}
    poisson_0 = module_0.Poisson(**dict_0)
    poisson_0.hessian(none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -2237
    set_0 = set()
    normal_0 = module_0.Normal()
    none_type_0 = None
    normal_0.pointwise_loss(set_0, int_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    logistic_0 = module_0.Logistic()
    logistic_0.gradient(logistic_0, logistic_0, logistic_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ' The family for which this is the estimator '
    list_0 = [str_0, str_0, str_0, str_0]
    normal_0 = module_0.Normal()
    normal_0.pointwise_gradient(str_0, normal_0, list_0)