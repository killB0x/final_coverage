# Automatically generated by Pynguin.
import pytest
import chazutsu.datasets.imdb as module_0

def test_case_0():
    i_m_d_b_0 = module_0.IMDB()
    none_type_0 = None
    var_0 = i_m_d_b_0.move_extracteds(i_m_d_b_0, i_m_d_b_0, none_type_0)
    var_1 = i_m_d_b_0.download()

def test_case_1():
    i_m_d_b_0 = module_0.IMDB()
    assert f'{type(i_m_d_b_0).__module__}.{type(i_m_d_b_0).__qualname__}' == 'chazutsu.datasets.imdb.IMDB'
    assert i_m_d_b_0.name == 'Large Movie Review Dataset(IMDB)'
    assert i_m_d_b_0.site_url == 'http://ai.stanford.edu/~amaas/data/sentiment/'
    assert i_m_d_b_0.download_url == 'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz'
    assert i_m_d_b_0.description == 'Movie review data is constructed by 25,000 reviews that have positive/negative annotation'
    assert i_m_d_b_0.test_mode is False
    assert i_m_d_b_0.test_download_url == 'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz'
    assert f'{type(i_m_d_b_0.logger).__module__}.{type(i_m_d_b_0.logger).__qualname__}' == 'logging.Logger'

@pytest.mark.xfail(strict=True)
def test_case_2():
    i_m_d_b_0 = module_0.IMDB()
    assert f'{type(i_m_d_b_0).__module__}.{type(i_m_d_b_0).__qualname__}' == 'chazutsu.datasets.imdb.IMDB'
    assert i_m_d_b_0.name == 'Large Movie Review Dataset(IMDB)'
    assert i_m_d_b_0.site_url == 'http://ai.stanford.edu/~amaas/data/sentiment/'
    assert i_m_d_b_0.download_url == 'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz'
    assert i_m_d_b_0.description == 'Movie review data is constructed by 25,000 reviews that have positive/negative annotation'
    assert i_m_d_b_0.test_mode is False
    assert i_m_d_b_0.test_download_url == 'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz'
    assert f'{type(i_m_d_b_0.logger).__module__}.{type(i_m_d_b_0.logger).__qualname__}' == 'logging.Logger'
    i_m_d_b_0.make_resource(i_m_d_b_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.IMDBResource(bool_0, pattern=bool_0)

def test_case_4():
    i_m_d_b_0 = module_0.IMDB()
    assert f'{type(i_m_d_b_0).__module__}.{type(i_m_d_b_0).__qualname__}' == 'chazutsu.datasets.imdb.IMDB'
    assert i_m_d_b_0.name == 'Large Movie Review Dataset(IMDB)'
    assert i_m_d_b_0.site_url == 'http://ai.stanford.edu/~amaas/data/sentiment/'
    assert i_m_d_b_0.download_url == 'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz'
    assert i_m_d_b_0.description == 'Movie review data is constructed by 25,000 reviews that have positive/negative annotation'
    assert i_m_d_b_0.test_mode is False
    assert i_m_d_b_0.test_download_url == 'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz'
    assert f'{type(i_m_d_b_0.logger).__module__}.{type(i_m_d_b_0.logger).__qualname__}' == 'logging.Logger'
    with pytest.raises(Exception):
        i_m_d_b_0.download(i_m_d_b_0, i_m_d_b_0, i_m_d_b_0)

def test_case_5():
    i_m_d_b_0 = module_0.IMDB()
    var_0 = i_m_d_b_0.download()

def test_case_6():
    i_m_d_b_0 = module_0.IMDB()
    var_0 = i_m_d_b_0.download()
    var_1 = var_0.unlabeled_data(var_0)