# Automatically generated by Pynguin.
import pytest
import chazutsu.datasets.text8 as module_0

def test_case_0():
    text8_0 = module_0.Text8()
    assert f'{type(text8_0).__module__}.{type(text8_0).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_0.name == 'Text8'
    assert text8_0.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_0.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_0.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_0.test_mode is False
    assert text8_0.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_0.logger).__module__}.{type(text8_0.logger).__qualname__}' == 'logging.Logger'
    assert text8_0.kind == 'en'
    assert f'{type(module_0.Text8.en).__module__}.{type(module_0.Text8.en).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.ja).__module__}.{type(module_0.Text8.ja).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.extract_targets).__module__}.{type(module_0.Text8.extract_targets).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    text8_0 = module_0.Text8(bool_0)
    assert f'{type(text8_0).__module__}.{type(text8_0).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_0.name == 'Text8'
    assert text8_0.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_0.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_0.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_0.test_mode is False
    assert text8_0.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_0.logger).__module__}.{type(text8_0.logger).__qualname__}' == 'logging.Logger'
    assert text8_0.kind is True
    assert f'{type(module_0.Text8.en).__module__}.{type(module_0.Text8.en).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.ja).__module__}.{type(module_0.Text8.ja).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.extract_targets).__module__}.{type(module_0.Text8.extract_targets).__qualname__}' == 'builtins.property'
    text8_0.download(shuffle=bool_0, test_size=bool_0, force=text8_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    text8_0 = module_0.Text8()
    assert f'{type(text8_0).__module__}.{type(text8_0).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_0.name == 'Text8'
    assert text8_0.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_0.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_0.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_0.test_mode is False
    assert text8_0.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_0.logger).__module__}.{type(text8_0.logger).__qualname__}' == 'logging.Logger'
    assert text8_0.kind == 'en'
    assert f'{type(module_0.Text8.en).__module__}.{type(module_0.Text8.en).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.ja).__module__}.{type(module_0.Text8.ja).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.extract_targets).__module__}.{type(module_0.Text8.extract_targets).__qualname__}' == 'builtins.property'
    dict_0 = {}
    text8_0.prepare(text8_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = (-1320.5784-4176.9602j)
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    text8_0 = module_0.Text8()
    assert f'{type(text8_0).__module__}.{type(text8_0).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_0.name == 'Text8'
    assert text8_0.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_0.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_0.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_0.test_mode is False
    assert text8_0.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_0.logger).__module__}.{type(text8_0.logger).__qualname__}' == 'logging.Logger'
    assert text8_0.kind == 'en'
    assert f'{type(module_0.Text8.en).__module__}.{type(module_0.Text8.en).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.ja).__module__}.{type(module_0.Text8.ja).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.extract_targets).__module__}.{type(module_0.Text8.extract_targets).__qualname__}' == 'builtins.property'
    text8_0.make_resource(set_0)

def test_case_4():
    bool_0 = False
    text8_0 = module_0.Text8(bool_0)
    assert f'{type(text8_0).__module__}.{type(text8_0).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_0.name == 'Text8'
    assert text8_0.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_0.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_0.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_0.test_mode is False
    assert text8_0.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_0.logger).__module__}.{type(text8_0.logger).__qualname__}' == 'logging.Logger'
    assert text8_0.kind is False
    assert f'{type(module_0.Text8.en).__module__}.{type(module_0.Text8.en).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.ja).__module__}.{type(module_0.Text8.ja).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.extract_targets).__module__}.{type(module_0.Text8.extract_targets).__qualname__}' == 'builtins.property'
    with pytest.raises(Exception):
        text8_0.download(shuffle=bool_0, test_size=bool_0, force=text8_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    text8_0 = module_0.Text8()
    assert f'{type(text8_0).__module__}.{type(text8_0).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_0.name == 'Text8'
    assert text8_0.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_0.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_0.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_0.test_mode is False
    assert text8_0.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_0.logger).__module__}.{type(text8_0.logger).__qualname__}' == 'logging.Logger'
    assert text8_0.kind == 'en'
    assert f'{type(module_0.Text8.en).__module__}.{type(module_0.Text8.en).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.ja).__module__}.{type(module_0.Text8.ja).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Text8.extract_targets).__module__}.{type(module_0.Text8.extract_targets).__qualname__}' == 'builtins.property'
    int_0 = -17
    text8_1 = module_0.Text8()
    assert text8_1.name == 'Text8'
    assert text8_1.site_url == 'http://mattmahoney.net/dc/textdata'
    assert text8_1.download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert text8_1.description == 'This dataset offers cleaned English Wikipedia text'
    assert text8_1.test_mode is False
    assert text8_1.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_1.logger).__module__}.{type(text8_1.logger).__qualname__}' == 'logging.Logger'
    assert text8_1.kind == 'en'
    str_0 = 'ja'
    text8_2 = module_0.Text8(str_0)
    assert f'{type(text8_2).__module__}.{type(text8_2).__qualname__}' == 'chazutsu.datasets.text8.Text8'
    assert text8_2.name == 'Text8'
    assert text8_2.site_url == 'https://github.com/Hironsan/ja.text8'
    assert text8_2.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/public/ja.text8.zip'
    assert text8_2.description == 'This dataset offers cleaned Japanese Wikipedia text'
    assert text8_2.test_mode is False
    assert text8_2.test_download_url == 'http://mattmahoney.net/dc/text8.zip'
    assert f'{type(text8_2.logger).__module__}.{type(text8_2.logger).__qualname__}' == 'logging.Logger'
    assert text8_2.kind == 'ja'
    set_0 = {text8_1, int_0, text8_1, int_0}
    none_type_0 = None
    text8_0.move_extracteds(text8_0, set_0, none_type_0)