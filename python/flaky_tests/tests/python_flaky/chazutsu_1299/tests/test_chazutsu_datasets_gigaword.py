# Automatically generated by Pynguin.
import pytest
import chazutsu.datasets.gigaword as module_0

def test_case_0():
    gigaword_0 = module_0.Gigaword()
    assert f'{type(gigaword_0).__module__}.{type(gigaword_0).__qualname__}' == 'chazutsu.datasets.gigaword.Gigaword'
    assert gigaword_0.name == 'Gigaword'
    assert gigaword_0.site_url == 'https://catalog.ldc.upenn.edu/ldc2003t05'
    assert gigaword_0.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert gigaword_0.description == "Gigaword is news text corpora con. This dataset is preprocessed version that is used at 'A Neural Attention Model for Sentence Summarization'."
    assert gigaword_0.test_mode is False
    assert gigaword_0.test_download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert f'{type(gigaword_0.logger).__module__}.{type(gigaword_0.logger).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.Gigaword.extract_targets).__module__}.{type(module_0.Gigaword.extract_targets).__qualname__}' == 'builtins.property'
    gigaword_1 = module_0.Gigaword()
    assert gigaword_1.name == 'Gigaword'
    assert gigaword_1.site_url == 'https://catalog.ldc.upenn.edu/ldc2003t05'
    assert gigaword_1.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert gigaword_1.description == "Gigaword is news text corpora con. This dataset is preprocessed version that is used at 'A Neural Attention Model for Sentence Summarization'."
    assert gigaword_1.test_mode is False
    assert gigaword_1.test_download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert f'{type(gigaword_1.logger).__module__}.{type(gigaword_1.logger).__qualname__}' == 'logging.Logger'
    var_0 = gigaword_0.download(sample_count=gigaword_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'chazutsu.datasets.framework.resource.Resource'
    assert var_0.root == '/pynguin/data/gigaword'
    assert var_0.columns == ['news', 'summary']
    assert var_0.target == 'summary'
    assert var_0.separator == '\t'

def test_case_1():
    gigaword_0 = module_0.Gigaword()
    assert f'{type(gigaword_0).__module__}.{type(gigaword_0).__qualname__}' == 'chazutsu.datasets.gigaword.Gigaword'
    assert gigaword_0.name == 'Gigaword'
    assert gigaword_0.site_url == 'https://catalog.ldc.upenn.edu/ldc2003t05'
    assert gigaword_0.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert gigaword_0.description == "Gigaword is news text corpora con. This dataset is preprocessed version that is used at 'A Neural Attention Model for Sentence Summarization'."
    assert gigaword_0.test_mode is False
    assert gigaword_0.test_download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert f'{type(gigaword_0.logger).__module__}.{type(gigaword_0.logger).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.Gigaword.extract_targets).__module__}.{type(module_0.Gigaword.extract_targets).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    gigaword_0 = module_0.Gigaword()
    assert f'{type(gigaword_0).__module__}.{type(gigaword_0).__qualname__}' == 'chazutsu.datasets.gigaword.Gigaword'
    assert gigaword_0.name == 'Gigaword'
    assert gigaword_0.site_url == 'https://catalog.ldc.upenn.edu/ldc2003t05'
    assert gigaword_0.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert gigaword_0.description == "Gigaword is news text corpora con. This dataset is preprocessed version that is used at 'A Neural Attention Model for Sentence Summarization'."
    assert gigaword_0.test_mode is False
    assert gigaword_0.test_download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert f'{type(gigaword_0.logger).__module__}.{type(gigaword_0.logger).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.Gigaword.extract_targets).__module__}.{type(module_0.Gigaword.extract_targets).__qualname__}' == 'builtins.property'
    gigaword_1 = module_0.Gigaword()
    assert gigaword_1.name == 'Gigaword'
    assert gigaword_1.site_url == 'https://catalog.ldc.upenn.edu/ldc2003t05'
    assert gigaword_1.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert gigaword_1.description == "Gigaword is news text corpora con. This dataset is preprocessed version that is used at 'A Neural Attention Model for Sentence Summarization'."
    assert gigaword_1.test_mode is False
    assert gigaword_1.test_download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert f'{type(gigaword_1.logger).__module__}.{type(gigaword_1.logger).__qualname__}' == 'logging.Logger'
    gigaword_1.prepare(gigaword_1, gigaword_1)

@pytest.mark.xfail(strict=True)
def test_case_3():
    gigaword_0 = module_0.Gigaword()
    assert f'{type(gigaword_0).__module__}.{type(gigaword_0).__qualname__}' == 'chazutsu.datasets.gigaword.Gigaword'
    assert gigaword_0.name == 'Gigaword'
    assert gigaword_0.site_url == 'https://catalog.ldc.upenn.edu/ldc2003t05'
    assert gigaword_0.download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert gigaword_0.description == "Gigaword is news text corpora con. This dataset is preprocessed version that is used at 'A Neural Attention Model for Sentence Summarization'."
    assert gigaword_0.test_mode is False
    assert gigaword_0.test_download_url == 'https://s3-ap-northeast-1.amazonaws.com/dev.tech-sketch.jp/chakki/chazutsu/Gigaword.zip'
    assert f'{type(gigaword_0.logger).__module__}.{type(gigaword_0.logger).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.Gigaword.extract_targets).__module__}.{type(module_0.Gigaword.extract_targets).__qualname__}' == 'builtins.property'
    gigaword_0.make_resource(gigaword_0)