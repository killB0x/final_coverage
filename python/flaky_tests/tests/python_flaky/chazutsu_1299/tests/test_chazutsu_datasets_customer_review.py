# Automatically generated by Pynguin.
import pytest
import chazutsu.datasets.customer_review as module_0

def test_case_0():
    customer_review_0 = module_0.CustomerReview()
    assert f'{type(customer_review_0).__module__}.{type(customer_review_0).__qualname__}' == 'chazutsu.datasets.customer_review.CustomerReview'
    assert customer_review_0.name == 'Customer Review Data'
    assert customer_review_0.site_url == 'https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets'
    assert customer_review_0.download_url == 'http://www.cs.uic.edu/~liub/FBS/CustomerReviewData.zip'
    assert customer_review_0.description == 'customer review data from amazon.com that is annotated to each sentences'
    assert customer_review_0.test_mode is False
    assert customer_review_0.test_download_url == ''
    assert f'{type(customer_review_0.logger).__module__}.{type(customer_review_0.logger).__qualname__}' == 'logging.Logger'
    assert customer_review_0.kind == 'products5'
    assert f'{type(module_0.CustomerReview.products5).__module__}.{type(module_0.CustomerReview.products5).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.additional9).__module__}.{type(module_0.CustomerReview.additional9).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.more3).__module__}.{type(module_0.CustomerReview.more3).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.root_name).__module__}.{type(module_0.CustomerReview.root_name).__qualname__}' == 'builtins.property'
    with pytest.raises(Exception):
        module_0.CustomerReview(customer_review_0)

def test_case_1():
    customer_review_0 = module_0.CustomerReview()
    assert f'{type(customer_review_0).__module__}.{type(customer_review_0).__qualname__}' == 'chazutsu.datasets.customer_review.CustomerReview'
    assert customer_review_0.name == 'Customer Review Data'
    assert customer_review_0.site_url == 'https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets'
    assert customer_review_0.download_url == 'http://www.cs.uic.edu/~liub/FBS/CustomerReviewData.zip'
    assert customer_review_0.description == 'customer review data from amazon.com that is annotated to each sentences'
    assert customer_review_0.test_mode is False
    assert customer_review_0.test_download_url == ''
    assert f'{type(customer_review_0.logger).__module__}.{type(customer_review_0.logger).__qualname__}' == 'logging.Logger'
    assert customer_review_0.kind == 'products5'
    assert f'{type(module_0.CustomerReview.products5).__module__}.{type(module_0.CustomerReview.products5).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.additional9).__module__}.{type(module_0.CustomerReview.additional9).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.more3).__module__}.{type(module_0.CustomerReview.more3).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.root_name).__module__}.{type(module_0.CustomerReview.root_name).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    customer_review_0 = module_0.CustomerReview()
    assert f'{type(customer_review_0).__module__}.{type(customer_review_0).__qualname__}' == 'chazutsu.datasets.customer_review.CustomerReview'
    assert customer_review_0.name == 'Customer Review Data'
    assert customer_review_0.site_url == 'https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets'
    assert customer_review_0.download_url == 'http://www.cs.uic.edu/~liub/FBS/CustomerReviewData.zip'
    assert customer_review_0.description == 'customer review data from amazon.com that is annotated to each sentences'
    assert customer_review_0.test_mode is False
    assert customer_review_0.test_download_url == ''
    assert f'{type(customer_review_0.logger).__module__}.{type(customer_review_0.logger).__qualname__}' == 'logging.Logger'
    assert customer_review_0.kind == 'products5'
    assert f'{type(module_0.CustomerReview.products5).__module__}.{type(module_0.CustomerReview.products5).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.additional9).__module__}.{type(module_0.CustomerReview.additional9).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.more3).__module__}.{type(module_0.CustomerReview.more3).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.root_name).__module__}.{type(module_0.CustomerReview.root_name).__qualname__}' == 'builtins.property'
    customer_review_0.prepare(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    customer_review_0 = module_0.CustomerReview()
    assert f'{type(customer_review_0).__module__}.{type(customer_review_0).__qualname__}' == 'chazutsu.datasets.customer_review.CustomerReview'
    assert customer_review_0.name == 'Customer Review Data'
    assert customer_review_0.site_url == 'https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets'
    assert customer_review_0.download_url == 'http://www.cs.uic.edu/~liub/FBS/CustomerReviewData.zip'
    assert customer_review_0.description == 'customer review data from amazon.com that is annotated to each sentences'
    assert customer_review_0.test_mode is False
    assert customer_review_0.test_download_url == ''
    assert f'{type(customer_review_0.logger).__module__}.{type(customer_review_0.logger).__qualname__}' == 'logging.Logger'
    assert customer_review_0.kind == 'products5'
    assert f'{type(module_0.CustomerReview.products5).__module__}.{type(module_0.CustomerReview.products5).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.additional9).__module__}.{type(module_0.CustomerReview.additional9).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.more3).__module__}.{type(module_0.CustomerReview.more3).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.root_name).__module__}.{type(module_0.CustomerReview.root_name).__qualname__}' == 'builtins.property'
    customer_review_0.download(shuffle=customer_review_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'chazutsu.datasets.framework.resource.Resource'
    assert var_0.root == '/pynguin/data/customer_review_data_products5'
    assert var_0.columns == ['sentence-type', 'polarity', 'detail', 'review']
    assert var_0.target == 'polarity'
    assert var_0.separator == '\t'
    var_1 = customer_review_0.extractall(customer_review_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    customer_review_0 = module_0.CustomerReview()
    assert f'{type(customer_review_0).__module__}.{type(customer_review_0).__qualname__}' == 'chazutsu.datasets.customer_review.CustomerReview'
    assert customer_review_0.name == 'Customer Review Data'
    assert customer_review_0.site_url == 'https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets'
    assert customer_review_0.download_url == 'http://www.cs.uic.edu/~liub/FBS/CustomerReviewData.zip'
    assert customer_review_0.description == 'customer review data from amazon.com that is annotated to each sentences'
    assert customer_review_0.test_mode is False
    assert customer_review_0.test_download_url == ''
    assert f'{type(customer_review_0.logger).__module__}.{type(customer_review_0.logger).__qualname__}' == 'logging.Logger'
    assert customer_review_0.kind == 'products5'
    assert f'{type(module_0.CustomerReview.products5).__module__}.{type(module_0.CustomerReview.products5).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.additional9).__module__}.{type(module_0.CustomerReview.additional9).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.more3).__module__}.{type(module_0.CustomerReview.more3).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.CustomerReview.root_name).__module__}.{type(module_0.CustomerReview.root_name).__qualname__}' == 'builtins.property'
    var_0 = customer_review_0.save_and_extract()
    var_0.reset(none_type_0)

def test_case_5():
    none_type_0 = None
    review_sentence_0 = module_0.ReviewSentence(none_type_0, none_type_0, polarity=none_type_0)
    assert review_sentence_0.detail == ''
    assert f'{type(module_0.ReviewSentence.parse).__module__}.{type(module_0.ReviewSentence.parse).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\x94\rC*\xa3D\xbc\x92\x90@\xc4(\xa4\xbbD\xabY\\'
    review_sentence_0 = module_0.ReviewSentence(bytes_0, bytes_0, polarity=bytes_0)
    assert review_sentence_0.detail == ''
    assert f'{type(module_0.ReviewSentence.parse).__module__}.{type(module_0.ReviewSentence.parse).__qualname__}' == 'builtins.method'
    review_sentence_0.to_row()