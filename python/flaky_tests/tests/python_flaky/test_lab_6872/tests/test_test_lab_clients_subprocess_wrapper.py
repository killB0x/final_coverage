# Automatically generated by Pynguin.
import pytest
import test_lab.clients.subprocess_wrapper as module_0

def test_case_0():
    list_0 = []
    with pytest.raises(AssertionError):
        module_0.SubprocessWrapper(list_0)

def test_case_1():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.SubprocessWrapper(bool_0)

def test_case_2():
    str_0 = 'id'
    subprocess_wrapper_0 = module_0.SubprocessWrapper(str_0)
    assert f'{type(subprocess_wrapper_0).__module__}.{type(subprocess_wrapper_0).__qualname__}' == 'test_lab.clients.subprocess_wrapper.SubprocessWrapper'
    assert subprocess_wrapper_0.arguments == ['id']
    assert f'{type(subprocess_wrapper_0.process).__module__}.{type(subprocess_wrapper_0.process).__qualname__}' == 'subprocess.Popen'
    assert subprocess_wrapper_0.out == ''
    assert subprocess_wrapper_0.err == ''
    assert subprocess_wrapper_0.code == 0

def test_case_3():
    str_0 = 'id'
    subprocess_wrapper_0 = module_0.SubprocessWrapper(str_0)
    assert f'{type(subprocess_wrapper_0).__module__}.{type(subprocess_wrapper_0).__qualname__}' == 'test_lab.clients.subprocess_wrapper.SubprocessWrapper'
    assert subprocess_wrapper_0.arguments == ['id']
    assert f'{type(subprocess_wrapper_0.process).__module__}.{type(subprocess_wrapper_0.process).__qualname__}' == 'subprocess.Popen'
    assert subprocess_wrapper_0.out == ''
    assert subprocess_wrapper_0.err == ''
    assert subprocess_wrapper_0.code == 0
    var_0 = subprocess_wrapper_0.call()
    assert var_0 == 0
    assert subprocess_wrapper_0.out == 'uid=0(root) gid=0(root) groups=0(root)\n'

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'id'
    list_0 = [str_0, str_0, str_0]
    list_1 = [str_0]
    subprocess_wrapper_0 = module_0.SubprocessWrapper(list_0)
    assert f'{type(subprocess_wrapper_0).__module__}.{type(subprocess_wrapper_0).__qualname__}' == 'test_lab.clients.subprocess_wrapper.SubprocessWrapper'
    assert subprocess_wrapper_0.arguments == ['id', 'id', 'id']
    assert f'{type(subprocess_wrapper_0.process).__module__}.{type(subprocess_wrapper_0.process).__qualname__}' == 'subprocess.Popen'
    assert subprocess_wrapper_0.out == ''
    assert subprocess_wrapper_0.err == ''
    assert subprocess_wrapper_0.code == 0
    var_0 = subprocess_wrapper_0.call()
    assert var_0 == 1
    assert subprocess_wrapper_0.err == 'id: ‘id’: no such user\nid: ‘id’: no such user\n'
    assert subprocess_wrapper_0.code == 1
    var_0.warning(list_1, *list_1)