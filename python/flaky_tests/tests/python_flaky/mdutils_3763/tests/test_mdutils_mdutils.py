# Automatically generated by Pynguin.
import pytest
import mdutils.mdutils as module_0
import mdutils.tools.Image as module_1
import mdutils.tools.Html as module_2

def test_case_0():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.new_header(none_type_0, md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    md_utils_0.create_md_file()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_line()
    assert var_1 == '\n\n  \n'
    assert md_utils_0.file_data_text == '\n\n  \n'
    var_2 = md_utils_0.new_inline_image(var_1, var_1)
    assert var_2 == '![\n\n  \n](\n\n  \n)'
    var_1.choose_header(var_2, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    md_utils_0.new_table_of_contents(none_type_0, md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_line(align=md_utils_0)
    assert var_0 == '  \n'
    assert md_utils_0.file_data_text == '  \n'
    md_utils_0.write(md_utils_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_0 == '\n|\n'
    assert md_utils_0.file_data_text == '\n|\n'
    md_utils_0.insert_code(md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=dict_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_1 == '\n|\n'
    assert md_utils_0.file_data_text == '\n\n\n|\n'
    var_2 = md_utils_0.new_table(bool_0, bool_0, dict_0, marker=var_0)
    assert md_utils_0.file_data_text == '\n|\n\n|\n'
    var_0.new_header(var_1, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.write(md_utils_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_line()
    assert var_0 == '  \n'
    assert md_utils_0.file_data_text == '  \n'
    md_utils_0.new_header(var_0, md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.create_marker(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.new_table_of_contents(none_type_0, marker=md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.new_paragraph(none_type_0, md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_table_of_contents()
    assert var_0 == '\nTable of contents\n=================\n\n'
    assert md_utils_0.table_of_contents == '\nTable of contents\n=================\n\n'
    md_utils_0.new_line(md_utils_0, color=var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_table_of_contents()
    assert var_0 == '\nTable of contents\n=================\n\n'
    assert md_utils_0.table_of_contents == '\nTable of contents\n=================\n\n'
    var_1 = md_utils_0.new_line(bold_italics_code=var_0)
    assert var_1 == '  \n**````**'
    assert md_utils_0.file_data_text == '  \n**````**'
    float_0 = -128.5
    md_utils_0.new_inline_image(var_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.new_inline_link(md_utils_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_0 == '\n|\n'
    assert md_utils_0.file_data_text == '\n|\n'
    md_utils_0.new_inline_link(var_0, dict_0, align=var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=dict_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_1 == '\n|\n'
    assert md_utils_0.file_data_text == '\n\n\n|\n'
    none_type_0 = None
    image_0 = module_1.Image(none_type_0)
    var_2 = md_utils_0.new_list(var_1)
    assert md_utils_0.file_data_text == '\n\n\n|\n\n- \n\n- |\n- \n\n'
    var_2.insert_code(image_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_line()
    assert var_0 == '  \n'
    assert md_utils_0.file_data_text == '  \n'
    var_1 = md_utils_0.new_inline_image(var_0, var_0)
    assert var_1 == '![  \n](  \n)'
    var_2 = module_2.SizeBadFormat(md_utils_0)
    md_utils_0.new_inline_link(var_2, bold_italics_code=var_2, align=var_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.new_reference_image(md_utils_0, none_type_0, md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=dict_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_1 == '\n|\n'
    assert md_utils_0.file_data_text == '\n\n\n|\n'
    bool_1 = False
    md_utils_0.new_checkbox_list(bool_0, bool_1)

def test_case_21():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    with pytest.raises(TypeError):
        md_utils_0.new_reference_link(none_type_0, none_type_0, align=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.read_md_file(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph()
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_reference_link(none_type_0, var_0)
    assert var_1 == '[\n\n]'
    var_0.read_md_file(var_1)

def test_case_24():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.write(color=none_type_0)
    assert var_0 == ''
    var_1 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_1 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_2 = md_utils_0.new_reference_link(var_1, var_1)
    assert var_2 == '[\n\n]'
    with pytest.raises(TypeError):
        md_utils_0.new_reference_link(md_utils_0, md_utils_0, var_1, align=var_2)

def test_case_25():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_line()
    assert var_1 == '\n\n  \n'
    assert md_utils_0.file_data_text == '\n\n  \n'
    with pytest.raises(TypeError):
        md_utils_0.new_reference_link(var_0, md_utils_0, var_1, md_utils_0)

def test_case_26():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    with pytest.raises(TypeError):
        md_utils_0.new_reference_link(var_0, none_type_0, none_type_0, md_utils_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.write(color=none_type_0)
    assert var_0 == ''
    md_utils_0.new_table_of_contents(md_utils_0, md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_0 == '\n|\n'
    assert md_utils_0.file_data_text == '\n|\n'
    md_utils_0.new_header(md_utils_0, bool_0, add_table_of_contents=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(align=md_utils_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_paragraph(bold_italics_code=none_type_0, align=none_type_0)
    assert var_1 == '\n\n\n\n'
    assert md_utils_0.file_data_text == '\n\n\n\n'
    var_2 = md_utils_0.new_reference_link(var_1, var_1)
    assert var_2 == '[\n\n\n\n]'
    var_0.new_table_of_contents(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.write(bold_italics_code=md_utils_0, marker=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.write(color=none_type_0, marker=md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_paragraph(bold_italics_code=dict_0)
    assert var_0 == '\n\n'
    assert md_utils_0.file_data_text == '\n\n'
    var_1 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_1 == '\n|\n'
    assert md_utils_0.file_data_text == '\n\n\n|\n'
    var_2 = md_utils_0.new_paragraph(color=var_0)
    assert var_2 == '\n\n\n|\n\n\n<font color="\n\n"></font>'
    assert md_utils_0.file_data_text == '\n\n\n|\n\n\n<font color="\n\n"></font>'
    bytes_0 = b'\x16\xb3\xde'
    var_2.new_paragraph(bool_0, color=bytes_0, align=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    md_utils_0 = module_0.MdUtils(none_type_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is None
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.write(color=none_type_0, align=md_utils_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    md_utils_0 = module_0.MdUtils(bool_0, author=bool_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is True
    assert md_utils_0.author is True
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    md_utils_0.new_header(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    dict_0 = {}
    md_utils_0 = module_0.MdUtils(dict_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name == {}
    assert md_utils_0.author == ''
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    var_0 = md_utils_0.new_table(bool_0, bool_0, dict_0)
    assert var_0 == '\n|\n'
    assert md_utils_0.file_data_text == '\n|\n'
    bool_0.new_header(var_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = True
    md_utils_0 = module_0.MdUtils(bool_0, author=bool_0)
    assert f'{type(md_utils_0).__module__}.{type(md_utils_0).__qualname__}' == 'mdutils.mdutils.MdUtils'
    assert md_utils_0.file_name is True
    assert md_utils_0.author is True
    assert f'{type(md_utils_0.header).__module__}.{type(md_utils_0.header).__qualname__}' == 'mdutils.tools.Header.Header'
    assert md_utils_0.title == '\n\n\n'
    assert md_utils_0.table_of_contents == ''
    assert md_utils_0.file_data_text == ''
    assert f'{type(md_utils_0.reference).__module__}.{type(md_utils_0.reference).__qualname__}' == 'mdutils.tools.Link.Reference'
    assert f'{type(md_utils_0.image).__module__}.{type(md_utils_0.image).__qualname__}' == 'mdutils.tools.Image.Image'
    int_0 = 2
    md_utils_0.new_header(int_0, int_0, md_utils_0)