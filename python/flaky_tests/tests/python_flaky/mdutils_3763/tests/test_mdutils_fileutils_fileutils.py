# Automatically generated by Pynguin.
import pytest
import mdutils.fileutils.fileutils as module_0

def test_case_0():
    mark_down_file_0 = module_0.MarkDownFile()

def test_case_1():
    str_0 = 'Jx'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == 'Jx.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'

def test_case_2():
    str_0 = 'Jx'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == 'Jx.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'
    var_0 = mark_down_file_0.read_file(str_0)
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'Jx'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == 'Jx.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'
    mark_down_file_0.append_end(mark_down_file_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Jx'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == 'Jx.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'
    mark_down_file_0.rewrite_all_file(mark_down_file_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Jx'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == 'Jx.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'
    mark_down_file_0.append_after_second_line(mark_down_file_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '.md'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == '.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'
    var_0 = mark_down_file_0.read_file(str_0)
    assert var_0 == ''
    mark_down_file_0.rewrite_all_file(mark_down_file_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '.md'
    mark_down_file_0 = module_0.MarkDownFile(str_0)
    assert f'{type(mark_down_file_0).__module__}.{type(mark_down_file_0).__qualname__}' == 'mdutils.fileutils.fileutils.MarkDownFile'
    assert mark_down_file_0.file_name == '.md'
    assert f'{type(mark_down_file_0.file).__module__}.{type(mark_down_file_0.file).__qualname__}' == '_io.TextIOWrapper'
    mark_down_file_0.append_end(mark_down_file_0)