# Automatically generated by Pynguin.
import pytest
import mdutils.tools.Html as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '<font color="'
    html_0 = module_0.Html()
    assert f'{type(module_0.Html.image).__module__}.{type(module_0.Html.image).__qualname__}' == 'builtins.method'
    str_1 = html_0.paragraph(str_0)
    assert str_1 == '<p>\n    <font color="\n</p>'
    int_0 = -1517
    module_0.HtmlSize(**int_0)

def test_case_1():
    html_0 = module_0.Html()
    assert f'{type(module_0.Html.image).__module__}.{type(module_0.Html.image).__qualname__}' == 'builtins.method'
    with pytest.raises(KeyError):
        html_0.paragraph(html_0, html_0)

def test_case_2():
    html_size_0 = module_0.HtmlSize()
    assert f'{type(module_0.HtmlSize.size_to_width_and_height).__module__}.{type(module_0.HtmlSize.size_to_width_and_height).__qualname__}' == 'builtins.method'

def test_case_3():
    set_0 = set()
    size_bad_format_0 = module_0.SizeBadFormat(set_0)
    str_0 = '<p align="{}">\n    {}\n</p>'
    html_0 = module_0.Html()
    assert f'{type(module_0.Html.image).__module__}.{type(module_0.Html.image).__qualname__}' == 'builtins.method'
    with pytest.raises(KeyError):
        html_0.paragraph(str_0, str_0)

def test_case_4():
    str_0 = '!M'
    size_bad_format_0 = module_0.SizeBadFormat(str_0)
    html_0 = module_0.Html()
    assert f'{type(module_0.Html.image).__module__}.{type(module_0.Html.image).__qualname__}' == 'builtins.method'
    str_1 = html_0.paragraph(str_0)
    assert str_1 == '<p>\n    !M\n</p>'
    str_2 = 'left'
    str_3 = html_0.paragraph(str_2, str_2)
    assert str_3 == '<p align="left">\n    left\n</p>'
    html_1 = module_0.Html()
    str_4 = 'ny)2WZ{kC^'
    str_5 = html_0.paragraph(str_4)
    assert str_5 == '<p>\n    ny)2WZ{kC^\n</p>'
    str_6 = 'X'
    str_7 = 'W'
    size_bad_format_1 = module_0.SizeBadFormat(str_6)
    str_8 = 'ar<^s)#k_!'
    dict_0 = {str_7: size_bad_format_1, str_8: str_6, str_3: str_4}
    str_9 = '~rJOWnq\t!'
    str_10 = html_1.paragraph(str_7)
    assert str_10 == '<p>\n    W\n</p>'
    size_bad_format_2 = module_0.SizeBadFormat(dict_0)
    html_2 = module_0.Html()
    str_11 = html_2.paragraph(str_9)
    assert str_11 == '<p>\n    ~rJOWnq\t!\n</p>'