# Automatically generated by Pynguin.
import pytest
import mdutils.tools.Header as module_0

def test_case_0():
    header_0 = module_0.Header()

@pytest.mark.xfail(strict=True)
def test_case_1():
    header_0 = module_0.Header()
    none_type_0 = None
    header_0.header_anchor(none_type_0)

def test_case_2():
    header_0 = module_0.Header()
    str_0 = 'ET'
    var_0 = header_0.atx_level_1(str_0)
    assert var_0 == '\n# ET\n'
    var_1 = header_0.atx_level_3(str_0)
    assert var_1 == '\n### ET\n'
    with pytest.raises(ValueError):
        header_0.choose_header(str_0, header_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    header_0 = module_0.Header()
    header_0.atx_level_3(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    header_0 = module_0.Header()
    int_0 = 4
    header_0.choose_header(int_0, header_0)

def test_case_5():
    str_0 = '/\\;6)BM"'
    header_0 = module_0.Header()
    var_0 = header_0.header_anchor(str_0, str_0)
    assert var_0 == '[/\\;6)BM"](/\\;6)bm")'
    var_1 = header_0.atx_level_5(var_0)
    assert var_1 == '\n##### [/\\;6)BM"](/\\;6)bm")\n'

def test_case_6():
    str_0 = '/\\;6)BM"'
    header_0 = module_0.Header()
    var_0 = header_0.header_anchor(str_0, str_0)
    assert var_0 == '[/\\;6)BM"](/\\;6)bm")'
    var_1 = header_0.atx_level_6(var_0)
    assert var_1 == '\n###### [/\\;6)BM"](/\\;6)bm")\n'
    var_2 = header_0.atx_level_2(var_0)
    assert var_2 == '\n## [/\\;6)BM"](/\\;6)bm")\n'
    with pytest.raises(ValueError):
        header_0.choose_header(var_0, str_0)

def test_case_7():
    str_0 = '/\\;6)BM"'
    header_0 = module_0.Header()
    var_0 = header_0.setext_level_1(str_0)
    assert var_0 == '\n/\\;6)BM"\n========\n'
    var_1 = header_0.header_anchor(str_0, str_0)
    assert var_1 == '[/\\;6)BM"](/\\;6)bm")'
    with pytest.raises(ValueError):
        header_0.choose_header(header_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '/\\;6)BM"'
    header_0 = module_0.Header()
    var_0 = header_0.header_anchor(str_0, str_0)
    assert var_0 == '[/\\;6)BM"](/\\;6)bm")'
    var_1 = header_0.atx_level_2(var_0)
    assert var_1 == '\n## [/\\;6)BM"](/\\;6)bm")\n'
    var_1.header_anchor(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    header_0 = module_0.Header()
    str_0 = 'setext'
    int_0 = 2
    var_0 = header_0.atx_level_2(str_0)
    assert var_0 == '\n## setext\n'
    var_1 = header_0.choose_header(int_0, str_0, str_0)
    assert var_1 == '\nsetext\n------\n'
    dict_0 = {var_1: int_0, var_1: int_0, var_1: var_1}
    var_1.choose_header(var_1, var_1, dict_0)

def test_case_10():
    bool_0 = False
    header_0 = module_0.Header()
    with pytest.raises(ValueError):
        header_0.choose_header(bool_0, header_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    header_0 = module_0.Header()
    header_0.choose_header(bool_0, bool_0)

def test_case_12():
    str_0 = '/\\;6)BM"'
    header_0 = module_0.Header()
    var_0 = header_0.header_anchor(str_0, str_0)
    assert var_0 == '[/\\;6)BM"](/\\;6)bm")'

@pytest.mark.xfail(strict=True)
def test_case_13():
    header_0 = module_0.Header()
    bytes_0 = b'\xebd\x05\xe5\xca\xd6\xb8\x01\x0bNw'
    header_0.choose_header(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    header_0 = module_0.Header()
    int_0 = 2
    header_0.choose_header(int_0, int_0)

def test_case_15():
    str_0 = '#/d'
    header_0 = module_0.Header()
    var_0 = header_0.header_anchor(str_0, str_0)
    assert var_0 == '[#/d](##/d)'
    var_1 = header_0.atx_level_2(var_0)
    assert var_1 == '\n## [#/d](##/d)\n'
    with pytest.raises(ValueError):
        header_0.choose_header(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    header_0 = module_0.Header()
    int_0 = 5
    header_0.choose_header(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    header_0 = module_0.Header()
    int_0 = 6
    header_0.choose_header(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    header_0 = module_0.Header()
    int_0 = 3
    header_0.choose_header(int_0, int_0)

def test_case_19():
    header_0 = module_0.Header()
    str_0 = 'setext'
    with pytest.raises(ValueError):
        header_0.choose_header(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    header_0 = module_0.Header()
    str_0 = 'setext'
    int_0 = 1
    header_1 = module_0.Header()
    var_0 = header_0.atx_level_1(str_0)
    assert var_0 == '\n# setext\n'
    var_1 = header_1.choose_header(int_0, str_0, str_0)
    assert var_1 == '\nsetext\n======\n'
    dict_0 = {var_1: int_0, header_1: int_0, var_1: header_1}
    var_1.choose_header(var_1, var_1, dict_0)