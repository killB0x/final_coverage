# Automatically generated by Pynguin.
import pytest
import FileTransforms.FixedWidthTextParser as module_0
import struct as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"H\x04\x16\xb2'G\xb0"
    module_0.FixedWidthTextParser(bytes_0, bytes_0)

def test_case_1():
    set_0 = set()
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(set_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == 0
    assert fixed_width_text_parser_0.field_widths == []

def test_case_2():
    dict_0 = {}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_0)
    assert fixed_width_text_parser_0.field_widths_length == {}
    assert fixed_width_text_parser_0.field_widths == {}

def test_case_3():
    bytes_0 = b'\x8f*'
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(bytes_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == 185
    assert fixed_width_text_parser_0.field_widths == [143, 42]

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        '
    bytes_0 = b'\x8f\xa3*'
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(bytes_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == 348
    assert fixed_width_text_parser_0.field_widths == [143, 163, 42]
    var_0 = fixed_width_text_parser_0.read_fixed_width(str_0)
    fixed_width_text_parser_0.read_fixed_width(var_0)

def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(tuple_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == 2
    assert fixed_width_text_parser_0.field_widths == [True, True]
    str_0 = '\x0c'
    var_0 = fixed_width_text_parser_0.read_fixed_width(str_0)

def test_case_6():
    bytes_0 = b'\xa3\xb8'
    dict_0 = {}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_0, raise_errors=bytes_0)
    assert fixed_width_text_parser_0.field_widths_length == {}
    assert fixed_width_text_parser_0.field_widths == {}
    with pytest.raises(ValueError):
        fixed_width_text_parser_0.read_fixed_width(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    set_0 = set()
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(set_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == 0
    assert fixed_width_text_parser_0.field_widths == []
    fixed_width_text_parser_0.read_file(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ')*02/Q|sN+{H;'
    str_1 = 'o%|Pv'
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(tuple_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == 2
    assert fixed_width_text_parser_0.field_widths == [True, True]
    str_2 = ''
    var_0 = fixed_width_text_parser_0.read_fixed_width(str_2)
    var_1 = fixed_width_text_parser_0.read_fixed_width(str_1)
    var_1.read_fixed_width(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\xffE\x8e\x8eHS\x18\xb3"/\x1b\x0c\x7fa\xb0\xce'
    int_0 = -872
    list_0 = [int_0, int_0, int_0, int_0]
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(list_0, raise_errors=list_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert fixed_width_text_parser_0.parse_dict == {}
    assert fixed_width_text_parser_0.raise_errors == [-872, -872, -872, -872]
    assert fixed_width_text_parser_0.field_widths_length == 3488
    assert fixed_width_text_parser_0.field_widths == [-872, -872, -872, -872]
    fixed_width_text_parser_0.read_fixed_width(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 1171
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    error_0 = module_1.error(*list_0)
    complex_0 = (685-275.7j)
    str_0 = ' '
    dict_1 = {}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_1, raise_errors=dict_1)
    assert fixed_width_text_parser_0.field_widths_length == {}
    assert fixed_width_text_parser_0.field_widths == {}
    var_0 = fixed_width_text_parser_0.read_fixed_width(str_0)
    var_0.read_file(complex_0)

def test_case_11():
    bytes_0 = b'\xa5\xa7'
    str_0 = '-3[\x0ct*o'
    dict_0 = {}
    dict_1 = {str_0: dict_0}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_1, raise_errors=bytes_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert f'{type(fixed_width_text_parser_0.parse_dict).__module__}.{type(fixed_width_text_parser_0.parse_dict).__qualname__}' == 'builtins.dict'
    assert len(fixed_width_text_parser_0.parse_dict) == 1
    assert fixed_width_text_parser_0.raise_errors == b'\xa5\xa7'
    assert fixed_width_text_parser_0.field_widths_length == {'-3[\x0ct*o': 0}
    assert fixed_width_text_parser_0.field_widths == {'-3[\x0ct*o': {}}
    with pytest.raises(ValueError):
        fixed_width_text_parser_0.read_fixed_width(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        '
    bytes_0 = b'\xa3\xb8'
    str_1 = ''
    dict_0 = {str_1: str_1, str_1: bytes_0, str_0: bytes_0, bytes_0: str_1}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert f'{type(fixed_width_text_parser_0.parse_dict).__module__}.{type(fixed_width_text_parser_0.parse_dict).__qualname__}' == 'builtins.dict'
    assert len(fixed_width_text_parser_0.parse_dict) == 3
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == {'': 347, '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        ': 347, b'\xa3\xb8': 0}
    assert fixed_width_text_parser_0.field_widths == {'': b'\xa3\xb8', '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        ': b'\xa3\xb8', b'\xa3\xb8': ''}
    fixed_width_text_parser_0.read_fixed_width(str_0)

def test_case_13():
    str_0 = '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        '
    bytes_0 = b'\xa3\xb8'
    str_1 = ''
    dict_0 = {str_0: bytes_0, str_1: str_0, str_0: bytes_0, str_1: str_1}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert f'{type(fixed_width_text_parser_0.parse_dict).__module__}.{type(fixed_width_text_parser_0.parse_dict).__qualname__}' == 'builtins.dict'
    assert len(fixed_width_text_parser_0.parse_dict) == 2
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == {'\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        ': 347, '': 0}
    assert fixed_width_text_parser_0.field_widths == {'\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        ': b'\xa3\xb8', '': ''}
    with pytest.raises(ValueError):
        fixed_width_text_parser_0.read_fixed_width(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        '
    bytes_0 = b''
    str_1 = ''
    dict_0 = {str_1: str_1, str_1: bytes_0, str_0: bytes_0, bytes_0: str_1}
    fixed_width_text_parser_0 = module_0.FixedWidthTextParser(dict_0)
    assert f'{type(fixed_width_text_parser_0).__module__}.{type(fixed_width_text_parser_0).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    assert fixed_width_text_parser_0.parse_func is None
    assert f'{type(fixed_width_text_parser_0.parse_dict).__module__}.{type(fixed_width_text_parser_0.parse_dict).__qualname__}' == 'builtins.dict'
    assert len(fixed_width_text_parser_0.parse_dict) == 3
    assert fixed_width_text_parser_0.raise_errors is True
    assert fixed_width_text_parser_0.field_widths_length == {'': 0, '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        ': 0, b'': 0}
    assert fixed_width_text_parser_0.field_widths == {'': b'', '\n       Parse a single line of input with the field widths values.\n\n        :param s: A single line of text that needs to be seXarated\n        :returns: A list of values that are parsed from the input text based on the field widths.\n                  This list is empty if a field widths dictionary cannot be matched to the input text.\n        ': b'', b'': ''}
    var_0 = fixed_width_text_parser_0.read_fixed_width(str_0)
    fixed_width_text_parser_0.read_fixed_width(fixed_width_text_parser_0)