# Automatically generated by Pynguin.
import pytest
import FileTransforms.Result as module_0
import FileTransforms.FileType as module_1

def test_case_0():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_1():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3
    var_0 = base_output_file_0.add_row(base_output_file_0)
    bool_0 = base_output_file_0.write_to_file()
    assert bool_0 is True
    assert base_output_file_0.file_path == './default.csv'

def test_case_2():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3
    bool_0 = base_output_file_0.write_to_file()
    assert bool_0 is False
    assert base_output_file_0.file_path == './default.csv'

def test_case_3():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3
    var_0 = base_output_file_0.add_row(base_output_file_0)
    bool_0 = base_output_file_0.write_to_file()
    assert bool_0 is True
    assert base_output_file_0.file_path == './default.csv'
    bool_1 = base_output_file_0.write_to_file()
    assert bool_1 is True

@pytest.mark.xfail(strict=True)
def test_case_4():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    var_0 = base_result_0.add_file(base_result_0, none_type_0)
    assert var_0.file_path == ''
    assert var_0.sheet_name == 'Sheet 1'
    assert var_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    base_result_0.write_all(base_result_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3
    var_0 = base_output_file_0.__repr__()
    assert var_0 == 'filename: default.csv, file_path: , file_type: FileType.CSV, len(data): 0'
    base_result_0 = module_0.BaseResult()
    assert base_result_0.id == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = '\n        Call the processing functions that run after the headers have been parsed\n        :param data: Preprocessed input data\n        :return: Data that has been sequentially processed by the list of functions\n        '
    var_1 = base_result_0.add_file(common_name=str_0)
    assert var_1.filename == 'default.csv'
    assert var_1.file_path == ''
    assert var_1.sheet_name == 'Sheet 1'
    assert var_1.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    base_result_1 = module_0.BaseResult()
    assert base_result_1.id == 0
    assert base_result_1.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_output_file_1 = module_0.BaseOutputFile()
    assert base_output_file_1.filename == 'default.csv'
    assert base_output_file_1.file_path == ''
    assert base_output_file_1.sheet_name == 'Sheet 1'
    assert base_output_file_1.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    var_2 = base_result_0.write_all()
    assert var_1.file_path == './default.csv'
    str_1 = '\n        Run the sequence of processing functions before writing the data to disk\n\n        :param data: Data to be processed\n        :return: Processed data\n        '
    base_result_0.get_file(str_1)

@pytest.mark.xfail(strict=True)
def test_case_6():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_result_0.__repr__()
    assert var_0 == 'canceled: False, output_files: OrderedDict()'
    var_1 = base_result_0.write_all()
    var_2 = base_result_0.write_all()
    var_3 = base_result_0.write_all()
    var_2.write_to_file()

def test_case_7():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3

@pytest.mark.xfail(strict=True)
def test_case_8():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_result_0.write_all()
    var_1 = base_result_0.add_text_file()
    assert var_1.filename == 'default.csv'
    assert var_1.file_path == ''
    assert var_1.sheet_name == 'Sheet 1'
    assert var_1.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    var_0.write_to_file()

@pytest.mark.xfail(strict=True)
def test_case_9():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3
    base_result_0 = module_0.BaseResult()
    assert base_result_0.id == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_1 = module_0.BaseResult()
    assert base_result_1.id == 0
    assert base_result_1.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = 'N>V8#p#BB'
    base_result_0.get_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    base_output_file_0 = module_0.BaseOutputFile()
    assert f'{type(base_output_file_0).__module__}.{type(base_output_file_0).__qualname__}' == 'FileTransforms.Result.BaseOutputFile'
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_type == module_1.FileType.CSV
    assert base_output_file_0.data == []
    assert base_output_file_0.headers is None
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    assert f'{type(base_output_file_0.write_methods).__module__}.{type(base_output_file_0.write_methods).__qualname__}' == 'builtins.dict'
    assert len(base_output_file_0.write_methods) == 3
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    base_output_file_0.__getitem__(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_output_file_0 = module_0.BaseOutputFile()
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    var_0 = base_output_file_0.__repr__()
    assert var_0 == 'filename: default.csv, file_path: , file_type: FileType.CSV, len(data): 0'
    file_type_0 = module_1.FileType.XLSX
    var_1 = base_result_0.add_file(headers=base_output_file_0, file_type=file_type_0)
    assert var_1.filename == 'default.csv'
    assert var_1.file_path == ''
    assert var_1.sheet_name == 'Sheet 1'
    assert var_1.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    str_0 = 'M!.(e\'F&cGj"lT{v'
    tuple_0 = (var_1, str_0)
    var_2 = var_1.__getitem__(tuple_0)
    base_result_0.write_all(str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_result_0.add_file(headers=base_result_0)
    assert var_0.filename == 'default.csv'
    assert var_0.file_path == ''
    assert var_0.sheet_name == 'Sheet 1'
    assert var_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    str_0 = '\n        Processes each line of the input file and runs any existing input validation functions.\n\n        :param data: List of rows from the input file\n        :returns: Validated and modified input data\n        '
    base_result_0.write_all(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_output_file_0 = module_0.BaseOutputFile()
    assert base_output_file_0.filename == 'default.csv'
    assert base_output_file_0.file_path == ''
    assert base_output_file_0.sheet_name == 'Sheet 1'
    assert base_output_file_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    var_0 = base_output_file_0.add_row(base_output_file_0)
    var_1 = base_result_0.add_file(headers=base_output_file_0, file_type=var_0)
    assert var_1.filename == 'default.csv'
    assert var_1.file_path == ''
    assert var_1.sheet_name == 'Sheet 1'
    assert var_1.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    str_0 = 'M!.(e\'F&cGj"lT{v'
    var_2 = base_result_0.write_all(str_0)
    assert var_1.file_path == 'M!.(e\'F&cGj"lT{v/default.csv'
    bool_0 = base_output_file_0.write_to_file()
    assert bool_0 is True
    assert base_output_file_0.file_path == './default.csv'
    base_result_1 = module_0.BaseResult()
    assert base_result_1.id == 0
    assert base_result_1.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = False
    int_0 = -1202
    var_3 = base_output_file_0.add_row(bool_1)
    tuple_0 = (bool_1, int_0)
    var_4 = base_result_0.add_file(file_type=var_3)
    assert var_4.filename == 'default.csv'
    assert var_4.file_path == ''
    assert var_4.sheet_name == 'Sheet 1'
    base_output_file_0.__getitem__(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_result_0.add_text_file()
    assert var_0.filename == 'default.csv'
    assert var_0.file_path == ''
    assert var_0.sheet_name == 'Sheet 1'
    assert var_0.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    var_1 = var_0.add_row(var_0)
    bool_0 = var_0.write_to_file()
    assert bool_0 is True
    assert var_0.file_path == './default.csv'
    base_result_1 = module_0.BaseResult()
    assert base_result_1.id == 0
    assert base_result_1.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_1 = False
    int_0 = -1202
    var_2 = var_0.add_row(base_result_0)
    tuple_0 = (bool_1, int_0)
    var_3 = base_result_0.add_file(file_type=var_2)
    assert var_3.filename == 'default.csv'
    assert var_3.file_path == ''
    assert var_3.sheet_name == 'Sheet 1'
    assert var_3.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    var_0.__getitem__(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    base_result_0 = module_0.BaseResult()
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_result_0.__repr__()
    assert var_0 == 'canceled: False, output_files: OrderedDict()'
    var_1 = base_result_0.add_file(headers=var_0, file_type=var_0)
    assert var_1.filename == 'default.csv'
    assert var_1.file_type == 'canceled: False, output_files: OrderedDict()'
    assert var_1.headers == 'canceled: False, output_files: OrderedDict()'
    assert var_1.file_path == ''
    assert var_1.sheet_name == 'Sheet 1'
    assert var_1.output_options == {'delimiter': ',', 'quotechar': '"', 'quoting': 2}
    tuple_0 = (var_1, var_0)
    var_1.__getitem__(tuple_0)