# Automatically generated by Pynguin.
import pytest
import FileTransforms.Transform as module_0
import FileTransforms.FileType as module_1
import FileTransforms.header_utils as module_2
import difflib as module_3
import FileTransforms.csv_utils as module_4

def test_case_0():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    module_0.SingleLineFixedWidthTransform(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'e{d(/'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_transform_0.run_processing_funcs(str_0)
    assert var_0 == 'e{d(/'
    var_1 = base_transform_0.get_header_idx(str_0)
    assert var_1 == -1
    module_0.BaseTransform(var_0, var_0)

def test_case_3():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = '-dRB$x'
    var_0 = base_transform_0.get_header_idx(str_0)
    assert var_0 == -1

def test_case_4():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = 'l@=IR6y7-y W9rF( v'
    var_0 = base_transform_0.normalize_header(str_0)
    assert var_0 == 'L@=IR6Y7-Y W9RF( V'
    var_1 = base_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'

@pytest.mark.xfail(strict=True)
def test_case_5():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    base_transform_0.remove_token_from_headers_map(base_transform_0, none_type_0)

def test_case_6():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    base_result_0 = base_transform_0.run_processing_funcs(none_type_0)

def test_case_7():
    str_0 = '\x0b+"TID%:ehzm^}ug'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = base_transform_0.run(str_0)
    assert base_transform_0.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_0.headers == ['']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0009679794311523438, abs=0.01, rel=0.01)

def test_case_8():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = 'B>\tB;`Xy<dmO|M.^'
    dict_0 = {str_0: str_0}
    str_1 = 'l@=IR6y7-y W9rF( v'
    var_0 = base_transform_0.remove_token_from_headers_map(dict_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    str_0 = '\x0b+"TI\\%H:ehzm^}u\r8-5'
    list_0 = [dict_0]
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_0)
    assert f'{type(fixed_width_transform_0).__module__}.{type(fixed_width_transform_0).__qualname__}' == 'FileTransforms.Transform.FixedWidthTransform'
    assert fixed_width_transform_0.result == {}
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    fixed_width_transform_0.run(list_0, list_0, list_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    module_0.SingleLineFixedWidthTransform()

def test_case_11():
    str_0 = '\x0b+"TID%:ehzm^}ug'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_transform_0.normalize_header(str_0)
    assert var_0 == '+"TID%:EHZM^}UG'
    base_transform_1 = module_0.BaseTransform()
    assert f'{type(base_transform_1.result).__module__}.{type(base_transform_1.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = base_transform_0.run(str_0)
    assert base_transform_0.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_0.headers == ['']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0006527900695800781, abs=0.01, rel=0.01)
    bool_0 = base_transform_0.contains_headers(var_0)
    assert bool_0 is False

def test_case_12():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    var_0 = base_transform_0.run_processing_funcs(none_type_0)
    var_1 = base_transform_0.process_headers(var_0)
    assert base_transform_0.has_parsed_headers is True

def test_case_13():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    base_result_0 = base_transform_0.run(none_type_0)
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_14():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    base_result_0 = base_transform_0.run_pre_processing_funcs(none_type_0)

def test_case_15():
    str_0 = '|:\n3^"@%qf'
    list_0 = [str_0, str_0]
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = base_transform_0.run(file_paths=list_0)
    assert base_transform_0.current_file_path == '|:\n3^"@%qf'
    assert base_transform_0.headers == ['N', 'O', '', 'F', 'I', 'L', 'E', '', 'P', 'A', 'T', 'H', '', 'W', 'A', 'S', '', 'G', 'I', 'V', 'E', 'N', ',', '', 'S', 'O', '', 'T', 'H', 'E', '', 'O', 'U', 'T', 'P', 'U', 'T', '', 'F', 'I', 'L', 'E', '', 'I', 'S', '', 'A', 'T', '', '{', '}']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['|:\n3^"@%qf', '|:\n3^"@%qf']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0024704933166503906, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_16():
    dict_0 = {}
    str_0 = '|:\n3^"t%qf'
    list_0 = []
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_0 = fixed_width_transform_0.process_headers(list_0)
    assert fixed_width_transform_0.has_parsed_headers is True
    var_1 = fixed_width_transform_0.process_headers(str_0)
    assert var_1 == '|:\n3^"t%qf'
    fixed_width_transform_0.run(var_1, data=list_0)

def test_case_17():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    dict_0 = {base_transform_0: base_transform_0, base_transform_0: base_transform_0, base_transform_0: base_transform_0, base_transform_0: base_transform_0}
    dict_1 = base_transform_0.get_header_indices(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    dict_0 = {base_transform_0: base_transform_0, base_transform_0: base_transform_0, base_transform_0: base_transform_0, base_transform_0: base_transform_0}
    dict_1 = base_transform_0.get_header_indices(dict_0)
    base_transform_0.try_header_variations(dict_1, base_transform_0, base_transform_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '?w+PQ(2^'
    none_type_0 = None
    base_transform_0 = module_0.BaseTransform(none_type_0)
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_transform_0.try_header_variations(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = 'B>\tB;`Xy<dmO|M.^'
    dict_0 = {str_0: str_0}
    var_0 = base_transform_0.remove_token_from_headers_map(dict_0, str_0)
    base_transform_0.run(dict_0, dest_dir=str_0)

def test_case_21():
    str_0 = 'No file path was given, so the output file is at {}'
    str_1 = '|:\n3^"@%qf'
    list_0 = [str_0, str_1]
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_transform_1 = module_0.BaseTransform()
    assert f'{type(base_transform_1.result).__module__}.{type(base_transform_1.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = base_transform_1.run(file_paths=list_0)
    assert base_transform_1.current_file_path == '|:\n3^"@%qf'
    assert base_transform_1.headers == ['N']
    assert base_transform_1.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['No file path was given, so the output file is at {}', '|:\n3^"@%qf']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0009093284606933594, abs=0.01, rel=0.01)

def test_case_22():
    dict_0 = {}
    str_0 = ''
    list_0 = []
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_transform_0.normalize_header(str_0)
    assert var_0 == ''
    bool_0 = True
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_0)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.00010848045349121094, abs=0.01, rel=0.01)
    base_result_1 = base_transform_0.run(var_0, var_0)
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == []
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 0
    assert base_result_1.execution_time == pytest.approx(3.4332275390625e-05, abs=0.01, rel=0.01)
    var_1 = base_result_1.add_text_file()
    assert len(base_result_1.output_files) == 1

@pytest.mark.xfail(strict=True)
def test_case_23():
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = ''
    var_0 = base_transform_0.get_header_idx(str_0)
    assert var_0 == -1
    none_type_0 = None
    base_result_0 = base_transform_0.run(none_type_0)
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = base_result_0.write_all()
    list_0 = base_transform_0.parse_headers()
    list_1 = [base_result_0, base_result_0]
    base_transform_0.run(file_paths=list_1, data=var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    dict_0 = {}
    str_0 = '\x0b+"TI\\%H:ehzm^}u\r8-5'
    list_0 = module_2.enumerate_headers(dict_0, dict_0)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    fixed_width_transform_0.run(list_0, list_0, list_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_0 = {}
    str_0 = 'No file path was given, so the output file is at {}'
    list_0 = module_2.enumerate_headers(str_0, dict_0, str_0)
    list_1 = []
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_1)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    bool_0 = False
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_0)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.00035119056701660156, abs=0.01, rel=0.01)
    str_1 = 'ha\tg=LMr6Ft-4'
    fixed_width_transform_0.run(str_1, write_output=fixed_width_transform_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    dict_0 = {}
    str_0 = 'No file path was given, so the output file is at {}'
    list_0 = []
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=fixed_width_transform_0)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0005772113800048828, abs=0.01, rel=0.01)
    str_1 = 'XQ`g%3Yg{` 6xq'
    var_0 = base_transform_0.get_header_idx(str_1)
    assert var_0 == -1
    var_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    dict_0 = {}
    str_0 = 'o)~*]|\r^;v&S/TkI/6'
    list_0 = []
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *list_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    bool_0 = fixed_width_transform_0.contains_headers(list_0)
    list_0.run(list_0, write_output=str_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = 'No file path was given, so the output file is at {}'
    str_1 = '|:\n3^"@%qf'
    list_0 = [str_0, str_1]
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_transform_1 = module_0.BaseTransform()
    assert f'{type(base_transform_1.result).__module__}.{type(base_transform_1.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_transform_2 = module_0.BaseTransform()
    assert f'{type(base_transform_2.result).__module__}.{type(base_transform_2.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_2.output_name == 'transformed.csv'
    assert base_transform_2.input_delimiter == ','
    assert base_transform_2.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_0 = False
    base_transform_2.run(file_paths=base_transform_0, data=list_0, write_output=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = '\x0b+"TID%:ehzm^}ug'
    list_0 = []
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = base_transform_0.normalize_header(str_0)
    assert var_0 == '+"TID%:EHZM^}UG'
    str_1 = 'ha\t-g=LMr65t-4'
    base_transform_1 = module_0.BaseTransform()
    assert f'{type(base_transform_1.result).__module__}.{type(base_transform_1.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = base_transform_0.run(str_0)
    assert base_transform_0.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_0.headers == ['']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0005621910095214844, abs=0.01, rel=0.01)
    base_result_1 = base_transform_0.run(file_paths=list_0, data=base_transform_0)
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0005621910095214844, abs=0.01, rel=0.01)
    dict_0 = base_transform_0.get_header_indices(var_0)
    base_transform_2 = module_0.BaseTransform()
    assert base_transform_2.output_name == 'transformed.csv'
    assert base_transform_2.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_transform_1.run(file_paths=base_result_1, dest_dir=str_1)

def test_case_30():
    str_0 = '\x0b+"TID%:ehzm^}ug'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_0 = base_transform_0.run(str_0)
    assert base_transform_0.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_0.headers == ['']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0005362033843994141, abs=0.01, rel=0.01)
    list_0 = base_transform_0.parse_headers()

def test_case_31():
    dict_0 = {}
    str_0 = 'No file path was given, so the output file is at {}'
    str_1 = '\x0b+"TID%:ehzm^}ug'
    var_0 = module_3.get_close_matches(str_1, dict_0)
    base_transform_0 = module_0.BaseTransform(var_0)
    assert base_transform_0.result == []
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_1 = fixed_width_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'
    base_transform_1 = module_0.BaseTransform()
    assert f'{type(base_transform_1.result).__module__}.{type(base_transform_1.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_0 = fixed_width_transform_0.contains_headers(var_0)
    var_2 = base_transform_1.normalize_header(str_0)
    assert var_2 == 'NO FILE PATH WAS GIVEN, SO THE OUTPUT FILE IS AT {}'
    list_0 = fixed_width_transform_0.parse_headers()
    base_transform_2 = module_0.BaseTransform()
    assert f'{type(base_transform_2.result).__module__}.{type(base_transform_2.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_2.output_name == 'transformed.csv'
    assert base_transform_2.input_delimiter == ','
    assert base_transform_2.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    list_1 = fixed_width_transform_0.parse_headers()
    base_result_0 = base_transform_1.run(str_1)
    assert base_transform_1.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_1.headers == ['']
    assert base_transform_1.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0005595684051513672, abs=0.01, rel=0.01)
    base_result_1 = base_transform_1.run(file_paths=var_0, data=base_transform_1)
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0005595684051513672, abs=0.01, rel=0.01)
    base_result_2 = base_transform_2.run(file_paths=var_0, data=var_0)
    str_2 = '*C;u'
    dict_1 = {var_2: var_0, var_2: str_2}
    list_2 = base_transform_1.parse_headers()
    var_3 = base_transform_2.remove_token_from_headers_map(dict_1, var_2)
    var_4 = base_transform_2.try_header_variations(str_0, str_2, var_2)

@pytest.mark.xfail(strict=True)
def test_case_32():
    dict_0 = {}
    str_0 = '\x0b+"TID%:ehzm^}ug'
    var_0 = module_3.get_close_matches(str_0, dict_0)
    base_transform_0 = module_0.BaseTransform(var_0)
    assert base_transform_0.result == []
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_1 = fixed_width_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'
    base_transform_1 = module_0.BaseTransform()
    assert f'{type(base_transform_1.result).__module__}.{type(base_transform_1.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_1 = ''
    var_2 = base_transform_1.get_header_idx(str_1)
    assert var_2 == -1
    bool_0 = fixed_width_transform_0.contains_headers(var_0)
    var_3 = base_transform_1.normalize_header(str_1)
    assert var_3 == ''
    base_result_0 = fixed_width_transform_0.run(data=var_3, dest_dir=var_3, write_output=var_3)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(8.034706115722656e-05, abs=0.01, rel=0.01)
    dict_1 = fixed_width_transform_0.get_header_indices(var_3)
    list_0 = fixed_width_transform_0.parse_headers()
    base_transform_2 = module_0.BaseTransform()
    assert base_transform_2.output_name == 'transformed.csv'
    assert base_transform_2.input_delimiter == ','
    assert base_transform_2.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_1 = base_transform_1.run(str_0)
    assert base_transform_1.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_1.headers == ['']
    assert base_transform_1.has_parsed_headers is True
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0005776882171630859, abs=0.01, rel=0.01)
    base_result_2 = base_transform_1.run(file_paths=var_0, data=base_transform_1)
    assert f'{type(base_result_2).__module__}.{type(base_result_2).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_2.id == 0
    assert base_result_2.error is None
    assert base_result_2.extra == {}
    assert base_result_2.canceled is False
    assert base_result_2.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_2.output_files).__module__}.{type(base_result_2.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_2.output_files) == 1
    assert base_result_2.execution_time == pytest.approx(0.0005776882171630859, abs=0.01, rel=0.01)
    base_result_3 = base_transform_2.run(data=var_0, write_output=var_2)
    assert len(base_result_3.output_files) == 0
    str_2 = '*C;u'
    dict_2 = {str_1: var_0, str_1: str_2}
    var_4 = base_transform_2.remove_token_from_headers_map(dict_2, var_3)
    base_transform_2.try_header_variations(str_1, str_2, dict_1)

@pytest.mark.xfail(strict=True)
def test_case_33():
    dict_0 = {}
    str_0 = '\n    Splits single line text file into format that FixedWidthTransform can handle\n    '
    str_1 = '\x0b+"TID%:ehzm^}ug'
    var_0 = module_3.get_close_matches(str_1, dict_0)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_1 = fixed_width_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_2 = '+'
    var_2 = base_transform_0.get_header_idx(str_2)
    assert var_2 == -1
    bool_0 = fixed_width_transform_0.contains_headers(var_0)
    var_3 = base_transform_0.normalize_header(str_0)
    assert var_3 == 'SPLITS SINGLE LINE TEXT FILE INTO FORMAT THAT FIXEDWIDTHTRANSFORM CAN HANDLE'
    bool_1 = True
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_1)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0007753372192382812, abs=0.01, rel=0.01)
    module_2.enumerate_headers(base_result_0, bool_0)

def test_case_34():
    dict_0 = {}
    str_0 = 'No file path was given, so the output file is at {}'
    str_1 = '\x0b+"TID%:ehzm^}ug'
    var_0 = module_3.get_close_matches(str_1, dict_0)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_1 = fixed_width_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_2 = '+'
    base_result_0 = base_transform_0.run(dest_dir=str_0)
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 0
    assert base_result_0.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = module_3.get_close_matches(var_0, var_0)
    var_3 = base_transform_0.normalize_header(str_0)
    assert var_3 == 'NO FILE PATH WAS GIVEN, SO THE OUTPUT FILE IS AT {}'
    bool_0 = True
    base_result_1 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_0)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == []
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0005755424499511719, abs=0.01, rel=0.01)
    dict_1 = fixed_width_transform_0.get_header_indices(var_3)
    base_result_2 = base_transform_0.run(file_paths=var_0, data=base_transform_0)
    assert f'{type(base_result_2).__module__}.{type(base_result_2).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_2.id == 0
    assert base_result_2.error is None
    assert base_result_2.extra == {}
    assert base_result_2.canceled is False
    assert base_result_2.input_file_paths == []
    assert f'{type(base_result_2.output_files).__module__}.{type(base_result_2.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_2.output_files) == 0
    assert base_result_2.execution_time == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = base_transform_0.try_header_variations(str_2, dict_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_35():
    dict_0 = {}
    str_0 = 'No file path was given, so the output file is at {}'
    str_1 = '\x0b+"TID%:ehzm^}ug'
    var_0 = module_3.get_close_matches(str_1, dict_0)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_1 = fixed_width_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = base_transform_0.get_header_idx(var_1)
    assert var_2 == -1
    bool_0 = fixed_width_transform_0.contains_headers(var_0)
    var_3 = base_transform_0.normalize_header(str_0)
    assert var_3 == 'NO FILE PATH WAS GIVEN, SO THE OUTPUT FILE IS AT {}'
    bool_1 = True
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_1)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0005769729614257812, abs=0.01, rel=0.01)
    str_2 = 'ha\t-g=LSr65t-4'
    dict_1 = fixed_width_transform_0.get_header_indices(var_3)
    list_0 = fixed_width_transform_0.parse_headers()
    base_transform_1 = module_0.BaseTransform()
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_1 = base_transform_0.run(str_1)
    assert base_transform_0.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_0.headers == ['']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0005698204040527344, abs=0.01, rel=0.01)
    base_result_2 = base_transform_0.run(file_paths=var_0, data=base_transform_0)
    assert f'{type(base_result_2).__module__}.{type(base_result_2).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_2.id == 0
    assert base_result_2.error is None
    assert base_result_2.extra == {}
    assert base_result_2.canceled is False
    assert base_result_2.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_2.output_files).__module__}.{type(base_result_2.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_2.output_files) == 1
    assert base_result_2.execution_time == pytest.approx(0.0005698204040527344, abs=0.01, rel=0.01)
    base_result_3 = base_transform_1.run(data=var_0, write_output=var_2)
    str_3 = '*C;u'
    dict_2 = {str_0: var_0, str_0: str_3}
    list_1 = base_transform_0.parse_headers()
    var_4 = base_transform_1.remove_token_from_headers_map(dict_2, var_3)
    var_5 = base_transform_0.try_header_variations(str_2, dict_1, list_1)
    module_4.read_csv(dict_2)

@pytest.mark.xfail(strict=True)
def test_case_36():
    dict_0 = {}
    str_0 = 'No file path was given, so the output file is at {}'
    var_0 = module_3.get_close_matches(str_0, dict_0)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_1 = '+'
    var_1 = base_transform_0.get_header_idx(str_1)
    assert var_1 == -1
    bool_0 = fixed_width_transform_0.contains_headers(var_0)
    var_2 = base_transform_0.normalize_header(str_0)
    assert var_2 == 'NO FILE PATH WAS GIVEN, SO THE OUTPUT FILE IS AT {}'
    bool_1 = True
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_1)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0005877017974853516, abs=0.01, rel=0.01)
    dict_1 = fixed_width_transform_0.get_header_indices(var_2)
    list_0 = fixed_width_transform_0.parse_headers()
    base_transform_1 = module_0.BaseTransform()
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_1 = base_transform_0.run(str_0)
    assert base_transform_0.current_file_path == 'No file path was given, so the output file is at {}'
    assert base_transform_0.headers == ['N']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == ['No file path was given, so the output file is at {}']
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0007467269897460938, abs=0.01, rel=0.01)
    bool_2 = base_transform_0.contains_headers(dict_1)
    assert bool_2 is False
    base_result_2 = base_transform_0.run(file_paths=var_0, data=base_transform_0)
    assert f'{type(base_result_2).__module__}.{type(base_result_2).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_2.id == 0
    assert base_result_2.error is None
    assert base_result_2.extra == {}
    assert base_result_2.canceled is False
    assert base_result_2.input_file_paths == ['No file path was given, so the output file is at {}']
    assert f'{type(base_result_2.output_files).__module__}.{type(base_result_2.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_2.output_files) == 1
    assert base_result_2.execution_time == pytest.approx(0.0007467269897460938, abs=0.01, rel=0.01)
    base_result_3 = base_transform_1.run(data=var_0, write_output=var_1)
    str_2 = '*C;u'
    dict_2 = {str_1: var_0, str_1: str_2}
    list_1 = base_transform_0.parse_headers()
    var_3 = base_transform_1.remove_token_from_headers_map(dict_2, var_2)
    var_4 = base_transform_0.try_header_variations(str_1, dict_1, list_1)
    module_4.read_csv(dict_2)

@pytest.mark.xfail(strict=True)
def test_case_37():
    dict_0 = {}
    str_0 = '/'
    str_1 = '\x0b+"TID%:ehzm^}ug'
    var_0 = module_3.get_close_matches(str_1, dict_0)
    fixed_width_transform_0 = module_0.FixedWidthTransform(dict_0, *var_0)
    assert f'{type(fixed_width_transform_0.result).__module__}.{type(fixed_width_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert f'{type(fixed_width_transform_0.logger).__module__}.{type(fixed_width_transform_0.logger).__qualname__}' == 'logging.Logger'
    assert fixed_width_transform_0.output_name == 'transformed.csv'
    assert fixed_width_transform_0.output_type == module_1.FileType.CSV
    assert fixed_width_transform_0.pre_processing_funcs == []
    assert fixed_width_transform_0.processing_funcs == []
    assert fixed_width_transform_0.input_delimiter == ','
    assert fixed_width_transform_0.combine_inputs is False
    assert fixed_width_transform_0.output_options == {}
    assert fixed_width_transform_0.current_file_path is None
    assert fixed_width_transform_0.has_headers is False
    assert fixed_width_transform_0.headers is None
    assert fixed_width_transform_0.header_map == {}
    assert fixed_width_transform_0.enumerable_headers == []
    assert fixed_width_transform_0.prefixable_headers == []
    assert fixed_width_transform_0.column_mods == {}
    assert fixed_width_transform_0.has_parsed_headers is False
    assert fixed_width_transform_0.run_parse_headers is True
    assert fixed_width_transform_0.default_not_found is None
    assert fixed_width_transform_0.headers_file_path is None
    assert fixed_width_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert fixed_width_transform_0.valid_headers is None
    assert f'{type(fixed_width_transform_0.ti).__module__}.{type(fixed_width_transform_0.ti).__qualname__}' == 'FileTransforms.FixedWidthTextParser.FixedWidthTextParser'
    var_1 = fixed_width_transform_0.get_output_file_path()
    assert var_1 == '~/Desktop/transformed.csv'
    base_transform_0 = module_0.BaseTransform()
    assert f'{type(base_transform_0.result).__module__}.{type(base_transform_0.result).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_transform_0.output_name == 'transformed.csv'
    assert base_transform_0.input_delimiter == ','
    assert base_transform_0.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_2 = '+'
    var_2 = base_transform_0.get_header_idx(str_2)
    assert var_2 == -1
    bool_0 = fixed_width_transform_0.contains_headers(var_0)
    var_3 = base_transform_0.normalize_header(str_0)
    assert var_3 == '/'
    bool_1 = True
    base_result_0 = fixed_width_transform_0.run(data=str_0, dest_dir=str_0, write_output=bool_1)
    assert fixed_width_transform_0.has_parsed_headers is True
    assert f'{type(base_result_0).__module__}.{type(base_result_0).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_0.id == 0
    assert base_result_0.error is None
    assert base_result_0.extra == {}
    assert base_result_0.canceled is False
    assert base_result_0.input_file_paths == []
    assert f'{type(base_result_0.output_files).__module__}.{type(base_result_0.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_0.output_files) == 1
    assert base_result_0.execution_time == pytest.approx(0.0003631114959716797, abs=0.01, rel=0.01)
    dict_1 = fixed_width_transform_0.get_header_indices(var_3)
    list_0 = fixed_width_transform_0.parse_headers()
    base_transform_1 = module_0.BaseTransform()
    assert base_transform_1.output_name == 'transformed.csv'
    assert base_transform_1.input_delimiter == ','
    assert base_transform_1.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_1 = base_transform_0.run(str_1)
    assert base_transform_0.current_file_path == '\x0b+"TID%:ehzm^}ug'
    assert base_transform_0.headers == ['']
    assert base_transform_0.has_parsed_headers is True
    assert f'{type(base_result_1).__module__}.{type(base_result_1).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_1.id == 0
    assert base_result_1.error is None
    assert base_result_1.extra == {}
    assert base_result_1.canceled is False
    assert base_result_1.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_1.output_files).__module__}.{type(base_result_1.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_1.output_files) == 1
    assert base_result_1.execution_time == pytest.approx(0.0005500316619873047, abs=0.01, rel=0.01)
    var_4 = base_transform_1.get_output_file_path()
    assert var_4 == '~/Desktop/transformed.csv'
    bool_2 = base_transform_0.contains_headers(var_1)
    assert bool_2 is False
    base_result_2 = base_transform_0.run(file_paths=var_0, data=base_transform_0)
    assert f'{type(base_result_2).__module__}.{type(base_result_2).__qualname__}' == 'FileTransforms.Result.BaseResult'
    assert base_result_2.id == 0
    assert base_result_2.error is None
    assert base_result_2.extra == {}
    assert base_result_2.canceled is False
    assert base_result_2.input_file_paths == ['\x0b+"TID%:ehzm^}ug']
    assert f'{type(base_result_2.output_files).__module__}.{type(base_result_2.output_files).__qualname__}' == 'collections.OrderedDict'
    assert len(base_result_2.output_files) == 1
    assert base_result_2.execution_time == pytest.approx(0.0005500316619873047, abs=0.01, rel=0.01)
    bool_3 = True
    base_transform_2 = module_0.BaseTransform(var_4, bool_3)
    assert base_transform_2.result == '~/Desktop/transformed.csv'
    assert base_transform_2.output_name == 'transformed.csv'
    assert base_transform_2.header_ratio_min == pytest.approx(0.0, abs=0.01, rel=0.01)
    base_result_3 = base_transform_1.run(data=var_0, write_output=var_2)
    dict_2 = {str_2: var_0, str_2: str_2}
    list_1 = base_transform_0.parse_headers()
    var_5 = base_transform_1.remove_token_from_headers_map(dict_2, var_3)
    var_6 = base_transform_0.try_header_variations(str_2, dict_1, list_1)
    module_4.read_csv(dict_2)