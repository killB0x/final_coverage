# Automatically generated by Pynguin.
import pytest
import telegram_handler.formatters as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    e_m_o_j_i_0 = module_0.EMOJI()
    assert module_0.EMOJI.WHITE_CIRCLE == 'â\x9aª'
    assert module_0.EMOJI.BLUE_CIRCLE == 'ð\x9f\x94µ'
    assert module_0.EMOJI.RED_CIRCLE == 'ð\x9f\x94´'
    e_m_o_j_i_1 = module_0.EMOJI()
    module_0.MarkdownFormatter(e_m_o_j_i_0)

def test_case_1():
    telegram_formatter_0 = module_0.TelegramFormatter()
    assert f'{type(telegram_formatter_0).__module__}.{type(telegram_formatter_0).__qualname__}' == 'telegram_handler.formatters.TelegramFormatter'
    assert telegram_formatter_0.datefmt is None
    assert module_0.TelegramFormatter.fmt == '%(asctime)s %(levelname)s\n[%(name)s:%(funcName)s]\n%(message)s'

def test_case_2():
    html_formatter_0 = module_0.HtmlFormatter()
    assert f'{type(html_formatter_0).__module__}.{type(html_formatter_0).__qualname__}' == 'telegram_handler.formatters.HtmlFormatter'
    assert html_formatter_0.use_emoji is False
    assert html_formatter_0.datefmt is None
    assert module_0.HtmlFormatter.fmt == '<code>%(asctime)s</code> <b>%(levelname)s</b>\nFrom %(name)s:%(funcName)s\n%(message)s'
    assert module_0.HtmlFormatter.parse_mode == 'HTML'

@pytest.mark.xfail(strict=True)
def test_case_3():
    html_formatter_0 = module_0.HtmlFormatter()
    assert f'{type(html_formatter_0).__module__}.{type(html_formatter_0).__qualname__}' == 'telegram_handler.formatters.HtmlFormatter'
    assert html_formatter_0.use_emoji is False
    assert html_formatter_0.datefmt is None
    assert module_0.HtmlFormatter.fmt == '<code>%(asctime)s</code> <b>%(levelname)s</b>\nFrom %(name)s:%(funcName)s\n%(message)s'
    assert module_0.HtmlFormatter.parse_mode == 'HTML'
    bool_0 = True
    dict_0 = {}
    html_formatter_1 = module_0.HtmlFormatter(**dict_0)
    assert html_formatter_1.use_emoji is False
    assert html_formatter_1.datefmt is None
    html_formatter_1.formatException(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = (798+1666.8j)
    html_formatter_0 = module_0.HtmlFormatter()
    assert f'{type(html_formatter_0).__module__}.{type(html_formatter_0).__qualname__}' == 'telegram_handler.formatters.HtmlFormatter'
    assert html_formatter_0.use_emoji is False
    assert html_formatter_0.datefmt is None
    assert module_0.HtmlFormatter.fmt == '<code>%(asctime)s</code> <b>%(levelname)s</b>\nFrom %(name)s:%(funcName)s\n%(message)s'
    assert module_0.HtmlFormatter.parse_mode == 'HTML'
    html_formatter_0.formatStack(complex_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'o'
    dict_0 = {}
    markdown_formatter_0 = module_0.MarkdownFormatter(**dict_0)
    assert f'{type(markdown_formatter_0).__module__}.{type(markdown_formatter_0).__qualname__}' == 'telegram_handler.formatters.MarkdownFormatter'
    assert markdown_formatter_0.datefmt is None
    assert module_0.MarkdownFormatter.fmt == '`%(asctime)s` *%(levelname)s*\n[%(name)s:%(funcName)s]\n%(message)s'
    assert module_0.MarkdownFormatter.parse_mode == 'Markdown'
    markdown_formatter_0.formatException(str_0)