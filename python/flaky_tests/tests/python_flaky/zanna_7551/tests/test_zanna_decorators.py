# Automatically generated by Pynguin.
import pytest
import zanna.decorators as module_0
import collections as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    method_calls_list_module_0 = module_0._MethodCallsListModule()
    assert module_0.BIND_PROVIDER == 'bind_provider'
    assert module_0.BIND == 'bind'
    str_0 = '_MethodCall'
    str_1 = 'P'
    var_0 = module_1.namedtuple(str_1, str_1, rename=str_0)
    var_1 = method_calls_list_module_0.add_method_call(str_1, var_0)
    none_type_0 = module_0.provider(var_1)
    none_type_1 = None
    str_2 = '\n        Returns true if the binding spec have an\n        instance ready to be returned, False otherwise.\n        '
    str_3 = 'get_binding'
    str_4 = 'Argument of bind method should be a class'
    dict_0 = {str_0: none_type_1, str_2: none_type_1, str_3: none_type_1, str_4: none_type_1}
    method_calls_list_module_0.__call__(dict_0)

def test_case_1():
    method_calls_list_module_0 = module_0._MethodCallsListModule()
    assert module_0.BIND_PROVIDER == 'bind_provider'
    assert module_0.BIND == 'bind'
    str_0 = '{} is not bound'
    callable_0 = module_0.provider_for()
    none_type_0 = method_calls_list_module_0.__call__(str_0)
    type_0 = module_0.inject(none_type_0)
    type_1 = module_0.inject(type_0)
    none_type_1 = method_calls_list_module_0.__call__(method_calls_list_module_0)

def test_case_2():
    method_calls_list_module_0 = module_0._MethodCallsListModule()
    assert module_0.BIND_PROVIDER == 'bind_provider'
    assert module_0.BIND == 'bind'

def test_case_3():
    str_0 = "7'"
    method_calls_list_module_0 = module_0._MethodCallsListModule()
    assert module_0.BIND_PROVIDER == 'bind_provider'
    assert module_0.BIND == 'bind'
    var_0 = method_calls_list_module_0.add_method_call(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    method_calls_list_module_0 = module_0._MethodCallsListModule()
    assert module_0.BIND_PROVIDER == 'bind_provider'
    assert module_0.BIND == 'bind'
    none_type_0 = method_calls_list_module_0.__call__(bool_0)
    dict_0 = {}
    method_calls_list_module_1 = module_0._MethodCallsListModule()
    callable_0 = module_0.provider_for()
    none_type_1 = module_0.provider(callable_0)
    none_type_2 = method_calls_list_module_1.__call__(dict_0)
    bytes_0 = b'\x15\xe6<Y\x91?'
    none_type_3 = module_0.provider(bytes_0)
    module_0._MethodCall()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "7'"
    callable_0 = module_0.provider_for()
    assert module_0.BIND_PROVIDER == 'bind_provider'
    assert module_0.BIND == 'bind'
    bool_0 = False
    none_type_0 = callable_0.__call__(bool_0)
    type_0 = module_0.inject(bool_0)
    type_1 = module_0.inject(str_0)
    type_0.__call__(type_0)