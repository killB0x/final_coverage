# Automatically generated by Pynguin.
import pytest
import zanna._binding_spec as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.InstanceBindingSpec(none_type_0)

def test_case_1():
    bytes_0 = b'S\xab9\xa5\xd4\xf8mv\xd1\xb3\x12\xa5\xa3\xa2N>\\\xd0'
    instance_binding_spec_0 = module_0.InstanceBindingSpec(bytes_0)
    assert f'{type(instance_binding_spec_0).__module__}.{type(instance_binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    list_0.construct_instance(list_0)

def test_case_3():
    bytes_0 = b';\xb6e%\xfe\x8e\xc5@ \xac\x0f\x08|\xf4'
    instance_binding_spec_0 = module_0.InstanceBindingSpec(bytes_0)
    assert f'{type(instance_binding_spec_0).__module__}.{type(instance_binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'
    var_0 = instance_binding_spec_0.get_instance()
    assert var_0 == b';\xb6e%\xfe\x8e\xc5@ \xac\x0f\x08|\xf4'

def test_case_4():
    bytes_0 = b'\x95\xa7H\x12\x03=^z\xa9$\x14a\xe5V\x91'
    instance_binding_spec_0 = module_0.InstanceBindingSpec(bytes_0)
    assert f'{type(instance_binding_spec_0).__module__}.{type(instance_binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'
    with pytest.raises(TypeError):
        instance_binding_spec_0.construct_instance(bytes_0)

def test_case_5():
    float_0 = 3932.2772559189943
    instance_binding_spec_0 = module_0.InstanceBindingSpec(float_0)
    assert f'{type(instance_binding_spec_0).__module__}.{type(instance_binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'
    bool_0 = instance_binding_spec_0.has_instance()
    assert bool_0 is True

def test_case_6():
    bytes_0 = b'S\xab9\xa5\xd4\xf8mv\xd1\xb3\x12\xa5\xa3\xa2N>\\\xd0'
    instance_binding_spec_0 = module_0.InstanceBindingSpec(bytes_0)
    assert f'{type(instance_binding_spec_0).__module__}.{type(instance_binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'
    with pytest.raises(TypeError):
        instance_binding_spec_0.get_argument_specs()