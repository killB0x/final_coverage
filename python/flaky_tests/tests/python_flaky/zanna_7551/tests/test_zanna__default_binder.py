# Automatically generated by Pynguin.
import pytest
import zanna._default_binder as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    default_binder_0.bind_provider(default_binder_0)

def test_case_1():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    str_0 = 'args'
    with pytest.raises(ValueError):
        default_binder_0.get_binding(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'D($96)i.C)s_}s<M'
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    default_binder_1 = module_0._DefaultBinder()
    none_type_0 = default_binder_0.bind_to(str_0, str_0)
    default_binder_2 = module_0._DefaultBinder()
    set_0 = {default_binder_0}
    default_binder_0.bind_to(str_0, set_0)

def test_case_3():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    str_0 = 'P('
    none_type_0 = default_binder_0.bind_to(str_0, str_0)
    str_1 = 'bind'
    with pytest.raises(ValueError):
        default_binder_0.get_binding(str_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    default_binder_0.bind(default_binder_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    default_binder_0.bind_to(default_binder_0, default_binder_0)

def test_case_6():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    str_0 = 'fW"dG\\[c.,`49t'
    with pytest.raises(ValueError):
        default_binder_0.override_binding(str_0, str_0)

def test_case_7():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'

@pytest.mark.xfail(strict=True)
def test_case_8():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    str_0 = 'P('
    none_type_0 = default_binder_0.bind_to(str_0, str_0)
    binding_spec_0 = default_binder_0.get_binding(str_0)
    assert f'{type(binding_spec_0).__module__}.{type(binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'
    default_binder_0.bind_provider(str_0, str_0)

def test_case_9():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    str_0 = 'P('
    none_type_0 = default_binder_0.bind_to(str_0, str_0)
    none_type_1 = default_binder_0.override_binding(str_0, str_0)
    str_1 = 'bind'
    with pytest.raises(ValueError):
        default_binder_0.get_binding(str_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    default_binder_0 = module_0._DefaultBinder()
    assert f'{type(default_binder_0).__module__}.{type(default_binder_0).__qualname__}' == 'zanna._default_binder._DefaultBinder'
    str_0 = 'P('
    none_type_0 = default_binder_0.bind_to(str_0, str_0)
    binding_spec_0 = default_binder_0.get_binding(str_0)
    assert f'{type(binding_spec_0).__module__}.{type(binding_spec_0).__qualname__}' == 'zanna._binding_spec.InstanceBindingSpec'
    default_binder_0.bind_provider(str_0)