# Automatically generated by Pynguin.
import pytest
import ngram as module_0

def test_case_0():
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0

def test_case_1():
    int_0 = -2013
    with pytest.raises(ValueError):
        module_0.NGram(int_0, int_0, pad_char=int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.difference()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ngram.NGram'
    assert len(var_0) == 0
    var_1 = var_0.discard(var_0)
    var_2 = n_gram_0.remove(n_gram_0)
    module_0.NGram(threshold=var_0, warp=var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '$5F%l/_$b=*s'
    set_0 = set()
    n_gram_0 = module_0.NGram(str_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 11
    var_0 = n_gram_0.copy()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ngram.NGram'
    assert len(var_0) == 11
    var_0.compare(n_gram_0, set_0)

def test_case_4():
    str_0 = '\rD=iuk%X/&7It.L:kkT'
    n_gram_0 = module_0.NGram(str_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 17

@pytest.mark.xfail(strict=True)
def test_case_5():
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    n_gram_0.searchitem(n_gram_0)

def test_case_6():
    str_0 = '^BV'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.compare(str_0, str_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)

def test_case_7():
    str_0 = '^BV'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.compare(str_0, str_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = n_gram_0.clear()

def test_case_8():
    str_0 = 'I !3t'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.compare(str_0, str_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = n_gram_0.union(*n_gram_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ngram.NGram'
    assert len(var_1) == 0
    var_2 = n_gram_0.discard(var_1)
    with pytest.raises(ValueError):
        module_0.NGram(str_0, key=str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'I !3t'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.find(str_0)
    var_1 = n_gram_0.__reduce__()
    n_gram_0.symmetric_difference(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.symmetric_difference_update(n_gram_0)
    n_gram_0.pop()

def test_case_11():
    int_0 = 2593
    str_0 = '>U17+oi)rr>NNZu7lLx'
    dict_0 = {str_0: int_0, str_0: str_0}
    with pytest.raises(ValueError):
        module_0.NGram(threshold=int_0, N=int_0, pad_char=int_0, **dict_0)

def test_case_12():
    int_0 = -633
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.NGram(warp=int_0, pad_char=none_type_0)

def test_case_13():
    int_0 = 1304
    list_0 = [int_0, int_0, int_0, int_0]
    with pytest.raises(ValueError):
        module_0.NGram(warp=int_0, pad_len=list_0)

def test_case_14():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.NGram(threshold=bool_0, key=bool_0, N=bool_0, pad_char=bool_0)

def test_case_15():
    int_0 = 2512
    with pytest.raises(ValueError):
        module_0.NGram(key=int_0, N=int_0, pad_len=int_0)

def test_case_16():
    list_0 = []
    with pytest.raises(ValueError):
        module_0.NGram(list_0, pad_char=list_0)

def test_case_17():
    str_0 = 'I !3t'
    with pytest.raises(ValueError):
        module_0.NGram(str_0, key=str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '\rD=iuk%X/&7It.L:kkT'
    n_gram_0 = module_0.NGram(str_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 17
    n_gram_0.splititem(n_gram_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '$5F%l/_$b=*s'
    n_gram_0 = module_0.NGram(str_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 11
    var_0 = n_gram_0.pop()
    assert var_0 == '5'
    assert len(n_gram_0) == 10
    var_0.clear()

@pytest.mark.xfail(strict=True)
def test_case_20():
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.symmetric_difference_update(n_gram_0)
    float_0 = 1.0
    n_gram_0.ngrams_pad(float_0)

def test_case_21():
    str_0 = '4~9N7'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.find(str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'I !3t'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.compare(str_0, str_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = n_gram_0.difference()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ngram.NGram'
    assert len(var_1) == 0
    var_2 = var_1.discard(str_0)
    var_3 = var_1.intersection()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'ngram.NGram'
    var_4 = var_3.__reduce__()
    module_0.NGram(**var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = -1822
    str_0 = 'c\t\x0c*Lsz^{EDD!\to_K'
    str_1 = 'wBi'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.compare(str_0, str_1)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    int_0.key(str_1)

def test_case_24():
    str_0 = '@bpuZ1_&mf'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.finditem(str_0, str_0)

def test_case_25():
    none_type_0 = None
    str_0 = 'icn'
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    n_gram_0 = module_0.NGram(key=none_type_0, **dict_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.finditem(str_0, none_type_0)
    var_1 = n_gram_0.intersection_update()
    with pytest.raises(ValueError):
        module_0.NGram(key=n_gram_0)

def test_case_26():
    str_0 = '\rD=iuk%X/&7It.L:kkT'
    n_gram_0 = module_0.NGram(str_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 17
    var_0 = n_gram_0.ngrams(str_0)

def test_case_27():
    int_0 = -1822
    with pytest.raises(ValueError):
        module_0.NGram(pad_len=int_0)

def test_case_28():
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    str_0 = '"X4hJ|<D~>nf'
    var_0 = n_gram_0.discard(str_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    str_0 = 'm\x0c8*%,&WU<7TiUQ(Zbe)'
    str_1 = 'tcon'
    dict_0 = {str_1: none_type_0, str_1: none_type_0, str_1: none_type_0, str_0: none_type_0}
    n_gram_0 = module_0.NGram(key=none_type_0, **dict_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.symmetric_difference_update(str_0)
    assert len(n_gram_0) == 19
    var_1 = n_gram_0.finditem(str_0, none_type_0)
    assert var_1 == 'm'
    var_2 = n_gram_0.intersection_update()
    assert len(n_gram_0) == 0
    var_2.discard(var_2)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'I !3t'
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.find(str_0)
    var_1 = n_gram_0.__reduce__()
    n_gram_0.compare(n_gram_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    complex_0 = (1651.918333+303.72j)
    str_0 = "'\r1.[[.ypTk| }'S"
    dict_0 = {str_0: none_type_0, str_0: str_0}
    var_0 = n_gram_0.compare(none_type_0, complex_0, **dict_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = n_gram_0.symmetric_difference_update(n_gram_0)
    n_gram_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.difference()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ngram.NGram'
    assert len(var_0) == 0
    var_1 = n_gram_0.remove(n_gram_0)
    var_2 = n_gram_0.compare(n_gram_0, none_type_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2.split(n_gram_0)

def test_case_33():
    none_type_0 = None
    n_gram_0 = module_0.NGram()
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.union(*n_gram_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ngram.NGram'
    assert len(var_0) == 0
    var_1 = var_0.symmetric_difference_update(var_0)
    var_2 = var_0.compare(var_1, none_type_0)
    assert var_2 == pytest.approx(1.0, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.NGram(var_0, key=var_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    str_0 = 'm\x0c8*%,&WU<7TiUQ(Zbe)'
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    n_gram_0 = module_0.NGram(key=none_type_0, **dict_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.symmetric_difference_update(str_0)
    assert len(n_gram_0) == 19
    var_1 = n_gram_0.compare(str_0, str_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = n_gram_0.difference()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ngram.NGram'
    assert len(var_2) == 19
    var_3 = var_2.find(str_0)
    assert var_3 == 'm'
    var_0.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    str_0 = '4~9N7'
    str_1 = 'm\x0c8*%,&WU<7TiUQ(Zbe)'
    str_2 = 'Fcn'
    str_3 = '!6s\rF:oHy'
    dict_0 = {str_2: str_1, str_3: str_3, str_0: str_2}
    n_gram_0 = module_0.NGram(none_type_0, **dict_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.key(none_type_0)
    dict_1 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    str_4 = 'm\x0c*%,&WU<7TirWQ(>be)'
    var_1 = n_gram_0.discard(str_4)
    n_gram_1 = module_0.NGram(key=none_type_0, **dict_1)
    var_2 = n_gram_1.symmetric_difference_update(str_1)
    assert len(n_gram_1) == 19
    var_3 = n_gram_1.compare(str_0, str_1, **dict_1)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = n_gram_1.difference()
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'ngram.NGram'
    assert len(var_4) == 19
    var_5 = n_gram_1.intersection_update()
    assert len(n_gram_1) == 0
    var_6 = var_4.discard(var_4)
    var_4.ngram_similarity(var_3, dict_1, var_3)

def test_case_36():
    none_type_0 = None
    str_0 = 'm\x0c8*%,&WU7TUQ(Zbe)'
    str_1 = 'icn'
    dict_0 = {str_1: str_0, str_0: str_0, str_0: str_1}
    n_gram_0 = module_0.NGram(none_type_0, **dict_0)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    var_0 = n_gram_0.key(none_type_0)
    dict_1 = {str_1: none_type_0, str_1: none_type_0, str_1: none_type_0, str_0: none_type_0}
    n_gram_1 = module_0.NGram(key=none_type_0, **dict_1)
    var_1 = n_gram_1.symmetric_difference_update(str_0)
    assert len(n_gram_1) == 17
    var_2 = n_gram_1.compare(var_0, var_0)
    assert var_2 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_3 = n_gram_0.copy()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'ngram.NGram'
    assert len(var_3) == 0
    var_4 = n_gram_1.__reduce__()
    var_5 = var_3.intersection()
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'ngram.NGram'
    var_6 = n_gram_1.difference()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'ngram.NGram'
    assert len(var_6) == 17
    var_7 = n_gram_1.finditem(str_0, var_2)
    var_8 = var_5.__reduce__()
    var_9 = n_gram_1.intersection_update()
    assert len(n_gram_1) == 0
    var_10 = var_6.discard(var_6)
    var_11 = var_6.pop()
    assert var_11 == 'b'
    assert len(var_6) == 16
    n_gram_2 = module_0.NGram(n_gram_1, pad_len=var_10)
    assert len(n_gram_2) == 0
    with pytest.raises(ValueError):
        module_0.NGram(key=n_gram_1)

@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = False
    complex_0 = (1211.9-786.3197j)
    tuple_0 = (complex_0,)
    set_0 = {bool_0}
    tuple_1 = (set_0,)
    n_gram_0 = module_0.NGram(threshold=bool_0, pad_char=tuple_1)
    assert f'{type(n_gram_0).__module__}.{type(n_gram_0).__qualname__}' == 'ngram.NGram'
    assert len(n_gram_0) == 0
    n_gram_0.search(tuple_0)