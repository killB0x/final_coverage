# Automatically generated by Pynguin.
import pytest
import atlasclient.exceptions as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    client_error_0 = module_0.ClientError(bool_0)
    assert client_error_0.message is True
    assert module_0.ClientError.message == 'Unknown Error'
    module_0.handle_response(client_error_0)

def test_case_1():
    client_error_0 = module_0.ClientError()
    assert client_error_0.message == 'Unknown Error'
    assert module_0.ClientError.message == 'Unknown Error'

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 881
    unauthorized_0 = module_0.Unauthorized(retry_after=int_0)
    assert f'{type(unauthorized_0).__module__}.{type(unauthorized_0).__qualname__}' == 'atlasclient.exceptions.Unauthorized'
    assert unauthorized_0.code == 401
    assert unauthorized_0.message == 'Unauthorized'
    assert unauthorized_0.details is None
    assert unauthorized_0.url is None
    assert unauthorized_0.method is None
    assert unauthorized_0.retry_after == 881
    assert module_0.Unauthorized.code == 401
    assert module_0.Unauthorized.message == 'Unauthorized'
    var_0 = unauthorized_0.__str__()
    assert var_0 == 'HTTP request failed for None None: Unauthorized 401: None'
    forbidden_0 = module_0.Forbidden(message=var_0)
    assert forbidden_0.code == 403
    assert forbidden_0.message == 'HTTP request failed for None None: Unauthorized 401: None'
    assert module_0.Forbidden.code == 403
    assert module_0.Forbidden.message == 'Forbidden'
    client_error_0 = module_0.ClientError()
    assert client_error_0.message == 'Unknown Error'
    assert module_0.ClientError.message == 'Unknown Error'
    timeout_0 = module_0.Timeout(var_0, var_0)
    assert timeout_0.timeout == 'HTTP request failed for None None: Unauthorized 401: None'
    assert timeout_0.message == 'HTTP request failed for None None: Unauthorized 401: None'
    assert module_0.Timeout.message == 'Operation timeout exceeded'
    forbidden_1 = module_0.Forbidden(var_0, details=int_0, url=timeout_0, retry_after=timeout_0)
    assert forbidden_1.code == 'HTTP request failed for None None: Unauthorized 401: None'
    assert forbidden_1.message == 'Forbidden'
    var_1 = timeout_0.__str__()
    assert var_1 == 'Timed out after HTTP request failed for None None: Unauthorized 401: None seconds: HTTP request failed for None None: Unauthorized 401: None'
    module_0.handle_response(forbidden_1)

def test_case_3():
    int_0 = 358
    timeout_0 = module_0.Timeout(int_0)
    assert timeout_0.timeout == 358
    assert timeout_0.message == 'Operation timeout exceeded'
    assert module_0.Timeout.message == 'Operation timeout exceeded'
    bad_request_0 = module_0.BadRequest(timeout_0, url=timeout_0, retry_after=timeout_0)
    assert f'{type(bad_request_0).__module__}.{type(bad_request_0).__qualname__}' == 'atlasclient.exceptions.BadRequest'
    assert f'{type(bad_request_0.code).__module__}.{type(bad_request_0.code).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert bad_request_0.message == 'Bad request'
    assert bad_request_0.details is None
    assert f'{type(bad_request_0.url).__module__}.{type(bad_request_0.url).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert bad_request_0.method is None
    assert f'{type(bad_request_0.retry_after).__module__}.{type(bad_request_0.retry_after).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert module_0.BadRequest.code == 400
    assert module_0.BadRequest.message == 'Bad request'
    bad_request_1 = module_0.BadRequest(message=bad_request_0, details=int_0)
    assert bad_request_1.code == 400
    assert f'{type(bad_request_1.message).__module__}.{type(bad_request_1.message).__qualname__}' == 'atlasclient.exceptions.BadRequest'

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bad_request_0 = module_0.BadRequest(details=none_type_0, url=none_type_0)
    assert f'{type(bad_request_0).__module__}.{type(bad_request_0).__qualname__}' == 'atlasclient.exceptions.BadRequest'
    assert bad_request_0.code == 400
    assert bad_request_0.message == 'Bad request'
    assert bad_request_0.details is None
    assert bad_request_0.url is None
    assert bad_request_0.method is None
    assert bad_request_0.retry_after is None
    assert module_0.BadRequest.code == 400
    assert module_0.BadRequest.message == 'Bad request'
    var_0 = bad_request_0.__str__()
    assert var_0 == 'HTTP request failed for None None: Bad request 400: None'
    http_error_0 = module_0.HttpError(bad_request_0)
    assert f'{type(http_error_0.code).__module__}.{type(http_error_0.code).__qualname__}' == 'atlasclient.exceptions.BadRequest'
    assert http_error_0.message == 'Unknown Error'
    assert module_0.HttpError.message == 'Unknown Error'
    assert module_0.HttpError.code == 500
    var_1 = var_0.__str__()
    assert var_1 == 'HTTP request failed for None None: Bad request 400: None'
    http_error_1 = module_0.HttpError(var_0, method=none_type_0)
    assert http_error_1.code == 'HTTP request failed for None None: Bad request 400: None'
    assert http_error_1.message == 'Unknown Error'
    var_2 = var_0.__str__()
    assert var_2 == 'HTTP request failed for None None: Bad request 400: None'
    failed_0 = module_0.Failed(var_2, var_2)
    assert failed_0.model == 'HTTP request failed for None None: Bad request 400: None'
    assert failed_0.message == 'HTTP request failed for None None: Bad request 400: None'
    assert module_0.Failed.message == 'Operation failed to complete'
    var_3 = http_error_0.__str__()
    assert var_3 == 'HTTP request failed for None None: Unknown Error HTTP request failed for None None: Bad request 400: None: None'
    var_4 = var_0.__str__()
    assert var_4 == 'HTTP request failed for None None: Bad request 400: None'
    var_5 = var_0.__str__()
    assert var_5 == 'HTTP request failed for None None: Bad request 400: None'
    method_not_implemented_0 = module_0.MethodNotImplemented(details=var_0, url=var_1, method=var_4, retry_after=var_4)
    assert method_not_implemented_0.code == 501
    assert method_not_implemented_0.message == 'Not Implemented'
    assert method_not_implemented_0.details == 'HTTP request failed for None None: Bad request 400: None'
    assert method_not_implemented_0.url == 'HTTP request failed for None None: Bad request 400: None'
    assert method_not_implemented_0.method == 'HTTP request failed for None None: Bad request 400: None'
    assert method_not_implemented_0.retry_after == 'HTTP request failed for None None: Bad request 400: None'
    assert module_0.MethodNotImplemented.code == 501
    assert module_0.MethodNotImplemented.message == 'Not Implemented'
    var_6 = var_5.__str__()
    assert var_6 == 'HTTP request failed for None None: Bad request 400: None'
    failed_1 = module_0.Failed(none_type_0, none_type_0)
    assert failed_1.model is None
    assert failed_1.message == 'Operation failed to complete'
    var_7 = bad_request_0.__str__()
    assert var_7 == 'HTTP request failed for None None: Bad request 400: None'
    failed_1.__str__()

def test_case_5():
    client_error_0 = module_0.ClientError()
    assert client_error_0.message == 'Unknown Error'
    assert module_0.ClientError.message == 'Unknown Error'
    var_0 = client_error_0.__str__()
    assert var_0 == 'Unexpected client-side error: Unknown Error'
    var_1 = var_0.__str__()
    assert var_1 == 'Unexpected client-side error: Unknown Error'
    var_2 = var_1.__str__()
    assert var_2 == 'Unexpected client-side error: Unknown Error'
    var_3 = var_2.__str__()
    assert var_3 == 'Unexpected client-side error: Unknown Error'
    rate_limit_exceeded_0 = module_0.RateLimitExceeded(method=var_0)
    assert f'{type(rate_limit_exceeded_0).__module__}.{type(rate_limit_exceeded_0).__qualname__}' == 'atlasclient.exceptions.RateLimitExceeded'
    assert rate_limit_exceeded_0.code == 429
    assert rate_limit_exceeded_0.message == 'Rate limit'
    assert rate_limit_exceeded_0.details is None
    assert rate_limit_exceeded_0.url is None
    assert rate_limit_exceeded_0.method == 'Unexpected client-side error: Unknown Error'
    assert rate_limit_exceeded_0.retry_after is None
    assert module_0.RateLimitExceeded.code == 429
    assert module_0.RateLimitExceeded.message == 'Rate limit'
    dict_0 = {var_3: var_3, rate_limit_exceeded_0: var_2, rate_limit_exceeded_0: var_1, var_1: var_0}
    failed_0 = module_0.Failed(dict_0)
    assert f'{type(failed_0.model).__module__}.{type(failed_0.model).__qualname__}' == 'builtins.dict'
    assert len(failed_0.model) == 2
    assert failed_0.message == 'Operation failed to complete'
    assert module_0.Failed.message == 'Operation failed to complete'

def test_case_6():
    str_0 = "/d$D`9CD'rzE/Fjn"
    server_unavailable_0 = module_0.ServerUnavailable(str_0, str_0, method=str_0)
    assert f'{type(server_unavailable_0).__module__}.{type(server_unavailable_0).__qualname__}' == 'atlasclient.exceptions.ServerUnavailable'
    assert server_unavailable_0.code == "/d$D`9CD'rzE/Fjn"
    assert server_unavailable_0.message == "/d$D`9CD'rzE/Fjn"
    assert server_unavailable_0.details is None
    assert server_unavailable_0.url is None
    assert server_unavailable_0.method == "/d$D`9CD'rzE/Fjn"
    assert server_unavailable_0.retry_after is None
    assert module_0.ServerUnavailable.code == 503
    assert module_0.ServerUnavailable.message == 'Service Unavailable'

def test_case_7():
    method_not_implemented_0 = module_0.MethodNotImplemented()
    assert method_not_implemented_0.code == 501
    assert method_not_implemented_0.message == 'Not Implemented'
    assert method_not_implemented_0.details is None
    assert method_not_implemented_0.url is None
    assert method_not_implemented_0.method is None
    assert method_not_implemented_0.retry_after is None
    assert module_0.MethodNotImplemented.code == 501
    assert module_0.MethodNotImplemented.message == 'Not Implemented'

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    timeout_0 = module_0.Timeout(none_type_0)
    assert timeout_0.timeout is None
    assert timeout_0.message == 'Operation timeout exceeded'
    assert module_0.Timeout.message == 'Operation timeout exceeded'
    var_0 = timeout_0.__str__()
    assert var_0 == 'Timed out after None seconds: Operation timeout exceeded'
    var_1 = timeout_0.__str__()
    assert var_1 == 'Timed out after None seconds: Operation timeout exceeded'
    http_error_0 = module_0.HttpError()
    assert http_error_0.code == 500
    assert http_error_0.message == 'Unknown Error'
    assert http_error_0.details is None
    assert http_error_0.url is None
    assert http_error_0.method is None
    assert http_error_0.retry_after is None
    assert module_0.HttpError.message == 'Unknown Error'
    assert module_0.HttpError.code == 500
    var_2 = timeout_0.__str__()
    assert var_2 == 'Timed out after None seconds: Operation timeout exceeded'
    var_3 = timeout_0.__str__()
    assert var_3 == 'Timed out after None seconds: Operation timeout exceeded'
    timeout_1 = module_0.Timeout(var_2)
    assert timeout_1.timeout == 'Timed out after None seconds: Operation timeout exceeded'
    assert timeout_1.message == 'Operation timeout exceeded'
    var_4 = var_2.__str__()
    assert var_4 == 'Timed out after None seconds: Operation timeout exceeded'
    unauthorized_0 = module_0.Unauthorized(url=timeout_0, method=var_2, retry_after=var_3)
    assert f'{type(unauthorized_0).__module__}.{type(unauthorized_0).__qualname__}' == 'atlasclient.exceptions.Unauthorized'
    assert unauthorized_0.code == 401
    assert unauthorized_0.message == 'Unauthorized'
    assert unauthorized_0.details is None
    assert f'{type(unauthorized_0.url).__module__}.{type(unauthorized_0.url).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert unauthorized_0.method == 'Timed out after None seconds: Operation timeout exceeded'
    assert unauthorized_0.retry_after == 'Timed out after None seconds: Operation timeout exceeded'
    assert module_0.Unauthorized.code == 401
    assert module_0.Unauthorized.message == 'Unauthorized'
    method_not_allowed_0 = module_0.MethodNotAllowed(timeout_0, none_type_0)
    assert f'{type(method_not_allowed_0.code).__module__}.{type(method_not_allowed_0.code).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert method_not_allowed_0.message == 'Method Not Allowed'
    assert module_0.MethodNotAllowed.code == 405
    assert module_0.MethodNotAllowed.message == 'Method Not Allowed'
    forbidden_0 = module_0.Forbidden(method=var_3, retry_after=timeout_1)
    assert forbidden_0.code == 403
    assert forbidden_0.message == 'Forbidden'
    assert forbidden_0.method == 'Timed out after None seconds: Operation timeout exceeded'
    assert module_0.Forbidden.code == 403
    assert module_0.Forbidden.message == 'Forbidden'
    var_5 = timeout_0.__str__()
    assert var_5 == 'Timed out after None seconds: Operation timeout exceeded'
    var_6 = timeout_0.__str__()
    assert var_6 == 'Timed out after None seconds: Operation timeout exceeded'
    module_0.handle_response(unauthorized_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    failed_0 = module_0.Failed(bool_0)
    assert failed_0.model is True
    assert failed_0.message == 'Operation failed to complete'
    assert module_0.Failed.message == 'Operation failed to complete'
    failed_0.__str__()

def test_case_10():
    rate_limit_exceeded_0 = module_0.RateLimitExceeded()
    assert rate_limit_exceeded_0.code == 429
    assert rate_limit_exceeded_0.message == 'Rate limit'
    assert rate_limit_exceeded_0.details is None
    assert rate_limit_exceeded_0.url is None
    assert rate_limit_exceeded_0.method is None
    assert rate_limit_exceeded_0.retry_after is None
    assert module_0.RateLimitExceeded.code == 429
    assert module_0.RateLimitExceeded.message == 'Rate limit'
    var_0 = rate_limit_exceeded_0.__str__()
    assert var_0 == 'HTTP request failed for None None: Rate limit 429: None'
    server_unavailable_0 = module_0.ServerUnavailable(url=var_0)
    assert server_unavailable_0.code == 503
    assert server_unavailable_0.message == 'Service Unavailable'
    assert server_unavailable_0.url == 'HTTP request failed for None None: Rate limit 429: None'
    assert module_0.ServerUnavailable.code == 503
    assert module_0.ServerUnavailable.message == 'Service Unavailable'
    var_1 = var_0.__str__()
    assert var_1 == 'HTTP request failed for None None: Rate limit 429: None'
    var_2 = var_0.__str__()
    assert var_2 == 'HTTP request failed for None None: Rate limit 429: None'