# Automatically generated by Pynguin.
import pytest
import builtins as module_0
import atlasclient.utils as module_1
import base64 as module_2

def test_case_0():
    value_error_0 = module_0.ValueError()
    with pytest.raises(ValueError):
        module_1.version_tuple(value_error_0)

def test_case_1():
    str_0 = 'http:// iuAW:80'
    var_0 = module_1.version_str(str_0)
    assert var_0 == 'http:// iuAW:80'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_2():
    bool_0 = False
    with pytest.raises(ValueError):
        module_1.version_str(bool_0)

def test_case_3():
    tuple_0 = ()
    var_0 = module_1.version_str(tuple_0)
    assert var_0 == ''
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_4():
    none_type_0 = None
    var_0 = module_1.make_table_qualified_name(none_type_0, db=none_type_0)
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_5():
    bytes_0 = b'\x89\xa6\xaa\x9b'
    var_0 = module_1.make_table_qualified_name(bytes_0, bytes_0, bytes_0)
    assert var_0 == "b'\\x89\\xa6\\xaa\\x9b'.b'\\x89\\xa6\\xaa\\x9b'@b'\\x89\\xa6\\xaa\\x9b'"
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    module_1.normalize_underscore_case(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_1.normalize_camel_case(bool_0)

def test_case_8():
    bool_0 = True
    var_0 = module_1.generate_http_basic_token(bool_0, bool_0)
    assert var_0 == 'VHJ1ZTpUcnVl'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_1.parse_table_qualified_name(none_type_0)

def test_case_10():
    str_0 = 'e'
    with pytest.raises(ValueError):
        module_1.version_tuple(str_0)

def test_case_11():
    tuple_0 = ()
    var_0 = module_1.version_tuple(tuple_0)
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_12():
    str_0 = 'e'
    var_0 = module_1.generate_base_url(str_0)
    assert var_0 == 'http://e:80'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_13():
    str_0 = 'entity_unique_attribute'
    with pytest.raises(ValueError):
        module_1.generate_base_url(str_0, str_0)

def test_case_14():
    str_0 = 'e6tity_Pnique_aZtribute'
    var_0 = module_1.parse_table_qualified_name(str_0)
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_15():
    str_0 = "~KS@o.=}C'y"
    var_0 = module_1.parse_table_qualified_name(str_0)
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_16():
    str_0 = '3'
    var_0 = module_1.version_tuple(str_0)
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_17():
    str_0 = 'e6tity_1nZque_aZtribute'
    with pytest.raises(ValueError):
        module_1.generate_base_url(str_0, port=str_0)

def test_case_18():
    str_0 = 'e6tity_Pnique_aZtribute'
    var_0 = module_1.normalize_camel_case(str_0)
    assert var_0 == 'E6tity_Pnique_a Ztribute'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

def test_case_19():
    str_0 = 'httjp:// iuAW:80'
    with pytest.raises(ValueError):
        module_1.generate_base_url(str_0, str_0, str_0)

def test_case_20():
    str_0 = 'http:// iuAW:80'
    var_0 = module_1.generate_base_url(str_0)
    assert var_0 == 'http:// iuAW:80'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    var_0 = module_1.make_table_qualified_name(bool_0)
    assert var_0 is True
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'
    tuple_0 = module_1.make_table_qualified_name(var_0, db=var_0)
    assert tuple_0 == 'True.True'
    var_1 = module_1.version_str(tuple_0)
    assert var_1 == 'True.True'
    var_2 = module_1.generate_http_basic_token(tuple_0, tuple_0)
    assert var_2 == 'VHJ1ZS5UcnVlOlRydWUuVHJ1ZQ=='
    var_3 = module_1.make_table_qualified_name(tuple_0, bool_0)
    assert var_3 == 'True.True@True'
    var_4 = module_1.parse_table_qualified_name(var_2)
    var_5 = module_1.parse_table_qualified_name(var_3)
    module_2.b16encode(var_3)

def test_case_22():
    str_0 = 'entity_unique_attribute'
    var_0 = module_1.normalize_underscore_case(str_0)
    assert var_0 == 'Entity Unique Attribute'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'S_vr/3mkT\x0bWN>%'
    var_0 = module_1.normalize_camel_case(str_0)
    assert var_0 == 'S_vr/3mk T\x0bWN>%'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'
    var_1 = module_1.parse_table_qualified_name(str_0)
    tuple_0 = ()
    var_2 = module_1.version_tuple(tuple_0)
    var_3 = module_1.version_str(tuple_0)
    assert var_3 == ''
    var_4 = module_1.generate_http_basic_token(tuple_0, tuple_0)
    assert var_4 == 'KCk6KCk='
    tuple_1 = (var_2,)
    module_1.version_str(tuple_1)

def test_case_24():
    str_0 = 'details'
    var_0 = module_1.normalize_camel_case(str_0)
    assert var_0 == 'Details'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'
    tuple_0 = ()
    var_1 = module_1.parse_table_qualified_name(var_0)
    var_2 = module_1.version_str(tuple_0)
    assert var_2 == ''
    var_3 = module_1.generate_http_basic_token(tuple_0, tuple_0)
    assert var_3 == 'KCk6KCk='
    var_4 = module_1.version_str(str_0)
    assert var_4 == 'details'
    var_5 = module_2.a85decode(var_2, foldspaces=str_0, ignorechars=var_3)
    var_6 = module_1.generate_base_url(var_3)
    assert var_6 == 'http://KCk6KCk=:80'
    bool_0 = True
    str_1 = 'default'
    var_7 = module_1.make_table_qualified_name(bool_0, var_4, str_1)
    assert var_7 == 'True@details'
    list_0 = [var_6, var_5, tuple_0]
    var_8 = module_1.version_str(tuple_0)
    var_9 = module_1.generate_http_basic_token(var_2, list_0)
    assert var_9 == 'OlsnaHR0cDovL0tDazZLQ2s9OjgwJywgYicnLCAoKV0='
    var_10 = module_1.make_table_qualified_name(var_5, var_9)
    assert var_10 == "b''@OlsnaHR0cDovL0tDazZLQ2s9OjgwJywgYicnLCAoKV0="
    var_11 = module_1.make_table_qualified_name(list_0, db=var_4)
    assert var_11 == "details.['http://KCk6KCk=:80', b'', ()]"
    with pytest.raises(TypeError):
        var_8.__new__(var_0, var_0, str_0, var_11)

def test_case_25():
    str_0 = 'default'
    var_0 = module_1.normalize_camel_case(str_0)
    assert var_0 == 'Default'
    assert module_1.DEFAULT_PORTS == {'http': 80, 'https': 443}
    assert module_1.DEFAULT_DB_CLUSTER == 'default'
    tuple_0 = ()
    var_1 = module_1.parse_table_qualified_name(var_0)
    var_2 = module_1.version_str(tuple_0)
    assert var_2 == ''
    var_3 = module_1.generate_http_basic_token(tuple_0, tuple_0)
    assert var_3 == 'KCk6KCk='
    var_4 = module_1.version_str(str_0)
    assert var_4 == 'default'
    var_5 = module_2.a85decode(var_2, foldspaces=str_0, ignorechars=var_3)
    var_6 = module_1.generate_base_url(var_3)
    assert var_6 == 'http://KCk6KCk=:80'
    bool_0 = True
    str_1 = '0fV'
    var_7 = module_1.make_table_qualified_name(bool_0, var_4, str_1)
    assert var_7 == '0fV.True'
    var_8 = module_1.generate_http_basic_token(var_2, var_3)
    assert var_8 == 'OktDazZLQ2s9'
    var_9 = module_1.make_table_qualified_name(var_6)
    assert var_9 == 'http://KCk6KCk=:80'
    var_10 = module_1.make_table_qualified_name(var_0, bool_0)
    assert var_10 == 'Default@True'
    with pytest.raises(ValueError):
        module_1.version_tuple(var_6)