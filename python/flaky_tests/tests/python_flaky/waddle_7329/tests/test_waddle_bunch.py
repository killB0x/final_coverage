# Automatically generated by Pynguin.
import pytest
import waddle.bunch as module_0
import enum as module_1
import re as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    bunch_0.setdefault(bunch_0, bunch_0)

def test_case_1():
    str_0 = 'XwoN5 Zzq('
    var_0 = module_0.wrap(str_0)
    assert var_0 == 'XwoN5 Zzq('

def test_case_2():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0

def test_case_3():
    set_0 = set()
    bunch_0 = module_0.Bunch(set_0)
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert bunch_0.values == {*()}

def test_case_4():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1
    var_1 = bunch_0.__eq__(bunch_0)
    assert var_1 is True

def test_case_5():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    none_type_0 = None
    var_0 = bunch_0.__ne__(none_type_0)
    assert var_0 is True
    var_1 = bunch_0.items(none_type_0)
    var_2 = var_1.__ne__(bunch_0)
    var_3 = bunch_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    bunch_0.__delattr__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_0.__nonzero__()
    bunch_0.setdefault(bunch_0, bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1
    var_1 = var_0.__repr__()
    assert var_1 == "([('__members__', ())])"
    var_2 = var_0.__getstate__()
    var_3 = bunch_0.__getstate__()
    var_4 = bunch_0.__eq__(bunch_0)
    assert var_4 is True
    var_5 = module_0.wrap(var_1)
    assert var_5 == "([('__members__', ())])"
    var_6 = var_0.__setstate__(var_5)
    assert bunch_0.values == '('
    assert var_0.values == '('
    var_1.__getstate__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    bunch_0.__setitem__(bunch_0, bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_0.__iter__()
    var_1 = bunch_0.keys()
    bunch_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b's\xf5\x0bZ9'
    none_type_0 = None
    str_0 = '#1\nr\t5]xKX;RNmf<'
    str_1 = 'l]6'
    str_2 = 'r'
    dict_0 = {str_0: str_0, str_1: none_type_0, str_2: bytes_0}
    module_0.wrap(dict_0, str_1)

def test_case_12():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_0.__repr__()
    assert var_0 == '()'

def test_case_13():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ''
    str_1 = '?pGO%1t~1t/xi\x0c \\'
    list_0 = [str_0, str_0, str_1]
    dict_0 = bunch_0.create_to_parent(list_0)
    assert len(bunch_0.values) == 1
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(dict_0) == 0
    var_0 = bunch_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_14():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_0.__eq__(bunch_0)
    assert var_0 is True
    var_1 = bunch_0.env()
    var_1.__len__()

def test_case_15():
    str_0 = 'WX<H%Tv'
    bunch_list_0 = module_0.BunchList(str_0, str_0)
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1

def test_case_16():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1

@pytest.mark.xfail(strict=True)
def test_case_17():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_0.__dir__()
    var_1 = bunch_0.__eq__(bunch_0)
    assert var_1 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1
    var_1 = bunch_0.__getstate__()
    var_2 = bunch_0.__eq__(bunch_0)
    assert var_2 is True
    var_3 = module_0.wrap(var_1)
    var_1.__getstate__()

@pytest.mark.xfail(strict=True)
def test_case_19():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_0.to_dict()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0) == 0
    var_1 = bunch_0.__ne__(bunch_0)
    assert var_1 is False
    var_2 = bunch_0.env()
    var_2.__len__()

@pytest.mark.xfail(strict=True)
def test_case_20():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    list_0 = [str_0, str_1, str_1, str_0]
    var_1 = bunch_0.__getitem__(str_1)
    var_2 = bunch_0.walk_to_parent(list_0)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 2
    var_4 = module_0.wrap(list_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_4) == 4
    var_5 = var_4.__contains__(str_0)
    var_6 = bunch_0.__eq__(bunch_0)
    assert var_6 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    bool_0 = False
    list_0 = []
    dict_0 = bunch_0.create_to_parent(list_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(dict_0) == 0
    none_type_0 = None
    var_0 = bunch_0.__setattr__(none_type_0, none_type_0)
    assert len(bunch_0.values) == 1
    assert len(dict_0) == 1
    bunch_0.__setitem__(bool_0, bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    list_0 = []
    var_0 = bunch_0.__nonzero__()
    var_1 = bunch_0.walk_to_parent(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_1) == 0
    var_2 = var_0.__eq__(bunch_0)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert len(var_1) == 1
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 1
    var_4 = bunch_0.__eq__(bunch_0)
    assert var_4 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = "i9\n3u'"
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_1 = bunch_0.__getitem__(str_1)
    var_2 = bunch_0.walk_to_parent(list_0)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 2
    var_4 = var_3.__repr__()
    assert var_4 == '([(\';@Gkw8m`>(4+oNh\', "i9\\n3u\'"), (\'__members__\', ())])'
    var_5 = module_0.wrap(list_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_5) == 4
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'WX<H%Tv'
    bunch_list_0 = module_0.BunchList(str_0, str_0)
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    list_0 = []
    var_0 = bunch_0.__nonzero__()
    var_1 = bunch_0.walk_to_parent(list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_1) == 0
    var_2 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert len(var_1) == 1
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_2.values).__module__}.{type(var_2.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_2.values) == 1
    var_3 = bunch_list_0.__ne__(var_1)
    assert var_3 is True
    var_0.__setstate__(var_3)

def test_case_25():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_0 = bunch_0.walk_to_parent(list_0)
    var_1 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_1.values).__module__}.{type(var_1.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_1.values) == 1
    var_2 = var_1.__repr__()
    assert var_2 == "([('__members__', ())])"
    var_3 = bunch_0.__getstate__()
    var_4 = var_3.__contains__(var_3)
    var_5 = bunch_0.__eq__(bunch_0)
    assert var_5 is True
    with pytest.raises(AttributeError):
        bunch_0.__delattr__(str_1)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    list_0 = []
    dict_0 = bunch_0.create_to_parent(list_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(dict_0) == 0
    str_0 = '1s;@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    var_0 = dict_0.__repr__()
    assert var_0 == 'ordereddict()'
    list_1 = [str_0, str_1, str_1, str_2]
    var_1 = var_0.__dir__()
    var_2 = bunch_0.__getitem__(str_1)
    var_3 = bunch_0.walk_to_parent(list_1)
    var_4 = str_0.__repr__()
    var_5 = bunch_0.__getstate__()
    var_6 = bunch_0.__eq__(bunch_0)
    assert var_6 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'WX<H%Tv'
    bunch_list_0 = module_0.BunchList(str_0, str_0)
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    var_0 = bunch_list_0.__len__()
    var_0.yaml_anchor()

@pytest.mark.xfail(strict=True)
def test_case_28():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = 'i93'
    list_0 = bunch_0.__contains__(str_0)
    assert list_0 is False
    var_0 = bunch_0.__getitem__(str_0)
    bunch_0.walk_to_parent(list_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_0 = bunch_0.walk_to_parent(list_0)
    var_1 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_1.values).__module__}.{type(var_1.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_1.values) == 1
    var_2 = var_1.__repr__()
    assert var_2 == "([('__members__', ())])"
    var_3 = bunch_0.get(var_2)
    var_4 = bunch_0.__eq__(bunch_0)
    assert var_4 is True
    none_type_0 = None
    var_4.__setitem__(var_4, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'WX<H%Tv'
    bunch_list_0 = module_0.BunchList(str_0, str_0)
    bunch_0 = bunch_list_0.__repr__()
    assert bunch_0 == "['W', 'X', '<', 'H', '%', 'T', 'v']"
    bunch_0.__nonzero__()

@pytest.mark.xfail(strict=True)
def test_case_31():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    var_0 = bunch_0.get(str_0)
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2, str_2]
    var_1 = bunch_0.__getitem__(str_1)
    var_2 = bunch_0.walk_to_parent(list_0)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 1
    var_4 = var_3.__repr__()
    assert var_4 == "([('__members__', ())])"
    var_0.__getitem__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_32():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    var_0 = bunch_0.__setitem__(str_0, str_0)
    assert len(bunch_0.values) == 1
    str_1 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_1]
    var_1 = bunch_0.__getitem__(str_0)
    assert var_1 == ';@Gkw8m`>(4+oNh'
    var_2 = bunch_0.__getitem__(str_0)
    assert var_2 == ';@Gkw8m`>(4+oNh'
    var_3 = bunch_0.walk_to_parent(list_0)
    var_4 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_4.values).__module__}.{type(var_4.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_4.values) == 2
    var_5 = var_4.__repr__()
    assert var_5 == "([(';@Gkw8m`>(4+oNh', ';@Gkw8m`>(4+oNh'), ('__members__', ()...])"
    var_6 = var_5.__contains__(str_0)
    var_7 = str_1.__eq__(str_1)
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = 'WX<H%Tv'
    bunch_list_0 = module_0.BunchList(str_0, str_0)
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    bunch_list_0.__setstate__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = "i9\n3u'"
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_1 = bunch_0.__getitem__(str_1)
    var_2 = bunch_0.walk_to_parent(list_0)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 2
    var_4 = var_3.__repr__()
    assert var_4 == '([(\';@Gkw8m`>(4+oNh\', "i9\\n3u\'"), (\'__members__\', ())])'
    var_5 = module_0.wrap(list_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_5) == 4
    var_6 = var_5.__setattr__(var_4, var_0)
    bunch_0.create_to_parent(var_5)

@pytest.mark.xfail(strict=True)
def test_case_35():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'U'
    list_0 = [str_0, str_1, str_1, str_2]
    var_1 = module_0.BunchList(str_1, var_0)
    var_2 = bunch_0.walk_to_parent(list_0)
    var_3 = bunch_0.__setstate__(str_0)
    assert bunch_0.values == ';'
    module_1.unique(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = '1s;@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    var_1 = var_0.__repr__()
    list_0 = [str_0, str_1, str_1, str_2]
    var_2 = var_1.__dir__()
    var_3 = bunch_0.__getitem__(str_1)
    var_4 = bunch_0.walk_to_parent(list_0)
    bunch_list_0 = module_0.BunchList(list_0, str_1)
    var_5 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_5.values).__module__}.{type(var_5.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_5.values) == 2
    var_6 = bunch_0.__getstate__()
    var_7 = bunch_0.__eq__(bunch_0)
    assert var_7 is True
    bunch_0.__delitem__(str_2)

@pytest.mark.xfail(strict=True)
def test_case_37():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = '1s;@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    var_0 = bunch_0.__delitem__(str_1)
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    var_1 = var_0.__repr__()
    list_0 = [str_0, str_1, str_1, str_2]
    var_2 = var_1.__dir__()
    var_3 = bunch_0.__getitem__(str_1)
    var_4 = bunch_0.walk_to_parent(list_0)
    var_5 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_5.values).__module__}.{type(var_5.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_5.values) == 1
    var_6 = var_5.__repr__()
    assert var_6 == "([('__members__', ())])"
    var_7 = bunch_0.__getstate__()
    var_8 = bunch_0.__eq__(bunch_0)
    assert var_8 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = '1s;@Gkw8m`>(4+oNh'
    str_1 = 'i9\n3'
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    var_1 = bunch_0.__contains__(str_2)
    assert var_1 is False
    var_2 = var_0.__repr__()
    var_3 = var_1.__ne__(var_1)
    list_0 = [str_0, str_1, str_1, str_2]
    var_4 = var_2.__dir__()
    var_5 = bunch_0.__getitem__(str_1)
    var_6 = bunch_0.walk_to_parent(list_0)
    var_7 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_7.values).__module__}.{type(var_7.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_7.values) == 2
    var_8 = var_7.__repr__()
    assert var_8 == "([('1s;@Gkw8m`>(4+oNh', 'i9\\n3'), ('__members__', ())])"
    var_9 = bunch_0.__getstate__()
    var_10 = bunch_0.__eq__(bunch_0)
    assert var_10 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = '1s;@Gkw8m`>(4+oNh'
    var_0 = bunch_0.env()
    str_1 = 'i9\n3'
    var_1 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    var_2 = var_1.__repr__()
    list_0 = [str_0, str_1, str_1, str_2]
    var_3 = var_2.__dir__()
    var_4 = bunch_0.__getitem__(str_1)
    bunch_list_0 = module_0.BunchList(list_0, str_1)
    bunch_list_0.__setitem__(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = '\tZL(rn)A9iv'
    list_0 = [str_0]
    var_0 = bunch_0.walk_to_parent(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0) == 0
    str_1 = ';@Gkw8m`>(4+oNh'
    str_2 = 'i9\n3'
    str_3 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_1 = [str_1, str_2, str_2, str_3]
    var_1 = bunch_0.__getitem__(str_2)
    var_2 = bunch_0.walk_to_parent(list_1)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 1
    assert len(var_0) == 1
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 1
    var_4 = module_0.wrap(list_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_4) == 4
    none_type_0 = None
    var_5 = var_4.__eq__(none_type_0)
    assert var_5 is False
    var_6 = var_4.__getitem__(var_5)
    assert var_6 == ';@Gkw8m`>(4+oNh'
    var_6.env()

@pytest.mark.xfail(strict=True)
def test_case_41():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = "i9\n3u'"
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_1 = bunch_0.__getitem__(str_0)
    assert var_1 == "i9\n3u'"
    var_2 = bunch_0.__getitem__(str_1)
    var_3 = bunch_0.walk_to_parent(list_0)
    var_4 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_4.values).__module__}.{type(var_4.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_4.values) == 2
    var_5 = var_4.__repr__()
    assert var_5 == '([(\';@Gkw8m`>(4+oNh\', "i9\\n3u\'"), (\'__members__\', ())])'
    var_6 = module_0.wrap(list_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_6) == 4
    var_7 = var_5.__contains__(str_0)
    none_type_0 = None
    var_8 = var_6.__eq__(none_type_0)
    assert var_8 is False
    module_2.Scanner(var_6)

@pytest.mark.xfail(strict=True)
def test_case_42():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = "i9\n3u'"
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_1 = bunch_0.__getitem__(str_0)
    assert var_1 == "i9\n3u'"
    var_2 = bunch_0.__getitem__(str_1)
    var_3 = bunch_0.walk_to_parent(list_0)
    var_4 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_4.values).__module__}.{type(var_4.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_4.values) == 2
    var_5 = var_4.__repr__()
    assert var_5 == '([(\';@Gkw8m`>(4+oNh\', "i9\\n3u\'"), (\'__members__\', ())])'
    var_6 = module_0.wrap(list_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_6) == 4
    var_7 = var_5.__contains__(str_0)
    var_8 = var_6.__eq__(var_6)
    assert var_8 is True
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    var_0 = bunch_0.__getattr__(str_0)
    assert len(bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 0
    str_1 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_0, str_0, str_1]
    var_1 = bunch_0.__getitem__(str_1)
    var_2 = bunch_0.walk_to_parent(list_0)
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 2
    var_4 = var_3.__repr__()
    assert var_4 == "([(';@Gkw8m`>(4+oNh', ()), ('__members__', ())])"
    var_5 = module_0.wrap(list_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_5) == 4
    var_6 = var_4.__contains__(str_0)
    assert var_6 is True
    none_type_0 = None
    var_7 = var_5.__eq__(none_type_0)
    assert var_7 is False
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_44():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ']#O '
    var_0 = bunch_0.__iter__()
    str_1 = 'rUTtL'
    str_2 = '('
    list_0 = [str_0, str_1, str_2]
    var_1 = bunch_0.walk_to_parent(list_0)
    str_3 = ';@Gkw8m`>(4+oNh'
    str_4 = "i9\n3u'"
    var_2 = bunch_0.__setitem__(str_3, str_4)
    assert len(bunch_0.values) == 1
    str_5 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_1 = [str_3, str_4, str_4, str_5]
    var_3 = bunch_0.__getitem__(str_3)
    assert var_3 == "i9\n3u'"
    var_4 = bunch_0.walk_to_parent(list_1)
    var_5 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_5.values).__module__}.{type(var_5.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_5.values) == 2
    var_6 = var_5.__repr__()
    assert var_6 == '([(\';@Gkw8m`>(4+oNh\', "i9\\n3u\'"), (\'__members__\', ())])'
    var_7 = module_0.wrap(list_1)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_7) == 4
    var_8 = var_4.__eq__(var_4)
    var_9 = var_7.__nonzero__()
    assert var_9 is True
    var_9.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ']#O '
    var_0 = bunch_0.__iter__()
    str_1 = 'rUTtL'
    str_2 = '('
    list_0 = [str_0, str_1, str_2]
    var_1 = bunch_0.walk_to_parent(list_0)
    str_3 = ';@Gkw8m`>(4+oNh'
    str_4 = "i9\n3u'"
    var_2 = bunch_0.__setitem__(str_3, str_4)
    assert len(bunch_0.values) == 1
    str_5 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_1 = [str_3, str_4, str_4, str_5]
    var_3 = bunch_0.__getitem__(str_3)
    assert var_3 == "i9\n3u'"
    var_4 = bunch_0.__getitem__(str_4)
    var_5 = bunch_0.walk_to_parent(list_1)
    var_6 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_6.values).__module__}.{type(var_6.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_6.values) == 2
    var_7 = var_6.__repr__()
    assert var_7 == '([(\';@Gkw8m`>(4+oNh\', "i9\\n3u\'"), (\'__members__\', ())])'
    var_8 = module_0.wrap(list_1)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'waddle.bunch.BunchList'
    assert len(var_8) == 4
    var_9 = var_8.__getstate__()
    var_10 = var_7.__contains__(str_3)
    none_type_0 = None
    var_11 = var_8.__eq__(none_type_0)
    assert var_11 is False
    bunch_0.__delitem__(bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = "i9\n3u'"
    list_0 = [str_0, str_1, str_1, str_0]
    dict_0 = bunch_0.create_to_parent(list_0)
    assert len(bunch_0.values) == 1
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(dict_0) == 0
    var_0 = bunch_0.__getitem__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1
    var_1 = bunch_0.__getitem__(str_1)
    var_2 = bunch_0.walk_to_parent(list_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_2) == 0
    var_3 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_3.values).__module__}.{type(var_3.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_3.values) == 2
    var_4 = module_0.wrap(var_1)
    var_5 = var_3.items()
    module_0.BunchList(var_5)

@pytest.mark.xfail(strict=True)
def test_case_47():
    bunch_0 = module_0.Bunch()
    assert f'{type(bunch_0).__module__}.{type(bunch_0).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(bunch_0.values).__module__}.{type(bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(bunch_0.values) == 0
    str_0 = ';@Gkw8m`>(4+oNh'
    str_1 = "i9\n3u'"
    var_0 = bunch_0.__setitem__(str_0, str_1)
    assert len(bunch_0.values) == 1
    str_2 = 'K2=y\x0cT9KwaQ}Bv8@B'
    list_0 = [str_0, str_1, str_1, str_2]
    var_1 = bunch_0.__getitem__(str_0)
    assert var_1 == "i9\n3u'"
    var_2 = bunch_0.__getitem__(str_1)
    var_3 = bunch_0.walk_to_parent(list_0)
    var_4 = module_1.unique(bunch_0)
    assert len(bunch_0.values) == 2
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'waddle.bunch.Bunch'
    assert f'{type(var_4.values).__module__}.{type(var_4.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_4.values) == 2
    var_5 = bunch_0.__ne__(bunch_0)
    assert var_5 is False
    var_6 = module_0.wrap(var_2)
    var_7 = var_4.items()
    module_0.BunchList(var_7)