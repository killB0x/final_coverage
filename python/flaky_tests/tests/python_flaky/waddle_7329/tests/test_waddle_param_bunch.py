# Automatically generated by Pynguin.
import pytest
import waddle.param_bunch as module_0

def test_case_0():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None

def test_case_1():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0

@pytest.mark.xfail(strict=True)
def test_case_2():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    param_bunch_0.delete_from_aws()

def test_case_3():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.load()

@pytest.mark.xfail(strict=True)
def test_case_4():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.to_dict()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0) == 0
    var_0.get_constructor_parser(var_0)

def test_case_5():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None

def test_case_6():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None

@pytest.mark.xfail(strict=True)
def test_case_7():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    param_bunch_0.to_aws(param_bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    dict_0 = {}
    var_0 = param_bunch_0.load(filename=param_bunch_0, decrypt=dict_0)
    param_bunch_0.save(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    var_1 = param_bunch_0.fill_back()
    var_2 = param_bunch_0.try_decrypt(var_1, str_0, param_bunch_0)
    module_0.ParamBunch(prefix=str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.load(param_bunch_0)
    var_1 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    param_bunch_0.original_value(var_0)

def test_case_11():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    var_1 = param_bunch_0.try_decrypt(var_0, str_0, var_0)
    param_bunch_1 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_1).__module__}.{type(param_bunch_1).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_1.values).__module__}.{type(param_bunch_1.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_1.values) == 0
    assert f'{type(param_bunch_1.original_values).__module__}.{type(param_bunch_1.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_1.original_values) == 0
    assert param_bunch_1.encrypted == []
    assert param_bunch_1.spinner is None

def test_case_12():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    param_bunch_1 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_1).__module__}.{type(param_bunch_1).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_1.values).__module__}.{type(param_bunch_1.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_1.values) == 0
    assert f'{type(param_bunch_1.original_values).__module__}.{type(param_bunch_1.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_1.original_values) == 0
    assert param_bunch_1.encrypted == []
    assert param_bunch_1.spinner is None

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'tF2'
    param_bunch_0 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.try_decrypt(str_0, param_bunch_0, str_0)
    assert var_0 == 'tF2'
    var_1 = param_bunch_0.handle_file_values(param_bunch_0, param_bunch_0)
    param_bunch_0.handle_file_values(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    var_1 = param_bunch_0.try_decrypt(var_0, str_0, var_0)
    module_0.ParamBunch(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '\r'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.setdefault(str_0, param_bunch_0)
    assert len(param_bunch_0.values) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(var_0.values).__module__}.{type(var_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(var_0.values) == 1
    assert var_0.original_values is None
    assert var_0.encrypted == []
    assert var_0.spinner is None
    param_bunch_0.save(var_0)

def test_case_16():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.try_decrypt(str_0, param_bunch_0, str_0)
    assert var_0 == 't)W'
    var_1 = param_bunch_0.handle_file_values(param_bunch_0, param_bunch_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'J\r'
    module_0.ParamBunch(filename=str_0)
    var_0 = param_bunch_0.to_dict()
    var_1 = param_bunch_0.file_items()
    var_2 = param_bunch_0.original_parent(str_0)
    var_3 = module_0.dump_yaml(var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.file_items(prefix=str_0)
    param_bunch_0.handle_file_values(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 't)W'
    param_bunch_0 = module_0.ParamBunch()
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    var_0 = param_bunch_0.fill_back()
    assert f'{type(param_bunch_0.original_values).__module__}.{type(param_bunch_0.original_values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.original_values) == 0
    param_bunch_0.original_value(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '4,vHI'
    param_bunch_0 = module_0.ParamBunch(filename=str_0)
    assert f'{type(param_bunch_0).__module__}.{type(param_bunch_0).__qualname__}' == 'waddle.param_bunch.ParamBunch'
    assert f'{type(param_bunch_0.values).__module__}.{type(param_bunch_0.values).__qualname__}' == 'ruamel.yaml.comments.CommentedMap'
    assert len(param_bunch_0.values) == 0
    assert param_bunch_0.original_values is None
    assert param_bunch_0.encrypted == []
    assert param_bunch_0.spinner is None
    param_bunch_0.handle_updates(str_0)