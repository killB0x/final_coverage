# Automatically generated by Pynguin.
import pytest
import enpyronments.settings as module_0
import builtins as module_1

def test_case_0():
    str_0 = 'b*`s\tBRVh,\\2~mDi'
    dict_0 = {str_0: str_0, str_0: str_0}
    settings_0 = module_0.Settings(**dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.masked()

def test_case_1():
    dict_0 = {}
    settings_0 = module_0.Settings(**dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0

def test_case_2():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    var_0 = settings_0.extract_from_sensitive(settings_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(var_0) == 0

def test_case_3():
    bytes_0 = b'\xe1\x14\xf2\xd3B\xc0!E\xc2\xf0&c\xbc\xccZt\xd4\xefc'
    dict_0 = {bytes_0: bytes_0}
    settings_0 = module_0.Settings(dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.__setitem__(bytes_0, dict_0)

def test_case_4():
    bytes_0 = b'\xe1\x14\xf2\xd3B\xc0!E\xc2\xf0&c\xbc\xccZt\xd4\xefc'
    dict_0 = {bytes_0: bytes_0}
    settings_0 = module_0.Settings(dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.masked()

def test_case_5():
    str_0 = 'JA :J{*l^\t"QTAm\\'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    settings_0 = module_0.Settings(**dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.update(settings_0, **dict_0)

def test_case_6():
    str_0 = 'JA :J{*l^\t"QTAm\\'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    settings_0 = module_0.Settings(**dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.popitem()
    assert len(settings_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    settings_0 = module_0.Settings(**dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    var_0 = settings_0.__len__()
    assert var_0 == 0
    var_0.__iter__()

def test_case_8():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    none_type_0 = None
    var_0 = settings_0.get(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    tuple_0 = settings_0.values()
    var_0 = settings_0.keys()
    var_1 = settings_0.clear()
    settings_0.__getattr__(settings_0)

def test_case_10():
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    var_0 = settings_0.extract_from_sensitive(settings_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(var_0) == 0
    var_1 = settings_0.save_to_environ()

def test_case_11():
    int_0 = 2937
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    var_0 = settings_0.__setitem__(int_0, int_0)
    assert len(settings_0) == 1

def test_case_12():
    bytes_0 = b'\xe1\x14\xf2\xd3B\xc0!E\xc2\xf0&c\xbc\xccZt\xd4\xefc'
    dict_0 = {bytes_0: bytes_0}
    settings_0 = module_0.Settings(dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.__eq__(settings_0)
    assert var_0 is True

def test_case_13():
    float_0 = 4457.452152
    settings_0 = module_0.Settings()
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 0
    with pytest.raises(KeyError):
        settings_0.__getattr__(float_0)

def test_case_14():
    bytes_0 = b'\xe1\x14\xf2\xd3B\xc0!E\xc2\xf0&c\xbc\xccZt\xd4\xefc'
    dict_0 = {bytes_0: bytes_0}
    settings_0 = module_0.Settings(dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.__getattr__(bytes_0)
    assert var_0 == b'\xe1\x14\xf2\xd3B\xc0!E\xc2\xf0&c\xbc\xccZt\xd4\xefc'
    var_1 = settings_0.masked()

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'N{\xc2\xab\\\x8fQ\xc3\xbd\x1fc\xf0\x0b\xe2'
    dict_0 = {bytes_0: bytes_0}
    settings_0 = module_0.Settings(dict_0)
    assert f'{type(settings_0).__module__}.{type(settings_0).__qualname__}' == 'enpyronments.settings.Settings'
    assert len(settings_0) == 1
    var_0 = settings_0.values()
    module_1.object(*var_0, **dict_0)