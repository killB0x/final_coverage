# Automatically generated by Pynguin.
import pytest
import systematic.sshconfig as module_0
import re as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.UserSSHKeys()
    var_0 = module_0.parse_public_key_line_pattern(user_s_s_h_keys_0)

def test_case_1():
    str_0 = '\nKu%jtw\tS#a\x0bNj"Pu'
    var_0 = module_0.parse_public_key_line_pattern(str_0)
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'

@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.UserSSHKeys()

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.items()

@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.UserSSHKeys()
    known_hosts_0 = user_s_s_h_keys_0.load_keys(user_s_s_h_keys_0)

def test_case_5():
    str_0 = 'tW\nD*3C'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.__ne__(known_hosts_entry_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    module_0.AuthorizedKeys()

@pytest.mark.xfail(strict=True)
def test_case_7():
    module_0.SSHConfig()

@pytest.mark.xfail(strict=True)
def test_case_8():
    module_0.SSHConfig()
    var_0 = s_s_h_config_0.values()

def test_case_9():
    str_0 = "Y)HqmmS'70wEyj\x0c0!"
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == "Y)HqmmS'70wEyj\x0c0!"
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == "Y)HqmmS'70wEyj\x0c0!"
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'

@pytest.mark.xfail(strict=True)
def test_case_10():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.KnownHosts(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    module_0.SSHConfigHostPattern(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.values()

@pytest.mark.xfail(strict=True)
def test_case_13():
    module_0.KnownHosts()

@pytest.mark.xfail(strict=True)
def test_case_14():
    module_0.SSHConfig()
    var_0 = s_s_h_config_0.items()

@pytest.mark.xfail(strict=True)
def test_case_15():
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.fix_permissions()

@pytest.mark.xfail(strict=True)
def test_case_16():
    module_0.KnownHosts()
    var_0 = known_hosts_0.find_host_key(known_hosts_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_0.SSHConfig(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    module_0.UserSSHKeys()
    s_s_h_config_0 = module_0.SSHConfig(user_s_s_h_keys_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    module_0.KnownHosts()
    var_0 = known_hosts_0.save()

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'lOJU-/9:q Udp{L$'
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.load_keys(str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.KnownHosts(regex_flag_0)
    var_0 = known_hosts_0.find_host_key(known_hosts_0)

def test_case_22():
    str_0 = 'Ku%jtw\tS8ra\x0bN=pJRvu'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert f'{type(known_hosts_entry_0).__module__}.{type(known_hosts_entry_0).__qualname__}' == 'systematic.sshconfig.KnownHostsEntry'
    assert known_hosts_entry_0.keytype == 'Ku%jtw'
    assert known_hosts_entry_0.fingerprint == 'S8ra\x0bN=pJRvu'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.add_hosts(str_0)
    var_1 = known_hosts_entry_0.__str__()
    assert var_1 == '\t,\x0b,=,J,K,N,R,S,j,p,r,t,u,v,w,8,%,a Ku%jtw S8ra\x0bN=pJRvu'

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '2gs\nD*3Ch'
    module_0.KnownHosts()
    var_0 = known_hosts_0.save(str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '2ts\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = 'tW\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    known_hosts_0 = s_s_h_key_file_0.__eq__(s_s_h_key_file_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = 'q93g\x0c0\n/r`Ug5e'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__ne__(s_s_h_key_file_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "Y)HqmmS'70wEyj\x0c0!"
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.read_config(str_0)

def test_case_28():
    str_0 = '2ts\nD*3C'
    open_s_s_h_public_key_0 = module_0.OpenSSHPublicKey(str_0)
    assert f'{type(open_s_s_h_public_key_0).__module__}.{type(open_s_s_h_public_key_0).__qualname__}' == 'systematic.sshconfig.OpenSSHPublicKey'
    assert len(open_s_s_h_public_key_0) == 1
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'

def test_case_29():
    str_0 = 'tW\nD*3C'
    open_s_s_h_public_key_0 = module_0.OpenSSHPublicKey(str_0)
    assert f'{type(open_s_s_h_public_key_0).__module__}.{type(open_s_s_h_public_key_0).__qualname__}' == 'systematic.sshconfig.OpenSSHPublicKey'
    assert len(open_s_s_h_public_key_0) == 1
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'

@pytest.mark.xfail(strict=True)
def test_case_30():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.UserSSHKeys(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.KnownHosts(regex_flag_0)

def test_case_32():
    str_0 = "Y)HqmmS'70wEyjV0!"
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == "Y)HqmmS'70wEyjV0!"
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == "Y)HqmmS'70wEyjV0!"
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__le__(known_hosts_host_0)
    assert var_0 is True
    var_1 = known_hosts_host_0.__repr__()
    assert var_1 == "hostname Y)HqmmS'70wEyjV0!"

def test_case_33():
    str_0 = 'a\nlD2'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.add_hosts(str_0)

def test_case_34():
    str_0 = 'iaXt<lJ\x0b#9:'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == 'iaXt<lJ\x0b#9:'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == 'iaXt<lJ\x0b#9:'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__ge__(known_hosts_host_0)
    assert var_0 is True

def test_case_35():
    str_0 = "Y)HqmmS'70wEyj\x0c0!"
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == "Y)HqmmS'70wEyj\x0c0!"
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == "Y)HqmmS'70wEyj\x0c0!"
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__ne__(known_hosts_host_0)
    assert var_0 is False

def test_case_36():
    str_0 = '3fW'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == '3fW'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == '3fW'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__lt__(known_hosts_host_0)
    assert var_0 is True

def test_case_37():
    str_0 = 'N8FC'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == 'N8FC'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == 'N8FC'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__lt__(str_0)
    assert var_0 is False

def test_case_38():
    str_0 = 'Ku%jtw\tSra\x0bN=pJ"u'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == 'Ku%jtw\tSra\x0bN=pJ"u'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == 'Ku%jtw\tSra\x0bN=pJ"u'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__gt__(str_0)
    assert var_0 is False

def test_case_39():
    str_0 = 'bits'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == 'bits'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == 'bits'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__gt__(known_hosts_host_0)
    assert var_0 is True

def test_case_40():
    str_0 = 'ts\nD*3C'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == 'ts\nD*3C'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == 'ts\nD*3C'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__le__(known_hosts_host_0)
    assert var_0 is True

def test_case_41():
    str_0 = '2ts\nD*3C'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == '2ts\nD*3C'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == '2ts\nD*3C'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = known_hosts_host_0.__le__(str_0)
    assert var_0 is True

def test_case_42():
    str_0 = '2O]D*3C'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == '2O]D*3C'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == '2O]D*3C'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    known_hosts_0 = known_hosts_host_0.__ge__(str_0)
    assert known_hosts_0 is True

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = '\nKu%jtw\tS#a\x0bNj"Pu'
    open_s_s_h_public_key_0 = module_0.OpenSSHPublicKey(str_0)
    assert f'{type(open_s_s_h_public_key_0).__module__}.{type(open_s_s_h_public_key_0).__qualname__}' == 'systematic.sshconfig.OpenSSHPublicKey'
    assert len(open_s_s_h_public_key_0) == 1
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    open_s_s_h_public_key_0.as_dict()

def test_case_44():
    str_0 = '2ts\nD*3C'
    open_s_s_h_public_key_0 = module_0.OpenSSHPublicKey(str_0)
    assert f'{type(open_s_s_h_public_key_0).__module__}.{type(open_s_s_h_public_key_0).__qualname__}' == 'systematic.sshconfig.OpenSSHPublicKey'
    assert len(open_s_s_h_public_key_0) == 1
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = open_s_s_h_public_key_0.__repr__()
    assert var_0 == '2ts\nD*3C'

@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "Y)qmmS'70wEj\x0c0"
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == "Y)qmmS'70wEj\x0c0"
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == "Y)qmmS'70wEj\x0c0"
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    module_0.OpenSSHPublicKey(str_0)

def test_case_46():
    str_0 = '2ts\nD*3C'
    open_s_s_h_public_key_0 = module_0.OpenSSHPublicKey(str_0)
    assert f'{type(open_s_s_h_public_key_0).__module__}.{type(open_s_s_h_public_key_0).__qualname__}' == 'systematic.sshconfig.OpenSSHPublicKey'
    assert len(open_s_s_h_public_key_0) == 1
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    var_0 = open_s_s_h_public_key_0.__eq__(open_s_s_h_public_key_0)

def test_case_47():
    str_0 = 'lp"]\x0bV\x0bH"ZuE9'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert f'{type(known_hosts_entry_0).__module__}.{type(known_hosts_entry_0).__qualname__}' == 'systematic.sshconfig.KnownHostsEntry'
    assert known_hosts_entry_0.keytype == 'lp"]'
    assert known_hosts_entry_0.fingerprint == 'V\x0bH"ZuE9'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.add_hosts(str_0)

def test_case_48():
    str_0 = '[5\nY'
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    assert f'{type(known_hosts_host_0).__module__}.{type(known_hosts_host_0).__qualname__}' == 'systematic.sshconfig.KnownHostsHost'
    assert known_hosts_host_0.host == '[5\nY'
    assert known_hosts_host_0.type_sort_key == 0
    assert known_hosts_host_0.sort_value == '5\nY'
    assert known_hosts_host_0.type == 'hostname'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'

@pytest.mark.xfail(strict=True)
def test_case_49():
    module_0.UserSSHKeys()
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    var_0 = user_s_s_h_keys_0.read_config(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = 'tW\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__repr__()
    var_1 = s_s_h_key_file_0.__ge__(s_s_h_key_file_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = 'tW\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__eq__(str_0)
    var_1 = s_s_h_key_file_0.__eq__(s_s_h_key_file_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = 'tW\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__ge__(s_s_h_key_file_0)

@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = "Y)HqmmS'70wEyjV0!"
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__gt__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = '2ts\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__lt__(s_s_h_key_file_0)

def test_case_55():
    str_0 = 'Ku%jtw\tS#a\x0bNj"u'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert f'{type(known_hosts_entry_0).__module__}.{type(known_hosts_entry_0).__qualname__}' == 'systematic.sshconfig.KnownHostsEntry'
    assert known_hosts_entry_0.keytype == 'Ku%jtw'
    assert known_hosts_entry_0.fingerprint == 'S#a\x0bNj"u'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.__gt__(known_hosts_entry_0)
    assert var_0 == 0

def test_case_56():
    str_0 = 'lOJU-/9:q Ud]{L$'
    open_s_s_h_public_key_0 = module_0.OpenSSHPublicKey(str_0)
    assert f'{type(open_s_s_h_public_key_0).__module__}.{type(open_s_s_h_public_key_0).__qualname__}' == 'systematic.sshconfig.OpenSSHPublicKey'
    assert len(open_s_s_h_public_key_0) == 1
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    with pytest.raises(module_0.SSHKeyError):
        open_s_s_h_public_key_0.fingerprint(open_s_s_h_public_key_0)

@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = 'tW\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__gt__(s_s_h_key_file_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = '2ts\nD*3C'
    open_s_s_h_public_key_0 = module_1.fullmatch(str_0, str_0)
    var_0 = module_0.SSHConfigHostPattern(str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.sshconfig.SSHConfigHostPattern'
    assert len(var_0) == 0
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.SSHConfigHostPattern.hostname).__module__}.{type(module_0.SSHConfigHostPattern.hostname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.user).__module__}.{type(module_0.SSHConfigHostPattern.user).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__module__}.{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__qualname__}' == 'builtins.property'
    var_0.items()

@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = '2ts\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    known_hosts_host_0 = module_0.KnownHostsHost(str_0)
    var_0 = s_s_h_key_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_60():
    str_0 = '2ts\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__le__(s_s_h_key_file_0)

def test_case_61():
    str_0 = 'a\nlD2'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.__lt__(known_hosts_entry_0)

@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = '2ts\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.unload()

def test_case_63():
    str_0 = "Y)HqmmS'7wEyj\x0c0!"
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.__repr__()
    assert var_0 == "Y)HqmmS'7wEyj 0!"
    var_1 = known_hosts_entry_0.add_hosts(str_0)

@pytest.mark.xfail(strict=True)
def test_case_64():
    str_0 = 'tWO\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)
    var_0 = s_s_h_key_file_0.__le__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = '2ts*3C'
    none_type_0 = None
    module_0.SSHKeyFile(none_type_0, str_0)
    var_0 = s_s_h_key_file_0.__ge__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_66():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_0.SSHConfig(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = 'mS$RZ JZ8@(D[\x0b&G|L1'
    s_s_h_config_host_pattern_0 = module_0.SSHConfigHostPattern(str_0, str_0)
    assert f'{type(s_s_h_config_host_pattern_0).__module__}.{type(s_s_h_config_host_pattern_0).__qualname__}' == 'systematic.sshconfig.SSHConfigHostPattern'
    assert len(s_s_h_config_host_pattern_0) == 0
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.SSHConfigHostPattern.hostname).__module__}.{type(module_0.SSHConfigHostPattern.hostname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.user).__module__}.{type(module_0.SSHConfigHostPattern.user).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__module__}.{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__qualname__}' == 'builtins.property'
    var_0 = s_s_h_config_host_pattern_0.__repr__()
    assert var_0 == 'Host mS$RZ JZ8@(D[\x0b&G|L1'
    s_s_h_config_host_pattern_0.values()

def test_case_68():
    str_0 = 'Ku%jtw\tS#a\x0bNj"u'
    known_hosts_entry_0 = module_0.KnownHostsEntry(str_0)
    assert f'{type(known_hosts_entry_0).__module__}.{type(known_hosts_entry_0).__qualname__}' == 'systematic.sshconfig.KnownHostsEntry'
    assert known_hosts_entry_0.keytype == 'Ku%jtw'
    assert known_hosts_entry_0.fingerprint == 'S#a\x0bNj"u'
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.KnownHostsEntry.hosts).__module__}.{type(module_0.KnownHostsEntry.hosts).__qualname__}' == 'builtins.property'
    var_0 = known_hosts_entry_0.add_hosts(str_0)

@pytest.mark.xfail(strict=True)
def test_case_69():
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.items()
    s_s_h_config_0 = module_0.SSHConfig()
    bytes_0 = b'/\x13\x04\xb5u\xc7\xebJ\xe0\xde\xe0@\xc8JG\x14'
    var_1 = user_s_s_h_keys_0.load_keys(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_70():
    module_0.UserSSHKeys()
    bool_0 = True
    var_0 = user_s_s_h_keys_0.read_config(bool_0)
    var_1 = user_s_s_h_keys_0.items()

@pytest.mark.xfail(strict=True)
def test_case_71():
    str_0 = 'Ku%jtw\tS#a\x0bNj"u'
    module_0.SSHConfig(str_0)

@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = ' W3D*3C'
    module_0.SSHKeyFile(str_0, str_0)
    user_s_s_h_keys_0 = s_s_h_key_file_0.__lt__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = 'Ku%jtw\tS#a\x0bNj"u'
    module_0.UserSSHKeys(str_0)

@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = '2ts\nD*3C'
    module_0.SSHKeyFile(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_75():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.KnownHosts(regex_flag_0, regex_flag_0)

def test_case_76():
    str_0 = '2ts\nM*cC'
    s_s_h_config_host_pattern_0 = module_0.SSHConfigHostPattern(str_0, str_0)
    assert f'{type(s_s_h_config_host_pattern_0).__module__}.{type(s_s_h_config_host_pattern_0).__qualname__}' == 'systematic.sshconfig.SSHConfigHostPattern'
    assert len(s_s_h_config_host_pattern_0) == 0
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.SSHConfigHostPattern.hostname).__module__}.{type(module_0.SSHConfigHostPattern.hostname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.user).__module__}.{type(module_0.SSHConfigHostPattern.user).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__module__}.{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__qualname__}' == 'builtins.property'
    var_0 = s_s_h_config_host_pattern_0.parse(str_0)
    assert len(s_s_h_config_host_pattern_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_77():
    str_0 = '2ts\nD*3C'
    s_s_h_config_host_pattern_0 = module_0.SSHConfigHostPattern(str_0, str_0)
    assert f'{type(s_s_h_config_host_pattern_0).__module__}.{type(s_s_h_config_host_pattern_0).__qualname__}' == 'systematic.sshconfig.SSHConfigHostPattern'
    assert len(s_s_h_config_host_pattern_0) == 0
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.SSHConfigHostPattern.hostname).__module__}.{type(module_0.SSHConfigHostPattern.hostname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.user).__module__}.{type(module_0.SSHConfigHostPattern.user).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__module__}.{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__qualname__}' == 'builtins.property'
    s_s_h_config_host_pattern_0.__getitem__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_78():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.UserSSHKeys(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "2t?s\nD'3\nb\rZC"
    module_0.OpenSSHPublicKey(str_0)

@pytest.mark.xfail(strict=True)
def test_case_80():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    module_0.UserSSHKeys()
    var_0 = user_s_s_h_keys_0.read_config(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = '2ts\nD*3C'
    open_s_s_h_public_key_0 = module_0.parse_public_key_line_pattern(str_0)
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    s_s_h_config_host_pattern_0 = module_0.SSHConfigHostPattern(open_s_s_h_public_key_0, str_0)
    assert f'{type(s_s_h_config_host_pattern_0).__module__}.{type(s_s_h_config_host_pattern_0).__qualname__}' == 'systematic.sshconfig.SSHConfigHostPattern'
    assert len(s_s_h_config_host_pattern_0) == 0
    assert f'{type(module_0.SSHConfigHostPattern.hostname).__module__}.{type(module_0.SSHConfigHostPattern.hostname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.user).__module__}.{type(module_0.SSHConfigHostPattern.user).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__module__}.{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__qualname__}' == 'builtins.property'
    s_s_h_config_host_pattern_0.parse(open_s_s_h_public_key_0)

@pytest.mark.xfail(strict=True)
def test_case_82():
    module_0.UserSSHKeys()
    bool_0 = False
    var_0 = user_s_s_h_keys_0.read_config(bool_0)
    var_1 = user_s_s_h_keys_0.values()

def test_case_83():
    str_0 = 't`TUW?i'
    s_s_h_config_host_pattern_0 = module_0.SSHConfigHostPattern(str_0, str_0)
    assert f'{type(s_s_h_config_host_pattern_0).__module__}.{type(s_s_h_config_host_pattern_0).__qualname__}' == 'systematic.sshconfig.SSHConfigHostPattern'
    assert len(s_s_h_config_host_pattern_0) == 0
    assert module_0.SSH_CONFIG_FILES == ('authorized_keys', 'config', 'known_hosts', 'sshkeys.conf')
    assert module_0.DEFAULT_CONFIG == '/root/.ssh/sshkeys.conf'
    assert module_0.DEFAULT_AUTHORIZED_KEYS == '/root/.ssh/authorized_keys'
    assert module_0.DEFAULT_KNOWN_HOSTS == '/root/.ssh/known_hosts'
    assert module_0.SSH_DIR_PERMS == '0700'
    assert module_0.SSH_FILE_PERMS == '0600'
    assert f'{type(module_0.SSHConfigHostPattern.hostname).__module__}.{type(module_0.SSHConfigHostPattern.hostname).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.user).__module__}.{type(module_0.SSHConfigHostPattern.user).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_agent_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__module__}.{type(module_0.SSHConfigHostPattern.forward_x11_enabled).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__module__}.{type(module_0.SSHConfigHostPattern.tcp_keepalive_enabled).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        s_s_h_config_host_pattern_0.parse(str_0)