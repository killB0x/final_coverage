# Automatically generated by Pynguin.
import pytest
import systematic.platform.linux.system as module_0
import enum as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.SystemInformation()

def test_case_1():
    str_0 = 'ap'
    c_p_u_info_0 = module_0.CPUInfo(str_0)
    assert f'{type(c_p_u_info_0).__module__}.{type(c_p_u_info_0).__qualname__}' == 'systematic.platform.linux.system.CPUInfo'
    assert len(c_p_u_info_0) == 0
    assert module_0.CPUINFO_BOOLEAN_FIELDS == ('fpu', 'fpu_exception', 'wp')
    assert module_0.CPUINFO_FLOAT_FIELDS == ('cpu MHz', 'bogomips')
    assert module_0.CPUINFO_INTEGER_FIELDS == ('cpu family', 'model', 'model name', 'stepping', 'microcode', 'cpu MHz', 'cache size', 'physical id', 'siblings', 'core id', 'cpu cores', 'apicid', 'initial apicid', 'cpuid level', 'clflush size', 'cache_alignment')
    assert module_0.CPUINFO_LIST_FIELDS == ('flags',)
    var_0 = c_p_u_info_0.__setitem__(str_0, str_0)
    assert len(c_p_u_info_0) == 1

def test_case_2():
    enum_dict_0 = module_1._EnumDict()
    c_p_u_info_0 = module_0.CPUInfo(enum_dict_0)
    assert module_0.CPUINFO_BOOLEAN_FIELDS == ('fpu', 'fpu_exception', 'wp')
    assert module_0.CPUINFO_FLOAT_FIELDS == ('cpu MHz', 'bogomips')
    assert module_0.CPUINFO_INTEGER_FIELDS == ('cpu family', 'model', 'model name', 'stepping', 'microcode', 'cpu MHz', 'cache size', 'physical id', 'siblings', 'core id', 'cpu cores', 'apicid', 'initial apicid', 'cpuid level', 'clflush size', 'cache_alignment')
    assert module_0.CPUINFO_LIST_FIELDS == ('flags',)
    var_0 = c_p_u_info_0.__repr__()
    assert var_0 == 'CPU {}'
    var_1 = c_p_u_info_0.__setitem__(var_0, var_0)
    assert len(c_p_u_info_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'akB'
    mem_info_0 = module_0.MemInfo()
    assert module_0.CPUINFO_BOOLEAN_FIELDS == ('fpu', 'fpu_exception', 'wp')
    assert module_0.CPUINFO_FLOAT_FIELDS == ('cpu MHz', 'bogomips')
    assert module_0.CPUINFO_INTEGER_FIELDS == ('cpu family', 'model', 'model name', 'stepping', 'microcode', 'cpu MHz', 'cache size', 'physical id', 'siblings', 'core id', 'cpu cores', 'apicid', 'initial apicid', 'cpuid level', 'clflush size', 'cache_alignment')
    assert module_0.CPUINFO_LIST_FIELDS == ('flags',)
    mem_info_0.__setitem__(mem_info_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ' kB'
    c_p_u_info_0 = module_0.CPUInfo(str_0)
    assert f'{type(c_p_u_info_0).__module__}.{type(c_p_u_info_0).__qualname__}' == 'systematic.platform.linux.system.CPUInfo'
    assert len(c_p_u_info_0) == 0
    assert module_0.CPUINFO_BOOLEAN_FIELDS == ('fpu', 'fpu_exception', 'wp')
    assert module_0.CPUINFO_FLOAT_FIELDS == ('cpu MHz', 'bogomips')
    assert module_0.CPUINFO_INTEGER_FIELDS == ('cpu family', 'model', 'model name', 'stepping', 'microcode', 'cpu MHz', 'cache size', 'physical id', 'siblings', 'core id', 'cpu cores', 'apicid', 'initial apicid', 'cpuid level', 'clflush size', 'cache_alignment')
    assert module_0.CPUINFO_LIST_FIELDS == ('flags',)
    var_0 = c_p_u_info_0.__repr__()
    assert var_0 == 'CPU  kB'
    var_1 = c_p_u_info_0.__setitem__(str_0, str_0)
    assert len(c_p_u_info_0) == 1
    mem_info_0 = module_0.MemInfo()
    var_2 = c_p_u_info_0.__setitem__(var_0, c_p_u_info_0)
    assert len(c_p_u_info_0) == 2
    mem_info_0.__setitem__(mem_info_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'physical id'
    c_p_u_info_0 = module_0.CPUInfo(str_0)
    assert f'{type(c_p_u_info_0).__module__}.{type(c_p_u_info_0).__qualname__}' == 'systematic.platform.linux.system.CPUInfo'
    assert len(c_p_u_info_0) == 0
    assert module_0.CPUINFO_BOOLEAN_FIELDS == ('fpu', 'fpu_exception', 'wp')
    assert module_0.CPUINFO_FLOAT_FIELDS == ('cpu MHz', 'bogomips')
    assert module_0.CPUINFO_INTEGER_FIELDS == ('cpu family', 'model', 'model name', 'stepping', 'microcode', 'cpu MHz', 'cache size', 'physical id', 'siblings', 'core id', 'cpu cores', 'apicid', 'initial apicid', 'cpuid level', 'clflush size', 'cache_alignment')
    assert module_0.CPUINFO_LIST_FIELDS == ('flags',)
    var_0 = c_p_u_info_0.__repr__()
    assert var_0 == 'CPU physical id'
    c_p_u_info_0.__setitem__(str_0, str_0)