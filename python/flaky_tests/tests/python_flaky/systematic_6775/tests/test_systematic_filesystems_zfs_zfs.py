# Automatically generated by Pynguin.
import pytest
import systematic.filesystems.zfs.zfs as module_0
import systematic.filesystems as module_1
import systematic.shell as module_2

def test_case_0():
    bool_0 = False
    z_f_s_volume_0 = module_0.ZFSVolume(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client is False
    assert z_f_s_volume_0.name is False
    assert z_f_s_volume_0.used == 0
    assert z_f_s_volume_0.available is None
    assert z_f_s_volume_0.references == 0
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint is None
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')

def test_case_1():
    float_0 = -3818.0
    z_f_s_volume_0 = module_0.ZFSVolume(float_0, float_0, float_0, float_0, float_0, float_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client == pytest.approx(-3818.0, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.name == pytest.approx(-3818.0, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.used == -3818
    assert z_f_s_volume_0.available == -3818
    assert z_f_s_volume_0.references == -3818
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint == pytest.approx(-3818.0, abs=0.01, rel=0.01)
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    var_0 = z_f_s_volume_0.as_dict(float_0)
    with pytest.raises(module_1.FilesystemError):
        z_f_s_volume_0.get_property(float_0)

def test_case_2():
    int_0 = 394
    z_f_s_snapshot_0 = module_0.ZFSSnapshot(int_0, int_0, int_0, int_0, int_0, int_0)
    assert f'{type(z_f_s_snapshot_0).__module__}.{type(z_f_s_snapshot_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSSnapshot'
    assert z_f_s_snapshot_0.client == 394
    assert z_f_s_snapshot_0.name == 394
    assert z_f_s_snapshot_0.used == 394
    assert z_f_s_snapshot_0.available == 394
    assert z_f_s_snapshot_0.references == 394
    assert z_f_s_snapshot_0.fstype == 'snapshot'
    assert z_f_s_snapshot_0.mountpoint == 394
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    assert f'{type(module_0.ZFSSnapshot.volume).__module__}.{type(module_0.ZFSSnapshot.volume).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFSSnapshot.snapshot).__module__}.{type(module_0.ZFSSnapshot.snapshot).__qualname__}' == 'builtins.property'

def test_case_3():
    zfs_client_0 = module_0.ZfsClient()
    assert zfs_client_0.volumes == []
    assert zfs_client_0.snapshots == []
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    with pytest.raises(module_1.FilesystemError):
        zfs_client_0.load_volumes()

def test_case_4():
    zfs_client_0 = module_0.ZfsClient()
    assert zfs_client_0.volumes == []
    assert zfs_client_0.snapshots == []
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    with pytest.raises(module_1.FilesystemError):
        zfs_client_0.load_snapshots()

def test_case_5():
    zfs_client_0 = module_0.ZfsClient()
    assert zfs_client_0.volumes == []
    assert zfs_client_0.snapshots == []
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')

@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -3818.0
    z_f_s_volume_0 = module_0.ZFSVolume(float_0, float_0, float_0, float_0, float_0, float_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client == pytest.approx(-3818.0, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.name == pytest.approx(-3818.0, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.used == -3818
    assert z_f_s_volume_0.available == -3818
    assert z_f_s_volume_0.references == -3818
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint == pytest.approx(-3818.0, abs=0.01, rel=0.01)
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    var_0 = z_f_s_volume_0.as_dict()
    var_1 = z_f_s_volume_0.__repr__()
    assert var_1 == 'zfs -3818.0 0 GB'
    var_0.as_dict()

def test_case_7():
    float_0 = -3817.9904714849877
    z_f_s_volume_0 = module_0.ZFSVolume(float_0, float_0, float_0, float_0, float_0, float_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.name == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.used == -3817
    assert z_f_s_volume_0.available == -3817
    assert z_f_s_volume_0.references == -3817
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')

def test_case_8():
    bool_0 = False
    z_f_s_volume_0 = module_0.ZFSVolume(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client is False
    assert z_f_s_volume_0.name is False
    assert z_f_s_volume_0.used == 0
    assert z_f_s_volume_0.available is None
    assert z_f_s_volume_0.references == 0
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint is None
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    with pytest.raises(AttributeError):
        z_f_s_volume_0.__getattr__(z_f_s_volume_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 394
    z_f_s_snapshot_0 = module_0.ZFSSnapshot(int_0, int_0, int_0, int_0, int_0, int_0)
    assert f'{type(z_f_s_snapshot_0).__module__}.{type(z_f_s_snapshot_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSSnapshot'
    assert z_f_s_snapshot_0.client == 394
    assert z_f_s_snapshot_0.name == 394
    assert z_f_s_snapshot_0.used == 394
    assert z_f_s_snapshot_0.available == 394
    assert z_f_s_snapshot_0.references == 394
    assert z_f_s_snapshot_0.fstype == 'snapshot'
    assert z_f_s_snapshot_0.mountpoint == 394
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    assert f'{type(module_0.ZFSSnapshot.volume).__module__}.{type(module_0.ZFSSnapshot.volume).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFSSnapshot.snapshot).__module__}.{type(module_0.ZFSSnapshot.snapshot).__qualname__}' == 'builtins.property'
    z_f_s_snapshot_0.as_dict(int_0)

def test_case_10():
    float_0 = -3817.9904714849877
    none_type_0 = None
    z_f_s_snapshot_0 = module_0.ZFSSnapshot(float_0, float_0, float_0, float_0, float_0, none_type_0)
    assert f'{type(z_f_s_snapshot_0).__module__}.{type(z_f_s_snapshot_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSSnapshot'
    assert z_f_s_snapshot_0.client == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert z_f_s_snapshot_0.name == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert z_f_s_snapshot_0.used == -3817
    assert z_f_s_snapshot_0.available == -3817
    assert z_f_s_snapshot_0.references == -3817
    assert z_f_s_snapshot_0.fstype == 'snapshot'
    assert z_f_s_snapshot_0.mountpoint is None
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    assert f'{type(module_0.ZFSSnapshot.volume).__module__}.{type(module_0.ZFSSnapshot.volume).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFSSnapshot.snapshot).__module__}.{type(module_0.ZFSSnapshot.snapshot).__qualname__}' == 'builtins.property'
    var_0 = module_2.ShellCommandParser()

def test_case_11():
    bool_0 = False
    z_f_s_volume_0 = module_0.ZFSVolume(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client is False
    assert z_f_s_volume_0.name is False
    assert z_f_s_volume_0.used == 0
    assert z_f_s_volume_0.available is None
    assert z_f_s_volume_0.references == 0
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint is None
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    var_0 = z_f_s_volume_0.as_dict()

def test_case_12():
    float_0 = -3817.9904714849877
    z_f_s_volume_0 = module_0.ZFSVolume(float_0, float_0, float_0, float_0, float_0, float_0)
    assert f'{type(z_f_s_volume_0).__module__}.{type(z_f_s_volume_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSVolume'
    assert z_f_s_volume_0.client == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.name == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert z_f_s_volume_0.used == -3817
    assert z_f_s_volume_0.available == -3817
    assert z_f_s_volume_0.references == -3817
    assert z_f_s_volume_0.fstype == 'zfs'
    assert z_f_s_volume_0.mountpoint == pytest.approx(-3817.9904714849877, abs=0.01, rel=0.01)
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    var_0 = z_f_s_volume_0.as_dict(float_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    z_f_s_0 = module_0.ZFS(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(z_f_s_0).__module__}.{type(z_f_s_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFS'
    assert z_f_s_0.client is False
    assert z_f_s_0.name is False
    assert z_f_s_0.used == 0
    assert z_f_s_0.available is None
    assert z_f_s_0.references == 0
    assert z_f_s_0.fstype == 'zfs'
    assert z_f_s_0.mountpoint is None
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    assert f'{type(module_0.ZFS.used_gb).__module__}.{type(module_0.ZFS.used_gb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFS.available_gb).__module__}.{type(module_0.ZFS.available_gb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFS.created).__module__}.{type(module_0.ZFS.created).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFS.zpool).__module__}.{type(module_0.ZFS.zpool).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFS.properties).__module__}.{type(module_0.ZFS.properties).__qualname__}' == 'builtins.property'
    float_0 = -3818.8285517245695
    zfs_client_0 = module_0.ZfsClient()
    assert zfs_client_0.volumes == []
    assert zfs_client_0.snapshots == []
    str_0 = '-'
    z_f_s_snapshot_0 = module_0.ZFSSnapshot(zfs_client_0, float_0, float_0, float_0, float_0, str_0)
    assert f'{type(z_f_s_snapshot_0.client).__module__}.{type(z_f_s_snapshot_0.client).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZfsClient'
    assert z_f_s_snapshot_0.name == pytest.approx(-3818.8285517245695, abs=0.01, rel=0.01)
    assert z_f_s_snapshot_0.used == -3818
    assert z_f_s_snapshot_0.available == -3818
    assert z_f_s_snapshot_0.references == -3818
    assert z_f_s_snapshot_0.fstype == 'snapshot'
    assert z_f_s_snapshot_0.mountpoint is None
    assert f'{type(module_0.ZFSSnapshot.volume).__module__}.{type(module_0.ZFSSnapshot.volume).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFSSnapshot.snapshot).__module__}.{type(module_0.ZFSSnapshot.snapshot).__qualname__}' == 'builtins.property'
    none_type_0 = None
    module_0.ZFSSnapshot(none_type_0, none_type_0, none_type_0, float_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '9'
    none_type_0 = None
    z_f_s_snapshot_0 = module_0.ZFSSnapshot(str_0, str_0, str_0, str_0, str_0, none_type_0)
    assert f'{type(z_f_s_snapshot_0).__module__}.{type(z_f_s_snapshot_0).__qualname__}' == 'systematic.filesystems.zfs.zfs.ZFSSnapshot'
    assert z_f_s_snapshot_0.client == '9'
    assert z_f_s_snapshot_0.name == '9'
    assert z_f_s_snapshot_0.used == 9
    assert z_f_s_snapshot_0.available == 9
    assert z_f_s_snapshot_0.references == 9
    assert z_f_s_snapshot_0.fstype == 'snapshot'
    assert z_f_s_snapshot_0.mountpoint is None
    assert module_0.ZFS_LIST_FIELDS == ('name', 'used', 'available', 'references', 'mountpoint')
    assert module_0.ZFS_PROPERTIES == ('available', 'clones', 'compressratio', 'creation', 'defer_destroy', 'logicalreferenced', 'logicalused', 'mounted', 'origin', 'receive_resume_token', 'refcompressratio', 'referenced', 'type', 'used', 'usedbychildren', 'usedbydataset', 'usedbyrefreservation', 'usedbysnapshots', 'userrefs', 'written', 'aclinherit', 'aclmode', 'atime', 'canmount', 'casesensitivity', 'checksum', 'compression', 'copies', 'dedup', 'devices', 'exec', 'filesystem_count', 'filesystem_limit', 'jailed', 'logbias', 'mlslabel', 'mountpoint', 'nbmand', 'normalization', 'primarycache', 'quota', 'readonly', 'recordsize', 'redundant_metadata', 'refquota', 'refreservation', 'reservation', 'secondarycache', 'setuid', 'sharenfs', 'sharesmb', 'snapdir', 'snapshot_count', 'snapshot_limit', 'sync', 'utf8only', 'version', 'volblocksize', 'volmode', 'volsize', 'vscan', 'xattr')
    assert module_0.ZFS_BOOLEAN_PROPERTIES == ('defer_destroy', 'mounted', 'atime', 'devices', 'exec', 'jailed', 'nbmand', 'readonly', 'setuid', 'utf8only', 'vscan', 'xattr')
    assert module_0.ZFS_INTEGER_PROPERTIES == ('available', 'creation', 'logicalused', 'referenced', 'used', 'usedbychildren', 'usedbydataset', 'usedbysnapshots', 'written', 'filesystem_count', 'copies', 'refquota', 'refreservation', 'reservation', 'snapshot_count', 'snapshot_limit')
    assert f'{type(module_0.ZFSSnapshot.volume).__module__}.{type(module_0.ZFSSnapshot.volume).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ZFSSnapshot.snapshot).__module__}.{type(module_0.ZFSSnapshot.snapshot).__qualname__}' == 'builtins.property'
    z_f_s_snapshot_0.as_dict(str_0)