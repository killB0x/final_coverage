# Automatically generated by Pynguin.
import pytest
import systematic.user as module_0
import builtins as module_1

def test_case_0():
    none_type_0 = None
    group_map_0 = module_0.GroupMap(none_type_0)
    assert group_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = group_map_0.__next__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.user.Group'
    assert var_0.db is None
    assert var_0.gid == 0
    assert var_0.password == 'x'
    assert var_0.name == 'root'
    assert var_0.member_uids == []
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert module_0.Group.idattr == 'gid'
    assert module_0.Group.nameattr == 'name'
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'

def test_case_1():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = unix_password_d_b_0.load()

@pytest.mark.xfail(strict=True)
def test_case_2():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    unix_password_d_b_0.lookup_uid(unix_password_d_b_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    unix_password_d_b_0.get_user_groups(unix_password_d_b_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    unix_password_d_b_0.lookup_gid(unix_password_d_b_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    unix_password_d_b_0.lookup_group(unix_password_d_b_0)

def test_case_6():
    database_error_0 = module_0.DatabaseError()
    assert module_0.DEFAULT_CACHE_SECONDS == 300

def test_case_7():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    database_entry_map_0 = module_0.DatabaseEntryMap(none_type_0)
    assert database_entry_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    database_entry_map_0.load()

def test_case_9():
    none_type_0 = None
    user_map_0 = module_0.UserMap(none_type_0)
    assert user_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    exception_0 = module_1.Exception(*user_map_0)

def test_case_10():
    none_type_0 = None
    group_map_0 = module_0.GroupMap(none_type_0)
    assert group_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    dict_0 = {}
    user_map_0 = module_0.UserMap(dict_0)
    assert user_map_0.cache_seconds == 300
    var_0 = user_map_0.next()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.user.User'
    assert var_0.db == {}
    assert var_0.username == 'root'
    assert var_0.password == 'x'
    assert var_0.gecos == 'root'
    assert var_0.uid == 0
    assert var_0.gid == 0
    assert var_0.shell == '/bin/bash'
    assert var_0.directory == '/root'
    assert module_0.User.compare_fields == ('username', 'uid', 'gid', 'directory', 'gecos', 'shell')
    assert module_0.User.idattr == 'uid'
    assert module_0.User.nameattr == 'username'
    assert f'{type(module_0.User.group).__module__}.{type(module_0.User.group).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_11():
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    unix_password_d_b_0.lookup_user(unix_password_d_b_0)

def test_case_12():
    dict_0 = {}
    user_map_0 = module_0.UserMap(dict_0)
    assert user_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = user_map_0.next()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.user.User'
    assert var_0.db == {}
    assert var_0.username == 'root'
    assert var_0.password == 'x'
    assert var_0.gecos == 'root'
    assert var_0.uid == 0
    assert var_0.gid == 0
    assert var_0.shell == '/bin/bash'
    assert var_0.directory == '/root'
    assert module_0.User.compare_fields == ('username', 'uid', 'gid', 'directory', 'gecos', 'shell')
    assert module_0.User.idattr == 'uid'
    assert module_0.User.nameattr == 'username'
    assert f'{type(module_0.User.group).__module__}.{type(module_0.User.group).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.DatabaseError):
        user_map_0.__load_by_name__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    database_entry_map_0 = module_0.DatabaseEntryMap(bool_0)
    assert database_entry_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    database_entry_map_0.lookup_id(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '|06\n-'
    database_entry_map_0 = module_0.DatabaseEntryMap(str_0)
    assert database_entry_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    database_entry_map_0.lookup_name(str_0)

def test_case_15():
    none_type_0 = None
    group_map_0 = module_0.GroupMap(none_type_0, none_type_0)
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = group_map_0.__next__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.user.Group'
    assert var_0.db is None
    assert var_0.gid == 0
    assert var_0.password == 'x'
    assert var_0.name == 'root'
    assert var_0.member_uids == []
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert module_0.Group.idattr == 'gid'
    assert module_0.Group.nameattr == 'name'
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'
    var_1 = group_map_0.load()

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    group_map_0 = module_0.GroupMap(none_type_0)
    assert group_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = group_map_0.load()
    dict_0 = {}
    var_1 = group_map_0.load()
    var_0.__load_by_id__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    database_entry_map_0 = module_0.DatabaseEntryMap(none_type_0)
    assert database_entry_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    group_map_0 = module_0.GroupMap(none_type_0, none_type_0)
    var_0 = database_entry_map_0.__create_object__(none_type_0)
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    var_1 = group_map_0.__next__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'systematic.user.Group'
    assert var_1.db is None
    assert var_1.gid == 0
    assert var_1.password == 'x'
    assert var_1.name == 'root'
    assert var_1.member_uids == []
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert module_0.Group.idattr == 'gid'
    assert module_0.Group.nameattr == 'name'
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'
    var_2 = group_map_0.load()
    user_map_0 = module_0.UserMap(group_map_0)
    assert user_map_0.cache_seconds == 300
    exception_0 = module_1.Exception(*user_map_0)
    unix_password_d_b_0.lookup_gid(exception_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    group_map_0 = module_0.GroupMap(none_type_0)
    assert group_map_0.cache_seconds == 300
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = group_map_0.__next__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.user.Group'
    assert var_0.db is None
    assert var_0.gid == 0
    assert var_0.password == 'x'
    assert var_0.name == 'root'
    assert var_0.member_uids == []
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert module_0.Group.idattr == 'gid'
    assert module_0.Group.nameattr == 'name'
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'
    group_map_0.__load_by_id__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = unix_password_d_b_0.load_groups()
    var_1 = unix_password_d_b_0.lookup_gid(bool_0)
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'
    var_2 = var_1.validate_members()
    var_2.__load_by_name__(var_0)

def test_case_20():
    bool_0 = False
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = unix_password_d_b_0.lookup_gid(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.user.Group'
    assert f'{type(var_0.db).__module__}.{type(var_0.db).__qualname__}' == 'systematic.user.UnixPasswordDB'
    assert var_0.gid == 0
    assert var_0.password == 'x'
    assert var_0.name == 'root'
    assert var_0.member_uids == []
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert module_0.Group.idattr == 'gid'
    assert module_0.Group.nameattr == 'name'
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'
    var_1 = var_0.validate_members()

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    unix_password_d_b_0 = module_0.UnixPasswordDB()
    assert module_0.DEFAULT_CACHE_SECONDS == 300
    var_0 = unix_password_d_b_0.load()
    var_1 = unix_password_d_b_0.lookup_gid(bool_0)
    assert module_0.Group.compare_fields == ('name', 'gid', 'member_uids')
    assert f'{type(module_0.Group.members).__module__}.{type(module_0.Group.members).__qualname__}' == 'builtins.property'
    var_2 = var_1.validate_members()
    str_0 = 'sync'
    var_3 = unix_password_d_b_0.lookup_user(str_0)
    assert module_0.User.compare_fields == ('username', 'uid', 'gid', 'directory', 'gecos', 'shell')
    assert f'{type(module_0.User.group).__module__}.{type(module_0.User.group).__qualname__}' == 'builtins.property'
    var_2.load()