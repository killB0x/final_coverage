# Automatically generated by Pynguin.
import pytest
import systematic.dates as module_0
import re as module_1
import collections.abc as module_2
import encodings as module_3

def test_case_0():
    day_0 = module_0.Day()
    assert f'{type(day_0).__module__}.{type(day_0).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(day_0.log).__module__}.{type(day_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(day_0.value).__module__}.{type(day_0.value).__qualname__}' == 'datetime.date'
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']

def test_case_1():
    str_0 = "|'0hT`%FYMIn+IE78"
    with pytest.raises(module_0.DatesError):
        module_0.Day(str_0)

def test_case_2():
    week_0 = module_0.Week()
    assert f'{type(week_0).__module__}.{type(week_0).__qualname__}' == 'systematic.dates.Week'
    assert f'{type(week_0.log).__module__}.{type(week_0.log).__qualname__}' == 'logging.Logger'
    assert week_0.firstweekday == 1
    assert f'{type(week_0.first).__module__}.{type(week_0.first).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(week_0.last).__module__}.{type(week_0.last).__qualname__}' == 'systematic.dates.Day'
    assert week_0.weeknumber == 41
    assert f'{type(week_0.workdays).__module__}.{type(week_0.workdays).__qualname__}' == 'builtins.list'
    assert len(week_0.workdays) == 5
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    assert f'{type(module_0.Week.previous_week).__module__}.{type(module_0.Week.previous_week).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Week.next_week).__module__}.{type(module_0.Week.next_week).__qualname__}' == 'builtins.property'
    var_0 = week_0.__str__()
    assert var_0 == 'Week 41 2022-10-10 - 2022-10-16'

def test_case_3():
    month_0 = module_0.Month()
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    dates_error_0 = module_0.DatesError()

@pytest.mark.xfail(strict=True)
def test_case_4():
    month_0 = module_0.Month()
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.next()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(var_0.log).__module__}.{type(var_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'datetime.date'
    day_0 = module_0.Day()
    module_1.compile(day_0)

def test_case_5():
    day_0 = module_0.Day()
    assert f'{type(day_0).__module__}.{type(day_0).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(day_0.log).__module__}.{type(day_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(day_0.value).__module__}.{type(day_0.value).__qualname__}' == 'datetime.date'
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = day_0.__int__()
    assert var_0 == 1665619200
    var_1 = day_0.__ne__(day_0)
    assert var_1 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    month_0 = module_0.Month()
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    day_0 = module_0.Day()
    day_1 = module_0.Day()
    var_0 = month_0.__len__()
    var_1 = month_0.__repr__()
    assert var_1 == 'October 2022'
    day_1.__gt__(month_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    day_0 = module_0.Day()
    assert f'{type(day_0).__module__}.{type(day_0).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(day_0.log).__module__}.{type(day_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(day_0.value).__module__}.{type(day_0.value).__qualname__}' == 'datetime.date'
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = day_0.__ge__(day_0)
    assert var_0 is True
    var_1 = day_0.__lt__(day_0)
    assert var_1 is False
    var_1.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    week_0 = module_0.Week()
    assert f'{type(week_0).__module__}.{type(week_0).__qualname__}' == 'systematic.dates.Week'
    assert f'{type(week_0.log).__module__}.{type(week_0.log).__qualname__}' == 'logging.Logger'
    assert week_0.firstweekday == 1
    assert f'{type(week_0.first).__module__}.{type(week_0.first).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(week_0.last).__module__}.{type(week_0.last).__qualname__}' == 'systematic.dates.Day'
    assert week_0.weeknumber == 41
    assert f'{type(week_0.workdays).__module__}.{type(week_0.workdays).__qualname__}' == 'builtins.list'
    assert len(week_0.workdays) == 5
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    assert f'{type(module_0.Week.previous_week).__module__}.{type(module_0.Week.previous_week).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Week.next_week).__module__}.{type(module_0.Week.next_week).__qualname__}' == 'builtins.property'
    mapping_view_0 = module_2.MappingView(week_0)
    week_0.__getitem__(week_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    week_0 = module_0.Week()
    assert f'{type(week_0).__module__}.{type(week_0).__qualname__}' == 'systematic.dates.Week'
    assert f'{type(week_0.log).__module__}.{type(week_0.log).__qualname__}' == 'logging.Logger'
    assert week_0.firstweekday == 1
    assert f'{type(week_0.first).__module__}.{type(week_0.first).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(week_0.last).__module__}.{type(week_0.last).__qualname__}' == 'systematic.dates.Day'
    assert week_0.weeknumber == 41
    assert f'{type(week_0.workdays).__module__}.{type(week_0.workdays).__qualname__}' == 'builtins.list'
    assert len(week_0.workdays) == 5
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    assert f'{type(module_0.Week.previous_week).__module__}.{type(module_0.Week.previous_week).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Week.next_week).__module__}.{type(module_0.Week.next_week).__qualname__}' == 'builtins.property'
    var_0 = week_0.__iter__()
    assert var_0.firstweekday == 1
    assert var_0.weeknumber == 41
    assert len(var_0.workdays) == 5
    week_0.__getattr__(week_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    month_0 = module_0.Month()
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.__hash__()
    var_1 = var_0.__repr__()
    assert var_1 == '2022-10-01'
    var_2 = var_1.__str__()
    assert var_2 == '2022-10-01'
    var_3 = month_0.__repr__()
    assert var_3 == 'October 2022'
    var_0.reset()

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    month_0 = module_0.Month(input_format=none_type_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.__iter__()
    var_0.endswith(month_0, none_type_0)

def test_case_12():
    bool_0 = False
    week_0 = module_0.Week(bool_0, firstweekday=bool_0, workdays_per_week=bool_0)
    assert f'{type(week_0).__module__}.{type(week_0).__qualname__}' == 'systematic.dates.Week'
    assert f'{type(week_0.log).__module__}.{type(week_0.log).__qualname__}' == 'logging.Logger'
    assert week_0.firstweekday == 0
    assert f'{type(week_0.first).__module__}.{type(week_0.first).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(week_0.last).__module__}.{type(week_0.last).__qualname__}' == 'systematic.dates.Day'
    assert week_0.weeknumber == 52
    assert week_0.workdays == []
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    assert f'{type(module_0.Week.previous_week).__module__}.{type(module_0.Week.previous_week).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Week.next_week).__module__}.{type(module_0.Week.next_week).__qualname__}' == 'builtins.property'
    var_0 = week_0.__add__(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.dates.Week'
    assert f'{type(var_0.log).__module__}.{type(var_0.log).__qualname__}' == 'logging.Logger'
    assert var_0.firstweekday == 0
    assert f'{type(var_0.first).__module__}.{type(var_0.first).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(var_0.last).__module__}.{type(var_0.last).__qualname__}' == 'systematic.dates.Day'
    assert var_0.weeknumber == 52
    assert f'{type(var_0.workdays).__module__}.{type(var_0.workdays).__qualname__}' == 'builtins.list'
    assert len(var_0.workdays) == 5

@pytest.mark.xfail(strict=True)
def test_case_13():
    float_0 = 0.1
    month_0 = module_0.Month(input_format=float_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.__sub__(float_0)
    var_1 = var_0.__eq__(var_0)
    var_0.__getitem__(month_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    day_0 = module_0.Day()
    assert f'{type(day_0).__module__}.{type(day_0).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(day_0.log).__module__}.{type(day_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(day_0.value).__module__}.{type(day_0.value).__qualname__}' == 'datetime.date'
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = day_0.__eq__(day_0)
    assert var_0 is True
    var_0.upper()

@pytest.mark.xfail(strict=True)
def test_case_15():
    week_0 = module_0.Week()
    assert f'{type(week_0).__module__}.{type(week_0).__qualname__}' == 'systematic.dates.Week'
    assert f'{type(week_0.log).__module__}.{type(week_0.log).__qualname__}' == 'logging.Logger'
    assert week_0.firstweekday == 1
    assert f'{type(week_0.first).__module__}.{type(week_0.first).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(week_0.last).__module__}.{type(week_0.last).__qualname__}' == 'systematic.dates.Day'
    assert week_0.weeknumber == 41
    assert f'{type(week_0.workdays).__module__}.{type(week_0.workdays).__qualname__}' == 'builtins.list'
    assert len(week_0.workdays) == 5
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    assert f'{type(module_0.Week.previous_week).__module__}.{type(module_0.Week.previous_week).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Week.next_week).__module__}.{type(module_0.Week.next_week).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = week_0.__repr__()
    assert var_0 == 'Week 41 2022-10-10 - 2022-10-16'
    var_1 = week_0.__int__()
    var_1.__getitem__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = 747.0
    month_0 = module_0.Month(input_format=float_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.__sub__(float_0)
    assert len(var_0) == 31
    module_1.template(month_0, float_0)

def test_case_17():
    float_0 = 747.0
    month_0 = module_0.Month(input_format=float_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.__sub__(float_0)
    assert len(var_0) == 31
    with pytest.raises(IndexError):
        var_0.__getitem__(float_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    float_0 = 747.0
    module_0.Month(float_0, firstweekday=float_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    module_0.Month(input_format=none_type_0, firstweekday=none_type_0)

def test_case_20():
    str_0 = ''
    day_0 = module_0.Day(str_0)
    assert f'{type(day_0).__module__}.{type(day_0).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(day_0.log).__module__}.{type(day_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(day_0.value).__module__}.{type(day_0.value).__qualname__}' == 'datetime.date'
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    day_1 = module_0.Day()
    assert f'{type(day_1).__module__}.{type(day_1).__qualname__}' == 'systematic.dates.Day'
    assert f'{type(day_1.log).__module__}.{type(day_1.log).__qualname__}' == 'logging.Logger'
    assert f'{type(day_1.value).__module__}.{type(day_1.value).__qualname__}' == 'datetime.date'

def test_case_21():
    float_0 = -1022.552739
    month_0 = module_0.Month(input_format=float_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    with pytest.raises(IndexError):
        month_0.__getitem__(float_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    float_0 = 747.0
    month_0 = module_0.Month(input_format=float_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'systematic.dates.Month'
    assert len(month_0) == 31
    assert module_0.DEFAULT_DATE_FORMAT == '%Y-%m-%d'
    assert module_0.WEEK_START_DEFAULT == 1
    assert module_0.WORKDAYS_PER_WEEK == 5
    assert module_0.WEEKDAY_NAMES == ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    var_0 = month_0.__add__(float_0)
    assert len(var_0) == 31
    var_1 = month_0.__sub__(float_0)
    assert len(var_1) == 31
    var_2 = var_1.__eq__(var_1)
    module_3.search_function(month_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    float_0 = -1229.902911
    module_0.Month(firstweekday=float_0)

def test_case_24():
    float_0 = 768.4970701870552
    with pytest.raises(ValueError):
        module_0.Week(workdays_per_week=float_0)