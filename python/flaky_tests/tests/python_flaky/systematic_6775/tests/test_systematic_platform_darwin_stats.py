# Automatically generated by Pynguin.
import pytest
import systematic.platform.darwin.stats as module_0

def test_case_0():
    darwin_v_m_stats_0 = module_0.DarwinVMStats()
    assert module_0.VMSTAT_FIELD_MAP == {'Pages free': 'pages_free', 'Pages active': 'pages_free', 'Pages inactive': 'pages_inactive', 'Pages speculative': 'pages_speculative', 'Pages throttled': 'throttled', 'Pages wired down': 'wired_down', 'Pages purgeable': 'purgeable', '"Translation faults"': 'translation_faults', 'Pages copy-on-write': 'copy_on_write', 'Pages zero filled': 'zero_filled', 'Pages reactivated': 'reactivated', 'Pages purged': 'purged', 'File-backed pages': 'file_backed', 'Anonymous pages': 'anonyous', 'Pages stored in compressor': 'stored_in_compressor', 'Pages occupied by compressor': 'occupied_by_compresspr', 'Decompressions': 'decompressions', 'Compressions': 'compressions', 'Pageins': 'page_ins', 'Pageouts': 'page_outs', 'Swapins': 'swap_ins', 'Swapouts': 'swap_outs'}
    assert module_0.DarwinVMStats.name == 'vmstat'
    str_0 = 'G9y!Pn_akeI#*)}K'
    with pytest.raises(KeyError):
        darwin_v_m_stats_0.__find_counter_group__(str_0)

def test_case_1():
    darwin_v_m_stats_0 = module_0.DarwinVMStats()
    assert module_0.VMSTAT_FIELD_MAP == {'Pages free': 'pages_free', 'Pages active': 'pages_free', 'Pages inactive': 'pages_inactive', 'Pages speculative': 'pages_speculative', 'Pages throttled': 'throttled', 'Pages wired down': 'wired_down', 'Pages purgeable': 'purgeable', '"Translation faults"': 'translation_faults', 'Pages copy-on-write': 'copy_on_write', 'Pages zero filled': 'zero_filled', 'Pages reactivated': 'reactivated', 'Pages purged': 'purged', 'File-backed pages': 'file_backed', 'Anonymous pages': 'anonyous', 'Pages stored in compressor': 'stored_in_compressor', 'Pages occupied by compressor': 'occupied_by_compresspr', 'Decompressions': 'decompressions', 'Compressions': 'compressions', 'Pageins': 'page_ins', 'Pageouts': 'page_outs', 'Swapins': 'swap_ins', 'Swapouts': 'swap_outs'}
    assert module_0.DarwinVMStats.name == 'vmstat'

def test_case_2():
    darwin_system_stats_0 = module_0.DarwinSystemStats()
    assert f'{type(darwin_system_stats_0.counters).__module__}.{type(darwin_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(darwin_system_stats_0.counters) == 0
    assert f'{type(darwin_system_stats_0.vm_stats).__module__}.{type(darwin_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinVMStats'
    assert f'{type(darwin_system_stats_0.disk_stats).__module__}.{type(darwin_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'Pages free': 'pages_free', 'Pages active': 'pages_free', 'Pages inactive': 'pages_inactive', 'Pages speculative': 'pages_speculative', 'Pages throttled': 'throttled', 'Pages wired down': 'wired_down', 'Pages purgeable': 'purgeable', '"Translation faults"': 'translation_faults', 'Pages copy-on-write': 'copy_on_write', 'Pages zero filled': 'zero_filled', 'Pages reactivated': 'reactivated', 'Pages purged': 'purged', 'File-backed pages': 'file_backed', 'Anonymous pages': 'anonyous', 'Pages stored in compressor': 'stored_in_compressor', 'Pages occupied by compressor': 'occupied_by_compresspr', 'Decompressions': 'decompressions', 'Compressions': 'compressions', 'Pageins': 'page_ins', 'Pageouts': 'page_outs', 'Swapins': 'swap_ins', 'Swapouts': 'swap_outs'}

@pytest.mark.xfail(strict=True)
def test_case_3():
    darwin_system_stats_0 = module_0.DarwinSystemStats()
    assert f'{type(darwin_system_stats_0.counters).__module__}.{type(darwin_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(darwin_system_stats_0.counters) == 0
    assert f'{type(darwin_system_stats_0.vm_stats).__module__}.{type(darwin_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinVMStats'
    assert f'{type(darwin_system_stats_0.disk_stats).__module__}.{type(darwin_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'Pages free': 'pages_free', 'Pages active': 'pages_free', 'Pages inactive': 'pages_inactive', 'Pages speculative': 'pages_speculative', 'Pages throttled': 'throttled', 'Pages wired down': 'wired_down', 'Pages purgeable': 'purgeable', '"Translation faults"': 'translation_faults', 'Pages copy-on-write': 'copy_on_write', 'Pages zero filled': 'zero_filled', 'Pages reactivated': 'reactivated', 'Pages purged': 'purged', 'File-backed pages': 'file_backed', 'Anonymous pages': 'anonyous', 'Pages stored in compressor': 'stored_in_compressor', 'Pages occupied by compressor': 'occupied_by_compresspr', 'Decompressions': 'decompressions', 'Compressions': 'compressions', 'Pageins': 'page_ins', 'Pageouts': 'page_outs', 'Swapins': 'swap_ins', 'Swapouts': 'swap_outs'}
    darwin_system_stats_0.update()

@pytest.mark.xfail(strict=True)
def test_case_4():
    darwin_system_stats_0 = module_0.DarwinSystemStats()
    assert f'{type(darwin_system_stats_0.counters).__module__}.{type(darwin_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(darwin_system_stats_0.counters) == 0
    assert f'{type(darwin_system_stats_0.vm_stats).__module__}.{type(darwin_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinVMStats'
    assert f'{type(darwin_system_stats_0.disk_stats).__module__}.{type(darwin_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'Pages free': 'pages_free', 'Pages active': 'pages_free', 'Pages inactive': 'pages_inactive', 'Pages speculative': 'pages_speculative', 'Pages throttled': 'throttled', 'Pages wired down': 'wired_down', 'Pages purgeable': 'purgeable', '"Translation faults"': 'translation_faults', 'Pages copy-on-write': 'copy_on_write', 'Pages zero filled': 'zero_filled', 'Pages reactivated': 'reactivated', 'Pages purged': 'purged', 'File-backed pages': 'file_backed', 'Anonymous pages': 'anonyous', 'Pages stored in compressor': 'stored_in_compressor', 'Pages occupied by compressor': 'occupied_by_compresspr', 'Decompressions': 'decompressions', 'Compressions': 'compressions', 'Pageins': 'page_ins', 'Pageouts': 'page_outs', 'Swapins': 'swap_ins', 'Swapouts': 'swap_outs'}
    var_0 = darwin_system_stats_0.to_json()
    assert var_0 == '{\n  "disk": {\n    "timestamp": null,\n    "counters": {}\n  },\n  "vm": {\n    "timestamp": null,\n    "counters": {}\n  }\n}'
    bool_0 = True
    darwin_v_m_stats_0 = module_0.DarwinVMStats()
    assert module_0.DarwinVMStats.name == 'vmstat'
    darwin_v_m_stats_0.__find_counter_group__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    darwin_disk_stats_0 = module_0.DarwinDiskStats()
    assert module_0.VMSTAT_FIELD_MAP == {'Pages free': 'pages_free', 'Pages active': 'pages_free', 'Pages inactive': 'pages_inactive', 'Pages speculative': 'pages_speculative', 'Pages throttled': 'throttled', 'Pages wired down': 'wired_down', 'Pages purgeable': 'purgeable', '"Translation faults"': 'translation_faults', 'Pages copy-on-write': 'copy_on_write', 'Pages zero filled': 'zero_filled', 'Pages reactivated': 'reactivated', 'Pages purged': 'purged', 'File-backed pages': 'file_backed', 'Anonymous pages': 'anonyous', 'Pages stored in compressor': 'stored_in_compressor', 'Pages occupied by compressor': 'occupied_by_compresspr', 'Decompressions': 'decompressions', 'Compressions': 'compressions', 'Pageins': 'page_ins', 'Pageouts': 'page_outs', 'Swapins': 'swap_ins', 'Swapouts': 'swap_outs'}
    assert module_0.DarwinDiskStats.name == 'iostat'
    darwin_v_m_stats_0 = module_0.DarwinVMStats()
    assert module_0.DarwinVMStats.name == 'vmstat'
    darwin_disk_stats_1 = module_0.DarwinDiskStats()
    darwin_system_stats_0 = module_0.DarwinSystemStats()
    assert f'{type(darwin_system_stats_0.counters).__module__}.{type(darwin_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(darwin_system_stats_0.counters) == 0
    assert f'{type(darwin_system_stats_0.vm_stats).__module__}.{type(darwin_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinVMStats'
    assert f'{type(darwin_system_stats_0.disk_stats).__module__}.{type(darwin_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.darwin.stats.DarwinDiskStats'
    var_0 = darwin_system_stats_0.as_dict()
    var_1 = var_0.update()
    darwin_v_m_stats_1 = module_0.DarwinVMStats()
    str_0 = 'k'
    darwin_v_m_stats_0.__find_counter_group__(str_0)