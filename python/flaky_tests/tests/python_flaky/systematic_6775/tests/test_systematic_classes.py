# Automatically generated by Pynguin.
import pytest
import systematic.classes as module_0
import systematic.log as module_1

def test_case_0():
    bool_0 = True
    mount_point_0 = module_0.MountPoint(bool_0, bool_0, bool_0, bool_0)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints is True
    assert mount_point_0.device is True
    assert mount_point_0.mountpoint is True
    assert mount_point_0.filesystem is True
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    var_0 = mount_point_0.__lt__(mount_point_0)
    assert var_0 is False
    var_1 = mount_point_0.__lt__(mount_point_0)
    assert var_1 is False
    file_system_error_0 = module_0.FileSystemError()

@pytest.mark.xfail(strict=True)
def test_case_1():
    sortable_container_0 = module_0.SortableContainer()
    sortable_container_0.__le__(sortable_container_0)

def test_case_2():
    int_0 = 15
    mount_point_0 = module_0.MountPoint(int_0, int_0, int_0, int_0)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints == 15
    assert mount_point_0.device == 15
    assert mount_point_0.mountpoint == 15
    assert mount_point_0.filesystem == 15
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    var_0 = mount_point_0.as_dict()

def test_case_3():
    file_system_flags_0 = module_0.FileSystemFlags()
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'

def test_case_4():
    bool_0 = True
    file_system_flags_0 = module_0.FileSystemFlags()
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'
    var_0 = file_system_flags_0.get(bool_0)
    assert var_0 is False

def test_case_5():
    file_system_flags_0 = module_0.FileSystemFlags()
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = file_system_flags_0.set(none_type_0, none_type_0)
    assert len(file_system_flags_0) == 1
    file_system_flags_1 = module_0.FileSystemFlags(file_system_flags_0)
    assert f'{type(file_system_flags_1).__module__}.{type(file_system_flags_1).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_1) == 1

def test_case_6():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {}
    mount_point_0 = module_0.MountPoint(bool_0, bool_0, tuple_0, bool_0, dict_0)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints is True
    assert mount_point_0.device is True
    assert mount_point_0.mountpoint == ()
    assert mount_point_0.filesystem is True
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    file_system_flags_0 = module_0.FileSystemFlags()
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'
    var_0 = file_system_flags_0.get(bool_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_7():
    sortable_container_0 = module_0.SortableContainer()
    sortable_container_0.__eq__(sortable_container_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    sortable_container_0 = module_0.SortableContainer()
    sortable_container_0.__gt__(sortable_container_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    sortable_container_0 = module_0.SortableContainer()
    none_type_0 = None
    sortable_container_0.__ge__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    mount_point_0 = module_0.MountPoint(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert mount_point_0.device == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert mount_point_0.mountpoint == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert mount_point_0.filesystem == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    int_0 = 15
    mount_point_1 = module_0.MountPoint(int_0, int_0, int_0, int_0, int_0)
    assert len(mount_point_1.flags) == 0
    var_0 = mount_point_1.__ge__(mount_point_1)
    assert var_0 is True
    mount_point_2 = module_0.MountPoint(mount_point_1, mount_point_1, int_0, mount_point_1)
    assert len(mount_point_2.flags) == 0
    var_1 = mount_point_1.__repr__()
    assert var_1 == '15 mounted on 15'
    mount_point_0.__gt__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    float_0 = 0.2
    list_0 = [float_0, float_0, float_0]
    module_0.MountPoint(list_0, list_0, list_0, float_0, list_0)

def test_case_12():
    file_system_flags_0 = module_0.FileSystemFlags()
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = file_system_flags_0.set(none_type_0)
    assert len(file_system_flags_0) == 1
    var_1 = file_system_flags_0.get(var_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    mount_point_0 = module_0.MountPoint(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert mount_point_0.device == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert mount_point_0.mountpoint == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert mount_point_0.filesystem == b'\x9c\xc4A\x7f&7\x85|\xc6\x7f E'
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    int_0 = 15
    mount_point_1 = module_0.MountPoint(int_0, int_0, int_0, int_0, int_0)
    assert len(mount_point_1.flags) == 0
    var_0 = mount_point_1.__ge__(mount_point_1)
    assert var_0 is True
    mount_point_2 = module_0.MountPoint(mount_point_1, mount_point_1, int_0, mount_point_1)
    assert len(mount_point_2.flags) == 0
    mount_point_0.__gt__(mount_point_2)

def test_case_14():
    int_0 = -2400
    mount_point_0 = module_0.MountPoint(int_0, int_0, int_0, int_0)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints == -2400
    assert mount_point_0.device == -2400
    assert mount_point_0.mountpoint == -2400
    assert mount_point_0.filesystem == -2400
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    var_0 = mount_point_0.as_dict(int_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    file_system_flags_0 = module_0.FileSystemFlags()
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'
    bool_0 = True
    none_type_0 = None
    var_0 = file_system_flags_0.set(none_type_0, none_type_0)
    assert len(file_system_flags_0) == 1
    none_type_1 = None
    var_1 = file_system_flags_0.get(none_type_1)
    assert var_1 is False
    var_2 = file_system_flags_0.get(bool_0)
    assert var_2 is False
    var_3 = var_1.__le__(var_2)
    assert var_3 is True
    mount_point_0 = module_0.MountPoint(bool_0, var_2, bool_0, var_2)
    assert f'{type(mount_point_0).__module__}.{type(mount_point_0).__qualname__}' == 'systematic.classes.MountPoint'
    assert f'{type(mount_point_0.log).__module__}.{type(mount_point_0.log).__qualname__}' == 'logging.Logger'
    assert mount_point_0.mountpoints is True
    assert mount_point_0.device is False
    assert mount_point_0.mountpoint is True
    assert mount_point_0.filesystem is False
    assert f'{type(mount_point_0.flags).__module__}.{type(mount_point_0.flags).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(mount_point_0.flags) == 0
    assert mount_point_0.usage == {}
    assert module_0.MountPoint.compare_fields == ('mountpoint', 'device')
    assert f'{type(module_0.MountPoint.is_virtual).__module__}.{type(module_0.MountPoint.is_virtual).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.name).__module__}.{type(module_0.MountPoint.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.path).__module__}.{type(module_0.MountPoint.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.size).__module__}.{type(module_0.MountPoint.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.used).__module__}.{type(module_0.MountPoint.used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.available).__module__}.{type(module_0.MountPoint.available).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.free).__module__}.{type(module_0.MountPoint.free).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MountPoint.percent).__module__}.{type(module_0.MountPoint.percent).__qualname__}' == 'builtins.property'
    var_4 = mount_point_0.as_dict()
    var_5 = var_4.__lt__(file_system_flags_0)
    logger_0 = module_1.Logger(var_4)
    assert logger_0.name == "140691810453248-{'device': False, 'mountpoint': True, 'filesystem': False, 'size': 0, 'available': 0, 'used': 0, 'percent': 0}"
    mount_point_0.__ge__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    list_0 = []
    file_system_flags_0 = module_0.FileSystemFlags(list_0)
    assert f'{type(file_system_flags_0).__module__}.{type(file_system_flags_0).__qualname__}' == 'systematic.classes.FileSystemFlags'
    assert len(file_system_flags_0) == 0
    assert f'{type(module_0.FileSystemFlags.owner).__module__}.{type(module_0.FileSystemFlags.owner).__qualname__}' == 'builtins.property'
    file_system_flags_1 = module_0.FileSystemFlags(list_0)
    assert len(file_system_flags_1) == 0
    sortable_container_0 = module_0.SortableContainer()
    file_system_flags_0.get(file_system_flags_1)