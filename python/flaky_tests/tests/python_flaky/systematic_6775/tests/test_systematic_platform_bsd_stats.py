# Automatically generated by Pynguin.
import pytest
import systematic.platform.bsd.stats as module_0
import collections as module_1

def test_case_0():
    b_s_d_v_m_stats_0 = module_0.BSDVMStats()
    assert module_0.VMSTAT_FIELD_MAP == {'process': {'r': 'run_queue', 'b': 'blocked', 'w': 'runnable_but_swapped'}, 'memory': {'avm': 'active_vm_pages', 'fre': 'free_list_size'}, 'page': {'flt': 'page_faults', 're': 'page_reclaims', 'pi': 'paged_in', 'po': 'paged_out', 'fr': 'pages_freed_per_second', 'sr': 'pages_scanned_per_second'}, 'faults': {'in': 'interrupts', 'sy': 'systemcalls', 'cs': 'context_switch_rate'}, 'cpu': {'us': 'user', 'sy': 'system', 'id': 'idle'}}
    assert module_0.VMSTAT_FIELDS == ('r', 'b', 'w', 'avm', 'fre', 'flt', 're', 'pi', 'po', 'fr', 'sr', 'in', 'sy', 'cs', 'us', 'sy', 'id')
    assert module_0.BSDVMStats.name == 'vmstat'
    with pytest.raises(KeyError):
        b_s_d_v_m_stats_0.__find_counter_group__(b_s_d_v_m_stats_0)

def test_case_1():
    b_s_d_system_stats_0 = module_0.BSDSystemStats()
    assert f'{type(b_s_d_system_stats_0.counters).__module__}.{type(b_s_d_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(b_s_d_system_stats_0.counters) == 0
    assert f'{type(b_s_d_system_stats_0.vm_stats).__module__}.{type(b_s_d_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDVMStats'
    assert f'{type(b_s_d_system_stats_0.disk_stats).__module__}.{type(b_s_d_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'process': {'r': 'run_queue', 'b': 'blocked', 'w': 'runnable_but_swapped'}, 'memory': {'avm': 'active_vm_pages', 'fre': 'free_list_size'}, 'page': {'flt': 'page_faults', 're': 'page_reclaims', 'pi': 'paged_in', 'po': 'paged_out', 'fr': 'pages_freed_per_second', 'sr': 'pages_scanned_per_second'}, 'faults': {'in': 'interrupts', 'sy': 'systemcalls', 'cs': 'context_switch_rate'}, 'cpu': {'us': 'user', 'sy': 'system', 'id': 'idle'}}
    assert module_0.VMSTAT_FIELDS == ('r', 'b', 'w', 'avm', 'fre', 'flt', 're', 'pi', 'po', 'fr', 'sr', 'in', 'sy', 'cs', 'us', 'sy', 'id')

@pytest.mark.xfail(strict=True)
def test_case_2():
    b_s_d_system_stats_0 = module_0.BSDSystemStats()
    assert f'{type(b_s_d_system_stats_0.counters).__module__}.{type(b_s_d_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(b_s_d_system_stats_0.counters) == 0
    assert f'{type(b_s_d_system_stats_0.vm_stats).__module__}.{type(b_s_d_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDVMStats'
    assert f'{type(b_s_d_system_stats_0.disk_stats).__module__}.{type(b_s_d_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'process': {'r': 'run_queue', 'b': 'blocked', 'w': 'runnable_but_swapped'}, 'memory': {'avm': 'active_vm_pages', 'fre': 'free_list_size'}, 'page': {'flt': 'page_faults', 're': 'page_reclaims', 'pi': 'paged_in', 'po': 'paged_out', 'fr': 'pages_freed_per_second', 'sr': 'pages_scanned_per_second'}, 'faults': {'in': 'interrupts', 'sy': 'systemcalls', 'cs': 'context_switch_rate'}, 'cpu': {'us': 'user', 'sy': 'system', 'id': 'idle'}}
    assert module_0.VMSTAT_FIELDS == ('r', 'b', 'w', 'avm', 'fre', 'flt', 're', 'pi', 'po', 'fr', 'sr', 'in', 'sy', 'cs', 'us', 'sy', 'id')
    b_s_d_system_stats_0.update()

def test_case_3():
    b_s_d_system_stats_0 = module_0.BSDSystemStats()
    assert f'{type(b_s_d_system_stats_0.counters).__module__}.{type(b_s_d_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(b_s_d_system_stats_0.counters) == 0
    assert f'{type(b_s_d_system_stats_0.vm_stats).__module__}.{type(b_s_d_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDVMStats'
    assert f'{type(b_s_d_system_stats_0.disk_stats).__module__}.{type(b_s_d_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'process': {'r': 'run_queue', 'b': 'blocked', 'w': 'runnable_but_swapped'}, 'memory': {'avm': 'active_vm_pages', 'fre': 'free_list_size'}, 'page': {'flt': 'page_faults', 're': 'page_reclaims', 'pi': 'paged_in', 'po': 'paged_out', 'fr': 'pages_freed_per_second', 'sr': 'pages_scanned_per_second'}, 'faults': {'in': 'interrupts', 'sy': 'systemcalls', 'cs': 'context_switch_rate'}, 'cpu': {'us': 'user', 'sy': 'system', 'id': 'idle'}}
    assert module_0.VMSTAT_FIELDS == ('r', 'b', 'w', 'avm', 'fre', 'flt', 're', 'pi', 'po', 'fr', 'sr', 'in', 'sy', 'cs', 'us', 'sy', 'id')
    var_0 = b_s_d_system_stats_0.to_json()
    assert var_0 == '{\n  "disk": {\n    "timestamp": null,\n    "counters": {}\n  },\n  "vm": {\n    "timestamp": null,\n    "counters": {}\n  }\n}'
    bool_0 = True
    b_s_d_v_m_stats_0 = module_0.BSDVMStats()
    assert module_0.BSDVMStats.name == 'vmstat'
    with pytest.raises(KeyError):
        b_s_d_v_m_stats_0.__find_counter_group__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    b_s_d_system_stats_0 = module_0.BSDSystemStats()
    assert f'{type(b_s_d_system_stats_0.counters).__module__}.{type(b_s_d_system_stats_0.counters).__qualname__}' == 'collections.OrderedDict'
    assert len(b_s_d_system_stats_0.counters) == 0
    assert f'{type(b_s_d_system_stats_0.vm_stats).__module__}.{type(b_s_d_system_stats_0.vm_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDVMStats'
    assert f'{type(b_s_d_system_stats_0.disk_stats).__module__}.{type(b_s_d_system_stats_0.disk_stats).__qualname__}' == 'systematic.platform.bsd.stats.BSDDiskStats'
    assert module_0.VMSTAT_FIELD_MAP == {'process': {'r': 'run_queue', 'b': 'blocked', 'w': 'runnable_but_swapped'}, 'memory': {'avm': 'active_vm_pages', 'fre': 'free_list_size'}, 'page': {'flt': 'page_faults', 're': 'page_reclaims', 'pi': 'paged_in', 'po': 'paged_out', 'fr': 'pages_freed_per_second', 'sr': 'pages_scanned_per_second'}, 'faults': {'in': 'interrupts', 'sy': 'systemcalls', 'cs': 'context_switch_rate'}, 'cpu': {'us': 'user', 'sy': 'system', 'id': 'idle'}}
    assert module_0.VMSTAT_FIELDS == ('r', 'b', 'w', 'avm', 'fre', 'flt', 're', 'pi', 'po', 'fr', 'sr', 'in', 'sy', 'cs', 'us', 'sy', 'id')
    b_s_d_v_m_stats_0 = module_0.BSDVMStats()
    assert module_0.BSDVMStats.name == 'vmstat'
    str_0 = 'r'
    var_0 = b_s_d_v_m_stats_0.__find_counter_group__(str_0)
    module_1.OrderedDict(**var_0)