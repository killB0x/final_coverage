# Automatically generated by Pynguin.
import pytest
import systematic.filesystems.zfs.zpool as module_0
import systematic.filesystems as module_1

def test_case_0():
    str_0 = 'K'
    z_pool_iostat_counters_0 = module_0.ZPoolIostatCounters(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(z_pool_iostat_counters_0).__module__}.{type(z_pool_iostat_counters_0).__qualname__}' == 'systematic.filesystems.zfs.zpool.ZPoolIostatCounters'
    assert len(z_pool_iostat_counters_0) == 5
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}

def test_case_1():
    z_pool_client_0 = module_0.ZPoolClient()
    assert z_pool_client_0.zpools == []
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}
    with pytest.raises(module_1.FilesystemError):
        z_pool_client_0.load_zpools()

def test_case_2():
    z_pool_client_0 = module_0.ZPoolClient()
    assert z_pool_client_0.zpools == []
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.ZPoolIostat(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bool_0 = False
    module_0.ZPool(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'V'
    none_type_0 = None
    module_0.ZPoolIostatCounters(str_0, str_0, str_0, none_type_0, none_type_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    z_pool_client_0 = module_0.ZPoolClient(*list_0)
    assert z_pool_client_0.zpools == []
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}
    str_0 = 'K'
    str_1 = 'K'
    bool_0 = False
    none_type_0 = None
    module_0.ZPoolIostatCounters(bool_0, str_1, str_1, bool_0, str_1, str_0, none_type_0, bool_0)

def test_case_7():
    str_0 = 'K'
    z_pool_iostat_counters_0 = module_0.ZPoolIostatCounters(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(z_pool_iostat_counters_0).__module__}.{type(z_pool_iostat_counters_0).__qualname__}' == 'systematic.filesystems.zfs.zpool.ZPoolIostatCounters'
    assert len(z_pool_iostat_counters_0) == 5
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}
    var_0 = z_pool_iostat_counters_0.add_device(str_0)
    assert len(z_pool_iostat_counters_0) == 6

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '\\K'
    z_pool_iostat_counters_0 = module_0.ZPoolIostatCounters(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(z_pool_iostat_counters_0).__module__}.{type(z_pool_iostat_counters_0).__qualname__}' == 'systematic.filesystems.zfs.zpool.ZPoolIostatCounters'
    assert len(z_pool_iostat_counters_0) == 5
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}
    var_0 = z_pool_iostat_counters_0.add_device(str_0)
    assert len(z_pool_iostat_counters_0) == 6
    var_1 = z_pool_iostat_counters_0.add_device(str_0)
    var_1.update()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '\\K'
    list_0 = [str_0]
    str_1 = '-'
    z_pool_iostat_counters_0 = module_0.ZPoolIostatCounters(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(z_pool_iostat_counters_0).__module__}.{type(z_pool_iostat_counters_0).__qualname__}' == 'systematic.filesystems.zfs.zpool.ZPoolIostatCounters'
    assert len(z_pool_iostat_counters_0) == 5
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}
    module_0.ZPoolIostatCounters(list_0, str_0, str_1, str_1, str_0, list_0, str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '0'
    z_pool_iostat_counters_0 = module_0.ZPoolIostatCounters(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(z_pool_iostat_counters_0).__module__}.{type(z_pool_iostat_counters_0).__qualname__}' == 'systematic.filesystems.zfs.zpool.ZPoolIostatCounters'
    assert len(z_pool_iostat_counters_0) == 5
    assert module_0.ZPOOL_LIST_FIELDS == ('name', 'size', 'used', 'available', 'expandsize', 'fragmentation', 'capacity', 'deduplication', 'health', 'altroot')
    assert module_0.ZPOOL_PROPERTIES == ('allocated', 'capacity', 'dedupratio', 'expandsize', 'fragmentation', 'free', 'freeing', 'guid', 'health', 'leaked', 'size', 'altroot', 'autoexpand', 'autoreplace', 'bootfs', 'cachefile', 'comment', 'dedupditto', 'delegation', 'failmode', 'listsnapshots', 'readonly', 'version')
    assert module_0.ZPOOL_FEATURES == ('async_destroy', 'empty_bpobj', 'filesystem_limits', 'lz4_compress', 'multi_vdev_crash_dump', 'spacemap_histogram', 'extensible_dataset', 'bookmarks', 'enabled_txg', 'hole_birth', 'embedded_data', 'large_blocks', 'sha512', 'skein')
    assert module_0.UNIT_MULTIPLIERS == {'B': 1, 'K': 1024, 'M': 1048576, 'G': 1073741824, 'T': 1099511627776, 'P': 1125899906842624, 'E': 1152921504606846976, 'Z': 1180591620717411303424}
    z_pool_iostat_counters_0.__parse_counter_value__(z_pool_iostat_counters_0)