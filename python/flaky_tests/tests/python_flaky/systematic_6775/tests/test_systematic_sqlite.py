# Automatically generated by Pynguin.
import pytest
import systematic.sqlite as module_0

def test_case_0():
    none_type_0 = None
    with pytest.raises(module_0.SQLiteError):
        module_0.SQLiteDatabase(none_type_0, none_type_0)

def test_case_1():
    str_0 = '3bdQvC'
    s_q_lite_database_0 = module_0.SQLiteDatabase(str_0)
    assert f'{type(s_q_lite_database_0).__module__}.{type(s_q_lite_database_0).__qualname__}' == 'systematic.sqlite.SQLiteDatabase'
    assert f'{type(s_q_lite_database_0.log).__module__}.{type(s_q_lite_database_0.log).__qualname__}' == 'logging.Logger'
    assert s_q_lite_database_0.db_path == '3bdQvC'
    assert f'{type(module_0.SQLiteDatabase.cursor).__module__}.{type(module_0.SQLiteDatabase.cursor).__qualname__}' == 'builtins.property'

def test_case_2():
    s_q_lite_error_0 = module_0.SQLiteError()

def test_case_3():
    s_q_lite_error_0 = module_0.SQLiteError()

def test_case_4():
    str_0 = '2!/|?*6qQvg'
    s_q_lite_database_0 = module_0.SQLiteDatabase(str_0, foreign_keys=str_0)
    assert f'{type(s_q_lite_database_0).__module__}.{type(s_q_lite_database_0).__qualname__}' == 'systematic.sqlite.SQLiteDatabase'
    assert f'{type(s_q_lite_database_0.log).__module__}.{type(s_q_lite_database_0.log).__qualname__}' == 'logging.Logger'
    assert s_q_lite_database_0.db_path == '2!/|?*6qQvg'
    assert f'{type(module_0.SQLiteDatabase.cursor).__module__}.{type(module_0.SQLiteDatabase.cursor).__qualname__}' == 'builtins.property'
    str_1 = '\t/'
    var_0 = s_q_lite_database_0.rollback()
    with pytest.raises(module_0.SQLiteError):
        module_0.SQLiteDatabase(str_1, str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    module_0.SQLiteDatabase(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '~jq8~mPkKE!Takbhm\\'
    s_q_lite_database_0 = module_0.SQLiteDatabase(str_0, foreign_keys=str_0)
    assert f'{type(s_q_lite_database_0).__module__}.{type(s_q_lite_database_0).__qualname__}' == 'systematic.sqlite.SQLiteDatabase'
    assert f'{type(s_q_lite_database_0.log).__module__}.{type(s_q_lite_database_0.log).__qualname__}' == 'logging.Logger'
    assert s_q_lite_database_0.db_path == '~jq8~mPkKE!Takbhm\\'
    assert f'{type(module_0.SQLiteDatabase.cursor).__module__}.{type(module_0.SQLiteDatabase.cursor).__qualname__}' == 'builtins.property'
    s_q_lite_database_0.__result2dict__()

def test_case_7():
    str_0 = '3bdQvC'
    s_q_lite_database_0 = module_0.SQLiteDatabase(str_0)
    assert f'{type(s_q_lite_database_0).__module__}.{type(s_q_lite_database_0).__qualname__}' == 'systematic.sqlite.SQLiteDatabase'
    assert f'{type(s_q_lite_database_0.log).__module__}.{type(s_q_lite_database_0.log).__qualname__}' == 'logging.Logger'
    assert s_q_lite_database_0.db_path == '3bdQvC'
    assert f'{type(module_0.SQLiteDatabase.cursor).__module__}.{type(module_0.SQLiteDatabase.cursor).__qualname__}' == 'builtins.property'
    var_0 = s_q_lite_database_0.commit()

def test_case_8():
    str_0 = '\t/'
    with pytest.raises(module_0.SQLiteError):
        module_0.SQLiteDatabase(str_0, str_0, str_0)

def test_case_9():
    str_0 = '/:s'
    with pytest.raises(module_0.SQLiteError):
        module_0.SQLiteDatabase(str_0, str_0, str_0)

def test_case_10():
    str_0 = ''
    s_q_lite_database_0 = module_0.SQLiteDatabase(str_0, str_0, str_0)
    assert f'{type(s_q_lite_database_0).__module__}.{type(s_q_lite_database_0).__qualname__}' == 'systematic.sqlite.SQLiteDatabase'
    assert f'{type(s_q_lite_database_0.log).__module__}.{type(s_q_lite_database_0.log).__qualname__}' == 'logging.Logger'
    assert s_q_lite_database_0.db_path == ''
    assert f'{type(module_0.SQLiteDatabase.cursor).__module__}.{type(module_0.SQLiteDatabase.cursor).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'F\xc1\x1d\xfe\x10\xfb>'
    module_0.SQLiteDatabase(bytes_0, bytes_0)

def test_case_12():
    str_0 = 'c'
    with pytest.raises(module_0.SQLiteError):
        module_0.SQLiteDatabase(str_0, str_0, str_0)

def test_case_13():
    str_0 = '\t'
    s_q_lite_database_0 = module_0.SQLiteDatabase(str_0, str_0, str_0)
    assert f'{type(s_q_lite_database_0).__module__}.{type(s_q_lite_database_0).__qualname__}' == 'systematic.sqlite.SQLiteDatabase'
    assert f'{type(s_q_lite_database_0.log).__module__}.{type(s_q_lite_database_0.log).__qualname__}' == 'logging.Logger'
    assert s_q_lite_database_0.db_path == '\t'
    assert f'{type(module_0.SQLiteDatabase.cursor).__module__}.{type(module_0.SQLiteDatabase.cursor).__qualname__}' == 'builtins.property'