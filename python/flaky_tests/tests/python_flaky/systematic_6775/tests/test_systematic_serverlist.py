# Automatically generated by Pynguin.
import pytest
import systematic.serverlist as module_0

def test_case_0():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(server_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        server_config_file_0.match_os(server_0)

def test_case_1():
    int_0 = 1645
    str_0 = 'ersion'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == 1645
    assert operating_system_group_0.description == 1645
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, operating_system_group_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == 1645
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    var_0 = server_0.update()
    var_1 = server_0.__repr__()
    assert var_1 == '1645: 1645 (0 servers)'

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    none_type_1 = None
    server_0 = module_0.Server(none_type_1, none_type_1)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup is None
    assert server_0.name is None
    assert server_0.description is None
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    server_0.__eq__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.__ne__(str_0)
    assert var_0 is False
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_1 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = (-1154.1269005300019-4676j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (-1154.1269005300019-4676j)
    assert operating_system_group_0.description == (-1154.1269005300019-4676j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, complex_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.update()
    var_1 = server_0.__ne__(operating_system_group_0)
    assert var_1 is False
    operating_system_group_0.shell(operating_system_group_0)

def test_case_5():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(server_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    var_0 = server_0.__gt__(str_0)
    assert var_0 is False
    with pytest.raises(ValueError):
        server_config_file_0.match_os(server_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = (-1154.1269005300019-4676j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (-1154.1269005300019-4676j)
    assert operating_system_group_0.description == (-1154.1269005300019-4676j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, complex_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.update()
    var_1 = server_0.__ne__(operating_system_group_0)
    assert var_1 is False
    server_0.__gt__(complex_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.__lt__(str_0)
    assert var_0 is False
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_1 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.__lt__(server_0)
    assert var_0 is False
    dict_0 = {str_0: int_0, str_0: str_0, str_0: bool_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_1 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 1645
    str_0 = 'ersion'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: int_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == 1645
    assert operating_system_group_0.description == 1645
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, operating_system_group_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == 1645
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    var_0 = server_0.update()
    server_0.__ge__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    bytes_0 = b'>\xd5\xae\xfd\x9c'
    server_0 = module_0.Server(bytes_0, bytes_0, bytes_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == b'>\xd5\xae\xfd\x9c'
    assert server_0.name == b'>\xd5\xae\xfd\x9c'
    assert server_0.description == b'>\xd5\xae\xfd\x9c'
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    server_0.__le__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    complex_0 = (1694.630567-1693.3794j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (1694.630567-1693.3794j)
    assert operating_system_group_0.description == (1694.630567-1693.3794j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    var_0 = operating_system_group_0.add_server(set_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    var_1 = operating_system_group_0.__repr__()
    assert var_1 == '(1694.630567-1693.3794j): (1694.630567-1693.3794j) (1 servers)'
    server_0 = module_0.Server(operating_system_group_0, complex_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_2 = var_1.__repr__()
    assert var_2 == "'(1694.630567-1693.3794j): (1694.630567-1693.3794j) (1 servers)'"
    server_0.check_output(operating_system_group_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    complex_0 = (-1175-4676j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (-1175-4676j)
    assert operating_system_group_0.description == (-1175-4676j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, complex_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.update()
    var_1 = operating_system_group_0.__repr__()
    assert var_1 == '(-1175-4676j): (-1175-4676j) (0 servers)'
    var_2 = operating_system_group_0.remove_server(var_0)
    server_0.shell(var_0)

def test_case_13():
    bytes_0 = b'\xae\t\xcd\x1a\x10'
    operating_system_group_0 = module_0.OperatingSystemGroup(bytes_0, bytes_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == b'\xae\t\xcd\x1a\x10'
    assert operating_system_group_0.description == b'\xae\t\xcd\x1a\x10'
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'

def test_case_14():
    int_0 = -1506
    str_0 = 'restrt'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1506
    assert operating_system_group_0.description == -1506
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.add_server(str_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1

def test_case_15():
    complex_0 = (-2837.1001+1181j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (-2837.1001+1181j)
    assert operating_system_group_0.description == (-2837.1001+1181j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.remove_server(operating_system_group_0)

def test_case_16():
    int_0 = 816
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == 816
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    module_0.ServerConfigFile(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -1876
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1876
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.save()

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    module_0.ServerConfigFile(bool_0)
    var_0 = server_config_file_0.match_os(bool_0)

def test_case_20():
    int_0 = -1630
    server_0 = module_0.Server(int_0, int_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == -1630
    assert server_0.name == -1630
    assert server_0.description is None
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = 1645
    str_0 = 'ersion'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == 1645
    assert operating_system_group_0.description == 1645
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, operating_system_group_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == 1645
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    var_0 = server_0.remove()
    var_1 = server_0.update()
    server_config_file_0.save()

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'_B~\xe4T\x05\xd6\x03\xf7\xd7\xe6zp'
    module_0.ServerConfigFile(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = -2958
    str_0 = '{`-$`\no=L(Fe\r2'
    dict_0 = {}
    operating_system_group_0 = module_0.OperatingSystemGroup(str_0, str_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == '{`-$`\no=L(Fe\r2'
    assert operating_system_group_0.description == '{`-$`\no=L(Fe\r2'
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(int_0, str_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    list_0 = []
    server_0.shell(list_0)

def test_case_24():
    int_0 = 1621
    str_0 = 'ersion'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == 1621
    assert operating_system_group_0.description == 1621
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, operating_system_group_0, bool_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.add_server(server_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    var_1 = operating_system_group_0.add_server(server_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == 1621
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    var_2 = server_0.update()
    with pytest.raises(ValueError):
        server_config_file_0.match_os(server_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = -1506
    str_0 = 'eo#_it'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1506
    assert operating_system_group_0.description == -1506
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.add_server(str_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    var_1 = operating_system_group_0.add_server(operating_system_group_0)
    assert len(operating_system_group_0.servers) == 2
    var_2 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1506
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = -1517
    str_0 = 'eo#_it'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.add_server(str_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    var_1 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_27():
    complex_0 = (1694.630567-1693.3794j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (1694.630567-1693.3794j)
    assert operating_system_group_0.description == (1694.630567-1693.3794j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    var_0 = operating_system_group_0.add_server(set_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    var_1 = operating_system_group_0.remove_server(set_0)
    assert operating_system_group_0.servers == []
    var_2 = operating_system_group_0.__repr__()
    assert var_2 == '(1694.630567-1693.3794j): (1694.630567-1693.3794j) (0 servers)'
    server_0 = module_0.Server(operating_system_group_0, complex_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_3 = var_2.__repr__()
    assert var_3 == "'(1694.630567-1693.3794j): (1694.630567-1693.3794j) (0 servers)'"
    server_0.check_output(operating_system_group_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = -2958
    str_0 = '{`-$`\no=L(Fe\r2'
    server_0 = module_0.Server(int_0, str_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == -2958
    assert server_0.name == '{`-$`\no=L(Fe\r2'
    assert server_0.description is None
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    list_0 = []
    server_0.check_output(list_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = -1506
    str_0 = 'heaer'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1506
    assert operating_system_group_0.description == -1506
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1506
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(server_config_file_0, server_config_file_0, var_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_1 = server_0.__eq__(str_0)
    assert var_1 is False
    server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.__ge__(str_0)
    assert var_0 is True
    dict_0 = {str_0: int_0, str_0: str_0, str_0: bool_0, str_0: str_0, str_0: int_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_1 = server_0.__gt__(server_0)
    assert var_1 is False
    var_2 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    server_config_file_0.load()

def test_case_31():
    float_0 = 3670.9208
    none_type_0 = None
    str_0 = 'M'
    dict_0 = {str_0: none_type_0, str_0: float_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(float_0, none_type_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name is None
    assert operating_system_group_0.description is None
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    str_1 = 'EL?#2i'
    str_2 = 'commands'
    dict_1 = {str_2: str_1}
    operating_system_group_1 = module_0.OperatingSystemGroup(str_1, str_1, **dict_1)
    assert f'{type(operating_system_group_1).__module__}.{type(operating_system_group_1).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_1.log).__module__}.{type(operating_system_group_1.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_1.name == 'EL?#2i'
    assert operating_system_group_1.description == 'EL?#2i'
    assert operating_system_group_1.modified is False
    assert operating_system_group_1.servers == []

@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = -1517
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.__ne__(str_0)
    assert var_0 is False
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    var_1 = var_0.__repr__()
    assert var_1 == 'False'
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -1517
    assert operating_system_group_0.description == -1517
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_2 = operating_system_group_0.remove_server(dict_0)
    server_config_file_0 = module_0.ServerConfigFile(int_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == -1517
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    var_3 = server_0.__le__(str_0)
    assert var_3 is True
    server_config_file_0.load()

def test_case_33():
    int_0 = -849
    str_0 = 'ersion'
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: str_0}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == -849
    assert operating_system_group_0.description == -849
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    server_0 = module_0.Server(operating_system_group_0, operating_system_group_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_0 = server_0.update()

@pytest.mark.xfail(strict=True)
def test_case_34():
    complex_0 = (1401.8-846.74175j)
    operating_system_group_0 = module_0.OperatingSystemGroup(complex_0, complex_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == (1401.8-846.74175j)
    assert operating_system_group_0.description == (1401.8-846.74175j)
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.remove_server(complex_0)
    var_1 = operating_system_group_0.__repr__()
    assert var_1 == '(1401.8-846.74175j): (1401.8-846.74175j) (0 servers)'
    server_0 = module_0.Server(operating_system_group_0, var_0)
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    var_2 = server_0.update()
    var_3 = operating_system_group_0.remove_server(server_0)
    server_0.check_output(operating_system_group_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = 'eo#_it'
    bool_0 = False
    server_0 = module_0.Server(str_0, str_0, bool_0)
    assert f'{type(server_0).__module__}.{type(server_0).__qualname__}' == 'systematic.serverlist.Server'
    assert f'{type(server_0.log).__module__}.{type(server_0.log).__qualname__}' == 'logging.Logger'
    assert server_0.osgroup == 'eo#_it'
    assert server_0.name == 'eo#_it'
    assert server_0.description is False
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.Server.connect_command).__module__}.{type(module_0.Server.connect_command).__qualname__}' == 'builtins.property'
    none_type_0 = None
    operating_system_group_0 = module_0.OperatingSystemGroup(str_0, none_type_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name is None
    assert operating_system_group_0.description is None
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    var_0 = operating_system_group_0.add_server(none_type_0)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    operating_system_group_0.remove_server(server_0)

def test_case_36():
    bytes_0 = b'\x00\xc5s\x1di)k\xc3\x8c\xa9K'
    server_config_file_0 = module_0.ServerConfigFile(bytes_0)
    assert f'{type(server_config_file_0).__module__}.{type(server_config_file_0).__qualname__}' == 'systematic.serverlist.ServerConfigFile'
    assert server_config_file_0.operating_systems == []
    assert server_config_file_0.servers == []
    assert server_config_file_0.path == b'\x00\xc5s\x1di)k\xc3\x8c\xa9K'
    assert f'{type(server_config_file_0.log).__module__}.{type(server_config_file_0.log).__qualname__}' == 'logging.Logger'
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.ServerConfigFile.osnames).__module__}.{type(module_0.ServerConfigFile.osnames).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        server_config_file_0.load()

@pytest.mark.xfail(strict=True)
def test_case_37():
    int_0 = 1645
    str_0 = 'command_separator'
    str_1 = 'conpes'
    str_2 = 'il4DB'
    dict_0 = {str_0: str_0, str_0: int_0, str_1: str_0, str_1: str_1, str_2: str_2}
    operating_system_group_0 = module_0.OperatingSystemGroup(int_0, int_0, **dict_0)
    assert f'{type(operating_system_group_0).__module__}.{type(operating_system_group_0).__qualname__}' == 'systematic.serverlist.OperatingSystemGroup'
    assert f'{type(operating_system_group_0.log).__module__}.{type(operating_system_group_0.log).__qualname__}' == 'logging.Logger'
    assert operating_system_group_0.name == 1645
    assert operating_system_group_0.description == 1645
    assert operating_system_group_0.modified is False
    assert operating_system_group_0.servers == []
    assert module_0.DEFAULT_COMMAND_SEPARATOR == ' && '
    assert module_0.DEFAULT_CONNECT_COMMAND == ['ssh', '-qt', 'SERVER']
    assert module_0.SERVERINFO_FIELDS == ('hostname', 'description')
    assert f'{type(module_0.OperatingSystemGroup.command_separator).__module__}.{type(module_0.OperatingSystemGroup.command_separator).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.connect_command).__module__}.{type(module_0.OperatingSystemGroup.connect_command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.update_commands).__module__}.{type(module_0.OperatingSystemGroup.update_commands).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.OperatingSystemGroup.descripion).__module__}.{type(module_0.OperatingSystemGroup.descripion).__qualname__}' == 'builtins.property'
    str_3 = 'eriion'
    var_0 = operating_system_group_0.add_server(str_1)
    assert operating_system_group_0.modified is True
    assert len(operating_system_group_0.servers) == 1
    dict_1 = {str_3: int_0, str_3: str_3, str_3: str_3, str_3: str_3}
    operating_system_group_1 = module_0.OperatingSystemGroup(int_0, int_0, **dict_1)
    var_1 = operating_system_group_1.add_server(operating_system_group_1)
    assert operating_system_group_1.modified is True
    assert len(operating_system_group_1.servers) == 1
    var_1.load()