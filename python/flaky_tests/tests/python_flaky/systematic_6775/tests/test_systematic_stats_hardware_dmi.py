# Automatically generated by Pynguin.
import pytest
import systematic.stats.hardware.dmi as module_0
import re as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    d_m_i_0.to_json()

def test_case_1():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'

def test_case_2():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    str_0 = 't='
    var_0 = d_m_i_0.__parse_lines__(str_0)
    d_m_i_property_0 = module_0.DMIProperty(str_0, var_0)
    assert f'{type(d_m_i_property_0).__module__}.{type(d_m_i_property_0).__qualname__}' == 'systematic.stats.hardware.dmi.DMIProperty'
    assert len(d_m_i_property_0) == 0
    var_1 = var_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    none_type_1 = None
    d_m_i_property_0 = module_0.DMIProperty(none_type_0, none_type_1)
    assert f'{type(d_m_i_property_0).__module__}.{type(d_m_i_property_0).__qualname__}' == 'systematic.stats.hardware.dmi.DMIProperty'
    assert len(d_m_i_property_0) == 0
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    var_0 = d_m_i_property_0.__repr__()
    assert var_0 == 'None='
    module_1.match(none_type_1, none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    d_m_i_property_0 = module_0.DMIProperty(d_m_i_0, d_m_i_0)
    assert f'{type(d_m_i_property_0).__module__}.{type(d_m_i_property_0).__qualname__}' == 'systematic.stats.hardware.dmi.DMIProperty'
    assert len(d_m_i_property_0) == 0
    var_0 = d_m_i_property_0.as_dict()
    var_1 = d_m_i_property_0.add_option(d_m_i_property_0)
    var_1.add_property(var_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    d_m_i_property_0 = module_0.DMIProperty(none_type_0, none_type_0, none_type_0)
    assert f'{type(d_m_i_property_0).__module__}.{type(d_m_i_property_0).__qualname__}' == 'systematic.stats.hardware.dmi.DMIProperty'
    assert len(d_m_i_property_0) == 0
    var_0 = d_m_i_property_0.as_dict()
    d_m_i_error_0 = module_0.DMIError()
    var_0.add_handle(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    var_0 = d_m_i_0.update_timestamp()
    var_1 = var_0.__repr__()
    var_2 = d_m_i_0.find_properties(var_0, var_0)
    d_m_i_table_0 = module_0.DMITable(var_1)
    var_3 = d_m_i_table_0.as_dict()
    var_4 = d_m_i_0.__parse_lines__(var_1)
    var_5 = d_m_i_0.as_dict()
    bool_0 = False
    bool_1 = True
    module_0.DMIHandle(var_4, d_m_i_0, bool_0, bool_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    str_0 = 'n5o-Xu'
    d_m_i_table_0 = module_0.DMITable(str_0)
    var_0 = d_m_i_table_0.as_dict()
    module_1.template(d_m_i_table_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    d_m_i_error_0 = module_0.DMIError()
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    d_m_i_table_0 = module_0.DMITable(d_m_i_0)
    var_0 = d_m_i_table_0.add_handle(d_m_i_0)
    var_1 = var_0.__repr__()
    module_1.fullmatch(var_1, d_m_i_table_0)

def test_case_9():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    var_0 = d_m_i_0.find_properties(d_m_i_0, d_m_i_0)

def test_case_10():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    var_0 = d_m_i_0.find_properties(d_m_i_0, d_m_i_0)
    var_1 = d_m_i_0.parse()

@pytest.mark.xfail(strict=True)
def test_case_11():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    var_0 = d_m_i_0.update_timestamp()
    d_m_i_table_0 = module_0.DMITable(d_m_i_0)
    str_0 = 't='
    var_1 = d_m_i_0.find_properties(str_0, str_0)
    var_2 = d_m_i_table_0.as_dict()
    var_3 = d_m_i_table_0.__repr__()
    assert var_3 == 'DMI table dmi stats'
    var_4 = d_m_i_0.__parse_lines__(str_0)
    var_5 = d_m_i_0.as_dict()
    var_4.find_properties(str_0, var_1)

def test_case_12():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    var_0 = d_m_i_0.update_timestamp()
    var_1 = d_m_i_0.as_dict()

def test_case_13():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    str_0 = '/|8JrvL)'
    var_0 = d_m_i_0.__parse_lines__(str_0)

def test_case_14():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    str_0 = 'P*%Y\to<bG9Ri}k![Bm$X'
    var_0 = d_m_i_0.__parse_lines__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    d_m_i_0 = module_0.DMI()
    assert d_m_i_0.version is None
    assert d_m_i_0.tables == []
    assert module_0.DMI_HANDLE_TYPE_MAP == {0: 'BIOS', 1: 'System', 2: 'Base Board', 3: 'Chassis', 4: 'Processor', 5: 'Memory Controller', 6: 'Memory Module', 7: 'Cache', 8: 'Port Connector', 9: 'System Slots', 10: 'On Board Devices', 11: 'OEM Strings', 12: 'System Configuration Options', 13: 'BIOS Language', 14: 'Group Associations', 15: 'System Event Log', 16: 'Physical Memory Array', 17: 'Memory Device', 18: '32-bit Memory Error', 19: 'Memory Array Mapped Address', 20: 'Memory Device Mapped Address', 21: 'Built-in Pointing Device', 22: 'Portable Battery', 23: 'System Reset', 24: 'Hardware Security', 25: 'System Power Controls', 26: 'Voltage Probe', 27: 'Cooling Device', 28: 'Temperature Probe', 29: 'Electrical Current Probe', 30: 'Out-of-band Remote Access', 31: 'Boot Integrity Services', 32: 'System Boot', 33: '64-bit Memory Error', 34: 'Management Device', 35: 'Management Device Component', 36: 'Management Device Threshold Data', 37: 'Memory Channel', 38: 'IPMI Device', 39: 'Power Supply', 41: 'On Board Devices', 139: 'OEM-specific Type'}
    assert module_0.DMI.parser_name == 'dmi'
    assert f'{type(module_0.DMI.updated).__module__}.{type(module_0.DMI.updated).__qualname__}' == 'builtins.property'
    d_m_i_table_0 = module_0.DMITable(d_m_i_0)
    str_0 = 'n5n/$u'
    bool_0 = True
    var_0 = d_m_i_table_0.add_handle(bool_0)
    str_1 = 't='
    var_1 = d_m_i_0.find_properties(str_1, str_0)
    d_m_i_table_0.as_dict()