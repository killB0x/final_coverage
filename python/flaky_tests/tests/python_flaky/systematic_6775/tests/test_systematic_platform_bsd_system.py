# Automatically generated by Pynguin.
import pytest
import systematic.platform.bsd.system as module_0

def test_case_0():
    system_information_0 = module_0.SystemInformation()
    assert f'{type(system_information_0.sysctl).__module__}.{type(system_information_0.sysctl).__qualname__}' == 'systematic.platform.SysCtlParser'
    assert len(system_information_0.sysctl) == 0
    assert f'{type(module_0.SystemInformation.cpus).__module__}.{type(module_0.SystemInformation.cpus).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SystemInformation.uptime).__module__}.{type(module_0.SystemInformation.uptime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SystemInformation.total_memory).__module__}.{type(module_0.SystemInformation.total_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SystemInformation.release).__module__}.{type(module_0.SystemInformation.release).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    system_information_0 = module_0.SystemInformation()
    assert f'{type(system_information_0.sysctl).__module__}.{type(system_information_0.sysctl).__qualname__}' == 'systematic.platform.SysCtlParser'
    assert len(system_information_0.sysctl) == 0
    assert f'{type(module_0.SystemInformation.cpus).__module__}.{type(module_0.SystemInformation.cpus).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SystemInformation.uptime).__module__}.{type(module_0.SystemInformation.uptime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SystemInformation.total_memory).__module__}.{type(module_0.SystemInformation.total_memory).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SystemInformation.release).__module__}.{type(module_0.SystemInformation.release).__qualname__}' == 'builtins.property'
    system_information_1 = module_0.SystemInformation()
    assert f'{type(system_information_1.sysctl).__module__}.{type(system_information_1.sysctl).__qualname__}' == 'systematic.platform.SysCtlParser'
    assert len(system_information_1.sysctl) == 0
    system_information_2 = module_0.SystemInformation()
    assert f'{type(system_information_2.sysctl).__module__}.{type(system_information_2.sysctl).__qualname__}' == 'systematic.platform.SysCtlParser'
    assert len(system_information_2.sysctl) == 0
    system_information_2.to_json()