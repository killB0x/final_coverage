# Automatically generated by Pynguin.
import pytest
import systematic.shell as module_0
import systematic.log as module_1

def test_case_0():
    command_path_cache_0 = module_0.CommandPathCache()
    assert f'{type(command_path_cache_0).__module__}.{type(command_path_cache_0).__qualname__}' == 'systematic.shell.CommandPathCache'
    assert len(command_path_cache_0) == 417
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '8+3C.-bWX'
    var_0 = module_0.normalized(str_0)
    assert var_0 == '8+3C.-bWX'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    var_1 = module_0.xterm_title(var_0, bypass_term_check=str_0)
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    logger_0 = module_1.Logger()
    assert logger_0.name == '139624563484416-Logger'
    command_path_cache_0 = module_0.CommandPathCache()
    assert len(command_path_cache_0) == 417
    shell_command_parser_0.execute()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.xterm_title(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    script_thread_manager_0 = module_0.ScriptThreadManager()
    assert f'{type(script_thread_manager_0).__module__}.{type(script_thread_manager_0).__qualname__}' == 'systematic.shell.ScriptThreadManager'
    assert len(script_thread_manager_0) == 0
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    module_0.normalized(script_thread_manager_0, script_thread_manager_0)

def test_case_4():
    command_path_cache_0 = module_0.CommandPathCache()
    assert f'{type(command_path_cache_0).__module__}.{type(command_path_cache_0).__qualname__}' == 'systematic.shell.CommandPathCache'
    assert len(command_path_cache_0) == 417
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    var_0 = command_path_cache_0.versions(command_path_cache_0)

def test_case_5():
    command_path_cache_0 = module_0.CommandPathCache()
    assert f'{type(command_path_cache_0).__module__}.{type(command_path_cache_0).__qualname__}' == 'systematic.shell.CommandPathCache'
    assert len(command_path_cache_0) == 417
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    command_path_cache_1 = command_path_cache_0.which(command_path_cache_0)

def test_case_6():
    script_thread_manager_0 = module_0.ScriptThreadManager()
    assert f'{type(script_thread_manager_0).__module__}.{type(script_thread_manager_0).__qualname__}' == 'systematic.shell.ScriptThreadManager'
    assert len(script_thread_manager_0) == 0
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    var_0 = script_thread_manager_0.process_messages()

@pytest.mark.xfail(strict=True)
def test_case_7():
    script_command_0 = module_0.ScriptCommand()
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert script_command_0.short_description == ''
    assert script_command_0.description == ''
    assert script_command_0.epilog == ''
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    shell_command_parser_error_0 = module_0.ShellCommandParserError()
    script_command_0.format_help()

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 2310
    bytes_0 = b'\x07U)\xe9\xb7\xf2\x8e\xf9\x00\xc5\x95'
    script_command_0 = module_0.ScriptCommand(int_0, int_0, int_0, bytes_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name == 2310
    assert script_command_0.short_description == 2310
    assert script_command_0.description == 2310
    assert script_command_0.epilog == b'\x07U)\xe9\xb7\xf2\x8e\xf9\x00\xc5\x95'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    script_command_0.execute()

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -1813
    script_command_0 = module_0.ScriptCommand(description=int_0, epilog=int_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert script_command_0.short_description == ''
    assert script_command_0.description == ''
    assert script_command_0.epilog == -1813
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    script_command_0.format_usage()

@pytest.mark.xfail(strict=True)
def test_case_10():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    shell_command_parser_0.execute()

def test_case_11():
    command_path_cache_0 = module_0.CommandPathCache()
    assert f'{type(command_path_cache_0).__module__}.{type(command_path_cache_0).__qualname__}' == 'systematic.shell.CommandPathCache'
    assert len(command_path_cache_0) == 417
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    var_0 = command_path_cache_0.versions(command_path_cache_0)
    var_1 = command_path_cache_0.__repr__()
    assert var_1 == "<class 'systematic.shell.CommandPathCache'>"

@pytest.mark.xfail(strict=True)
def test_case_12():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    none_type_0 = None
    module_0.ScriptThread(none_type_0)

def test_case_13():
    script_thread_manager_0 = module_0.ScriptThreadManager()
    assert f'{type(script_thread_manager_0).__module__}.{type(script_thread_manager_0).__qualname__}' == 'systematic.shell.ScriptThreadManager'
    assert len(script_thread_manager_0) == 0
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')

@pytest.mark.xfail(strict=True)
def test_case_14():
    script_command_0 = module_0.ScriptCommand()
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert script_command_0.short_description == ''
    assert script_command_0.description == ''
    assert script_command_0.epilog == ''
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    script_command_0.wait()

def test_case_15():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')

def test_case_16():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    str_0 = "''Iv"
    var_0 = module_0.normalized(str_0, shell_command_parser_0)
    assert var_0 == "''Iv"
    with pytest.raises(module_0.ShellCommandParserError):
        shell_command_parser_0.execute(*var_0)

def test_case_17():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    list_0 = [shell_command_parser_0, shell_command_parser_0]
    with pytest.raises(module_0.ShellCommandParserError):
        shell_command_parser_0.execute(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    script_command_0 = module_0.ScriptCommand(short_description=shell_command_parser_0, epilog=shell_command_parser_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert f'{type(script_command_0.short_description).__module__}.{type(script_command_0.short_description).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert script_command_0.description == ''
    assert f'{type(script_command_0.epilog).__module__}.{type(script_command_0.epilog).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    script_command_0.error(shell_command_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    script_command_0 = module_0.ScriptCommand(short_description=shell_command_parser_0, epilog=shell_command_parser_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert f'{type(script_command_0.short_description).__module__}.{type(script_command_0.short_description).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert script_command_0.description == ''
    assert f'{type(script_command_0.epilog).__module__}.{type(script_command_0.epilog).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    script_command_0.message(shell_command_parser_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    script_command_0 = module_0.ScriptCommand(short_description=shell_command_parser_0, epilog=shell_command_parser_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert f'{type(script_command_0.short_description).__module__}.{type(script_command_0.short_description).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert script_command_0.description == ''
    assert f'{type(script_command_0.epilog).__module__}.{type(script_command_0.epilog).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    var_0 = script_command_0.parse_args(script_command_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert var_0.script is None
    assert var_0.name is None
    assert f'{type(var_0.short_description).__module__}.{type(var_0.short_description).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert var_0.description == ''
    assert f'{type(var_0.epilog).__module__}.{type(var_0.epilog).__qualname__}' == 'systematic.shell.ShellCommandParser'
    var_0.is_alive()

@pytest.mark.xfail(strict=True)
def test_case_21():
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    script_command_0 = module_0.ScriptCommand(short_description=shell_command_parser_0, epilog=shell_command_parser_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert f'{type(script_command_0.short_description).__module__}.{type(script_command_0.short_description).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert script_command_0.description == ''
    assert f'{type(script_command_0.epilog).__module__}.{type(script_command_0.epilog).__qualname__}' == 'systematic.shell.ShellCommandParser'
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    var_0 = script_command_0.run(script_command_0)
    var_1 = script_command_0.convert_arg_line_to_args(shell_command_parser_0)
    script_command_0.format_usage()

@pytest.mark.xfail(strict=True)
def test_case_22():
    dict_0 = {}
    script_command_0 = module_0.ScriptCommand(dict_0)
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name == {}
    assert script_command_0.short_description == ''
    assert script_command_0.description == ''
    assert script_command_0.epilog == ''
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = script_command_0.run(none_type_0)
    script_command_0.exit()

@pytest.mark.xfail(strict=True)
def test_case_23():
    command_path_cache_0 = module_0.CommandPathCache()
    assert f'{type(command_path_cache_0).__module__}.{type(command_path_cache_0).__qualname__}' == 'systematic.shell.CommandPathCache'
    assert len(command_path_cache_0) == 417
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    str_0 = 'ln'
    var_0 = command_path_cache_0.versions(str_0)
    var_1 = command_path_cache_0.which(str_0)
    assert var_1 == '/bin/ln'
    var_0.parse_args(var_0)

def test_case_24():
    str_0 = '[Y2`ij'
    var_0 = module_0.xterm_title(str_0, bypass_term_check=str_0)
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    shell_command_parser_0 = module_0.ShellCommandParser()
    assert f'{type(shell_command_parser_0).__module__}.{type(shell_command_parser_0).__qualname__}' == 'systematic.shell.ShellCommandParser'
    with pytest.raises(module_0.ShellCommandParserError):
        shell_command_parser_0.execute(*str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    script_command_0 = module_0.ScriptCommand()
    assert f'{type(script_command_0).__module__}.{type(script_command_0).__qualname__}' == 'systematic.shell.ScriptCommand'
    assert script_command_0.script is None
    assert script_command_0.name is None
    assert script_command_0.short_description == ''
    assert script_command_0.description == ''
    assert script_command_0.epilog == ''
    assert module_0.has_setproctitle is False
    assert module_0.CONFIG_PATH == '/root/.config/systematic'
    assert module_0.TERM_TITLE_SUPPORTED == ('xterm', 'xterm-debian')
    assert f'{type(module_0.ScriptCommand.log).__module__}.{type(module_0.ScriptCommand.log).__qualname__}' == 'builtins.property'
    script_command_0.check_output()