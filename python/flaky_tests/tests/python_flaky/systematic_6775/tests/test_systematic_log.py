# Automatically generated by Pynguin.
import pytest
import systematic.log as module_0
import urllib.parse as module_1
import re as module_2
import enum as module_3
import builtins as module_4

def test_case_0():
    logfile_tail_reader_0 = module_0.LogfileTailReader()
    assert f'{type(logfile_tail_reader_0).__module__}.{type(logfile_tail_reader_0).__qualname__}' == 'systematic.log.LogfileTailReader'
    assert logfile_tail_reader_0.path is None
    assert logfile_tail_reader_0.stat is None
    assert logfile_tail_reader_0.fd is None
    assert logfile_tail_reader_0.pos == 0
    assert f'{type(logfile_tail_reader_0.source_formats).__module__}.{type(logfile_tail_reader_0.source_formats).__qualname__}' == 'builtins.list'
    assert len(logfile_tail_reader_0.source_formats) == 6
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'

def test_case_1():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'

def test_case_2():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_1 = module_0.Logger(logger_0, timeformat=logger_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    module_1.splituser(logger_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    logger_0 = module_0.Logger(regex_flag_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-re.DOTALL'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    none_type_0 = None
    logger_1 = module_0.Logger(logger_0)
    logger_0.register_http_handler(none_type_0, regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    module_1.splituser(logger_0)

def test_case_6():
    regex_flag_0 = module_2.RegexFlag.UNICODE
    log_file_0 = module_0.LogFile(regex_flag_0, regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'

@pytest.mark.xfail(strict=True)
def test_case_7():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    var_0 = module_1.clear_cache()
    log_file_0 = var_0.__ge__(logger_0)
    log_file_1 = module_0.LogFile(var_0)
    assert f'{type(log_file_1).__module__}.{type(log_file_1).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_1) == 0
    logger_1 = module_0.Logger()
    assert logger_1.name == '139768800347904-Logger'
    var_1 = logger_0.register_syslog_handler(var_0, facility=logger_1)
    log_file_0.filter_message(log_file_1)

def test_case_8():
    none_type_0 = None
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_1 = module_0.Logger(logger_0, timeformat=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    regex_flag_0 = module_2.RegexFlag.MULTILINE
    none_type_0 = None
    logger_0 = module_0.Logger(regex_flag_0, none_type_0, regex_flag_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-re.MULTILINE'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    module_3.unique(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    var_0 = logger_0.__setitem__(logger_0, logger_0)
    var_1 = logger_0.register_stream_handler(logger_0)
    var_2 = module_1.clear_cache()
    var_2.fileno()

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_1.clear_cache()
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    var_1 = logger_0.register_syslog_handler(var_0)
    var_1.filter_message(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0.__setattr__(logger_0, logger_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0.__getitem__(logger_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 3270
    log_file_0 = module_0.LogFile(int_0, int_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    var_0 = logger_0.__setitem__(logger_0, int_0)
    log_file_0.filter_message(int_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    regex_flag_0 = module_2.RegexFlag.MULTILINE
    none_type_0 = None
    log_file_0 = module_0.LogFile(none_type_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger(regex_flag_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-re.MULTILINE'
    logger_0.register_file_handler(log_file_0, logger_0, log_file_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    log_file_0 = module_0.LogFile(regex_flag_0, regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger(regex_flag_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-re.DOTALL'
    none_type_0 = None
    logger_0.register_file_handler(none_type_0, regex_flag_0, backupCount=regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_1 = module_0.Logger()
    assert logger_1.name == '139768800347904-Logger'
    var_0 = logger_1.__setitem__(logger_1, logger_1)
    var_1 = logger_1.register_stream_handler(logger_1)
    logger_0.register_syslog_handler(var_1, default_level=var_0, logformat=logger_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = 3227
    logfile_tail_reader_0 = module_0.LogfileTailReader(fd=int_0)
    assert f'{type(logfile_tail_reader_0).__module__}.{type(logfile_tail_reader_0).__qualname__}' == 'systematic.log.LogfileTailReader'
    assert logfile_tail_reader_0.path is None
    assert logfile_tail_reader_0.stat is None
    assert logfile_tail_reader_0.fd == 3227
    assert logfile_tail_reader_0.pos == 0
    assert f'{type(logfile_tail_reader_0.source_formats).__module__}.{type(logfile_tail_reader_0.source_formats).__qualname__}' == 'builtins.list'
    assert len(logfile_tail_reader_0.source_formats) == 6
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logfile_tail_reader_0.__format_line__(logfile_tail_reader_0)

def test_case_19():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    log_file_0 = module_0.LogFile(regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    with pytest.raises(module_0.LogFileError):
        log_file_0.__open_logfile__(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    log_file_0 = module_0.LogFile(none_type_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    log_file_0.filter_message(none_type_0)

def test_case_21():
    var_0 = module_1.clear_cache()
    log_file_0 = module_0.LogFile(var_0, var_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    with pytest.raises(module_0.LogFileError):
        log_file_0.next_iterator_match(var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    logger_0 = module_0.Logger(regex_flag_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-re.DOTALL'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    none_type_0 = None
    logger_0.register_http_handler(none_type_0, regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    none_type_0 = None
    logger_1 = module_0.Logger(logger_0, timeformat=logger_0)
    log_file_0 = module_0.LogFile(logger_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    logger_1.register_file_handler(none_type_0, logger_0, logformat=logger_1, backupCount=logger_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    var_0 = module_2.purge()
    log_file_0 = module_0.LogFile(var_0, var_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    module_4.Exception(*log_file_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    regex_flag_0 = module_2.RegexFlag.MULTILINE
    log_file_0 = module_0.LogFile(regex_flag_0, regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    log_file_0.filter_program(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = 3270
    log_file_0 = module_0.LogFile(int_0, int_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    log_file_0.match_message(log_file_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    module_0.LogFileCollection(logger_0)

def test_case_28():
    str_0 = '@_QV\x0bM`~{tpO4s\tpHE,'
    with pytest.raises(module_0.LogFileError):
        module_0.LogFileCollection(str_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = 3270
    log_file_0 = module_0.LogFile(int_0, int_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger(log_file_0, timeformat=int_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    log_file_0.filter_message(int_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    none_type_0 = None
    logger_1 = module_0.Logger(logger_0, timeformat=logger_0)
    logger_2 = module_0.Logger(logformat=none_type_0)
    assert logger_2.name == '139768800347904-Logger'
    log_file_0 = module_0.LogFile(logger_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    logger_2.register_file_handler(log_file_0, logger_0, backupCount=logger_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    var_0 = module_1.clear_cache()
    log_file_0 = module_0.LogFile(var_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    log_file_0.filter_host(var_0)

def test_case_32():
    regex_flag_0 = module_2.RegexFlag.MULTILINE
    log_file_0 = module_0.LogFile(regex_flag_0, regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    none_type_0 = None
    with pytest.raises(module_0.LogFileError):
        log_file_0.get_iterator(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    regex_flag_0 = module_2.RegexFlag.VERBOSE
    log_file_0 = module_0.LogFile(regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    log_file_0.next()

def test_case_34():
    var_0 = module_1.clear_cache()
    log_file_0 = module_0.LogFile(var_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    with pytest.raises(module_0.LogFileError):
        log_file_0.reset_iterator(var_0)

def test_case_35():
    regex_flag_0 = module_2.RegexFlag.MULTILINE
    none_type_0 = None
    log_file_0 = module_0.LogFile(none_type_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    with pytest.raises(module_0.LogFileError):
        log_file_0.update_iterator(regex_flag_0)

def test_case_36():
    bytes_0 = b'I\xda\xa1\xf7\xa9\x17\xec\xab\xf1\xedJ\xc1\x81'
    with pytest.raises(module_0.LogFileError):
        module_0.LogEntry(bytes_0, bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    log_file_0 = module_0.LogFile(regex_flag_0, regex_flag_0)
    assert f'{type(log_file_0).__module__}.{type(log_file_0).__qualname__}' == 'systematic.log.LogFile'
    assert len(log_file_0) == 0
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    logger_0 = module_0.Logger(regex_flag_0)
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-re.DOTALL'
    var_0 = log_file_0.__repr__()
    assert var_0 == 're.DOTALL 0 entries'
    log_file_1 = module_0.LogFile(var_0)
    var_0.close()

@pytest.mark.xfail(strict=True)
def test_case_38():
    logger_0 = module_0.Logger()
    assert f'{type(logger_0).__module__}.{type(logger_0).__qualname__}' == 'systematic.log.Logger'
    assert logger_0.name == '139768800347904-Logger'
    assert module_0.DEFAULT_LOGFORMAT == '%(module)s %(levelname)s %(message)s'
    assert module_0.DEFAULT_TIME_FORMAT == '%Y-%m-%d %H:%M:%S'
    assert module_0.DEFAULT_LOGFILEFORMAT == '%(asctime)s %(module)s.%(funcName)s %(message)s'
    assert module_0.DEFAULT_LOGSIZE_LIMIT == 1048576
    assert module_0.DEFAULT_LOG_BACKUPS == 10
    assert module_0.DEFAULT_SYSLOG_FORMAT == '%(message)s'
    assert module_0.LOGGING_LEVEL_NAMES == ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    assert module_0.DEFAULT_SYSLOG_ADDRESS == '/dev/log'
    none_type_0 = None
    logger_0.register_file_handler(logger_0, logger_0, none_type_0, timeformat=logger_0, maxBytes=logger_0, backupCount=logger_0)