# Automatically generated by Pynguin.
import pytest
import auto_diff.sess.session as module_0

def test_case_0():
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'
    with pytest.raises(NotImplementedError):
        session_0.run(session_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'
    session_1 = module_0.Session()
    var_0 = session_0.prepare()
    var_1 = session_1.prepare()
    session_2 = module_0.Session()
    session_2.run(session_2, session_2)

def test_case_2():
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'
    list_0 = []
    var_0 = session_0.run(list_0)

def test_case_3():
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'

@pytest.mark.xfail(strict=True)
def test_case_4():
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'
    str_0 = '@S3c]_J\x0b/['
    list_0 = [str_0, str_0, str_0, session_0]
    none_type_0 = None
    session_0.run(list_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '@S3c]_J\x0b/['
    none_type_0 = None
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'
    none_type_1 = None
    dict_0 = {str_0: none_type_1}
    session_0.run(dict_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    session_0 = module_0.Session()
    assert f'{type(session_0).__module__}.{type(session_0).__qualname__}' == 'auto_diff.sess.session.Session'
    dict_0 = {}
    var_0 = session_0.run(dict_0, none_type_0)
    var_0.__hash__()