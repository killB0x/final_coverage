# Automatically generated by Pynguin.
import pytest
import artron.worker as module_0

def test_case_0():
    str_0 = '-E3}O/2PmyA$'
    worker_0 = module_0.Worker(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(worker_0).__module__}.{type(worker_0).__qualname__}' == 'artron.worker.Worker'
    assert worker_0.queue == '-E3}O/2PmyA$'
    assert worker_0.tasks == '-E3}O/2PmyA$'
    assert worker_0.builder == '-E3}O/2PmyA$'
    assert worker_0.max_retry == '-E3}O/2PmyA$'
    assert worker_0.lock == '-E3}O/2PmyA$'
    var_0 = worker_0.stop()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'e,`]^:\nsN]!N*M!G"J'
    worker_0 = module_0.Worker(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(worker_0).__module__}.{type(worker_0).__qualname__}' == 'artron.worker.Worker'
    assert worker_0.queue == 'e,`]^:\nsN]!N*M!G"J'
    assert worker_0.tasks == 'e,`]^:\nsN]!N*M!G"J'
    assert worker_0.builder == 'e,`]^:\nsN]!N*M!G"J'
    assert worker_0.max_retry == 'e,`]^:\nsN]!N*M!G"J'
    assert worker_0.lock == 'e,`]^:\nsN]!N*M!G"J'
    worker_0.run()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.Worker(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'N"7#?'
    worker_0 = module_0.Worker(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(worker_0).__module__}.{type(worker_0).__qualname__}' == 'artron.worker.Worker'
    assert worker_0.queue == 'N"7#?'
    assert worker_0.tasks == 'N"7#?'
    assert worker_0.builder == 'N"7#?'
    assert worker_0.max_retry == 'N"7#?'
    assert worker_0.lock == 'N"7#?'
    var_0 = worker_0.stop()
    var_1 = worker_0.start()
    worker_0.run()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'N"7#?'
    worker_0 = module_0.Worker(str_0, str_0, str_0, str_0, str_0, str_0)
    assert f'{type(worker_0).__module__}.{type(worker_0).__qualname__}' == 'artron.worker.Worker'
    assert worker_0.queue == 'N"7#?'
    assert worker_0.tasks == 'N"7#?'
    assert worker_0.builder == 'N"7#?'
    assert worker_0.max_retry == 'N"7#?'
    assert worker_0.lock == 'N"7#?'
    var_0 = worker_0.start()
    var_1 = worker_0.stop()
    module_0.Worker(worker_0, worker_0, worker_0, str_0, str_0, worker_0)