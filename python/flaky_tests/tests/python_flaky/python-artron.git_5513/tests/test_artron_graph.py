# Automatically generated by Pynguin.
import pytest
import artron._py6 as module_0
import artron.graph as module_1
import builtins as module_2
import artron.task as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.<lambda>(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -210
    dict_0 = {int_0: int_0}
    module_1.Graph(dict_0)

def test_case_2():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0

def test_case_3():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.edges()
    object_0 = module_2.object(*var_0)
    with pytest.raises(ValueError):
        graph_0.__setitem__(var_0, object_0)

def test_case_4():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    object_0 = module_2.object()
    list_0 = [object_0]
    var_0 = graph_0.__setitem__(object_0, list_0)
    assert len(graph_0) == 1
    var_1 = graph_0.isolated_vertices()
    object_1 = module_2.object(*var_1)

def test_case_5():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.edges()
    object_0 = module_2.object(*var_0, **graph_0)

def test_case_6():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.isolated_vertices()
    object_0 = module_2.object(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.edges()
    object_0 = module_2.object()
    list_0 = [object_0]
    var_1 = graph_0.__setitem__(object_0, list_0)
    assert len(graph_0) == 1
    module_2.object(*var_0)

def test_case_8():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    object_0 = module_2.object()
    list_0 = [object_0]
    var_0 = graph_0.__setitem__(object_0, list_0)
    assert len(graph_0) == 1
    var_1 = graph_0.isolated_vertices()
    var_2 = graph_0.remove_vertex(object_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.edges()
    var_1 = graph_0.edges()
    object_0 = module_2.object(*var_1)
    object_1 = module_2.object()
    list_0 = [object_1]
    var_2 = graph_0.__setitem__(object_0, list_0)
    assert len(graph_0) == 1
    var_3 = graph_0.__setitem__(object_1, list_0)
    var_4 = graph_0.remove_vertex(object_1)
    module_2.object(*var_3)

@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.edges()
    var_1 = graph_0.edges()
    object_0 = module_2.object(*var_1)
    object_1 = module_2.object()
    list_0 = [object_1]
    var_2 = graph_0.__setitem__(object_0, list_0)
    assert len(graph_0) == 1
    var_3 = graph_0.__setitem__(object_1, list_0)
    var_4 = graph_0.isolated_vertices()
    var_5 = graph_0.remove_vertex(object_1)
    module_2.object(*var_4)

@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 0
    var_0 = graph_0.edges()
    var_1 = graph_0.edges()
    object_0 = module_2.object(*var_1)
    object_1 = module_2.object()
    list_0 = []
    var_2 = graph_0.__setitem__(object_0, list_0)
    assert len(graph_0) == 1
    var_3 = graph_0.__setitem__(object_1, list_0)
    var_4 = graph_0.isolated_vertices()
    var_5 = graph_0.remove_vertex(object_1)
    var_6 = var_0.__repr__()
    module_2.object(*var_0)

def test_case_12():
    int_0 = 4156
    task_0 = module_3.Task(int_0, int_0, int_0)
    dict_0 = {int_0: task_0}
    var_0 = task_0.is_runnable()
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 1
    object_0 = module_2.object()
    object_1 = module_2.object()

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 4179
    task_0 = module_3.Task(int_0, int_0, int_0)
    var_0 = task_0.add_require(task_0)
    dict_0 = {int_0: task_0}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 1
    int_0.edges()

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 4156
    task_0 = module_3.Task(int_0, int_0, int_0)
    dict_0 = {int_0: task_0}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 1
    none_type_0 = None
    var_0 = task_0.add_require(none_type_0)
    graph_1 = module_1.Graph(dict_0)
    assert len(graph_1) == 1
    task_0.del_require(int_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 4156
    task_0 = module_3.Task(int_0, int_0, int_0)
    dict_0 = {task_0: task_0, int_0: task_0}
    graph_0 = module_1.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_0) == 1
    var_0 = task_0.add_require(graph_0)
    graph_1 = module_1.Graph(dict_0)
    assert f'{type(graph_1).__module__}.{type(graph_1).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_1) == 1
    var_1 = graph_1.edges()
    task_0.del_require(int_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = 4156
    task_0 = module_3.Task(int_0, int_0, int_0)
    dict_0 = {int_0: task_0}
    graph_0 = task_0.is_finished()
    var_0 = task_0.__repr__()
    graph_1 = task_0.is_finished()
    none_type_0 = None
    var_1 = task_0.run(graph_0, none_type_0)
    graph_2 = module_1.Graph(dict_0)
    assert f'{type(graph_2).__module__}.{type(graph_2).__qualname__}' == 'artron.graph.Graph'
    assert len(graph_2) == 0
    var_2 = graph_2.edges()
    task_0.del_require(int_0)