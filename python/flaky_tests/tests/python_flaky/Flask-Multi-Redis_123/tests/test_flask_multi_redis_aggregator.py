# Automatically generated by Pynguin.
import pytest
import flask_multi_redis.aggregator as module_0

def test_case_0():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'

def test_case_1():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.scan_iter(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '96)i.C)s_}s<M*XR'
    aggregator_0 = module_0.Aggregator(str_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    aggregator_0.get(str_0)

def test_case_3():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.get(aggregator_0)
    with pytest.raises(NotImplementedError):
        aggregator_0.__getattr__(aggregator_0)

def test_case_4():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.keys(aggregator_0)

def test_case_5():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.set(tuple_0, aggregator_0)
    assert var_0 is True

def test_case_6():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.delete(aggregator_0)

def test_case_7():
    tuple_0 = ()
    aggregator_0 = module_0.Aggregator(tuple_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.get(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'connection_pool'
    str_1 = 'VoP}CQx>[ >`\\/'
    aggregator_0 = module_0.Aggregator(str_1)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    aggregator_0.__getattr__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    dict_0 = {}
    aggregator_0 = module_0.Aggregator(dict_0)
    assert f'{type(aggregator_0).__module__}.{type(aggregator_0).__qualname__}' == 'flask_multi_redis.aggregator.Aggregator'
    var_0 = aggregator_0.set(none_type_0, dict_0)
    assert var_0 is True
    aggregator_1 = module_0.Aggregator(var_0)
    var_1 = aggregator_0.get(var_0)
    var_2 = aggregator_0.delete(none_type_0)
    str_0 = '_redis_client'
    var_3 = aggregator_0.__getattr__(str_0)
    var_2.get(none_type_0)