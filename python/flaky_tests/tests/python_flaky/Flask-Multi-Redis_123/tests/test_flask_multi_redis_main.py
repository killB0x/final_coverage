# Automatically generated by Pynguin.
import pytest
import flask_multi_redis.main as module_0

def test_case_0():
    flask_multi_redis_0 = module_0.FlaskMultiRedis()
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'

def test_case_1():
    dict_0 = {}
    with pytest.raises(AssertionError):
        module_0.FlaskMultiRedis(config_prefix=dict_0, strategy=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    flask_multi_redis_0 = module_0.FlaskMultiRedis()
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'
    flask_multi_redis_0.init_app(flask_multi_redis_0)

def test_case_3():
    flask_multi_redis_0 = module_0.FlaskMultiRedis()
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'
    var_0 = flask_multi_redis_0.__getitem__(flask_multi_redis_0)

def test_case_4():
    flask_multi_redis_0 = module_0.FlaskMultiRedis()
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'
    var_0 = flask_multi_redis_0.__setitem__(flask_multi_redis_0, flask_multi_redis_0)

def test_case_5():
    flask_multi_redis_0 = module_0.FlaskMultiRedis()
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'
    var_0 = flask_multi_redis_0.__delitem__(flask_multi_redis_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    flask_multi_redis_0 = module_0.FlaskMultiRedis()
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'
    module_0.FlaskMultiRedis(flask_multi_redis_0, config_prefix=flask_multi_redis_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    flask_multi_redis_0 = module_0.FlaskMultiRedis(strict=none_type_0)
    assert f'{type(flask_multi_redis_0).__module__}.{type(flask_multi_redis_0).__qualname__}' == 'flask_multi_redis.main.FlaskMultiRedis'
    assert flask_multi_redis_0.provider_kwargs == {}
    assert flask_multi_redis_0.config_prefix == 'REDIS'
    assert f'{type(module_0.FlaskMultiRedis.from_custom_provider).__module__}.{type(module_0.FlaskMultiRedis.from_custom_provider).__qualname__}' == 'builtins.method'
    var_0 = flask_multi_redis_0.__setitem__(none_type_0, flask_multi_redis_0)
    str_0 = '\neE0'
    var_1 = flask_multi_redis_0.__getattr__(flask_multi_redis_0)
    str_1 = ')H?)['
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    var_2 = flask_multi_redis_0.__setitem__(str_0, dict_0)
    flask_multi_redis_0.init_app(flask_multi_redis_0, **dict_0)