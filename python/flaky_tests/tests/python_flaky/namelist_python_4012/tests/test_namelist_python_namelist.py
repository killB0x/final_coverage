# Automatically generated by Pynguin.
import pytest
import namelist_python.namelist as module_0
import re as module_1
import builtins as module_2

def test_case_0():
    no_single_value_found_exception_0 = module_0.NoSingleValueFoundException()

@pytest.mark.xfail(strict=True)
def test_case_1():
    regex_flag_0 = module_1.RegexFlag.MULTILINE
    module_0.read_namelist_file(regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'fC2\x0bELhlLQ'
    attribute_mapper_0 = module_0.AttributeMapper(str_0)
    assert attribute_mapper_0.data == 'fC2\x0bELhlLQ'
    module_0.Namelist(attribute_mapper_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ':d~p&lkw/;JL'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    attribute_mapper_0 = module_0.AttributeMapper(dict_0)
    assert attribute_mapper_0.data == {':d~p&lkw/;JL': ':d~p&lkw/;JL'}
    var_0 = attribute_mapper_0.__getattr__(str_0)
    assert var_0 == ':d~p&lkw/;JL'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 1
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'
    attribute_mapper_1 = module_0.AttributeMapper(str_0)
    var_1 = module_1.template(str_0)
    var_2 = namelist_0.dump()
    assert var_2 == '&lkw\n/\n'
    var_3 = attribute_mapper_0.__dir__()
    module_2.BaseException(*var_1)

def test_case_4():
    str_0 = 'fC2\x0bELhlLQ'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 0
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'

def test_case_5():
    str_0 = ':d~p&lkw/;JL'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    attribute_mapper_0 = module_0.AttributeMapper(dict_0)
    assert attribute_mapper_0.data == {':d~p&lkw/;JL': ':d~p&lkw/;JL'}
    var_0 = attribute_mapper_0.__setattr__(str_0, dict_0)
    assert f'{type(attribute_mapper_0.data).__module__}.{type(attribute_mapper_0.data).__qualname__}' == 'builtins.dict'
    assert len(attribute_mapper_0.data) == 1
    var_1 = attribute_mapper_0.__getattr__(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'namelist_python.namelist.AttributeMapper'
    assert f'{type(var_1.data).__module__}.{type(var_1.data).__qualname__}' == 'builtins.dict'
    assert len(var_1.data) == 1
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 1
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'
    var_2 = module_1.template(str_0)
    var_3 = module_1.purge()
    var_4 = var_3.__dir__()
    var_5 = namelist_0.dump()
    assert var_5 == '&lkw\n/\n'
    namelist_1 = module_0.Namelist(var_5)
    assert f'{type(namelist_1).__module__}.{type(namelist_1).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_1.groups).__module__}.{type(namelist_1.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_1.groups) == 1
    base_exception_0 = module_2.BaseException()

def test_case_6():
    str_0 = ':d~p&lkw/;JL'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 1
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'
    var_0 = namelist_0.dump()
    assert var_0 == '&lkw\n/\n'

def test_case_7():
    str_0 = 'fC2\x0bELhlLQ'
    var_0 = module_1.sub(str_0, str_0, str_0)
    namelist_0 = module_0.Namelist(var_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 0
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'
    attribute_mapper_0 = module_0.AttributeMapper(var_0)
    assert attribute_mapper_0.data == 'fC2\x0bELhlLQ'
    var_1 = namelist_0.dump()
    assert var_1 == '\n'
    with pytest.raises(NotImplementedError):
        attribute_mapper_0.__setattr__(var_1, namelist_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'C92\x0bEhQ'
    attribute_mapper_0 = module_0.AttributeMapper(str_0)
    assert attribute_mapper_0.data == 'C92\x0bEhQ'
    attribute_mapper_0.__getattr__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '!/G\rLcm`'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 0
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'
    attribute_mapper_0 = module_0.AttributeMapper(str_0)
    assert attribute_mapper_0.data == '!/G\rLcm`'
    var_0 = namelist_0.dump()
    assert var_0 == '\n'
    attribute_mapper_0.__getattr__(str_0)

def test_case_10():
    str_0 = ':d~p&lkw/;JL'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 1
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ':d~p&l\nw/;L'
    module_0.Namelist(str_0)

def test_case_12():
    str_0 = ':d~p&\n/;L'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 1
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'

def test_case_13():
    str_0 = ':d~p&{kw/;JL'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    attribute_mapper_0 = module_0.AttributeMapper(dict_0)
    assert attribute_mapper_0.data == {':d~p&{kw/;JL': ':d~p&{kw/;JL'}
    var_0 = attribute_mapper_0.__getattr__(str_0)
    assert var_0 == ':d~p&{kw/;JL'
    namelist_0 = module_0.Namelist(str_0)
    assert f'{type(namelist_0).__module__}.{type(namelist_0).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_0.groups).__module__}.{type(namelist_0.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_0.groups) == 1
    assert f'{type(module_0.Namelist.data).__module__}.{type(module_0.Namelist.data).__qualname__}' == 'builtins.property'
    var_1 = namelist_0.dump()
    assert var_1 == '&{kw\n/\n'
    namelist_1 = module_0.Namelist(var_1)
    assert f'{type(namelist_1).__module__}.{type(namelist_1).__qualname__}' == 'namelist_python.namelist.Namelist'
    assert f'{type(namelist_1.groups).__module__}.{type(namelist_1.groups).__qualname__}' == 'collections.OrderedDict'
    assert len(namelist_1.groups) == 1