# Automatically generated by Pynguin.
import accessify.errors as module_0

def test_case_0():
    bool_0 = False
    implemented_interface_member_has_incorrect_access_modifier_exception_0 = module_0.ImplementedInterfaceMemberHasIncorrectAccessModifierException(bool_0)
    assert implemented_interface_member_has_incorrect_access_modifier_exception_0.message is False
    assert module_0.INACCESSIBLE_DUE_TO_ITS_PROTECTION_LEVEL_EXCEPTION_MESSAGE == '{class_name}.{class_method_name}() is inaccessible due to its protection level'
    assert module_0.INTERFACE_MEMBER_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'class {class_name} does not implement interface member {interface_name}.{interface_method_name}({interface_method_arguments})'
    assert module_0.INTERFACE_MEMBER_HAS_BEEN_IMPLEMENTED_WITH_MISMATCHED_ARGUMENT_EXCEPTION_MESSAGE == 'class {class_name} implements interface member {interface_name}.{interface_method_name}({interface_method_arguments}) with mismatched arguments'
    assert module_0.DECLARED_INTERFACE_EXCEPTION_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'Declared exception {exception_name} by {interface_name}.{interface_method_name}() member has not been implemented by {class_name}.{class_method_name}({class_method_arguments})'
    assert module_0.IMPLEMENTED_INTERFACE_MEMBER_HAS_INCORRECT_ACCESS_MODIFIER_EXCEPTION == '{class_name}.{class_method_name}({class_method_arguments}) mismatches {interface_name}.{interface_method_name}() member access modifier.'

def test_case_1():
    str_0 = 'oS7I7xaM\tZH}63_KfO'
    inaccessible_due_to_its_protection_level_exception_0 = module_0.InaccessibleDueToItsProtectionLevelException(str_0)
    assert inaccessible_due_to_its_protection_level_exception_0.message == 'oS7I7xaM\tZH}63_KfO'
    assert module_0.INACCESSIBLE_DUE_TO_ITS_PROTECTION_LEVEL_EXCEPTION_MESSAGE == '{class_name}.{class_method_name}() is inaccessible due to its protection level'
    assert module_0.INTERFACE_MEMBER_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'class {class_name} does not implement interface member {interface_name}.{interface_method_name}({interface_method_arguments})'
    assert module_0.INTERFACE_MEMBER_HAS_BEEN_IMPLEMENTED_WITH_MISMATCHED_ARGUMENT_EXCEPTION_MESSAGE == 'class {class_name} implements interface member {interface_name}.{interface_method_name}({interface_method_arguments}) with mismatched arguments'
    assert module_0.DECLARED_INTERFACE_EXCEPTION_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'Declared exception {exception_name} by {interface_name}.{interface_method_name}() member has not been implemented by {class_name}.{class_method_name}({class_method_arguments})'
    assert module_0.IMPLEMENTED_INTERFACE_MEMBER_HAS_INCORRECT_ACCESS_MODIFIER_EXCEPTION == '{class_name}.{class_method_name}({class_method_arguments}) mismatches {interface_name}.{interface_method_name}() member access modifier.'
    interface_member_has_not_been_implemented_exception_0 = module_0.InterfaceMemberHasNotBeenImplementedException(str_0)
    assert interface_member_has_not_been_implemented_exception_0.message == 'oS7I7xaM\tZH}63_KfO'
    implemented_interface_member_has_incorrect_access_modifier_exception_0 = module_0.ImplementedInterfaceMemberHasIncorrectAccessModifierException(interface_member_has_not_been_implemented_exception_0)
    assert f'{type(implemented_interface_member_has_incorrect_access_modifier_exception_0.message).__module__}.{type(implemented_interface_member_has_incorrect_access_modifier_exception_0.message).__qualname__}' == 'accessify.errors.InterfaceMemberHasNotBeenImplementedException'

def test_case_2():
    bool_0 = True
    interface_member_has_not_been_implemented_with_mismatched_arguments_exception_0 = module_0.InterfaceMemberHasNotBeenImplementedWithMismatchedArgumentsException(bool_0)
    assert interface_member_has_not_been_implemented_with_mismatched_arguments_exception_0.message is True
    assert module_0.INACCESSIBLE_DUE_TO_ITS_PROTECTION_LEVEL_EXCEPTION_MESSAGE == '{class_name}.{class_method_name}() is inaccessible due to its protection level'
    assert module_0.INTERFACE_MEMBER_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'class {class_name} does not implement interface member {interface_name}.{interface_method_name}({interface_method_arguments})'
    assert module_0.INTERFACE_MEMBER_HAS_BEEN_IMPLEMENTED_WITH_MISMATCHED_ARGUMENT_EXCEPTION_MESSAGE == 'class {class_name} implements interface member {interface_name}.{interface_method_name}({interface_method_arguments}) with mismatched arguments'
    assert module_0.DECLARED_INTERFACE_EXCEPTION_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'Declared exception {exception_name} by {interface_name}.{interface_method_name}() member has not been implemented by {class_name}.{class_method_name}({class_method_arguments})'
    assert module_0.IMPLEMENTED_INTERFACE_MEMBER_HAS_INCORRECT_ACCESS_MODIFIER_EXCEPTION == '{class_name}.{class_method_name}({class_method_arguments}) mismatches {interface_name}.{interface_method_name}() member access modifier.'

def test_case_3():
    int_0 = 0
    declared_interface_exception_has_not_been_implemented_exception_0 = module_0.DeclaredInterfaceExceptionHasNotBeenImplementedException(int_0)
    assert declared_interface_exception_has_not_been_implemented_exception_0.message == 0
    assert module_0.INACCESSIBLE_DUE_TO_ITS_PROTECTION_LEVEL_EXCEPTION_MESSAGE == '{class_name}.{class_method_name}() is inaccessible due to its protection level'
    assert module_0.INTERFACE_MEMBER_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'class {class_name} does not implement interface member {interface_name}.{interface_method_name}({interface_method_arguments})'
    assert module_0.INTERFACE_MEMBER_HAS_BEEN_IMPLEMENTED_WITH_MISMATCHED_ARGUMENT_EXCEPTION_MESSAGE == 'class {class_name} implements interface member {interface_name}.{interface_method_name}({interface_method_arguments}) with mismatched arguments'
    assert module_0.DECLARED_INTERFACE_EXCEPTION_HAS_NOT_BEEN_IMPLEMENTED_EXCEPTION_MESSAGE == 'Declared exception {exception_name} by {interface_name}.{interface_method_name}() member has not been implemented by {class_name}.{class_method_name}({class_method_arguments})'
    assert module_0.IMPLEMENTED_INTERFACE_MEMBER_HAS_INCORRECT_ACCESS_MODIFIER_EXCEPTION == '{class_name}.{class_method_name}({class_method_arguments}) mismatches {interface_name}.{interface_method_name}() member access modifier.'
    interface_member_has_not_been_implemented_with_mismatched_arguments_exception_0 = module_0.InterfaceMemberHasNotBeenImplementedWithMismatchedArgumentsException(int_0)
    assert interface_member_has_not_been_implemented_with_mismatched_arguments_exception_0.message == 0
    list_0 = [interface_member_has_not_been_implemented_with_mismatched_arguments_exception_0, int_0, int_0]
    inaccessible_due_to_its_protection_level_exception_0 = module_0.InaccessibleDueToItsProtectionLevelException(list_0)
    assert f'{type(inaccessible_due_to_its_protection_level_exception_0.message).__module__}.{type(inaccessible_due_to_its_protection_level_exception_0.message).__qualname__}' == 'builtins.list'
    assert len(inaccessible_due_to_its_protection_level_exception_0.message) == 3