# Automatically generated by Pynguin.
import pytest
import accessify.utils as module_0
import ast as module_1
import inspect as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xf1\x8a\xd9\xa1\x82g\xa2\xd3'
    module_0.does_classes_contain_private_method(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\n        Get member access modifier type.\n\n        Variants are the followings: public, private, protected.\n        '
    module_0.find_decorated_method(str_0)

def test_case_2():
    precedence_0 = module_1._Precedence.BAND
    var_0 = module_0.get_class_members(precedence_0)
    assert module_0.COMMERCIAL_AT_SYMBOL == '@'
    assert module_0.DISABLE_ACCESSIFY_ENV_VARIABLE_NAME == 'DISABLE_ACCESSIFY'
    assert module_0.MARK_MEMBER_RAISES_EXCEPTION == 'raise {exception_name}'
    assert module_0.ACCESS_WRAPPERS_NAMES == ('private_wrapper', 'protected_wrapper')

def test_case_3():
    class_member_types_0 = module_0.ClassMemberTypes()
    assert module_0.COMMERCIAL_AT_SYMBOL == '@'
    assert module_0.DISABLE_ACCESSIFY_ENV_VARIABLE_NAME == 'DISABLE_ACCESSIFY'
    assert module_0.MARK_MEMBER_RAISES_EXCEPTION == 'raise {exception_name}'
    assert module_0.ACCESS_WRAPPERS_NAMES == ('private_wrapper', 'protected_wrapper')
    assert module_0.ClassMemberTypes.GETTER == 'getter'
    assert module_0.ClassMemberTypes.SETTER == 'setter'
    assert module_0.ClassMemberTypes.DELETER == 'deleter'
    assert module_0.ClassMemberTypes.METHOD == 'method'
    assert module_0.ClassMemberTypes.STATIC_METHOD == 'staticmethod'
    assert module_0.ClassMemberTypes.CLASS_METHOD == 'classmethod'

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_2.formatannotationrelativeto(none_type_0)
    module_0.ClassMember(var_0, var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_0.get_class_members(none_type_0)
    assert module_0.COMMERCIAL_AT_SYMBOL == '@'
    assert module_0.DISABLE_ACCESSIFY_ENV_VARIABLE_NAME == 'DISABLE_ACCESSIFY'
    assert module_0.MARK_MEMBER_RAISES_EXCEPTION == 'raise {exception_name}'
    assert module_0.ACCESS_WRAPPERS_NAMES == ('private_wrapper', 'protected_wrapper')
    var_1 = module_0.does_classes_contain_private_method(var_0, none_type_0)
    var_2 = module_0.get_class_members(var_0)
    module_0.ClassMember(var_0, var_2, var_1)

def test_case_6():
    none_type_0 = None
    var_0 = module_0.get_class_members(none_type_0)
    assert module_0.COMMERCIAL_AT_SYMBOL == '@'
    assert module_0.DISABLE_ACCESSIFY_ENV_VARIABLE_NAME == 'DISABLE_ACCESSIFY'
    assert module_0.MARK_MEMBER_RAISES_EXCEPTION == 'raise {exception_name}'
    assert module_0.ACCESS_WRAPPERS_NAMES == ('private_wrapper', 'protected_wrapper')
    var_1 = module_0.does_classes_contain_private_method(var_0, none_type_0)
    var_2 = module_1.walk(var_0)
    var_3 = module_0.does_classes_contain_private_method(var_1, var_2)

def test_case_7():
    var_0 = module_2.currentframe()
    var_1 = module_0.get_method_class_by_frame(var_0)
    assert module_0.COMMERCIAL_AT_SYMBOL == '@'
    assert module_0.DISABLE_ACCESSIFY_ENV_VARIABLE_NAME == 'DISABLE_ACCESSIFY'
    assert module_0.MARK_MEMBER_RAISES_EXCEPTION == 'raise {exception_name}'
    assert module_0.ACCESS_WRAPPERS_NAMES == ('private_wrapper', 'protected_wrapper')

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_2.currentframe()
    var_1 = module_2.Signature(return_annotation=var_0, __validate_parameters__=var_0)
    precedence_0 = module_1._Precedence.BXOR
    var_2 = module_0.get_class_members(var_1)
    assert module_0.COMMERCIAL_AT_SYMBOL == '@'
    assert module_0.DISABLE_ACCESSIFY_ENV_VARIABLE_NAME == 'DISABLE_ACCESSIFY'
    assert module_0.MARK_MEMBER_RAISES_EXCEPTION == 'raise {exception_name}'
    assert module_0.ACCESS_WRAPPERS_NAMES == ('private_wrapper', 'protected_wrapper')
    var_3 = var_0.__eq__(precedence_0)
    module_0.does_classes_contain_private_method(var_3, var_3)