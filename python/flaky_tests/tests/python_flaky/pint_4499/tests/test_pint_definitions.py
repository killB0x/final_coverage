# Automatically generated by Pynguin.
import pytest
import pint.definitions as module_0
import pint.util as module_1

def test_case_0():
    none_type_0 = None
    var_0 = module_0.numeric_parse(none_type_0)
    assert var_0 == 1

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'O>Xe+nAW)BfDS!:>UX'
    module_0.UnitDefinition(str_0, str_0, str_0, str_0)

def test_case_2():
    bool_0 = True
    prefix_definition_0 = module_0.PrefixDefinition(bool_0, bool_0, bool_0, bool_0)
    assert f'{type(prefix_definition_0).__module__}.{type(prefix_definition_0).__qualname__}' == 'pint.definitions.PrefixDefinition'
    assert f'{type(module_0.PrefixDefinition.from_string).__module__}.{type(module_0.PrefixDefinition.from_string).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b''
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = []
    units_container_0 = module_1.UnitsContainer(*list_1)
    var_0 = units_container_0.items()
    unit_definition_0 = module_0.UnitDefinition(var_0, var_0, units_container_0, units_container_0, is_base=units_container_0)
    assert f'{type(unit_definition_0).__module__}.{type(unit_definition_0).__qualname__}' == 'pint.definitions.UnitDefinition'
    assert unit_definition_0.reference is None
    assert f'{type(unit_definition_0.is_base).__module__}.{type(unit_definition_0.is_base).__qualname__}' == 'pint.util.UnitsContainer'
    assert len(unit_definition_0.is_base) == 0
    assert f'{type(module_0.UnitDefinition.from_string).__module__}.{type(module_0.UnitDefinition.from_string).__qualname__}' == 'builtins.method'
    unit_definition_0.add_aliases(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    none_type_0 = None
    prefix_definition_0 = module_0.PrefixDefinition(bool_0, bool_0, none_type_0, none_type_0)
    assert f'{type(prefix_definition_0).__module__}.{type(prefix_definition_0).__qualname__}' == 'pint.definitions.PrefixDefinition'
    assert f'{type(module_0.PrefixDefinition.from_string).__module__}.{type(module_0.PrefixDefinition.from_string).__qualname__}' == 'builtins.method'
    list_0 = []
    prefix_definition_0.add_aliases(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    module_0.PreprocessedDefinition()

def test_case_6():
    bool_0 = True
    not_numeric_0 = module_0._NotNumeric(bool_0)
    assert not_numeric_0.value is True
    alias_definition_0 = module_0.AliasDefinition(bool_0, bool_0)
    assert f'{type(alias_definition_0).__module__}.{type(alias_definition_0).__qualname__}' == 'pint.definitions.AliasDefinition'
    assert f'{type(module_0.AliasDefinition.from_string).__module__}.{type(module_0.AliasDefinition.from_string).__qualname__}' == 'builtins.method'
    var_0 = alias_definition_0.__str__()
    assert var_0 is True
    var_1 = alias_definition_0.__str__()
    assert var_1 is True

def test_case_7():
    none_type_0 = None
    var_0 = module_0.numeric_parse(none_type_0)
    assert var_0 == 1
    var_1 = var_0.__repr__()
    unit_definition_0 = module_0.UnitDefinition(none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(unit_definition_0).__module__}.{type(unit_definition_0).__qualname__}' == 'pint.definitions.UnitDefinition'
    assert unit_definition_0.reference is None
    assert unit_definition_0.is_base is False
    assert f'{type(module_0.UnitDefinition.from_string).__module__}.{type(module_0.UnitDefinition.from_string).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_0.numeric_parse(none_type_0)
    assert var_0 == 1
    dimension_definition_0 = module_0.DimensionDefinition(none_type_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(dimension_definition_0).__module__}.{type(dimension_definition_0).__qualname__}' == 'pint.definitions.DimensionDefinition'
    assert dimension_definition_0.reference is None
    assert dimension_definition_0.is_base is False
    assert f'{type(module_0.DimensionDefinition.from_string).__module__}.{type(module_0.DimensionDefinition.from_string).__qualname__}' == 'builtins.method'
    module_0.PreprocessedDefinition()

def test_case_9():
    bool_0 = True
    alias_definition_0 = module_0.AliasDefinition(bool_0, bool_0)
    assert f'{type(alias_definition_0).__module__}.{type(alias_definition_0).__qualname__}' == 'pint.definitions.AliasDefinition'
    assert f'{type(module_0.AliasDefinition.from_string).__module__}.{type(module_0.AliasDefinition.from_string).__qualname__}' == 'builtins.method'

def test_case_10():
    str_0 = 'test123 = 456 kg'
    with pytest.raises(module_0._NotNumeric):
        module_0.numeric_parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    not_numeric_0 = module_0._NotNumeric(none_type_0)
    assert not_numeric_0.value is None
    bytes_0 = b'\xbd\xebr\x84\xcaaE\xb5\n\xc6g\xc3\x9d"\xd1z\xff'
    definition_0 = module_0.Definition(none_type_0, bytes_0, bytes_0, not_numeric_0)
    assert f'{type(definition_0).__module__}.{type(definition_0).__qualname__}' == 'pint.definitions.Definition'
    assert f'{type(module_0.Definition.is_multiplicative).__module__}.{type(module_0.Definition.is_multiplicative).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Definition.from_string).__module__}.{type(module_0.Definition.from_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Definition.name).__module__}.{type(module_0.Definition.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Definition.symbol).__module__}.{type(module_0.Definition.symbol).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Definition.has_symbol).__module__}.{type(module_0.Definition.has_symbol).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Definition.aliases).__module__}.{type(module_0.Definition.aliases).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Definition.converter).__module__}.{type(module_0.Definition.converter).__qualname__}' == 'builtins.property'
    none_type_1 = None
    unit_definition_0 = module_0.UnitDefinition(bytes_0, bytes_0, bytes_0, bytes_0, none_type_1)
    assert f'{type(unit_definition_0).__module__}.{type(unit_definition_0).__qualname__}' == 'pint.definitions.UnitDefinition'
    assert unit_definition_0.reference is None
    assert unit_definition_0.is_base is False
    assert f'{type(module_0.UnitDefinition.from_string).__module__}.{type(module_0.UnitDefinition.from_string).__qualname__}' == 'builtins.method'
    var_0 = unit_definition_0.__str__()
    assert var_0 == b'\xbd\xebr\x84\xcaaE\xb5\n\xc6g\xc3\x9d"\xd1z\xff'
    var_1 = unit_definition_0.__str__()
    assert var_1 == b'\xbd\xebr\x84\xcaaE\xb5\n\xc6g\xc3\x9d"\xd1z\xff'
    unit_definition_0.add_aliases(*var_1)