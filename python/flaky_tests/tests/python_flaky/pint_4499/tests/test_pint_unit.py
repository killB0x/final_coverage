# Automatically generated by Pynguin.
import pytest
import pint.unit as module_0
import re as module_1
import encodings as module_2
import codecs as module_3

def test_case_0():
    str_0 = '(%s)'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'e/ uB8@X+E+}s\t>i>L'
    module_0.Unit(str_0)

def test_case_2():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__format__(str_0)
    assert var_0 == 'petadebye'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'a#e~>.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel(str_0)
    assert var_0 == 'a'
    var_1 = unit_0.__str__()
    assert var_1 == 'year'
    var_1.getstate()

def test_case_4():
    bool_0 = False
    var_0 = module_0.build_unit_class(bool_0)

def test_case_5():
    var_0 = module_1.purge()
    with pytest.raises(TypeError):
        module_0.Unit(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ''
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel()
    assert var_0 == 'dimensionless'
    var_1 = unit_0.__int__()
    assert var_1 == 1
    var_2 = unit_0.compatible_units()
    var_3 = module_0.build_unit_class(var_1)
    var_1.<lambda>(var_2)

def test_case_7():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__truediv__(unit_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.unit.Unit'
    var_1 = unit_0.format_babel()
    assert var_1 == 'petadebye'
    var_2 = str_0.__str__()
    none_type_0 = None
    var_3 = unit_0.__str__()
    assert var_3 == 'petadebye'
    with pytest.raises(ValueError):
        unit_0.from_(none_type_0)

def test_case_8():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel()
    assert var_0 == 'petadebye'
    var_1 = unit_0.__format__(str_0)
    assert var_1 == 'petadebye'
    with pytest.raises(ValueError):
        unit_0.from_(var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.compatible_units()
    var_1 = unit_0.__mul__(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_1) == 3
    var_2 = unit_0.__ne__(str_0)
    var_3 = unit_0.from_(var_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_3) == 3
    var_4 = var_2.__str__()
    unit_0.compatible_units(*var_3)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__rtruediv__(str_0)
    var_1 = unit_0.__array_ufunc__(var_0, str_0)
    var_2 = unit_0.__mul__(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_2) == 3
    var_0.add_aliases()

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel()
    assert var_0 == 'petadebye'
    var_1 = unit_0.m_from(unit_0, unit_0)
    assert var_1 == 1
    var_2 = unit_0.__mul__(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_2) == 3
    var_3 = str_0.__contains__(str_0)
    var_3.decode(var_3)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'a#e~>Le.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    unit_0.is_compatible_with(str_0, *str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__mul__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_0) == 3
    var_1 = var_0.__str__()
    assert var_1 == 'PD. petadebye'
    none_type_0 = None
    var_0.compare(var_0, none_type_0)

def test_case_14():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__mul__(unit_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.unit.Unit'
    var_1 = var_0.__str__()
    assert var_1 == 'petadebye ** 2'
    with pytest.raises(TypeError):
        unit_0.__pow__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__mul__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_0) == 3
    var_1 = var_0.__str__()
    assert var_1 == 'PD. petadebye'
    var_2 = var_1.__contains__(var_1)
    unit_0.__float__()

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.compatible_units()
    unit_0.compatible_units(*var_0)

def test_case_17():
    str_0 = 'ae~.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = module_2.normalize_encoding(str_0)
    var_1 = unit_0.__array_ufunc__(var_0, var_0)
    float_0 = 2189.8
    var_2 = unit_0.__eq__(float_0)
    assert var_2 is False
    var_3 = unit_0.__rtruediv__(var_0)
    var_4 = unit_0.compatible_units()
    var_5 = unit_0.__mul__(str_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_5) == 4
    var_6 = var_1.__ne__(var_1)
    var_7 = unit_0.format_babel()
    assert var_7 == 'attoelementary_charge'
    var_8 = unit_0.__format__(str_0)
    assert var_8 == 'ae'
    float_1 = -2342.3
    var_9 = var_4.__eq__(float_1)
    var_10 = float_0.__str__()
    var_11 = var_4.__str__()
    var_12 = unit_0.__str__()
    assert var_12 == 'attoelementary_charge'
    var_13 = unit_0.from_(var_5)
    assert f'{type(var_13).__module__}.{type(var_13).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_13) == 4
    var_14 = unit_0.is_compatible_with(str_0)
    assert var_14 is True
    with pytest.raises(TypeError):
        unit_0.__pow__(unit_0)

def test_case_18():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.compatible_units()
    var_1 = unit_0.__mul__(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_1) == 3
    var_2 = unit_0.__mul__(var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_2) == 3
    var_3 = var_2.__str__()
    assert var_3 == 'PD. petadebye ** 2'
    with pytest.raises(ValueError):
        unit_0.from_(str_0)

def test_case_19():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__rtruediv__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__reduce__()
    var_1 = var_0.__contains__(unit_0)
    unit_0.__rtruediv__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    unit_0.__deepcopy__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'R'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__eq__(str_0)
    assert var_0 is False
    var_1 = unit_0.__truediv__(unit_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.unit.Unit'
    unit_0.__mul__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'a#e~>Le.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__bytes__()
    assert var_0 == b'year'
    var_1 = unit_0.__format__(str_0)
    assert var_1 == 'a'
    unit_0.is_compatible_with(str_0, *var_1)

def test_case_24():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__mul__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_0) == 3
    var_1 = var_0.__str__()
    assert var_1 == 'PD. petadebye'
    var_2 = unit_0.is_compatible_with(str_0)
    assert var_2 is True
    var_3 = var_2.__pow__(var_1)
    var_4 = unit_0.compare(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__copy__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.unit.Unit'
    var_1 = var_0.__str__()
    assert var_1 == 'petadebye'
    var_2 = unit_0.is_compatible_with(str_0)
    assert var_2 is True
    var_1.__pow__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    unit_0.__truediv__(str_0)

def test_case_27():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = str_0.__str__()
    with pytest.raises(TypeError):
        unit_0.__pow__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = 'a#e~>Le.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__repr__()
    assert var_0 == "<Unit('year')>"
    var_1 = unit_0.__format__(str_0)
    assert var_1 == 'a'
    unit_0.is_compatible_with(str_0, *var_1)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__truediv__(unit_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.unit.Unit'
    var_1 = var_0.__mul__(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.unit.Unit'
    var_2 = unit_0.__mul__(var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pint.unit.Unit'
    var_3 = var_1.__float__()
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = var_0.__ne__(unit_0)
    none_type_0 = None
    module_3.getwriter(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__eq__(unit_0)
    assert var_0 is True
    unit_0.compare(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__str__()
    assert var_0 == 'petadebye'
    unit_0.compare(unit_0, str_0)

def test_case_32():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__rtruediv__(str_0)
    var_1 = unit_0.format_babel(str_0)
    assert var_1 == 'petadebye'

def test_case_33():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel()
    assert var_0 == 'petadebye'
    var_1 = unit_0.__format__(str_0)
    assert var_1 == 'petadebye'
    var_2 = unit_0.is_compatible_with(str_0)
    assert var_2 is True

def test_case_34():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.from_(unit_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    var_1 = unit_0.is_compatible_with(str_0)
    assert var_1 is True

def test_case_35():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__str__()
    assert var_0 == 'petadebye'
    var_1 = unit_0.__mul__(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_1) == 3
    var_2 = unit_0.format_babel()
    assert var_2 == 'petadebye'
    var_3 = unit_0.__format__(str_0)
    assert var_3 == 'petadebye'
    var_4 = var_1.__repr__()
    assert var_4 == "<Quantity(PD., 'petadebye')>"
    var_5 = unit_0.from_(var_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_5) == 3
    var_6 = unit_0.is_compatible_with(str_0)
    assert var_6 is True

def test_case_36():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.is_compatible_with(str_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = unit_0.__array_ufunc__(str_0, none_type_0)
    unit_1 = module_0.Unit(unit_0)
    var_1 = unit_0.__str__()
    assert var_1 == 'petadebye'
    unit_0.is_compatible_with(var_0, *var_1)

@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    unit_0.__complex__()

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__mul__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_0) == 3
    var_1 = var_0.__str__()
    assert var_1 == 'PD. petadebye'
    none_type_0 = None
    var_2 = unit_0.is_compatible_with(var_0)
    assert var_2 is True
    var_3 = var_2.__pow__(str_0)
    var_2.compare(none_type_0, unit_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel()
    assert var_0 == 'petadebye'
    var_1 = unit_0.compatible_units()
    var_2 = unit_0.__mul__(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_2) == 3
    var_3 = var_2.__str__()
    assert var_3 == 'PD. petadebye'
    var_4 = unit_0.__ne__(var_2)
    assert var_4 is True
    var_2.reset()

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = 'a#e~>.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel(str_0)
    assert var_0 == 'a'
    unit_0.getstate()

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.is_compatible_with(unit_0)
    assert var_0 is False
    var_1 = unit_0.__mul__(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_1) == 3
    var_2 = var_1.__str__()
    assert var_2 == 'PD. petadebye'
    var_1.__truediv__(unit_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.compatible_units()
    var_1 = unit_0.__mul__(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_1) == 3
    var_2 = var_1.__repr__()
    assert var_2 == "<Quantity(PD., 'petadebye')>"
    var_3 = unit_0.is_compatible_with(str_0)
    assert var_3 is True
    var_4 = unit_0.__pow__(var_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'pint.unit.Unit'
    var_5 = var_1.__iter__()
    var_6 = var_5.__ne__(var_1)
    var_2.__next__()

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = 'PD.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__rtruediv__(str_0)
    var_1 = unit_0.compatible_units()
    var_2 = unit_0.__mul__(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_2) == 3
    var_3 = unit_0.format_babel()
    assert var_3 == 'petadebye'
    var_4 = unit_0.__copy__()
    var_5 = var_2.__repr__()
    assert var_5 == "<Quantity(PD., 'petadebye')>"
    none_type_0 = None
    var_6 = unit_0.__str__()
    assert var_6 == 'petadebye'
    unit_0.from_(var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = 'a#e~>.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    stream_writer_0 = module_3.StreamWriter(unit_0)
    var_0 = unit_0.__format__(str_0)
    assert var_0 == 'a'
    stream_writer_0.__truediv__(stream_writer_0)

def test_case_46():
    str_0 = 'a#e~>LeH.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__format__(str_0)
    assert var_0 == '\\[a\\]'

def test_case_47():
    str_0 = 'a#e~>Le.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.__format__(str_0)
    assert var_0 == 'a'

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = 'aB~.'
    unit_0 = module_0.Unit(str_0)
    assert f'{type(unit_0).__module__}.{type(unit_0).__qualname__}' == 'pint.unit.Unit'
    assert module_0.Unit.default_format == ''
    assert f'{type(module_0.Unit.debug_used).__module__}.{type(module_0.Unit.debug_used).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionless).__module__}.{type(module_0.Unit.dimensionless).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.dimensionality).__module__}.{type(module_0.Unit.dimensionality).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Unit.systems).__module__}.{type(module_0.Unit.systems).__qualname__}' == 'builtins.property'
    var_0 = unit_0.format_babel(str_0)
    assert var_0 == ''
    var_1 = module_0.build_unit_class(unit_0)
    var_2 = unit_0.__array_ufunc__(unit_0, unit_0)
    var_3 = unit_0.__rtruediv__(var_2)
    var_4 = unit_0.compatible_units()
    var_5 = unit_0.__array_ufunc__(var_3, str_0)
    var_6 = unit_0.__mul__(str_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_6) == 4
    var_7 = unit_0.format_babel()
    assert var_7 == 'attobyte'
    var_8 = unit_0.__format__(str_0)
    assert var_8 == 'aB'
    var_9 = var_2.__repr__()
    var_10 = var_4.__eq__(var_5)
    var_11 = unit_0.is_compatible_with(var_4)
    assert var_11 is True
    var_12 = var_9.__str__()
    var_13 = var_2.__eq__(var_6)
    var_14 = unit_0.from_(var_6)
    assert f'{type(var_14).__module__}.{type(var_14).__qualname__}' == 'pint.quantity.build_quantity_class.<locals>.Quantity'
    assert len(var_14) == 4
    unit_0.is_compatible_with(var_1, *var_6)