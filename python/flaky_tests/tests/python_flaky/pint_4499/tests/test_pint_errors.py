# Automatically generated by Pynguin.
import pytest
import builtins as module_0
import pint.errors as module_1

def test_case_0():
    bool_0 = False
    user_warning_0 = module_0.UserWarning()
    dimensionality_error_0 = module_1.DimensionalityError(bool_0, bool_0, user_warning_0)
    assert dimensionality_error_0.units1 is False
    assert dimensionality_error_0.units2 is False
    assert f'{type(dimensionality_error_0.dim1).__module__}.{type(dimensionality_error_0.dim1).__qualname__}' == 'builtins.UserWarning'
    assert dimensionality_error_0.dim2 == ''
    assert dimensionality_error_0.extra_msg == ''
    var_0 = dimensionality_error_0.__str__()
    assert var_0 == "Cannot convert from 'False' () to 'False' ()"
    redefinition_error_0 = module_1.RedefinitionError(var_0, bool_0, filename=var_0)
    assert f'{type(redefinition_error_0).__module__}.{type(redefinition_error_0).__qualname__}' == 'pint.errors.RedefinitionError'
    assert redefinition_error_0.filename == "Cannot convert from 'False' () to 'False' ()"
    assert redefinition_error_0.lineno is None
    var_1 = redefinition_error_0.__str__()
    assert var_1 == "While opening Cannot convert from 'False' () to 'False' (): Cannot redefine 'Cannot convert from 'False' () to 'False' ()' (False)"
    pint_type_error_0 = module_1.PintTypeError()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'Kx'
    definition_syntax_error_0 = module_1.DefinitionSyntaxError(str_0)
    var_0 = definition_syntax_error_0.__str__()
    assert var_0 == 'Kx'
    var_0.__reduce__()

def test_case_2():
    undefined_unit_error_0 = module_1.UndefinedUnitError()
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'

def test_case_3():
    undefined_unit_error_0 = module_1.UndefinedUnitError()
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    var_0 = undefined_unit_error_0.__str__()
    assert var_0 == '() are not defined in the unit registry'
    undefined_unit_error_1 = module_1.UndefinedUnitError()

def test_case_4():
    bytes_0 = b'(\x874\x16\x00\x884'
    redefinition_error_0 = module_1.RedefinitionError(bytes_0, bytes_0, lineno=bytes_0)
    assert f'{type(redefinition_error_0).__module__}.{type(redefinition_error_0).__qualname__}' == 'pint.errors.RedefinitionError'
    assert redefinition_error_0.filename is None
    assert redefinition_error_0.lineno == b'(\x874\x16\x00\x884'
    var_0 = redefinition_error_0.__str__()
    assert var_0 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    dimensionality_error_0 = module_1.DimensionalityError(redefinition_error_0, var_0)
    assert f'{type(dimensionality_error_0.units1).__module__}.{type(dimensionality_error_0.units1).__qualname__}' == 'pint.errors.RedefinitionError'
    assert dimensionality_error_0.units2 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    assert dimensionality_error_0.dim1 == ''
    assert dimensionality_error_0.dim2 == ''
    assert dimensionality_error_0.extra_msg == ''
    var_1 = redefinition_error_0.__str__()
    assert var_1 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    var_2 = dimensionality_error_0.__str__()
    assert var_2 == "Cannot convert from 'In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')' to 'In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')'"
    var_3 = redefinition_error_0.__str__()
    assert var_3 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    var_4 = dimensionality_error_0.__reduce__()
    var_5 = redefinition_error_0.__str__()
    assert var_5 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    definition_syntax_error_0 = module_1.DefinitionSyntaxError(var_5)
    var_6 = var_1.__str__()
    assert var_6 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    var_7 = var_0.__str__()
    assert var_7 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    var_8 = var_7.__str__()
    assert var_8 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    var_9 = var_0.__str__()
    assert var_9 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"
    var_10 = var_6.__str__()
    assert var_10 == "In line b'(\\x874\\x16\\x00\\x884': Cannot redefine 'b'(\\x874\\x16\\x00\\x884'' (b'(\\x874\\x16\\x00\\x884')"

@pytest.mark.xfail(strict=True)
def test_case_5():
    undefined_unit_error_0 = module_1.UndefinedUnitError()
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    list_0 = [undefined_unit_error_0, undefined_unit_error_0, undefined_unit_error_0, undefined_unit_error_0]
    offset_unit_calculus_error_0 = module_1.OffsetUnitCalculusError(*list_0)
    var_0 = offset_unit_calculus_error_0.__str__()
    assert var_0 == 'Ambiguous operation with offset unit (() are not defined in the unit registry, () are not defined in the unit registry, () are not defined in the unit registry, () are not defined in the unit registry). See https://pint.readthedocs.io/en/latest/nonmult.html for guidance.'
    var_1 = undefined_unit_error_0.__str__()
    assert var_1 == '() are not defined in the unit registry'
    definition_syntax_error_0 = module_1.DefinitionSyntaxError(var_1, filename=var_1)
    assert f'{type(definition_syntax_error_0).__module__}.{type(definition_syntax_error_0).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert definition_syntax_error_0.filename == '() are not defined in the unit registry'
    assert definition_syntax_error_0.lineno is None
    redefinition_error_0 = module_1.RedefinitionError(list_0, list_0)
    assert redefinition_error_0.filename is None
    assert redefinition_error_0.lineno is None
    pint_type_error_0 = module_1.PintTypeError()
    var_1.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    offset_unit_calculus_error_0 = module_1.OffsetUnitCalculusError(**dict_0)
    var_0 = offset_unit_calculus_error_0.__str__()
    assert var_0 == 'Ambiguous operation with offset unit (). See https://pint.readthedocs.io/en/latest/nonmult.html for guidance.'
    var_0.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -1960.4798
    definition_syntax_error_0 = module_1.DefinitionSyntaxError(float_0)
    var_0 = definition_syntax_error_0.__str__()
    assert var_0 == '-1960.4798'
    dimensionality_error_0 = module_1.DimensionalityError(definition_syntax_error_0, definition_syntax_error_0, extra_msg=float_0)
    assert f'{type(dimensionality_error_0).__module__}.{type(dimensionality_error_0).__qualname__}' == 'pint.errors.DimensionalityError'
    assert f'{type(dimensionality_error_0.units1).__module__}.{type(dimensionality_error_0.units1).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert f'{type(dimensionality_error_0.units2).__module__}.{type(dimensionality_error_0.units2).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert dimensionality_error_0.dim1 == ''
    assert dimensionality_error_0.dim2 == ''
    assert dimensionality_error_0.extra_msg == pytest.approx(-1960.4798, abs=0.01, rel=0.01)
    var_1 = definition_syntax_error_0.__reduce__()
    var_2 = definition_syntax_error_0.__str__()
    assert var_2 == '-1960.4798'
    definition_syntax_error_1 = module_1.DefinitionSyntaxError(var_1)
    var_3 = definition_syntax_error_1.__str__()
    assert var_3 == "(<class 'pint.errors.DefinitionSyntaxError'>, (-1960.4798,), {'filename': None, 'lineno': None})"
    var_4 = var_3.__str__()
    assert var_4 == "(<class 'pint.errors.DefinitionSyntaxError'>, (-1960.4798,), {'filename': None, 'lineno': None})"
    var_4.__reduce__()

def test_case_8():
    undefined_unit_error_0 = module_1.UndefinedUnitError()
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    var_0 = module_1.RedefinitionError(undefined_unit_error_0, undefined_unit_error_0, filename=undefined_unit_error_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.errors.RedefinitionError'
    assert f'{type(var_0.filename).__module__}.{type(var_0.filename).__qualname__}' == 'pint.errors.UndefinedUnitError'
    assert var_0.lineno is None
    pint_type_error_0 = module_1.PintTypeError()
    pint_type_error_1 = module_1.PintTypeError()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    redefinition_error_0 = module_1.RedefinitionError(bool_0, bool_0, filename=bool_0)
    assert f'{type(redefinition_error_0).__module__}.{type(redefinition_error_0).__qualname__}' == 'pint.errors.RedefinitionError'
    assert redefinition_error_0.filename is False
    assert redefinition_error_0.lineno is None
    undefined_unit_error_0 = module_1.UndefinedUnitError()
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    var_0 = redefinition_error_0.__str__()
    assert var_0 == "Cannot redefine 'False' (False)"
    var_1 = redefinition_error_0.__str__()
    assert var_1 == "Cannot redefine 'False' (False)"
    var_1.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    redefinition_error_0 = module_1.RedefinitionError(bool_0, bool_0)
    assert redefinition_error_0.filename is None
    assert redefinition_error_0.lineno is None
    var_0 = redefinition_error_0.__reduce__()
    var_1 = var_0.__str__()
    assert var_1 == "(<class 'pint.errors.RedefinitionError'>, (False, False), {'filename': None, 'lineno': None})"
    var_2 = var_1.__str__()
    assert var_2 == "(<class 'pint.errors.RedefinitionError'>, (False, False), {'filename': None, 'lineno': None})"
    var_3 = var_2.__str__()
    assert var_3 == "(<class 'pint.errors.RedefinitionError'>, (False, False), {'filename': None, 'lineno': None})"
    var_3.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    complex_0 = (-1637.984605-3114.48618j)
    str_0 = 'b%'
    str_1 = '_flA!RA:Xiwr+'
    dict_0 = {str_0: complex_0, str_0: str_0, str_1: str_0}
    definition_syntax_error_0 = module_1.DefinitionSyntaxError(complex_0, filename=complex_0, lineno=dict_0)
    assert f'{type(definition_syntax_error_0).__module__}.{type(definition_syntax_error_0).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert definition_syntax_error_0.filename == (-1637.984605-3114.48618j)
    assert definition_syntax_error_0.lineno == {'b%': 'b%', '_flA!RA:Xiwr+': 'b%'}
    var_0 = definition_syntax_error_0.__str__()
    assert var_0 == "While opening (-1637.984605-3114.48618j), in line {'b%': 'b%', '_flA!RA:Xiwr+': 'b%'}: (-1637.984605-3114.48618j)"
    var_0.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_12():
    undefined_unit_error_0 = module_1.UndefinedUnitError()
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    definition_syntax_error_0 = module_1.DefinitionSyntaxError(undefined_unit_error_0, filename=undefined_unit_error_0)
    assert f'{type(definition_syntax_error_0).__module__}.{type(definition_syntax_error_0).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert f'{type(definition_syntax_error_0.filename).__module__}.{type(definition_syntax_error_0.filename).__qualname__}' == 'pint.errors.UndefinedUnitError'
    assert definition_syntax_error_0.lineno is None
    var_0 = module_1.DimensionalityError(definition_syntax_error_0, definition_syntax_error_0, dim2=definition_syntax_error_0, extra_msg=definition_syntax_error_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pint.errors.DimensionalityError'
    assert f'{type(var_0.units1).__module__}.{type(var_0.units1).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert f'{type(var_0.units2).__module__}.{type(var_0.units2).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert var_0.dim1 == ''
    assert f'{type(var_0.dim2).__module__}.{type(var_0.dim2).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    assert f'{type(var_0.extra_msg).__module__}.{type(var_0.extra_msg).__qualname__}' == 'pint.errors.DefinitionSyntaxError'
    var_1 = undefined_unit_error_0.__str__()
    assert var_1 == '() are not defined in the unit registry'
    unit_stripped_warning_0 = var_1.__str__()
    assert unit_stripped_warning_0 == '() are not defined in the unit registry'
    var_2 = var_0.__str__()
    assert var_2 == "Cannot convert from 'While opening () are not defined in the unit registry: () are not defined in the unit registry' () to 'While opening () are not defined in the unit registry: () are not defined in the unit registry' (While opening () are not defined in the unit registry: () are not defined in the unit registry)While opening () are not defined in the unit registry: () are not defined in the unit registry"
    var_3 = var_1.__str__()
    assert var_3 == '() are not defined in the unit registry'
    var_4 = var_1.__str__()
    assert var_4 == '() are not defined in the unit registry'
    var_5 = var_1.__str__()
    assert var_5 == '() are not defined in the unit registry'
    var_6 = var_3.__str__()
    assert var_6 == '() are not defined in the unit registry'
    var_1.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.UndefinedUnitError(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    dimensionality_error_0 = module_1.DimensionalityError(list_0, list_0, dim2=none_type_0)
    assert f'{type(dimensionality_error_0).__module__}.{type(dimensionality_error_0).__qualname__}' == 'pint.errors.DimensionalityError'
    assert dimensionality_error_0.units1 == [None, None]
    assert dimensionality_error_0.units2 == [None, None]
    assert dimensionality_error_0.dim1 == ''
    assert dimensionality_error_0.dim2 is None
    assert dimensionality_error_0.extra_msg == ''
    redefinition_error_0 = module_1.RedefinitionError(list_0, list_0)
    assert redefinition_error_0.filename is None
    assert redefinition_error_0.lineno is None
    var_0 = redefinition_error_0.__reduce__()
    var_1 = redefinition_error_0.__str__()
    assert var_1 == "Cannot redefine '[None, None]' ([None, None])"
    var_2 = var_1.__str__()
    assert var_2 == "Cannot redefine '[None, None]' ([None, None])"
    var_3 = var_0.__str__()
    undefined_unit_error_0 = module_1.UndefinedUnitError(*list_0)
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    dimensionality_error_1 = module_1.DimensionalityError(var_2, var_1, extra_msg=none_type_0)
    assert dimensionality_error_1.units1 == "Cannot redefine '[None, None]' ([None, None])"
    assert dimensionality_error_1.units2 == "Cannot redefine '[None, None]' ([None, None])"
    assert dimensionality_error_1.dim1 == ''
    assert dimensionality_error_1.dim2 == ''
    var_4 = undefined_unit_error_0.__str__()
    assert var_4 == '(None, None) are not defined in the unit registry'
    undefined_unit_error_1 = module_1.UndefinedUnitError()
    list_1 = [var_2]
    undefined_unit_error_2 = module_1.UndefinedUnitError(*list_1)
    assert f'{type(undefined_unit_error_2).__module__}.{type(undefined_unit_error_2).__qualname__}' == 'pint.errors.UndefinedUnitError'
    var_4.__reduce__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    dimensionality_error_0 = module_1.DimensionalityError(list_0, list_0, dim2=none_type_0)
    assert f'{type(dimensionality_error_0).__module__}.{type(dimensionality_error_0).__qualname__}' == 'pint.errors.DimensionalityError'
    assert dimensionality_error_0.units1 == [None, None]
    assert dimensionality_error_0.units2 == [None, None]
    assert dimensionality_error_0.dim1 == ''
    assert dimensionality_error_0.dim2 is None
    assert dimensionality_error_0.extra_msg == ''
    redefinition_error_0 = module_1.RedefinitionError(list_0, list_0)
    assert redefinition_error_0.filename is None
    assert redefinition_error_0.lineno is None
    var_0 = redefinition_error_0.__reduce__()
    var_1 = redefinition_error_0.__str__()
    assert var_1 == "Cannot redefine '[None, None]' ([None, None])"
    var_2 = var_0.__str__()
    undefined_unit_error_0 = module_1.UndefinedUnitError(*list_0)
    assert f'{type(undefined_unit_error_0).__module__}.{type(undefined_unit_error_0).__qualname__}' == 'pint.errors.UndefinedUnitError'
    dimensionality_error_1 = module_1.DimensionalityError(var_2, var_1, extra_msg=none_type_0)
    assert dimensionality_error_1.units2 == "Cannot redefine '[None, None]' ([None, None])"
    assert dimensionality_error_1.dim1 == ''
    assert dimensionality_error_1.dim2 == ''
    var_3 = undefined_unit_error_0.__str__()
    assert var_3 == '(None, None) are not defined in the unit registry'
    undefined_unit_error_1 = module_1.UndefinedUnitError()
    var_4 = dimensionality_error_0.__str__()
    assert var_4 == "Cannot convert from '[None, None]' to '[None, None]'"
    list_1 = [var_1]
    undefined_unit_error_2 = module_1.UndefinedUnitError(*list_1)
    assert f'{type(undefined_unit_error_2).__module__}.{type(undefined_unit_error_2).__qualname__}' == 'pint.errors.UndefinedUnitError'
    var_5 = undefined_unit_error_2.__str__()
    assert var_5 == "'Cannot redefine '[None, None]' ([None, None])' is not defined in the unit registry"
    var_6 = var_3.__str__()
    assert var_6 == '(None, None) are not defined in the unit registry'
    var_7 = undefined_unit_error_1.__str__()
    assert var_7 == '() are not defined in the unit registry'
    var_8 = var_7.__str__()
    assert var_8 == '() are not defined in the unit registry'
    var_9 = var_0.__str__()
    var_10 = var_5.__str__()
    assert var_10 == "'Cannot redefine '[None, None]' ([None, None])' is not defined in the unit registry"
    var_11 = var_2.__str__()
    var_12 = var_11.__str__()
    var_13 = dimensionality_error_1.__reduce__()
    dimensionality_error_2 = module_1.DimensionalityError(var_10, dimensionality_error_0)
    assert dimensionality_error_2.units1 == "'Cannot redefine '[None, None]' ([None, None])' is not defined in the unit registry"
    assert dimensionality_error_2.dim1 == ''
    assert dimensionality_error_2.dim2 == ''
    assert dimensionality_error_2.extra_msg == ''
    var_14 = var_3.__str__()
    assert var_14 == '(None, None) are not defined in the unit registry'
    var_12.__reduce__()