# Automatically generated by Pynguin.
import pytest
import pint.pint_eval as module_0
import builtins as module_1
import token as module_2
import pint.errors as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'6U\xc8*'
    eval_tree_node_0 = module_0.EvalTreeNode(bytes_0)
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = eval_tree_node_0.to_string()
    assert var_0 == 85
    module_0.build_eval_tree(list_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 212
    var_0 = module_0.EvalTreeNode(int_0, int_0, int_0)
    var_0.evaluate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    eval_tree_node_0 = module_0.EvalTreeNode(bool_0, bool_0)
    list_0 = [bool_0, eval_tree_node_0]
    list_1 = [list_0, eval_tree_node_0, list_0, bool_0, bool_0]
    var_0 = module_0.build_eval_tree(list_1, bool_0)
    eval_tree_node_0.evaluate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    eval_tree_node_0 = module_0.EvalTreeNode(bool_0, bool_0)
    list_0 = [bool_0, eval_tree_node_0]
    list_1 = [list_0, eval_tree_node_0, list_0, bool_0, eval_tree_node_0, bool_0, bool_0]
    var_0 = module_0.build_eval_tree(list_1, bool_0)
    eval_tree_node_0.evaluate(list_1, list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -444
    module_0.build_eval_tree(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    module_0.build_eval_tree(bool_0, depth=bool_0)

def test_case_6():
    tuple_0 = ()
    eval_tree_node_0 = module_0.EvalTreeNode(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    eval_tree_node_0 = module_0.EvalTreeNode(bool_0, set_0)
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0, list_0, bool_0, bool_0]
    var_0 = module_0.build_eval_tree(list_1, prev_op=list_1)
    eval_tree_node_0.to_string()

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    eval_tree_node_0 = module_0.EvalTreeNode(bool_0, bool_0)
    list_0 = [bool_0, eval_tree_node_0, eval_tree_node_0]
    list_1 = [list_0, eval_tree_node_0, list_0, bool_0, bool_0]
    var_0 = module_0.build_eval_tree(list_1, bool_0)
    eval_tree_node_0.evaluate(bool_0, un_op=eval_tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '\rKO_zj.'
    none_type_0 = None
    eval_tree_node_0 = module_0.EvalTreeNode(str_0, right=none_type_0)
    eval_tree_node_1 = module_0.EvalTreeNode(eval_tree_node_0, eval_tree_node_0, eval_tree_node_0)
    eval_tree_node_1.to_string()

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    list_0 = [none_type_0]
    syntax_error_0 = module_1.SyntaxError(*list_0)
    var_0 = module_2.ISEOF(syntax_error_0)
    bytes_0 = b'S|/\xe7\xd0t'
    eval_tree_node_0 = module_0.EvalTreeNode(bytes_0, right=bytes_0)
    eval_tree_node_0.evaluate(var_0, un_op=list_0)

def test_case_11():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    eval_tree_node_0 = module_0.EvalTreeNode(list_1, list_0)
    var_0 = module_0.build_eval_tree(list_1, bool_0)
    with pytest.raises(module_3.DefinitionSyntaxError):
        eval_tree_node_0.evaluate(bool_0, un_op=var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    exception_0 = module_1.Exception()
    module_0.build_eval_tree(exception_0, prev_op=exception_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'pK8\\oj.'
    str_1 = '`U\x0bJsjHDUpg(sfj2'
    eval_tree_node_0 = module_0.EvalTreeNode(str_0, str_0)
    var_0 = module_2.ISEOF(str_0)
    var_1 = module_2.ISEOF(str_1)
    eval_tree_node_0.evaluate(str_1, un_op=str_0)

def test_case_14():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    none_type_0 = None
    eval_tree_node_0 = module_0.EvalTreeNode(none_type_0, list_1, list_0)
    var_0 = module_0.build_eval_tree(list_1, bool_0)
    with pytest.raises(module_3.DefinitionSyntaxError):
        eval_tree_node_0.evaluate(bool_0, un_op=var_0)

def test_case_15():
    bytes_0 = b'4V\x06\xa0\x10\x03'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    with pytest.raises(module_3.DefinitionSyntaxError):
        module_0.build_eval_tree(list_0)

def test_case_16():
    bytes_0 = b'\x01 \xd6'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    with pytest.raises(module_3.DefinitionSyntaxError):
        module_0.build_eval_tree(list_0)

def test_case_17():
    bytes_0 = b'\x00\x94y\xdc'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.build_eval_tree(list_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'4V\x069,\x03'
    eval_tree_node_0 = module_0.EvalTreeNode(bytes_0)
    var_0 = eval_tree_node_0.to_string()
    assert var_0 == 86
    var_1 = module_0.EvalTreeNode(eval_tree_node_0, right=bytes_0)
    var_1.to_string()

def test_case_19():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, bool_0, bool_0, list_0, list_0, list_0, bool_0, bool_0]
    var_0 = module_0.build_eval_tree(list_1, list_0, prev_op=list_0)

def test_case_20():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bytes_0 = b'6\x0c\xad\xe2<'
    list_0 = [bytes_0, tuple_0, bool_0, tuple_0, bytes_0, bytes_0]
    list_1 = [bytes_0, list_0, tuple_0, bytes_0]
    var_0 = module_0.build_eval_tree(list_1, bytes_0, prev_op=list_1)

def test_case_21():
    bytes_0 = b'6\xda\x94\x16'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    with pytest.raises(module_3.DefinitionSyntaxError):
        module_0.build_eval_tree(list_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'6\x94\x16'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.build_eval_tree(list_0, bytes_0)

def test_case_23():
    bytes_0 = b'\x02\x9e'
    list_0 = [bytes_0]
    with pytest.raises(module_3.DefinitionSyntaxError):
        module_0.build_eval_tree(list_0, list_0, prev_op=list_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    bytes_0 = b'6\x0c\xad\xe2<'
    list_0 = [bytes_0, tuple_0, bytes_0, tuple_0, tuple_0, bytes_0, bytes_0, tuple_0, bytes_0, bytes_0, tuple_0]
    module_0.build_eval_tree(list_0, bytes_0)