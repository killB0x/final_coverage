# Automatically generated by Pynguin.
import pytest
import peeweext.validation as module_0
import re as module_1
import locale as module_2

def test_case_0():
    exclusion_validator_0 = module_0.ExclusionValidator()
    assert f'{type(exclusion_validator_0).__module__}.{type(exclusion_validator_0).__qualname__}' == 'peeweext.validation.ExclusionValidator'
    var_0 = exclusion_validator_0.validate(exclusion_validator_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    inclusion_validator_0 = module_0.InclusionValidator()
    assert f'{type(inclusion_validator_0).__module__}.{type(inclusion_validator_0).__qualname__}' == 'peeweext.validation.InclusionValidator'
    inclusion_validator_0.validate(inclusion_validator_0)

def test_case_2():
    str_0 = '/'
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == '/'
    assert u_r_l_validator_0.schemes == '/'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    with pytest.raises(module_0.ValidationError):
        u_r_l_validator_0.validate(str_0)

def test_case_3():
    var_0 = module_1.purge()
    var_1 = var_0.__str__()
    u_r_l_validator_0 = module_0.URLValidator(null=var_1)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == 'None'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']

def test_case_4():
    str_0 = ';'
    u_r_l_validator_0 = module_0.URLValidator(str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null is False
    assert u_r_l_validator_0.schemes == ';'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    with pytest.raises(module_0.ValidationError):
        u_r_l_validator_0.validate(str_0)

def test_case_5():
    validates_0 = module_0.validates()
    assert f'{type(validates_0).__module__}.{type(validates_0).__qualname__}' == 'peeweext.validation.validates'
    assert validates_0.validators == []
    var_0 = validates_0.__call__(validates_0)

def test_case_6():
    base_validator_0 = module_0.BaseValidator()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ''
    u_r_l_validator_0 = module_0.URLValidator(str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null is False
    assert u_r_l_validator_0.schemes == ''
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    u_r_l_validator_0.__call__(str_0)

def test_case_8():
    inclusion_validator_0 = module_0.InclusionValidator()
    assert f'{type(inclusion_validator_0).__module__}.{type(inclusion_validator_0).__qualname__}' == 'peeweext.validation.InclusionValidator'

def test_case_9():
    str_0 = ';'
    regex_validator_0 = module_0.RegexValidator(str_0)
    assert f'{type(regex_validator_0).__module__}.{type(regex_validator_0).__qualname__}' == 'peeweext.validation.RegexValidator'
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == ';'
    assert u_r_l_validator_0.schemes == ';'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    with pytest.raises(module_0.ValidationError):
        u_r_l_validator_0.validate(str_0)

def test_case_10():
    str_0 = '2'
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == '2'
    assert u_r_l_validator_0.schemes == '2'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    length_validator_0 = module_0.LengthValidator(u_r_l_validator_0, u_r_l_validator_0)
    assert f'{type(length_validator_0).__module__}.{type(length_validator_0).__qualname__}' == 'peeweext.validation.LengthValidator'
    with pytest.raises(module_0.ValidationError):
        u_r_l_validator_0.validate(str_0)

def test_case_11():
    validates_0 = module_0.validates()
    assert f'{type(validates_0).__module__}.{type(validates_0).__qualname__}' == 'peeweext.validation.validates'
    assert validates_0.validators == []

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'm'
    base_validator_0 = module_0.BaseValidator()
    var_0 = base_validator_0.__call__(str_0)
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == 'm'
    assert u_r_l_validator_0.schemes == 'm'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    u_r_l_validator_0.__call__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 2308
    list_0 = [int_0, int_0, int_0, int_0]
    inclusion_validator_0 = module_0.InclusionValidator(*list_0)
    assert f'{type(inclusion_validator_0).__module__}.{type(inclusion_validator_0).__qualname__}' == 'peeweext.validation.InclusionValidator'
    var_0 = inclusion_validator_0.validate(int_0)
    none_type_0 = None
    u_r_l_validator_0 = module_0.URLValidator(none_type_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null is False
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    u_r_l_validator_1 = module_0.URLValidator(int_0)
    assert u_r_l_validator_1.schemes == 2308
    dict_0 = {u_r_l_validator_0: int_0}
    u_r_l_validator_0.validate(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ';'
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == ';'
    assert u_r_l_validator_0.schemes == ';'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    bool_0 = False
    var_0 = u_r_l_validator_0.validate(bool_0)
    u_r_l_validator_0.__call__(str_0)

def test_case_15():
    str_0 = ';'
    exclusion_validator_0 = module_0.ExclusionValidator()
    assert f'{type(exclusion_validator_0).__module__}.{type(exclusion_validator_0).__qualname__}' == 'peeweext.validation.ExclusionValidator'
    exclusion_validator_1 = module_0.ExclusionValidator(*str_0)
    assert f'{type(exclusion_validator_1).__module__}.{type(exclusion_validator_1).__qualname__}' == 'peeweext.validation.ExclusionValidator'
    with pytest.raises(module_0.ValidationError):
        exclusion_validator_1.validate(str_0)

def test_case_16():
    str_0 = '{I'
    u_r_l_validator_0 = module_0.URLValidator()
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null is False
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    with pytest.raises(module_0.ValidationError):
        u_r_l_validator_0.validate(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = ';'
    regex_validator_0 = module_0.RegexValidator(str_0)
    assert f'{type(regex_validator_0).__module__}.{type(regex_validator_0).__qualname__}' == 'peeweext.validation.RegexValidator'
    var_0 = regex_validator_0.validate(str_0)
    exclusion_validator_0 = module_0.ExclusionValidator()
    exclusion_validator_1 = module_0.ExclusionValidator(*str_0)
    assert f'{type(exclusion_validator_1).__module__}.{type(exclusion_validator_1).__qualname__}' == 'peeweext.validation.ExclusionValidator'
    u_r_l_validator_0 = module_0.URLValidator(exclusion_validator_0, exclusion_validator_1)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    validates_0 = module_0.validates()
    none_type_0 = None
    var_1 = exclusion_validator_1.__call__(none_type_0)
    var_2 = u_r_l_validator_0.validate(var_1)
    error_0 = module_2.Error()
    var_3 = error_0.__repr__()
    inclusion_validator_0 = module_0.InclusionValidator()
    var_2.__call__(inclusion_validator_0)

def test_case_18():
    str_0 = ''
    u_r_l_validator_0 = module_0.URLValidator(str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null is False
    assert u_r_l_validator_0.schemes == ''
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    with pytest.raises(module_0.ValidationError):
        u_r_l_validator_0.validate(str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'K'
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == 'K'
    assert u_r_l_validator_0.schemes == 'K'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    validates_0 = module_0.validates()
    list_0 = [u_r_l_validator_0]
    var_0 = validates_0.__call__(list_0)
    var_0.__call__(validates_0, u_r_l_validator_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    length_validator_0 = module_0.LengthValidator(bool_0, bool_0)
    assert f'{type(length_validator_0).__module__}.{type(length_validator_0).__qualname__}' == 'peeweext.validation.LengthValidator'
    assert length_validator_0.min_length is True
    assert length_validator_0.max_length is True
    str_0 = '\r'
    var_0 = length_validator_0.validate(str_0)
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == '\r'
    assert u_r_l_validator_0.schemes == '\r'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    list_0 = [u_r_l_validator_0, str_0, str_0]
    u_r_l_validator_0.__call__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    inclusion_validator_0 = module_0.InclusionValidator()
    assert f'{type(inclusion_validator_0).__module__}.{type(inclusion_validator_0).__qualname__}' == 'peeweext.validation.InclusionValidator'
    bool_0 = True
    length_validator_0 = module_0.LengthValidator(bool_0, bool_0)
    assert f'{type(length_validator_0).__module__}.{type(length_validator_0).__qualname__}' == 'peeweext.validation.LengthValidator'
    assert length_validator_0.min_length is True
    assert length_validator_0.max_length is True
    u_r_l_validator_0 = module_0.URLValidator()
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null is False
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    list_0 = [bool_0, bool_0, u_r_l_validator_0, length_validator_0]
    length_validator_0.__call__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    validates_0 = module_0.validates()
    assert f'{type(validates_0).__module__}.{type(validates_0).__qualname__}' == 'peeweext.validation.validates'
    assert validates_0.validators == []
    int_0 = 543
    str_0 = "7[6{'yfm4bjT'x5\n"
    length_validator_0 = module_0.LengthValidator(int_0, str_0)
    assert f'{type(length_validator_0).__module__}.{type(length_validator_0).__qualname__}' == 'peeweext.validation.LengthValidator'
    assert length_validator_0.min_length == 543
    assert length_validator_0.max_length == "7[6{'yfm4bjT'x5\n"
    length_validator_0.validate(str_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = ';'
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == ';'
    assert u_r_l_validator_0.schemes == ';'
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    list_0 = [str_0, u_r_l_validator_0, str_0, u_r_l_validator_0]
    validates_0 = module_0.validates(*list_0)
    validates_1 = module_0.validates()
    list_1 = [u_r_l_validator_0]
    var_0 = validates_1.__call__(list_1)
    validates_0.__call__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ''
    u_r_l_validator_0 = module_0.URLValidator(str_0, str_0)
    assert f'{type(u_r_l_validator_0).__module__}.{type(u_r_l_validator_0).__qualname__}' == 'peeweext.validation.URLValidator'
    assert u_r_l_validator_0.null == ''
    assert u_r_l_validator_0.schemes == ''
    assert module_0.URLValidator.ul == '¡-\uffff'
    assert module_0.URLValidator.ipv4_re == '(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}'
    assert module_0.URLValidator.ipv6_re == '\\[[0-9a-f:\\.]+\\]'
    assert module_0.URLValidator.hostname_re == '[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?'
    assert module_0.URLValidator.domain_re == '(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*'
    assert module_0.URLValidator.tld_re == '\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?'
    assert module_0.URLValidator.host_re == '([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost)'
    assert module_0.URLValidator.message == 'Enter a valid URL.'
    assert module_0.URLValidator.schemes == ['http', 'https', 'ftp', 'ftps']
    var_0 = module_1.compile(str_0)
    u_r_l_validator_0.__call__(var_0)