# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.Events.OrderEvents as module_0
import buttonwood.MarketObjects.Price as module_1
import buttonwood.MarketObjects.Side as module_2

def test_case_0():
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.RejectReport(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_1():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.NewOrderCommand(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_2():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.CancelReplaceCommand(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_3():
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.CancelCommand(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_4():
    bytes_0 = b'"z\x92>\xe6\x17'
    with pytest.raises(AssertionError):
        module_0.CancelCommand(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)

def test_case_5():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.AcknowledgementReport(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_6():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.CancelReport(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_7():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.FillReport(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_8():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.PartialFillReport(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.OrderCommand(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_0.FullFillReport(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_11():
    bool_0 = False
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.OrderEvent(bool_0, bool_0, bool_0, none_type_0, none_type_0)

def test_case_12():
    complex_0 = (-1068.017+1408.348j)
    with pytest.raises(AssertionError):
        module_0.CancelReport(complex_0, complex_0, complex_0, complex_0, complex_0, complex_0, complex_0)

def test_case_13():
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.PartialFillReport(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_14():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.RejectReport(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'XO'
    module_0.ExecutionReport(str_0, str_0, str_0, str_0, str_0, str_0, str_0)

def test_case_16():
    bool_0 = True
    price_0 = module_1.Price(bool_0, bool_0)
    with pytest.raises(AssertionError):
        module_0.FillReport(price_0, price_0, price_0, price_0, price_0, bool_0, bool_0, price_0, price_0, price_0, bool_0)

def test_case_17():
    bool_0 = True
    price_0 = module_1.Price(bool_0)
    var_0 = price_0.__str__()
    with pytest.raises(AssertionError):
        module_0.PartialFillReport(bool_0, bool_0, price_0, price_0, price_0, price_0, price_0, price_0, price_0, bool_0, bool_0)

def test_case_18():
    bool_0 = False
    price_0 = module_1.Price(bool_0)
    with pytest.raises(AssertionError):
        module_0.CancelReplaceCommand(price_0, bool_0, price_0, price_0, price_0, price_0, price_0, price_0, price_0, price_0)

def test_case_19():
    bool_0 = False
    side_0 = module_2.Side(bool_0)
    with pytest.raises(AssertionError):
        module_0.NewOrderCommand(bool_0, side_0, bool_0, side_0, bool_0, side_0, side_0, bool_0, side_0)

def test_case_20():
    bool_0 = False
    price_0 = module_1.Price(bool_0)
    with pytest.raises(AssertionError):
        module_0.AcknowledgementReport(price_0, price_0, bool_0, price_0, bool_0, bool_0, price_0, price_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    price_0 = module_1.Price(bool_0)
    module_0.CancelReplaceCommand(bool_0, bool_0, price_0, price_0, bool_0, bool_0, price_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    price_0 = module_1.Price(bool_0)
    module_0.CancelReplaceCommand(bool_0, bool_0, price_0, bool_0, bool_0, bool_0, price_0, bool_0, bool_0)

def test_case_23():
    bool_0 = True
    price_0 = module_1.Price(bool_0)
    with pytest.raises(AssertionError):
        module_0.CancelReplaceCommand(bool_0, bool_0, price_0, bool_0, bool_0, bool_0, price_0, bool_0, price_0)

def test_case_24():
    int_0 = 227
    none_type_0 = None
    price_0 = module_1.Price(int_0)
    with pytest.raises(AssertionError):
        module_0.FillReport(int_0, none_type_0, price_0, none_type_0, price_0, int_0, int_0, price_0, price_0, int_0)

def test_case_25():
    bool_0 = True
    none_type_0 = None
    price_0 = module_1.Price(bool_0)
    str_0 = 'Wjc*C(b'
    with pytest.raises(AssertionError):
        module_0.FillReport(bool_0, none_type_0, price_0, bool_0, none_type_0, none_type_0, bool_0, price_0, price_0, str_0)