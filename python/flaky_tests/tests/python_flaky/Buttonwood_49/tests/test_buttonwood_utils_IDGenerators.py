# Automatically generated by Pynguin.
import pytest
import buttonwood.utils.IDGenerators as module_0

def test_case_0():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    with pytest.raises(AssertionError):
        module_0.MonotonicIntID(monotonic_int_i_d_0, max_id=monotonic_int_i_d_0)

def test_case_1():
    set_0 = set()
    with pytest.raises(AssertionError):
        module_0.MonotonicIntID(set_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_0 = monotonic_int_i_d_0.id()
    assert var_0 == 1
    var_0.id()

def test_case_3():
    random_positive_int_i_d_0 = module_0.RandomPositiveIntID()
    assert f'{type(random_positive_int_i_d_0).__module__}.{type(random_positive_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.RandomPositiveIntID'
    var_0 = random_positive_int_i_d_0.id()

def test_case_4():
    str_0 = '[?)5EO3J'
    with pytest.raises(AssertionError):
        module_0.RandomPositiveIntID(str_0)

def test_case_5():
    i_d_generator_0 = module_0.IDGenerator()

def test_case_6():
    i_d_generator_0 = module_0.IDGenerator()
    with pytest.raises(NotImplementedError):
        i_d_generator_0.id()

def test_case_7():
    i_d_generator_0 = module_0.IDGenerator()
    with pytest.raises(NotImplementedError):
        i_d_generator_0.last_id()

@pytest.mark.xfail(strict=True)
def test_case_8():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_0 = monotonic_int_i_d_0.last_id()
    assert var_0 == 0
    var_1 = monotonic_int_i_d_0.id()
    assert var_1 == 1
    var_1.increment()

def test_case_9():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_0 = monotonic_int_i_d_0.id()
    assert var_0 == 1
    var_1 = monotonic_int_i_d_0.last_id()
    assert var_1 == 1
    i_d_generator_0 = module_0.IDGenerator()
    var_2 = monotonic_int_i_d_0.id()
    assert var_2 == 2
    var_3 = monotonic_int_i_d_0.seed()
    assert var_3 == 0
    var_4 = monotonic_int_i_d_0.last_id()
    assert var_4 == 2
    var_5 = monotonic_int_i_d_0.seed()
    assert var_5 == 0

def test_case_10():
    random_positive_int_i_d_0 = module_0.RandomPositiveIntID()
    assert f'{type(random_positive_int_i_d_0).__module__}.{type(random_positive_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.RandomPositiveIntID'
    var_0 = random_positive_int_i_d_0.id()
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_1 = monotonic_int_i_d_0.increment()
    assert var_1 == 1
    var_2 = monotonic_int_i_d_0.id()
    assert var_2 == 1
    with pytest.raises(NotImplementedError):
        random_positive_int_i_d_0.last_id()

def test_case_11():
    i_d_generator_0 = module_0.IDGenerator()
    with pytest.raises(AssertionError):
        module_0.MonotonicIntID(increment=i_d_generator_0, max_id=i_d_generator_0)

def test_case_12():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_0 = monotonic_int_i_d_0.id()
    assert var_0 == 1
    with pytest.raises(AssertionError):
        module_0.RandomPositiveIntID(ceiling=monotonic_int_i_d_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    monotonic_int_i_d_1 = module_0.MonotonicIntID()
    var_0 = monotonic_int_i_d_1.id()
    assert var_0 == 1
    var_1 = monotonic_int_i_d_1.id()
    assert var_1 == 2
    random_positive_int_i_d_0 = module_0.RandomPositiveIntID(ceiling=var_1)
    assert f'{type(random_positive_int_i_d_0).__module__}.{type(random_positive_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.RandomPositiveIntID'
    var_2 = random_positive_int_i_d_0.id()
    var_3 = random_positive_int_i_d_0.id()
    var_4 = monotonic_int_i_d_0.last_id()
    assert var_4 == 0
    var_3.id()

def test_case_14():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_0 = monotonic_int_i_d_0.last_id()
    assert var_0 == 0
    monotonic_int_i_d_1 = module_0.MonotonicIntID()
    with pytest.raises(AssertionError):
        module_0.RandomPositiveIntID(ceiling=var_0, attempts=var_0)

def test_case_15():
    monotonic_int_i_d_0 = module_0.MonotonicIntID()
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    var_0 = monotonic_int_i_d_0.last_id()
    assert var_0 == 0
    monotonic_int_i_d_1 = module_0.MonotonicIntID()
    var_1 = monotonic_int_i_d_1.id()
    assert var_1 == 1
    var_2 = monotonic_int_i_d_1.id()
    assert var_2 == 2
    var_3 = monotonic_int_i_d_0.increment()
    assert var_3 == 1
    random_positive_int_i_d_0 = module_0.RandomPositiveIntID(ceiling=var_2)
    assert f'{type(random_positive_int_i_d_0).__module__}.{type(random_positive_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.RandomPositiveIntID'
    var_4 = random_positive_int_i_d_0.id()
    assert var_4 == 1
    var_5 = random_positive_int_i_d_0.id()
    assert var_5 == 2
    random_positive_int_i_d_1 = module_0.RandomPositiveIntID()
    var_6 = random_positive_int_i_d_1.id()
    var_7 = monotonic_int_i_d_0.last_id()
    assert var_7 == 0
    with pytest.raises(Exception):
        random_positive_int_i_d_0.id()

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    random_positive_int_i_d_0 = module_0.RandomPositiveIntID(bool_0, attempts=bool_0)
    assert f'{type(random_positive_int_i_d_0).__module__}.{type(random_positive_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.RandomPositiveIntID'
    random_positive_int_i_d_0.id()

@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = -2153.004
    monotonic_int_i_d_0 = module_0.MonotonicIntID(max_id=float_0)
    assert f'{type(monotonic_int_i_d_0).__module__}.{type(monotonic_int_i_d_0).__qualname__}' == 'buttonwood.utils.IDGenerators.MonotonicIntID'
    monotonic_int_i_d_0.id()