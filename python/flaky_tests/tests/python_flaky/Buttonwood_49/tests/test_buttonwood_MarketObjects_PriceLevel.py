# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.PriceLevel as module_0
import buttonwood.MarketObjects.Price as module_1
import builtins as module_2

def test_case_0():
    int_0 = -888
    with pytest.raises(AssertionError):
        module_0.PriceLevel(int_0, int_0)

def test_case_1():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'

def test_case_2():
    int_0 = 1
    price_0 = module_1.Price(int_0)
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, price_0)

def test_case_3():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    var_0 = price_0.__gt__(price_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, int_0, price_level_0)

def test_case_4():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    var_0 = price_0.__bool__()
    int_1 = -761
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, int_1)

def test_case_5():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    none_type_0 = None
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.better_than(price_level_0, none_type_0)

def test_case_6():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.better_or_same_as(price_0, price_level_0)

def test_case_7():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    none_type_0 = None
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    var_0 = price_level_0.__ne__(price_level_1)
    assert var_0 is True
    var_1 = price_level_1.__str__()
    assert var_1 == '7 : 7 | 0'
    with pytest.raises(AssertionError):
        price_level_1.worse_or_same_as(price_level_0, int_0)

def test_case_8():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__ne__(price_level_0)
    assert var_0 is False

def test_case_9():
    int_0 = 29
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.hidden_qty()
    assert var_0 == 0

def test_case_10():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.better_than(int_0, int_0)

def test_case_11():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.worse_than(price_level_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 101
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    price_0.__truediv__(price_level_0)

def test_case_13():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.worse_than(price_0, int_0)

def test_case_14():
    int_0 = 103
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__str__()
    assert var_0 == '103 : 103 | 0'
    with pytest.raises(AssertionError):
        price_level_0.worse_or_same_as(var_0, var_0)

def test_case_15():
    int_0 = 29
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.better_or_same_as(price_level_0, price_level_0)

def test_case_16():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__ne__(price_level_0)
    assert var_0 is False
    var_1 = price_level_0.__str__()
    assert var_1 == '7 : 7 | 0 (7)'

def test_case_17():
    int_0 = 29
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'

def test_case_18():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, int_0, num_orders=price_level_0)

def test_case_19():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.total_qty()
    assert var_0 == 7
    with pytest.raises(AssertionError):
        price_level_0.worse_or_same_as(price_level_0, price_level_0)

def test_case_20():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    none_type_0 = None
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__ne__(price_level_0)
    assert var_0 is False
    with pytest.raises(AssertionError):
        price_level_0.worse_or_same_as(price_level_0, int_0)

def test_case_21():
    int_0 = 29
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    with pytest.raises(AssertionError):
        price_level_0.worse_or_same_as(price_level_0, price_0)

def test_case_22():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__ne__(price_level_0)
    assert var_0 is False
    var_1 = price_level_0.__str__()
    assert var_1 == '7 : 7 | 0 (7)'
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, int_0, num_orders=var_0)

def test_case_23():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    var_0 = price_0.__neg__()
    var_1 = var_0.__pos__()
    price_level_0 = module_0.PriceLevel(var_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_2 = price_level_0.__ne__(price_level_0)
    assert var_2 is False
    none_type_0 = None
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    var_3 = price_level_1.__eq__(price_level_0)
    var_4 = price_level_1.__ne__(price_level_1)
    assert var_4 is False
    with pytest.raises(AssertionError):
        price_level_0.better_than(price_level_0, var_0)

def test_case_24():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    none_type_0 = None
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    var_0 = price_level_0.__ne__(price_level_1)
    assert var_0 is True

def test_case_25():
    int_0 = 5
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    none_type_0 = None
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    var_0 = price_level_0.__ne__(price_level_1)
    assert var_0 is True
    var_1 = price_level_1.__ne__(price_level_0)
    assert var_1 is True
    with pytest.raises(AssertionError):
        price_level_1.better_or_same_as(price_level_1, none_type_0)

def test_case_26():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    int_1 = 29
    price_level_0 = module_0.PriceLevel(price_0, int_1, num_orders=int_1)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__ne__(price_level_0)
    assert var_0 is False
    none_type_0 = None
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    var_1 = price_level_1.visible_qty()
    var_2 = price_level_0.__ne__(price_level_1)
    assert var_2 is True
    with pytest.raises(AssertionError):
        price_level_1.worse_than(price_level_0, price_level_1)

def test_case_27():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, int_0, int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = module_2.object()
    none_type_0 = None
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=none_type_0)
    assert f'{type(price_level_1).__module__}.{type(price_level_1).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_1 = price_level_0.__ne__(price_level_1)
    assert var_1 is True
    with pytest.raises(AssertionError):
        price_level_1.better_or_same_as(price_level_1, none_type_0)

def test_case_28():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    int_1 = 17
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, int_0, num_orders=int_1)

def test_case_29():
    int_0 = 7
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__eq__(price_level_0)
    assert var_0 is True
    var_1 = price_level_0.__ne__(price_level_0)
    assert var_1 is False
    var_2 = price_0.__pos__()
    var_3 = var_2.__ne__(price_0)
    price_level_1 = module_0.PriceLevel(price_0, int_0, num_orders=var_0)
    assert f'{type(price_level_1).__module__}.{type(price_level_1).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_4 = price_level_0.__ne__(price_level_1)
    assert var_4 is True
    with pytest.raises(AssertionError):
        price_level_1.worse_or_same_as(price_level_0, int_0)

def test_case_30():
    int_0 = 5
    price_0 = module_1.Price(int_0)
    price_level_0 = module_0.PriceLevel(price_0, int_0, num_orders=int_0)
    assert f'{type(price_level_0).__module__}.{type(price_level_0).__qualname__}' == 'buttonwood.MarketObjects.PriceLevel.PriceLevel'
    var_0 = price_level_0.__ne__(price_level_0)
    assert var_0 is False
    int_1 = -1148
    with pytest.raises(AssertionError):
        module_0.PriceLevel(price_0, int_0, int_1)