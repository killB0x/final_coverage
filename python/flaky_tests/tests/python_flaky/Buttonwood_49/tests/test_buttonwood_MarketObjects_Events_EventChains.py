# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.Events.EventChains as module_0

def test_case_0():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.SubChain(none_type_0, none_type_0, none_type_0, none_type_0)

def test_case_1():
    int_0 = -463
    exposure_0 = module_0.Exposure(int_0, int_0, int_0)

def test_case_2():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.OrderEventChain(none_type_0, none_type_0, none_type_0)

def test_case_3():
    int_0 = -463
    exposure_0 = module_0.Exposure(int_0, int_0, int_0)
    var_0 = exposure_0.causing_event_id()

def test_case_4():
    bool_0 = True
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.equivalent_exposure(exposure_0)
    assert var_0 is True

def test_case_5():
    bool_0 = False
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.equivalent_exposure(bool_0)
    assert var_0 is False

def test_case_6():
    bool_0 = False
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.equivalent_exposure(exposure_0)
    assert var_0 is True
    order_event_chain_0 = exposure_0.__str__()
    assert order_event_chain_0 == 'False: 0 @ False'

def test_case_7():
    bool_0 = False
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.__eq__(exposure_0)
    assert var_0 is True

def test_case_8():
    bool_0 = True
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.__eq__(exposure_0)
    assert var_0 is True
    var_1 = exposure_0.dec_qty(var_0)
    with pytest.raises(AssertionError):
        module_0.OrderEventChain(var_1, bool_0, var_1)

def test_case_9():
    bool_0 = True
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    none_type_0 = None
    var_0 = exposure_0.__eq__(exposure_0)
    assert var_0 is True
    var_1 = exposure_0.equivalent_exposure(none_type_0)
    assert var_1 is False
    with pytest.raises(AssertionError):
        exposure_0.dec_qty(var_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.dec_qty(bool_0)
    float_0 = 3229.30444
    exposure_1 = module_0.Exposure(float_0, exposure_0, exposure_0)
    var_1 = exposure_0.equivalent_exposure(bool_0)
    assert var_1 is False
    var_2 = exposure_0.__eq__(exposure_1)
    assert var_2 is False
    var_2.equivalent_exposure(var_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    none_type_0 = None
    exposure_1 = module_0.Exposure(none_type_0, none_type_0, bool_0)
    var_0 = exposure_0.equivalent_exposure(exposure_1)
    exposure_0.__eq__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    exposure_0 = module_0.Exposure(bool_0, bool_0, bool_0)
    var_0 = exposure_0.equivalent_exposure(exposure_0)
    assert var_0 is True
    var_1 = exposure_0.__str__()
    assert var_1 == 'True: 1 @ True'
    exposure_1 = module_0.Exposure(bool_0, var_1, exposure_0)
    var_2 = exposure_1.__eq__(exposure_0)
    assert var_2 is False
    var_2.equivalent_exposure(var_0)