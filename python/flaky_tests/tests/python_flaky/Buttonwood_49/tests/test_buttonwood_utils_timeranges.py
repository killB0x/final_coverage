# Automatically generated by Pynguin.
import pytest
import buttonwood.utils.timeranges as module_0
import builtins as module_1

def test_case_0():
    time_range_list_0 = module_0.TimeRangeList()
    var_0 = time_range_list_0.items_in_window(time_range_list_0, time_range_list_0)

def test_case_1():
    time_range_list_0 = module_0.TimeRangeList()

def test_case_2():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_list_0.append(time_range_0)
    assert len(time_range_list_0) == 1
    var_1 = time_range_list_0.trim_to_start_time(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_list_0.append(time_range_0)
    assert len(time_range_list_0) == 1
    time_range_list_0.append(time_range_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_list_0.items_in_window(time_range_0, time_range_0)
    var_1 = time_range_list_0.append(time_range_0)
    assert len(time_range_list_0) == 1
    time_range_list_0.items_in_window(var_0, time_range_0, time_range_0)

def test_case_5():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_0.payload()
    var_1 = time_range_list_0.items_in_window(time_range_0, time_range_0)
    var_2 = time_range_list_0.append(time_range_0)
    assert len(time_range_list_0) == 1
    assert len(var_0) == 1
    var_3 = var_0.trim_to_start_time(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\n        If clean_up is called with an order_chain than this will go through the\n         order chain's events and remove them from tracking\n\n        WARNING: once this is called, the event_priority no longer return the values that are\n         meaningful; rather, you'll get None.\n\n        :param order_chain: MarketObjects.Events.EventChains.OrderEventChain\n        "
    time_range_0 = module_0.TimeRange(str_0, str_0)
    time_range_0.__str__()

def test_case_7():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_0.start_time()
    var_1 = time_range_list_0.__len__()
    var_2 = time_range_list_0.append(time_range_0)
    assert len(time_range_list_0) == 1
    assert len(var_0) == 1
    var_3 = var_0.trim_to_start_time(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_list_0.items_in_window(time_range_0, time_range_0)
    var_1 = time_range_list_0.append(time_range_0)
    assert len(time_range_list_0) == 1
    var_2 = time_range_list_0.trim_to_start_time(var_0)
    var_3 = time_range_list_0.last_payload()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'buttonwood.utils.timeranges.TimeRangeList'
    assert len(var_3) == 1
    time_range_list_0.items_in_window(var_2, var_2)

def test_case_9():
    time_range_list_0 = module_0.TimeRangeList()
    with pytest.raises(AssertionError):
        time_range_list_0.append(time_range_list_0)

def test_case_10():
    time_range_list_0 = module_0.TimeRangeList()
    var_0 = time_range_list_0.trim_to_start_time(time_range_list_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    time_range_list_0 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(time_range_list_0, time_range_list_0)
    var_0 = time_range_list_0.items_in_window(time_range_0, time_range_0)
    time_range_1 = module_0.TimeRange(var_0, var_0)
    var_1 = time_range_1.set_end_time(var_0)
    object_0 = module_1.object()
    time_range_0.set_last_end_time(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    time_range_list_0 = module_0.TimeRangeList()
    str_0 = 'P5C<J(]\\6Z*[uXF)m!m'
    str_1 = "dyt=fl.*K_L_s(5xm+I'"
    time_range_list_1 = module_0.TimeRangeList()
    time_range_0 = module_0.TimeRange(str_1, str_1)
    time_range_0.set_end_time(str_0)