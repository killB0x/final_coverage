# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketMetrics.EventListeners.VolumeTrackingListener as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    volume_tracker_0 = module_0.VolumeTracker()
    volume_tracker_1 = module_0.VolumeTracker()
    volume_tracker_2 = module_0.VolumeTracker()
    none_type_0 = None
    var_0 = volume_tracker_1.total_passive_volume_with(none_type_0)
    assert var_0 == 0
    var_1 = volume_tracker_2.total_aggressive_volume_with(volume_tracker_2)
    assert var_1 == 0
    var_2 = volume_tracker_2.total_volume()
    assert var_2 == 0
    var_3 = volume_tracker_2.total_passive_volume()
    assert var_3 == 0
    var_2.total_volume_with(var_3)

def test_case_1():
    volume_tracker_0 = module_0.VolumeTracker()
    var_0 = volume_tracker_0.total_volume()
    assert var_0 == 0

def test_case_2():
    float_0 = -3156.5
    volume_tracking_listener_0 = module_0.VolumeTrackingListener(float_0)
    var_0 = volume_tracking_listener_0.volume_tracker(float_0, float_0)

def test_case_3():
    volume_tracker_0 = module_0.VolumeTracker()

@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    bool_0 = False
    volume_tracker_0 = module_0.VolumeTracker()
    var_0 = volume_tracker_0.add_passive_trade(bool_0, bool_0)
    var_0.total_aggressive_volume_with(list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -567
    volume_tracker_0 = module_0.VolumeTracker()
    var_0 = volume_tracker_0.total_aggressive_volume_with(int_0)
    assert var_0 == 0
    var_0.total_passive_volume()

@pytest.mark.xfail(strict=True)
def test_case_6():
    volume_tracker_0 = module_0.VolumeTracker()
    volume_tracker_0.add_aggressive_trade(volume_tracker_0, volume_tracker_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    volume_tracker_0 = module_0.VolumeTracker()
    volume_tracking_listener_0 = volume_tracker_0.total_volume_with(bool_0)
    assert volume_tracking_listener_0 == 0
    volume_tracking_listener_1 = module_0.VolumeTrackingListener(volume_tracking_listener_0)
    volume_tracking_listener_2 = module_0.VolumeTrackingListener(bool_0)
    none_type_0 = None
    bytes_0 = b'\xd9.\xbe\xbc=C\xb3\xfa\x1a'
    tuple_0 = (bytes_0, volume_tracking_listener_0, volume_tracking_listener_0, volume_tracker_0)
    var_0 = volume_tracking_listener_1.volume_tracker(volume_tracking_listener_0, tuple_0)
    volume_tracking_listener_0.handle_new_order_command(volume_tracking_listener_2, none_type_0)

def test_case_8():
    str_0 = 'OMVOF%/cKJ"}^0U\x0b'
    volume_tracking_listener_0 = module_0.VolumeTrackingListener(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'A'
    volume_tracker_0 = module_0.VolumeTracker()
    volume_tracking_listener_0 = module_0.VolumeTrackingListener(str_0)
    volume_tracking_listener_0.handle_partial_fill_report(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    volume_tracking_listener_0 = module_0.VolumeTrackingListener(none_type_0)
    volume_tracking_listener_0.handle_full_fill_report(volume_tracking_listener_0, volume_tracking_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    volume_tracker_0 = module_0.VolumeTracker()
    float_0 = -1197.1851926670554
    bool_0 = False
    var_0 = volume_tracker_0.total_volume_with(bool_0)
    assert var_0 == 0
    volume_tracking_listener_0 = module_0.VolumeTrackingListener(float_0)
    var_1 = volume_tracking_listener_0.volume_tracker(none_type_0, float_0)
    str_0 = ''
    var_2 = volume_tracker_0.total_passive_volume()
    assert var_2 == 0
    var_1.handle_cancel_report(var_0, str_0)