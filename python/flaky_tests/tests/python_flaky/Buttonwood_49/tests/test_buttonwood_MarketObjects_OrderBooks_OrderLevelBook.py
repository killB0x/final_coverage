# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.OrderBooks.OrderLevelBook as module_0

def test_case_0():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    var_0 = time_priority_order_level_0.is_empty()
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    var_0 = time_priority_order_level_0.visible_qty()
    assert var_0 == 0
    time_priority_order_level_0.first()

def test_case_2():
    side_dict_0 = module_0.SideDict()
    var_0 = side_dict_0.sorted_prices(side_dict_0)

def test_case_3():
    bytes_0 = b''
    order_level_book_0 = module_0.OrderLevelBook(bytes_0, bytes_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'

def test_case_4():
    str_0 = 'Ya}s1cbcg'
    order_level_book_0 = module_0.OrderLevelBook(str_0, str_0, str_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    var_0 = order_level_book_0.best_bid_level()

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2294
    module_0.AggregateOrderLevelBook(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'Ya}s1cbcg'
    order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    order_level_book_0.to_json()

def test_case_7():
    side_dict_0 = module_0.SideDict()

def test_case_8():
    str_0 = 'Ya}s1cbcg'
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(str_0)

def test_case_9():
    bool_0 = True
    order_level_book_0 = module_0.OrderLevelBook(bool_0, bool_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(bool_0)
    var_0 = time_priority_order_level_0.__str__()
    var_1 = order_level_book_0.__str__()
    assert var_1 == '--------------------------------------\n'

def test_case_10():
    str_0 = 'Ya}s1cbcg'
    order_level_book_0 = module_0.OrderLevelBook(str_0, str_0, str_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    var_0 = order_level_book_0.best_ask_level()

def test_case_11():
    complex_0 = (-2694.96-1240j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(dict_0)
    var_0 = time_priority_order_level_0.num_orders()
    assert var_0 == 0

def test_case_12():
    str_0 = 'Ya}s1cbcg'
    order_level_book_0 = module_0.OrderLevelBook(str_0, str_0, str_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    var_0 = order_level_book_0.__str__()
    assert var_0 == '--------------------------------------\n'

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'Ya}s1cbcg'
    order_level_book_0 = module_0.OrderLevelBook(str_0, str_0, str_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    order_level_book_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.notify_book_update(bool_0, aggregate_order_level_book_0, bool_0)
    aggregate_order_level_book_0.notify_book_update(aggregate_order_level_book_0, var_0, aggregate_order_level_book_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'A subchain must be opened with an OrderCommand'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.component_books()
    aggregate_order_level_book_0.last_update_time()

def test_case_16():
    bool_0 = False
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.notify_book_update(aggregate_order_level_book_0, bool_0, bool_0)

def test_case_17():
    str_0 = 'YaZs1cbcm'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    with pytest.raises(AssertionError):
        aggregate_order_level_book_0.add_order_level_book_listener(aggregate_order_level_book_0, str_0)

def test_case_18():
    bool_0 = False
    none_type_0 = None
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, none_type_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    with pytest.raises(AssertionError):
        aggregate_order_level_book_0.has_component_book(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    var_0 = time_priority_order_level_0.has_order_chain(none_type_0)
    assert var_0 is False
    time_priority_order_level_0.first()

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    none_type_0 = None
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, none_type_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.order_books_at_price(none_type_0, none_type_0)
    aggregate_order_level_book_0.best_bid_price()

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.component_pool_with_price(bool_0, bool_0)
    aggregate_order_level_book_0.hidden_qty_at_price(var_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    time_priority_order_level_0.first()

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    var_0 = time_priority_order_level_0.hidden_qty()
    assert var_0 == 0
    var_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    var_0 = time_priority_order_level_0.iter_order_chains()
    time_priority_order_level_0.first()

def test_case_25():
    set_0 = set()
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(set_0)
    var_0 = time_priority_order_level_0.force_dirty()
    var_1 = time_priority_order_level_0.num_orders()
    assert var_1 == 0

@pytest.mark.xfail(strict=True)
def test_case_26():
    complex_0 = (-2694.96-1240j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(dict_0)
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(time_priority_order_level_0, time_priority_order_level_0, name=time_priority_order_level_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    aggregate_order_level_book_0.best_level(time_priority_order_level_0)

def test_case_27():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.AggregateOrderLevelBook(bool_0, bool_0, bool_0)

def test_case_28():
    bool_0 = False
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    with pytest.raises(AssertionError):
        aggregate_order_level_book_0.has_component_market(bool_0)

def test_case_29():
    bool_0 = False
    order_level_book_0 = module_0.OrderLevelBook(bool_0, bool_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    var_0 = order_level_book_0.__str__()
    assert var_0 == '--------------------------------------\n'
    var_1 = order_level_book_0.order_level_book_listener(var_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.name()
    aggregate_order_level_book_0.add_component_book(aggregate_order_level_book_0)

def test_case_31():
    bool_0 = False
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.order_books_at_price(aggregate_order_level_book_0, bool_0)
    with pytest.raises(Exception):
        aggregate_order_level_book_0.order_chains_at_price(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.component_pool_with_price(bool_0, bool_0)
    none_type_0 = None
    aggregate_order_level_book_0.iter_order_chains_at_price(var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(none_type_0)
    var_0 = time_priority_order_level_0.__len__()
    time_priority_order_level_0.first()

def test_case_34():
    bool_0 = False
    none_type_0 = None
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, none_type_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    with pytest.raises(Exception):
        aggregate_order_level_book_0.num_orders_at_price(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    complex_0 = (-2694.96-1240j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(dict_0)
    var_0 = time_priority_order_level_0.order_chains()
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(time_priority_order_level_0, time_priority_order_level_0, name=time_priority_order_level_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_1 = time_priority_order_level_0.force_dirty()
    var_2 = time_priority_order_level_0.visible_qty()
    assert var_2 == 0
    aggregate_order_level_book_0.visible_qty_at_price(aggregate_order_level_book_0, var_0)

def test_case_36():
    set_0 = set()
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(set_0)
    var_0 = time_priority_order_level_0.force_dirty()
    var_1 = time_priority_order_level_0.visible_qty()
    assert var_1 == 0

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = 'Ya}s1cbcg'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.clean_up_order_chain(str_0)
    aggregate_order_level_book_0.add_component_book(aggregate_order_level_book_0)

def test_case_38():
    str_0 = 'Ya}s1cbcg'
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(str_0)
    var_0 = time_priority_order_level_0.total_qty()
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_39():
    bool_0 = False
    none_type_0 = None
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, none_type_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    aggregate_order_level_book_0.best_priority_chain(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    aggregate_order_level_book_0.last_update_time()

def test_case_41():
    str_0 = 'Ya}s1cbcm'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    with pytest.raises(AssertionError):
        aggregate_order_level_book_0.add_component_book(str_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = 'Ya}s1cbcg'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    aggregate_order_level_book_0.add_component_book(aggregate_order_level_book_0)

def test_case_43():
    none_type_0 = None
    order_level_book_0 = module_0.OrderLevelBook(none_type_0, none_type_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    var_0 = order_level_book_0.__str__()
    assert var_0 == '--------------------------------------\n'
    var_1 = order_level_book_0.last_update_time()

def test_case_44():
    str_0 = 'Ya}s1cbcm'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.order_books_at_price(aggregate_order_level_book_0, aggregate_order_level_book_0)

def test_case_45():
    side_dict_0 = module_0.SideDict()
    none_type_0 = None
    var_0 = side_dict_0.__setitem__(none_type_0, none_type_0)
    assert len(side_dict_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = True
    none_type_0 = None
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, none_type_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    aggregate_order_level_book_0.level_at_price(bool_0, bool_0)

def test_case_47():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.component_pool_with_price(aggregate_order_level_book_0, aggregate_order_level_book_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.has_component_book(aggregate_order_level_book_0)
    assert var_0 is False
    aggregate_order_level_book_0.add_component_book(aggregate_order_level_book_0)

def test_case_49():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    with pytest.raises(AssertionError):
        module_0.AggregateOrderLevelBook(bool_0, list_0, list_0)

def test_case_50():
    bool_0 = True
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(bool_0, bool_0, name=bool_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    var_0 = aggregate_order_level_book_0.component_pool_with_price(aggregate_order_level_book_0, bool_0)
    aggregate_order_level_book_1 = module_0.AggregateOrderLevelBook(bool_0, aggregate_order_level_book_0, var_0, var_0)
    assert f'{type(aggregate_order_level_book_1).__module__}.{type(aggregate_order_level_book_1).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    with pytest.raises(AssertionError):
        aggregate_order_level_book_0.add_order_level_book_listener(var_0, bool_0)

def test_case_51():
    str_0 = 'Ya}s1cbcg'
    order_level_book_0 = module_0.OrderLevelBook(str_0, str_0, str_0)
    assert f'{type(order_level_book_0).__module__}.{type(order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.OrderLevelBook'
    with pytest.raises(AssertionError):
        order_level_book_0.add_order_level_book_listener(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    complex_0 = (-2695.520309044354-1240j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(dict_0)
    var_0 = time_priority_order_level_0.force_dirty()
    var_1 = time_priority_order_level_0.hidden_qty()
    assert var_1 == 0
    var_0.component_pool_with_price(var_0, complex_0)

def test_case_53():
    complex_0 = (-2694.96-1240j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    time_priority_order_level_0 = module_0.TimePriorityOrderLevel(dict_0)
    var_0 = time_priority_order_level_0.force_dirty()
    var_1 = time_priority_order_level_0.total_qty()
    assert var_1 == 0

def test_case_54():
    str_0 = '\n        Get the json dictionary of the reject report\n\n        :return: dict\n        '
    str_1 = '2#.4 [7*t)#LT*)5LPM='
    dict_0 = {str_0: str_0, str_1: str_1}
    side_dict_0 = module_0.SideDict(**dict_0)
    assert len(side_dict_0) == 2
    var_0 = side_dict_0.__delitem__(str_1)
    assert len(side_dict_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_55():
    side_dict_0 = module_0.SideDict()
    bytes_0 = b'Z\xd2P\xd3\xc8ETt\xe5U\xef'
    var_0 = side_dict_0.__setitem__(bytes_0, side_dict_0)
    assert len(side_dict_0) == 1
    var_1 = side_dict_0.__setitem__(bytes_0, side_dict_0)
    side_dict_0.__setitem__(var_1, var_1)

def test_case_56():
    side_dict_0 = module_0.SideDict()
    bytes_0 = b'Z\xd2P\xd3\x13\xf9ETt\xe5\x95\xef'
    var_0 = side_dict_0.__setitem__(bytes_0, side_dict_0)
    assert len(side_dict_0) == 1
    var_1 = side_dict_0.sorted_prices()

@pytest.mark.xfail(strict=True)
def test_case_57():
    side_dict_0 = module_0.SideDict()
    bytes_0 = b'Z\xd2P\xd3\x13\xf9ETt\xe5\x95\xef'
    var_0 = side_dict_0.__setitem__(bytes_0, side_dict_0)
    assert len(side_dict_0) == 1
    side_dict_0.__setitem__(var_0, side_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = '\n        Get the json dictionary of the reject report\n\n        :return: dict\n        '
    dict_0 = {str_0: str_0, str_0: str_0}
    side_dict_0 = module_0.SideDict(**dict_0)
    assert len(side_dict_0) == 1
    var_0 = side_dict_0.__delitem__(str_0)
    assert len(side_dict_0) == 0
    var_0.order_level_book_listener(str_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = '~(+Gz;;X|3b\\\x0bw'
    aggregate_order_level_book_0 = module_0.AggregateOrderLevelBook(str_0, str_0, name=str_0)
    assert f'{type(aggregate_order_level_book_0).__module__}.{type(aggregate_order_level_book_0).__qualname__}' == 'buttonwood.MarketObjects.OrderBooks.OrderLevelBook.AggregateOrderLevelBook'
    aggregate_order_level_book_0.add_order_level_book_listener(str_0, aggregate_order_level_book_0)