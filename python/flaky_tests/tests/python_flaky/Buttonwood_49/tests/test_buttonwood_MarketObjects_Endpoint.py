# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.Endpoint as module_0
import re as module_1
import codecs as module_2
import builtins as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '\x0b#.f(h(?v'
    endpoint_0 = module_0.Endpoint(str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    module_1.compile(str_0, str_0)

def test_case_1():
    float_0 = 0.0
    with pytest.raises(AssertionError):
        module_0.Endpoint(float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_2.getincrementalencoder(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '\x0b#.f(h(?v'
    var_0 = module_1.purge()
    var_1 = var_0.__hash__()
    str_1 = ''
    endpoint_0 = module_0.Endpoint(str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    var_2 = endpoint_0.__str__()
    assert var_2 == '{"name": "\\u000b#.f(h(?v", "abbreviation": "\\u000b#.f(h(?v"}'
    module_1.compile(str_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'n'
    endpoint_0 = module_0.Endpoint(str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    var_0 = module_3.object()
    var_1 = endpoint_0.__hash__()
    module_1.compile(endpoint_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ''
    endpoint_0 = module_0.Endpoint(str_0, str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    endpoint_1 = module_0.Endpoint(str_0)
    var_0 = endpoint_1.abbreviation()
    var_1 = module_1.sub(str_0, str_0, var_0)
    str_0.abbreviation()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '\n    A new order. A new order is necessarily the first event in an order chain.\n\n    If iceberg_peak_qty is None then not taking advantage of iceberg functionality.\n    '
    endpoint_0 = module_0.Endpoint(str_0, str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    var_0 = endpoint_0.to_json()
    var_1 = endpoint_0.__hash__()
    var_1.writelines(var_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'n'
    endpoint_0 = module_0.Endpoint(str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    var_0 = endpoint_0.__ne__(str_0)
    assert var_0 is True
    object_0 = module_3.object()
    var_1 = endpoint_0.__hash__()
    module_1.compile(endpoint_0, object_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '\x0b#.f(h(?v'
    str_1 = 'n'
    endpoint_0 = module_0.Endpoint(str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    endpoint_1 = module_0.Endpoint(str_1)
    var_0 = endpoint_1.name()
    var_0.decode(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ''
    endpoint_0 = module_0.Endpoint(str_0, str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    var_0 = endpoint_0.__ne__(endpoint_0)
    assert var_0 is False
    str_0.__enter__()

def test_case_10():
    str_0 = 'n'
    endpoint_0 = module_0.Endpoint(str_0, str_0)
    assert f'{type(endpoint_0).__module__}.{type(endpoint_0).__qualname__}' == 'buttonwood.MarketObjects.Endpoint.Endpoint'
    var_0 = endpoint_0.__ne__(str_0)
    assert var_0 is True
    with pytest.raises(AssertionError):
        module_0.Endpoint(str_0, endpoint_0)