# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.TwoSidedQuote as module_0

def test_case_0():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'

def test_case_1():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.TwoSidedQuote(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    two_sided_quote_0.__ne__(none_type_0)

def test_case_3():
    none_type_0 = None
    bytes_0 = b'\x93\x91\xd1\x1cG\xd2\xe0\xf9\xf6R\x89'
    with pytest.raises(AssertionError):
        module_0.TwoSidedQuote(none_type_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    two_sided_quote_0.__str__()

def test_case_5():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.TwoSidedQuote(none_type_0, none_type_0, none_type_0)

def test_case_6():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    var_0 = two_sided_quote_0.sell_quote()

def test_case_7():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    with pytest.raises(AssertionError):
        two_sided_quote_0.set_sell_quote(two_sided_quote_0)

def test_case_8():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    var_0 = two_sided_quote_0.__ne__(two_sided_quote_0)
    assert var_0 is False

def test_case_9():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    var_0 = two_sided_quote_0.spread()

def test_case_10():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    var_0 = two_sided_quote_0.set_sell_quote(none_type_0)

def test_case_11():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    two_sided_quote_1 = two_sided_quote_0.set_buy_quote(none_type_0)

def test_case_12():
    none_type_0 = None
    two_sided_quote_0 = module_0.TwoSidedQuote(none_type_0, none_type_0)
    assert f'{type(two_sided_quote_0).__module__}.{type(two_sided_quote_0).__qualname__}' == 'buttonwood.MarketObjects.TwoSidedQuote.TwoSidedQuote'
    with pytest.raises(AssertionError):
        two_sided_quote_0.set_buy_quote(two_sided_quote_0)