# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.Side as module_0

def test_case_0():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.get_side(none_type_0)

def test_case_1():
    float_0 = -1018.7
    with pytest.raises(AssertionError):
        module_0.Side(float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    none_type_0 = None
    var_0 = side_0.__hash__()
    side_0.__eq__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'FvL_'
    var_0 = module_0.get_side(str_0)
    var_0.is_bid()

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.is_other_side(side_0)
    assert var_0 is False
    module_0.Side(side_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.__ne__(side_0)
    assert var_0 is False
    var_0.is_bid()

def test_case_6():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.is_other_side(side_0)
    assert var_0 is False
    var_1 = side_0.other_side()
    var_2 = var_1.__int__()
    assert var_2 == 0
    bytes_0 = b'{f\xeac\x8c~+}\xc6\x01\xd3c\x1c&&\x12'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    with pytest.raises(AssertionError):
        module_0.Side(set_0)

def test_case_7():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.__int__()
    assert var_0 == 0
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.get_side(tuple_0)

def test_case_8():
    bool_0 = True
    var_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_1 = var_0.__str__()
    assert var_1 == 'Ask'
    var_2 = var_1.__repr__()
    assert var_2 == "'Ask'"

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.is_other_side(side_0)
    assert var_0 is False
    var_0.abbreviated_str()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.is_other_side(side_0)
    assert var_0 is False
    var_1 = side_0.is_bid()
    assert var_1 is True
    side_1 = module_0.Side(var_1)
    var_2 = side_1.__repr__()
    assert var_2 == 'Ask'
    var_3 = side_1.abbreviated_str()
    assert var_3 == 'A'
    var_4 = var_0.__int__()
    assert var_4 == 0
    var_5 = side_1.__repr__()
    assert var_5 == 'Ask'
    var_6 = var_2.__str__()
    assert var_6 == 'Ask'
    var_3.is_bid()

def test_case_11():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.__hash__()
    bytes_0 = b'{f\xeac\x8c~+}\xc6\x01\xd3c\x1c&&\x12'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    with pytest.raises(AssertionError):
        module_0.Side(set_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.other_side()
    var_1 = var_0.is_bid()
    assert var_1 is False
    var_1.is_bid()

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.__int__()
    assert var_0 == 1
    var_1 = side_0.is_other_side(side_0)
    assert var_1 is False
    var_1.abbreviated_str()

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.__ne__(side_0)
    assert var_0 is False
    var_0.is_bid()

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.__ne__(side_0)
    assert var_0 is False
    var_1 = side_0.is_other_side(side_0)
    assert var_1 is False
    var_2 = side_0.abbreviated_str()
    assert var_2 == 'A'
    var_3 = module_0.get_side(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'buttonwood.MarketObjects.Side.Side'
    var_4 = var_2.__repr__()
    assert var_4 == "'A'"
    var_5 = var_3.abbreviated_str()
    assert var_5 == 'A'
    var_6 = side_0.__int__()
    assert var_6 == 1
    var_7 = var_5.__repr__()
    assert var_7 == "'A'"
    var_8 = var_4.__str__()
    var_5.is_bid()

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.other_side()
    var_1 = side_0.is_other_side(side_0)
    assert var_1 is False
    var_2 = side_0.abbreviated_str()
    assert var_2 == 'B'
    var_3 = module_0.get_side(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'buttonwood.MarketObjects.Side.Side'
    var_4 = var_3.__ne__(var_0)
    assert var_4 is True
    var_5 = var_0.__repr__()
    assert var_5 == 'Ask'
    var_6 = side_0.abbreviated_str()
    assert var_6 == 'B'
    var_7 = side_0.__int__()
    assert var_7 == 0
    var_8 = var_3.__repr__()
    assert var_8 == 'Bid'
    var_9 = var_5.__str__()
    assert var_9 == 'Ask'
    var_6.is_bid()

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.other_side()
    var_1 = var_0.is_bid()
    assert var_1 is False
    var_2 = var_0.is_other_side(side_0)
    assert var_2 is True
    var_1.is_bid()

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.other_side()
    var_1 = side_0.abbreviated_str()
    assert var_1 == 'A'
    var_2 = side_0.is_other_side(side_0)
    assert var_2 is False
    var_3 = side_0.abbreviated_str()
    assert var_3 == 'A'
    var_4 = module_0.get_side(var_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'buttonwood.MarketObjects.Side.Side'
    var_5 = var_4.__ne__(var_0)
    assert var_5 is True
    var_6 = var_1.__repr__()
    assert var_6 == "'A'"
    var_7 = side_0.abbreviated_str()
    assert var_7 == 'A'
    var_8 = side_0.__int__()
    assert var_8 == 1
    var_9 = var_4.__repr__()
    assert var_9 == 'Ask'
    var_10 = var_6.__str__()
    assert var_10 == "'A'"
    var_7.is_bid()

def test_case_19():
    bool_0 = False
    side_0 = module_0.Side(bool_0)
    assert module_0.Side.BID == 0
    assert module_0.Side.SIDE_STR == {0: 'Bid', 1: 'Ask'}
    assert module_0.Side.ABBREVIATED_SIDE_STR == {0: 'B', 1: 'A'}
    var_0 = side_0.other_side()
    var_1 = side_0.__ne__(side_0)
    assert var_1 is False
    var_2 = side_0.is_other_side(var_0)
    assert var_2 is True
    var_3 = side_0.abbreviated_str()
    assert var_3 == 'B'
    var_4 = side_0.is_other_side(side_0)
    assert var_4 is False
    var_5 = side_0.abbreviated_str()
    assert var_5 == 'B'
    var_6 = module_0.get_side(var_5)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'buttonwood.MarketObjects.Side.Side'
    var_7 = var_6.__ne__(var_0)
    assert var_7 is True
    bytes_0 = b'{f\xeac\x8c~+}\xc6\x01\xd3c\x1c&&\x12'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    with pytest.raises(AssertionError):
        module_0.Side(set_0)