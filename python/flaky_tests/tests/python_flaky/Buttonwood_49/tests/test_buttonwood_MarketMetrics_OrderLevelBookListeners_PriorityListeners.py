# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners as module_0

def test_case_0():
    bytes_0 = b'c\x92'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.better_priority_than(priority_0)
    assert var_0 is False

def test_case_1():
    set_0 = set()
    event_priority_listener_0 = module_0.EventPriorityListener(set_0, set_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    bytes_0 = b'c\xab'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.worse_priority_than(priority_0)
    assert var_0 is False
    var_1 = priority_0.ticks_from_opposite_tob()
    priority_1 = module_0.Priority(var_0, var_0, var_0)
    var_2 = priority_1.worse_priority_than(priority_1)
    assert var_2 is False
    var_3 = priority_1.further_from_opposite_tob(priority_1)
    assert var_3 is False
    var_4 = priority_1.closer_to_opposite_tob(priority_1)
    assert var_4 is False
    var_5 = priority_0.further_from_opposite_tob(priority_0)
    assert var_5 is False
    var_6 = priority_1.better_priority_than(priority_1)
    assert var_6 is False
    with pytest.raises(AssertionError):
        priority_1.better_priority_than(var_5)

def test_case_2():
    none_type_0 = None
    priority_0 = module_0.Priority(none_type_0, none_type_0, none_type_0)
    with pytest.raises(AssertionError):
        priority_0.worse_priority_than(none_type_0)

def test_case_3():
    bytes_0 = b"d\xeaNYx\xf3'\xbe@xw\x1dP\xb1"
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    with pytest.raises(AssertionError):
        priority_0.further_from_opposite_tob(bytes_0)

def test_case_4():
    float_0 = -2117.1298
    event_priority_listener_0 = module_0.EventPriorityListener(float_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'

def test_case_5():
    none_type_0 = None
    priority_0 = module_0.Priority(none_type_0, none_type_0, none_type_0)

def test_case_6():
    bytes_0 = b'c\x92'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.further_from_opposite_tob(priority_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -3383.65062
    event_priority_listener_0 = module_0.EventPriorityListener(float_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    event_priority_listener_0.handle_partial_fill_report(event_priority_listener_0, event_priority_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    event_priority_listener_0 = module_0.EventPriorityListener(none_type_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    event_priority_listener_0.handle_full_fill_report(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 2746.0
    event_priority_listener_0 = module_0.EventPriorityListener(float_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    var_0 = event_priority_listener_0.event_priority(event_priority_listener_0, float_0)
    var_0.side()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    priority_0 = module_0.Priority(bool_0, bool_0, bool_0)
    var_0 = priority_0.closer_to_opposite_tob(priority_0)
    assert var_0 is False
    var_1 = module_0.EventPriorityListener(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    var_1.notify_book_update(priority_0, bool_0, priority_0)

def test_case_11():
    bytes_0 = b'c\x92'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.worse_priority_than(priority_0)
    assert var_0 is False

def test_case_12():
    bytes_0 = b'c\x92'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.closer_to_opposite_tob(priority_0)
    assert var_0 is False

def test_case_13():
    bool_0 = True
    priority_0 = module_0.Priority(bool_0, bool_0, bool_0)
    var_0 = priority_0.worse_priority_than(priority_0)
    assert var_0 is False
    with pytest.raises(AssertionError):
        priority_0.closer_to_opposite_tob(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'c\xab'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.worse_priority_than(priority_0)
    assert var_0 is False
    var_1 = priority_0.ticks_from_opposite_tob()
    priority_1 = module_0.Priority(var_0, var_0, var_0)
    var_2 = priority_1.worse_priority_than(priority_1)
    assert var_2 is False
    var_3 = priority_1.further_from_opposite_tob(priority_1)
    assert var_3 is False
    var_4 = priority_1.closer_to_opposite_tob(priority_1)
    assert var_4 is False
    event_priority_listener_0 = module_0.EventPriorityListener(var_3, var_3)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    var_5 = event_priority_listener_0.priority_before_event(var_3, var_2)
    var_6 = priority_0.further_from_opposite_tob(priority_0)
    assert var_6 is False
    var_7 = priority_1.better_priority_than(priority_1)
    assert var_7 is False
    event_priority_listener_0.handle_cancel_replace_command(var_0, priority_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    set_0 = set()
    event_priority_listener_0 = module_0.EventPriorityListener(set_0, set_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    bytes_0 = b'c\xab'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.worse_priority_than(priority_0)
    assert var_0 is False
    var_1 = priority_0.ticks_from_opposite_tob()
    priority_1 = module_0.Priority(var_0, var_0, var_0)
    int_0 = -2050
    priority_2 = module_0.Priority(priority_0, int_0, var_1)
    var_2 = priority_1.further_from_opposite_tob(priority_2)
    assert var_2 is True
    var_1.further_from_opposite_tob(event_priority_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    event_priority_listener_0 = module_0.EventPriorityListener(set_0, set_0)
    assert f'{type(event_priority_listener_0).__module__}.{type(event_priority_listener_0).__qualname__}' == 'buttonwood.MarketMetrics.OrderLevelBookListeners.PriorityListeners.EventPriorityListener'
    bytes_0 = b'c\xab'
    priority_0 = module_0.Priority(bytes_0, bytes_0, bytes_0)
    var_0 = priority_0.worse_priority_than(priority_0)
    assert var_0 is False
    var_1 = priority_0.ticks_from_opposite_tob()
    priority_1 = module_0.Priority(var_0, var_0, var_0)
    bytes_1 = b'\xab%\xc6\xfa+m\xbc\xf2F\x986{'
    priority_2 = module_0.Priority(bytes_1, bytes_1, bytes_0)
    var_2 = priority_0.worse_priority_than(priority_2)
    assert var_2 is False
    var_0.timestamp()