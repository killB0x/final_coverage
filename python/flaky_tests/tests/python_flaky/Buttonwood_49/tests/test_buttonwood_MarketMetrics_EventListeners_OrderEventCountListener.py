# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketMetrics.EventListeners.OrderEventCountListener as module_0

def test_case_0():
    none_type_0 = None
    order_event_count_listener_0 = module_0.OrderEventCountListener(none_type_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 330
    order_event_count_listener_0 = module_0.OrderEventCountListener(int_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23
    order_event_count_listener_0.handle_cancel_replace_command(order_event_count_listener_0, order_event_count_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 60
    order_event_count_listener_0 = module_0.OrderEventCountListener(int_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23
    order_event_count_listener_0.handle_cancel_command(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    order_event_count_listener_0 = module_0.OrderEventCountListener(bool_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23
    order_event_count_listener_0.handle_partial_fill_report(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    str_0 = 'OD&K{?LU|o>\toW?1'
    order_event_count_listener_0 = module_0.OrderEventCountListener(dict_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23
    order_event_count_listener_0.handle_full_fill_report(str_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 's/;T):wpj'
    order_event_count_listener_0 = module_0.OrderEventCountListener(str_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23
    order_event_count_listener_0.handle_cancel_report(str_0, order_event_count_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 's/;T):wpj'
    order_event_count_listener_0 = module_0.OrderEventCountListener(str_0)
    assert module_0.OrderEventCountListener.NEW_ORDER == 1
    assert module_0.OrderEventCountListener.ACK == 2
    assert module_0.OrderEventCountListener.ACK_NEW_ORDERS == 3
    assert module_0.OrderEventCountListener.ACK_CANCEL_REPLACE == 4
    assert module_0.OrderEventCountListener.CANCEL_REPLACE == 5
    assert module_0.OrderEventCountListener.CANCEL_REQUEST == 6
    assert module_0.OrderEventCountListener.CANCEL_CONFIRM == 7
    assert module_0.OrderEventCountListener.NEW_FAK == 8
    assert module_0.OrderEventCountListener.NEW_FAR == 9
    assert module_0.OrderEventCountListener.NEW_FOK == 10
    assert module_0.OrderEventCountListener.PARTIAL_FILL == 11
    assert module_0.OrderEventCountListener.FULL_FILL == 12
    assert module_0.OrderEventCountListener.REJECT == 13
    assert module_0.OrderEventCountListener.REJECT_NEW == 14
    assert module_0.OrderEventCountListener.REJECT_CANCEL_REPLACE == 15
    assert module_0.OrderEventCountListener.REJECT_CANCEL == 16
    assert module_0.OrderEventCountListener.NEW_LIMIT == 17
    assert module_0.OrderEventCountListener.NEW_MARKET == 18
    assert module_0.OrderEventCountListener.FAKS_FULLY_FILLED == 19
    assert module_0.OrderEventCountListener.FAKS_PARTIALLY_FILLED == 20
    assert module_0.OrderEventCountListener.FOKS_FULLY_FILLED == 21
    assert module_0.OrderEventCountListener.FARS_FULLY_FILLED_ON_PLACEMENT == 22
    assert module_0.OrderEventCountListener.FARS_PARTIALLY_FILLED_ON_PLACEMENT == 23
    var_0 = order_event_count_listener_0.get_count(str_0, order_event_count_listener_0, order_event_count_listener_0)
    order_event_count_listener_0.handle_cancel_replace_command(order_event_count_listener_0, order_event_count_listener_0)