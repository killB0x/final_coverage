# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketMetrics.OrderLevelBookListeners.AggressiveImpactListener as module_0
import collections as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"x2\xfa\x08\xce\x02K\x07\xf2\xec\xfc\x8c\xb0'Ij"
    aggressive_act_0 = module_0.AggressiveAct(bytes_0)
    aggressive_act_0.calculate(bytes_0)

def test_case_1():
    str_0 = "WERN''$`>KU"
    aggressive_impact_listener_0 = module_0.AggressiveImpactListener(str_0)
    var_0 = aggressive_impact_listener_0.get_aggressive_impact(str_0, aggressive_impact_listener_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_2():
    none_type_0 = None
    aggressive_impact_listener_0 = module_0.AggressiveImpactListener(none_type_0)
    var_0 = aggressive_impact_listener_0.get_aggressive_qty(none_type_0, none_type_0)
    assert var_0 == 0

def test_case_3():
    bytes_0 = b'2\xbd#\xe4n}\x1a\xb2p'
    aggressive_act_0 = module_0.AggressiveAct(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    aggressive_act_0 = module_0.AggressiveAct(bool_0)
    var_0 = aggressive_act_0.aggressing_command()
    var_1 = aggressive_act_0.qty_at_price(aggressive_act_0, bool_0)
    aggressive_act_0.aggressing_user_id()

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 468
    aggressive_act_0 = module_0.AggressiveAct(int_0)
    aggressive_act_0.requested_qty()

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    aggressive_impact_listener_0 = module_0.AggressiveImpactListener(none_type_0)
    var_0 = aggressive_impact_listener_0.get_aggressive_qty(none_type_0, none_type_0)
    assert var_0 == 0
    var_1 = aggressive_impact_listener_0.get_aggressive_impact(aggressive_impact_listener_0, none_type_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    aggressive_act_0 = module_0.AggressiveAct(aggressive_impact_listener_0)
    var_2 = aggressive_act_0.is_closed()
    assert var_2 is False
    var_3 = aggressive_act_0.impact()
    var_4 = aggressive_impact_listener_0.handle_cancel_command(var_1, var_1)
    aggressive_act_0.calculate(aggressive_impact_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '\nThis file is part of Buttonwood.\n\nButtonwood is a python software package created to help quickly create, (re)build, or\nanalyze markets, market structures, and market participants.\n\nMIT License\n\nCopyright (c) 2016-2019 Peter F. Nabicht\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'
    aggressive_act_0 = module_0.AggressiveAct(str_0)
    aggressive_act_0.add_fill(aggressive_act_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    aggressive_act_0 = module_0.AggressiveAct(bool_0)
    var_0 = aggressive_act_0.impact()
    var_0.clean_up(bool_0)

def test_case_9():
    defaultdict_0 = module_1.defaultdict()
    aggressive_impact_listener_0 = module_0.AggressiveImpactListener(defaultdict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -740
    aggressive_impact_listener_0 = module_0.AggressiveImpactListener(int_0)
    aggressive_impact_listener_0.handle_partial_fill_report(int_0, aggressive_impact_listener_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    aggressive_act_0 = module_0.AggressiveAct(bool_0)
    aggressive_act_0.aggressive_side()