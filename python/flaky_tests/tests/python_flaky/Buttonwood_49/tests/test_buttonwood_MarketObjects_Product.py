# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.Product as module_0
import codecs as module_1

def test_case_0():
    complex_0 = (-1743.2158-4087.4456j)
    with pytest.raises(AssertionError):
        module_0.Product(complex_0, complex_0)

def test_case_1():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__ne__(product_0)
    assert var_0 is False
    var_1 = product_0.to_detailed_json()
    var_0.__next__()

def test_case_3():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__eq__(product_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__ne__(product_0)
    assert var_0 is False
    product_0.get_identifier(var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__ne__(product_0)
    assert var_0 is False
    var_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__hash__()
    var_1 = product_0.__str__()
    assert var_1 == '{"symbol": "\\"{~z(y3dF}:kK", "name": "\\"{~z(y3dF}:kK"}'
    var_2 = product_0.__str__()
    assert var_2 == '{"symbol": "\\"{~z(y3dF}:kK", "name": "\\"{~z(y3dF}:kK"}'
    module_1.getincrementalencoder(product_0)

def test_case_7():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__ne__(product_0)
    assert var_0 is False
    var_1 = product_0.to_detailed_json()
    with pytest.raises(AssertionError):
        product_0.set_identifier(var_1, var_0)

def test_case_8():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    none_type_0 = None
    product_1 = product_0.__hash__()
    with pytest.raises(AssertionError):
        product_0.set_identifier(product_1, none_type_0)

def test_case_9():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.__ne__(product_0)
    assert var_0 is False
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.Product(str_0, none_type_0)

def test_case_10():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.set_identifier(str_0, str_0)
    var_1 = product_0.__eq__(product_0)
    assert var_1 is True

def test_case_11():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.to_json()
    var_1 = product_0.__ne__(product_0)
    assert var_1 is False
    none_type_0 = None
    var_2 = product_0.set_identifier(str_0, str_0)
    with pytest.raises(AssertionError):
        module_0.Product(str_0, none_type_0)

def test_case_12():
    str_0 = '"{~z(y3dF}:kK'
    product_0 = module_0.Product(str_0, str_0)
    with pytest.raises(AssertionError):
        product_0.set_identifier(str_0, product_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '"{~z(y3dF}:kK'
    str_1 = '"{~z(-3dF}:&K'
    product_0 = module_0.Product(str_1, str_1)
    var_0 = product_0.to_json()
    product_1 = module_0.Product(str_0, str_1)
    var_1 = product_0.__ne__(product_1)
    assert var_1 is True
    var_2 = product_1.__hash__()
    var_3 = module_1.BufferedIncrementalDecoder()
    var_4 = product_1.set_identifier(str_0, str_0)
    var_5 = product_1.__eq__(product_1)
    assert var_5 is True
    var_1.getstate()