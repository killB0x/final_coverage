# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.MatchSeries as module_0

def test_case_0():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.qty_at_price(match_series_0)
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1845
    match_series_0 = module_0.MatchSeries(int_0)
    match_series_0.run_sanity_checks()

def test_case_2():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_side()
    var_1 = match_series_0.passive_qty()
    assert var_1 == 0
    var_2 = match_series_0.match_qty()
    assert var_2 == 0
    var_3 = match_series_0.price_to_qty()
    var_4 = match_series_0.qty_at_price(none_type_0, var_3)
    with pytest.raises(AssertionError):
        match_series_0.add_fill(var_1)

def test_case_3():
    tuple_0 = ()
    match_series_0 = module_0.MatchSeries(tuple_0)
    var_0 = match_series_0.price_to_qty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.defaultdict'
    assert len(var_0) == 0

def test_case_4():
    set_0 = set()
    match_series_0 = module_0.MatchSeries(set_0)
    var_0 = match_series_0.match_qty()
    assert var_0 == 0

def test_case_5():
    int_0 = -1845
    match_series_0 = module_0.MatchSeries(int_0)
    var_0 = match_series_0.balanced_match_qty()
    assert var_0 is True

def test_case_6():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.match_qty()
    assert var_0 == 0
    var_1 = match_series_0.aggressor_side()
    var_2 = match_series_0.passive_qty()
    assert var_2 == 0
    var_3 = match_series_0.prices(var_1)
    with pytest.raises(AssertionError):
        match_series_0.add_fill(var_2)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    match_series_0.average_price()

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.price_in_series(none_type_0, none_type_0)
    assert var_0 is False
    var_1 = match_series_0.aggressor_side()
    var_2 = match_series_0.passive_qty()
    assert var_2 == 0
    var_3 = match_series_0.match_qty()
    assert var_3 == 0
    match_series_0.run_sanity_checks()

def test_case_9():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_side()
    var_1 = match_series_0.timestamp()
    var_2 = match_series_0.match_qty()
    assert var_2 == 0
    var_3 = match_series_0.price_to_qty()

def test_case_10():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressive_fills()
    with pytest.raises(AssertionError):
        match_series_0.add_fill(var_0)

def test_case_11():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_side()
    var_1 = match_series_0.passive_qty()
    assert var_1 == 0
    var_2 = match_series_0.passive_fills()
    match_series_1 = module_0.MatchSeries(var_1)
    var_3 = match_series_0.match_qty()
    assert var_3 == 0

def test_case_12():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_side()
    var_1 = match_series_0.passive_qty()
    assert var_1 == 0
    var_2 = match_series_0.match_qty()
    assert var_2 == 0
    var_3 = match_series_0.aggressing_command()
    with pytest.raises(AssertionError):
        match_series_0.add_fill(var_1)

def test_case_13():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    with pytest.raises(AssertionError):
        match_series_0.add_fill(match_series_0)

def test_case_14():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_side()
    var_1 = match_series_0.passive_qty()
    assert var_1 == 0
    var_2 = match_series_0.match_qty()
    assert var_2 == 0
    with pytest.raises(AssertionError):
        match_series_0.add_fill(none_type_0)

def test_case_15():
    int_0 = -1845
    match_series_0 = module_0.MatchSeries(int_0)
    var_0 = match_series_0.aggressor_side()

@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b'4\x07\x7f.\x8d\x92\xb1\xf0\x82\x06Y7w'
    match_series_0 = module_0.MatchSeries(bytes_0)
    var_0 = match_series_0.qty_at_price(match_series_0)
    assert var_0 == 0
    var_1 = match_series_0.aggressing_command()
    match_series_0.price_to_qty()

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    match_series_0.average_price(none_type_0)

def test_case_18():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.price_in_series(none_type_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_fully_filled()
    var_1 = match_series_0.aggressor_side()
    var_2 = match_series_0.passive_qty()
    assert var_2 == 0
    var_3 = match_series_0.match_qty()
    assert var_3 == 0
    match_series_0.run_sanity_checks()

def test_case_20():
    bool_0 = True
    match_series_0 = module_0.MatchSeries(bool_0)
    var_0 = match_series_0.prices()

def test_case_21():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.match_qty(none_type_0)
    assert var_0 == 0

def test_case_22():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.aggressor_side()
    var_1 = match_series_0.passive_qty()
    assert var_1 == 0
    var_2 = match_series_0.match_qty()
    assert var_2 == 0
    var_3 = match_series_0.price_to_qty(var_1)
    with pytest.raises(AssertionError):
        match_series_0.add_fill(var_3)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    match_series_0 = module_0.MatchSeries(none_type_0)
    var_0 = match_series_0.qty_at_price(match_series_0)
    assert var_0 == 0
    match_series_0.average_price(none_type_0)