# Automatically generated by Pynguin.
import pytest
import buttonwood.MarketObjects.OHLCV as module_0
import builtins as module_1

def test_case_0():
    bool_0 = False
    o_h_l_c_0 = module_0.OHLC(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'

def test_case_1():
    bool_0 = True
    bool_1 = False
    with pytest.raises(AssertionError):
        module_0.OHLC(bool_0, bool_0, bool_0, bool_1, bool_0, bool_1)

def test_case_2():
    tuple_0 = ()
    o_h_l_c_0 = module_0.OHLC(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_0 = o_h_l_c_0.__ne__(o_h_l_c_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.OHLCPricesAndVolume(bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_4():
    int_0 = -18
    with pytest.raises(AssertionError):
        module_0.OHLCPricesAndVolume(int_0, int_0, int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xe7\x94\x1d)n\x95\xab\xb7BX'
    module_0.OHLCPricesAndVolume(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    o_h_l_c_0 = module_0.OHLC(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_0 = o_h_l_c_0.__eq__(tuple_0)
    assert var_0 is False
    var_1 = o_h_l_c_0.open()
    module_0.OHLCPricesAndVolume(var_1, tuple_0, var_0, var_1, var_1)

def test_case_7():
    bool_0 = False
    o_h_l_c_0 = module_0.OHLC(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_0 = o_h_l_c_0.high()

def test_case_8():
    bool_0 = False
    o_h_l_c_0 = module_0.OHLC(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_0 = o_h_l_c_0.low()

@pytest.mark.xfail(strict=True)
def test_case_9():
    tuple_0 = ()
    o_h_l_c_0 = module_0.OHLC(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    none_type_0 = None
    var_0 = o_h_l_c_0.__eq__(none_type_0)
    assert var_0 is False
    var_1 = o_h_l_c_0.open()
    var_2 = o_h_l_c_0.__ne__(o_h_l_c_0)
    assert var_2 is False
    var_1.low()

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -952
    bool_0 = True
    o_h_l_c_0 = module_0.OHLC(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_0 = o_h_l_c_0.__eq__(int_0)
    assert var_0 is False
    o_h_l_c_1 = module_0.OHLC(var_0, o_h_l_c_0, bool_0, var_0, var_0, var_0)
    var_1 = o_h_l_c_0.open()
    var_2 = o_h_l_c_1.close()
    o_h_l_c_2 = module_0.OHLC(int_0, int_0, o_h_l_c_1, int_0, int_0, bool_0)
    assert f'{type(o_h_l_c_2).__module__}.{type(o_h_l_c_2).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_3 = o_h_l_c_1.__ne__(o_h_l_c_0)
    assert var_3 is True
    int_1 = 5921
    module_0.OHLCPricesAndVolume(var_3, int_0, var_2, int_1, o_h_l_c_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    tuple_0 = ()
    o_h_l_c_0 = module_0.OHLC(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    o_h_l_c_1 = module_0.OHLC(o_h_l_c_0, o_h_l_c_0, o_h_l_c_0, o_h_l_c_0, tuple_0, tuple_0)
    var_0 = o_h_l_c_1.__eq__(o_h_l_c_0)
    assert var_0 is False
    object_0 = module_1.object()
    module_0.OHLC(o_h_l_c_1, var_0, o_h_l_c_0, tuple_0, object_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    tuple_0 = ()
    o_h_l_c_0 = module_0.OHLC(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)
    assert f'{type(o_h_l_c_0).__module__}.{type(o_h_l_c_0).__qualname__}' == 'buttonwood.MarketObjects.OHLCV.OHLC'
    var_0 = o_h_l_c_0.__eq__(tuple_0)
    assert var_0 is False
    o_h_l_c_1 = module_0.OHLC(o_h_l_c_0, var_0, tuple_0, tuple_0, var_0, var_0)
    var_1 = o_h_l_c_1.__eq__(o_h_l_c_0)
    assert var_1 is False
    var_2 = o_h_l_c_1.__ne__(o_h_l_c_0)
    assert var_2 is True
    var_1.open()