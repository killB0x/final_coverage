# Automatically generated by Pynguin.
import pytest
import blockchainetl_common.file_utils as module_0

def test_case_0():
    none_type_0 = None
    var_0 = module_0.get_file_handle(none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -1091.41011
    module_0.get_file_handle(float_0, create_parent_dirs=float_0)

def test_case_2():
    bool_0 = False
    var_0 = module_0.get_file_handle(bool_0, create_parent_dirs=bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.smart_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}
    module_0.close_silently(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.close_silently(none_type_0)

def test_case_5():
    str_0 = '(dX1N\\P\t\r)i$Vd:\r\x0bE'
    var_0 = module_0.smart_open(create_parent_dirs=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {'create_parent_dirs': '(dX1N\\P\t\r)i$Vd:\r\x0bE'}

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_0.smart_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}
    var_1 = var_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'
    var_2 = var_1.close()
    module_0.get_file_handle(var_0, binary=var_0, create_parent_dirs=var_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    noop_file_0 = module_0.NoopFile()
    var_0 = noop_file_0.readable()
    var_1 = noop_file_0.__enter__()
    module_0.get_file_handle(noop_file_0, noop_file_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.smart_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}
    var_1 = var_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'
    var_2 = var_1.__exit__()
    module_0.close_silently(var_0)

def test_case_9():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.get_file_handle(bool_0, binary=bool_0, create_parent_dirs=none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'
    var_1 = var_0.writable()
    var_2 = var_0.close()

@pytest.mark.xfail(strict=True)
def test_case_10():
    noop_file_0 = module_0.NoopFile()
    var_0 = module_0.smart_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}
    var_1 = noop_file_0.seekable()
    var_1.seekable()

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "x49pfG=tnX+!1E@ 'L"
    module_0.close_silently(str_0)

def test_case_12():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.get_file_handle(bool_0, binary=bool_0, create_parent_dirs=none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'
    var_1 = var_0.write(bool_0)
    var_2 = var_0.close()

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '-'
    module_0.get_file_handle(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'i}'
    var_0 = module_0.get_file_handle(str_0, binary=str_0, create_parent_dirs=str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == '_io.BufferedWriter'
    var_1 = var_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == '_io.BufferedWriter'
    var_2 = var_1.__exit__()
    var_2.close()

@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_0.smart_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}
    var_1 = var_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'blockchainetl_common.file_utils.NoopFile'
    var_2 = var_1.seekable()
    var_3 = module_0.get_file_handle(var_2, binary=var_0)
    var_4 = var_3.seekable()
    var_0.readable()

@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_0.smart_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}
    str_0 = '-'
    module_0.get_file_handle(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == '_io.TextIOWrapper'
    assert var_1.mode == 'w'
    var_2 = var_0.readable()