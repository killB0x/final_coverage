# Automatically generated by Pynguin.
import pytest
import blockchainetl_common.progress_logger as module_0
import blockchainetl_common.atomic_counter as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\x7f\xe1\x97\xb8\x15z\xb7\xc7o'
    set_0 = {bytes_0, bytes_0}
    progress_logger_0 = module_0.ProgressLogger(set_0, set_0, bytes_0)
    assert progress_logger_0.log_items_step == 5000
    assert progress_logger_0.logger == {b'\x7f\xe1\x97\xb8\x15z\xb7\xc7o'}
    progress_logger_0.finish()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\x7f\xe1\x97\xb8\x15z\xb7\xc7o'
    progress_logger_0 = module_0.ProgressLogger(bytes_0, log_item_step=bytes_0)
    assert progress_logger_0.log_percentage_step == 10
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    progress_logger_0.track()

@pytest.mark.xfail(strict=True)
def test_case_2():
    progress_logger_0 = module_0.ProgressLogger()
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_percentage_step == 10
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = progress_logger_0.start(progress_logger_0)
    var_1 = progress_logger_0.start()
    var_1.start()

def test_case_3():
    none_type_0 = None
    progress_logger_0 = module_0.ProgressLogger(log_percentage_step=none_type_0)
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = progress_logger_0.track()

@pytest.mark.xfail(strict=True)
def test_case_4():
    atomic_counter_0 = module_1.AtomicCounter()
    progress_logger_0 = module_0.ProgressLogger()
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_percentage_step == 10
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = atomic_counter_0.increment()
    var_1 = progress_logger_0.track()
    var_2 = progress_logger_0.finish()
    var_3 = atomic_counter_0.increment()
    var_4 = progress_logger_0.start(var_3)
    var_5 = progress_logger_0.finish()
    var_6 = progress_logger_0.track()
    var_3.track()

def test_case_5():
    bytes_0 = b'\x13\x18\x8f\x89\x11V'
    set_0 = {bytes_0, bytes_0}
    progress_logger_0 = module_0.ProgressLogger(log_percentage_step=set_0)
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = progress_logger_0.finish()

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1473
    atomic_counter_0 = module_1.AtomicCounter()
    progress_logger_0 = module_0.ProgressLogger()
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_percentage_step == 10
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = progress_logger_0.track()
    var_1 = progress_logger_0.start()
    var_2 = atomic_counter_0.increment()
    var_3 = progress_logger_0.start(var_2)
    var_4 = progress_logger_0.track(int_0)
    var_3.finish()

@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    bool_0 = True
    progress_logger_0 = module_0.ProgressLogger(set_0, log_item_step=bool_0)
    assert progress_logger_0.log_percentage_step == 10
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = progress_logger_0.track(bool_0)
    var_0.finish()

@pytest.mark.xfail(strict=True)
def test_case_8():
    atomic_counter_0 = module_1.AtomicCounter()
    progress_logger_0 = module_0.ProgressLogger()
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_percentage_step == 10
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = atomic_counter_0.increment()
    var_1 = atomic_counter_0.increment()
    var_2 = progress_logger_0.track()
    var_3 = atomic_counter_0.increment()
    var_4 = progress_logger_0.start(var_3)
    var_5 = progress_logger_0.track()
    var_1.start()

def test_case_9():
    atomic_counter_0 = module_1.AtomicCounter()
    progress_logger_0 = module_0.ProgressLogger()
    assert progress_logger_0.name == 'work'
    assert progress_logger_0.log_percentage_step == 10
    assert progress_logger_0.log_items_step == 5000
    assert f'{type(progress_logger_0.logger).__module__}.{type(progress_logger_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = atomic_counter_0.increment()
    var_1 = progress_logger_0.track()
    var_2 = progress_logger_0.finish()
    var_3 = atomic_counter_0.increment()
    var_4 = progress_logger_0.start(var_3)
    bool_0 = True
    var_5 = progress_logger_0.finish()
    int_0 = 643
    progress_logger_1 = module_0.ProgressLogger(log_percentage_step=bool_0)
    assert progress_logger_1.name == 'work'
    assert progress_logger_1.log_items_step == 5000
    assert f'{type(progress_logger_1.logger).__module__}.{type(progress_logger_1.logger).__qualname__}' == 'logging.Logger'
    var_6 = progress_logger_0.start(int_0)
    progress_logger_2 = module_0.ProgressLogger(log_percentage_step=var_4, log_item_step=progress_logger_1)
    assert progress_logger_2.name == 'work'
    assert f'{type(progress_logger_2.logger).__module__}.{type(progress_logger_2.logger).__qualname__}' == 'logging.Logger'
    var_7 = progress_logger_2.finish()
    var_8 = progress_logger_0.track(bool_0)