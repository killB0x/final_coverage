# Automatically generated by Pynguin.
import pytest
import blockchainetl_common.streaming.streamer as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '&kUedm7y'
    module_0.Streamer(start_block=str_0, end_block=str_0, block_batch_size=str_0)

def test_case_1():
    str_0 = '&Uedm7'
    streamer_0 = module_0.Streamer(period_seconds=str_0, retry_errors=str_0, pid_file=str_0)
    assert f'{type(streamer_0).__module__}.{type(streamer_0).__qualname__}' == 'blockchainetl_common.streaming.streamer.Streamer'
    assert f'{type(streamer_0.blockchain_streamer_adapter).__module__}.{type(streamer_0.blockchain_streamer_adapter).__qualname__}' == 'blockchainetl_common.streaming.streamer_adapter_stub.StreamerAdapterStub'
    assert streamer_0.last_synced_block_file == 'last_synced_block.txt'
    assert streamer_0.lag == 0
    assert streamer_0.start_block is None
    assert streamer_0.end_block is None
    assert streamer_0.period_seconds == '&Uedm7'
    assert streamer_0.block_batch_size == 10
    assert streamer_0.retry_errors == '&Uedm7'
    assert streamer_0.pid_file == '&Uedm7'
    assert streamer_0.last_synced_block == 0

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '&/edm7'
    module_0.Streamer(last_synced_block_file=str_0, period_seconds=str_0, retry_errors=str_0)
    var_0 = streamer_0.stream()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.delete_file(none_type_0)

def test_case_4():
    str_0 = 'QBRPg37Ok'
    with pytest.raises(ValueError):
        module_0.init_last_synced_block_file(str_0, str_0)

def test_case_5():
    str_0 = 'QBRPg37Ok'
    with pytest.raises(ValueError):
        module_0.init_last_synced_block_file(str_0, str_0)

def test_case_6():
    str_0 = '&Uedm7'
    module_0.read_last_synced_block(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '&Uedm7'
    streamer_0 = module_0.Streamer(period_seconds=str_0, retry_errors=str_0, pid_file=str_0)
    assert f'{type(streamer_0).__module__}.{type(streamer_0).__qualname__}' == 'blockchainetl_common.streaming.streamer.Streamer'
    assert f'{type(streamer_0.blockchain_streamer_adapter).__module__}.{type(streamer_0.blockchain_streamer_adapter).__qualname__}' == 'blockchainetl_common.streaming.streamer_adapter_stub.StreamerAdapterStub'
    assert streamer_0.last_synced_block_file == 'last_synced_block.txt'
    assert streamer_0.lag == 0
    assert streamer_0.start_block is None
    assert streamer_0.end_block is None
    assert streamer_0.period_seconds == '&Uedm7'
    assert streamer_0.block_batch_size == 10
    assert streamer_0.retry_errors == '&Uedm7'
    assert streamer_0.pid_file == '&Uedm7'
    assert streamer_0.last_synced_block == 0
    streamer_0.stream()

def test_case_8():
    str_0 = '&kUedm7'
    var_0 = module_0.delete_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '&/edm7'
    streamer_0 = module_0.Streamer(period_seconds=str_0, retry_errors=str_0, pid_file=str_0)
    assert f'{type(streamer_0).__module__}.{type(streamer_0).__qualname__}' == 'blockchainetl_common.streaming.streamer.Streamer'
    assert f'{type(streamer_0.blockchain_streamer_adapter).__module__}.{type(streamer_0.blockchain_streamer_adapter).__qualname__}' == 'blockchainetl_common.streaming.streamer_adapter_stub.StreamerAdapterStub'
    assert streamer_0.last_synced_block_file == 'last_synced_block.txt'
    assert streamer_0.lag == 0
    assert streamer_0.start_block is None
    assert streamer_0.end_block is None
    assert streamer_0.period_seconds == '&/edm7'
    assert streamer_0.block_batch_size == 10
    assert streamer_0.retry_errors == '&/edm7'
    assert streamer_0.pid_file == '&/edm7'
    assert streamer_0.last_synced_block == 0
    module_0.write_to_file(str_0, streamer_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '&/edm7'
    streamer_0 = module_0.Streamer(lag=str_0, period_seconds=str_0)
    assert f'{type(streamer_0).__module__}.{type(streamer_0).__qualname__}' == 'blockchainetl_common.streaming.streamer.Streamer'
    assert f'{type(streamer_0.blockchain_streamer_adapter).__module__}.{type(streamer_0.blockchain_streamer_adapter).__qualname__}' == 'blockchainetl_common.streaming.streamer_adapter_stub.StreamerAdapterStub'
    assert streamer_0.last_synced_block_file == 'last_synced_block.txt'
    assert streamer_0.lag == '&/edm7'
    assert streamer_0.start_block is None
    assert streamer_0.end_block is None
    assert streamer_0.period_seconds == '&/edm7'
    assert streamer_0.block_batch_size == 10
    assert streamer_0.retry_errors is True
    assert streamer_0.pid_file is None
    assert streamer_0.last_synced_block == 0
    streamer_0.stream()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    str_0 = 'k'
    streamer_0 = module_0.Streamer(period_seconds=str_0, block_batch_size=str_0, retry_errors=bool_0, pid_file=str_0)
    assert f'{type(streamer_0).__module__}.{type(streamer_0).__qualname__}' == 'blockchainetl_common.streaming.streamer.Streamer'
    assert f'{type(streamer_0.blockchain_streamer_adapter).__module__}.{type(streamer_0.blockchain_streamer_adapter).__qualname__}' == 'blockchainetl_common.streaming.streamer_adapter_stub.StreamerAdapterStub'
    assert streamer_0.last_synced_block_file == 'last_synced_block.txt'
    assert streamer_0.lag == 0
    assert streamer_0.start_block is None
    assert streamer_0.end_block is None
    assert streamer_0.period_seconds == 'k'
    assert streamer_0.block_batch_size == 'k'
    assert streamer_0.retry_errors is False
    assert streamer_0.pid_file == 'k'
    assert streamer_0.last_synced_block == 0
    streamer_0.stream()

def test_case_12():
    bool_0 = False
    streamer_0 = module_0.Streamer(end_block=bool_0)
    assert f'{type(streamer_0).__module__}.{type(streamer_0).__qualname__}' == 'blockchainetl_common.streaming.streamer.Streamer'
    assert f'{type(streamer_0.blockchain_streamer_adapter).__module__}.{type(streamer_0.blockchain_streamer_adapter).__qualname__}' == 'blockchainetl_common.streaming.streamer_adapter_stub.StreamerAdapterStub'
    assert streamer_0.last_synced_block_file == 'last_synced_block.txt'
    assert streamer_0.lag == 0
    assert streamer_0.start_block is None
    assert streamer_0.end_block is False
    assert streamer_0.period_seconds == 10
    assert streamer_0.block_batch_size == 10
    assert streamer_0.retry_errors is True
    assert streamer_0.pid_file is None
    assert streamer_0.last_synced_block == 0
    var_0 = streamer_0.stream()

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '&/edm7'
    none_type_0 = None
    bool_0 = False
    module_0.Streamer(last_synced_block_file=str_0, end_block=bool_0, pid_file=none_type_0)
    var_0 = streamer_0.stream()