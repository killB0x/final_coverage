# Automatically generated by Pynguin.
import pytest
import blockchainetl_common.graph.graph_operations as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    graph_operations_0 = module_0.GraphOperations(tuple_0, prefetch_size=tuple_0)
    graph_operations_0.get_bounds_for_y_coordinate(tuple_0)

def test_case_1():
    dict_0 = {}
    point_0 = module_0.find_best_bounds(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2253
    point_0 = module_0.Point(int_0, int_0)
    var_0 = module_0.interpolate(point_0, point_0, point_0)
    assert var_0 == 2253
    point_0.get_bounds_for_y_coordinate(var_0)

def test_case_3():
    float_0 = -3362.4301209081873
    graph_operations_0 = module_0.GraphOperations(float_0)
    bytes_0 = b'\x83\x0e'
    var_0 = module_0.bound(float_0, bytes_0)
    assert var_0 == 15

def test_case_4():
    out_of_bounds_error_0 = module_0.OutOfBoundsError()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Reducing batch size to {}.'
    module_0.find_best_bounds(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.pairwise(none_type_0)

def test_case_7():
    dict_0 = {}
    point_0 = module_0.Point(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 2200
    point_0 = module_0.Point(int_0, int_0)
    set_0 = {point_0}
    graph_operations_0 = module_0.GraphOperations(point_0, prefetch_size=set_0)
    var_0 = point_0.__str__()
    assert var_0 == '(2200,2200)'
    graph_operations_0.get_bounds_for_y_coordinate(point_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 2200
    point_0 = module_0.Point(int_0, int_0)
    var_0 = point_0.__repr__()
    assert var_0 == 'Point(2200,2200)'
    graph_operations_0 = module_0.GraphOperations(int_0, int_0, point_0)
    graph_operations_0.get_bounds_for_y_coordinate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    var_0 = module_0.find_best_bounds(set_0, set_0)
    bytes_0 = b'\xe7\xf6'
    none_type_0 = None
    module_0.bound(none_type_0, bytes_0)

def test_case_11():
    float_0 = 1632.364
    graph_operations_0 = module_0.GraphOperations(float_0)
    bytes_0 = b'\x83\x0e'
    var_0 = module_0.bound(float_0, bytes_0)
    assert var_0 == 130

def test_case_12():
    float_0 = -3362.4301209081873
    graph_operations_0 = module_0.GraphOperations(float_0)
    bytes_0 = b'u\x0e'
    var_0 = module_0.bound(float_0, bytes_0)
    assert var_0 == 15
    var_1 = module_0.bound(var_0, bytes_0)
    assert var_1 == 15

@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    point_0 = module_0.Point(tuple_0, tuple_0)
    tuple_1 = (tuple_0, point_0)
    point_1 = module_0.Point(tuple_1, point_0)
    set_0 = {point_1, point_1}
    module_0.interpolate(point_1, point_0, set_0)