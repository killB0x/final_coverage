# Automatically generated by Pynguin.
import pytest
import wrfpy.utils as module_0

def test_case_0():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert f'{type(module_0.logger.handlers).__module__}.{type(module_0.logger.handlers).__qualname__}' == 'builtins.list'
    assert module_0.logger.disabled is False

def test_case_1():
    dict_0 = module_0.get_wrfpy_path()
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert f'{type(module_0.logger.handlers).__module__}.{type(module_0.logger.handlers).__qualname__}' == 'builtins.list'
    assert module_0.logger.disabled is False
    with pytest.raises(OSError):
        module_0.silentremove(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    module_0.silentremove(dict_0)

def test_case_3():
    str_0 = 'a G\x0cu[GR'
    with pytest.raises(ValueError):
        module_0.return_validate(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'"\xfd\x87u\xd6\xc0\x8d\t\x0ch{<\xcf\x9e\x1d\xfc'
    var_0 = module_0.silentremove(bytes_0)
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert f'{type(module_0.logger.handlers).__module__}.{type(module_0.logger.handlers).__qualname__}' == 'builtins.list'
    assert module_0.logger.disabled is False
    var_1 = module_0.devnull()
    assert var_1 == -3
    var_2 = module_0.datetime_range(var_1, var_1, var_1)
    dict_0 = {}
    var_3 = module_0.datetime_range(var_1, var_1, dict_0)
    module_0.excepthook()
    var_4 = module_0.excepthook(*var_3)
    var_5 = module_0.return_validate(var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_0.get_logger()
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert f'{type(module_0.logger.handlers).__module__}.{type(module_0.logger.handlers).__qualname__}' == 'builtins.list'
    assert module_0.logger.disabled is False
    module_0.check_file_exists(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert f'{type(module_0.logger.handlers).__module__}.{type(module_0.logger.handlers).__qualname__}' == 'builtins.list'
    assert module_0.logger.disabled is False
    module_0.datetime_to_string(var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'8\x7f\x87lP/d\xf9!'
    module_0.start_logging(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    dict_0 = {}
    var_1 = module_0.datetime_range(var_0, var_0, dict_0)
    var_2 = module_0.excepthook(*var_1)
    module_0.start_logging(var_2)

def test_case_9():
    var_0 = module_0.get_logger()
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    module_0.timesteps_wrfout(bool_0)

def test_case_11():
    var_0 = module_0.excepthook()
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False

def test_case_12():
    var_0 = module_0.get_wrfpy_path()
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    module_0.get_max_dom(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    module_0.check_file_exists(bool_0)
    var_1 = module_0.days_hours_minutes_seconds(var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    dict_0 = {}
    var_1 = module_0.datetime_range(var_0, var_0, dict_0)
    var_2 = module_0.excepthook(*var_1)
    module_0.start_logging(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    module_0.check_file_exists(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'V\x0c'
    var_0 = module_0.silentremove(str_0)
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    var_1 = module_0.devnull()
    assert var_1 == -3
    module_0.datetime_to_string(var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'"\xfd\x87u\xd6\xc0\x8d\t\x0ch{<\xcf\x9e\x1d\xfc'
    var_0 = module_0.check_file_exists(bytes_0, bytes_0)
    assert var_0 is False
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    var_1 = module_0.silentremove(bytes_0)
    var_2 = module_0.devnull()
    assert var_2 == -3
    var_3 = module_0.datetime_range(var_2, var_2, var_2)
    var_4 = module_0.datetime_range(var_2, var_2, var_3)
    var_5 = module_0.excepthook()
    module_0.excepthook(*var_4)

@pytest.mark.xfail(strict=True)
def test_case_19():
    dict_0 = {}
    var_0 = module_0.datetime_range(dict_0, dict_0, dict_0)
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    module_0.excepthook(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    var_1 = module_0.datetime_range(var_0, var_0, var_0)
    module_0.excepthook(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_21():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    var_1 = module_0.datetime_range(var_0, var_0, var_0)
    bool_0 = False
    var_2 = module_0.check_file_exists(bool_0, var_1)
    assert var_2 is False
    var_3 = module_0.get_wrfpy_path()
    var_4 = module_0.devnull()
    assert var_4 == -3
    module_0.testjob(var_3)

def test_case_22():
    var_0 = module_0.devnull()
    assert var_0 == -3
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    dict_0 = {}
    var_1 = module_0.datetime_range(var_0, var_0, dict_0)
    var_2 = module_0.excepthook(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '[1;rwc\\iFb\x0c8q\x0cMh~'
    var_0 = module_0.return_validate(str_0, str_0)
    assert module_0.DEFAULT_LOG_LEVEL == 'debug'
    assert module_0.LOG_LEVELS == {'debug': 10, 'info': 20, 'warning': 30, 'error': 40, 'critical': 50}
    assert module_0.LOG_FORMAT == '%(asctime)s - %(levelname)s - %(message)s'
    assert module_0.DATE_FORMAT == '%Y/%m/%d/%H:%M:%S'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.filters == []
    assert module_0.logger.name == 'root'
    assert module_0.logger.level == 10
    assert module_0.logger.parent is None
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    module_0.datetime_to_string(var_0, var_0)