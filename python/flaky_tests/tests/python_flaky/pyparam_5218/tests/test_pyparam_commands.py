# Automatically generated by Pynguin.
import pytest
import pyparam.commands as module_0
import pyparam.help as module_1

def test_case_0():
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'

def test_case_1():
    str_0 = '_hcmd'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, str_0)

def test_case_2():
    commands_parse_error_0 = module_0.CommandsParseError()

@pytest.mark.xfail(strict=True)
def test_case_3():
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    commands_0.__setattr__(commands_0, commands_0)

def test_case_4():
    str_0 = 'KK!U[+.'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '_props'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, str_0)
    var_1 = commands_0.__setattr__(str_0, str_0)
    var_0.__setattr__(var_0, commands_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    commands_parse_error_0 = module_0.CommandsParseError()
    dict_0 = {}
    commands_parse_error_1 = module_0.CommandsParseError(**dict_0)
    list_0 = []
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    commands_parse_error_2 = module_0.CommandsParseError(*list_0)
    none_type_0 = None
    str_0 = '__codeend__'
    var_0 = commands_0.__setattr__(str_0, none_type_0)
    helps_0 = module_1.Helps()
    var_1 = helps_0.get(str_0)
    var_1.__getattr__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '_cmd'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, str_0)
    var_1 = commands_0.__getattr__(str_0)
    commands_0.__setattr__(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    commands_0.__getnewargs_ex__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '_desc'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, str_0)
    str_1 = 'efi'
    commands_0.__setattr__(str_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '_hcmd'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    commands_0.__setattr__(str_0, commands_0)

def test_case_11():
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    str_0 = 'ef\n<9'
    var_0 = commands_0.__getattr__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.params.Params'
    var_1 = commands_0.__setattr__(str_0, var_0)
    commands_parse_error_0 = module_0.CommandsParseError(*str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    str_0 = 'eKo'
    var_0 = commands_0.__getattr__(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.params.Params'
    var_1 = commands_0.__setattr__(str_0, var_0)
    list_0 = []
    var_1.pop(var_0, *list_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '_hcmd'
    list_0 = [str_0, str_0, str_0]
    commands_parse_error_0 = module_0.CommandsParseError(*list_0)
    commands_parse_error_1 = module_0.CommandsParseError()
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, list_0)
    var_1 = commands_0.__setattr__(str_0, str_0)
    commands_0.__setattr__(list_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '_theme'
    commands_parse_error_0 = module_0.CommandsParseError()
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    commands_0.__setattr__(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '_desc'
    commands_parse_error_0 = module_0.CommandsParseError()
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    var_0 = commands_0.__setattr__(str_0, str_0)
    var_1 = commands_0.__getattr__(str_0)
    var_2 = commands_0.__setattr__(str_0, var_0)
    var_1.__setattr__(var_1, commands_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '_prefix'
    commands_0 = module_0.Commands()
    assert f'{type(commands_0).__module__}.{type(commands_0).__qualname__}' == 'pyparam.commands.Commands'
    commands_0.__setattr__(str_0, commands_0)