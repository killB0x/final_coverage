# Automatically generated by Pynguin.
import pytest
import pyparam.param as module_0
import ast as module_1

def test_case_0():
    param_type_error_0 = module_0.ParamTypeError()
    with pytest.raises(module_0.ParamNameError):
        module_0.Param(param_type_error_0)

def test_case_1():
    str_0 = 'q'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'q'
    assert param_0.default == 'q'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'

def test_case_2():
    param_name_error_0 = module_0.ParamNameError()

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_comp_0 = module_1.ListComp()
    module_0.Param(list_comp_0, list_comp_0)

def test_case_4():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_value(param_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'd'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

def test_case_5():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'd'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

def test_case_6():
    str_0 = ''
    with pytest.raises(module_0.ParamNameError):
        module_0.Param(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0)
    assert len(param_0.stacks) == 1
    param_0.set_type(param_0, str_0)

def test_case_8():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0)

def test_case_9():
    str_0 = 'b'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'b'
    assert param_0.default == 'b'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        param_0.set_callback(str_0)

def test_case_10():
    str_0 = 'r'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default == 'r'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0, str_0)
    assert len(param_0.stacks) == 1
    var_1 = param_0.__hash__()

def test_case_11():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_show()
    assert var_0.default is None
    with pytest.raises(TypeError):
        param_0.set_callback(param_0)

def test_case_12():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0)
    assert len(param_0.stacks) == 1

def test_case_13():
    str_0 = 'r'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default == 'r'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push()
    assert param_0.stacks == [('str:', [])]

def test_case_14():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(typename=str_0)
    assert param_0.stacks == [('dict:', [])]

def test_case_15():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_value(param_0)
    assert var_0.default is None
    var_1 = param_0.set_required()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == '_'
    assert var_1.default is None
    assert var_1.stacks == []
    assert var_1.callback is None

def test_case_16():
    str_0 = 'E'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'E'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0)
    assert param_0.stacks == [('auto:', ['E'])]
    var_1 = param_0.checkout()
    assert param_0.stacks == []

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'pL'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'pL'
    assert param_0.default == 'pL'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push()
    assert param_0.stacks == [('str:', [])]
    param_0.checkout()

def test_case_18():
    str_0 = 'py'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'py'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_required()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'py'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_value(param_0)
    assert var_0.default is None
    param_0.set_type(str_0, var_0)

def test_case_20():
    str_0 = 'py'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'py'
    assert param_0.default == 'py'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_desc(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'py'
    assert var_0.default == 'py'
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.checkout()

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default == 'list'
    assert var_0.stacks == []
    assert var_0.callback is None
    var_0.push(typename=param_0)

def test_case_22():
    str_0 = '_'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default == '_'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.dict()

def test_case_23():
    str_0 = 'b'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'b'
    assert param_0.default == 'b'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0, param_0)

def test_case_24():
    str_0 = 'b'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'b'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'b'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

def test_case_25():
    str_0 = 'E'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'E'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.__ne__(param_0)
    assert var_0 is False

def test_case_26():
    str_0 = 'py'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'py'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'py'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'b'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'b'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'b'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push()
    assert param_0.stacks == [('bool:', [])]
    assert var_0.stacks == [('bool:', [])]
    param_0.set_required(var_1)

def test_case_28():
    str_0 = 's'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 's'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_desc(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 's'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = 'r'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    param_0.set_desc(param_0)

def test_case_30():
    str_0 = 'r'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0)

def test_case_31():
    str_0 = 'r'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default == 'r'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0, str_0)
    assert param_0.stacks == [('str:', ['r'])]

def test_case_32():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0)
    assert len(param_0.stacks) == 1
    var_1 = param_0.set_type(str_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == '_'
    assert var_1.default is None
    assert f'{type(var_1.stacks).__module__}.{type(var_1.stacks).__qualname__}' == 'builtins.list'
    assert len(var_1.stacks) == 1
    assert var_1.callback is None

def test_case_33():
    str_0 = 'b'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'b'
    assert param_0.default == 'b'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push()
    assert param_0.stacks == [('str:', [])]
    var_1 = param_0.set_callback(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == 'b'
    assert var_1.default == 'b'
    assert var_1.stacks == [('str:', [])]
    assert var_1.callback is None
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0)

def test_case_34():
    str_0 = 's'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 's'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0)
    assert param_0.stacks == [('auto:', ['s'])]
    var_1 = param_0.push(param_0, str_0)
    assert len(param_0.stacks) == 2

def test_case_35():
    str_0 = 'r'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default == 'r'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0, str_0)
    assert param_0.stacks == [('str:', ['r'])]
    var_1 = param_0.push(var_0, str_0)
    assert param_0.stacks == [('str:', [None])]

def test_case_36():
    str_0 = 'py'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'py'
    assert param_0.default == 'py'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_desc(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'py'
    assert var_0.default == 'py'
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.set_required()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == 'py'
    assert var_1.default == 'py'
    assert var_1.stacks == []
    assert var_1.callback is None

def test_case_37():
    str_0 = 'r'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(typename=str_0)
    assert param_0.stacks == [('auto:', [])]
    var_1 = param_0.checkout()
    assert param_0.stacks == []

def test_case_38():
    str_0 = 'a'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'a'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'a'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

def test_case_39():
    str_0 = 'py'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'py'
    assert param_0.default == 'py'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0, str_0)

def test_case_40():
    str_0 = 't'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 't'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    list_0 = [param_0]
    var_0 = param_0.set_desc(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 't'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = 'r'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'r'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    param_1 = module_0.Param(str_0, param_0)
    assert f'{type(param_1).__module__}.{type(param_1).__qualname__}' == 'pyparam.param.Param'
    assert param_1.show is True
    assert param_1.name == 'r'
    assert f'{type(param_1.default).__module__}.{type(param_1.default).__qualname__}' == 'pyparam.param.Param'
    assert param_1.stacks == []
    assert param_1.callback is None
    param_1.push()

def test_case_42():
    str_0 = 's'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 's'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 's'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

def test_case_43():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default == 'list'
    assert var_0.stacks == []
    assert var_0.callback is None

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = 'p'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'p'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0)
    assert len(param_0.stacks) == 1
    var_1 = var_0.__repr__()
    var_2 = param_0.push(typename=str_0)
    assert len(param_0.stacks) == 2
    param_0.checkout()

def test_case_45():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = param_0.set_value(none_type_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == '_'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push(param_0)
    assert len(param_0.stacks) == 1
    assert len(var_0.stacks) == 1
    var_2 = var_0.checkout()
    assert param_0.stacks == []
    assert var_0.stacks == []

def test_case_46():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0)
    assert len(param_0.stacks) == 1
    var_1 = param_0.push(str_0)
    var_2 = param_0.checkout()
    assert param_0.stacks == []

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = '_'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '_'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = param_0.set_value(none_type_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == '_'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push(str_0)
    assert param_0.stacks == [('NoneType:', ['_'])]
    assert var_0.stacks == [('NoneType:', ['_'])]
    param_0.checkout()

def test_case_48():
    set_0 = set()
    with pytest.raises(module_0.ParamNameError):
        module_0.Param(set_0, set_0)

def test_case_49():
    str_0 = 'd'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default == 'd'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0)

def test_case_50():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.__ne__(param_0)
    assert var_0 is False
    var_1 = param_0.set_value(var_0)
    assert var_1.default is None
    var_2 = param_0.set_type(str_0, param_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pyparam.param.Param'
    assert var_2.show is True
    assert var_2.name == 'd'
    assert var_2.default is None
    assert var_2.stacks == []
    assert var_2.callback is None

@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_value(param_0)
    assert var_0.default is None
    param_0.set_type(str_0, param_0)

def test_case_52():
    str_0 = '5'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == '5'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0)
    assert param_0.stacks == [('auto:', ['5'])]
    var_1 = param_0.checkout()
    assert param_0.stacks == []

def test_case_53():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0, str_0)
    assert param_0.stacks == [('dict:', ['d'])]
    var_1 = param_0.checkout()
    assert param_0.stacks == []

@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(param_0, str_0)
    assert len(param_0.stacks) == 1
    param_0.checkout()

def test_case_55():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(typename=str_0)
    assert param_0.stacks == [('dict:', [])]
    var_1 = param_0.checkout()
    assert param_0.stacks == []

def test_case_56():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push()
    assert param_0.stacks == [('str:', [])]
    var_1 = param_0.push(typename=str_0)
    assert param_0.stacks == [('list:', [])]

@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(str_0)
    assert param_0.stacks == [('auto:', ['d'])]
    var_1 = param_0.push(param_0, str_0)
    assert len(param_0.stacks) == 1
    var_0.set_type(param_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'd'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.push(str_0)
    assert param_0.stacks == [('dict:', [{}, 'd'])]
    assert var_0.stacks == [('dict:', [{}, 'd'])]
    var_0.checkout()

def test_case_59():
    str_0 = 's'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 's'
    assert param_0.default == 's'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    str_1 = " :#(Jra!0'_M2xs"
    var_0 = param_0.set_value(param_0)
    assert var_0.default == 's'
    with pytest.raises(module_0.ParamTypeError):
        var_0.set_type(str_1)

def test_case_60():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(typename=str_0)
    assert param_0.stacks == [('list:', [])]

def test_case_61():
    str_0 = 'list'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.checkout()

def test_case_62():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(typename=str_0)
    assert param_0.stacks == [('list:', [])]
    var_1 = param_0.set_type(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == 'list'
    assert var_1.default == 'list'
    assert var_1.stacks == [('list:', [])]
    assert var_1.callback is None
    var_2 = var_1.checkout()
    assert param_0.stacks == []
    assert var_1.stacks == []

def test_case_63():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_value(param_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default == 'list'
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.set_type(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == 'list'
    assert var_1.default == 'list'
    assert var_1.stacks == []
    assert var_1.callback is None

@pytest.mark.xfail(strict=True)
def test_case_64():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.push(typename=str_0)
    assert param_0.stacks == [('list:', [])]
    var_1 = param_0.push(typename=str_0)
    var_0.push()

def test_case_65():
    str_0 = 'list'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default == 'list'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default == 'list'
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push(typename=str_0)
    assert param_0.stacks == [('list:', ['list'])]
    assert var_0.stacks == [('list:', ['list'])]

@pytest.mark.xfail(strict=True)
def test_case_66():
    str_0 = 'list'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    param_1 = module_0.Param(str_0)
    assert param_1.default is None
    var_0 = param_1.push(typename=str_0)
    assert param_1.stacks == [('list:', [])]
    var_1 = param_1.checkout()
    assert param_1.stacks == []
    var_2 = param_1.set_required(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pyparam.param.Param'
    assert var_2.show is True
    assert var_2.name == 'list'
    assert var_2.default is None
    assert var_2.stacks == []
    assert var_2.callback is None
    var_3 = param_0.__eq__(param_1)
    assert var_3 is False
    var_1.visit_Nonlocal(var_2)

def test_case_67():
    str_0 = 'list'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.push()
    assert param_0.stacks == [('list:', [])]
    assert var_0.stacks == [('list:', [])]

@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = 'd'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'd'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0, param_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'd'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.push(param_0)
    assert len(param_0.stacks) == 1
    assert len(var_0.stacks) == 1
    var_2 = param_0.__eq__(var_1)
    assert var_2 is True
    var_0.checkout()

def test_case_69():
    str_0 = 'list'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.str()
    assert var_1 == 'None'
    var_2 = var_0.push(var_1)
    assert param_0.stacks == [('list:', ['None'])]
    assert var_0.stacks == [('list:', ['None'])]
    var_3 = param_0.push(var_0)
    assert len(param_0.stacks) == 1
    assert len(var_0.stacks) == 1
    var_4 = var_0.checkout()
    assert param_0.stacks == []
    assert var_0.stacks == []

def test_case_70():
    str_0 = 'list'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'list'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_desc(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'list'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push(str_0)
    assert param_0.stacks == [('auto:', ['list'])]
    assert var_0.stacks == [('auto:', ['list'])]
    var_2 = param_0.push(typename=str_0)
    var_3 = param_0.set_value(param_0)
    assert var_3.default is None
    assert var_3.stacks == [('auto:', ['list'])]

def test_case_71():
    str_0 = 'v'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'v'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None

def test_case_72():
    str_0 = 'v'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'v'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push(str_0)
    assert param_0.stacks == [('verbose:', ['v'])]
    assert var_0.stacks == [('verbose:', ['v'])]
    var_2 = var_0.checkout()
    assert param_0.stacks == []
    assert var_0.stacks == []

def test_case_73():
    str_0 = 'v'
    param_0 = module_0.Param(str_0, str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default == 'v'
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    with pytest.raises(module_0.ParamTypeError):
        param_0.set_type(str_0)

@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = 'v'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'v'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = var_0.push(param_0)
    assert len(param_0.stacks) == 1
    assert len(var_0.stacks) == 1
    param_0.checkout()

def test_case_75():
    str_0 = 'v'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_type(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'v'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.push(var_0)
    assert len(param_0.stacks) == 1
    assert len(var_0.stacks) == 1
    var_2 = param_0.set_type(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pyparam.param.Param'
    assert var_2.show is True
    assert var_2.name == 'v'
    assert var_2.default is None
    assert f'{type(var_2.stacks).__module__}.{type(var_2.stacks).__qualname__}' == 'builtins.list'
    assert len(var_2.stacks) == 1
    assert var_2.callback is None

def test_case_76():
    str_0 = 'v'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    var_0 = param_0.set_required()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyparam.param.Param'
    assert var_0.show is True
    assert var_0.name == 'v'
    assert var_0.default is None
    assert var_0.stacks == []
    assert var_0.callback is None
    var_1 = param_0.__eq__(var_0)
    assert var_1 is True
    var_2 = param_0.set_type(str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pyparam.param.Param'
    assert var_2.show is True
    assert var_2.name == 'v'
    assert var_2.default is None
    assert var_2.stacks == []
    assert var_2.callback is None
    str_1 = ''
    var_3 = var_0.set_value(param_0, str_1)
    var_4 = param_0.set_required(var_0)
    var_5 = var_4.push()
    assert param_0.stacks == [('verbose:', [])]
    assert var_0.stacks == [('verbose:', [])]
    assert var_2.stacks == [('verbose:', [])]
    assert var_3.stacks == [('verbose:', [])]
    assert var_4.stacks == [('verbose:', [])]
    var_6 = param_0.checkout()
    assert param_0.stacks == []
    assert var_0.stacks == []
    assert var_2.stacks == []
    assert var_3.stacks == []
    assert var_4.stacks == []

def test_case_77():
    str_0 = 'v'
    param_0 = module_0.Param(str_0)
    assert f'{type(param_0).__module__}.{type(param_0).__qualname__}' == 'pyparam.param.Param'
    assert param_0.show is True
    assert param_0.name == 'v'
    assert param_0.default is None
    assert param_0.stacks == []
    assert param_0.callback is None
    assert f'{type(module_0.Param.value).__module__}.{type(module_0.Param.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.desc).__module__}.{type(module_0.Param.desc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.required).__module__}.{type(module_0.Param.required).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Param.type).__module__}.{type(module_0.Param.type).__qualname__}' == 'builtins.property'
    str_1 = ''
    var_0 = param_0.set_value(str_1)
    assert var_0.default is None
    var_1 = param_0.set_type(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyparam.param.Param'
    assert var_1.show is True
    assert var_1.name == 'v'
    assert var_1.default is None
    assert var_1.stacks == []
    assert var_1.callback is None