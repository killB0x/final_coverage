# Automatically generated by Pynguin.
import pytest
import dockerpty.io as module_0

def test_case_0():
    bool_0 = False
    pump_0 = module_0.set_blocking(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.select(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b''
    stream_0 = module_0.Stream(bytes_0)
    stream_0.set_blocking(stream_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b''
    stream_0 = module_0.Stream(bytes_0)
    stream_0.read(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b':'
    stream_0 = module_0.Stream(bytes_0)
    stream_0.write(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    stream_0.do_write()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    stream_0.close()

def test_case_7():
    bool_0 = True
    demuxer_0 = module_0.Demuxer(bool_0)
    assert demuxer_0.remain == 0
    var_0 = module_0.Demuxer(bool_0)
    assert var_0.remain == 0
    var_1 = var_0.do_write()
    assert var_1 is False

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    demuxer_0 = module_0.Demuxer(bool_0)
    assert demuxer_0.remain == 0
    demuxer_0.read()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    pump_0 = module_0.Pump(bool_0, bool_0, propagate_close=bool_0)
    pump_0.flush()

def test_case_10():
    str_0 = '\\SN:%:2'
    stream_0 = module_0.Stream(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    var_0 = stream_0.set_blocking(bool_0)
    assert var_0 is True
    module_0.set_blocking(stream_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    var_0 = stream_0.needs_write()
    assert var_0 is False
    stream_0.do_write()

def test_case_13():
    bool_0 = True
    demuxer_0 = module_0.Demuxer(bool_0)
    assert demuxer_0.remain == 0

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'\xf1;'
    demuxer_0 = module_0.Demuxer(bytes_0)
    assert demuxer_0.remain == 0
    none_type_0 = None
    pump_0 = module_0.Pump(bytes_0, none_type_0)
    stream_0 = module_0.Stream(demuxer_0)
    stream_0.do_write()

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    demuxer_0 = module_0.Demuxer(stream_0)
    assert demuxer_0.remain == 0
    pump_0 = module_0.Pump(demuxer_0, stream_0)
    none_type_0 = None
    var_0 = demuxer_0.write(none_type_0)
    var_1 = demuxer_0.set_blocking(demuxer_0)
    assert var_1 is True
    var_2 = pump_0.is_done()
    assert var_2 is False
    pump_0.flush(var_2)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    stream_0 = module_0.Stream(bool_0)
    demuxer_0 = module_0.Demuxer(stream_0)
    assert demuxer_0.remain == 0
    none_type_0 = None
    pump_0 = module_0.Pump(demuxer_0, none_type_0)
    var_0 = demuxer_0.set_blocking(none_type_0)
    assert var_0 is True
    var_1 = pump_0.is_done()
    assert var_1 is False
    demuxer_0.close()

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    none_type_0 = None
    demuxer_0 = module_0.Demuxer(none_type_0)
    assert demuxer_0.remain == 0
    var_0 = demuxer_0.__repr__()
    assert var_0 == 'Demuxer(None)'
    stream_0 = module_0.Stream(bool_0)
    stream_0.do_write()

def test_case_18():
    dict_0 = {}
    pump_0 = module_0.Pump(dict_0, dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    pump_0 = module_0.Pump(none_type_0, none_type_0, propagate_close=none_type_0)
    pump_0.set_blocking(pump_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b'2'
    module_0.select(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    pump_0 = module_0.Pump(bool_0, bool_0, propagate_close=bool_0)
    stream_0 = module_0.Stream(pump_0)
    stream_0.do_write()

def test_case_22():
    bool_0 = False
    pump_0 = module_0.Pump(bool_0, bool_0, propagate_close=bool_0)
    var_0 = pump_0.is_done()
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '\n        Invoked when a `with` block is finished.\n        '
    demuxer_0 = module_0.Demuxer(str_0)
    assert demuxer_0.remain == 0
    stream_0 = module_0.Stream(demuxer_0)
    stream_0.close()

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    demuxer_0 = stream_0.__repr__()
    assert demuxer_0 == 'Stream(True)'
    stream_0.do_write()

@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    stream_0 = module_0.Stream(bool_0)
    var_0 = stream_0.write(bool_0)
    bytes_0 = b'\x98\x0fB=u\t\x98]'
    module_0.select(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    pump_0 = module_0.Pump(bool_0, bool_0, propagate_close=bool_0)
    var_0 = pump_0.is_done()
    assert var_0 is False
    stream_0 = module_0.Stream(pump_0)
    var_1 = pump_0.__repr__()
    assert var_1 == 'Pump(from=True, to=True)'
    stream_0.read(var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    demuxer_0 = module_0.Demuxer(stream_0)
    assert demuxer_0.remain == 0
    pump_0 = module_0.Pump(demuxer_0, stream_0)
    var_0 = demuxer_0.set_blocking(demuxer_0)
    assert var_0 is True
    var_1 = pump_0.is_done()
    assert var_1 is False
    stream_0.do_write()

def test_case_28():
    bool_0 = False
    stream_0 = module_0.set_blocking(bool_0, bool_0)
    assert stream_0 is False

def test_case_29():
    bool_0 = True
    none_type_0 = None
    pump_0 = module_0.Pump(bool_0, none_type_0, none_type_0, none_type_0)
    var_0 = pump_0.is_done()
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_30():
    none_type_0 = None
    tuple_0 = ()
    demuxer_0 = module_0.Demuxer(tuple_0)
    assert demuxer_0.remain == 0
    var_0 = demuxer_0.needs_write()
    assert var_0 is False
    var_0.flush(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    demuxer_0 = module_0.Demuxer(stream_0)
    assert demuxer_0.remain == 0
    pump_0 = module_0.Pump(demuxer_0, stream_0)
    var_0 = demuxer_0.needs_write()
    assert var_0 is False
    var_1 = demuxer_0.set_blocking(demuxer_0)
    assert var_1 is True
    var_2 = pump_0.is_done()
    assert var_2 is False
    stream_0.do_write()

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    int_0 = -443
    demuxer_0 = module_0.Demuxer(none_type_0)
    assert demuxer_0.remain == 0
    int_1 = 1961
    pump_0 = module_0.Pump(int_0, demuxer_0, none_type_0, int_1)
    var_0 = pump_0.is_done()
    assert var_0 is True
    pump_0.flush()

@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    stream_0 = module_0.Stream(bool_0)
    demuxer_0 = module_0.Demuxer(stream_0)
    assert demuxer_0.remain == 0
    pump_0 = module_0.Pump(demuxer_0, stream_0)
    var_0 = demuxer_0.set_blocking(demuxer_0)
    assert var_0 is True
    var_1 = pump_0.is_done()
    assert var_1 is False
    demuxer_0.do_write()