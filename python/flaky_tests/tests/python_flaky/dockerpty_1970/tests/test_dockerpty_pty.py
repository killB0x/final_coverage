# Automatically generated by Pynguin.
import pytest
import dockerpty.pty as module_0
import struct as module_1
import dockerpty.io as module_2

def test_case_0():
    float_0 = 230.54422
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(float_0)
    var_0 = w_i_n_c_h_handler_0.stop()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    run_operation_0 = module_0.RunOperation(bool_0, bool_0, stdout=bool_0, stderr=bool_0, logs=bool_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client is True
    assert run_operation_0.container is True
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert run_operation_0.stdout is True
    assert run_operation_0.stderr is True
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs is True
    run_operation_0.israw()

def test_case_2():
    bool_0 = False
    run_operation_0 = module_0.RunOperation(bool_0, bool_0, stdout=bool_0, stderr=bool_0, logs=bool_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client is False
    assert run_operation_0.container is False
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    run_operation_0 = module_0.RunOperation(none_type_0, exec_operation_0, stdout=none_type_0, stdin=exec_operation_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client is None
    assert f'{type(run_operation_0.container).__module__}.{type(run_operation_0.container).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert run_operation_0.logs == 1
    var_0 = exec_operation_0.israw()
    assert var_0 is False
    assert exec_operation_0.raw is False
    run_operation_0.start()

@pytest.mark.xfail(strict=True)
def test_case_4():
    error_0 = module_1.error()
    run_operation_0 = module_0.RunOperation(error_0, error_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert f'{type(run_operation_0.client).__module__}.{type(run_operation_0.client).__qualname__}' == 'struct.error'
    assert f'{type(run_operation_0.container).__module__}.{type(run_operation_0.container).__qualname__}' == 'struct.error'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    run_operation_0.israw()

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    run_operation_0 = module_0.RunOperation(bool_0, bool_0, stdout=bool_0, stderr=bool_0, logs=bool_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client is False
    assert run_operation_0.container is False
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs is False
    run_operation_0.israw()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    exec_operation_0 = module_0.ExecOperation(bool_0, bool_0, stdin=bool_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is True
    assert exec_operation_0.client is True
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is True
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert exec_operation_0.stdin is True
    exec_operation_0.is_process_tty()

def test_case_7():
    operation_0 = module_0.Operation()
    bool_0 = True
    exec_operation_0 = module_0.ExecOperation(bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is True
    assert exec_operation_0.client is True
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is True
    assert exec_operation_0.stdout is True
    assert exec_operation_0.stderr is True
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    exec_operation_0 = module_0.ExecOperation(dict_0, dict_0, stderr=dict_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id == {}
    assert exec_operation_0.client == {}
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is True
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    var_0 = exec_operation_0.israw()
    assert var_0 is False
    assert exec_operation_0.raw is False
    exec_operation_0.start(var_0)

def test_case_9():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    var_0 = exec_operation_0.israw()
    assert var_0 is False
    assert exec_operation_0.raw is False

def test_case_10():
    operation_0 = module_0.Operation()

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ')8Bs{L(._dfNZlEm'
    var_0 = module_0.WINCHHandler(str_0)
    var_0.start()

def test_case_12():
    float_0 = 230.54422
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(float_0)
    var_0 = w_i_n_c_h_handler_0.__exit__()

def test_case_13():
    bool_0 = True
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(bool_0)
    operation_0 = module_0.Operation()
    with pytest.raises(NotImplementedError):
        operation_0.israw()

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    pseudo_terminal_0 = module_0.PseudoTerminal(bool_0, bool_0)
    run_operation_0 = module_0.RunOperation(bool_0, bool_0, stdout=bool_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client is True
    assert run_operation_0.container is True
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert run_operation_0.stdout is True
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    run_operation_0.resize(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ')8Bs{L(._dfNZlEm'
    module_0.exec_create(str_0, str_0, str_0, str_0)

def test_case_16():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    pseudo_terminal_0 = module_0.PseudoTerminal(exec_operation_0, exec_operation_0)
    var_0 = pseudo_terminal_0.resize()
    assert exec_operation_0.raw is False

@pytest.mark.xfail(strict=True)
def test_case_17():
    set_0 = set()
    none_type_0 = None
    list_0 = [none_type_0]
    run_operation_0 = module_0.RunOperation(set_0, none_type_0, set_0, stderr=set_0, logs=list_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client == {*()}
    assert run_operation_0.container is None
    assert run_operation_0.raw is None
    assert run_operation_0.interactive == {*()}
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == [None]
    pseudo_terminal_0 = module_0.PseudoTerminal(set_0, set_0)
    exec_operation_0 = module_0.ExecOperation(pseudo_terminal_0, pseudo_terminal_0, pseudo_terminal_0, pseudo_terminal_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert f'{type(exec_operation_0.exec_id).__module__}.{type(exec_operation_0.exec_id).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.client).__module__}.{type(exec_operation_0.client).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert exec_operation_0.raw is None
    assert f'{type(exec_operation_0.interactive).__module__}.{type(exec_operation_0.interactive).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    pseudo_terminal_0.sockets()

@pytest.mark.xfail(strict=True)
def test_case_18():
    set_0 = set()
    none_type_0 = None
    list_0 = [none_type_0]
    int_0 = 60
    run_operation_0 = module_0.RunOperation(set_0, set_0, stdout=list_0, stderr=none_type_0, stdin=int_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client == {*()}
    assert run_operation_0.container == {*()}
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert run_operation_0.stdout == [None]
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.stdin == 60
    assert run_operation_0.logs == 1
    run_operation_1 = module_0.RunOperation(set_0, none_type_0, set_0, stderr=set_0, logs=list_0)
    assert f'{type(run_operation_1.stdout).__module__}.{type(run_operation_1.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_1.stderr).__module__}.{type(run_operation_1.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_1.stdin).__module__}.{type(run_operation_1.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_1.logs == [None]
    pseudo_terminal_0 = module_0.PseudoTerminal(set_0, set_0)
    exec_operation_0 = module_0.ExecOperation(pseudo_terminal_0, pseudo_terminal_0, pseudo_terminal_0, pseudo_terminal_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert f'{type(exec_operation_0.exec_id).__module__}.{type(exec_operation_0.exec_id).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.client).__module__}.{type(exec_operation_0.client).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert exec_operation_0.raw is None
    assert f'{type(exec_operation_0.interactive).__module__}.{type(exec_operation_0.interactive).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    str_0 = '\n        Write `data` to the Stream. Not all data may be written right away.\n        Use select to find when the stream is writeable, and call do_write()\n        to flush the internal buffer.\n        '
    var_0 = module_0.RunOperation(run_operation_0, run_operation_1)
    assert f'{type(var_0.stdout).__module__}.{type(var_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(var_0.stderr).__module__}.{type(var_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(var_0.stdin).__module__}.{type(var_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert var_0.logs == 1
    dict_0 = {str_0: set_0, str_0: exec_operation_0}
    exec_operation_0.resize(pseudo_terminal_0, exec_operation_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    set_0 = set()
    none_type_0 = None
    list_0 = [none_type_0]
    int_0 = 60
    run_operation_0 = module_0.RunOperation(set_0, set_0, stdout=list_0, stderr=none_type_0, stdin=int_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client == {*()}
    assert run_operation_0.container == {*()}
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert run_operation_0.stdout == [None]
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.stdin == 60
    assert run_operation_0.logs == 1
    run_operation_1 = module_0.RunOperation(set_0, none_type_0, set_0, stderr=set_0, logs=list_0)
    assert f'{type(run_operation_1.stdout).__module__}.{type(run_operation_1.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_1.stderr).__module__}.{type(run_operation_1.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_1.stdin).__module__}.{type(run_operation_1.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_1.logs == [None]
    pseudo_terminal_0 = module_0.PseudoTerminal(set_0, set_0)
    exec_operation_0 = module_0.ExecOperation(pseudo_terminal_0, pseudo_terminal_0, pseudo_terminal_0, pseudo_terminal_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert f'{type(exec_operation_0.exec_id).__module__}.{type(exec_operation_0.exec_id).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.client).__module__}.{type(exec_operation_0.client).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert exec_operation_0.raw is None
    assert f'{type(exec_operation_0.interactive).__module__}.{type(exec_operation_0.interactive).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == 'dockerpty.pty.PseudoTerminal'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    var_0 = exec_operation_0.start(pseudo_terminal_0)
    pseudo_terminal_0.sockets()

def test_case_20():
    operation_0 = module_0.Operation()
    with pytest.raises(NotImplementedError):
        operation_0.start()

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(exec_operation_0)
    str_0 = ''
    str_1 = '4'
    var_0 = exec_operation_0.israw()
    assert var_0 is False
    assert exec_operation_0.raw is False
    str_2 = ',:9"P@0{+,)?c'
    var_1 = w_i_n_c_h_handler_0.stop()
    dict_0 = {str_1: str_0, str_0: str_0, str_2: w_i_n_c_h_handler_0}
    run_operation_0 = module_0.RunOperation(dict_0, str_2, str_1, logs=none_type_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert f'{type(run_operation_0.client).__module__}.{type(run_operation_0.client).__qualname__}' == 'builtins.dict'
    assert len(run_operation_0.client) == 3
    assert run_operation_0.container == ',:9"P@0{+,)?c'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive == '4'
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    var_2 = exec_operation_0.israw()
    assert var_2 is False
    run_operation_0.start(dict_0, **dict_0)

def test_case_22():
    operation_0 = module_0.Operation()
    with pytest.raises(NotImplementedError):
        operation_0.resize(operation_0, operation_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '7s\x0c+~RSdX:3L '
    str_1 = '4'
    var_0 = str_1.__repr__()
    dict_0 = {str_1: str_0, str_0: str_0, var_0: var_0}
    run_operation_0 = module_0.RunOperation(dict_0, str_0, str_1, logs=var_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client == {'4': '7s\x0c+~RSdX:3L ', '7s\x0c+~RSdX:3L ': '7s\x0c+~RSdX:3L ', "'4'": "'4'"}
    assert run_operation_0.container == '7s\x0c+~RSdX:3L '
    assert run_operation_0.raw is None
    assert run_operation_0.interactive == '4'
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == "'4'"
    run_operation_0.start(dict_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    pseudo_terminal_0 = module_0.PseudoTerminal(exec_operation_0, exec_operation_0)
    pseudo_terminal_0.start(pseudo_terminal_0)

def test_case_25():
    operation_0 = module_0.Operation()
    with pytest.raises(NotImplementedError):
        operation_0.sockets()

@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(exec_operation_0)
    run_operation_0 = module_0.RunOperation(none_type_0, exec_operation_0, stdout=none_type_0, stdin=exec_operation_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client is None
    assert f'{type(run_operation_0.container).__module__}.{type(run_operation_0.container).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is True
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert run_operation_0.logs == 1
    w_i_n_c_h_handler_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(none_type_0)
    str_0 = ',L#`;zay(f\tX'
    str_1 = 'wP'
    str_2 = ''
    dict_0 = {str_1: str_0, str_0: str_0, str_2: w_i_n_c_h_handler_0}
    run_operation_0 = module_0.RunOperation(dict_0, str_2, str_1, logs=none_type_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert f'{type(run_operation_0.client).__module__}.{type(run_operation_0.client).__qualname__}' == 'builtins.dict'
    assert len(run_operation_0.client) == 3
    assert run_operation_0.container == ''
    assert run_operation_0.raw is None
    assert run_operation_0.interactive == 'wP'
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    run_operation_0.start(dict_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(exec_operation_0)
    str_0 = ''
    str_1 = '4'
    var_0 = w_i_n_c_h_handler_0.stop()
    str_2 = ',:9"P@0{+,)?c'
    dict_0 = {str_1: str_0, str_0: str_0, str_2: w_i_n_c_h_handler_0}
    run_operation_0 = module_0.RunOperation(dict_0, str_2, str_1, logs=none_type_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert f'{type(run_operation_0.client).__module__}.{type(run_operation_0.client).__qualname__}' == 'builtins.dict'
    assert len(run_operation_0.client) == 3
    assert run_operation_0.container == ',:9"P@0{+,)?c'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive == '4'
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    var_1 = exec_operation_0.israw()
    assert var_1 is False
    assert exec_operation_0.raw is False
    run_operation_0.start(dict_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(exec_operation_0)
    str_0 = '7s\x0c+~RSdX3L '
    str_1 = ''
    stream_0 = module_2.Stream(w_i_n_c_h_handler_0)
    str_2 = ',:9"P@0{+,)?c'
    var_0 = w_i_n_c_h_handler_0.stop()
    var_1 = var_0.__repr__()
    dict_0 = {str_1: str_0, str_0: str_0, str_2: w_i_n_c_h_handler_0}
    run_operation_0 = module_0.RunOperation(dict_0, str_2, str_1, logs=none_type_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert f'{type(run_operation_0.client).__module__}.{type(run_operation_0.client).__qualname__}' == 'builtins.dict'
    assert len(run_operation_0.client) == 3
    assert run_operation_0.container == ',:9"P@0{+,)?c'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive == ''
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    var_2 = exec_operation_0.israw()
    assert var_2 is False
    assert exec_operation_0.raw is False
    run_operation_0.start(dict_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    none_type_0 = None
    exec_operation_0 = module_0.ExecOperation(none_type_0, none_type_0, none_type_0, stderr=none_type_0)
    assert f'{type(exec_operation_0).__module__}.{type(exec_operation_0).__qualname__}' == 'dockerpty.pty.ExecOperation'
    assert exec_operation_0.exec_id is None
    assert exec_operation_0.client is None
    assert exec_operation_0.raw is None
    assert exec_operation_0.interactive is None
    assert f'{type(exec_operation_0.stdout).__module__}.{type(exec_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stderr).__module__}.{type(exec_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(exec_operation_0.stdin).__module__}.{type(exec_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    w_i_n_c_h_handler_0 = module_0.WINCHHandler(exec_operation_0)
    str_0 = '7s\x0c+~RSdX3L '
    str_1 = '4'
    str_2 = ',:9"P@0{+,)?c'
    var_0 = w_i_n_c_h_handler_0.stop()
    var_1 = var_0.__repr__()
    dict_0 = {str_1: str_0, str_0: str_0, str_2: w_i_n_c_h_handler_0}
    none_type_1 = None
    run_operation_0 = module_0.RunOperation(str_0, str_2, none_type_1, logs=none_type_0)
    assert f'{type(run_operation_0).__module__}.{type(run_operation_0).__qualname__}' == 'dockerpty.pty.RunOperation'
    assert run_operation_0.client == '7s\x0c+~RSdX3L '
    assert run_operation_0.container == ',:9"P@0{+,)?c'
    assert run_operation_0.raw is None
    assert run_operation_0.interactive is None
    assert f'{type(run_operation_0.stdout).__module__}.{type(run_operation_0.stdout).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stderr).__module__}.{type(run_operation_0.stderr).__qualname__}' == '_io.TextIOWrapper'
    assert f'{type(run_operation_0.stdin).__module__}.{type(run_operation_0.stdin).__qualname__}' == '_io.TextIOWrapper'
    assert run_operation_0.logs == 1
    var_2 = exec_operation_0.israw()
    assert var_2 is False
    assert exec_operation_0.raw is False
    run_operation_0.start(dict_0, **dict_0)