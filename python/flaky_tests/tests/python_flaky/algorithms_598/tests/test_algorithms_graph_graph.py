# Automatically generated by Pynguin.
import pytest
import algorithms.graph.graph as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    node_0.__lt__(node_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    directed_graph_1 = module_0.DirectedGraph(directed_graph_0)
    assert f'{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjmt == {}
    var_1 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 2
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_1.name).__module__}.{type(var_1.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    module_0.DirectedGraph(var_0)

def test_case_2():
    set_0 = set()
    none_type_0 = None
    str_0 = 'n=\\bU\x0c3D7O1'
    directed_edge_0 = module_0.DirectedEdge(none_type_0, str_0)
    var_0 = directed_edge_0.__eq__(set_0)
    assert var_0 is False

def test_case_3():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_edge(directed_graph_0, directed_graph_0)

def test_case_4():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'

@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    int_0 = 87
    node_0 = module_0.Node(list_0)
    var_0 = node_0.__ge__(node_0)
    assert var_0 is True
    directed_graph_0 = module_0.DirectedGraph()
    graph_0 = module_0.Graph(var_0)
    assert graph_0.V is True
    assert graph_0.tc == [[0]]
    directed_edge_0 = module_0.DirectedEdge(int_0, graph_0)
    var_1 = graph_0.add_edge(var_0, int_0)
    assert graph_0.graph == {True: [87]}
    var_2 = directed_graph_0.add_edge(directed_graph_0, directed_edge_0)
    var_3 = directed_edge_0.__eq__(int_0)
    assert var_3 is False
    directed_graph_1 = module_0.DirectedGraph(directed_edge_0)
    assert f'{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjmt == {}
    var_4 = directed_edge_0.__eq__(directed_graph_1)
    var_5 = directed_graph_0.add_node(var_2)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'algorithms.graph.graph.Node'
    assert var_5.name is None
    directed_edge_0.add_edge(list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -798
    none_type_0 = None
    graph_0 = module_0.Graph(int_0)
    var_0 = graph_0.add_edge(none_type_0, int_0)
    assert graph_0.graph == {None: [-798]}
    var_0.get_name(int_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    var_1 = directed_graph_0.add_edge(directed_graph_0, directed_graph_0)
    var_2 = var_0.__repr__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert f'{type(var_2.nodes).__module__}.{type(var_2.nodes).__qualname__}' == 'builtins.list'
    assert len(var_2.nodes) == 1
    assert var_2.edges == []
    assert var_2.adjmt == {}
    var_3 = var_1.__repr__()
    var_0.__lt__(directed_graph_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    var_1 = var_0.__hash__()
    var_2 = var_0.__repr__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert f'{type(var_2.nodes).__module__}.{type(var_2.nodes).__qualname__}' == 'builtins.list'
    assert len(var_2.nodes) == 1
    assert var_2.edges == []
    assert var_2.adjmt == {}
    var_3 = var_1.__repr__()
    var_0.__lt__(directed_graph_0)

def test_case_9():
    bytes_0 = b'e=\x0f'
    directed_graph_0 = module_0.DirectedGraph(bytes_0)
    assert f'{type(directed_graph_0).__module__}.{type(directed_graph_0).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_0.nodes == []
    assert directed_graph_0.edges == []
    assert directed_graph_0.adjmt == {}
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__bool__()
    var_1 = node_0.__ne__(var_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    float_0 = -262.71697
    node_0 = module_0.Node(float_0)
    var_0 = node_0.__ne__(node_0)
    assert var_0 is False
    none_type_0 = None
    var_1 = node_0.__le__(node_0)
    assert var_1 is True
    var_2 = var_1.__gt__(none_type_0)
    var_3 = var_1.__hash__()
    assert var_3 == 1
    var_2.add_edge(bool_0, node_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    directed_graph_0 = module_0.DirectedGraph()
    int_0 = 1263
    list_0 = [int_0, directed_graph_0, directed_graph_0]
    directed_edge_0 = module_0.DirectedEdge(directed_graph_0, list_0)
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    directed_graph_1 = module_0.DirectedGraph(directed_graph_0)
    assert f'{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjmt == {}
    var_0.__gt__(directed_graph_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    directed_graph_1 = module_0.DirectedGraph(directed_graph_0)
    assert f'{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjmt == {}
    var_0.__ge__(directed_graph_0)

def test_case_13():
    bytes_0 = b'e=\x0f'
    directed_graph_0 = module_0.DirectedGraph(bytes_0)
    assert f'{type(directed_graph_0).__module__}.{type(directed_graph_0).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_0.nodes == []
    assert directed_graph_0.edges == []
    assert directed_graph_0.adjmt == {}
    node_0 = module_0.Node(bytes_0)
    var_0 = node_0.__bool__()

def test_case_14():
    tuple_0 = ()
    directed_edge_0 = module_0.DirectedEdge(tuple_0, tuple_0)
    var_0 = directed_edge_0.__ge__(directed_edge_0)
    var_1 = directed_edge_0.__eq__(directed_edge_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_15():
    tuple_0 = ()
    directed_edge_0 = module_0.DirectedEdge(tuple_0, tuple_0)
    bool_0 = False
    var_0 = directed_edge_0.__repr__()
    assert var_0 == '(() -> ())'
    var_1 = var_0.__ge__(directed_edge_0)
    var_2 = var_1.__repr__()
    var_2.get_name(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = -2370.51486
    module_0.Graph(float_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '3(,A8An*8g{b\x0c6CDF'
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = directed_graph_0.add_node(directed_graph_0)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.Node'
    assert f'{type(var_0.name).__module__}.{type(var_0.name).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    dict_0 = {str_0: str_0}
    directed_edge_0 = module_0.DirectedEdge(dict_0, str_0)
    directed_graph_1 = module_0.DirectedGraph(dict_0)
    assert f'{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert f'{type(directed_graph_1.nodes).__module__}.{type(directed_graph_1.nodes).__qualname__}' == 'builtins.list'
    assert len(directed_graph_1.nodes) == 16
    assert f'{type(directed_graph_1.edges).__module__}.{type(directed_graph_1.edges).__qualname__}' == 'builtins.list'
    assert len(directed_graph_1.edges) == 17
    assert f'{type(directed_graph_1.adjmt).__module__}.{type(directed_graph_1.adjmt).__qualname__}' == 'builtins.dict'
    assert len(directed_graph_1.adjmt) == 1
    var_1 = directed_edge_0.__eq__(dict_0)
    assert var_1 is False
    var_2 = directed_graph_0.add_edge(dict_0, directed_graph_0)
    var_3 = var_2.__eq__(str_0)
    var_3.get_name(var_0)

def test_case_18():
    directed_graph_0 = module_0.DirectedGraph()
    var_0 = module_0.DirectedGraph(directed_graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert var_0.nodes == []
    assert var_0.edges == []
    assert var_0.adjmt == {}

@pytest.mark.xfail(strict=True)
def test_case_19():
    list_0 = []
    node_0 = module_0.Node(list_0)
    var_0 = node_0.__ge__(node_0)
    assert var_0 is True
    directed_graph_0 = module_0.DirectedGraph()
    graph_0 = module_0.Graph(var_0)
    assert graph_0.V is True
    assert graph_0.tc == [[0]]
    directed_edge_0 = module_0.DirectedEdge(var_0, graph_0)
    assert directed_edge_0.nf is True
    var_1 = graph_0.add_edge(var_0, var_0)
    assert graph_0.graph == {True: [True]}
    var_2 = directed_graph_0.add_edge(directed_graph_0, directed_edge_0)
    var_3 = directed_edge_0.__eq__(var_1)
    assert var_3 is False
    var_4 = directed_graph_0.add_node(var_2)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'algorithms.graph.graph.Node'
    assert var_4.name is None
    var_5 = graph_0.add_edge(var_0, var_0)
    assert graph_0.graph == {True: [True, True]}
    var_6 = var_4.__repr__()
    var_7 = var_2.__bool__()
    var_8 = var_2.__ne__(var_2)
    var_9 = var_6.__repr__()
    assert var_9 == 'None'
    var_10 = directed_graph_0.add_edge(var_9, directed_edge_0)
    var_11 = var_8.__eq__(var_7)
    node_1 = module_0.Node(var_7)
    node_2 = module_0.Node(node_1)
    node_3 = module_0.Node(var_2)
    node_4 = module_0.Node(directed_graph_0)
    var_12 = node_4.__eq__(var_1)
    assert var_12 is False
    node_3.__gt__(directed_graph_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    list_0 = []
    int_0 = 125
    node_0 = module_0.Node(list_0)
    var_0 = node_0.__ge__(node_0)
    assert var_0 is True
    directed_graph_0 = module_0.DirectedGraph()
    graph_0 = module_0.Graph(var_0)
    assert graph_0.V is True
    assert graph_0.tc == [[0]]
    directed_edge_0 = module_0.DirectedEdge(int_0, graph_0)
    var_1 = graph_0.add_edge(var_0, int_0)
    assert graph_0.graph == {True: [125]}
    var_2 = directed_graph_0.add_edge(directed_graph_0, directed_edge_0)
    var_3 = directed_edge_0.__eq__(int_0)
    assert var_3 is False
    directed_edge_1 = module_0.DirectedEdge(graph_0, int_0)
    var_4 = directed_edge_0.__eq__(directed_edge_0)
    assert var_4 is True
    var_5 = directed_graph_0.add_node(var_2)
    assert len(directed_graph_0.nodes) == 1
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'algorithms.graph.graph.Node'
    assert var_5.name is None
    var_6 = var_2.__eq__(var_1)
    var_7 = var_5.__repr__()
    var_8 = directed_edge_1.__eq__(directed_edge_0)
    var_9 = var_2.__bool__()
    var_10 = var_9.__hash__()
    directed_graph_1 = module_0.DirectedGraph(var_0)
    assert f'{type(directed_graph_1).__module__}.{type(directed_graph_1).__qualname__}' == 'algorithms.graph.graph.DirectedGraph'
    assert directed_graph_1.nodes == []
    assert directed_graph_1.edges == []
    assert directed_graph_1.adjmt == {}
    node_1 = module_0.Node(var_5)
    assert f'{type(node_1.name).__module__}.{type(node_1.name).__qualname__}' == 'algorithms.graph.graph.Node'
    var_11 = var_3.__hash__()
    var_5.__gt__(var_6)