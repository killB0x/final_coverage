# Automatically generated by Pynguin.
import pytest
import algorithms.linkedlist.add_two_numbers as module_0
import tokenize as module_1
import unittest.signals as module_2
import inspect as module_3

def test_case_0():
    test_suite_0 = module_0.TestSuite()

def test_case_1():
    test_suite_0 = module_0.TestSuite()
    var_0 = test_suite_0.test_add_two_numbers()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'algorithms.linkedlist.add_two_numbers.Node'
    assert node_0.val is False
    assert node_0.next is None
    node_1 = module_1.generate_tokens(bool_0)
    none_type_0 = None
    module_0.add_two_numbers(none_type_0, node_1)

def test_case_3():
    bool_0 = True
    node_0 = module_0.convert_to_list(bool_0)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'algorithms.linkedlist.add_two_numbers.Node'
    assert node_0.val == 1
    assert node_0.next is None

def test_case_4():
    int_0 = -78
    node_0 = module_0.convert_to_list(int_0)
    var_0 = module_2.installHandler()

def test_case_5():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'algorithms.linkedlist.add_two_numbers.Node'
    assert node_0.val is None
    assert node_0.next is None
    node_1 = module_0.Node(none_type_0)
    str_0 = module_0.convert_to_str(none_type_0)
    assert str_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_6():
    test_suite_0 = module_0.TestSuite()
    bool_0 = False
    node_0 = module_0.convert_to_list(bool_0)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'algorithms.linkedlist.add_two_numbers.Node'
    assert node_0.val == 0
    assert node_0.next is None
    var_0 = test_suite_0.test_convert_to_str()
    var_1 = test_suite_0.__eq__(test_suite_0)
    var_0.visit_ClassDef(var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    test_suite_0 = module_0.TestSuite()
    var_0 = test_suite_0.test_convert_to_list()
    var_1 = test_suite_0.test_add_two_numbers()
    module_0.add_two_numbers(test_suite_0, test_suite_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_3.isawaitable(none_type_0)
    node_0 = module_0.add_two_numbers(var_0, var_0)
    node_1 = module_0.convert_to_list(var_0)
    assert f'{type(node_1).__module__}.{type(node_1).__qualname__}' == 'algorithms.linkedlist.add_two_numbers.Node'
    assert node_1.val == 0
    assert node_1.next is None
    var_0.endswith(var_0)