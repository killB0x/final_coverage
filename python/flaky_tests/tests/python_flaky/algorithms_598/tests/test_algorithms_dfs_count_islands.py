# Automatically generated by Pynguin.
import pytest
import algorithms.dfs.count_islands as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2125
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: bool_0}
    module_0.num_islands(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '"\nCreate a function that will validate if given parameters are valid geographical coordinates.\nValid coordinates look like the following: "23.32353342, -32.543534534". The return value should be either true or false.\nLatitude (which is first float) can be between 0 and 90, positive or negative. Longitude (which is second float) can be between 0 and 180, positive or negative.\nCoordinates can only contain digits, or one of the following symbols (including space after comma) -, .\nThere should be no space between the minus "-" sign and the digit after it.\n\nHere are some valid coordinates:\n-23, 25\n43.91343345, 143\n4, -3\n\nAnd some invalid ones:\n23.234, - 23.4234\nN23.43345, E32.6457\n6.325624, 43.34345.345\n0, 1,2\n\n'
    var_0 = module_0.num_islands(str_0)
    assert var_0 == 0
    var_1 = module_0.num_islands(str_0)
    assert var_1 == 0
    module_0.dfs(var_1, var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1216
    var_0 = module_0.dfs(int_0, int_0, int_0)
    module_0.num_islands(int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.dfs(bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xee\xb1\xe9$\x98\xed\r\x9a7D\xe0\xff NB\x19\xf4'
    module_0.dfs(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    var_0 = module_0.num_islands(dict_0)
    assert var_0 == 0
    var_1 = module_0.dfs(dict_0, var_0, dict_0)
    module_0.num_islands(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 's'
    bytes_0 = b'\xab\xef\x01\xd0rC\xe3E\x82\xa6\xd2\x03 \xc90\xe45\xee\x0e\x08'
    int_0 = 567
    tuple_0 = (str_0, bytes_0, int_0)
    module_0.num_islands(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = ".wSkLm\x0c&M's]f"
    bytes_0 = b'\xab\xef\x01\xd0rC\xe3E\x82\xa6\xd2\x03 \xc90\xe45\xee\x0e\x08'
    int_0 = 551
    tuple_0 = (str_0, bytes_0, int_0)
    module_0.num_islands(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '\nGiven a directed graph, check whether it contains a cycle.\n\nReal-life scenario: deadlock detection in a system. Processes may be\nrepresented by vertices, then and an edge A -> B could mean that process A is\nwaiting for B to release its lock on a resource.\n'
    var_0 = module_0.num_islands(str_0)
    assert var_0 == 0
    var_1 = module_0.dfs(str_0, var_0, var_0)
    tuple_0 = (str_0, var_0, var_1)
    module_0.num_islands(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    float_0 = -3105.621476
    var_0 = module_0.dfs(set_0, bool_0, float_0)
    module_0.num_islands(var_0)