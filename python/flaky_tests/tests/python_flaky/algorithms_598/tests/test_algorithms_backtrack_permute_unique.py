# Automatically generated by Pynguin.
import pytest
import algorithms.backtrack.permute_unique as module_0

def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.permute_unique(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -1106
    module_0.permute_unique(int_0)

def test_case_2():
    bytes_0 = b'\xc3\x07;\x9c\xe5?\xc1\xa6\xf7\xd4'
    tuple_0 = (bytes_0, bytes_0)
    var_0 = module_0.permute_unique(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_0.permute_unique(dict_0)
    var_1 = module_0.permute_unique(dict_0)
    var_2 = module_0.permute_unique(var_1)
    var_3 = module_0.permute_unique(dict_0)
    var_4 = module_0.permute_unique(var_3)
    var_5 = module_0.permute_unique(var_3)
    bool_0 = True
    str_0 = 'Xa'
    var_6 = module_0.permute_unique(var_3)
    list_0 = [str_0, var_0, str_0]
    var_7 = module_0.permute_unique(list_0)
    module_0.permute_unique(bool_0)