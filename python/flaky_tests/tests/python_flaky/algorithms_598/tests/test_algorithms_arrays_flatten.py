# Automatically generated by Pynguin.
import pytest
import algorithms.arrays.flatten as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.flatten(dict_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    str_0 = ''
    var_0 = module_0.flatten(str_0, bool_0)
    assert var_0 is False
    bool_1 = True
    var_1 = module_0.flatten_iter(bool_1)
    module_0.flatten(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.flatten(none_type_0)

def test_case_3():
    str_0 = 'rIG(p]]GF3GQ'
    var_0 = module_0.flatten_iter(str_0)
    complex_0 = (252.643-2081.26716j)
    list_0 = [complex_0, complex_0]
    var_1 = module_0.flatten_iter(complex_0)
    tuple_0 = (complex_0, list_0)
    var_2 = module_0.flatten_iter(tuple_0)
    var_3 = module_0.flatten_iter(tuple_0)
    var_4 = module_0.flatten(list_0)
    var_5 = module_0.flatten_iter(tuple_0)
    str_1 = '.\x0cw(33#}x'
    var_6 = module_0.flatten_iter(str_1)
    var_7 = module_0.flatten(var_2)
    var_8 = module_0.flatten_iter(var_4)
    list_1 = [var_5, complex_0]
    var_9 = module_0.flatten_iter(var_4)
    var_10 = module_0.flatten(list_1)
    var_11 = module_0.flatten(var_10)

@pytest.mark.xfail(strict=True)
def test_case_4():
    set_0 = set()
    var_0 = module_0.flatten_iter(set_0)
    var_1 = module_0.flatten(var_0)
    int_0 = 1418
    var_2 = module_0.flatten(var_1)
    module_0.flatten(int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'cS]<.T8'
    var_0 = module_0.flatten(str_0)
    list_0 = []
    var_1 = module_0.flatten_iter(list_0)
    var_2 = module_0.flatten_iter(var_0)
    int_0 = -1815
    module_0.flatten(int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    var_0 = module_0.flatten_iter(bool_0)
    str_0 = 'q2DRS8(bmxxP'
    var_1 = module_0.flatten_iter(bool_0)
    var_2 = module_0.flatten_iter(bool_0)
    var_3 = module_0.flatten_iter(str_0)
    var_4 = module_0.flatten(var_3)
    var_5 = module_0.flatten_iter(var_0)
    var_6 = module_0.flatten(str_0)
    bytes_0 = b'tk\x0e\xd3\x0c'
    var_7 = module_0.flatten_iter(bytes_0)
    bool_1 = True
    module_0.flatten(bool_1)

def test_case_7():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0]
    var_0 = module_0.flatten(list_0)