# Automatically generated by Pynguin.
import pytest
import algorithms.linkedlist.merge_two_list as module_0

def test_case_0():
    str_0 = 'brFi+Q'
    tuple_0 = (str_0,)
    node_0 = module_0.Node(tuple_0)
    var_0 = module_0.merge_two_list(node_0, node_0)
    assert f'{type(node_0.next).__module__}.{type(node_0.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_0.val == ('brFi+Q',)
    assert f'{type(var_0.next).__module__}.{type(var_0.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'

def test_case_1():
    bool_0 = False
    var_0 = module_0.merge_two_list(bool_0, bool_0)
    assert var_0 is False

def test_case_2():
    float_0 = 2247.498
    node_0 = module_0.Node(float_0)
    var_0 = module_0.merge_two_list_recur(node_0, node_0)
    assert f'{type(node_0.next).__module__}.{type(node_0.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_0.val == pytest.approx(2247.498, abs=0.01, rel=0.01)
    assert f'{type(var_0.next).__module__}.{type(var_0.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    node_1 = module_0.Node(float_0)

def test_case_3():
    bool_0 = False
    var_0 = module_0.merge_two_list_recur(bool_0, bool_0)
    assert var_0 is False
    var_1 = module_0.merge_two_list(bool_0, bool_0)
    assert var_1 is False
    var_2 = module_0.merge_two_list(var_0, var_1)
    var_3 = module_0.merge_two_list(bool_0, var_1)

def test_case_4():
    list_0 = []
    dict_0 = {}
    tuple_0 = (list_0,)
    tuple_1 = (dict_0, tuple_0, tuple_0)
    none_type_0 = None
    var_0 = module_0.merge_two_list(tuple_1, none_type_0)
    none_type_1 = None
    node_0 = module_0.Node(none_type_1)
    node_1 = module_0.Node(list_0)
    var_1 = module_0.merge_two_list_recur(node_1, node_1)
    assert f'{type(node_1.next).__module__}.{type(node_1.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_1.val == []
    assert f'{type(var_1.next).__module__}.{type(var_1.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    var_2 = module_0.merge_two_list(none_type_0, var_0)

def test_case_5():
    complex_0 = (398.7+3127j)
    node_0 = module_0.Node(complex_0)
    bool_0 = False
    var_0 = module_0.merge_two_list_recur(bool_0, bool_0)
    assert var_0 is False
    var_1 = module_0.merge_two_list(node_0, bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_1.val == (398.7+3127j)
    assert var_1.next is None
    var_2 = module_0.merge_two_list(var_0, bool_0)
    var_3 = module_0.merge_two_list_recur(var_0, bool_0)
    var_4 = module_0.merge_two_list(var_3, var_3)
    var_5 = module_0.merge_two_list_recur(bool_0, node_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_5.val == (398.7+3127j)
    assert var_5.next is None
    none_type_0 = None
    node_1 = module_0.Node(var_0)
    var_6 = module_0.merge_two_list(none_type_0, node_1)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_6.val is False
    assert var_6.next is None
    node_2 = module_0.Node(var_2)
    var_7 = module_0.merge_two_list_recur(node_2, var_6)
    assert f'{type(node_1.next).__module__}.{type(node_1.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert f'{type(var_6.next).__module__}.{type(var_6.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert f'{type(var_7.next).__module__}.{type(var_7.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    bytes_0 = b'\xf6\x05\xc1x05'
    var_8 = module_0.merge_two_list_recur(var_2, bytes_0)
    assert var_8 == b'\xf6\x05\xc1x05'
    var_9 = module_0.merge_two_list(var_6, var_6)
    assert f'{type(node_2.next).__module__}.{type(node_2.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'
    assert var_9.val is False
    assert f'{type(var_9.next).__module__}.{type(var_9.next).__qualname__}' == 'algorithms.linkedlist.merge_two_list.Node'