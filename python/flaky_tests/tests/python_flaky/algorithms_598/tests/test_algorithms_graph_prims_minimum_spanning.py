# Automatically generated by Pynguin.
import pytest
import algorithms.graph.prims_minimum_spanning as module_0
import heapq as module_1
import builtins as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.prims_minimum_spanning(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'NO'
    module_0.prims_minimum_spanning(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bytes_0 = b''
    tuple_1 = (dict_0, bytes_0)
    var_0 = module_0.prims_minimum_spanning(tuple_1)
    assert var_0 == 0
    module_1.nsmallest(tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    var_0 = module_0.prims_minimum_spanning(list_1)
    assert var_0 == 0
    var_1 = module_0.prims_minimum_spanning(list_1)
    assert var_1 == 0
    bytes_0 = b'\x07\x01(\x1b\xf5\x9d\x84\xb3\x95\xe1\x1b\xa5\x1b\xf9s\\'
    float_0 = 2363.68511685755
    var_2 = module_0.prims_minimum_spanning(list_1)
    assert var_2 == 0
    dict_0 = {bytes_0: float_0, bytes_0: list_0}
    tuple_0 = (bytes_0, dict_0)
    object_0 = module_2.object()
    var_3 = module_0.prims_minimum_spanning(tuple_0)
    assert var_3 == 0
    module_0.prims_minimum_spanning(dict_0)

def test_case_4():
    float_0 = 1.0
    list_0 = [float_0, float_0, float_0, float_0]
    tuple_0 = (list_0,)
    str_0 = "n|9oy@'"
    tuple_1 = (float_0, tuple_0, tuple_0, str_0)
    var_0 = module_0.prims_minimum_spanning(tuple_1)
    assert var_0 == 0