# Automatically generated by Pynguin.
import pytest
import algorithms.dfs.sudoku_solver as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.Sudoku(bool_0, bool_0, bool_0)

def test_case_1():
    bool_0 = False
    sudoku_0 = module_0.Sudoku(bool_0, bool_0, bool_0)

def test_case_2():
    bool_0 = False
    sudoku_0 = module_0.Sudoku(bool_0, bool_0, bool_0)
    var_0 = sudoku_0.solve()
    assert var_0 is True

def test_case_3():
    str_0 = '.BOnm&lK&tV'
    bool_0 = True
    sudoku_0 = module_0.Sudoku(str_0, bool_0, bool_0)
    assert f'{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}' == 'algorithms.dfs.sudoku_solver.Sudoku'
    assert sudoku_0.board == '.BOnm&lK&tV'
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {(0, 0): ['1', '2', '3', '4', '5', '6', '7', '8', '9']}
    var_0 = sudoku_0.__str__()
    assert var_0 == ' . \n'

def test_case_4():
    str_0 = 'EB!nm&GK&tV'
    bool_0 = True
    sudoku_0 = module_0.Sudoku(str_0, bool_0, bool_0)
    assert f'{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}' == 'algorithms.dfs.sudoku_solver.Sudoku'
    assert sudoku_0.board == 'EB!nm&GK&tV'
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {}

def test_case_5():
    str_0 = '.BOnm&lK&tV'
    bool_0 = True
    sudoku_0 = module_0.Sudoku(str_0, bool_0, bool_0)
    assert f'{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}' == 'algorithms.dfs.sudoku_solver.Sudoku'
    assert sudoku_0.board == '.BOnm&lK&tV'
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {(0, 0): ['1', '2', '3', '4', '5', '6', '7', '8', '9']}

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '.BOnm&lK&tV'
    bool_0 = True
    sudoku_0 = module_0.Sudoku(str_0, bool_0, bool_0)
    assert f'{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}' == 'algorithms.dfs.sudoku_solver.Sudoku'
    assert sudoku_0.board == '.BOnm&lK&tV'
    assert sudoku_0.row is True
    assert sudoku_0.col is True
    assert sudoku_0.val == {(0, 0): ['1', '2', '3', '4', '5', '6', '7', '8', '9']}
    sudoku_0.solve()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '.BOn%TlUuZC9KZ-t?t+'
    bool_0 = True
    int_0 = 14
    sudoku_0 = module_0.Sudoku(str_0, int_0, bool_0)
    assert f'{type(sudoku_0).__module__}.{type(sudoku_0).__qualname__}' == 'algorithms.dfs.sudoku_solver.Sudoku'
    assert sudoku_0.board == '.BOn%TlUuZC9KZ-t?t+'
    assert sudoku_0.row == 14
    assert sudoku_0.col is True
    assert sudoku_0.val == {(0, 0): ['1', '2', '3', '4', '5', '6', '7', '8']}
    var_0 = sudoku_0.__str__()
    assert var_0 == ' . \n B \n O \n n \n % \n T \n l \n U \n u \n Z \n C \n 9 \n K \n Z \n'
    sudoku_0.solve()