# Automatically generated by Pynguin.
import pytest
import retriever.lib.cleanup as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "q0)'<QuWaNIe"
    var_0 = module_0.correct_invalid_value(str_0, str_0)
    assert var_0 == "q0)'<QuWaNIe"
    var_1 = var_0.__eq__(str_0)
    assert var_1 is True
    none_type_0 = None
    var_2 = module_0.no_cleanup(str_0, none_type_0)
    var_3 = var_2.__eq__(str_0)
    var_4 = module_0.floatable(str_0)
    assert var_4 is False
    str_1 = '<&%k1k=:~`cusK^8\nL'
    cleanup_0 = module_0.Cleanup(str_1)
    var_5 = module_0.no_cleanup(str_1, str_1)
    var_6 = module_0.correct_invalid_value(var_5, str_1)
    assert var_6 == '<&%k1k=:~`cusK^8\nL'
    module_0.floatable(cleanup_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = (-526.22-1312.61j)
    module_0.floatable(complex_0)

def test_case_2():
    cleanup_0 = module_0.Cleanup()
    var_0 = cleanup_0.__eq__(cleanup_0)
    assert var_0 is True
    var_1 = var_0.__eq__(cleanup_0)
    var_2 = var_0.__eq__(cleanup_0)
    var_3 = cleanup_0.__eq__(var_0)
    var_4 = cleanup_0.__eq__(var_0)

def test_case_3():
    none_type_0 = None
    cleanup_0 = module_0.Cleanup()
    var_0 = module_0.no_cleanup(cleanup_0, cleanup_0)
    var_1 = var_0.__eq__(none_type_0)

def test_case_4():
    cleanup_0 = module_0.Cleanup()