# Automatically generated by Pynguin.
import pytest
import retriever.lib.templates as module_0

def test_case_0():
    str_0 = 'row'
    dict_0 = {str_0: str_0}
    basic_text_template_0 = module_0.BasicTextTemplate(**dict_0)
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''

def test_case_1():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'[&\xde\x96\xb8\xb2\x04q\xc2\x10\xd7\x11+\xcc@s\xab\x1f'
    set_0 = {bytes_0}
    bool_0 = True
    bool_1 = True
    script_0 = module_0.Script(name=set_0, ref=bool_0, addendum=bytes_0, retriever_minimum_version=bytes_0, version=bool_1, encoding=bytes_0, message=bytes_0)
    assert script_0.title == ''
    assert script_0.description == ''
    assert script_0.citation == 'Not currently available'
    assert script_0.licenses == [{'name': None}]
    script_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.__str__()
    assert var_0 == ''
    var_1 = basic_text_template_0.matches_terms(basic_text_template_0)
    assert var_1 is False
    basic_text_template_0.process_archived_data(var_1, basic_text_template_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    float_0 = -789.8
    tuple_0 = (float_0,)
    html_table_template_0 = module_0.HtmlTableTemplate(description=basic_text_template_0, ref=basic_text_template_0, citation=basic_text_template_0, licenses=basic_text_template_0, retriever_minimum_version=basic_text_template_0, encoding=basic_text_template_0, message=basic_text_template_0)
    assert html_table_template_0.title == ''
    assert html_table_template_0.name == ''
    assert html_table_template_0.version == ''
    var_0 = html_table_template_0.matches_terms(tuple_0)
    assert var_0 is False
    var_1 = html_table_template_0.reference_url()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'retriever.lib.templates.BasicTextTemplate'
    assert var_1.title == ''
    assert var_1.name == ''
    assert var_1.filename == 'retriever.lib.templates'
    assert var_1.description == ''
    assert var_1.urls == {}
    assert var_1.tables == {}
    assert var_1.ref == ''
    assert var_1.public is True
    assert var_1.addendum is None
    assert var_1.citation == 'Not currently available'
    assert var_1.licenses == [{'name': None}]
    assert var_1.keywords == []
    assert var_1.retriever_minimum_version == ''
    assert var_1.encoding == 'utf-8'
    assert var_1.version == ''
    assert var_1.message == ''
    var_1.process_tabular_insert(var_0, float_0)

def test_case_5():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.reference_url()

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 3303
    script_0 = module_0.Script(int_0, tables=int_0, licenses=int_0)
    assert script_0.name == ''
    assert script_0.description == ''
    assert script_0.ref == ''
    assert script_0.citation == 'Not currently available'
    assert script_0.retriever_minimum_version == ''
    assert script_0.encoding == 'utf-8'
    assert script_0.version == ''
    assert script_0.message == ''
    script_0.checkengine()

@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    none_type_0 = None
    html_table_template_0 = module_0.HtmlTableTemplate(set_0, urls=set_0, ref=set_0, addendum=set_0, version=none_type_0, encoding=none_type_0, message=set_0)
    assert html_table_template_0.name == ''
    assert html_table_template_0.description == ''
    assert html_table_template_0.citation == 'Not currently available'
    assert html_table_template_0.licenses == [{'name': None}]
    assert html_table_template_0.retriever_minimum_version == ''
    html_table_template_0.checkengine(set_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    bytes_0 = b'\xbf\x16D'
    var_0 = basic_text_template_0.matches_terms(bytes_0)
    assert var_0 is False
    basic_text_template_0.process_archived_data(var_0, bytes_0)

def test_case_9():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.matches_terms(basic_text_template_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_10():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    basic_text_template_0.process_tabular_insert(basic_text_template_0, basic_text_template_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    basic_text_template_0.process_tables(basic_text_template_0, basic_text_template_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    basic_text_template_0.process_archived_data(basic_text_template_0, basic_text_template_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.matches_terms(list_0)
    assert var_0 is False
    basic_text_template_0.download(debug=var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    bytes_0 = b'\xb0'
    html_table_template_0 = module_0.HtmlTableTemplate(bool_0, name=bool_0, urls=bytes_0, ref=bool_0, public=bytes_0)
    assert html_table_template_0.description == ''
    assert html_table_template_0.citation == 'Not currently available'
    assert html_table_template_0.licenses == [{'name': None}]
    assert html_table_template_0.retriever_minimum_version == ''
    assert html_table_template_0.encoding == 'utf-8'
    assert html_table_template_0.version == ''
    assert html_table_template_0.message == ''
    html_table_template_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.matches_terms(basic_text_template_0)
    assert var_0 is False
    var_1 = var_0.__str__()
    assert var_1 == 'False'
    var_2 = basic_text_template_0.matches_terms(var_1)
    assert var_2 is False
    basic_text_template_0.process_tabular_insert(var_0, basic_text_template_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = 'qL$E%!2^'
    str_1 = 'd8#mmH):6_G[gWv'
    dict_0 = {str_0: bool_0, str_0: tuple_0, str_1: bool_0}
    html_table_template_0 = module_0.HtmlTableTemplate(description=tuple_0, urls=bool_0, tables=tuple_0, licenses=tuple_0, retriever_minimum_version=bool_0, **dict_0)
    assert f'{type(html_table_template_0).__module__}.{type(html_table_template_0).__qualname__}' == 'retriever.lib.templates.HtmlTableTemplate'
    assert html_table_template_0.title == ''
    assert html_table_template_0.name == ''
    assert html_table_template_0.filename == 'retriever.lib.templates'
    assert html_table_template_0.description == (False,)
    assert html_table_template_0.urls is False
    assert html_table_template_0.tables == (False,)
    assert html_table_template_0.ref == ''
    assert html_table_template_0.public is True
    assert html_table_template_0.addendum is None
    assert html_table_template_0.citation == 'Not currently available'
    assert html_table_template_0.licenses == (False,)
    assert html_table_template_0.keywords == []
    assert html_table_template_0.retriever_minimum_version is False
    assert html_table_template_0.encoding == 'utf-8'
    assert html_table_template_0.version == ''
    assert html_table_template_0.message == ''
    assert html_table_template_0.qL$E%!2^ is False
    assert html_table_template_0.d8#mmH):6_G[gWv is False
    var_0 = html_table_template_0.matches_terms(bool_0)
    assert var_0 is False
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    basic_text_template_0.process_tabular_insert(str_0, html_table_template_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.matches_terms(basic_text_template_0)
    assert var_0 is False
    var_1 = basic_text_template_0.__str__()
    assert var_1 == ''
    var_2 = basic_text_template_0.matches_terms(var_1)
    assert var_2 is True
    basic_text_template_0.process_tabular_insert(var_0, basic_text_template_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    basic_text_template_0 = module_0.BasicTextTemplate()
    assert basic_text_template_0.title == ''
    assert basic_text_template_0.name == ''
    assert basic_text_template_0.description == ''
    assert basic_text_template_0.ref == ''
    assert basic_text_template_0.citation == 'Not currently available'
    assert basic_text_template_0.licenses == [{'name': None}]
    assert basic_text_template_0.retriever_minimum_version == ''
    assert basic_text_template_0.encoding == 'utf-8'
    assert basic_text_template_0.version == ''
    assert basic_text_template_0.message == ''
    var_0 = basic_text_template_0.matches_terms(basic_text_template_0)
    assert var_0 is False
    var_1 = basic_text_template_0.__str__()
    assert var_1 == ''
    set_0 = {var_1, var_1, var_1, var_1}
    var_2 = basic_text_template_0.matches_terms(set_0)
    assert var_2 is True
    basic_text_template_0.process_archived_data(var_0, var_0)