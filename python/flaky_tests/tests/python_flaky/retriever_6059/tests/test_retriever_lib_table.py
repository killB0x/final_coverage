# Automatically generated by Pynguin.
import pytest
import retriever.lib.table as module_0

def test_case_0():
    str_0 = 'Lq\tD 6ov}'
    dict_0 = {str_0: str_0}
    tabular_dataset_0 = module_0.TabularDataset(cleaned_columns=dict_0, **dict_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name is None
    assert tabular_dataset_0.url is None
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk is False
    assert tabular_dataset_0.delimiter is None
    assert tabular_dataset_0.header_rows == 1
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns == {'Lq\tD 6ov}': 'Lq\tD 6ov}'}
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    assert tabular_dataset_0.Lq	D 6ov} == 'Lq\tD 6ov}'

def test_case_1():
    tabular_dataset_0 = module_0.TabularDataset()
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name is None
    assert tabular_dataset_0.url is None
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk is False
    assert tabular_dataset_0.delimiter is None
    assert tabular_dataset_0.header_rows == 1
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None

@pytest.mark.xfail(strict=True)
def test_case_2():
    tabular_dataset_0 = module_0.TabularDataset()
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name is None
    assert tabular_dataset_0.url is None
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk is False
    assert tabular_dataset_0.delimiter is None
    assert tabular_dataset_0.header_rows == 1
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    tabular_dataset_0.combine_on_delimiter(tabular_dataset_0)

def test_case_3():
    int_0 = -1235
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1235
    assert tabular_dataset_0.url == -1235
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1235
    assert tabular_dataset_0.delimiter == -1235
    assert tabular_dataset_0.header_rows == -1235
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    var_0 = tabular_dataset_0.get_column_datatypes()
    assert tabular_dataset_0.cleaned_columns is True

def test_case_4():
    int_0 = 1655
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == 1655
    assert tabular_dataset_0.url == 1655
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == 1655
    assert tabular_dataset_0.delimiter == 1655
    assert tabular_dataset_0.header_rows == 1655
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'auto_column_number'
    dict_0 = {str_0: str_0}
    vector_dataset_0 = module_0.VectorDataset(url=int_0, **dict_0)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is None
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type == 'VectorDataset'
    assert vector_dataset_0.url == 1655
    assert vector_dataset_0.auto_column_number == 'auto_column_number'
    tabular_dataset_1 = module_0.TabularDataset(url=tabular_dataset_0, columns=dict_0, replace_columns=dict_0, cleaned_columns=int_0, **dict_0)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.auto_column_number == 'auto_column_number'
    raster_dataset_0 = module_0.RasterDataset(dict_0, dataset_type=int_0, **dict_0)
    assert f'{type(raster_dataset_0).__module__}.{type(raster_dataset_0).__qualname__}' == 'retriever.lib.table.RasterDataset'
    assert raster_dataset_0.name == {'auto_column_number': 'auto_column_number'}
    assert raster_dataset_0.group is None
    assert raster_dataset_0.relative_path == 0
    assert raster_dataset_0.resolution is None
    assert raster_dataset_0.resolution_units is None
    assert raster_dataset_0.dimensions is None
    assert raster_dataset_0.noDataValue is None
    assert raster_dataset_0.geoTransform is None
    assert raster_dataset_0.parameter is None
    assert raster_dataset_0.extent is None
    assert raster_dataset_0.dataset_type == 1655
    assert raster_dataset_0.url is None
    assert raster_dataset_0.auto_column_number == 'auto_column_number'
    var_0 = tabular_dataset_0.clean_column_name(str_0)
    assert var_0 == 'auto_column_number'
    var_1 = tabular_dataset_1.get_column_datatypes()

def test_case_5():
    raster_dataset_0 = module_0.RasterDataset()
    assert f'{type(raster_dataset_0).__module__}.{type(raster_dataset_0).__qualname__}' == 'retriever.lib.table.RasterDataset'
    assert raster_dataset_0.name is None
    assert raster_dataset_0.group is None
    assert raster_dataset_0.relative_path == 0
    assert raster_dataset_0.resolution is None
    assert raster_dataset_0.resolution_units is None
    assert raster_dataset_0.dimensions is None
    assert raster_dataset_0.noDataValue is None
    assert raster_dataset_0.geoTransform is None
    assert raster_dataset_0.parameter is None
    assert raster_dataset_0.extent is None
    assert raster_dataset_0.dataset_type == 'RasterDataset'
    assert raster_dataset_0.url is None

def test_case_6():
    str_0 = 'Lq\tD 6ov}'
    dict_0 = {str_0: str_0}
    vector_dataset_0 = module_0.VectorDataset(**dict_0)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is None
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type == 'VectorDataset'
    assert vector_dataset_0.url is None
    assert vector_dataset_0.Lq	D 6ov} == 'Lq\tD 6ov}'

def test_case_7():
    vector_dataset_0 = module_0.VectorDataset()
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is None
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type == 'VectorDataset'
    assert vector_dataset_0.url is None

def test_case_8():
    dataset_0 = module_0.Dataset()

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -1291
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1291
    assert tabular_dataset_0.url == -1291
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1291
    assert tabular_dataset_0.delimiter == -1291
    assert tabular_dataset_0.header_rows == -1291
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'Of]\t@(KCKO]u'
    dict_0 = {str_0: str_0}
    tabular_dataset_1 = module_0.TabularDataset(url=tabular_dataset_0, columns=dict_0, replace_columns=dict_0, cleaned_columns=int_0, **dict_0)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.Of]	@(KCKO]u == 'Of]\t@(KCKO]u'
    var_0 = tabular_dataset_1.get_column_datatypes()
    tabular_dataset_1.auto_get_columns(tabular_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    vector_dataset_0 = module_0.VectorDataset(bool_0, dataset_type=bool_0)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is False
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type is False
    assert vector_dataset_0.url is None
    tabular_dataset_0 = module_0.TabularDataset(delimiter=bool_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name is None
    assert tabular_dataset_0.url is None
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk is False
    assert tabular_dataset_0.delimiter is False
    assert tabular_dataset_0.header_rows == 1
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    var_0 = tabular_dataset_0.get_column_datatypes()
    assert tabular_dataset_0.cleaned_columns is True
    var_1 = tabular_dataset_0.get_column_datatypes()
    var_0.get_column_datatypes()

@pytest.mark.xfail(strict=True)
def test_case_11():
    raster_dataset_0 = module_0.RasterDataset()
    assert f'{type(raster_dataset_0).__module__}.{type(raster_dataset_0).__qualname__}' == 'retriever.lib.table.RasterDataset'
    assert raster_dataset_0.name is None
    assert raster_dataset_0.group is None
    assert raster_dataset_0.relative_path == 0
    assert raster_dataset_0.resolution is None
    assert raster_dataset_0.resolution_units is None
    assert raster_dataset_0.dimensions is None
    assert raster_dataset_0.noDataValue is None
    assert raster_dataset_0.geoTransform is None
    assert raster_dataset_0.parameter is None
    assert raster_dataset_0.extent is None
    assert raster_dataset_0.dataset_type == 'RasterDataset'
    assert raster_dataset_0.url is None
    str_0 = ':;r'
    str_1 = '}\rr#$I]'
    dict_0 = {}
    tabular_dataset_0 = module_0.TabularDataset(delimiter=str_1, fixed_width=str_0, record_id=str_0, number_of_records=str_1, **dict_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name is None
    assert tabular_dataset_0.url is None
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk is False
    assert tabular_dataset_0.delimiter == '}\rr#$I]'
    assert tabular_dataset_0.header_rows == 1
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width == ':;r'
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == ':;r'
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records == '}\rr#$I]'
    var_0 = tabular_dataset_0.get_insert_columns(create=raster_dataset_0)
    assert var_0 == ''
    assert tabular_dataset_0.cleaned_columns is True
    var_0.combine_on_delimiter(raster_dataset_0)

def test_case_12():
    int_0 = -1268
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1268
    assert tabular_dataset_0.url == -1268
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1268
    assert tabular_dataset_0.delimiter == -1268
    assert tabular_dataset_0.header_rows == -1268
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'Lq\tD 6ov}'
    dataset_0 = module_0.Dataset(url=tabular_dataset_0)
    var_0 = tabular_dataset_0.clean_column_name(str_0)
    assert var_0 == 'lq\td_6ov}'

def test_case_13():
    int_0 = 1655
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == 1655
    assert tabular_dataset_0.url == 1655
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == 1655
    assert tabular_dataset_0.delimiter == 1655
    assert tabular_dataset_0.header_rows == 1655
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'pk-auto'
    dict_0 = {str_0: str_0}
    tabular_dataset_1 = module_0.TabularDataset(dict_0, tabular_dataset_0, columns=dict_0, replace_columns=int_0, cleaned_columns=int_0, **dict_0)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.pk-auto == 'pk-auto'
    var_0 = tabular_dataset_1.get_column_datatypes()

def test_case_14():
    int_0 = 1655
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == 1655
    assert tabular_dataset_0.url == 1655
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == 1655
    assert tabular_dataset_0.delimiter == 1655
    assert tabular_dataset_0.header_rows == 1655
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'pk-auto'
    var_0 = tabular_dataset_0.auto_get_columns(str_0)
    assert tabular_dataset_0.cleaned_columns is True
    dict_0 = {str_0: str_0}
    tabular_dataset_1 = module_0.TabularDataset(dict_0, tabular_dataset_0, columns=dict_0, replace_columns=var_0, cleaned_columns=int_0, **dict_0)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.replace_columns == ([['p', None], ['k', None], ['a', None], ['u', None], ['t', None], ['o', None]], {'p': [], 'k': [], 'a': [], 'u': [], 't': [], 'o': []})
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.pk-auto == 'pk-auto'
    var_1 = tabular_dataset_1.get_column_datatypes()

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = -1274
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1274
    assert tabular_dataset_0.url == -1274
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1274
    assert tabular_dataset_0.delimiter == -1274
    assert tabular_dataset_0.header_rows == -1274
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    none_type_0 = None
    str_0 = 'Lq\tD 6ov}'
    dict_0 = {str_0: str_0}
    vector_dataset_0 = module_0.VectorDataset(tabular_dataset_0, none_type_0, none_type_0, **dict_0)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert f'{type(vector_dataset_0.name).__module__}.{type(vector_dataset_0.name).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type is None
    assert vector_dataset_0.url is None
    assert vector_dataset_0.Lq	D 6ov} == 'Lq\tD 6ov}'
    list_0 = [tabular_dataset_0, dict_0, vector_dataset_0, none_type_0]
    tabular_dataset_1 = module_0.TabularDataset(none_type_0, pk=dict_0, columns=list_0, **dict_0)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.Lq	D 6ov} == 'Lq\tD 6ov}'
    vector_dataset_1 = module_0.VectorDataset(vector_dataset_0)
    assert vector_dataset_1.feature_count == 0
    assert vector_dataset_1.dataset_type == 'VectorDataset'
    tabular_dataset_1.get_column_datatypes()

def test_case_16():
    int_0 = -1268
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1268
    assert tabular_dataset_0.url == -1268
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1268
    assert tabular_dataset_0.delimiter == -1268
    assert tabular_dataset_0.header_rows == -1268
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'O/f]@(KCKO]u'
    dataset_0 = module_0.Dataset(url=tabular_dataset_0)
    var_0 = tabular_dataset_0.clean_column_name(str_0)
    assert var_0 == 'o_f_at_kcko_u'
    var_1 = tabular_dataset_0.get_column_datatypes()
    assert tabular_dataset_0.cleaned_columns is True
    dataset_1 = module_0.Dataset()

@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = -1268
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1268
    assert tabular_dataset_0.url == -1268
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1268
    assert tabular_dataset_0.delimiter == -1268
    assert tabular_dataset_0.header_rows == -1268
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    none_type_0 = None
    str_0 = 'O/f]@(KCKO]u'
    dict_0 = {str_0: str_0}
    var_0 = tabular_dataset_0.get_insert_columns(dict_0)
    assert var_0 == ''
    assert tabular_dataset_0.cleaned_columns is True
    dataset_0 = module_0.Dataset(url=tabular_dataset_0)
    tabular_dataset_1 = module_0.TabularDataset(tabular_dataset_0, pk=tabular_dataset_0, header_rows=none_type_0, columns=str_0, cleaned_columns=dict_0, **dict_0)
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.O/f]@(KCKO]u == 'O/f]@(KCKO]u'
    tabular_dataset_1.get_insert_columns(create=tabular_dataset_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -1268
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1268
    assert tabular_dataset_0.url == -1268
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1268
    assert tabular_dataset_0.delimiter == -1268
    assert tabular_dataset_0.header_rows == -1268
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'O/f]@(KCKO]u'
    dict_0 = {str_0: str_0}
    raster_dataset_0 = module_0.RasterDataset(str_0, dataset_type=int_0)
    assert f'{type(raster_dataset_0).__module__}.{type(raster_dataset_0).__qualname__}' == 'retriever.lib.table.RasterDataset'
    assert raster_dataset_0.name == 'O/f]@(KCKO]u'
    assert raster_dataset_0.group is None
    assert raster_dataset_0.relative_path == 0
    assert raster_dataset_0.resolution is None
    assert raster_dataset_0.resolution_units is None
    assert raster_dataset_0.dimensions is None
    assert raster_dataset_0.noDataValue is None
    assert raster_dataset_0.geoTransform is None
    assert raster_dataset_0.parameter is None
    assert raster_dataset_0.extent is None
    assert raster_dataset_0.dataset_type == -1268
    assert raster_dataset_0.url is None
    dataset_0 = module_0.Dataset()
    tabular_dataset_1 = module_0.TabularDataset(header_rows=dict_0, fixed_width=dataset_0, cleanup=tabular_dataset_0, columns=int_0, replace_columns=dict_0, missingValues=dataset_0, cleaned_columns=int_0)
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    tabular_dataset_1.clean_column_name(str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -1268
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == -1268
    assert tabular_dataset_0.url == -1268
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == -1268
    assert tabular_dataset_0.delimiter == -1268
    assert tabular_dataset_0.header_rows == -1268
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    none_type_0 = None
    str_0 = 'O/f]@(KCKO]u'
    dict_0 = {str_0: str_0}
    var_0 = tabular_dataset_0.get_insert_columns(dict_0)
    assert var_0 == ''
    assert tabular_dataset_0.cleaned_columns is True
    dataset_0 = module_0.Dataset(url=tabular_dataset_0)
    tabular_dataset_1 = module_0.TabularDataset(tabular_dataset_0, pk=tabular_dataset_0, header_rows=none_type_0, columns=str_0, cleaned_columns=dict_0, **dict_0)
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.record_id == 0
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.O/f]@(KCKO]u == 'O/f]@(KCKO]u'
    str_1 = 'fill'
    dict_1 = {str_1: int_0}
    vector_dataset_0 = module_0.VectorDataset(**dict_1)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is None
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type == 'VectorDataset'
    assert vector_dataset_0.url is None
    assert vector_dataset_0.fill == -1268
    var_1 = tabular_dataset_0.clean_column_name(str_0)
    assert var_1 == 'o_f_at_kcko_u'
    vector_dataset_1 = module_0.VectorDataset(url=dict_0, dataset_type=tabular_dataset_0)
    assert vector_dataset_1.feature_count == 0
    str_2 = 'Access databases (*.mdb, *.accdb)|*.mdb;*.accdb'
    var_2 = tabular_dataset_0.clean_column_name(str_2)
    assert var_2 == 'access_databases_mdb,_accdb|_mdb_accdb'
    var_2.get_column_datatypes()

@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = 1655
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == 1655
    assert tabular_dataset_0.url == 1655
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == 1655
    assert tabular_dataset_0.delimiter == 1655
    assert tabular_dataset_0.header_rows == 1655
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    str_0 = 'pk-auto'
    var_0 = tabular_dataset_0.auto_get_columns(str_0)
    assert tabular_dataset_0.cleaned_columns is True
    tabular_dataset_1 = module_0.TabularDataset(url=tabular_dataset_0, fixed_width=var_0, cleanup=str_0, record_id=var_0, columns=var_0, missingValues=str_0, cleaned_columns=var_0)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.fixed_width == ([['p', None], ['k', None], ['a', None], ['u', None], ['t', None], ['o', None]], {'p': [], 'k': [], 'a': [], 'u': [], 't': [], 'o': []})
    assert tabular_dataset_1.record_id == ([['p', None], ['k', None], ['a', None], ['u', None], ['t', None], ['o', None]], {'p': [], 'k': [], 'a': [], 'u': [], 't': [], 'o': []})
    assert tabular_dataset_1.columns == ([['p', None], ['k', None], ['a', None], ['u', None], ['t', None], ['o', None]], {'p': [], 'k': [], 'a': [], 'u': [], 't': [], 'o': []})
    assert tabular_dataset_1.cleaned_columns == ([['p', None], ['k', None], ['a', None], ['u', None], ['t', None], ['o', None]], {'p': [], 'k': [], 'a': [], 'u': [], 't': [], 'o': []})
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    tabular_dataset_1.values_from_line(str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = 1655
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == 1655
    assert tabular_dataset_0.url == 1655
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == 1655
    assert tabular_dataset_0.delimiter == 1655
    assert tabular_dataset_0.header_rows == 1655
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    var_0 = tabular_dataset_0.get_insert_columns()
    assert var_0 == ''
    assert tabular_dataset_0.cleaned_columns is True
    str_0 = 'rows'
    var_1 = tabular_dataset_0.auto_get_columns(str_0)
    dict_0 = {str_0: str_0}
    raster_dataset_0 = module_0.RasterDataset(dataset_type=var_0)
    assert f'{type(raster_dataset_0).__module__}.{type(raster_dataset_0).__qualname__}' == 'retriever.lib.table.RasterDataset'
    assert raster_dataset_0.name is None
    assert raster_dataset_0.group is None
    assert raster_dataset_0.relative_path == 0
    assert raster_dataset_0.resolution is None
    assert raster_dataset_0.resolution_units is None
    assert raster_dataset_0.dimensions is None
    assert raster_dataset_0.noDataValue is None
    assert raster_dataset_0.geoTransform is None
    assert raster_dataset_0.parameter is None
    assert raster_dataset_0.extent is None
    assert raster_dataset_0.dataset_type == ''
    assert raster_dataset_0.url is None
    vector_dataset_0 = module_0.VectorDataset(**dict_0)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is None
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type == 'VectorDataset'
    assert vector_dataset_0.url is None
    assert vector_dataset_0.rows == 'rows'
    str_1 = '{niN*mw'
    dict_1 = {str_0: int_0, str_1: raster_dataset_0, str_1: vector_dataset_0, str_1: var_1}
    tabular_dataset_1 = module_0.TabularDataset(cleanup=var_1, record_id=raster_dataset_0, cleaned_columns=str_0, number_of_records=var_0, **dict_1)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.cleanup == ([['r', None], ['o', None], ['w', None], ['s', None]], {'r': [], 'o': [], 'w': [], 's': []})
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    assert tabular_dataset_1.number_of_records == ''
    assert tabular_dataset_1.rows == 1655
    assert tabular_dataset_1.{niN*mw == ([['r', None], ['o', None], ['w', None], ['s', None]], {'r': [], 'o': [], 'w': [], 's': []})
    tabular_dataset_2 = module_0.TabularDataset(var_0, pk=str_1, column_names_row=raster_dataset_0, columns=dict_1, missingValues=int_0, cleaned_columns=tabular_dataset_0)
    assert tabular_dataset_2.name == ''
    assert tabular_dataset_2.header_rows == 1
    assert tabular_dataset_2.record_id == 0
    assert tabular_dataset_2.columns == {'rows': 1655, '{niN*mw': ([['r', None], ['o', None], ['w', None], ['s', None]], {'r': [], 'o': [], 'w': [], 's': []})}
    assert tabular_dataset_2.dataset_type == 'TabularDataset'
    var_2 = tabular_dataset_2.get_column_datatypes()
    var_0.values_from_line(tabular_dataset_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 1655
    str_0 = '$.'
    str_1 = 'i,cVW[]>k'
    dict_0 = {str_1: str_0, str_1: int_0}
    vector_dataset_0 = module_0.VectorDataset(**dict_0)
    assert f'{type(vector_dataset_0).__module__}.{type(vector_dataset_0).__qualname__}' == 'retriever.lib.table.VectorDataset'
    assert vector_dataset_0.name is None
    assert vector_dataset_0.pk is None
    assert vector_dataset_0.contains_pk is False
    assert vector_dataset_0.feature_count == 0
    assert vector_dataset_0.attributes == []
    assert vector_dataset_0.attributes_dict == {}
    assert vector_dataset_0.fields_dict == {}
    assert vector_dataset_0.extent == {}
    assert vector_dataset_0.saptialref is None
    assert vector_dataset_0.dataset_type == 'VectorDataset'
    assert vector_dataset_0.url is None
    assert vector_dataset_0.i,cVW[]>k == 1655
    tabular_dataset_0 = module_0.TabularDataset(int_0, int_0, contains_pk=int_0, delimiter=int_0, header_rows=int_0)
    assert f'{type(tabular_dataset_0).__module__}.{type(tabular_dataset_0).__qualname__}' == 'retriever.lib.table.TabularDataset'
    assert tabular_dataset_0.name == 1655
    assert tabular_dataset_0.url == 1655
    assert tabular_dataset_0.pk is True
    assert tabular_dataset_0.contains_pk == 1655
    assert tabular_dataset_0.delimiter == 1655
    assert tabular_dataset_0.header_rows == 1655
    assert tabular_dataset_0.column_names_row == 1
    assert tabular_dataset_0.fixed_width is False
    assert f'{type(tabular_dataset_0.cleanup).__module__}.{type(tabular_dataset_0.cleanup).__qualname__}' == 'retriever.lib.cleanup.Cleanup'
    assert tabular_dataset_0.record_id == 0
    assert tabular_dataset_0.columns == []
    assert tabular_dataset_0.replace_columns == []
    assert tabular_dataset_0.missingValues is None
    assert tabular_dataset_0.cleaned_columns is False
    assert tabular_dataset_0.dataset_type == 'TabularDataset'
    assert tabular_dataset_0.number_of_records is None
    var_0 = tabular_dataset_0.get_insert_columns()
    assert var_0 == ''
    assert tabular_dataset_0.cleaned_columns is True
    raster_dataset_0 = module_0.RasterDataset()
    assert f'{type(raster_dataset_0).__module__}.{type(raster_dataset_0).__qualname__}' == 'retriever.lib.table.RasterDataset'
    assert raster_dataset_0.name is None
    assert raster_dataset_0.group is None
    assert raster_dataset_0.relative_path == 0
    assert raster_dataset_0.resolution is None
    assert raster_dataset_0.resolution_units is None
    assert raster_dataset_0.dimensions is None
    assert raster_dataset_0.noDataValue is None
    assert raster_dataset_0.geoTransform is None
    assert raster_dataset_0.parameter is None
    assert raster_dataset_0.extent is None
    assert raster_dataset_0.dataset_type == 'RasterDataset'
    assert raster_dataset_0.url is None
    str_2 = 'dataset_type'
    var_1 = tabular_dataset_0.auto_get_columns(str_2)
    dict_1 = {str_2: str_2}
    vector_dataset_1 = module_0.VectorDataset()
    assert vector_dataset_1.feature_count == 0
    assert vector_dataset_1.dataset_type == 'VectorDataset'
    tabular_dataset_1 = module_0.TabularDataset(url=tabular_dataset_0, fixed_width=var_1, cleanup=var_0, record_id=dict_1, columns=var_1, missingValues=var_0, cleaned_columns=var_1)
    assert tabular_dataset_1.header_rows == 1
    assert tabular_dataset_1.column_names_row == 1
    assert tabular_dataset_1.fixed_width == ([['d', None], ['a', None], ['t', None], ['a', None], ['s', None], ['e', None], ['t', None], ['t', None], ['y', None], ['p', None], ['e', None]], {'d': [], 'a': [], 't': [], 's': [], 'e': [], 'y': [], 'p': []})
    assert tabular_dataset_1.cleanup == ''
    assert tabular_dataset_1.columns == ([['d', None], ['a', None], ['t', None], ['a', None], ['s', None], ['e', None], ['t', None], ['t', None], ['y', None], ['p', None], ['e', None]], {'d': [], 'a': [], 't': [], 's': [], 'e': [], 'y': [], 'p': []})
    assert tabular_dataset_1.missingValues == ''
    assert tabular_dataset_1.cleaned_columns == ([['d', None], ['a', None], ['t', None], ['a', None], ['s', None], ['e', None], ['t', None], ['t', None], ['y', None], ['p', None], ['e', None]], {'d': [], 'a': [], 't': [], 's': [], 'e': [], 'y': [], 'p': []})
    assert tabular_dataset_1.dataset_type == 'TabularDataset'
    tabular_dataset_2 = module_0.TabularDataset(pk=int_0, cleanup=var_1, record_id=dict_1, replace_columns=int_0, **dict_1)
    assert tabular_dataset_2.header_rows == 1
    assert tabular_dataset_2.column_names_row == 1
    assert tabular_dataset_2.cleanup == ([['d', None], ['a', None], ['t', None], ['a', None], ['s', None], ['e', None], ['t', None], ['t', None], ['y', None], ['p', None], ['e', None]], {'d': [], 'a': [], 't': [], 's': [], 'e': [], 'y': [], 'p': []})
    assert tabular_dataset_2.dataset_type == 'TabularDataset'
    assert tabular_dataset_2.key == 'dataset_type'
    tabular_dataset_1.values_from_line(str_2)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    str_0 = 'MR=5g!l|'
    str_1 = 'dialect'
    bytes_0 = b''
    str_2 = 't"Y]wAPm'
    str_3 = '\tY#BV*6Fw yT'
    dict_0 = {str_0: str_0, str_1: bytes_0, str_2: str_0, str_3: str_2}
    module_0.TabularDataset(delimiter=none_type_0, column_names_row=none_type_0, cleanup=none_type_0, replace_columns=none_type_0, missingValues=none_type_0, **dict_0)