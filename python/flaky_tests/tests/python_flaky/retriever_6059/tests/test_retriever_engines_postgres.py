# Automatically generated by Pynguin.
import pytest
import retriever.engines.postgres as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_0.create_db()

@pytest.mark.xfail(strict=True)
def test_case_1():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_0.create_table()

@pytest.mark.xfail(strict=True)
def test_case_2():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_0.insert_raster(engine_0, engine_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_1 = module_0.engine()
    str_0 = 'V3'
    var_0 = engine_0.format_insert_value(str_0, str_0)
    var_1 = engine_1.supported_raster(str_0)
    engine_1.insert_vector(engine_0, engine_1)

def test_case_4():
    str_0 = 'new'
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    var_0 = engine_0.format_insert_value(str_0, str_0)

def test_case_5():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'

@pytest.mark.xfail(strict=True)
def test_case_6():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_0.create_db_statement()

@pytest.mark.xfail(strict=True)
def test_case_7():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    str_0 = ''
    var_0 = engine_0.supported_raster(str_0)
    var_1 = engine_0.drop_statement(var_0, str_0)
    assert var_1 == 'DROP [] IF EXISTS  CASCADE;'
    var_2 = engine_0.format_insert_value(engine_0, str_0)
    engine_0.create_db()

@pytest.mark.xfail(strict=True)
def test_case_8():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_1 = module_0.engine()
    engine_0.insert_raster()

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    engine_0.insert_vector(srid=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    str_0 = 'bool'
    engine_0.format_insert_value(engine_0, str_0)

def test_case_11():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    str_0 = ''
    var_0 = engine_0.supported_raster(str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'PostgreSQL'
    assert module_0.engine.abbreviation == 'postgres'
    assert module_0.engine.datatypes == {'auto': 'serial', 'int': 'integer', 'bigint': 'bigint', 'double': 'double precision', 'decimal': 'decimal', 'char': 'varchar', 'bool': 'boolean'}
    assert module_0.engine.max_int == 2147483647
    assert module_0.engine.placeholder == '%s'
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('user', 'Enter your PostgreSQL username', 'postgres'), ('password', 'Enter your password', ''), ('host', 'Enter your PostgreSQL host', 'localhost'), ('port', 'Enter your PostgreSQL port', 5432), ('database', 'Enter your PostgreSQL database name', 'postgres'), ('database_name', 'Format of schema name', '{db}'), ('table_name', 'Format of table name', '{db}.{table}')]
    assert module_0.engine.spatial_support is True
    assert module_0.engine.db_encoding == 'Latin1'
    str_0 = ' <Ztcpccoz1n'
    bytes_0 = b'\x1f\xc9\xf4\x83'
    var_0 = engine_0.supported_raster(bytes_0, bytes_0)
    engine_0.format_insert_value(str_0, bytes_0)