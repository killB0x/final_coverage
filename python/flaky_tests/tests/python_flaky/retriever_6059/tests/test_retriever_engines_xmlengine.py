# Automatically generated by Pynguin.
import pytest
import retriever.engines.xmlengine as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    engine_0.insert_statement(engine_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.format_single_row(list_0, list_0)
    assert var_0 == '    <False>False</False>\n    <False>False</False>\n    <False>False</False>\n'
    var_0.load_data(list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = 'CREATE TABLE '
    var_0 = engine_0.format_insert_value(engine_0, str_0)
    assert var_0 == ''
    str_1 = 'char'
    float_0 = 3483.184513
    var_1 = engine_0.disconnect()
    var_2 = engine_0.format_insert_value(float_0, str_1)
    assert var_2 == '3483.184513'
    list_0 = []
    var_3 = module_0.format_single_row(str_1, list_0)
    var_4 = engine_0.format_insert_value(str_1, var_2)
    assert var_4 == ''
    engine_0.insert_statement(var_2)

def test_case_3():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]

@pytest.mark.xfail(strict=True)
def test_case_4():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    engine_1 = module_0.engine()
    engine_0.executemany(engine_0, engine_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    engine_0.connect(engine_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 0.53
    module_0.format_single_row(float_0, float_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = '^:pHs5<g_4rRqS1p}`{'
    var_0 = engine_0.create_db()
    var_1 = engine_0.format_insert_value(engine_0, str_0)
    assert var_1 == ''
    var_1.extract_tar(engine_0, var_1, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = 'char'
    var_0 = engine_0.format_insert_value(engine_0, str_0)
    engine_0.execute(var_0, engine_0)

def test_case_9():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = '^:pHs5<g_4rRqS1p}`{'
    var_0 = engine_0.format_insert_value(str_0, str_0)
    assert var_0 == ''

def test_case_10():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = 'char'
    var_0 = engine_0.format_insert_value(engine_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = 'char'
    var_0 = engine_0.format_insert_value(engine_0, str_0)
    var_1 = engine_0.disconnect()
    var_2 = engine_0.format_insert_value(engine_0, var_0)
    assert var_2 == ''
    var_3 = engine_0.format_insert_value(var_2, str_0)
    assert var_3 == ''
    var_3.insert_statement(var_1)

def test_case_12():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = 'char'
    float_0 = 3483.184513
    var_0 = engine_0.format_insert_value(float_0, str_0)
    assert var_0 == '3483.184513'

def test_case_13():
    engine_0 = module_0.engine()
    assert module_0.engine.name == 'XML'
    assert module_0.engine.abbreviation == 'xml'
    assert module_0.engine.auto_column_number == 0
    assert module_0.engine.datatypes == {'auto': 'INTEGER', 'int': 'INTEGER', 'bigint': 'INTEGER', 'double': 'REAL', 'decimal': 'REAL', 'char': 'TEXT', 'bool': 'INTEGER'}
    assert module_0.engine.insert_limit == 1000
    assert module_0.engine.required_opts == [('table_name', 'Format of table name', '{db}_{table}.xml'), ('data_dir', 'Install directory', '.')]
    str_0 = 'double'
    float_0 = 3482.178306134203
    var_0 = engine_0.format_insert_value(float_0, str_0)
    assert var_0 == pytest.approx(3482.178306134203, abs=0.01, rel=0.01)