# Automatically generated by Pynguin.
import pybrake.logging as module_0

def test_case_0():
    logging_handler_0 = module_0.LoggingHandler()
    assert f'{type(logging_handler_0).__module__}.{type(logging_handler_0).__qualname__}' == 'pybrake.logging.LoggingHandler'
    assert logging_handler_0.filters == []
    assert logging_handler_0.level == 40
    assert logging_handler_0.formatter is None
    assert f'{type(logging_handler_0.lock).__module__}.{type(logging_handler_0.lock).__qualname__}' == '_thread.RLock'

def test_case_1():
    bool_0 = False
    logging_handler_0 = module_0.LoggingHandler(bool_0)
    assert f'{type(logging_handler_0).__module__}.{type(logging_handler_0).__qualname__}' == 'pybrake.logging.LoggingHandler'
    assert logging_handler_0.filters == []
    assert logging_handler_0.level == 40
    assert logging_handler_0.formatter is None
    assert f'{type(logging_handler_0.lock).__module__}.{type(logging_handler_0.lock).__qualname__}' == '_thread.RLock'

def test_case_2():
    logging_handler_0 = module_0.LoggingHandler()
    assert f'{type(logging_handler_0).__module__}.{type(logging_handler_0).__qualname__}' == 'pybrake.logging.LoggingHandler'
    assert logging_handler_0.filters == []
    assert logging_handler_0.level == 40
    assert logging_handler_0.formatter is None
    assert f'{type(logging_handler_0.lock).__module__}.{type(logging_handler_0.lock).__qualname__}' == '_thread.RLock'
    var_0 = logging_handler_0.emit(logging_handler_0)