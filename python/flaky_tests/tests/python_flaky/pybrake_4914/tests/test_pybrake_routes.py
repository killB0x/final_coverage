# Automatically generated by Pynguin.
import pytest
import pybrake.routes as module_0
import email._header_value_parser as module_1
import email._encoded_words as module_2

def test_case_0():
    routes_0 = module_0._Routes()
    assert f'{type(routes_0).__module__}.{type(routes_0).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(routes_0.stats).__module__}.{type(routes_0.stats).__qualname__}' == 'pybrake.routes.RouteStats'
    assert f'{type(routes_0.breakdowns).__module__}.{type(routes_0.breakdowns).__qualname__}' == 'pybrake.route_metric.RouteBreakdowns'

@pytest.mark.xfail(strict=True)
def test_case_1():
    routes_0 = module_0._Routes()
    assert f'{type(routes_0).__module__}.{type(routes_0).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(routes_0.stats).__module__}.{type(routes_0.stats).__qualname__}' == 'pybrake.routes.RouteStats'
    assert f'{type(routes_0.breakdowns).__module__}.{type(routes_0.breakdowns).__qualname__}' == 'pybrake.route_metric.RouteBreakdowns'
    routes_0.notify(routes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    route_stats_0 = module_0.RouteStats()
    assert f'{type(route_stats_0).__module__}.{type(route_stats_0).__qualname__}' == 'pybrake.routes.RouteStats'
    route_stats_0.notify(route_stats_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.route_stat_key()

@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.RouteStat()

@pytest.mark.xfail(strict=True)
def test_case_5():
    routes_0 = module_0._Routes()
    assert f'{type(routes_0).__module__}.{type(routes_0).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(routes_0.stats).__module__}.{type(routes_0.stats).__qualname__}' == 'pybrake.routes.RouteStats'
    assert f'{type(routes_0.breakdowns).__module__}.{type(routes_0.breakdowns).__qualname__}' == 'pybrake.route_metric.RouteBreakdowns'
    str_0 = 'apm_disabled'
    dict_0 = {str_0: routes_0}
    routes_1 = module_0._Routes(**dict_0)
    module_1.get_parameter(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    routes_0 = module_0._Routes()
    assert f'{type(routes_0).__module__}.{type(routes_0).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(routes_0.stats).__module__}.{type(routes_0.stats).__qualname__}' == 'pybrake.routes.RouteStats'
    assert f'{type(routes_0.breakdowns).__module__}.{type(routes_0.breakdowns).__qualname__}' == 'pybrake.route_metric.RouteBreakdowns'
    str_0 = 'apm_disabled'
    dict_0 = {str_0: routes_0}
    routes_1 = module_0._Routes(**dict_0)
    var_0 = routes_1.notify(dict_0)
    module_1.get_parameter(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    routes_0 = module_0._Routes()
    assert f'{type(routes_0).__module__}.{type(routes_0).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(routes_0.stats).__module__}.{type(routes_0.stats).__qualname__}' == 'pybrake.routes.RouteStats'
    assert f'{type(routes_0.breakdowns).__module__}.{type(routes_0.breakdowns).__qualname__}' == 'pybrake.route_metric.RouteBreakdowns'
    str_0 = 'apm_disabled'
    dict_0 = {str_0: routes_0}
    route_stats_0 = module_0.RouteStats(host=str_0, **dict_0)
    routes_1 = module_0._Routes(**dict_0)
    module_2.len_q(routes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    routes_0 = module_0._Routes()
    assert f'{type(routes_0).__module__}.{type(routes_0).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(routes_0.stats).__module__}.{type(routes_0.stats).__qualname__}' == 'pybrake.routes.RouteStats'
    assert f'{type(routes_0.breakdowns).__module__}.{type(routes_0.breakdowns).__qualname__}' == 'pybrake.route_metric.RouteBreakdowns'
    str_0 = 'apm_disabled'
    dict_0 = {str_0: routes_0}
    route_stats_0 = module_0.RouteStats(host=str_0, **dict_0)
    routes_1 = module_0._Routes(**dict_0)
    none_type_0 = None
    var_0 = route_stats_0.notify(none_type_0)
    module_2.len_q(routes_0)