# Automatically generated by Pynguin.
import pytest
import pybrake.test_helper as module_0

def test_case_0():
    var_0 = module_0.get_exception()

def test_case_1():
    module_0.build_logging_record_exception()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.LogRecord'
    assert var_0.name == 'test'
    assert f'{type(var_0.msg).__module__}.{type(var_0.msg).__qualname__}' == 'builtins.ValueError'
    assert var_0.args == ()
    assert var_0.levelname == 'ERROR'
    assert var_0.levelno == 40
    assert var_0.pathname == '/input/pybrake/test_helper.py'
    assert var_0.filename == 'test_helper.py'
    assert var_0.module == 'test_helper'
    assert f'{type(var_0.exc_info).__module__}.{type(var_0.exc_info).__qualname__}' == 'builtins.tuple'
    assert len(var_0.exc_info) == 3
    assert var_0.exc_text == 'Traceback (most recent call last):\n  File "/input/pybrake/test_helper.py", line 24, in build_logging_record_exception\n    raise ValueError("hello")\nValueError: hello'
    assert var_0.stack_info is None
    assert var_0.lineno == 26
    assert var_0.funcName == 'build_logging_record_exception'
    assert var_0.created == pytest.approx(1665635080.4151826, abs=0.01, rel=0.01)
    assert var_0.relativeCreated == pytest.approx(601928.0459880829, abs=0.01, rel=0.01)
    assert var_0.thread == 139883191465728
    assert var_0.processName == 'MainProcess'
    assert var_0.process == 44
    assert var_0.message == 'hello'

def test_case_2():
    var_0 = module_0.get_nested_exception()

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.get_exception_in_cython()

@pytest.mark.xfail(strict=True)
def test_case_4():
    module_0.build_logging_record_exception()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'logging.LogRecord'
    assert var_0.name == 'test'
    assert f'{type(var_0.msg).__module__}.{type(var_0.msg).__qualname__}' == 'builtins.ValueError'
    assert var_0.args == ()
    assert var_0.levelname == 'ERROR'
    assert var_0.levelno == 40
    assert var_0.pathname == '/input/pybrake/test_helper.py'
    assert var_0.filename == 'test_helper.py'
    assert var_0.module == 'test_helper'
    assert f'{type(var_0.exc_info).__module__}.{type(var_0.exc_info).__qualname__}' == 'builtins.tuple'
    assert len(var_0.exc_info) == 3
    assert var_0.exc_text == 'Traceback (most recent call last):\n  File "/input/pybrake/test_helper.py", line 24, in build_logging_record_exception\n    raise ValueError("hello")\nValueError: hello'
    assert var_0.stack_info is None
    assert var_0.lineno == 26
    assert var_0.funcName == 'build_logging_record_exception'
    assert var_0.created == pytest.approx(1665635080.487104, abs=0.01, rel=0.01)
    assert var_0.relativeCreated == pytest.approx(601999.9673366547, abs=0.01, rel=0.01)
    assert var_0.thread == 139883191465728
    assert var_0.processName == 'MainProcess'
    assert var_0.process == 44
    assert var_0.message == 'hello'
    var_1 = module_0.build_notice_from_str(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    module_0.build_logging_record_error()

def test_case_6():
    var_0 = module_0.logger_dummy_handler()