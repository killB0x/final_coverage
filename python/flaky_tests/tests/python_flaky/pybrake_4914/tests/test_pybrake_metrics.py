# Automatically generated by Pynguin.
import pytest
import pybrake.metrics as module_0

def test_case_0():
    str_0 = ''
    var_0 = module_0.start_span(str_0)
    assert module_0.FLUSH_PERIOD == 15

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = metric_0.start_span(bool_0)
    none_type_0 = None
    metric_1 = module_0.Metric()
    var_1 = module_0.end_span(metric_1)
    var_1.end_span(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.get_active()
    assert module_0.FLUSH_PERIOD == 15
    metric_0 = module_0.Metric()
    metric_1 = module_0.Metric()
    var_1 = metric_1.end()
    assert metric_1.end_time == pytest.approx(1665637482.8642712, abs=0.01, rel=0.01)
    var_1.end()

def test_case_3():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    str_0 = '@E,^zDxgfp2@'
    var_0 = metric_0.start_span(str_0)
    var_1 = metric_0.start_span(metric_0)

def test_case_4():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    span_0 = module_0.Span(start_time=metric_0)
    assert span_0.name == ''
    assert f'{type(span_0.start_time).__module__}.{type(span_0.start_time).__qualname__}' == 'pybrake.metrics.Metric'
    var_0 = metric_0.end_span(span_0)
    var_1 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.8683078, abs=0.01, rel=0.01)
    var_2 = module_0.start_span(var_1)
    bool_0 = True
    span_1 = module_0.Span()
    assert span_1.name == ''
    assert span_1.start_time == pytest.approx(1665637482.868836, abs=0.01, rel=0.01)
    var_3 = module_0.start_span(bool_0)
    var_4 = module_0.set_active(span_0)

def test_case_5():
    span_0 = module_0.Span()
    assert span_0.name == ''
    assert span_0.start_time == pytest.approx(1665637482.8705463, abs=0.01, rel=0.01)
    assert module_0.FLUSH_PERIOD == 15

@pytest.mark.xfail(strict=True)
def test_case_6():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.8711903, abs=0.01, rel=0.01)
    int_0 = 143
    span_0 = module_0.Span(name=var_0)
    assert span_0.start_time == pytest.approx(1665637482.8714223, abs=0.01, rel=0.01)
    span_1 = module_0.Span(name=int_0, start_time=int_0)
    assert span_1.start_time == 143
    span_1.end(int_0)

def test_case_7():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = metric_0.end_span(metric_0)
    var_1 = module_0.activated_metric(metric_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_1.gen).__module__}.{type(var_1.gen).__qualname__}' == 'builtins.generator'
    assert f'{type(var_1.args).__module__}.{type(var_1.args).__qualname__}' == 'builtins.tuple'
    assert len(var_1.args) == 1
    assert var_1.kwds == {}
    var_2 = metric_0.start_span(var_1)
    var_3 = module_0.set_active(metric_0)
    var_4 = metric_0.start_span(var_2)
    var_5 = module_0.get_active()
    var_6 = var_5.end_span(var_0)

def test_case_8():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15

def test_case_9():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    str_0 = '@E,^zDxgfp2@'
    var_0 = metric_0.start_span(str_0)
    var_1 = module_0.set_active(metric_0)
    var_2 = metric_0.start_span(var_1)

def test_case_10():
    metric_0 = module_0.get_active()
    assert module_0.FLUSH_PERIOD == 15

def test_case_11():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    str_0 = '@E,^zDxgfp2@'
    var_0 = metric_0.start_span(str_0)
    var_1 = metric_0.end_span(var_0)
    var_2 = metric_0.start_span(var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = module_0.get_active()
    str_0 = 'JK1\x0cq9\r\n2y9N\n'
    bool_0 = False
    var_1 = module_0.set_active(bool_0)
    span_0 = module_0.Span(start_time=metric_0)
    assert span_0.name == ''
    assert f'{type(span_0.start_time).__module__}.{type(span_0.start_time).__qualname__}' == 'pybrake.metrics.Metric'
    var_2 = metric_0.end_span(span_0)
    var_3 = module_0.activated_metric(var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_3.gen).__module__}.{type(var_3.gen).__qualname__}' == 'builtins.generator'
    assert var_3.args == (None,)
    assert var_3.kwds == {}
    var_4 = metric_0.start_span(str_0)
    module_0.end_span(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = module_0.get_active()
    var_1 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.8852923, abs=0.01, rel=0.01)
    span_0 = module_0.Span(start_time=metric_0)
    assert span_0.name == ''
    assert f'{type(span_0.start_time).__module__}.{type(span_0.start_time).__qualname__}' == 'pybrake.metrics.Metric'
    var_2 = metric_0.end_span(span_0)
    var_3 = module_0.activated_metric(var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_3.gen).__module__}.{type(var_3.gen).__qualname__}' == 'builtins.generator'
    assert var_3.args == (None,)
    assert var_3.kwds == {}
    var_4 = metric_0.start_span(var_0)
    var_5 = module_0.end_span(var_3)
    var_6 = metric_0.end()
    var_0.start_span(var_6)

@pytest.mark.xfail(strict=True)
def test_case_14():
    complex_0 = (-249.406-176.22413j)
    bool_0 = False
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    tuple_0 = (complex_0, metric_0, complex_0)
    tuple_1 = (complex_0, bool_0, metric_0, tuple_0)
    dict_0 = {tuple_1: tuple_1, bool_0: tuple_1, tuple_0: tuple_0, complex_0: tuple_1}
    span_0 = module_0.Span(name=dict_0)
    assert span_0.start_time == pytest.approx(1665637482.8896077, abs=0.01, rel=0.01)
    str_0 = 'v'
    var_0 = module_0.set_active(str_0)
    module_0.start_span(var_0)

def test_case_15():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = metric_0.start_span(metric_0)
    var_1 = module_0.get_active()
    var_2 = metric_0.end_span(metric_0)
    var_3 = module_0.activated_metric(var_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_3.gen).__module__}.{type(var_3.gen).__qualname__}' == 'builtins.generator'
    assert var_3.args == (None,)
    assert var_3.kwds == {}
    var_4 = metric_0.start_span(var_3)
    var_5 = module_0.end_span(var_0)
    var_6 = module_0.start_span(var_0)
    var_7 = module_0.set_active(metric_0)
    var_8 = metric_0.start_span(var_4)
    var_9 = module_0.get_active()
    var_10 = var_9.end_span(var_2)
    var_11 = module_0.set_active(metric_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    int_0 = -546
    none_type_0 = None
    span_0 = module_0.Span(metric=int_0)
    assert span_0.name == ''
    assert span_0.start_time == pytest.approx(1665637482.8954191, abs=0.01, rel=0.01)
    var_0 = metric_0.start_span(none_type_0)
    var_1 = module_0.get_active()
    str_0 = 'JK1\x0cq9\r\n2Kcy9N\n'
    var_2 = metric_0.start_span(str_0)
    var_3 = module_0.end_span(str_0)
    var_4 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.8966353, abs=0.01, rel=0.01)
    var_5 = module_0.activated_metric(var_4)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_5.gen).__module__}.{type(var_5.gen).__qualname__}' == 'builtins.generator'
    assert var_5.args == (None,)
    assert var_5.kwds == {}
    var_6 = module_0.start_span(metric_0)
    var_7 = module_0.set_active(metric_0)
    var_8 = metric_0.start_span(none_type_0)
    var_9 = module_0.get_active()
    assert var_9.end_time == pytest.approx(1665637482.8966353, abs=0.01, rel=0.01)
    var_10 = var_9.end_span(str_0)
    var_11 = module_0.get_active()
    assert var_11.end_time == pytest.approx(1665637482.8966353, abs=0.01, rel=0.01)
    var_12 = module_0.start_span(var_7)
    int_0.end_span(none_type_0, end_time=span_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    none_type_0 = None
    var_0 = metric_0.start_span(none_type_0)
    var_1 = metric_0.start_span(metric_0)
    var_2 = module_0.get_active()
    str_0 = 'MX&d*Zk'
    var_3 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.9020145, abs=0.01, rel=0.01)
    var_4 = module_0.start_span(var_1)
    var_5 = metric_0.start_span(var_3)
    var_0.end_span(str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    var_0 = module_0.set_active(metric_0)
    var_1 = metric_0.start_span(var_0)
    var_2 = module_0.end_span(var_0)
    var_3 = metric_0.end_span(var_2)
    none_type_0 = None
    var_4 = module_0.start_span(none_type_0)
    var_5 = module_0.activated_metric(var_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_5.gen).__module__}.{type(var_5.gen).__qualname__}' == 'builtins.generator'
    assert var_5.args == (None,)
    assert var_5.kwds == {}
    var_6 = metric_0.start_span(var_3)
    var_7 = module_0.end_span(var_3)
    var_8 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.9064524, abs=0.01, rel=0.01)
    var_9 = module_0.start_span(var_8)
    var_10 = module_0.set_active(var_6)
    var_0.end()

@pytest.mark.xfail(strict=True)
def test_case_19():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    none_type_0 = None
    var_0 = module_0.end_span(none_type_0)
    var_1 = metric_0.start_span(none_type_0)
    var_2 = metric_0.start_span(metric_0)
    var_3 = module_0.get_active()
    str_0 = 'JK1\x0cq9\r\n2Kcy9N\n'
    var_4 = metric_0.end_span(metric_0)
    var_5 = module_0.activated_metric(var_3)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_5.gen).__module__}.{type(var_5.gen).__qualname__}' == 'builtins.generator'
    assert var_5.args == (None,)
    assert var_5.kwds == {}
    var_6 = metric_0.start_span(str_0)
    var_7 = module_0.end_span(str_0)
    var_8 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.9104397, abs=0.01, rel=0.01)
    var_9 = module_0.activated_metric(var_8)
    assert f'{type(var_9).__module__}.{type(var_9).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_9.gen).__module__}.{type(var_9.gen).__qualname__}' == 'builtins.generator'
    assert var_9.args == (None,)
    assert var_9.kwds == {}
    var_10 = module_0.start_span(var_2)
    var_11 = module_0.set_active(metric_0)
    var_12 = metric_0.start_span(none_type_0)
    var_13 = module_0.get_active()
    assert var_13.end_time == pytest.approx(1665637482.9104397, abs=0.01, rel=0.01)
    var_14 = module_0.end_span(var_10)
    var_15 = var_13.end_span(str_0)
    var_16 = module_0.activated_metric(var_1)
    assert f'{type(var_16).__module__}.{type(var_16).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_16.gen).__module__}.{type(var_16.gen).__qualname__}' == 'builtins.generator'
    assert var_16.args == (None,)
    assert var_16.kwds == {}
    var_17 = module_0.get_active()
    assert var_17.end_time == pytest.approx(1665637482.9104397, abs=0.01, rel=0.01)
    var_18 = metric_0.end()
    var_1.end()

@pytest.mark.xfail(strict=True)
def test_case_20():
    metric_0 = module_0.Metric()
    assert module_0.FLUSH_PERIOD == 15
    int_0 = -546
    none_type_0 = None
    bool_0 = False
    var_0 = metric_0.start_span(int_0, start_time=bool_0)
    var_1 = module_0.end_span(none_type_0)
    var_2 = metric_0.start_span(none_type_0)
    var_3 = metric_0.start_span(metric_0)
    var_4 = module_0.get_active()
    str_0 = '<K1\x0cvj\r\n2KcB9N\n'
    var_5 = metric_0.end_span(metric_0)
    var_6 = module_0.activated_metric(var_4)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_6.gen).__module__}.{type(var_6.gen).__qualname__}' == 'builtins.generator'
    assert var_6.args == (None,)
    assert var_6.kwds == {}
    var_7 = metric_0.start_span(str_0)
    var_8 = module_0.end_span(str_0)
    var_9 = metric_0.end()
    assert metric_0.end_time == pytest.approx(1665637482.9186275, abs=0.01, rel=0.01)
    var_10 = module_0.activated_metric(var_9)
    assert f'{type(var_10).__module__}.{type(var_10).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_10.gen).__module__}.{type(var_10.gen).__qualname__}' == 'builtins.generator'
    assert var_10.args == (None,)
    assert var_10.kwds == {}
    var_11 = module_0.start_span(var_3)
    var_12 = module_0.set_active(metric_0)
    var_13 = metric_0.start_span(none_type_0)
    var_1.end_span(var_1)