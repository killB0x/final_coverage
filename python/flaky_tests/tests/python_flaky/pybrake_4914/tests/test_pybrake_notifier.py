# Automatically generated by Pynguin.
import pytest
import pybrake.notifier as module_0

def test_case_0():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'

def test_case_1():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    var_0 = notifier_0.close()

@pytest.mark.xfail(strict=True)
def test_case_2():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    none_type_0 = None
    notifier_0.send_notice(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    none_type_0 = None
    var_0 = notifier_0.build_notice(none_type_0)
    notifier_0.send_notice(notifier_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    notifier_0.notify(notifier_0)

def test_case_5():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    str_0 = '#uKfJS2!{>'
    var_0 = notifier_0.notify_sync(str_0)
    var_1 = notifier_0.close()

def test_case_6():
    notifier_0 = module_0.Notifier()
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    str_0 = '#uKfJS2!{>'
    var_0 = notifier_0.notify(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'concurrent.futures._base.Future'
    var_1 = notifier_0.notify_sync(str_0)
    var_2 = notifier_0.close()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'iRH04'
    none_type_0 = None
    dict_0 = {str_0: str_0, str_0: str_0, str_0: none_type_0, str_0: str_0}
    notifier_0 = module_0.Notifier(project_id=none_type_0, **dict_0)
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    var_0 = notifier_0.build_notice(str_0)
    var_1 = notifier_0.notify(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'concurrent.futures._base.Future'
    var_2 = notifier_0.close()
    var_3 = notifier_0.notify_sync(str_0)
    notifier_0.build_notice(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'iRH04'
    none_type_0 = None
    dict_0 = {str_0: str_0, str_0: str_0, str_0: none_type_0, str_0: str_0}
    notifier_0 = module_0.Notifier(project_id=none_type_0, **dict_0)
    assert f'{type(notifier_0).__module__}.{type(notifier_0).__qualname__}' == 'pybrake.notifier.Notifier'
    assert f'{type(notifier_0.routes).__module__}.{type(notifier_0.routes).__qualname__}' == 'pybrake.routes._Routes'
    assert f'{type(notifier_0.queries).__module__}.{type(notifier_0.queries).__qualname__}' == 'pybrake.queries.QueryStats'
    assert f'{type(notifier_0.queues).__module__}.{type(notifier_0.queues).__qualname__}' == 'pybrake.queues.QueueStats'
    var_0 = notifier_0.build_notice(str_0)
    var_1 = notifier_0.notify(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'concurrent.futures._base.Future'
    var_2 = notifier_0.close()
    var_3 = notifier_0.notify_sync(str_0)
    notifier_0.send_notice(var_0)