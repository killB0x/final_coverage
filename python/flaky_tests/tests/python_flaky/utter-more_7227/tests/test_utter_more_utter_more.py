# Automatically generated by Pynguin.
import pytest
import utter_more.utter_more as module_0
import posixpath as module_1
import re as module_2

def test_case_0():
    utter_more_0 = module_0.UtterMore()
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []

def test_case_1():
    str_0 = 'go\rI ,}m>'
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == ['g', 'o', '\r', 'I', ' ', ',', '}', 'm', '>']
    assert utter_more_0.utterances == []
    str_1 = 'BQO4XU@G(u)#'
    var_0 = utter_more_0.build_utterances(str_1)

def test_case_2():
    str_0 = '\x0b>'
    utter_more_0 = module_0.UtterMore()
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.build_utterances(str_0)

def test_case_3():
    utter_more_0 = module_0.UtterMore()
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.iter_build_utterances()

@pytest.mark.xfail(strict=True)
def test_case_4():
    utter_more_0 = module_0.UtterMore()
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.iter_build_utterances()
    var_1 = utter_more_0.add_utterance_template(utter_more_0)
    var_0.add_utterance_template(var_0)

def test_case_5():
    bytes_0 = b'\xd8\xb9\x1cD'
    var_0 = module_1.split(bytes_0)
    utter_more_0 = module_0.UtterMore(*var_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == [216, 185, 28, 68]
    assert utter_more_0.utterances == []
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_0, bytes_0)

def test_case_6():
    str_0 = '7?J_'
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == ['7', '?', 'J', '_']
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.iter_build_utterances()
    assert utter_more_0.utterances == [['7'], ['?'], ['J'], ['_']]
    var_1 = var_0.__dir__()
    var_2 = utter_more_0.add_utterance_template(var_0)
    utter_more_1 = module_0.UtterMore(*str_0)

def test_case_7():
    str_0 = ''
    utter_more_0 = module_0.UtterMore()
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.save_for_alexa(str_0, str_0, utter_more_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '7?J_'
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == ['7', '?', 'J', '_']
    assert utter_more_0.utterances == []
    utter_more_0.save_utterances(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '7?J_'
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == ['7', '?', 'J', '_']
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.iter_build_utterances()
    assert utter_more_0.utterances == [['7'], ['?'], ['J'], ['_']]
    var_1 = utter_more_0.add_utterance_template(utter_more_0)
    var_2 = module_2.purge()
    bool_0 = False
    utter_more_0.read_utterance_templates_from_file(bool_0)
    var_3 = var_0.__contains__(var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '>1\x0c'
    utter_more_0 = module_0.UtterMore()
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    utter_more_0.save_for_alexa(str_0, str_0, utter_more_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = ''
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.iter_build_utterances()
    utter_more_0.save_for_alexa(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = ''
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    str_1 = 'BQO4XU@G(t)#'
    var_0 = utter_more_0.add_utterance_template(str_0)
    var_1 = utter_more_0.build_utterances(str_1)
    var_2 = utter_more_0.iter_build_utterances()
    assert utter_more_0.utterances == [['']]
    var_3 = utter_more_0.save_for_alexa(str_0, str_0, utter_more_0)
    module_1.splitdrive(var_3)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '7?J_'
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == ['7', '?', 'J', '_']
    assert utter_more_0.utterances == []
    int_0 = 1
    utter_more_0.read_utterance_templates_from_file(int_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '.'
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == ['.']
    assert utter_more_0.utterances == []
    var_0 = utter_more_0.add_utterance_template(str_0)
    var_1 = utter_more_0.iter_build_utterances()
    assert utter_more_0.utterances == [['.'], ['.']]
    var_2 = utter_more_0.save_for_alexa(str_0, str_0, utter_more_0)
    var_3 = utter_more_0.iter_build_utterances()
    assert utter_more_0.utterances == [['.'], ['.'], ['.'], ['.']]
    var_1.iter_build_utterances()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ''
    utter_more_0 = module_0.UtterMore(*str_0)
    assert f'{type(utter_more_0).__module__}.{type(utter_more_0).__qualname__}' == 'utter_more.utter_more.UtterMore'
    assert utter_more_0.utterance_templates == []
    assert utter_more_0.utterances == []
    str_1 = '\n        Returns the made utterances given an utterance template. It supports\n        the following substitutions:\n        \n        (a|b|c|...) - [OR] This wil place a OR b OR c OR etc. in its place\n        {{slot}} - [OPTIONAL SLOT] This will place the slot {slot} or nothing\n            in its place.\n        (a*1|b*2) (c^1|d^2) - [CONDITIONAL OR] The * defines a master with a tag\n            of whatever follows the * while the ^ defines a follower of the tag\n            of whatever follows the ^. So utterances with a word tagged with\n            ^sample will only be returned if the utterance also has a word\n            tagged with *sample. The above will display \'a c\' OR \'b d\'. If we\n            have multiple masters, then the follower(s) will appear if at least\n            one master is present. And alternatively, you can treat multiple \n            followers as a CONDITIONAL AND.\n\n        For example, the template\n        \n        "What (is*singular|are*plural) (that^singular|those^plural) {{things}}"\n        will return the following utterances:\n\n                    [\'What is that {things}\',\n                    \'What is that\',\n                    \'What are those {things}\',\n                    \'What are those\']\n\n        Parameters:\n        utterance_template - The template the utterances are created from\n        '
    var_0 = utter_more_0.add_utterance_template(str_0)
    var_1 = utter_more_0.build_utterances(str_1)
    var_2 = utter_more_0.iter_build_utterances()
    assert utter_more_0.utterances == [['']]
    var_1.save_for_alexa(var_2, var_2, var_2)