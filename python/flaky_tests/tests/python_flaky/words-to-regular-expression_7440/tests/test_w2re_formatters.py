# Automatically generated by Pynguin.
import pytest
import w2re.prefix_tree.primitives as module_0
import w2re.formatters as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    prefix_tree_node_0 = module_0.PrefixTreeNode()
    python_formatter_0 = module_1.PythonFormatter()
    str_0 = python_formatter_0.wrap_regexp(prefix_tree_node_0)
    assert str_0 == '\\A\\Z'
    prefix_tree_node_1 = module_0.PrefixTreeNode()
    var_0 = prefix_tree_node_1.to_regexp()
    var_0.wrap_regexp(dict_0)

def test_case_1():
    python_formatter_0 = module_1.PythonFormatter()

def test_case_2():
    str_0 = 'kn0xOpIyTl&'
    prefix_tree_node_0 = module_0.PrefixTreeNode()
    var_0 = prefix_tree_node_0.add(str_0)
    base_formatter_0 = module_1.BaseFormatter()
    assert f'{type(module_1.BaseFormatter.description).__module__}.{type(module_1.BaseFormatter.description).__qualname__}' == 'builtins.method'
    assert f'{type(module_1.BaseFormatter.code).__module__}.{type(module_1.BaseFormatter.code).__qualname__}' == 'builtins.method'
    with pytest.raises(NotImplementedError):
        base_formatter_0.wrap_regexp(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    python_word_match_formatter_0 = module_1.PythonWordMatchFormatter()
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    prefix_tree_node_0 = module_0.PrefixTreeNode(python_word_match_formatter_0)
    str_0 = python_word_match_formatter_0.wrap_regexp(prefix_tree_node_0)
    assert str_0 == '\\A\\Z'
    python_word_match_formatter_0.wrap_regexp(list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    prefix_tree_node_0 = module_0.PrefixTreeNode()
    python_word_match_formatter_0 = module_1.PythonWordMatchFormatter()
    python_formatter_0 = module_1.PythonFormatter()
    str_0 = '?SX`9?>'
    prefix_tree_node_1 = module_0.PrefixTreeNode()
    var_0 = prefix_tree_node_0.to_regexp()
    prefix_tree_node_2 = module_0.PrefixTreeNode()
    str_1 = python_word_match_formatter_0.wrap_regexp(prefix_tree_node_2)
    assert str_1 == '\\A\\Z'
    var_1 = prefix_tree_node_1.add(str_0)
    str_2 = ' 3QF&Cx)YC!'
    str_3 = prefix_tree_node_0.add(var_1, prefix_tree_node_1)
    prefix_tree_node_3 = module_0.PrefixTreeNode(python_formatter_0)
    str_4 = python_formatter_0.wrap_regexp(prefix_tree_node_1)
    assert str_4 == '\\?SX`9\\?>'
    var_2 = prefix_tree_node_3.add(str_2)
    var_3 = prefix_tree_node_1.to_regexp()
    var_2.add(python_word_match_formatter_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    prefix_tree_node_0 = module_0.PrefixTreeNode()
    python_word_match_formatter_0 = module_1.PythonWordMatchFormatter()
    python_formatter_0 = module_1.PythonFormatter()
    str_0 = '?SX`9?>'
    prefix_tree_node_1 = module_0.PrefixTreeNode()
    var_0 = prefix_tree_node_0.to_regexp()
    prefix_tree_node_2 = module_0.PrefixTreeNode()
    str_1 = python_word_match_formatter_0.wrap_regexp(prefix_tree_node_2)
    assert str_1 == '\\A\\Z'
    var_1 = prefix_tree_node_1.add(str_0)
    str_2 = python_word_match_formatter_0.wrap_regexp(prefix_tree_node_1)
    assert str_2 == '(?:\\W+|\\A)(\\?SX`9\\?>)(?=\\W+|\\Z)'
    python_word_match_formatter_0.wrap_regexp(var_1)