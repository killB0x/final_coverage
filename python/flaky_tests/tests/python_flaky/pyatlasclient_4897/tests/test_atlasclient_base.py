# Automatically generated by Pynguin.
import pytest
import atlasclient.base as module_0
import inspect as module_1
import json as module_2
import ast as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    generated_identifier_mixin_0 = module_0.GeneratedIdentifierMixin()
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    assert f'{type(module_0.GeneratedIdentifierMixin.identifier).__module__}.{type(module_0.GeneratedIdentifierMixin.identifier).__qualname__}' == 'builtins.property'
    module_0.Model(generated_identifier_mixin_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.QueryableModel()

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 434
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    module_0.QueryableModel(*dependent_model_collection_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.QueryableModelCollection()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'baseEtityuid'
    dict_0 = {str_0: str_0}
    module_0.Model(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.trace()
    var_1 = var_0.__repr__()
    model_collection_0 = module_0.ModelCollection(var_0, var_0)
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    model_collection_0.__next__()

def test_case_6():
    none_type_0 = None
    dependent_model_collection_0 = module_0.DependentModelCollection(none_type_0, none_type_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = dependent_model_collection_0.to_dict()

def test_case_7():
    none_type_0 = None
    dependent_model_collection_0 = module_0.DependentModelCollection(none_type_0, none_type_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = module_2.dumps(dependent_model_collection_0, default=dependent_model_collection_0, sort_keys=dependent_model_collection_0)
    assert var_0 == 'null'

def test_case_8():
    int_0 = 434
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = dependent_model_collection_0.__call__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'atlasclient.base.DependentModelCollection'
    assert len(var_0) == 0

def test_case_9():
    int_0 = 434
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = dependent_model_collection_0.remove(int_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 439
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    dependent_model_0 = module_0.DependentModel(dependent_model_collection_0)
    assert f'{type(dependent_model_0).__module__}.{type(dependent_model_0).__qualname__}' == 'atlasclient.base.DependentModel'
    assert dependent_model_0.client == 439
    dependent_model_0.__missing__(dependent_model_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 434
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = dependent_model_collection_0.refresh()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'atlasclient.base.DependentModelCollection'
    assert len(var_0) == 0
    var_1 = dependent_model_collection_0.to_dict()
    module_0.QueryableModel(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 1
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    dependent_model_0 = module_0.DependentModel(dependent_model_collection_0)
    assert f'{type(dependent_model_0).__module__}.{type(dependent_model_0).__qualname__}' == 'atlasclient.base.DependentModel'
    assert dependent_model_0.client == 1
    var_0 = dependent_model_0.refresh()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'atlasclient.base.DependentModel'
    assert var_0.client == 1
    dependent_model_collection_0.__call__(*int_0)

def test_case_13():
    int_0 = 439
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    dependent_model_0 = module_0.DependentModel(dependent_model_collection_0)
    assert f'{type(dependent_model_0).__module__}.{type(dependent_model_0).__qualname__}' == 'atlasclient.base.DependentModel'
    assert dependent_model_0.client == 439
    var_0 = dependent_model_0.to_json_dict()

def test_case_14():
    int_0 = 439
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    dependent_model_0 = module_0.DependentModel(dependent_model_collection_0)
    assert f'{type(dependent_model_0).__module__}.{type(dependent_model_0).__qualname__}' == 'atlasclient.base.DependentModel'
    assert dependent_model_0.client == 439
    var_0 = dependent_model_0.__dir__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 439
    dependent_model_collection_0 = module_0.DependentModelCollection(int_0, int_0, int_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = dependent_model_collection_0.to_dict()
    dependent_model_0 = module_0.DependentModel(dependent_model_collection_0)
    assert f'{type(dependent_model_0).__module__}.{type(dependent_model_0).__qualname__}' == 'atlasclient.base.DependentModel'
    assert dependent_model_0.client == 439
    var_1 = dependent_model_collection_0.__call__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'atlasclient.base.DependentModelCollection'
    assert len(var_1) == 0
    var_2 = dependent_model_0.inflate()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'atlasclient.base.DependentModel'
    assert var_2.client == 439
    var_3 = dependent_model_collection_0.remove(dependent_model_0)
    var_4 = var_2.to_dict()
    module_0.Model(var_3)

@pytest.mark.xfail(strict=True)
def test_case_16():
    pollable_mixin_0 = module_0.PollableMixin()
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    assert module_0.PollableMixin.default_interval == 15
    assert module_0.PollableMixin.default_timeout == 3600
    assert f'{type(module_0.PollableMixin.has_failed).__module__}.{type(module_0.PollableMixin.has_failed).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PollableMixin.is_finished).__module__}.{type(module_0.PollableMixin.is_finished).__qualname__}' == 'builtins.property'
    module_1.getmembers(pollable_mixin_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    model_collection_0 = module_0.ModelCollection(none_type_0, none_type_0)
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    module_1.getmembers(none_type_0, model_collection_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    dependent_model_collection_0 = module_0.DependentModelCollection(none_type_0, none_type_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    var_0 = dependent_model_collection_0.__dir__()
    module_1.formatargvalues(dependent_model_collection_0, var_0, var_0, none_type_0, dependent_model_collection_0, dependent_model_collection_0, formatvalue=dependent_model_collection_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 439
    none_type_0 = None
    dependent_model_collection_0 = module_0.DependentModelCollection(none_type_0, none_type_0)
    assert len(dependent_model_collection_0) == 0
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    dependent_model_collection_1 = module_0.DependentModelCollection(int_0, none_type_0, dependent_model_collection_0)
    assert len(dependent_model_collection_1) == 0
    var_0 = dependent_model_collection_0.remove(dependent_model_collection_1)
    num_0 = module_3.Num(*dependent_model_collection_1)
    assert f'{type(num_0).__module__}.{type(num_0).__qualname__}' == 'ast.Constant'
    var_1 = module_1.ismethoddescriptor(dependent_model_collection_1)
    var_2 = var_1.__dir__()
    var_3 = dependent_model_collection_0.__call__()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'atlasclient.base.DependentModelCollection'
    assert len(var_3) == 0
    model_0 = module_0.Model(var_3)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'atlasclient.base.Model'
    assert model_0.client is None
    assert module_0.Model.min_version == (1, 7, 0)
    assert f'{type(module_0.Model.identifier).__module__}.{type(module_0.Model.identifier).__qualname__}' == 'builtins.property'
    model_0.to_dict()

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    queryable_model_collection_0 = module_0.QueryableModelCollection(*list_0)
    assert queryable_model_collection_0.client is None
    assert queryable_model_collection_0.model_class is None
    assert queryable_model_collection_0.parent is None
    assert queryable_model_collection_0.request is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    assert f'{type(module_0.QueryableModelCollection.is_admin_api).__module__}.{type(module_0.QueryableModelCollection.is_admin_api).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.QueryableModelCollection.url).__module__}.{type(module_0.QueryableModelCollection.url).__qualname__}' == 'builtins.property'
    var_0 = queryable_model_collection_0.remove(list_0)
    queryable_model_collection_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    queryable_model_collection_0 = module_0.QueryableModelCollection(*list_0)
    assert queryable_model_collection_0.client is None
    assert queryable_model_collection_0.model_class is None
    assert queryable_model_collection_0.parent is None
    assert queryable_model_collection_0.request is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    assert f'{type(module_0.QueryableModelCollection.is_admin_api).__module__}.{type(module_0.QueryableModelCollection.is_admin_api).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.QueryableModelCollection.url).__module__}.{type(module_0.QueryableModelCollection.url).__qualname__}' == 'builtins.property'
    var_0 = queryable_model_collection_0.remove(queryable_model_collection_0)
    queryable_model_collection_0.create(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    queryable_model_collection_0 = module_0.QueryableModelCollection(*list_0)
    assert queryable_model_collection_0.client is None
    assert queryable_model_collection_0.model_class is None
    assert queryable_model_collection_0.parent is None
    assert queryable_model_collection_0.request is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    assert f'{type(module_0.QueryableModelCollection.is_admin_api).__module__}.{type(module_0.QueryableModelCollection.is_admin_api).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.QueryableModelCollection.url).__module__}.{type(module_0.QueryableModelCollection.url).__qualname__}' == 'builtins.property'
    str_0 = '00D>k\r6pGt ;v!k;p\x0b'
    dict_0 = {str_0: none_type_0}
    queryable_model_collection_0.__call__(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    queryable_model_collection_0 = module_0.QueryableModelCollection(*list_0)
    assert queryable_model_collection_0.client is None
    assert queryable_model_collection_0.model_class is None
    assert queryable_model_collection_0.parent is None
    assert queryable_model_collection_0.request is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.OLDEST_SUPPORTED_VERSION == (1, 7, 0)
    assert f'{type(module_0.QueryableModelCollection.is_admin_api).__module__}.{type(module_0.QueryableModelCollection.is_admin_api).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.QueryableModelCollection.url).__module__}.{type(module_0.QueryableModelCollection.url).__qualname__}' == 'builtins.property'
    model_0 = module_0.Model(queryable_model_collection_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'atlasclient.base.Model'
    assert model_0.client is None
    assert module_0.Model.min_version == (1, 7, 0)
    assert f'{type(module_0.Model.identifier).__module__}.{type(module_0.Model.identifier).__qualname__}' == 'builtins.property'
    var_0 = queryable_model_collection_0.remove(queryable_model_collection_0)
    dict_0 = {}
    var_1 = model_0.__dir__()
    var_2 = queryable_model_collection_0.__call__(**dict_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'atlasclient.base.QueryableModelCollection'
    assert var_2.client is None
    assert var_2.model_class is None
    assert var_2.parent is None
    assert var_2.request is None
    var_3 = var_2.remove(list_0)
    queryable_model_collection_0.__next__()