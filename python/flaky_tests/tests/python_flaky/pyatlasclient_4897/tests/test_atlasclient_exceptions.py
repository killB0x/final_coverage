# Automatically generated by Pynguin.
import pytest
import atlasclient.exceptions as module_0

def test_case_0():
    list_0 = []
    none_type_0 = None
    method_not_implemented_0 = module_0.MethodNotImplemented(list_0, retry_after=none_type_0)
    assert f'{type(method_not_implemented_0).__module__}.{type(method_not_implemented_0).__qualname__}' == 'atlasclient.exceptions.MethodNotImplemented'
    assert method_not_implemented_0.code == 501
    assert method_not_implemented_0.message == 'Not Implemented'
    assert method_not_implemented_0.details is None
    assert method_not_implemented_0.url is None
    assert method_not_implemented_0.method is None
    assert method_not_implemented_0.retry_after is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.MethodNotImplemented.code == 501
    assert module_0.MethodNotImplemented.message == 'Not Implemented'
    http_error_0 = module_0.HttpError()
    assert http_error_0.code == 500
    assert http_error_0.message == 'Unknown Error'
    assert module_0.HttpError.message == 'Unknown Error'
    assert module_0.HttpError.code == 500
    int_0 = 2930
    var_0 = http_error_0.__str__()
    assert var_0 == 'HTTP request failed for None None: Unknown Error 500: None'
    none_type_1 = None
    client_error_0 = module_0.ClientError()
    assert client_error_0.message == 'Unknown Error'
    assert module_0.ClientError.message == 'Unknown Error'
    forbidden_0 = module_0.Forbidden(message=var_0, url=client_error_0)
    assert forbidden_0.code == 403
    assert forbidden_0.message == 'HTTP request failed for None None: Unknown Error 500: None'
    assert module_0.Forbidden.code == 403
    assert module_0.Forbidden.message == 'Forbidden'
    var_1 = http_error_0.__str__()
    assert var_1 == 'HTTP request failed for None None: Unknown Error 500: None'
    var_2 = var_1.__str__()
    assert var_2 == 'HTTP request failed for None None: Unknown Error 500: None'
    conflict_0 = module_0.Conflict(int_0, retry_after=none_type_1)
    assert conflict_0.code == 2930
    assert conflict_0.message == 'Conflict'
    assert module_0.Conflict.code == 409
    assert module_0.Conflict.message == 'Conflict'
    server_unavailable_0 = module_0.ServerUnavailable()
    assert server_unavailable_0.code == 503
    assert server_unavailable_0.message == 'Service Unavailable'
    assert module_0.ServerUnavailable.code == 503
    assert module_0.ServerUnavailable.message == 'Service Unavailable'
    var_3 = server_unavailable_0.__str__()
    assert var_3 == 'HTTP request failed for None None: Service Unavailable 503: None'
    var_4 = var_3.__str__()
    assert var_4 == 'HTTP request failed for None None: Service Unavailable 503: None'
    conflict_1 = module_0.Conflict(message=var_4, details=var_3)
    assert conflict_1.code == 409
    assert conflict_1.message == 'HTTP request failed for None None: Service Unavailable 503: None'
    assert conflict_1.details == 'HTTP request failed for None None: Service Unavailable 503: None'
    var_5 = var_3.__str__()
    assert var_5 == 'HTTP request failed for None None: Service Unavailable 503: None'
    client_error_1 = module_0.ClientError(var_3)
    assert client_error_1.message == 'HTTP request failed for None None: Service Unavailable 503: None'
    var_6 = var_0.__str__()
    assert var_6 == 'HTTP request failed for None None: Unknown Error 500: None'
    var_7 = server_unavailable_0.__str__()
    assert var_7 == 'HTTP request failed for None None: Service Unavailable 503: None'

def test_case_1():
    client_error_0 = module_0.ClientError()
    assert client_error_0.message == 'Unknown Error'
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.ClientError.message == 'Unknown Error'

def test_case_2():
    bool_0 = True
    timeout_0 = module_0.Timeout(bool_0, bool_0)
    assert timeout_0.timeout is True
    assert timeout_0.message is True
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.Timeout.message == 'Operation timeout exceeded'
    none_type_0 = None
    method_not_allowed_0 = module_0.MethodNotAllowed(details=timeout_0, url=timeout_0, retry_after=none_type_0)
    assert f'{type(method_not_allowed_0).__module__}.{type(method_not_allowed_0).__qualname__}' == 'atlasclient.exceptions.MethodNotAllowed'
    assert method_not_allowed_0.code == 405
    assert method_not_allowed_0.message == 'Method Not Allowed'
    assert f'{type(method_not_allowed_0.details).__module__}.{type(method_not_allowed_0.details).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert f'{type(method_not_allowed_0.url).__module__}.{type(method_not_allowed_0.url).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert method_not_allowed_0.method is None
    assert method_not_allowed_0.retry_after is None
    assert module_0.MethodNotAllowed.code == 405
    assert module_0.MethodNotAllowed.message == 'Method Not Allowed'

def test_case_3():
    int_0 = 358
    timeout_0 = module_0.Timeout(int_0)
    assert timeout_0.timeout == 358
    assert timeout_0.message == 'Operation timeout exceeded'
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.Timeout.message == 'Operation timeout exceeded'
    bad_request_0 = module_0.BadRequest(timeout_0, url=timeout_0, retry_after=timeout_0)
    assert f'{type(bad_request_0).__module__}.{type(bad_request_0).__qualname__}' == 'atlasclient.exceptions.BadRequest'
    assert f'{type(bad_request_0.code).__module__}.{type(bad_request_0.code).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert bad_request_0.message == 'Bad request'
    assert bad_request_0.details is None
    assert f'{type(bad_request_0.url).__module__}.{type(bad_request_0.url).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert bad_request_0.method is None
    assert f'{type(bad_request_0.retry_after).__module__}.{type(bad_request_0.retry_after).__qualname__}' == 'atlasclient.exceptions.Timeout'
    assert module_0.BadRequest.code == 400
    assert module_0.BadRequest.message == 'Bad request'
    bad_request_1 = module_0.BadRequest(message=bad_request_0, details=int_0)
    assert bad_request_1.code == 400
    assert f'{type(bad_request_1.message).__module__}.{type(bad_request_1.message).__qualname__}' == 'atlasclient.exceptions.BadRequest'

def test_case_4():
    none_type_0 = None
    http_error_0 = module_0.HttpError(message=none_type_0, details=none_type_0, url=none_type_0, method=none_type_0, retry_after=none_type_0)
    assert f'{type(http_error_0).__module__}.{type(http_error_0).__qualname__}' == 'atlasclient.exceptions.HttpError'
    assert http_error_0.code == 500
    assert http_error_0.message == 'Unknown Error'
    assert http_error_0.details is None
    assert http_error_0.url is None
    assert http_error_0.method is None
    assert http_error_0.retry_after is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.HttpError.message == 'Unknown Error'
    assert module_0.HttpError.code == 500
    var_0 = http_error_0.__str__()
    assert var_0 == 'HTTP request failed for None None: Unknown Error 500: None'
    var_1 = var_0.__str__()
    assert var_1 == 'HTTP request failed for None None: Unknown Error 500: None'
    var_2 = var_1.__str__()
    assert var_2 == 'HTTP request failed for None None: Unknown Error 500: None'
    failed_0 = module_0.Failed(var_2, var_0)
    assert failed_0.model == 'HTTP request failed for None None: Unknown Error 500: None'
    assert failed_0.message == 'HTTP request failed for None None: Unknown Error 500: None'
    assert module_0.Failed.message == 'Operation failed to complete'
    method_not_allowed_0 = module_0.MethodNotAllowed(url=var_0, method=http_error_0)
    assert method_not_allowed_0.code == 405
    assert method_not_allowed_0.message == 'Method Not Allowed'
    assert method_not_allowed_0.url == 'HTTP request failed for None None: Unknown Error 500: None'
    assert module_0.MethodNotAllowed.code == 405
    assert module_0.MethodNotAllowed.message == 'Method Not Allowed'
    var_3 = var_1.__str__()
    assert var_3 == 'HTTP request failed for None None: Unknown Error 500: None'
    var_4 = var_1.__str__()
    assert var_4 == 'HTTP request failed for None None: Unknown Error 500: None'
    server_unavailable_0 = module_0.ServerUnavailable(method=var_1, retry_after=var_0)
    assert server_unavailable_0.code == 503
    assert server_unavailable_0.message == 'Service Unavailable'
    assert server_unavailable_0.method == 'HTTP request failed for None None: Unknown Error 500: None'
    assert server_unavailable_0.retry_after == 'HTTP request failed for None None: Unknown Error 500: None'
    assert module_0.ServerUnavailable.code == 503
    assert module_0.ServerUnavailable.message == 'Service Unavailable'

def test_case_5():
    client_error_0 = module_0.ClientError()
    assert client_error_0.message == 'Unknown Error'
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.ClientError.message == 'Unknown Error'
    var_0 = client_error_0.__str__()
    assert var_0 == 'Unexpected client-side error: Unknown Error'
    var_1 = var_0.__str__()
    assert var_1 == 'Unexpected client-side error: Unknown Error'
    var_2 = var_1.__str__()
    assert var_2 == 'Unexpected client-side error: Unknown Error'
    var_3 = var_2.__str__()
    assert var_3 == 'Unexpected client-side error: Unknown Error'
    rate_limit_exceeded_0 = module_0.RateLimitExceeded(method=var_0)
    assert f'{type(rate_limit_exceeded_0).__module__}.{type(rate_limit_exceeded_0).__qualname__}' == 'atlasclient.exceptions.RateLimitExceeded'
    assert rate_limit_exceeded_0.code == 429
    assert rate_limit_exceeded_0.message == 'Rate limit'
    assert rate_limit_exceeded_0.details is None
    assert rate_limit_exceeded_0.url is None
    assert rate_limit_exceeded_0.method == 'Unexpected client-side error: Unknown Error'
    assert rate_limit_exceeded_0.retry_after is None
    assert module_0.RateLimitExceeded.code == 429
    assert module_0.RateLimitExceeded.message == 'Rate limit'
    dict_0 = {var_3: var_3, rate_limit_exceeded_0: var_2, rate_limit_exceeded_0: var_1, var_1: var_0}
    failed_0 = module_0.Failed(dict_0)
    assert f'{type(failed_0.model).__module__}.{type(failed_0.model).__qualname__}' == 'builtins.dict'
    assert len(failed_0.model) == 2
    assert failed_0.message == 'Operation failed to complete'
    assert module_0.Failed.message == 'Operation failed to complete'

def test_case_6():
    str_0 = "/d$D`9CD'rzE/Fjn"
    server_unavailable_0 = module_0.ServerUnavailable(str_0, str_0, method=str_0)
    assert f'{type(server_unavailable_0).__module__}.{type(server_unavailable_0).__qualname__}' == 'atlasclient.exceptions.ServerUnavailable'
    assert server_unavailable_0.code == "/d$D`9CD'rzE/Fjn"
    assert server_unavailable_0.message == "/d$D`9CD'rzE/Fjn"
    assert server_unavailable_0.details is None
    assert server_unavailable_0.url is None
    assert server_unavailable_0.method == "/d$D`9CD'rzE/Fjn"
    assert server_unavailable_0.retry_after is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.ServerUnavailable.code == 503
    assert module_0.ServerUnavailable.message == 'Service Unavailable'

def test_case_7():
    not_found_0 = module_0.NotFound()
    assert not_found_0.code == 404
    assert not_found_0.message == 'Not found'
    assert not_found_0.details is None
    assert not_found_0.url is None
    assert not_found_0.method is None
    assert not_found_0.retry_after is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.NotFound.code == 404
    assert module_0.NotFound.message == 'Not found'

def test_case_8():
    bool_0 = True
    timeout_0 = module_0.Timeout(bool_0)
    assert timeout_0.timeout is True
    assert timeout_0.message == 'Operation timeout exceeded'
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.Timeout.message == 'Operation timeout exceeded'
    var_0 = timeout_0.__str__()
    assert var_0 == 'Timed out after True seconds: Operation timeout exceeded'
    unauthorized_0 = module_0.Unauthorized(details=var_0, url=var_0)
    assert f'{type(unauthorized_0).__module__}.{type(unauthorized_0).__qualname__}' == 'atlasclient.exceptions.Unauthorized'
    assert unauthorized_0.code == 401
    assert unauthorized_0.message == 'Unauthorized'
    assert unauthorized_0.details == 'Timed out after True seconds: Operation timeout exceeded'
    assert unauthorized_0.url == 'Timed out after True seconds: Operation timeout exceeded'
    assert unauthorized_0.method is None
    assert unauthorized_0.retry_after is None
    assert module_0.Unauthorized.code == 401
    assert module_0.Unauthorized.message == 'Unauthorized'
    var_1 = timeout_0.__str__()
    assert var_1 == 'Timed out after True seconds: Operation timeout exceeded'
    var_2 = var_1.__str__()
    assert var_2 == 'Timed out after True seconds: Operation timeout exceeded'
    var_3 = var_1.__str__()
    assert var_3 == 'Timed out after True seconds: Operation timeout exceeded'
    var_4 = var_1.__str__()
    assert var_4 == 'Timed out after True seconds: Operation timeout exceeded'
    var_5 = var_1.__str__()
    assert var_5 == 'Timed out after True seconds: Operation timeout exceeded'
    var_6 = timeout_0.__str__()
    assert var_6 == 'Timed out after True seconds: Operation timeout exceeded'
    int_0 = -481
    server_unavailable_0 = module_0.ServerUnavailable(var_1, method=int_0)
    assert server_unavailable_0.code == 'Timed out after True seconds: Operation timeout exceeded'
    assert server_unavailable_0.message == 'Service Unavailable'
    assert module_0.ServerUnavailable.code == 503
    assert module_0.ServerUnavailable.message == 'Service Unavailable'
    server_error_0 = module_0.ServerError(details=timeout_0)
    assert server_error_0.code == 500
    assert server_error_0.message == 'Internal Server Error'
    assert module_0.ServerError.code == 500
    assert module_0.ServerError.message == 'Internal Server Error'
    var_7 = var_1.__str__()
    assert var_7 == 'Timed out after True seconds: Operation timeout exceeded'
    var_8 = var_4.__str__()
    assert var_8 == 'Timed out after True seconds: Operation timeout exceeded'
    forbidden_0 = module_0.Forbidden(bool_0, bool_0, retry_after=bool_0)
    assert forbidden_0.code is True
    assert forbidden_0.message is True
    assert module_0.Forbidden.code == 403
    assert module_0.Forbidden.message == 'Forbidden'
    var_9 = var_1.__str__()
    assert var_9 == 'Timed out after True seconds: Operation timeout exceeded'
    var_10 = var_7.__str__()
    assert var_10 == 'Timed out after True seconds: Operation timeout exceeded'
    none_type_0 = None
    var_11 = forbidden_0.__str__()
    assert var_11 == 'HTTP request failed for None None: True True: None'
    forbidden_1 = module_0.Forbidden(var_11, details=var_4)
    assert forbidden_1.code == 'HTTP request failed for None None: True True: None'
    assert forbidden_1.message == 'Forbidden'
    assert forbidden_1.details == 'Timed out after True seconds: Operation timeout exceeded'
    rate_limit_exceeded_0 = module_0.RateLimitExceeded(bool_0, details=none_type_0, retry_after=var_3)
    assert rate_limit_exceeded_0.code is True
    assert rate_limit_exceeded_0.message == 'Rate limit'
    assert rate_limit_exceeded_0.retry_after == 'Timed out after True seconds: Operation timeout exceeded'
    assert module_0.RateLimitExceeded.code == 429
    assert module_0.RateLimitExceeded.message == 'Rate limit'
    var_12 = var_3.__str__()
    assert var_12 == 'Timed out after True seconds: Operation timeout exceeded'
    var_13 = timeout_0.__str__()
    assert var_13 == 'Timed out after True seconds: Operation timeout exceeded'
    unauthorized_1 = module_0.Unauthorized(details=none_type_0)
    assert unauthorized_1.code == 401
    assert unauthorized_1.message == 'Unauthorized'
    var_14 = var_11.__str__()
    assert var_14 == 'HTTP request failed for None None: True True: None'
    var_15 = var_1.__str__()
    assert var_15 == 'Timed out after True seconds: Operation timeout exceeded'
    var_16 = var_13.__str__()
    assert var_16 == 'Timed out after True seconds: Operation timeout exceeded'
    unauthorized_2 = module_0.Unauthorized(method=unauthorized_1)
    assert unauthorized_2.code == 401
    assert unauthorized_2.message == 'Unauthorized'

@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 3309.7
    none_type_0 = None
    forbidden_0 = module_0.Forbidden(message=float_0, details=float_0, retry_after=none_type_0)
    assert f'{type(forbidden_0).__module__}.{type(forbidden_0).__qualname__}' == 'atlasclient.exceptions.Forbidden'
    assert forbidden_0.code == 403
    assert forbidden_0.message == pytest.approx(3309.7, abs=0.01, rel=0.01)
    assert forbidden_0.details == pytest.approx(3309.7, abs=0.01, rel=0.01)
    assert forbidden_0.url is None
    assert forbidden_0.method is None
    assert forbidden_0.retry_after is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.Forbidden.code == 403
    assert module_0.Forbidden.message == 'Forbidden'
    none_type_1 = None
    failed_0 = module_0.Failed(none_type_1)
    assert failed_0.model is None
    assert failed_0.message == 'Operation failed to complete'
    assert module_0.Failed.message == 'Operation failed to complete'
    failed_0.__str__()

def test_case_10():
    none_type_0 = None
    http_error_0 = module_0.HttpError(message=none_type_0, url=none_type_0)
    assert f'{type(http_error_0).__module__}.{type(http_error_0).__qualname__}' == 'atlasclient.exceptions.HttpError'
    assert http_error_0.code == 500
    assert http_error_0.message == 'Unknown Error'
    assert http_error_0.details is None
    assert http_error_0.url is None
    assert http_error_0.method is None
    assert http_error_0.retry_after is None
    assert f'{type(module_0.LOG).__module__}.{type(module_0.LOG).__qualname__}' == 'logging.Logger'
    assert module_0.LOG.name == 'pyatlasclient'
    assert module_0.LOG.level == 0
    assert f'{type(module_0.LOG.parent).__module__}.{type(module_0.LOG.parent).__qualname__}' == 'logging.RootLogger'
    assert len(module_0.LOG.handlers) == 1
    assert module_0.HttpError.message == 'Unknown Error'
    assert module_0.HttpError.code == 500
    var_0 = http_error_0.__str__()
    assert var_0 == 'HTTP request failed for None None: Unknown Error 500: None'
    unauthorized_0 = module_0.Unauthorized()
    assert unauthorized_0.code == 401
    assert unauthorized_0.message == 'Unauthorized'
    assert module_0.Unauthorized.code == 401
    assert module_0.Unauthorized.message == 'Unauthorized'