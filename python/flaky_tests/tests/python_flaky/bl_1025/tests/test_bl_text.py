# Automatically generated by Pynguin.
import pytest
import bl.text as module_0

def test_case_0():
    str_0 = '&pil_2Rv0'
    text_0 = module_0.Text(str_0, str_0, str_0)
    assert len(text_0) == 4

def test_case_1():
    text_0 = module_0.Text()
    assert f'{type(text_0).__module__}.{type(text_0).__qualname__}' == 'bl.text.Text'
    assert len(text_0) == 4

@pytest.mark.xfail(strict=True)
def test_case_2():
    text_0 = module_0.Text()
    assert f'{type(text_0).__module__}.{type(text_0).__qualname__}' == 'bl.text.Text'
    assert len(text_0) == 4
    str_0 = '8(TRp~h'
    text_0.write(str_0, text_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    text_0 = module_0.Text()
    assert f'{type(text_0).__module__}.{type(text_0).__qualname__}' == 'bl.text.Text'
    assert len(text_0) == 4
    int_0 = -2106
    text_0.write(encoding=int_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'configure the module at the given path with a config template and file.\n        path        = the filesystem path to the given module\n        template    = the config template filename within that path\n        config_name = the config filename within that path\n        params      = a dict containing config params, which are found in the template using %(key)s.\n    '
    text_0 = module_0.Text(str_0, encoding=str_0)
    assert f'{type(text_0).__module__}.{type(text_0).__qualname__}' == 'bl.text.Text'
    assert len(text_0) == 4
    text_0.write()

@pytest.mark.xfail(strict=True)
def test_case_5():
    text_0 = module_0.Text()
    assert f'{type(text_0).__module__}.{type(text_0).__qualname__}' == 'bl.text.Text'
    assert len(text_0) == 4
    text_0.copy(text_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '0123456789abcdef'
    text_0 = module_0.Text()
    assert f'{type(text_0).__module__}.{type(text_0).__qualname__}' == 'bl.text.Text'
    assert len(text_0) == 4
    text_1 = module_0.Text(text=str_0)
    assert len(text_1) == 4
    var_0 = text_1.__repr__()
    text_2 = module_0.Text(str_0, encoding=text_0)
    assert len(text_2) == 4
    text_1.write(**text_2)