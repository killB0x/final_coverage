# Automatically generated by Pynguin.
import pytest
import bl.progress as module_0
import ast as module_1
import tokenize as module_2

def test_case_0():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'

def test_case_1():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.clean_filename()
    progress_1 = module_0.Progress(data=progress_0)
    assert len(progress_1) == 5

def test_case_2():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.start(**progress_0)

def test_case_3():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.report()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.dict.Dict'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_4():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.finish()
    var_1 = progress_0.finish()
    progress_0.stat()

def test_case_5():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.finish()

@pytest.mark.xfail(strict=True)
def test_case_6():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    none_type_0 = None
    progress_1 = module_0.Progress(data=none_type_0)
    assert len(progress_1) == 5
    var_0 = progress_0.report()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.dict.Dict'
    assert len(var_0) == 0
    var_1 = progress_0.report()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.dict.Dict'
    module_1.unparse(progress_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    progress_1 = module_0.Progress(**progress_0)
    assert len(progress_1) == 5
    var_0 = module_2.maybe()
    var_1 = progress_1.runtimes()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.dict.Dict'
    assert len(var_1) == 0
    var_2 = progress_1.runtime(var_1)
    var_0.runtimes()

@pytest.mark.xfail(strict=True)
def test_case_8():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.finish()
    var_1 = progress_0.runtimes()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.dict.Dict'
    assert len(var_1) == 1
    var_2 = progress_0.finish()
    progress_1 = module_0.Progress(var_2, var_2, progress_0)
    assert len(progress_1) == 5
    var_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_9():
    progress_0 = module_0.Progress()
    assert f'{type(progress_0).__module__}.{type(progress_0).__qualname__}' == 'bl.progress.Progress'
    assert len(progress_0) == 5
    assert f'{type(module_0.Progress.stack_keys).__module__}.{type(module_0.Progress.stack_keys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Progress.stack_key).__module__}.{type(module_0.Progress.stack_key).__qualname__}' == 'builtins.property'
    var_0 = progress_0.finish()
    var_1 = progress_0.report()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.dict.Dict'
    assert len(var_1) == 1
    var_2 = progress_0.runtimes()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'bl.dict.Dict'
    assert len(var_2) == 1
    var_3 = progress_0.finish()
    var_2.runtimes()