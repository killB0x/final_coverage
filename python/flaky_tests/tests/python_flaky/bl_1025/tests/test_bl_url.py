# Automatically generated by Pynguin.
import pytest
import bl.url as module_0
import urllib.parse as module_1

def test_case_0():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'

def test_case_1():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.__str__()
    assert var_0 == ''

def test_case_2():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.drop_qarg(u_r_l_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.url.URL'
    assert len(var_0) == 6

def test_case_3():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.__call__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.url.URL'
    assert len(var_0) == 6

def test_case_4():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.__repr__()
    assert var_0 == "URL('')"

def test_case_5():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.split()

def test_case_6():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.splitext()

@pytest.mark.xfail(strict=True)
def test_case_7():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.drop_qarg(u_r_l_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.url.URL'
    assert len(var_0) == 6
    var_1 = u_r_l_0.no_qargs()
    assert len(var_1) == 6
    var_0.__iadd__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.quoted()
    assert var_0 == ''
    var_1 = u_r_l_0.drop_qarg(u_r_l_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.url.URL'
    assert len(var_1) == 6
    var_2 = u_r_l_0.splitext()
    var_0.no_qargs()

def test_case_9():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.__str__()
    assert var_0 == ''
    none_type_0 = None
    var_1 = u_r_l_0.drop_qarg(none_type_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.url.URL'
    assert len(var_1) == 6
    var_2 = u_r_l_0.splitext()
    var_3 = var_1.no_qargs()
    assert len(var_3) == 6
    var_4 = var_1.unquoted()
    assert var_4 == ''
    var_5 = var_4.split()

def test_case_10():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.__contains__(u_r_l_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_11():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.__call__(**u_r_l_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.url.URL'
    assert len(var_0) == 6
    var_1 = u_r_l_0.drop_qarg(u_r_l_0)
    assert len(var_1) == 6
    var_2 = u_r_l_0.join(u_r_l_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'bl.url.URL'
    assert len(var_2) == 6
    var_3 = u_r_l_0.no_qargs()
    assert len(var_3) == 6
    var_0.__radd__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.quoted()
    assert var_0 == ''
    none_type_0 = None
    var_1 = u_r_l_0.drop_qarg(none_type_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.url.URL'
    assert len(var_1) == 6
    var_2 = var_1.join(none_type_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'bl.url.URL'
    assert len(var_2) == 6
    var_3 = u_r_l_0.no_qargs()
    assert len(var_3) == 6
    var_4 = var_2.no_qargs()
    assert len(var_4) == 6
    var_5 = var_0.__eq__(var_4)
    var_1.__radd__(var_5)

@pytest.mark.xfail(strict=True)
def test_case_13():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.quoted()
    assert var_0 == ''
    var_1 = u_r_l_0.__call__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.url.URL'
    assert len(var_1) == 6
    none_type_0 = None
    var_2 = u_r_l_0.drop_qarg(none_type_0)
    assert len(var_2) == 6
    var_3 = module_1.urlunparse(var_1)
    assert var_3 == 'scheme://host/path;params?fragment#qargs'
    var_4 = var_1.join(var_3)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'bl.url.URL'
    assert len(var_4) == 6
    var_5 = var_4.no_qargs()
    var_3.no_qargs()

@pytest.mark.xfail(strict=True)
def test_case_14():
    u_r_l_0 = module_0.URL()
    assert f'{type(u_r_l_0).__module__}.{type(u_r_l_0).__qualname__}' == 'bl.url.URL'
    assert len(u_r_l_0) == 6
    assert module_0.PATTERN == '\\b((?:[a-z][\\w\\-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+(?:\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'".,<>?«»“”‘’]))'
    assert f'{type(module_0.URL.qstring).__module__}.{type(module_0.URL.qstring).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.basename).__module__}.{type(module_0.URL.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.parent).__module__}.{type(module_0.URL.parent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.URL.normpath).__module__}.{type(module_0.URL.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.finditer).__module__}.{type(module_0.URL.finditer).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.URL.join).__module__}.{type(module_0.URL.join).__qualname__}' == 'builtins.method'
    var_0 = u_r_l_0.quoted()
    assert var_0 == ''
    var_1 = u_r_l_0.__call__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bl.url.URL'
    assert len(var_1) == 6
    var_2 = var_1.drop_qarg(u_r_l_0)
    assert len(var_2) == 6
    str_0 = '"+Pda<mpj;O<^&'
    var_3 = var_2.join(str_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'bl.url.URL'
    assert len(var_3) == 6
    var_4 = u_r_l_0.no_qargs()
    assert len(var_4) == 6
    var_5 = var_3.no_qargs()
    assert len(var_5) == 6
    var_1.__getnewargs__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'qargs'
    dict_0 = {str_0: str_0}
    module_0.URL(**dict_0)