# Automatically generated by Pynguin.
import pytest
import bl.file as module_0
import re as module_1
import enum as module_2

def test_case_0():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_1():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.hash(**file_0)
    file_0.clean_filename(file_0, file_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.__repr__()
    assert var_0 == 'File(fn=None)'
    file_0.file_list(var_0)
    var_1 = file_0.make_basename()

@pytest.mark.xfail(strict=True)
def test_case_3():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    none_type_0 = None
    file_0.copy(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Y]|\r.PJq_G0#^xI'
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_1 = module_0.File(str_0)
    assert f'{type(file_1).__module__}.{type(file_1).__qualname__}' == 'bl.file.File'
    assert len(file_1) == 2
    var_0 = file_1.clean_filename()
    assert var_0 == 'Y.pjq_g0#^xi'
    var_1 = file_1.file_list(var_0)
    error_0 = module_1.error(var_0, pos=var_1)
    assert error_0.msg == 'Y.pjq_g0#^xi'
    var_2 = file_1.__repr__()
    assert var_2 == "File(fn='Y]|\\r.PJq_G0#^xI')"
    file_1.copy(var_1)

def test_case_5():
    str_0 = 'Y]|\r.PJq_G0#^xI'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.file_list(file_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.clean_filename(file_0, file_0)

def test_case_7():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.clean_filename()
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_8():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.delete()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.read(file_0)
    file_0.delete()
    enum_dict_0 = module_2._EnumDict()
    var_1 = file_0.hash()
    file_1 = module_0.File(data=bool_0)
    var_2 = file_0.copy(file_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.file_list(bool_0)
    var_0 = file_0.hash()
    file_1 = module_0.File(data=bool_0)
    var_1 = file_1.__lt__(file_1)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.read(file_0)
    file_0.delete()
    var_2 = var_1.copy(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.clean_filename()
    assert var_0 == ''
    var_1 = var_0.format_map(var_0)
    assert var_1 == ''
    var_2 = file_0.hash()
    var_3 = file_0.read()
    file_0.open()

def test_case_13():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.file_list()
    var_1 = file_0.dirpath()
    assert var_1 == '/pynguin'

@pytest.mark.xfail(strict=True)
def test_case_14():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.write(file_0, file_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    module_0.File(bool_0, ext=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.read(file_0)
    file_0.delete()
    var_1 = var_0.__dir__()
    var_2 = file_0.hash()
    file_1 = module_0.File(data=bool_0)
    var_3 = file_1.splitext(file_1)

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    dict_0 = {str_0: str_0, str_0: str_0}
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.copy(dict_0)

def test_case_18():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.file_list()

@pytest.mark.xfail(strict=True)
def test_case_19():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.tempfile(file_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, bool_0, str_0]
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.relpath()
    assert var_0 == 'Y]|\r.PJq_G0#^x<'
    file_0.hash()
    var_1 = file_0.clean_filename()
    file_1 = module_0.File(list_0)
    var_2 = file_0.hash(**file_0)
    var_3 = file_0.file_list()
    var_4 = file_0.delete()
    var_5 = file_0.splitext()
    var_6 = file_0.dirpath()
    var_7 = file_0.copy(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.makedir()
    var_0 = file_0.__str__()
    var_1 = file_0.clean_filename()
    file_1 = module_0.File(data=file_0)
    var_2 = file_0.hash()
    var_3 = var_2.encode()

def test_case_22():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.relpath()
    assert var_0 == 'Y]|\r.PJq_G0#^x<'
    var_1 = file_0.clean_filename()
    assert var_1 == 'Y.pjq_g0#^x<'
    var_2 = file_0.file_list()
    var_3 = file_0.dirpath()
    assert var_3 == '/pynguin'

def test_case_23():
    str_0 = 'Y]|\r.PJq_G0#^xI'
    dict_0 = module_1.template(str_0)
    bool_0 = True
    file_0 = module_0.File(bool_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.hash()

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    file_0 = module_0.File()
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.utime(bool_0, bool_0)

def test_case_25():
    str_0 = 'Y]|\r.PJq_G0#^xI'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.clean_filename()
    assert var_0 == 'Y.pjq_g0#^xi'
    var_1 = file_0.file_list(file_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = 'Y]|\r.PJqt_G#^x<'
    dict_0 = {str_0: str_0, str_0: str_0}
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.copy(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    var_0 = module_1.match(str_0, str_0)
    bool_0 = True
    list_0 = [var_0, bool_0, bool_0, str_0]
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_1 = file_0.relpath()
    assert var_1 == 'Y]|\r.PJq_G0#^x<'
    file_0.hash()
    var_2 = file_0.clean_filename()
    file_1 = module_0.File(file_0)
    error_0 = module_1.error(var_3, pos=list_0)
    var_4 = file_0.dirpath()
    var_5 = file_0.copy(var_3)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, bool_0, str_0]
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.relpath(dict_0)
    assert var_0 == '../Y]|\r.PJq_G0#^x<'
    var_1 = file_0.relpath()
    assert var_1 == 'Y]|\r.PJq_G0#^x<'
    file_0.hash()
    var_2 = file_0.clean_filename()
    file_1 = module_0.File(var_1)
    error_0 = module_1.error(var_3, pos=list_0)
    var_4 = file_0.copy(list_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    str_0 = 'Pj1\x0bfI$3(t)4ot'
    str_1 = '/'
    dict_0 = {str_0: bool_0, str_1: str_0, str_1: bool_0, str_0: str_1}
    file_0 = module_0.File(bool_0, bool_0, **dict_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 4
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.delete()
    enum_dict_0 = module_2._EnumDict()
    var_1 = file_0.file_list(bool_0)
    file_0.hash()
    file_1 = module_0.File(data=file_0)
    var_2 = file_0.copy(var_1)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.relpath()
    assert var_0 == 'Y]|\r.PJq_G0#^x<'
    file_0.hash()
    var_1 = file_0.clean_filename(ext=var_0)
    none_type_0 = None
    file_1 = module_0.File(data=none_type_0)
    var_2 = file_0.file_list(var_0)
    error_0 = module_1.error(var_3)
    var_4 = var_3.lstrip(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'Y]|\r.PJq_G0#^x<'
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.relpath()
    assert var_0 == 'Y]|\r.PJq_G0#^x<'
    file_0.hash()
    var_1 = file_0.hash(**file_0)
    var_2 = file_0.file_list()
    var_3 = file_0.dirpath()
    var_4 = file_0.copy(var_3)

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = ''
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    file_0.relpath()

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "{'Y]|/r.@Jq_G0#^x<': 'Y]|/r.@Jq_G0#^x<'}"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, bool_0, str_0]
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.delete()
    var_1 = file_0.relpath()
    assert var_1 == "r.@Jq_G0#^x<'}"
    var_2 = file_0.hash()
    var_3 = file_0.clean_filename()
    assert var_3 == "{'Y]|/r.@Jq_G0#^x<': 'Y]|/r.@jq_g0#^x<'}"
    var_4 = file_0.makedir()
    file_1 = module_0.File(list_0)
    assert f'{type(file_1).__module__}.{type(file_1).__qualname__}' == 'bl.file.File'
    assert len(file_1) == 2
    var_5 = file_0.file_list()
    var_6 = file_0.delete()
    var_7 = file_0.file_list(var_5)
    file_0.copy(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "x6SA4)'g/2=xgZm"
    dict_0 = {str_0: str_0, str_0: str_0}
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.relpath()
    assert var_0 == '2=xgZm'
    file_0.write(data=str_0, mode=dict_0, max_tries=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "{'Y]|/r.@Jq_G0#^x<': 'Y]|/r.@Jq_G0#^x<'}"
    file_0 = module_0.File(str_0)
    assert f'{type(file_0).__module__}.{type(file_0).__qualname__}' == 'bl.file.File'
    assert len(file_0) == 2
    assert f'{type(module_0.File.normpath).__module__}.{type(module_0.File.normpath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.match).__module__}.{type(module_0.File.match).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.isdir).__module__}.{type(module_0.File.isdir).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.isfile).__module__}.{type(module_0.File.isfile).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.exists).__module__}.{type(module_0.File.exists).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.filename).__module__}.{type(module_0.File.filename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.path).__module__}.{type(module_0.File.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.folder).__module__}.{type(module_0.File.folder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.basename).__module__}.{type(module_0.File.basename).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.ext).__module__}.{type(module_0.File.ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.name).__module__}.{type(module_0.File.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.size).__module__}.{type(module_0.File.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.last_modified).__module__}.{type(module_0.File.last_modified).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mtime).__module__}.{type(module_0.File.mtime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.atime).__module__}.{type(module_0.File.atime).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.File.mimetype).__module__}.{type(module_0.File.mimetype).__qualname__}' == 'builtins.property'
    assert module_0.File.SIZE_UNITS == ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
    assert f'{type(module_0.File.readable_size).__module__}.{type(module_0.File.readable_size).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.File.bytes_from_readable_size).__module__}.{type(module_0.File.bytes_from_readable_size).__qualname__}' == 'builtins.method'
    var_0 = file_0.delete()
    var_1 = file_0.relpath()
    assert var_1 == "r.@Jq_G0#^x<'}"
    var_2 = file_0.hash()
    var_3 = file_0.clean_filename()
    assert var_3 == "{'Y]|/r.@Jq_G0#^x<': 'Y]|/r.@jq_g0#^x<'}"
    var_4 = file_0.makedir()
    var_5 = file_0.file_list()
    var_6 = file_0.delete()
    var_7 = file_0.file_list(var_5)
    var_8 = file_0.copy(file_0)
    assert f'{type(var_8).__module__}.{type(var_8).__qualname__}' == 'bl.file.File'
    assert len(var_8) == 2
    var_2.relpath()