# Automatically generated by Pynguin.
import pytest
import bl.no as module_0
import re as module_1
import codecs as module_2

def test_case_0():
    sorted_no_dict_0 = module_0.SortedNoDict()
    var_0 = sorted_no_dict_0.__repr__()
    assert var_0 == 'SortedNoDict()'

@pytest.mark.xfail(strict=True)
def test_case_1():
    sorted_no_dict_0 = module_0.SortedNoDict()
    var_0 = sorted_no_dict_0.__repr__()
    assert var_0 == 'SortedNoDict()'
    var_1 = sorted_no_dict_0.values()
    var_1.keys()

def test_case_2():
    no_dict_0 = module_1.purge()
    no_dict_1 = module_0.NoDict()

@pytest.mark.xfail(strict=True)
def test_case_3():
    no_0 = module_0.No()
    var_0 = no_0.__bool__()
    var_1 = no_0.__getitem__(no_0)
    module_2.getincrementalencoder(no_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    no_0 = module_0.No()
    var_0 = no_0.__str__()
    assert var_0 == ''
    var_0.keys(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    no_dict_0 = module_0.NoDict()
    var_0 = no_dict_0.__getattr__(no_dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.no.No'
    var_0.encode(no_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    no_dict_0 = module_0.NoDict()
    var_0 = no_dict_0.__call__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bl.no.NoDict'
    assert len(var_0) == 0
    var_1 = no_dict_0.__repr__()
    assert var_1 == 'NoDict()'
    var_2 = no_dict_0.__getitem__(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'bl.no.No'
    var_3 = no_dict_0.__getitem__(no_dict_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'bl.no.No'
    sorted_no_dict_0 = module_0.SortedNoDict()
    var_2.__call__(**no_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    sorted_no_dict_0 = module_0.SortedNoDict()
    var_0 = sorted_no_dict_0.__str__()
    assert var_0 == '{}'
    var_1 = sorted_no_dict_0.__repr__()
    assert var_1 == 'SortedNoDict()'
    var_1.getstate()

@pytest.mark.xfail(strict=True)
def test_case_8():
    sorted_no_dict_0 = module_0.SortedNoDict()
    var_0 = sorted_no_dict_0.__repr__()
    assert var_0 == 'SortedNoDict()'
    var_1 = sorted_no_dict_0.__setattr__(var_0, sorted_no_dict_0)
    assert len(sorted_no_dict_0) == 1
    var_2 = sorted_no_dict_0.values()
    var_0.default(var_2)

@pytest.mark.xfail(strict=True)
def test_case_9():
    no_0 = module_0.No()
    var_0 = no_0.__repr__()
    assert var_0 == 'No'
    var_1 = no_0.__str__()
    assert var_1 == ''
    var_1.keys(var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    sorted_no_dict_0 = module_0.SortedNoDict()
    var_0 = sorted_no_dict_0.__repr__()
    assert var_0 == 'SortedNoDict()'
    var_1 = sorted_no_dict_0.__setattr__(var_0, sorted_no_dict_0)
    assert len(sorted_no_dict_0) == 1
    var_2 = sorted_no_dict_0.values()
    var_2.__repr__()