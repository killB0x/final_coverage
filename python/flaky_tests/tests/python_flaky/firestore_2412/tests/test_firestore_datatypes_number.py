# Automatically generated by Pynguin.
import pytest
import firestore.datatypes.number as module_0

def test_case_0():
    bool_0 = False
    number_0 = module_0.Number()
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'
    var_0 = number_0.validate(bool_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_1():
    number_0 = module_0.Number()
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'
    number_0.validate(number_0)

def test_case_2():
    number_0 = module_0.Number()
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'

def test_case_3():
    bool_0 = True
    list_0 = []
    str_0 = 'maximum'
    dict_0 = {str_0: list_0, str_0: str_0, str_0: bool_0}
    number_0 = module_0.Number(*list_0, **dict_0)
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'
    var_0 = number_0.validate(bool_0, bool_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = []
    str_0 = '|`4m#'
    number_0 = module_0.Number()
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'
    var_0 = number_0.validate(bool_0, str_0)
    assert var_0 is True
    str_1 = 'maximum'
    dict_0 = {str_0: list_0, str_0: str_0, str_1: var_0}
    number_1 = module_0.Number(*list_0, **dict_0)
    assert number_1.default is None
    assert number_1.unique is None
    assert number_1.textsearch is None
    assert number_1.options is None
    var_1 = number_1.validate(bool_0, bool_0)
    assert var_1 is True
    number_2 = module_0.Number(*list_0)
    assert number_2.default is None
    assert number_2.unique is None
    assert number_2.textsearch is None
    assert number_2.options is None
    int_0 = 285
    number_1.validate(int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = []
    str_0 = 'minimum'
    number_0 = module_0.Number()
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'
    var_0 = number_0.validate(bool_0, str_0)
    assert var_0 is True
    dict_0 = {str_0: list_0, str_0: str_0, str_0: var_0}
    number_1 = module_0.Number(*list_0, **dict_0)
    assert number_1.default is None
    assert number_1.unique is None
    assert number_1.textsearch is None
    assert number_1.options is None
    var_1 = number_1.validate(bool_0, bool_0)
    assert var_1 is True
    bool_1 = True
    var_1.__get__(bool_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    number_0 = module_0.Number()
    assert number_0.default is None
    assert number_0.unique is None
    assert number_0.textsearch is None
    assert number_0.options is None
    assert f'{type(module_0.Number.coerce).__module__}.{type(module_0.Number.coerce).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.maximum).__module__}.{type(module_0.Number.maximum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.minimum).__module__}.{type(module_0.Number.minimum).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.pk).__module__}.{type(module_0.Number.pk).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.py_type).__module__}.{type(module_0.Number.py_type).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.required).__module__}.{type(module_0.Number.required).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Number.value).__module__}.{type(module_0.Number.value).__qualname__}' == 'builtins.member_descriptor'
    bool_0 = True
    list_0 = []
    str_0 = 'minimum'
    var_0 = number_0.validate(bool_0, str_0)
    assert var_0 is True
    dict_0 = {str_0: list_0, str_0: str_0, str_0: var_0}
    number_1 = module_0.Number(*list_0, **dict_0)
    assert number_1.default is None
    assert number_1.unique is None
    assert number_1.textsearch is None
    assert number_1.options is None
    bool_1 = False
    number_1.validate(bool_1)