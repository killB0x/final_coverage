# Automatically generated by Pynguin.
import pytest
import pandas_datareader._version as module_0
import re as module_1
import enum as module_2

def test_case_0():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1

def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1

def test_case_2():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(AssertionError):
        module_0.run_command(var_0, var_0, verbose=var_0, hide_stderr=var_0, env=var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    module_1.search(var_0, bool_0, bool_0)

def test_case_4():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    module_0.git_pieces_from_vcs(var_0, var_0, var_0)

def test_case_6():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'

def test_case_7():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    var_2 = module_0.git_get_keywords(var_1)
    var_3 = module_0.versions_from_parentdir(var_1, var_1, var_0)
    str_0 = 'de'
    with pytest.raises(ValueError):
        module_0.render(var_3, str_0)

def test_case_8():
    str_0 = 'gtlD?!z xos8Kgk{b'
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    none_type_0 = None
    module_0.git_get_keywords(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    module_0.git_versions_from_keywords(var_0, var_0, var_0)

def test_case_11():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)

def test_case_12():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)

def test_case_13():
    str_0 = '((Be7'
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(ValueError):
        module_0.render(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    var_2 = var_0.__setitem__(var_1, var_1)
    var_3 = module_0.versions_from_parentdir(var_1, var_1, var_2)
    module_0.render(var_3, var_2)

def test_case_15():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    str_0 = 'GW6v/;0'
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_0, str_0, var_0)

def test_case_16():
    str_0 = 'du'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.run_command(list_0, list_0, verbose=str_0)
    assert len(module_0.HANDLERS) == 1

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    var_2 = module_0.versions_from_parentdir(var_1, var_1, var_0)
    str_0 = 'pep440-post'
    var_3 = var_0.__dir__()
    module_0.render(var_2, str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    var_2 = module_0.versions_from_parentdir(var_1, var_1, var_0)
    str_0 = 'pep440-pre'
    not_this_method_0 = module_0.NotThisMethod()
    module_0.render(var_2, str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    var_2 = module_0.versions_from_parentdir(var_1, var_1, var_0)
    str_0 = 'pep440-old'
    module_0.render(var_2, str_0)

def test_case_20():
    str_0 = '7j`z6B'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.run_command(list_0, list_0, verbose=str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    var_3 = module_0.git_get_keywords(var_2)
    var_4 = module_0.versions_from_parentdir(var_2, var_2, var_1)
    str_1 = 'de'
    with pytest.raises(ValueError):
        module_0.render(var_4, str_1)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = ''
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.run_command(list_0, list_0, verbose=str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    module_0.git_get_keywords(list_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = ''
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.run_command(list_0, list_0, verbose=list_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    var_3 = module_0.git_get_keywords(var_2)
    var_4 = module_0.versions_from_parentdir(var_2, var_2, var_1)
    var_5 = module_0.get_versions()
    module_2.unique(list_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'du'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.run_command(list_0, list_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    module_0.plus_or_dot(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'du'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.run_command(list_0, list_0, verbose=str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    var_3 = module_0.git_get_keywords(var_2)
    var_4 = module_0.versions_from_parentdir(var_2, var_2, var_1)
    var_5 = module_0.get_versions()
    str_1 = 'git-describe'
    module_0.render(var_4, str_1)