# Automatically generated by Pynguin.
import pytest
import pandas_datareader.av.time_series as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.AVTimeSeriesReader()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'noXKPiP+~eY?['
    none_type_0 = None
    a_v_time_series_reader_0 = module_0.AVTimeSeriesReader(start=none_type_0, chunksize=str_0, api_key=str_0)
    assert f'{type(a_v_time_series_reader_0).__module__}.{type(a_v_time_series_reader_0).__qualname__}' == 'pandas_datareader.av.time_series.AVTimeSeriesReader'
    assert a_v_time_series_reader_0.symbols is None
    assert f'{type(a_v_time_series_reader_0.start).__module__}.{type(a_v_time_series_reader_0.start).__qualname__}' == 'pandas._libs.tslibs.timestamps.Timestamp'
    assert f'{type(a_v_time_series_reader_0.end).__module__}.{type(a_v_time_series_reader_0.end).__qualname__}' == 'pandas._libs.tslibs.timestamps.Timestamp'
    assert a_v_time_series_reader_0.retry_count == 3
    assert a_v_time_series_reader_0.pause == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert a_v_time_series_reader_0.timeout == 30
    assert a_v_time_series_reader_0.pause_multiplier == 1
    assert f'{type(a_v_time_series_reader_0.session).__module__}.{type(a_v_time_series_reader_0.session).__qualname__}' == 'requests.sessions.Session'
    assert a_v_time_series_reader_0.freq is None
    assert a_v_time_series_reader_0.api_key == 'noXKPiP+~eY?['
    assert f'{type(module_0.AVTimeSeriesReader.default_start_date).__module__}.{type(module_0.AVTimeSeriesReader.default_start_date).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AVTimeSeriesReader.function).__module__}.{type(module_0.AVTimeSeriesReader.function).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AVTimeSeriesReader.intraday).__module__}.{type(module_0.AVTimeSeriesReader.intraday).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AVTimeSeriesReader.forex).__module__}.{type(module_0.AVTimeSeriesReader.forex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AVTimeSeriesReader.output_size).__module__}.{type(module_0.AVTimeSeriesReader.output_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AVTimeSeriesReader.data_key).__module__}.{type(module_0.AVTimeSeriesReader.data_key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.AVTimeSeriesReader.params).__module__}.{type(module_0.AVTimeSeriesReader.params).__qualname__}' == 'builtins.property'
    a_v_time_series_reader_0.read()