# Automatically generated by Pynguin.
import pytest
import tests.utils_test_abc as module_0

def test_case_0():
    utils_test_a_b_c_0 = module_0.UtilsTestABC()
    assert module_0.UtilsTestABC.NUM_ATTACHMENT_FILENAMES == 10
    assert f'{type(module_0.UtilsTestABC.setUpClass).__module__}.{type(module_0.UtilsTestABC.setUpClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.setUp).__module__}.{type(module_0.UtilsTestABC.setUp).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.tearDown).__module__}.{type(module_0.UtilsTestABC.tearDown).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.temp_config_file).__module__}.{type(module_0.UtilsTestABC.temp_config_file).__qualname__}' == 'tempfile._TemporaryFileWrapper'
    assert f'{type(module_0.UtilsTestABC.temp_config_file.file).__module__}.{type(module_0.UtilsTestABC.temp_config_file.file).__qualname__}' == '_io.TextIOWrapper'
    assert module_0.UtilsTestABC.temp_config_file.delete is False
    assert f'{type(module_0.UtilsTestABC.valid_config).__module__}.{type(module_0.UtilsTestABC.valid_config).__qualname__}' == 'configparser.ConfigParser'
    assert len(module_0.UtilsTestABC.valid_config) == 1

@pytest.mark.xfail(strict=True)
def test_case_1():
    utils_test_a_b_c_0 = module_0.UtilsTestABC()
    assert module_0.UtilsTestABC.NUM_ATTACHMENT_FILENAMES == 10
    assert f'{type(module_0.UtilsTestABC.setUpClass).__module__}.{type(module_0.UtilsTestABC.setUpClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.setUp).__module__}.{type(module_0.UtilsTestABC.setUp).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.tearDown).__module__}.{type(module_0.UtilsTestABC.tearDown).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.temp_config_file).__module__}.{type(module_0.UtilsTestABC.temp_config_file).__qualname__}' == 'tempfile._TemporaryFileWrapper'
    assert f'{type(module_0.UtilsTestABC.temp_config_file.file).__module__}.{type(module_0.UtilsTestABC.temp_config_file.file).__qualname__}' == '_io.TextIOWrapper'
    assert module_0.UtilsTestABC.temp_config_file.delete is False
    assert f'{type(module_0.UtilsTestABC.valid_config).__module__}.{type(module_0.UtilsTestABC.valid_config).__qualname__}' == 'configparser.ConfigParser'
    assert len(module_0.UtilsTestABC.valid_config) == 1
    utils_test_a_b_c_0.setUp()

@pytest.mark.xfail(strict=True)
def test_case_2():
    utils_test_a_b_c_0 = module_0.UtilsTestABC()
    assert module_0.UtilsTestABC.NUM_ATTACHMENT_FILENAMES == 10
    assert f'{type(module_0.UtilsTestABC.setUpClass).__module__}.{type(module_0.UtilsTestABC.setUpClass).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.setUp).__module__}.{type(module_0.UtilsTestABC.setUp).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.tearDown).__module__}.{type(module_0.UtilsTestABC.tearDown).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.UtilsTestABC.temp_config_file).__module__}.{type(module_0.UtilsTestABC.temp_config_file).__qualname__}' == 'tempfile._TemporaryFileWrapper'
    assert f'{type(module_0.UtilsTestABC.temp_config_file.file).__module__}.{type(module_0.UtilsTestABC.temp_config_file.file).__qualname__}' == '_io.TextIOWrapper'
    assert module_0.UtilsTestABC.temp_config_file.delete is False
    assert f'{type(module_0.UtilsTestABC.valid_config).__module__}.{type(module_0.UtilsTestABC.valid_config).__qualname__}' == 'configparser.ConfigParser'
    assert len(module_0.UtilsTestABC.valid_config) == 1
    utils_test_a_b_c_1 = utils_test_a_b_c_0.tearDown()
    none_type_0 = None
    module_0.UtilsTestABC(none_type_0)