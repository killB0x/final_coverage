# Automatically generated by Pynguin.
import pytest
import posty.config as module_0
import posty.exceptions as module_1

def test_case_0():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0

def test_case_1():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    with pytest.raises(module_1.InvalidConfig):
        config_0.load()

def test_case_2():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    with pytest.raises(module_1.InvalidConfig):
        config_0.clean_config()

def test_case_3():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    var_0 = config_0.__len__()
    assert var_0 == 0
    with pytest.raises(module_1.InvalidConfig):
        config_0.clean_config()

def test_case_4():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    var_0 = config_0.__iter__()
    with pytest.raises(module_1.InvalidConfig):
        config_0.clean_config()

@pytest.mark.xfail(strict=True)
def test_case_5():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    config_0.pop(config_0, config_0)

def test_case_6():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    none_type_0 = None
    var_0 = config_0.__setitem__(none_type_0, none_type_0)
    assert len(config_0) == 1
    with pytest.raises(module_1.InvalidConfig):
        config_0.load()

@pytest.mark.xfail(strict=True)
def test_case_7():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    none_type_0 = None
    config_0.__delitem__(none_type_0)

def test_case_8():
    bool_0 = True
    config_0 = module_0.Config(bool_0)
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    with pytest.raises(module_1.InvalidConfig):
        config_0.load()

def test_case_9():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    str_0 = 'author'
    str_1 = 'title'
    dict_0 = {str_0: config_0, str_0: config_0, str_1: str_1}
    var_0 = config_0.update(config_0, **dict_0)
    assert len(config_0) == 2
    var_1 = config_0.clean_config()
    assert len(config_0) == 8

def test_case_10():
    config_0 = module_0.Config()
    assert f'{type(config_0).__module__}.{type(config_0).__qualname__}' == 'posty.config.Config'
    assert len(config_0) == 0
    str_0 = 'author'
    dict_0 = {str_0: config_0, str_0: config_0, str_0: str_0}
    var_0 = config_0.update(config_0, **dict_0)
    assert len(config_0) == 1
    with pytest.raises(module_1.InvalidConfig):
        config_0.clean_config()