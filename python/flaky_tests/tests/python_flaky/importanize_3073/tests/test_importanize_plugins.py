# Automatically generated by Pynguin.
import pytest
import importanize.plugins as module_0
import email._header_value_parser as module_1
import importlib.metadata as module_2

def test_case_0():
    none_type_0 = module_0.deactivate_piped_plugins()

def test_case_1():
    none_type_0 = module_0.deactivate_piped_plugins()
    none_type_1 = module_0.deactivate_plugin(none_type_0)

def test_case_2():
    str_0 = '\n    Data-structure about each import statement leaf-module.\n\n    For example, if import statement is\n    ``from foo.bar import rainbows``, leaf-module is\n    ``rainbows``.\n    Also aliased modules are supported (e.g. using ``a as b``).\n    '
    none_type_0 = module_0.activate_plugin(str_0)

def test_case_3():
    none_type_0 = module_0.deactivate_all_plugins()

@pytest.mark.xfail(strict=True)
def test_case_4():
    importanize_spec_0 = module_0.ImportanizeSpec()
    var_0 = importanize_spec_0.statement_gt_overwrite(importanize_spec_0, importanize_spec_0, importanize_spec_0)
    var_1 = importanize_spec_0.register_import_group()
    var_1.__enter__()

def test_case_5():
    importanize_spec_0 = module_0.ImportanizeSpec()
    none_type_0 = module_0.deactivate_all_plugins()
    none_type_1 = module_0.deactivate_all_plugins()
    var_0 = importanize_spec_0.group_append_to_statement(none_type_0, none_type_1, none_type_0)
    none_type_2 = module_0.deactivate_all_plugins()

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = module_0.deactivate_all_plugins()
    importanize_spec_0 = module_0.ImportanizeSpec()
    var_0 = importanize_spec_0.should_include_leaf(none_type_0, none_type_0, none_type_0)
    module_1.get_obs_local_part(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    importanize_spec_0 = module_0.ImportanizeSpec()
    var_0 = importanize_spec_0.group_prepend_to_statement(importanize_spec_0, importanize_spec_0, importanize_spec_0)
    var_0.is_reserved()

@pytest.mark.xfail(strict=True)
def test_case_8():
    importanize_plugin_0 = module_0.ImportanizePlugin()
    var_0 = importanize_plugin_0.group_append_to_statement(importanize_plugin_0, importanize_plugin_0, importanize_plugin_0)
    module_2.requires(importanize_plugin_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    importanize_spec_0 = module_0.ImportanizeSpec()
    var_0 = importanize_spec_0.statement_gt_overwrite(importanize_spec_0, importanize_spec_0, importanize_spec_0)
    var_1 = importanize_spec_0.register_import_group()
    var_2 = importanize_spec_0.should_include_statement(var_0, importanize_spec_0)
    var_1.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'Ip?nX'
    importanize_plugin_0 = module_0.ImportanizePlugin()
    none_type_0 = module_0.deactivate_all_plugins()
    var_0 = importanize_plugin_0.inject_tree_artifacts(importanize_plugin_0, str_0, str_0)
    module_0.ensure_activated_plugins(var_0)

def test_case_11():
    none_type_0 = module_0.deactivate_piped_plugins()
    none_type_1 = module_0.deactivate_all_plugins()
    importanize_plugin_0 = module_0.ImportanizePlugin()
    var_0 = importanize_plugin_0.statement_gt_overwrite(importanize_plugin_0, importanize_plugin_0, importanize_plugin_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    importanize_plugin_0 = module_0.ImportanizePlugin()
    none_type_0 = module_0.deactivate_all_plugins()
    var_0 = importanize_plugin_0.should_include_leaf(importanize_plugin_0, none_type_0, none_type_0)
    var_0.set_unixfrom(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    importanize_plugin_0 = module_0.ImportanizePlugin()
    list_0 = [importanize_plugin_0]
    none_type_0 = None
    var_0 = importanize_plugin_0.group_prepend_to_statement(none_type_0, none_type_0, none_type_0)
    var_1 = importanize_plugin_0.register_import_group()
    none_type_1 = None
    var_2 = importanize_plugin_0.should_include_statement(list_0, none_type_1)
    module_0.ImportanizeSpec(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    importanize_spec_0 = module_0.ImportanizeSpec()
    none_type_0 = None
    var_0 = importanize_spec_0.inject_tree_artifacts(none_type_0, none_type_0, importanize_spec_0)
    module_1.get_unstructured(importanize_spec_0)