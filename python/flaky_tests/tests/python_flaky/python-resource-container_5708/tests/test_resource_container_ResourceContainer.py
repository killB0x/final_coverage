# Automatically generated by Pynguin.
import pytest
import resource_container.ResourceContainer as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.RC(none_type_0)

def test_case_1():
    str_0 = 'ewPhbrZU'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == 'ewPhbrZU'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'ewPhbrZU'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == 'ewPhbrZU'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.read_chunk(r_c_0, r_c_0, r_c_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '6'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == '6'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.write_chunk(str_0, str_0, r_c_0, r_c_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '-whbrZ'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == '-whbrZ'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.read_chunk(r_c_0, r_c_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'Hzxa^q`6dS8f$'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == 'Hzxa^q`6dS8f$'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.write_chunk(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'ewPhbrZU'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == 'ewPhbrZU'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.write_toc(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '-whbrZ'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == '-whbrZ'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.chunks(r_c_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '7\n-\x0c\\*B][df][\t8B4h|'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == '7\n-\x0c\\*B][df][\t8B4h|'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.write_toc(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '-wh?brZ'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == '-wh?brZ'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.write_config(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '|'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == '|'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    r_c_0.write_config(str_0, r_c_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'ewPhbrZU'
    r_c_0 = module_0.RC(str_0)
    assert f'{type(r_c_0).__module__}.{type(r_c_0).__qualname__}' == 'resource_container.ResourceContainer.RC'
    assert r_c_0.dir == 'ewPhbrZU'
    assert r_c_0.manifest is None
    assert f'{type(module_0.RC.path).__module__}.{type(module_0.RC.path).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.type).__module__}.{type(module_0.RC.type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.language).__module__}.{type(module_0.RC.language).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.resource).__module__}.{type(module_0.RC.resource).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.conforms_to).__module__}.{type(module_0.RC.conforms_to).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.chunk_ext).__module__}.{type(module_0.RC.chunk_ext).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_count).__module__}.{type(module_0.RC.project_count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RC.project_ids).__module__}.{type(module_0.RC.project_ids).__qualname__}' == 'builtins.property'
    none_type_0 = None
    r_c_0.chunks(none_type_0, r_c_0)