# Automatically generated by Pynguin.
import pytest
import pid.base as module_0
import pid.utils as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    pid_file_base_0 = module_0.PidFileBase()
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.check()

@pytest.mark.xfail(strict=True)
def test_case_1():
    pid_file_already_locked_error_0 = module_0.PidFileAlreadyLockedError()
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    pid_file_base_0 = module_0.PidFileBase(pid_file_already_locked_error_0, register_term_signal_handler=pid_file_already_locked_error_0, register_atexit=pid_file_already_locked_error_0, lock_pidfile=pid_file_already_locked_error_0, gid=pid_file_already_locked_error_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(piddir=none_type_0, enforce_dotpid_postfix=none_type_0, gid=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -3124
    pid_file_base_0 = module_0.PidFileBase(piddir=int_0, allow_samepid=int_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    pid_file_already_locked_error_0 = module_1.determine_pid_directory()
    pid_file_base_0 = module_0.PidFileBase(pid_file_already_locked_error_0, register_term_signal_handler=pid_file_already_locked_error_0, register_atexit=pid_file_already_locked_error_0, lock_pidfile=pid_file_already_locked_error_0, gid=pid_file_already_locked_error_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.create()

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(none_type_0, register_term_signal_handler=none_type_0, register_atexit=none_type_0, uid=none_type_0, allow_samepid=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.close()
    var_1 = pid_file_base_0.check()
    assert var_1 == 'PID_CHECK_EMPTY'
    pid_file_base_0.create()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    pid_file_base_0 = module_0.PidFileBase(chmod=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.close(bool_0)

def test_case_7():
    bool_0 = False
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.close(cleanup=bool_0)
    var_1 = pid_file_base_0.check()
    assert var_1 == 'PID_CHECK_EMPTY'
    var_2 = pid_file_base_0.setup()

def test_case_8():
    pid_file_already_locked_error_0 = module_0.PidFileAlreadyLockedError()
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'

def test_case_9():
    none_type_0 = None
    pid_file_already_running_error_0 = module_0.PidFileAlreadyRunningError(none_type_0)
    assert f'{type(pid_file_already_running_error_0).__module__}.{type(pid_file_already_running_error_0).__qualname__}' == 'pid.base.PidFileAlreadyRunningError'
    assert pid_file_already_running_error_0.message is None
    assert pid_file_already_running_error_0.pid is None
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'

def test_case_10():
    pid_file_base_0 = module_0.PidFileBase()
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_11():
    pid_file_base_0 = module_0.PidFileBase()
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(lock_pidfile=none_type_0, force_tmpdir=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.__enter__()

def test_case_13():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(none_type_0, register_term_signal_handler=none_type_0, register_atexit=none_type_0, uid=none_type_0, allow_samepid=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    assert var_0 == 'PID_CHECK_EMPTY'

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(none_type_0, register_term_signal_handler=none_type_0, register_atexit=none_type_0, uid=none_type_0, allow_samepid=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.create()

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    var_1 = pid_file_base_0.__exit__()
    var_0.setup()

def test_case_16():
    bool_0 = False
    pid_file_base_0 = module_0.PidFileBase(register_term_signal_handler=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    assert var_0 == 'PID_CHECK_EMPTY'

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=none_type_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.close(pid_file_base_0, pid_file_base_0)
    pid_file_base_0.create()

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    assert var_0 == 'PID_CHECK_EMPTY'
    pid_file_base_0.close(var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(none_type_0, register_term_signal_handler=none_type_0, register_atexit=none_type_0, uid=none_type_0, allow_samepid=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    assert var_0 == 'PID_CHECK_EMPTY'
    pid_file_base_0.create()

def test_case_20():
    none_type_0 = None
    var_0 = module_1.determine_pid_directory()
    pid_file_base_0 = module_0.PidFileBase(var_0, register_term_signal_handler=none_type_0, register_atexit=none_type_0, uid=var_0, allow_samepid=var_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_1 = pid_file_base_0.check()
    assert var_1 == 'PID_CHECK_NOFILE'
    var_2 = pid_file_base_0.close()
    pid_file_already_running_error_0 = module_0.PidFileAlreadyRunningError(pid_file_base_0)
    assert f'{type(pid_file_already_running_error_0).__module__}.{type(pid_file_already_running_error_0).__qualname__}' == 'pid.base.PidFileAlreadyRunningError'
    assert pid_file_already_running_error_0.pid is None

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.close(pid_file_base_0, pid_file_base_0)
    var_1 = pid_file_base_0.setup()
    var_2 = pid_file_base_0.close(cleanup=pid_file_base_0)
    var_2.__call__(var_2)

def test_case_22():
    bool_0 = False
    var_0 = module_1.determine_pid_directory()
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(var_0, enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_1 = pid_file_base_0.check()
    assert var_1 == 'PID_CHECK_NOFILE'
    var_2 = pid_file_base_0.close(pid_file_base_0, pid_file_base_0)

def test_case_23():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    var_1 = pid_file_base_0.close(pid_file_base_0, pid_file_base_0)
    var_2 = pid_file_base_0.check()
    assert var_2 == 'PID_CHECK_NOFILE'

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    assert var_0 == 'PID_CHECK_NOFILE'
    pid_file_base_0.close(var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = True
    pid_file_base_0 = module_0.PidFileBase(piddir=bool_0, enforce_dotpid_postfix=bool_0, register_term_signal_handler=bool_0, register_atexit=bool_0, chmod=bool_0, uid=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.setup()

@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    var_1 = pid_file_base_0.__exit__()
    pid_file_unreadable_error_0 = module_0.PidFileUnreadableError()
    pid_file_base_0.close(var_0, pid_file_unreadable_error_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = pid_file_base_0.check()
    var_1 = pid_file_base_0.close(pid_file_base_0)
    var_1.setup()

@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=none_type_0, register_term_signal_handler=none_type_0, lock_pidfile=none_type_0, gid=none_type_0, force_tmpdir=none_type_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    pid_file_base_0.create()

@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    none_type_0 = None
    pid_file_base_0 = module_0.PidFileBase(enforce_dotpid_postfix=bool_0, register_term_signal_handler=none_type_0, gid=none_type_0, force_tmpdir=bool_0)
    assert f'{type(pid_file_base_0).__module__}.{type(pid_file_base_0).__qualname__}' == 'pid.base.PidFileBase'
    assert module_0.DEFAULT_CHMOD == 420
    assert module_0.PID_CHECK_EMPTY == 'PID_CHECK_EMPTY'
    assert module_0.PID_CHECK_NOFILE == 'PID_CHECK_NOFILE'
    assert module_0.PID_CHECK_SAMEPID == 'PID_CHECK_SAMEPID'
    assert module_0.PID_CHECK_NOTRUNNING == 'PID_CHECK_NOTRUNNING'
    assert f'{type(module_0.PidFileBase.logger).__module__}.{type(module_0.PidFileBase.logger).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.PidFileBase.allow_samepid).__module__}.{type(module_0.PidFileBase.allow_samepid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.chmod).__module__}.{type(module_0.PidFileBase.chmod).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.enforce_dotpid_postfix).__module__}.{type(module_0.PidFileBase.enforce_dotpid_postfix).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.fh).__module__}.{type(module_0.PidFileBase.fh).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.filename).__module__}.{type(module_0.PidFileBase.filename).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.force_tmpdir).__module__}.{type(module_0.PidFileBase.force_tmpdir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.gid).__module__}.{type(module_0.PidFileBase.gid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.lock_pidfile).__module__}.{type(module_0.PidFileBase.lock_pidfile).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pid).__module__}.{type(module_0.PidFileBase.pid).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.piddir).__module__}.{type(module_0.PidFileBase.piddir).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.pidname).__module__}.{type(module_0.PidFileBase.pidname).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_atexit).__module__}.{type(module_0.PidFileBase.register_atexit).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.register_term_signal_handler).__module__}.{type(module_0.PidFileBase.register_term_signal_handler).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.PidFileBase.uid).__module__}.{type(module_0.PidFileBase.uid).__qualname__}' == 'builtins.member_descriptor'
    var_0 = module_0.PidFileBase(none_type_0, enforce_dotpid_postfix=pid_file_base_0, register_term_signal_handler=pid_file_base_0, chmod=pid_file_base_0, allow_samepid=pid_file_base_0)
    var_0.__enter__()