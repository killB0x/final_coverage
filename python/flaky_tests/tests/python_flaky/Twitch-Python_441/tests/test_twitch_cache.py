# Automatically generated by Pynguin.
import pytest
import twitch.cache as module_0
import datetime as module_1

def test_case_0():
    str_0 = '8={\rwYNlGf m'
    none_type_0 = None
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    str_1 = "-G]'ku\\A+up"
    cache_1 = module_0.Cache(str_0)
    bool_0 = cache_1.has(str_1)
    assert bool_0 is False
    datetime_0 = cache_0.set(str_0, str_0, none_type_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    cache_2 = module_0.Cache()
    none_type_1 = cache_2.remove(datetime_0)

def test_case_1():
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    none_type_0 = cache_0.flush()

def test_case_2():
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    datetime_0 = cache_0.set(cache_0, cache_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    none_type_0 = cache_0.get(cache_0)

def test_case_3():
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    str_0 = "K'"
    dict_0 = cache_0.get(str_0)
    datetime_0 = cache_0.set(str_0, dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    none_type_0 = cache_0.clean()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '`U\x0bJsjHDUpg(sfj2'
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    str_1 = 'Jx'
    dict_0 = {str_0: cache_0, str_1: cache_0}
    datetime_0 = cache_0.set(str_0, dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    var_0 = cache_0.get(str_0)
    cache_1 = module_0.Cache()
    cache_2 = module_0.Cache()
    cache_3 = module_0.Cache()
    none_type_0 = cache_3.clean()
    str_2 = '2w\\Q)ufH%<'
    bytes_0 = b'E\x16\x1cn}\xda'
    cache_0.set(str_2, dict_0, bytes_0)

def test_case_5():
    complex_0 = (-637+13.816988j)
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    bool_0 = cache_0.expired(complex_0)
    assert bool_0 is False

def test_case_6():
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    str_0 = 'Jx'
    dict_0 = {str_0: cache_0, str_0: cache_0}
    datetime_0 = cache_0.set(str_0, dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    var_0 = cache_0.get(str_0)
    none_type_0 = cache_0.set_expiration(str_0, str_0)

def test_case_7():
    str_0 = 'y{+mNL?02'
    timedelta_0 = module_1.timedelta()
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    var_0 = cache_0.extend(str_0, timedelta_0)
    bool_0 = True
    cache_1 = module_0.Cache(timedelta_0)
    var_1 = cache_1.get(str_0, bool_0)
    str_1 = 'https://api.twitch.tv/helix/'
    none_type_0 = cache_0.set_expiration(str_1, var_0)
    cache_2 = module_0.Cache(var_0)
    none_type_1 = cache_2.clean()

def test_case_8():
    str_0 = 'Ratelimit-Limit'
    timedelta_0 = module_1.timedelta()
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    var_0 = cache_0.extend(str_0, timedelta_0)

def test_case_9():
    str_0 = 'url'
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    datetime_0 = cache_0.set(str_0, str_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    none_type_0 = cache_0.clean()

def test_case_10():
    bytes_0 = b'ie\xbd\x05\xd28\xda\x8a\x9b\x93\x10Z\x08\x01\xf2\x98\xe0\x8f\x1c'
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    none_type_0 = None
    none_type_1 = cache_0.flush()
    bool_0 = True
    none_type_2 = cache_0.clean()
    dict_0 = {none_type_0: bytes_0}
    datetime_0 = cache_0.set(bytes_0, dict_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    none_type_3 = cache_0.set_expiration(bool_0, datetime_0)
    str_0 = "'"
    var_0 = cache_0.extend(str_0, none_type_0)
    datetime_1 = cache_0.set(none_type_0, dict_0, none_type_0)
    none_type_4 = cache_0.remove(bytes_0)
    str_1 = 'b{Im'
    bool_1 = cache_0.expired(str_1)
    assert bool_1 is False
    str_2 = ',ryF=FFEw<O\ngB\x0b'
    str_3 = 'eR?|I-)1)\n5BR7I@^Xi'
    var_1 = cache_0.extend(str_3, str_2)
    none_type_5 = cache_0.set_expiration(cache_0, str_0)
    cache_1 = module_0.Cache()
    none_type_6 = cache_1.clean()
    timedelta_0 = module_1.timedelta()
    none_type_7 = cache_0.remove(str_2)
    var_2 = cache_1.extend(str_2, timedelta_0)
    dict_1 = {str_2: str_2}
    var_3 = cache_1.get(str_3)
    cache_2 = module_0.Cache()
    none_type_8 = cache_2.clean()
    datetime_2 = cache_2.set(str_2, dict_1)
    cache_3 = module_0.Cache()
    none_type_9 = cache_3.clean()

def test_case_11():
    bytes_0 = b'ie\xbd\x05\xd28\xda\x8a\x9b\x93\x10Z\x08\x01\xf2\x98\xe0\x8f\x1c'
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    none_type_0 = None
    str_0 = '%j!daIU.~=mb)"s%'
    bool_0 = True
    var_0 = cache_0.get(str_0, bool_0)
    dict_0 = {none_type_0: bytes_0}
    str_1 = "'"
    var_1 = cache_0.extend(str_1, none_type_0)
    datetime_0 = cache_0.set(none_type_0, dict_0, none_type_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    str_2 = 'user_color'
    bool_1 = cache_0.expired(str_2)
    assert bool_1 is False
    var_2 = cache_0.get(none_type_0)
    str_3 = 'b{Im'
    bool_2 = cache_0.expired(str_3)
    str_4 = 'eR?|I-)1)\n5BR7I@^Xi'
    none_type_1 = cache_0.clean()
    var_3 = cache_0.get(none_type_1, datetime_0)
    none_type_2 = cache_0.set_expiration(cache_0, str_1)
    timedelta_0 = module_1.timedelta()
    none_type_3 = cache_0.remove(str_4)
    none_type_4 = cache_0.flush()
    var_4 = cache_0.get(str_4)
    cache_1 = module_0.Cache()

@pytest.mark.xfail(strict=True)
def test_case_12():
    cache_0 = module_0.Cache()
    assert module_0.Cache.EXPIRATION_FIELD == 'CACHE_EXPIRATION'
    str_0 = '%j!daIU.~=mb)"s%'
    bool_0 = True
    var_0 = cache_0.get(str_0, bool_0)
    str_1 = '2\nca>"qDq.\r(S"ver\x0c'
    datetime_0 = cache_0.set(str_1, str_0)
    assert f'{type(datetime_0).__module__}.{type(datetime_0).__qualname__}' == 'datetime.datetime'
    bool_1 = cache_0.expired(cache_0)
    assert bool_1 is False
    str_2 = "?d+\r't>SC^KW4slbT-"
    var_1 = cache_0.get(str_2)
    bool_2 = cache_0.expired(str_0)
    str_3 = 'eR?|I-)1)\n5BR7I@^Xi'
    none_type_0 = cache_0.clean()
    timedelta_0 = module_1.timedelta()
    var_2 = cache_0.extend(str_1, timedelta_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'datetime.datetime'
    none_type_1 = cache_0.set_expiration(str_3, str_0)
    cache_1 = module_0.Cache(var_0)
    module_1.timedelta(*datetime_0)