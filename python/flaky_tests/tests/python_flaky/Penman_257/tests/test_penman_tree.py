# Automatically generated by Pynguin.
import pytest
import penman.tree as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'MvA<'
    tree_0 = module_0.Tree(str_0, str_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_0.nodes()

def test_case_1():
    int_0 = 1357
    none_type_0 = None
    tree_0 = module_0.Tree(int_0, none_type_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    str_0 = tree_0.__repr__()
    assert str_0 == 'Tree(1357)'

def test_case_2():
    str_0 = '2q%,'
    list_0 = []
    str_1 = '7a,+2/dF2/v*`Dk`'
    tuple_0 = (str_1, list_0)
    tree_0 = module_0.Tree(tuple_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_1 = module_0.Tree(tuple_0)
    str_2 = tree_1.__repr__()
    assert str_2 == "Tree(('7a,+2/dF2/v*`Dk`', []))"
    tuple_1 = (str_0, list_0)
    tree_2 = module_0.Tree(tuple_1)
    bool_0 = tree_2.__eq__(tree_1)
    assert bool_0 is False
    none_type_0 = tree_1.reset_variables()
    none_type_1 = tree_0.reset_variables()
    iterator_0 = tree_2.walk()
    str_3 = 'U'
    tuple_2 = (str_3, list_0)
    tree_3 = module_0.Tree(tuple_2)
    str_4 = tree_2.__str__()
    assert str_4 == "Tree(\n  ('2q%,', [\n    ]))"
    list_1 = tree_3.nodes()
    iterator_1 = tree_2.walk()

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "5W' Q^\x0c%8+5};V?t]7E"
    tuple_0 = (str_0, str_0)
    int_0 = 1032
    dict_0 = {str_0: tuple_0, str_0: str_0, int_0: int_0}
    tree_0 = module_0.Tree(tuple_0, dict_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    bool_0 = tree_0.__eq__(str_0)
    assert bool_0 is False
    iterator_0 = tree_0.walk()
    tree_1 = module_0.Tree(iterator_0)
    tree_1.__str__()

def test_case_4():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    tree_0 = module_0.Tree(tuple_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = tree_0.reset_variables()

def test_case_5():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = tree_0.reset_variables()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '6#\\6`(hm* {S'
    tuple_0 = (str_0, str_0)
    tree_0 = module_0.Tree(tuple_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_0.__str__()

def test_case_7():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    tree_0 = module_0.Tree(tuple_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = tree_0.reset_variables()
    str_1 = tree_0.__str__()
    assert str_1 == "Tree(\n  ('_', [\n    ]))"

def test_case_8():
    str_0 = '\n        Return the next token if its type is in *choices*.\n\n        The iterator is advanced if successful. If unsuccessful,\n        ``None`` is returned.\n        '
    str_1 = '-'
    tuple_0 = (str_1, str_0)
    tree_0 = module_0.Tree(tuple_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    iterator_0 = tree_0.walk()
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_1 = module_0.Tree(tuple_1)
    str_2 = tree_1.__str__()
    assert str_2 == "Tree(\n  ('\\n        Return the next token if its type is in *choices*.\\n\\n        The iterator is advanced if successful. If unsuccessful,\\n        ``None`` is returned.\\n        ', [\n    ('-', '\\n        Return the next token if its type is in *choices*.\\n\\n        The iterator is advanced if successful. If unsuccessful,\\n        ``None`` is returned.\\n        ')]))"

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'Rk^)LdQ\t5%Y9j;_k"&'
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    bytes_0 = b'\x845PLfQ5\x8dI\xb1'
    set_0 = {str_0, bool_0, bytes_0}
    complex_0 = (4224+115j)
    tuple_1 = (tuple_0, bytes_0, set_0, complex_0)
    tuple_2 = (str_0, tuple_1)
    list_0 = [tuple_2]
    tuple_3 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_3)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'v<'
    tree_0 = module_0.Tree(str_0, str_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_0.nodes()

def test_case_11():
    str_0 = 'hpd&HUdm|T+\tKpM1'
    tuple_0 = (str_0, str_0)
    str_1 = '/'
    tuple_1 = (str_1, str_0)
    list_0 = [tuple_0, tuple_0, tuple_1]
    bytes_0 = b'\xf7)'
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    bool_0 = module_0.is_atomic(none_type_0)
    assert bool_0 is True
    str_2 = ''
    tuple_2 = (str_2, list_0)
    tree_1 = module_0.Tree(tuple_2)
    str_3 = tree_1.__str__()
    assert str_3 == "Tree(\n  ('', [\n    ('hpd&HUdm|T+\\tKpM1', 'hpd&HUdm|T+\\tKpM1'),\n    ('hpd&HUdm|T+\\tKpM1', 'hpd&HUdm|T+\\tKpM1'),\n    ('/', 'hpd&HUdm|T+\\tKpM1')]))"
    tree_2 = module_0.Tree(tuple_2, bytes_0)
    none_type_1 = tree_2.reset_variables()

def test_case_12():
    str_0 = '>qH;A\x0c<Vh@'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    list_1 = tree_0.nodes()

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "\n        Deserialize PENMAN-notation string *s* into its Graph object.\n\n        Args:\n            s: a string containing a single PENMAN-serialized graph\n        Returns:\n            The :class:`~penman.graph.Graph` object described by *s*.\n        Example:\n            >>> from penman.codec import PENMANCodec\n            >>> codec = PENMANCodec()\n            >>> codec.decode('(b / bark-01 :ARG0 (d / dog))')\n            <Graph object (top=b) at ...>\n        "
    tuple_0 = (str_0, str_0)
    str_1 = 'nm'
    tuple_1 = (str_1, tuple_0)
    list_0 = [tuple_1]
    tuple_2 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_0.Tree(tuple_2, none_type_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_0.reset_variables()

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'q=[?d`95yA9'
    str_1 = '7lV\ta@n;():P"g'
    tuple_0 = (str_1, str_1)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = tree_0.reset_variables()
    bool_0 = False
    tree_1 = module_0.Tree(bool_0)
    tree_1.reset_variables()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ',Com0C\tG'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    iterator_0 = tree_0.walk()
    tree_1 = module_0.Tree(iterator_0)
    tree_1.__str__()

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "5W' Q^\x0c%8+5};V?t]7E"
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    iterator_0 = tree_0.walk()
    tree_1 = module_0.Tree(iterator_0)
    tree_1.__str__()

def test_case_17():
    str_0 = '/'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = tree_0.reset_variables()

def test_case_18():
    str_0 = '![Tn\nD4%&'
    str_1 = ''
    str_2 = ']xc:~Tc'
    tuple_0 = (str_2, str_2)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tuple_2 = (str_1, str_1)
    tuple_3 = (str_1, tuple_2)
    list_1 = [tuple_2, tuple_3, tuple_2]
    tuple_4 = (str_0, list_1)
    int_0 = -1515
    tree_1 = module_0.Tree(tuple_4, int_0)
    list_2 = tree_1.nodes()
    none_type_0 = tree_1.reset_variables()

def test_case_19():
    str_0 = '![Tn\nD4%&'
    str_1 = ''
    str_2 = ']xc:~Tc'
    tuple_0 = (str_2, str_2)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tuple_2 = (str_0, str_1)
    tuple_3 = (str_1, tuple_2)
    list_1 = [tuple_2, tuple_3, tuple_2]
    tuple_4 = (str_0, list_1)
    int_0 = -1515
    tree_1 = module_0.Tree(tuple_4, int_0)
    list_2 = tree_1.nodes()
    none_type_0 = tree_1.reset_variables()

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'P/n'
    str_1 = 'ak9FW#'
    str_2 = 'l'
    tuple_0 = (str_1, str_2)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_2, list_0)
    none_type_0 = None
    tree_0 = module_0.Tree(tuple_1, none_type_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tuple_2 = (str_1, tree_0)
    list_1 = [tuple_2, tuple_2, tuple_1]
    tuple_3 = (str_0, list_1)
    tree_1 = module_0.Tree(tuple_3, tree_0)
    iterator_0 = tree_1.walk()
    tree_2 = module_0.Tree(iterator_0, tuple_1)
    tree_2.nodes()

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    none_type_0 = None
    str_0 = 'V4`i$uaPdsS;w'
    dict_0 = {none_type_0: none_type_0, none_type_0: bool_0, bool_0: none_type_0, bool_0: bool_0}
    tuple_0 = (str_0, dict_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_0.Tree(tuple_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    assert f'{type(module_0.Tree.metadata).__module__}.{type(module_0.Tree.metadata).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Tree.node).__module__}.{type(module_0.Tree.node).__qualname__}' == 'builtins.member_descriptor'
    tree_0.reset_variables()