# Automatically generated by Pynguin.
import pytest
import penman.graph as module_0
import penman.layout as module_1
import penman.tree as module_2

def test_case_0():
    graph_0 = module_0.Graph()
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'bi<R'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_2.Tree(tuple_1)
    module_1.interpret(tree_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    module_1.configure(list_0)

def test_case_3():
    str_0 = 'nQI5i+"wU@sX+s'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_2.Tree(tuple_1)
    none_type_0 = module_1.rearrange(tree_0, attributes_first=str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Expected: {}'
    tuple_0 = (str_0, str_0)
    tree_0 = module_2.Tree(tuple_0)
    module_1.rearrange(tree_0)

def test_case_5():
    pop_0 = module_1.Pop()

def test_case_6():
    list_0 = []
    push_0 = module_1.Push(list_0)
    assert f'{type(push_0).__module__}.{type(push_0).__qualname__}' == 'penman.layout.Push'
    assert f'{type(module_1.Push.variable).__module__}.{type(module_1.Push.variable).__qualname__}' == 'builtins.member_descriptor'

def test_case_7():
    graph_0 = module_0.Graph()
    str_0 = 'y|9 Q\x0coQ~/%(R'
    tuple_0 = (str_0, str_0, str_0)
    tree_0 = module_1.reconfigure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    bool_0 = module_1.appears_inverted(graph_0, tuple_0)
    assert bool_0 is False
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    push_0 = module_1.Push(bool_0)
    assert f'{type(push_0).__module__}.{type(push_0).__qualname__}' == 'penman.layout.Push'
    assert f'{type(module_1.Push.variable).__module__}.{type(module_1.Push.variable).__qualname__}' == 'builtins.member_descriptor'
    var_0 = push_0.__repr__()
    assert var_0 == 'Push(False)'

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    layout_marker_0 = module_1.LayoutMarker(**dict_0)
    pop_0 = module_1.Pop()
    var_0 = pop_0.__repr__()
    assert var_0 == 'POP'
    var_1 = pop_0.__repr__()
    assert var_1 == 'POP'
    var_2 = var_1.__eq__(pop_0)
    module_1.rearrange(var_1, pop_0)

def test_case_9():
    graph_0 = module_0.Graph()
    str_0 = '9A|d3s:Q%M\x0b2_?'
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    tree_1 = module_1.reconfigure(graph_1, model=str_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'

def test_case_10():
    graph_0 = module_0.Graph()
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'

def test_case_11():
    graph_0 = module_0.Graph()
    tree_0 = module_1.reconfigure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'

def test_case_12():
    graph_0 = module_0.Graph()
    str_0 = 'y|9 Q\x0coQ~/%(R'
    str_1 = 'R#<z&sN$5F%'
    list_0 = graph_0.edges(role=str_1, target=str_1)
    list_1 = module_1.node_contexts(graph_0)
    tree_0 = module_1.reconfigure(graph_0, model=str_0, key=graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}

def test_case_13():
    graph_0 = module_0.Graph()
    str_0 = 'y|9 Q\x0coQ~/%(R'
    tuple_0 = (str_0, str_0, str_0)
    bool_0 = module_1.appears_inverted(graph_0, tuple_0)
    assert bool_0 is False

def test_case_14():
    str_0 = '71'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_2.Tree(tuple_1)
    graph_0 = module_1.interpret(tree_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('71', ':instance', None), ('71', ':71', '71')]
    assert graph_0.epidata == {('71', '71', '71'): [], ('71', ':instance', None): []}
    assert graph_0.metadata == {}

def test_case_15():
    graph_0 = module_0.Graph()
    list_0 = module_1.node_contexts(graph_0)
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'

def test_case_16():
    graph_0 = module_0.Graph()
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    tree_1 = module_1.reconfigure(graph_1)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'

@pytest.mark.xfail(strict=True)
def test_case_17():
    graph_0 = module_0.Graph()
    none_type_0 = None
    list_0 = graph_0.attributes(none_type_0)
    str_0 = 'y|9 Q\x0coQ~/%(R'
    str_1 = ':instance'
    tuple_0 = (str_0, str_1, str_0)
    bool_0 = module_1.appears_inverted(graph_0, tuple_0)
    assert bool_0 is False
    set_0 = graph_0.variables()
    none_type_1 = None
    tree_0 = module_1.configure(graph_0, model=none_type_1)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    tree_1 = module_1.reconfigure(graph_0, str_0, none_type_1)
    module_1.get_pushed_variable(graph_1, tuple_0)

def test_case_18():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_2.Tree(tuple_1, none_type_0)
    graph_0 = module_1.interpret(tree_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('', ':instance', None), ('', ':', ''), ('', ':', ''), ('', ':', '')]
    assert graph_0.epidata == {('', '', ''): [], ('', ':instance', None): []}
    assert graph_0.metadata == {}
    tree_1 = module_1.reconfigure(graph_0, str_0, key=none_type_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'

@pytest.mark.xfail(strict=True)
def test_case_19():
    graph_0 = module_0.Graph()
    str_0 = '[5:UP\x0b+|%lAW'
    tuple_0 = (str_0, str_0, str_0)
    bool_0 = module_1.appears_inverted(graph_0, tuple_0)
    assert bool_0 is False
    str_1 = '*kST?rb@\x0b*-u?'
    list_0 = graph_0.edges(role=str_0, target=str_0)
    set_0 = graph_0.variables()
    none_type_0 = None
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    tree_1 = module_1.reconfigure(graph_0, none_type_0, none_type_0)
    module_1.reconfigure(graph_1, str_1, none_type_0, none_type_0)

def test_case_20():
    str_0 = 'Expected: {}'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_2.Tree(tuple_1)
    none_type_0 = module_1.rearrange(tree_0)

def test_case_21():
    graph_0 = module_0.Graph()
    none_type_0 = None
    push_0 = module_1.Push(none_type_0)
    assert f'{type(push_0).__module__}.{type(push_0).__qualname__}' == 'penman.layout.Push'
    assert f'{type(module_1.Push.variable).__module__}.{type(module_1.Push.variable).__qualname__}' == 'builtins.member_descriptor'
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    tree_1 = module_1.reconfigure(graph_1, model=none_type_0, key=none_type_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'
    none_type_1 = module_1.rearrange(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    graph_0 = module_0.Graph()
    str_0 = '[5:UP\x0b+|CpD%lAW'
    list_0 = graph_0.instances()
    tuple_0 = (str_0, str_0, str_0)
    bool_0 = module_1.appears_inverted(graph_0, tuple_0)
    assert bool_0 is False
    push_0 = module_1.Push(list_0)
    assert f'{type(push_0).__module__}.{type(push_0).__qualname__}' == 'penman.layout.Push'
    assert f'{type(module_1.Push.variable).__module__}.{type(module_1.Push.variable).__qualname__}' == 'builtins.member_descriptor'
    str_1 = ''
    str_2 = 'R#<z&sN$5F&'
    set_0 = graph_0.variables()
    tuple_1 = (str_2, list_0)
    list_1 = [tuple_1, tuple_1, tuple_1]
    tuple_2 = (str_1, list_1)
    tree_0 = module_2.Tree(tuple_2)
    module_1.rearrange(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    graph_0 = module_0.Graph()
    str_0 = '[5:UP\x0b+|%lAW'
    tuple_0 = (str_0, str_0, str_0)
    bool_0 = module_1.appears_inverted(graph_0, tuple_0)
    assert bool_0 is False
    list_0 = graph_0.edges()
    str_1 = 'R#<z&sN$5F%'
    set_0 = graph_0.variables()
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    var_0 = graph_0.__or__(str_1)
    var_1 = var_0.__repr__()
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    var_2 = graph_0.__isub__(tuple_0)
    module_1.reconfigure(graph_1, model=var_2, key=var_0)

def test_case_24():
    graph_0 = module_0.Graph()
    tree_0 = module_1.configure(graph_0)
    assert f'{type(tree_0).__module__}.{type(tree_0).__qualname__}' == 'penman.tree.Tree'
    graph_1 = module_1.interpret(tree_0)
    assert graph_1.triples == [(None, ':instance', None)]
    assert graph_1.epidata == {(None, ':instance', None): []}
    list_0 = module_1.node_contexts(graph_1)

def test_case_25():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_2.Tree(tuple_1)
    graph_0 = module_1.interpret(tree_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('', ':instance', None), ('', ':', '')]
    assert graph_0.epidata == {('', '', ''): [], ('', ':instance', None): []}
    assert graph_0.metadata == {}

@pytest.mark.xfail(strict=True)
def test_case_26():
    layout_marker_0 = module_1.LayoutMarker()
    str_0 = '3SwE~0'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_2.Tree(tuple_1, none_type_0)
    graph_0 = module_1.interpret(tree_0, none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('3SwE~0', ':instance', None), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE')]
    assert f'{type(graph_0.epidata).__module__}.{type(graph_0.epidata).__qualname__}' == 'builtins.dict'
    assert len(graph_0.epidata) == 2
    assert graph_0.metadata == {}
    tree_1 = module_1.reconfigure(graph_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'
    module_1.rearrange(tree_0, tree_1)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_2.Tree(tuple_1)
    graph_0 = module_1.interpret(tree_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('', ':instance', None), ('', ':', '')]
    assert graph_0.epidata == {('', '', ''): [], ('', ':instance', None): []}
    assert graph_0.metadata == {}
    tuple_2 = (str_0, str_0, str_0)
    module_1.appears_inverted(graph_0, tuple_2)

def test_case_28():
    layout_marker_0 = module_1.LayoutMarker()
    str_0 = '3SwE~0'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_2.Tree(tuple_1, none_type_0)
    graph_0 = module_1.interpret(tree_0, none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('3SwE~0', ':instance', None), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE')]
    assert f'{type(graph_0.epidata).__module__}.{type(graph_0.epidata).__qualname__}' == 'builtins.dict'
    assert len(graph_0.epidata) == 2
    assert graph_0.metadata == {}
    tree_1 = module_1.reconfigure(graph_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'
    var_0 = graph_0.__sub__(none_type_0)
    graph_1 = module_1.interpret(tree_1)
    assert f'{type(graph_1).__module__}.{type(graph_1).__qualname__}' == 'penman.graph.Graph'
    assert graph_1.triples == [('3SwE~0', ':instance', None), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE'), ('3SwE~0', ':3SwE', '3SwE')]
    assert graph_1.epidata == {('3SwE~0', ':3SwE', '3SwE'): [], ('3SwE~0', ':instance', None): []}
    assert graph_1.metadata == {}
    list_1 = module_1.node_contexts(graph_1)

def test_case_29():
    str_0 = ''
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_2.Tree(tuple_1, none_type_0)
    graph_0 = module_1.interpret(tree_0, none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('', ':instance', None), ('', ':', ''), ('', ':', ''), ('', ':', ''), ('', ':', '')]
    assert graph_0.epidata == {('', '', ''): [], ('', ':instance', None): []}
    assert graph_0.metadata == {}
    tree_1 = module_1.reconfigure(graph_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'

def test_case_30():
    str_0 = 'D3SwE~0'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_2.Tree(tuple_1, none_type_0)
    graph_0 = module_1.interpret(tree_0, none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('D3SwE~0', ':instance', None), ('D3SwE~0', ':D3SwE', 'D3SwE'), ('D3SwE~0', ':D3SwE', 'D3SwE'), ('D3SwE~0', ':D3SwE', 'D3SwE'), ('D3SwE~0', ':D3SwE', 'D3SwE')]
    assert f'{type(graph_0.epidata).__module__}.{type(graph_0.epidata).__qualname__}' == 'builtins.dict'
    assert len(graph_0.epidata) == 2
    assert graph_0.metadata == {}
    tree_1 = module_1.reconfigure(graph_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'

@pytest.mark.xfail(strict=True)
def test_case_31():
    graph_0 = module_0.Graph()
    list_0 = graph_0.edges()
    var_0 = graph_0.__str__()
    list_1 = graph_0.instances()
    pop_0 = module_1.Pop(*list_0)
    var_1 = pop_0.__repr__()
    assert var_1 == 'POP'
    var_2 = list_1.__repr__()
    push_0 = module_1.Push(var_1)
    assert f'{type(push_0).__module__}.{type(push_0).__qualname__}' == 'penman.layout.Push'
    assert f'{type(module_1.Push.variable).__module__}.{type(module_1.Push.variable).__qualname__}' == 'builtins.member_descriptor'
    layout_marker_0 = module_1.LayoutMarker()
    push_1 = module_1.Push(var_1)
    str_0 = '/'
    dict_0 = graph_0.reentrancies()
    var_3 = push_1.__repr__()
    assert var_3 == 'Push(POP)'
    tuple_0 = (str_0, str_0)
    layout_marker_1 = module_1.LayoutMarker(*list_0)
    list_2 = [tuple_0, var_2]
    var_4 = push_0.__repr__()
    assert var_4 == 'Push(POP)'
    tuple_1 = (str_0, list_2)
    none_type_0 = None
    var_5 = var_2.__repr__()
    var_6 = none_type_0.__repr__()
    tree_0 = module_2.Tree(tuple_1, none_type_0)
    none_type_1 = module_1.rearrange(tree_0)
    none_type_2 = None
    graph_1 = module_1.interpret(tree_0)
    assert f'{type(graph_1).__module__}.{type(graph_1).__qualname__}' == 'penman.graph.Graph'
    assert graph_1.triples == [('/', ':instance', '/'), ('/', ':[', ']')]
    assert graph_1.epidata == {('/', ':instance', '/'): [], ('/', '[', ']'): []}
    assert graph_1.metadata == {}
    bool_0 = module_1.appears_inverted(graph_1, var_0)
    assert bool_0 is False
    list_3 = module_1.node_contexts(graph_0)
    str_1 = tree_0.__repr__()
    assert str_1 == "Tree(('/', [('/', '/'), '[]']))"
    var_7 = none_type_2.__repr__()
    tree_1 = module_1.reconfigure(graph_1, model=dict_0)
    assert f'{type(tree_1).__module__}.{type(tree_1).__qualname__}' == 'penman.tree.Tree'
    module_1.node_contexts(graph_1)