# Automatically generated by Pynguin.
import pytest
import penman.surface as module_0
import penman.graph as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -225
    float_0 = 400.9
    tuple_0 = (int_0, float_0)
    alignment_marker_0 = module_0.AlignmentMarker(tuple_0, tuple_0)
    assert f'{type(alignment_marker_0).__module__}.{type(alignment_marker_0).__qualname__}' == 'penman.surface.AlignmentMarker'
    assert f'{type(module_0.AlignmentMarker.from_string).__module__}.{type(module_0.AlignmentMarker.from_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.AlignmentMarker.indices).__module__}.{type(module_0.AlignmentMarker.indices).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.AlignmentMarker.prefix).__module__}.{type(module_0.AlignmentMarker.prefix).__qualname__}' == 'builtins.member_descriptor'
    graph_0 = module_1.Graph()
    mapping_0 = module_0.role_alignments(graph_0)
    var_0 = alignment_marker_0.__repr__()
    assert var_0 == 'AlignmentMarker((-225, 400.9), prefix=(-225, 400.9))'
    module_0.alignments(var_0)

def test_case_1():
    int_0 = 3
    tuple_0 = (int_0, int_0)
    role_alignment_0 = module_0.RoleAlignment(tuple_0)
    assert f'{type(role_alignment_0).__module__}.{type(role_alignment_0).__qualname__}' == 'penman.surface.RoleAlignment'
    assert module_0.RoleAlignment.mode == 1
    var_0 = role_alignment_0.__repr__()
    assert var_0 == 'RoleAlignment((3, 3))'

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    str_0 = ';6X`5R'
    alignment_marker_0 = module_0.AlignmentMarker(tuple_0, str_0)
    assert f'{type(alignment_marker_0).__module__}.{type(alignment_marker_0).__qualname__}' == 'penman.surface.AlignmentMarker'
    assert f'{type(module_0.AlignmentMarker.from_string).__module__}.{type(module_0.AlignmentMarker.from_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.AlignmentMarker.indices).__module__}.{type(module_0.AlignmentMarker.indices).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.AlignmentMarker.prefix).__module__}.{type(module_0.AlignmentMarker.prefix).__qualname__}' == 'builtins.member_descriptor'
    var_0 = alignment_marker_0.__str__()
    assert var_0 == '~;6X`5RFalse,False'
    var_1 = var_0.__repr__()
    assert var_1 == "'~;6X`5RFalse,False'"
    var_1.__or__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    str_0 = '`4oSTE\x0bN o)_+'
    none_type_0 = None
    graph_0 = module_1.Graph(top=str_0, epidata=none_type_0)
    mapping_0 = module_0.role_alignments(graph_0)
    role_alignment_0 = module_0.RoleAlignment(tuple_0)
    assert f'{type(role_alignment_0).__module__}.{type(role_alignment_0).__qualname__}' == 'penman.surface.RoleAlignment'
    assert module_0.RoleAlignment.mode == 1
    var_0 = role_alignment_0.__str__()
    assert var_0 == '~True,True'
    role_alignment_1 = module_0.RoleAlignment(tuple_0)
    var_1 = role_alignment_1.__eq__(role_alignment_1)
    assert var_1 is True
    var_0.reentrancies()

def test_case_4():
    int_0 = 640
    bool_0 = True
    tuple_0 = (bool_0, int_0)
    str_0 = '`4oSTE\x0bN o)_+'
    none_type_0 = None
    graph_0 = module_1.Graph(top=str_0, epidata=none_type_0)
    role_alignment_0 = module_0.RoleAlignment(tuple_0)
    assert f'{type(role_alignment_0).__module__}.{type(role_alignment_0).__qualname__}' == 'penman.surface.RoleAlignment'
    assert module_0.RoleAlignment.mode == 1
    var_0 = role_alignment_0.__eq__(role_alignment_0)
    assert var_0 is True

def test_case_5():
    none_type_0 = None
    none_type_1 = None
    int_0 = 460
    tuple_0 = (int_0, int_0)
    role_alignment_0 = module_0.RoleAlignment(tuple_0)
    assert f'{type(role_alignment_0).__module__}.{type(role_alignment_0).__qualname__}' == 'penman.surface.RoleAlignment'
    assert module_0.RoleAlignment.mode == 1
    var_0 = role_alignment_0.__eq__(none_type_1)
    assert var_0 is False
    var_1 = tuple_0.__str__()
    var_2 = var_1.__repr__()
    var_3 = var_2.__eq__(none_type_0)

def test_case_6():
    graph_0 = module_1.Graph()
    mapping_0 = module_0.role_alignments(graph_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.role_alignments(none_type_0)

def test_case_8():
    tuple_0 = ()
    alignment_marker_0 = module_0.AlignmentMarker(tuple_0)
    assert f'{type(alignment_marker_0).__module__}.{type(alignment_marker_0).__qualname__}' == 'penman.surface.AlignmentMarker'
    assert f'{type(module_0.AlignmentMarker.from_string).__module__}.{type(module_0.AlignmentMarker.from_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.AlignmentMarker.indices).__module__}.{type(module_0.AlignmentMarker.indices).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.AlignmentMarker.prefix).__module__}.{type(module_0.AlignmentMarker.prefix).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.alignments(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 640
    bool_0 = True
    tuple_0 = (bool_0, int_0)
    str_0 = '`4oSTE\x0bN o)_+'
    none_type_0 = None
    graph_0 = module_1.Graph(top=str_0, epidata=none_type_0)
    mapping_0 = module_0.role_alignments(graph_0)
    role_alignment_0 = module_0.RoleAlignment(tuple_0)
    assert f'{type(role_alignment_0).__module__}.{type(role_alignment_0).__qualname__}' == 'penman.surface.RoleAlignment'
    assert module_0.RoleAlignment.mode == 1
    var_0 = role_alignment_0.__str__()
    assert var_0 == '~True,640'
    role_alignment_1 = module_0.RoleAlignment(tuple_0)
    var_1 = graph_0.__sub__(var_0)
    var_2 = var_1.__eq__(tuple_0)
    var_3 = var_0.__repr__()
    assert var_3 == "'~True,640'"
    var_4 = role_alignment_1.__eq__(role_alignment_1)
    assert var_4 is True
    alignment_marker_0 = module_0.AlignmentMarker(var_4)
    assert f'{type(module_0.AlignmentMarker.from_string).__module__}.{type(module_0.AlignmentMarker.from_string).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.AlignmentMarker.indices).__module__}.{type(module_0.AlignmentMarker.indices).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.AlignmentMarker.prefix).__module__}.{type(module_0.AlignmentMarker.prefix).__qualname__}' == 'builtins.member_descriptor'
    mapping_1 = module_0.alignments(graph_0)
    tuple_1 = (int_0, int_0)
    alignment_marker_1 = module_0.AlignmentMarker(tuple_1)
    alignment_marker_2 = module_0.AlignmentMarker(tuple_1)
    var_5 = alignment_marker_1.__eq__(alignment_marker_1)
    assert var_5 is True
    var_6 = var_4.__repr__()
    assert var_6 == 'True'
    bytes_0 = b'@\x10\xa7.'
    role_alignment_2 = module_0.RoleAlignment(bytes_0)
    role_alignment_3 = module_0.RoleAlignment(var_5, var_5)
    var_7 = alignment_marker_2.__eq__(role_alignment_3)
    assert var_7 is False
    module_0.role_alignments(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    none_type_0 = None
    graph_0 = module_1.Graph(none_type_0, none_type_0, list_0)
    module_0.alignments(graph_0)