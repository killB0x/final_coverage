# Automatically generated by Pynguin.
import pytest
import penman._parse as module_0
import penman._lexer as module_1

def test_case_0():
    str_0 = '(K\'d<):l"'
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '~~Yl|:I?-![Ks?mZ'
    module_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "(]b`'/$:\x0c!()#:."
    module_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '_#W`#c&B6UZAA(L'
    module_0.parse_triples(str_0)

def test_case_4():
    bool_0 = False
    iterator_0 = module_0.iterparse(bool_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '~YgW'
    module_0.parse_triples(str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '40([\r>)^n'
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'
    module_0.parse_triples(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '0([\r>)0cnc'
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    str_1 = '(K\'d<):l"'
    iterator_0 = module_0.iterparse(str_1)
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'
    iterator_1 = module_0.iterparse(iterator_0)
    iterator_1.__next__()

def test_case_8():
    str_0 = 'v(6)4lE:ywjl,G\x0c\x0c('
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []

def test_case_9():
    str_0 = '0([\r>)0cnc'
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '#L?\nsGMRu'
    module_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'b(\x0c\r+J,.lFA>qV\tv+[n'
    module_0.parse_triples(str_0)

def test_case_12():
    str_0 = "('/:<):."
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'

def test_case_13():
    str_0 = 'Hv0(D\r*))i'
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "('/$:()#:."
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    iterator_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '}0(,\r>)0cnc'
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    str_1 = '#'
    module_0.parse(str_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '}0(,)0cnc'
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    list_1 = module_0.parse_triples(str_0)
    str_1 = '#'
    module_0.parse(str_1)

def test_case_17():
    str_0 = '(K\'d<):l"'
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'
    var_0 = token_iterator_0.__next__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.tree.Tree'

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "('/$:\x0c#{M:."
    module_0.parse(str_0)

def test_case_19():
    str_0 = '(H\':<):."'
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '40([\r>)^n'
    module_0.parse_triples(str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '40([\r>)^'
    module_0.parse_triples(str_0)

def test_case_22():
    str_0 = '40(@\r>)'
    list_0 = module_0.parse_triples(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'I(\x0c\r+JW.lFA>qV\t,+[n'
    module_0.parse_triples(str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "('/$:<)"
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'
    var_0 = token_iterator_0.__next__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.tree.Tree'
    str_1 = '!-)o\nh=$=@o9/I;'
    module_0.parse_triples(str_1)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "('/$:|a(."
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    module_1.TokenIterator(iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "('/$:\x0c!<)#:."
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    iterator_1 = module_0.iterparse(str_0)
    token_iterator_0 = module_1.TokenIterator(iterator_0)
    assert f'{type(token_iterator_0).__module__}.{type(token_iterator_0).__qualname__}' == 'penman._lexer.TokenIterator'
    assert f'{type(token_iterator_0.iterator).__module__}.{type(token_iterator_0.iterator).__qualname__}' == 'builtins.generator'
    var_0 = token_iterator_0.__iter__()
    module_0.parse_triples(var_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = '# ::{}{}'
    iterator_0 = module_0.iterparse(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'pe'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    module_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "#8,~^{T!\n#u{'"
    module_0.parse(str_0)