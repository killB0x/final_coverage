# Automatically generated by Pynguin.
import pytest
import penman.constant as module_0
import penman.exceptions as module_1

def test_case_0():
    none_type_0 = None
    type_0 = module_0.type(none_type_0)
    assert type_0 == module_0.Type.NULL
    var_0 = module_0.evaluate(none_type_0)
    type_1 = module_0.type(var_0)

def test_case_1():
    set_0 = set()
    with pytest.raises(AssertionError):
        module_0.type(set_0)

def test_case_2():
    none_type_0 = None
    var_0 = module_0.evaluate(none_type_0)

def test_case_3():
    str_0 = '5i/U &?u"dO8`47\'nxS'
    var_0 = module_0.evaluate(str_0)
    assert var_0 == '5i/U &?u"dO8`47\'nxS'

def test_case_4():
    none_type_0 = None
    str_0 = module_0.quote(none_type_0)
    assert str_0 == '""'
    type_0 = module_0.type(str_0)
    assert type_0 == module_0.Type.STRING

def test_case_5():
    int_0 = 1739
    str_0 = module_0.quote(int_0)
    assert str_0 == '"1739"'
    module_0.type(str_0)
    assert type_0 == module_0.Type.STRING

def test_case_6():
    pass

def test_case_7():
    str_0 = 'J/7f\nt!qP8'
    module_0.type(str_0)
    assert type_0 == module_0.Type.SYMBOL

def test_case_8():
    none_type_0 = None
    type_0 = module_0.type(none_type_0)
    assert type_0 == module_0.Type.NULL
    none_type_1 = None
    type_1 = module_0.type(none_type_1)
    str_0 = module_0.quote(none_type_1)
    assert str_0 == '""'
    var_0 = module_0.evaluate(none_type_1)
    type_2 = module_0.type(none_type_1)
    type_3 = module_0.type(none_type_1)
    var_1 = module_0.evaluate(str_0)
    assert var_1 == ''
    type_4 = module_0.type(var_1)
    assert type_4 == module_0.Type.NULL

def test_case_9():
    float_0 = -356.94657
    none_type_0 = None
    type_0 = module_0.type(none_type_0)
    assert type_0 == module_0.Type.NULL
    str_0 = module_0.quote(float_0)
    assert str_0 == '"-356.94657"'
    module_0.type(str_0)
    assert type_1 == module_0.Type.STRING
    str_1 = '`7P'
    str_2 = module_0.quote(str_1)
    assert str_2 == '"`7P"'
    with pytest.raises(AssertionError):
        var_0 = module_0.evaluate(float_0)

def test_case_10():
    str_0 = '"\\"\\""'
    type_0 = module_0.type(str_0)
    assert type_0 == module_0.Type.STRING

def test_case_11():
    str_0 = '5<u BA'
    var_0 = module_0.evaluate(str_0)
    assert var_0 == '5<u BA'
    str_1 = module_0.quote(str_0)
    assert str_1 == '"5<u BA"'
    str_2 = '"h\'T_'
    str_3 = module_0.quote(str_2)
    assert str_3 == '"\\"h\'T_"'
    with pytest.raises(module_1.ConstantError):
        module_0.evaluate(str_2)

def test_case_12():
    none_type_0 = None
    type_0 = module_0.type(none_type_0)
    assert type_0 == module_0.Type.NULL
    none_type_1 = None
    type_1 = module_0.type(none_type_1)
    var_0 = module_0.evaluate(none_type_1)
    type_2 = module_0.type(none_type_1)
    str_0 = module_0.quote(none_type_1)
    assert str_0 == '""'
    str_1 = module_0.quote(str_0)
    assert str_1 == '"\\"\\""'
    str_2 = '$jWg\n N:Gn'
    str_3 = 'null'
    module_0.type(str_3)
    assert type_3 == module_0.Type.SYMBOL
    str_4 = '[V>wrC{\r,PuuR"X$6'
    type_4 = module_0.type(str_4)
    assert type_4 == module_0.Type.SYMBOL
    str_5 = '^l+/2_J'
    type_5 = module_0.type(str_5)
    assert type_5 == module_0.Type.SYMBOL
    var_1 = module_0.evaluate(var_0)
    var_2 = module_0.evaluate(var_0)
    type_6 = module_0.Type.NULL
    str_6 = module_0.quote(str_5)
    assert str_6 == '"^l+/2_J"'
    type_7 = module_0.type(str_1)
    assert type_7 == module_0.Type.STRING
    type_8 = module_0.type(var_2)
    str_7 = module_0.quote(type_6)
    assert str_7 == '"Type.NULL"'
    var_3 = module_0.evaluate(none_type_0)
    type_9 = module_0.type(str_2)
    assert type_9 == module_0.Type.SYMBOL
    var_4 = module_0.evaluate(str_2)
    assert var_4 == '$jWg\n N:Gn'

@pytest.mark.xfail(strict=True)
def test_case_13():
    dict_0 = {}
    str_0 = module_0.quote(dict_0)
    assert str_0 == '"{}"'
    bool_0 = True
    str_1 = module_0.quote(bool_0)
    assert str_1 == '"True"'
    var_0 = module_0.evaluate(str_0)
    assert var_0 == '{}'
    str_2 = module_0.quote(str_0)
    assert str_2 == '"\\"{}\\""'
    module_0.type(var_0)