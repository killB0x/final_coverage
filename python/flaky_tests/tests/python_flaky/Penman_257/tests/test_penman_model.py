# Automatically generated by Pynguin.
import pytest
import penman.model as module_0
import re as module_1
import penman.exceptions as module_2
import penman.graph as module_3
import builtins as module_4

def test_case_0():
    model_0 = module_0.Model()
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'a9O'
    module_0.Model(top_role=str_0, reifications=str_0)

def test_case_2():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '$\nGfT"@<{'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':$\nGfT"@<{'

def test_case_3():
    model_0 = module_0.Model()
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '_#$ 1@6M:5'
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':_#$ 1@6M:5'

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '\x0ctW.\rVV/~6|m|=%U'
    bool_0 = model_0.has_role(str_0)
    assert bool_0 is False
    tuple_0 = (str_0, str_0, str_0)
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':\x0ctW.\rVV/~6|m|=%U'
    tuple_1 = model_0.deinvert(tuple_0)
    regex_flag_0 = module_1.RegexFlag.LOCALE
    regex_flag_0.scan(regex_flag_0)

def test_case_5():
    model_0 = module_0.Model()
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = "Nm3H\nA)Gc[A/b5')F"
    none_type_0 = None
    tuple_0 = (str_0, str_0, none_type_0)
    with pytest.raises(module_2.ModelError):
        model_0.reify(tuple_0)

def test_case_6():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '</\t'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    str_1 = 'VB OR6QFr4'
    str_2 = '\r=L~4ZO!8[XHd]?Yo'
    tuple_0 = (str_1, str_2, str_2)
    tuple_1 = model_0.canonicalize(tuple_0)
    tuple_2 = (str_0, str_0, str_0)
    str_3 = model_0.canonicalize_role(str_0)
    assert str_3 == ':</\t'
    var_0 = model_0.canonical_order(str_0)
    var_1 = model_0.random_order(str_3)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_2, bool_0, tuple_2)

def test_case_7():
    str_0 = '?N'
    model_0 = module_0.Model(str_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == '?N'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    bool_0 = model_0.has_role(str_0)
    assert bool_0 is False

def test_case_8():
    model_0 = module_0.Model()
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '5#~gWN2\x0b'
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':5#~gWN2\x0b'
    bool_0 = model_0.is_concept_dereifiable(str_0)
    assert bool_0 is False
    tuple_0 = (str_0, str_0, str_0)
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True
    set_0 = {str_0, var_0, str_1, str_1}
    with pytest.raises(module_2.ModelError):
        model_0.reify(tuple_0, set_0)

def test_case_9():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '$\nGfT"@<{'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':$\nGfT"@<{'
    var_0 = model_0.random_order(str_1)

def test_case_10():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '$\nGfT"@<{'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    var_0 = model_0.original_order(str_0)
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':$\nGfT"@<{'

def test_case_11():
    model_0 = module_0.Model()
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    graph_0 = module_3.Graph(epidata=none_type_0)
    dict_0 = model_0.errors(graph_0)
    str_0 = '487V@<[\n8>Th!Mj99h8'
    var_0 = model_0.__eq__(str_0)
    model_0.__isub__(var_0)

def test_case_13():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '</\t'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    str_1 = '\x0ctW.\rVV/~6|m|=%U'
    bool_1 = model_0.has_role(str_1)
    assert bool_1 is False
    tuple_0 = (str_0, str_0, str_0)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_0, bool_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'dK+Dd;<3'
    module_0.Model(normalizations=str_0)

def test_case_15():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '</\t'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    str_1 = 'VB OR6QFr4'
    str_2 = '\r=L~4ZO!8[XHd]?Yo'
    tuple_0 = (str_1, str_2, str_2)
    var_0 = model_0.canonical_order(str_1)
    tuple_1 = model_0.canonicalize(tuple_0)
    tuple_2 = (str_0, str_0, str_0)
    str_3 = model_0.canonicalize_role(str_0)
    assert str_3 == ':</\t'
    var_1 = model_0.canonical_order(str_0)
    var_2 = model_0.random_order(str_3)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_2, bool_0, tuple_2)

def test_case_16():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '$\nGfT"@<{'
    str_1 = model_0.invert_role(str_0)
    assert str_1 == '$\nGfT"@<{-of'
    str_2 = '</\t'
    bool_0 = model_0.is_role_inverted(str_2)
    assert bool_0 is False
    bool_1 = model_0.has_role(str_1)
    assert bool_1 is False
    str_3 = model_0.canonicalize_role(str_2)
    assert str_3 == ':</\t'
    var_0 = model_0.random_order(str_3)

def test_case_17():
    model_0 = module_0.Model()
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '5#~\\gW2\x0b'
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':5#~\\gW2\x0b'
    bool_0 = model_0.is_concept_dereifiable(str_0)
    assert bool_0 is False
    tuple_0 = (str_0, str_0, str_0)
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True
    bool_1 = model_0.is_role_reifiable(tuple_0)
    assert bool_1 is False
    set_0 = {str_0, var_0, str_1, str_0}
    with pytest.raises(module_2.ModelError):
        model_0.reify(tuple_0, set_0)

def test_case_18():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '</\t'
    bool_0 = model_0.is_role_inverted(str_0)
    assert bool_0 is False
    str_1 = ' cannot be dereified'
    tuple_0 = (str_1, str_1, str_0)
    tuple_1 = model_0.invert(tuple_0)
    bool_1 = model_0.has_role(str_0)
    assert bool_1 is False
    tuple_2 = (str_0, str_0, str_0)
    str_2 = model_0.canonicalize_role(str_0)
    assert str_2 == ':</\t'
    tuple_3 = model_0.deinvert(tuple_2)
    var_0 = model_0.random_order(str_2)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_2, bool_0, tuple_2)

def test_case_19():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True
    str_0 = ':a\t'
    var_1 = model_0.original_order(var_0)
    var_2 = module_1.purge()
    tuple_0 = (str_0, str_0, str_0)
    str_1 = model_0.canonicalize_role(str_0)
    assert str_1 == ':a\t'
    var_3 = model_0.random_order(str_1)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_0, var_2, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ' W=&\rPR-nB9J#+F\x0cdjhk'
    str_1 = 'gLodUARaP;XP'
    tuple_0 = (str_0, str_1, str_1)
    var_0 = module_1.purge()
    str_2 = 'VUs"ZJ=AK}e7dK!33'
    dict_0 = {var_0: var_0, tuple_0: var_0, var_0: var_0}
    module_0.Model(concept_role=str_2, roles=dict_0, reifications=var_0)

def test_case_21():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '$\nGfT"@<{'
    var_0 = model_0.original_order(none_type_0)
    var_1 = model_0.__eq__(model_0)
    assert var_1 is True
    str_1 = '/'
    var_2 = model_0.original_order(str_0)
    bool_0 = model_0.is_role_inverted(str_1)
    assert bool_0 is False
    str_2 = '\x0ctW.\rVV/~6|m|=%U'
    var_3 = model_0.original_order(none_type_0)
    bool_1 = model_0.has_role(str_2)
    assert bool_1 is False
    tuple_0 = (str_1, str_1, str_1)
    str_3 = model_0.canonicalize_role(str_1)
    assert str_3 == '/'
    var_4 = model_0.random_order(str_3)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_0, bool_0, tuple_0)

def test_case_22():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    tuple_0 = (str_0, str_0, none_type_0)
    str_1 = '$%GfT"@<{'
    tuple_1 = model_0.deinvert(tuple_0)
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True
    str_2 = model_0.canonicalize_role(str_1)
    assert str_2 == ':$%GfT"@<{'
    with pytest.raises(module_2.ModelError):
        model_0.dereify(tuple_1, tuple_1, tuple_1)

def test_case_23():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = '^+'
    str_1 = ':instance'
    bool_0 = model_0.has_role(str_1)
    assert bool_0 is True
    str_2 = 'd'
    tuple_0 = (str_0, str_2, none_type_0)
    tuple_1 = model_0.deinvert(tuple_0)
    var_0 = model_0.canonical_order(str_0)
    var_1 = model_0.__eq__(model_0)
    assert var_1 is True
    str_3 = '</\t'
    var_2 = model_0.original_order(var_1)
    bool_1 = model_0.is_role_inverted(str_3)
    assert bool_1 is False
    str_4 = '\x0ctW.\rVV/~||=%U'
    bool_2 = model_0.has_role(str_4)
    assert bool_2 is False
    str_5 = model_0.canonicalize_role(str_3)
    assert str_5 == ':</\t'
    var_3 = module_1.purge()
    str_6 = 'VY45K~)v5#0'
    str_7 = '/'
    tuple_2 = (str_6, str_7, bool_1)
    with pytest.raises(ValueError):
        model_0.dereify(str_4, tuple_2, var_3)

def test_case_24():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    str_1 = '\x0cjj<%VpW4tl2`"axbwD'
    bool_0 = model_0.is_role_inverted(str_1)
    assert bool_0 is False
    tuple_0 = (str_0, str_0, none_type_0)
    tuple_1 = model_0.deinvert(tuple_0)
    str_2 = '$\nGfT"@<{'
    tuple_2 = model_0.invert(tuple_0)
    tuple_3 = model_0.deinvert(tuple_1)
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True
    str_3 = 'c//'
    var_1 = model_0.original_order(str_2)
    bool_1 = model_0.is_role_inverted(str_3)
    assert bool_1 is False
    str_4 = '\x0ctW.\rVV/~||=%U'
    bool_2 = model_0.has_role(str_4)
    assert bool_2 is False
    str_5 = model_0.canonicalize_role(str_3)
    assert str_5 == ':c//'
    with pytest.raises(module_2.ModelError):
        model_0.dereify(tuple_1, tuple_1, tuple_3)

def test_case_25():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    str_1 = model_0.invert_role(str_0)
    assert str_1 == ':instance-of'
    tuple_0 = (str_1, str_1, none_type_0)
    tuple_1 = model_0.deinvert(tuple_0)
    str_2 = '$\nGfT"@<{'
    var_0 = model_0.canonical_order(str_1)
    var_1 = model_0.__eq__(model_0)
    assert var_1 is True
    str_3 = 'c//'
    var_2 = model_0.original_order(str_2)
    bool_0 = model_0.is_role_inverted(str_3)
    assert bool_0 is False
    str_4 = '\x0ctW.\rVV/~||=%U'
    var_3 = model_0.original_order(none_type_0)
    bool_1 = model_0.has_role(str_4)
    assert bool_1 is False
    str_5 = model_0.canonicalize_role(str_3)
    assert str_5 == ':c//'
    var_4 = module_1.purge()
    str_6 = ''
    str_7 = '/'
    tuple_2 = (str_6, str_7, bool_0)
    with pytest.raises(ValueError):
        model_0.dereify(str_4, tuple_2, var_4)

def test_case_26():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    tuple_0 = (str_0, str_0, none_type_0)
    with pytest.raises(module_2.ModelError):
        model_0.dereify(tuple_0, tuple_0, tuple_0)

def test_case_27():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    tuple_0 = (str_0, str_0, none_type_0)
    tuple_1 = model_0.canonicalize(tuple_0)
    str_1 = '$\nGfT"@<{'
    var_0 = model_0.canonical_order(str_1)
    var_1 = model_0.__eq__(model_0)
    assert var_1 is True
    str_2 = 'c/}'
    var_2 = model_0.original_order(str_1)
    bool_0 = model_0.is_role_inverted(str_2)
    assert bool_0 is False
    str_3 = '\x0ctW.\rVV/~||=%U'
    bool_1 = model_0.has_role(str_3)
    assert bool_1 is False
    str_4 = model_0.canonicalize_role(str_2)
    assert str_4 == ':c/}'
    with pytest.raises(ValueError):
        model_0.dereify(tuple_1, tuple_1, var_0)

def test_case_28():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    tuple_0 = (str_0, str_0, none_type_0)
    tuple_1 = model_0.deinvert(tuple_0)
    str_1 = '$\nGfT"@<{'
    str_2 = '487V@<[\n8>Th!Mj9h8'
    var_0 = model_0.__eq__(model_0)
    assert var_0 is True
    str_3 = 'c//'
    var_1 = model_0.original_order(str_1)
    bool_0 = model_0.is_role_inverted(str_3)
    assert bool_0 is False
    str_4 = '\x0ctW.\rVV/~||=%U'
    bool_1 = model_0.has_role(str_4)
    assert bool_1 is False
    str_5 = model_0.canonicalize_role(str_3)
    assert str_5 == ':c//'
    base_exception_0 = module_4.BaseException()
    str_6 = '/'
    tuple_2 = (str_2, str_6, bool_0)
    with pytest.raises(ValueError):
        model_0.dereify(tuple_1, tuple_2, base_exception_0)

def test_case_29():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    tuple_0 = (str_0, str_0, none_type_0)
    tuple_1 = model_0.deinvert(tuple_0)
    str_1 = '$\nGfT"@<{'
    var_0 = model_0.canonical_order(str_1)
    var_1 = model_0.__eq__(model_0)
    assert var_1 is True
    str_2 = 'c//'
    var_2 = model_0.original_order(str_1)
    bool_0 = model_0.is_role_inverted(str_2)
    assert bool_0 is False
    str_3 = '\x0ctW.\rVV/~||=%U'
    bool_1 = model_0.has_role(str_3)
    assert bool_1 is False
    str_4 = model_0.canonicalize_role(str_2)
    assert str_4 == ':c//'
    with pytest.raises(ValueError):
        model_0.dereify(tuple_1, tuple_1, var_0)

def test_case_30():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    graph_0 = module_3.Graph(epidata=none_type_0)
    dict_0 = model_0.errors(graph_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = 'e'
    str_1 = 'b$;it=,\x0bFif_c'
    bool_0 = True
    str_2 = ':s5x'
    int_0 = 3176
    dict_0 = {str_1: bool_0, str_1: bool_0, str_2: bool_0, str_1: int_0}
    model_0 = module_0.Model(normalizations=dict_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {'b$;it=,\x0bFif_c': 3176, ':s5x': True}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    var_0 = model_0.alphanumeric_order(str_0)
    set_0 = {var_0}
    none_type_0 = None
    graph_0 = module_3.Graph(none_type_0, none_type_0, metadata=none_type_0)
    var_1 = graph_0.__ior__(set_0)
    bool_1 = False
    module_1.template(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    model_0 = module_0.Model(roles=none_type_0, reifications=none_type_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_0 = ':instance'
    bool_0 = model_0.is_role_inverted(str_0)
    graph_0 = module_3.Graph(epidata=none_type_0)
    str_1 = 's5x'
    tuple_0 = (str_0, str_1, str_1)
    tuple_1 = model_0.invert(tuple_0)
    tuple_2 = model_0.canonicalize(tuple_0)
    model_1 = module_0.Model(bool_0)
    assert model_1.top_role == ':TOP'
    dict_0 = model_0.errors(graph_0)
    tuple_3 = (str_0, str_0, none_type_0)
    tuple_4 = model_0.canonicalize(tuple_3)
    str_2 = '2W-\n'
    var_0 = model_1.__eq__(model_0)
    assert var_0 is False
    bool_1 = model_0.has_role(str_2)
    assert bool_1 is False
    var_1 = model_0.__eq__(model_0)
    assert var_1 is True
    var_2 = model_0.alphanumeric_order(str_0)
    var_0.random_order(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = '\n`Jyh*J'
    var_0 = module_1.finditer(str_0, str_0)
    model_0 = module_0.Model(roles=var_0, reifications=var_0)
    assert f'{type(model_0).__module__}.{type(model_0).__qualname__}' == 'penman.model.Model'
    assert model_0.top_variable == 'top'
    assert model_0.top_role == ':TOP'
    assert model_0.concept_role == ':instance'
    assert model_0.roles == {}
    assert model_0.normalizations == {}
    assert model_0.reifications == {}
    assert model_0.dereifications == {}
    assert f'{type(module_0.Model.from_dict).__module__}.{type(module_0.Model.from_dict).__qualname__}' == 'builtins.method'
    str_1 = 'B~i(HyM'
    var_0.has_role(str_1)