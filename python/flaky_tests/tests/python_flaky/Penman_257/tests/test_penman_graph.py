# Automatically generated by Pynguin.
import pytest
import penman.graph as module_0
import collections as module_1

def test_case_0():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    str_0 = 'top'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('t', ':o', 'p')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_0.reentrancies()

def test_case_2():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__eq__(graph_0)
    assert var_0 is True

def test_case_3():
    none_type_0 = None
    graph_0 = module_0.Graph(epidata=none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__eq__(none_type_0)
    list_0 = graph_0.attributes()

def test_case_4():
    none_type_0 = None
    graph_0 = module_0.Graph(epidata=none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__or__(none_type_0)
    list_0 = graph_0.attributes()

@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    graph_0 = module_0.Graph(metadata=dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__sub__(dict_0)
    var_0.__or__(dict_0)

def test_case_6():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_0 = graph_0.__sub__(graph_0)
    assert f'{type(dict_0).__module__}.{type(dict_0).__qualname__}' == 'penman.graph.Graph'
    assert dict_0.triples == []
    assert dict_0.epidata == {}
    assert dict_0.metadata == {}

def test_case_7():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_0 = graph_0.reentrancies()

def test_case_8():
    str_0 = ''
    graph_0 = module_0.Graph(top=str_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_0 = graph_0.reentrancies()

def test_case_9():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.attributes()

def test_case_10():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.instances()

def test_case_11():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.__repr__()

def test_case_12():
    none_type_0 = None
    graph_0 = module_0.Graph(epidata=none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__ior__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == []
    assert var_0.epidata == {}
    assert var_0.metadata == {}
    var_1 = graph_0.__str__()
    assert var_1 == 'Graph(\n  [],\n  epidata={})'

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 10
    module_0.Graph(metadata=int_0)

def test_case_14():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__or__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == []
    assert var_0.epidata == {}
    assert var_0.metadata == {}

def test_case_15():
    none_type_0 = None
    graph_0 = module_0.Graph(epidata=none_type_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__isub__(none_type_0)
    list_0 = graph_0.attributes()

def test_case_16():
    str_0 = 'H0?>FKGi1F!^ZT"'
    graph_0 = module_0.Graph(top=str_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.edges()

def test_case_17():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.edges(target=graph_0)

def test_case_18():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_0 = graph_0.reentrancies()
    graph_1 = graph_0.__ior__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'N?'
    module_0.Graph(top=str_0, epidata=str_0)

def test_case_20():
    bool_0 = True
    str_0 = '?>,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__ior__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == [('?', ':>', ',')]
    assert var_0.epidata == {}
    assert var_0.metadata == {}
    list_0 = graph_0.edges(target=str_0)
    var_1 = var_0.__sub__(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'penman.graph.Graph'
    assert var_1.triples == []
    assert var_1.epidata == {}
    assert var_1.metadata == {}
    var_2 = var_0.__ior__(graph_0)
    assert var_2.triples == [('?', ':>', ',')]
    var_3 = var_2.__eq__(var_0)
    assert var_3 is True
    var_4 = var_1.__or__(graph_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'penman.graph.Graph'
    assert var_4.triples == [('?', ':>', ',')]
    assert var_4.epidata == {}
    assert var_4.metadata == {}
    var_5 = var_1.__eq__(var_2)
    assert var_5 is False

@pytest.mark.xfail(strict=True)
def test_case_21():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__sub__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == []
    assert var_0.epidata == {}
    assert var_0.metadata == {}
    list_0 = var_0.edges(var_0, var_0, var_0)
    dict_0 = var_0.reentrancies()
    str_0 = 'x\rK'
    list_1 = graph_0.attributes(role=str_0, target=str_0)
    var_1 = var_0.__or__(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'penman.graph.Graph'
    assert var_1.triples == []
    assert var_1.epidata == {}
    assert var_1.metadata == {}
    var_2 = var_1.__repr__()
    list_2 = graph_0.instances()
    var_3 = graph_0.__ior__(str_0)
    var_4 = graph_0.__sub__(var_0)
    var_5 = graph_0.__eq__(graph_0)
    assert var_5 is True
    var_6 = var_5.__repr__()
    assert var_6 == 'True'
    module_0.Attribute()

def test_case_22():
    bool_0 = True
    str_0 = '?>,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_1 = graph_0.reentrancies()

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    str_0 = 'top'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('t', ':o', 'p')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.instances()
    dict_0.reentrancies()

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    str_0 = '?>,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.edges(target=graph_0)
    var_0.__sub__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = True
    str_0 = 'top'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('t', ':o', 'p')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.edges(str_0, str_0)
    dict_0.__sub__(bool_0)

def test_case_26():
    bool_0 = True
    str_0 = 'top'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('t', ':o', 'p')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_1 = graph_0.__isub__(graph_0)
    assert graph_0.triples == []
    assert f'{type(dict_1).__module__}.{type(dict_1).__qualname__}' == 'penman.graph.Graph'
    assert dict_1.triples == []
    assert dict_1.epidata == {}
    assert dict_1.metadata == {}

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    str_0 = '?>,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.instances()
    list_1 = graph_0.edges(target=graph_0)
    dict_1 = graph_0.reentrancies()
    list_2 = graph_0.instances()
    set_0 = graph_0.variables()
    dict_2 = graph_0.reentrancies()
    var_0 = graph_0.__str__()
    assert var_0 == "Graph(\n  [('?', ':>', ',')],\n  epidata={})"
    var_1 = graph_0.__ior__(bool_0)
    var_2 = var_0.__repr__()
    assert var_2 == '"Graph(\\n  [(\'?\', \':>\', \',\')],\\n  epidata={})"'
    graph_1 = module_0.Graph(top=var_0)
    assert f'{type(graph_1).__module__}.{type(graph_1).__qualname__}' == 'penman.graph.Graph'
    assert graph_1.triples == []
    assert graph_1.epidata == {}
    assert graph_1.metadata == {}
    var_3 = graph_0.__repr__()
    var_4 = var_2.__eq__(dict_1)
    var_5 = graph_0.__isub__(graph_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'penman.graph.Graph'
    assert var_5.triples == [('?', ':>', ',')]
    assert var_5.epidata == {}
    assert var_5.metadata == {}
    var_6 = var_5.__or__(str_0)
    var_2.variables()

def test_case_28():
    bool_0 = False
    str_0 = '?>,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.attributes()

@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    str_0 = '?>?'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', '?')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.attributes(str_0, target=bool_0)
    var_0 = graph_0.__ior__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == [('?', ':>', '?')]
    assert var_0.epidata == {}
    assert var_0.metadata == {}
    list_1 = var_0.instances()
    list_2 = graph_0.edges(target=str_0)
    list_3 = var_0.attributes()
    var_1 = var_0.__sub__(list_1)
    var_2 = var_0.__sub__(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'penman.graph.Graph'
    assert var_2.triples == []
    assert var_2.epidata == {}
    assert var_2.metadata == {}
    list_4 = graph_0.edges(target=var_2)
    var_3 = var_0.__ior__(graph_0)
    assert var_3.triples == [('?', ':>', '?')]
    list_5 = var_2.instances()
    var_4 = var_3.__eq__(var_0)
    assert var_4 is True
    var_5 = var_2.__or__(graph_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'penman.graph.Graph'
    assert var_5.triples == [('?', ':>', '?')]
    assert var_5.epidata == {}
    assert var_5.metadata == {}
    dict_1 = graph_0.reentrancies()
    dict_2 = var_0.reentrancies()
    var_6 = var_2.__eq__(var_3)
    assert var_6 is False
    var_7 = var_5.__sub__(var_3)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'penman.graph.Graph'
    assert var_7.triples == []
    assert var_7.epidata == {}
    assert var_7.metadata == {}
    var_8 = var_5.__eq__(dict_1)
    module_0.Triple(*var_3)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    str_0 = '?:,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    list_0 = graph_0.attributes(str_0, target=bool_0)
    var_0 = graph_0.__ior__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == [('?', ':', ',')]
    assert var_0.epidata == {}
    assert var_0.metadata == {}
    list_1 = graph_0.instances()
    list_2 = graph_0.edges(target=str_0)
    list_3 = var_0.attributes(role=str_0)
    list_4 = var_0.attributes()
    var_1 = var_0.__sub__(list_1)
    var_2 = var_0.__str__()
    assert var_2 == "Graph(\n  [('?', ':', ',')],\n  epidata={})"
    var_3 = var_0.__sub__(list_4)
    module_0.Attribute()

@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = False
    str_0 = '?>,'
    dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_0 = module_0.Graph(dict_0)
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == [('?', ':>', ',')]
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    var_0 = graph_0.__ior__(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'penman.graph.Graph'
    assert var_0.triples == [('?', ':>', ',')]
    assert var_0.epidata == {}
    assert var_0.metadata == {}
    list_0 = graph_0.edges(target=str_0)
    list_1 = var_0.attributes()
    var_1 = var_0.__sub__(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'penman.graph.Graph'
    assert var_1.triples == []
    assert var_1.epidata == {}
    assert var_1.metadata == {}
    var_2 = var_0.__ior__(graph_0)
    assert var_2.triples == [('?', ':>', ',')]
    dict_1 = graph_0.reentrancies()
    str_1 = ','
    list_2 = graph_0.edges(target=str_1)
    list_3 = var_0.edges(str_1)
    var_3 = graph_0.__eq__(var_1)
    assert var_3 is False
    str_1.__sub__(list_3)

@pytest.mark.xfail(strict=True)
def test_case_32():
    graph_0 = module_0.Graph()
    assert f'{type(graph_0).__module__}.{type(graph_0).__qualname__}' == 'penman.graph.Graph'
    assert graph_0.triples == []
    assert graph_0.epidata == {}
    assert graph_0.metadata == {}
    assert module_0.CONCEPT_ROLE == ':instance'
    assert f'{type(module_0.Graph.top).__module__}.{type(module_0.Graph.top).__qualname__}' == 'builtins.property'
    dict_0 = graph_0.reentrancies()
    var_0 = graph_0.__str__()
    assert var_0 == 'Graph(\n  [],\n  epidata={})'
    var_1 = graph_0.__isub__(graph_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'penman.graph.Graph'
    assert var_1.triples == []
    assert var_1.epidata == {}
    assert var_1.metadata == {}
    var_2 = var_1.__sub__(var_0)
    set_0 = graph_0.variables()
    var_3 = graph_0.__isub__(var_2)
    bool_0 = False
    str_0 = '.aT'
    dict_1 = {str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    graph_1 = module_0.Graph(dict_1)
    assert f'{type(graph_1).__module__}.{type(graph_1).__qualname__}' == 'penman.graph.Graph'
    assert graph_1.triples == [('.', ':a', 'T')]
    assert graph_1.epidata == {}
    assert graph_1.metadata == {}
    list_0 = graph_1.attributes(str_0, target=bool_0)
    var_4 = graph_1.__ior__(graph_1)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'penman.graph.Graph'
    assert var_4.triples == [('.', ':a', 'T')]
    assert var_4.epidata == {}
    assert var_4.metadata == {}
    dict_2 = graph_1.reentrancies()
    var_5 = graph_0.__repr__()
    list_1 = var_4.attributes(role=str_0)
    list_2 = var_4.attributes()
    defaultdict_0 = module_1.defaultdict()
    var_6 = var_4.__sub__(var_4)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'penman.graph.Graph'
    assert var_6.triples == []
    assert var_6.epidata == {}
    assert var_6.metadata == {}
    var_7 = var_4.__sub__(list_2)
    var_8 = var_4.__sub__(var_4)
    assert var_8.triples == []
    list_3 = graph_1.edges(target=var_8)
    var_9 = var_4.__ior__(graph_1)
    assert var_9.triples == [('.', ':a', 'T')]
    list_4 = var_8.instances()
    var_10 = var_9.__eq__(var_4)
    assert var_10 is True
    var_11 = var_8.__or__(graph_1)
    assert f'{type(var_11).__module__}.{type(var_11).__qualname__}' == 'penman.graph.Graph'
    assert var_11.triples == [('.', ':a', 'T')]
    assert var_11.epidata == {}
    assert var_11.metadata == {}
    var_12 = var_1.__isub__(set_0)
    dict_3 = graph_1.reentrancies()
    str_1 = '.'
    list_5 = var_9.edges(str_1, target=var_8)
    list_6 = var_6.instances()
    var_13 = var_2.__eq__(var_12)
    dict_4 = var_8.reentrancies()
    var_14 = var_10.__str__()
    assert var_14 == 'True'
    var_14.reentrancies()