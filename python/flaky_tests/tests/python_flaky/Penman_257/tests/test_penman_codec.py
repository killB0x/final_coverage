# Automatically generated by Pynguin.
import pytest
import penman.codec as module_0
import penman.layout as module_1

def test_case_0():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'

@pytest.mark.xfail(strict=True)
def test_case_1():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    str_0 = ''
    iterator_0 = p_e_n_m_a_n_codec_0.iterdecode(str_0)
    p_e_n_m_a_n_codec_0.decode(iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    str_0 = 'NaH\x0bk'
    iterator_0 = p_e_n_m_a_n_codec_0.iterdecode(str_0)
    p_e_n_m_a_n_codec_0.parse(iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    str_0 = '_'
    p_e_n_m_a_n_codec_0.parse_triples(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    p_e_n_m_a_n_codec_0.encode(p_e_n_m_a_n_codec_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec(none_type_0)
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    dict_0 = {p_e_n_m_a_n_codec_0: none_type_0}
    iterator_0 = p_e_n_m_a_n_codec_0.iterparse(dict_0)
    push_0 = module_1.Push(dict_0)
    var_0 = push_0.__repr__()
    iterator_1 = p_e_n_m_a_n_codec_0.iterparse(var_0)
    bool_0 = False
    p_e_n_m_a_n_codec_0.format(var_0, compact=bool_0)

def test_case_6():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    str_0 = 'NBAJ'
    iterator_0 = p_e_n_m_a_n_codec_0.iterdecode(str_0)
    str_1 = p_e_n_m_a_n_codec_0.format_triples(iterator_0)
    assert str_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_7():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    str_0 = 'NaH\x0bk'
    iterator_0 = p_e_n_m_a_n_codec_0.iterparse(str_0)
    p_e_n_m_a_n_codec_0.parse(iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    p_e_n_m_a_n_codec_1 = module_0.PENMANCodec(p_e_n_m_a_n_codec_0)
    assert f'{type(p_e_n_m_a_n_codec_1.model).__module__}.{type(p_e_n_m_a_n_codec_1.model).__qualname__}' == 'penman.codec.PENMANCodec'
    str_0 = ''
    iterator_0 = p_e_n_m_a_n_codec_1.iterdecode(str_0)
    iterator_1 = p_e_n_m_a_n_codec_1.iterdecode(str_0)
    str_1 = 'l'
    p_e_n_m_a_n_codec_1.parse(str_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    p_e_n_m_a_n_codec_0 = module_0.PENMANCodec()
    assert f'{type(p_e_n_m_a_n_codec_0.model).__module__}.{type(p_e_n_m_a_n_codec_0.model).__qualname__}' == 'penman.model.Model'
    str_0 = '(.*\\D)(\\d+)$'
    iterator_0 = p_e_n_m_a_n_codec_0.iterdecode(str_0)
    p_e_n_m_a_n_codec_0.parse(iterator_0)