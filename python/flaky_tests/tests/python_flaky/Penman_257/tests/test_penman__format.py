# Automatically generated by Pynguin.
import pytest
import penman._format as module_0
import penman.tree as module_1

def test_case_0():
    str_0 = '\n'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    str_1 = module_0.format(tuple_1, compact=list_0)
    assert str_1 == '(\n :\n \n\n   :\n \n\n   :\n \n\n   :\n \n\n   :\n \n)'

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -2403.9
    set_0 = {float_0}
    module_0.format(set_0)

def test_case_2():
    str_0 = 'ikM!q>d+D4'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_1.Tree(tuple_1)
    str_1 = module_0.format(tree_0)
    assert str_1 == '(ikM!q>d+D4 :ikM!q>d+D4 ikM!q>d+D4)'

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_0.format_triples(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'B\nG_Q?wgh'
    list_0 = []
    tuple_0 = (str_0, list_0)
    bool_0 = False
    tree_0 = module_1.Tree(tuple_0, bool_0)
    str_1 = module_0.format(tree_0)
    assert str_1 == '(B\nG_Q?wgh)'
    bool_1 = True
    bool_2 = False
    module_0.format_triples(bool_1, bool_2)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ': V:}xGMeL'
    bool_0 = True
    module_0.format_triples(str_0, bool_0)

def test_case_6():
    str_0 = 'VX'
    list_0 = []
    tuple_0 = (str_0, list_0)
    tree_0 = module_1.Tree(tuple_0)
    str_1 = module_0.format_triples(list_0)

def test_case_7():
    str_0 = ''
    list_0 = []
    tuple_0 = (str_0, list_0)
    tree_0 = module_1.Tree(tuple_0)
    bool_0 = True
    str_1 = module_0.format(tree_0, compact=bool_0)
    assert str_1 == '()'
    list_1 = []
    tuple_1 = (str_0, list_1)
    str_2 = module_0.format(tuple_1)
    assert str_2 == '()'

def test_case_8():
    pass

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'B\nG_Q?wgh'
    list_0 = []
    tuple_0 = (str_0, list_0)
    bool_0 = False
    tree_0 = module_1.Tree(tuple_0, bool_0)
    str_1 = module_0.format(tree_0)
    assert str_1 == '(B\nG_Q?wgh)'
    float_0 = -2744.699
    list_1 = [float_0, float_0]
    module_0.format_triples(list_1, list_1)

def test_case_10():
    str_0 = 'M2:dtuWFg-'
    str_1 = '"w[?)5EO3J5qg'
    tuple_0 = (str_1, str_1)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_1.Tree(tuple_1)
    str_2 = module_0.format(tree_0, compact=tuple_0)
    assert str_2 == '(M2:dtuWFg- :"w[?)5EO3J5qg "w[?)5EO3J5qg :"w[?)5EO3J5qg "w[?)5EO3J5qg :"w[?)5EO3J5qg "w[?)5EO3J5qg :"w[?)5EO3J5qg "w[?)5EO3J5qg)'

def test_case_11():
    str_0 = 'ikM!q>d+D4'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0]
    tuple_1 = (str_0, list_0)
    tree_0 = module_1.Tree(tuple_1)
    bool_0 = False
    str_1 = module_0.format(tree_0, bool_0)
    assert str_1 == '(ikM!q>d+D4 :ikM!q>d+D4 ikM!q>d+D4)'

def test_case_12():
    str_0 = '};&WZ>}['
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_1.Tree(tuple_1, none_type_0)
    str_1 = module_0.format(tuple_1, none_type_0, tuple_1)
    assert str_1 == '(};&WZ>}[ :};&WZ>}[ };&WZ>}[ :};&WZ>}[ };&WZ>}[)'

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '\r7hZ'
    str_1 = '%?wt9Z|9Jj5KOLe'
    str_2 = "v&S/xkI/6)VewT'S]gx"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_2, list_0)
    tree_0 = module_1.Tree(tuple_1)
    str_3 = module_0.format(tree_0, compact=bool_0)
    assert str_3 == "(v&S/xkI/6)VewT'S]gx :\r7hZ\n                     :\r7hZ\n                     :\r7hZ\n                     :\r7hZ)"
    tuple_2 = (str_1, str_3)
    tuple_3 = (str_1, str_0)
    list_1 = [tuple_2, tuple_2, tuple_3]
    module_0.format_triples(list_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '\r7h'
    str_1 = '%?wt9Z|9Jj5KOLe'
    str_2 = 'N -vh"NQV\x0b?'
    str_3 = 'Xv:JL@KMQq'
    tuple_0 = (str_3, str_1)
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_2, list_0)
    none_type_0 = None
    tree_0 = module_1.Tree(tuple_1, none_type_0)
    str_4 = module_0.format(tree_0)
    assert str_4 == '(N -vh"NQV\x0b? :Xv:JL@KMQq %?wt9Z|9Jj5KOLe\n             :Xv:JL@KMQq %?wt9Z|9Jj5KOLe\n             :Xv:JL@KMQq %?wt9Z|9Jj5KOLe)'
    list_1 = [tuple_1, tuple_1, tuple_1, tuple_1]
    tuple_2 = (str_0, list_1)
    tree_1 = module_1.Tree(tuple_2)
    module_0.format(tree_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tree_0 = module_1.Tree(bool_0, dict_0)
    module_0.format(tree_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '/v'
    str_1 = '+C\'nM\r,8o"0\r?F!VXQ`g'
    tuple_0 = (str_1, str_1)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    dict_0 = {str_1: str_0}
    tree_0 = module_1.Tree(tuple_1, dict_0)
    module_0.format(tree_0, tree_0)

def test_case_17():
    str_0 = ':'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    str_1 = module_0.format(tuple_1, compact=list_0)
    assert str_1 == '(: : :\n   : :\n   : :\n   : :)'

def test_case_18():
    str_0 = '\'XP|z0.d"'
    str_1 = '>GL?OatjI<7u\\y'
    tuple_0 = (str_1, str_1)
    tuple_1 = (str_0, str_1)
    str_2 = 'The target variable.'
    tuple_2 = (str_2, str_0)
    list_0 = [tuple_0, tuple_1, tuple_2, tuple_0]
    tuple_3 = (str_0, list_0)
    none_type_0 = None
    tree_0 = module_1.Tree(tuple_3, none_type_0)
    str_3 = module_0.format(tree_0, compact=tuple_2)
    assert str_3 == '(\'XP|z0.d" :>GL?OatjI<7u\\y >GL?OatjI<7u\\y :\'XP|z0.d" >GL?OatjI<7u\\y\n           :The target variable. \'XP|z0.d"\n           :>GL?OatjI<7u\\y >GL?OatjI<7u\\y)'

def test_case_19():
    str_0 = '/'
    tuple_0 = (str_0, str_0)
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (str_0, list_0)
    str_1 = module_0.format(tuple_1, compact=str_0)
    assert str_1 == '(/ / /\n   / /)'