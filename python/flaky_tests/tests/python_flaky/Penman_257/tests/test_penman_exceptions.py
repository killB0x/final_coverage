# Automatically generated by Pynguin.
import pytest
import penman.exceptions as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '~{}{}'
    decode_error_0 = module_0.DecodeError(str_0)
    assert f'{type(decode_error_0).__module__}.{type(decode_error_0).__qualname__}' == 'penman.exceptions.DecodeError'
    assert decode_error_0.message == '~{}{}'
    assert decode_error_0.filename is None
    assert decode_error_0.lineno is None
    assert decode_error_0.offset is None
    assert decode_error_0.text is None
    var_0 = decode_error_0.__str__()
    assert var_0 == 'DecodeError: ~{}{}'
    var_1 = var_0.__str__()
    assert var_1 == 'DecodeError: ~{}{}'
    bool_0 = True
    decode_error_1 = module_0.DecodeError(str_0, lineno=bool_0)
    var_2 = decode_error_1.__str__()
    assert var_2 == '\n  line True, character None\nDecodeError: ~{}{}'
    str_1 = 'M;bs+*^%YDi[p/K|'
    dict_0 = {str_1: str_1}
    module_0.ModelError(**dict_0)

def test_case_1():
    surface_error_0 = module_0.SurfaceError()
    tuple_0 = (surface_error_0,)
    bool_0 = False
    decode_error_0 = module_0.DecodeError(filename=tuple_0, offset=bool_0)
    assert f'{type(decode_error_0).__module__}.{type(decode_error_0).__qualname__}' == 'penman.exceptions.DecodeError'
    assert decode_error_0.message is None
    assert f'{type(decode_error_0.filename).__module__}.{type(decode_error_0.filename).__qualname__}' == 'builtins.tuple'
    assert len(decode_error_0.filename) == 1
    assert decode_error_0.lineno is None
    assert decode_error_0.offset is False
    assert decode_error_0.text is None
    none_type_0 = None
    decode_error_1 = module_0.DecodeError(lineno=none_type_0)
    var_0 = decode_error_1.__str__()
    assert var_0 == ''

def test_case_2():
    surface_error_0 = module_0.SurfaceError()
    tuple_0 = (surface_error_0,)
    bool_0 = False
    decode_error_0 = module_0.DecodeError(filename=tuple_0, offset=bool_0)
    assert f'{type(decode_error_0).__module__}.{type(decode_error_0).__qualname__}' == 'penman.exceptions.DecodeError'
    assert decode_error_0.message is None
    assert f'{type(decode_error_0.filename).__module__}.{type(decode_error_0.filename).__qualname__}' == 'builtins.tuple'
    assert len(decode_error_0.filename) == 1
    assert decode_error_0.lineno is None
    assert decode_error_0.offset is False
    assert decode_error_0.text is None
    none_type_0 = None
    decode_error_1 = module_0.DecodeError(text=none_type_0)
    var_0 = decode_error_0.__str__()
    assert var_0 == '\n  File "(SurfaceError(),)", character False'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'do'
    int_0 = 1
    str_1 = 'unreachable'
    decode_error_0 = module_0.DecodeError(filename=str_0, lineno=int_0, text=str_1)
    assert f'{type(decode_error_0).__module__}.{type(decode_error_0).__qualname__}' == 'penman.exceptions.DecodeError'
    assert decode_error_0.message is None
    assert decode_error_0.filename == 'do'
    assert decode_error_0.lineno == 1
    assert decode_error_0.offset is None
    assert decode_error_0.text == 'unreachable'
    var_0 = decode_error_0.__str__()
    assert var_0 == '\n  File "do", line 1\n    unreachable'
    var_1 = var_0.__str__()
    assert var_1 == '\n  File "do", line 1\n    unreachable'
    var_2 = var_1.__str__()
    assert var_2 == '\n  File "do", line 1\n    unreachable'
    list_0 = [str_0, str_0, str_0, str_0]
    layout_error_0 = module_0.LayoutError(*list_0)
    dict_0 = {str_0: str_0, str_0: list_0}
    module_0.ConstantError(*list_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '0w<%6GqH#_*we'
    none_type_0 = None
    list_0 = [none_type_0]
    base_exception_0 = module_1.BaseException(*list_0)
    dict_0 = {str_0: base_exception_0}
    module_0.ConstantError(**dict_0)

def test_case_5():
    int_0 = -2927
    decode_error_0 = module_0.DecodeError(lineno=int_0)
    assert f'{type(decode_error_0).__module__}.{type(decode_error_0).__qualname__}' == 'penman.exceptions.DecodeError'
    assert decode_error_0.message is None
    assert decode_error_0.filename is None
    assert decode_error_0.lineno == -2927
    assert decode_error_0.offset is None
    assert decode_error_0.text is None
    none_type_0 = None
    list_0 = [none_type_0]
    penman_error_0 = module_0.PenmanError(*list_0)
    decode_error_1 = module_0.DecodeError(offset=none_type_0, text=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    decode_error_0 = module_0.DecodeError(lineno=none_type_0, offset=none_type_0)
    assert f'{type(decode_error_0).__module__}.{type(decode_error_0).__qualname__}' == 'penman.exceptions.DecodeError'
    assert decode_error_0.message is None
    assert decode_error_0.filename is None
    assert decode_error_0.lineno is None
    assert decode_error_0.offset is None
    assert decode_error_0.text is None
    var_0 = decode_error_0.__str__()
    assert var_0 == ''
    var_1 = decode_error_0.__str__()
    assert var_1 == ''
    decode_error_1 = module_0.DecodeError(var_0)
    assert decode_error_1.message == ''
    var_2 = decode_error_0.__str__()
    assert var_2 == ''
    decode_error_2 = module_0.DecodeError()
    var_3 = var_0.__str__()
    assert var_3 == ''
    var_4 = var_3.__str__()
    assert var_4 == ''
    var_5 = decode_error_2.__str__()
    assert var_5 == ''
    var_6 = var_2.__str__()
    assert var_6 == ''
    penman_error_0 = module_0.PenmanError()
    var_7 = var_5.__str__()
    assert var_7 == ''
    constant_error_0 = module_0.ConstantError()
    decode_error_3 = module_0.DecodeError(lineno=var_1, text=var_7)
    assert decode_error_3.lineno == ''
    assert decode_error_3.text == ''
    var_8 = decode_error_3.__str__()
    assert var_8 == '\n  line \n    '
    var_9 = var_8.__str__()
    assert var_9 == '\n  line \n    '
    decode_error_4 = module_0.DecodeError(offset=decode_error_2)
    var_10 = var_9.__str__()
    assert var_10 == '\n  line \n    '
    var_11 = var_0.__str__()
    assert var_11 == ''
    decode_error_5 = module_0.DecodeError(offset=var_7, text=var_3)
    assert decode_error_5.offset == ''
    assert decode_error_5.text == ''
    decode_error_5.__str__()