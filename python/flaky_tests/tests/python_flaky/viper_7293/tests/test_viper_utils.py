# Automatically generated by Pynguin.
import pytest
import viper.utils as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'w6;HAhyUT\t2o3$5'
    dict_0 = {str_0: str_0}
    none_type_0 = None
    var_0 = module_0.required(dict_0, none_type_0, str_0, parser=none_type_0, default=str_0)
    assert var_0 == 'w6;HAhyUT\t2o3$5'
    module_0.required(dict_0, var_0, var_0)

def test_case_1():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.required(dict_0, bool_0, dict_0, default=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    dict_1 = module_0.flatten_dict(dict_0)
    module_0.required(dict_0, dict_1, dict_0)

def test_case_3():
    str_0 = '\x0cJCwUDt`){|!\n'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = module_0.flatten_dict(dict_0)

def test_case_4():
    dict_0 = {}
    dict_1 = module_0.flatten_dict(dict_0)

def test_case_5():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0, object_0: object_0}
    with pytest.raises(ValueError):
        module_0.unflatten_dict(dict_0)

def test_case_6():
    str_0 = 'uRif\nuOV+r;N1Mf6:NgZ'
    dict_0 = {str_0: str_0}
    dict_1 = module_0.unflatten_dict(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'vR'
    dict_0 = {}
    module_0.required(dict_0, str_0, str_0, default_factory=str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -3862
    dict_0 = {int_0: int_0}
    module_0.flatten_dict(dict_0)

def test_case_9():
    str_0 = 'HR'
    dict_0 = {}
    with pytest.raises(ValueError):
        module_0.required(dict_0, str_0, str_0)

def test_case_10():
    str_0 = '\x0cJCwUDt`){|!\n'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = module_0.unflatten_dict(dict_0)
    dict_2 = module_0.flatten_dict(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'HR:'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = 'vR'
    dict_1 = {str_1: str_0, str_0: dict_0}
    dict_2 = module_0.unflatten_dict(dict_0)
    dict_3 = module_0.unflatten_dict(dict_1)
    dict_4 = module_0.unflatten_dict(dict_2)
    dict_5 = module_0.flatten_dict(dict_1)
    none_type_0 = None
    dict_6 = module_0.flatten_dict(dict_0)
    var_0 = module_0.required(dict_4, str_0, dict_4, default=str_0, default_factory=none_type_0)
    assert var_0 == 'HR:'
    module_0.required(dict_0, var_0, dict_2, parser=var_0)

def test_case_12():
    str_0 = 'uRif\nuOV+r;N1Mf6:NgZ'
    dict_0 = {str_0: str_0}
    dict_1 = module_0.unflatten_dict(dict_0)
    dict_2 = module_0.flatten_dict(dict_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'HR:'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = module_0.unflatten_dict(dict_0)
    str_1 = 'HR'
    dict_2 = {str_1: str_0, str_0: dict_0}
    dict_3 = module_0.unflatten_dict(dict_2)
    dict_4 = module_0.flatten_dict(dict_2)
    none_type_0 = None
    dict_5 = module_0.flatten_dict(dict_0)
    var_0 = module_0.required(dict_3, str_0, dict_3, default=str_0, default_factory=none_type_0)
    assert var_0 == 'HR:'
    dict_6 = {}
    module_0.required(dict_0, var_0, dict_6)

def test_case_14():
    str_0 = 'HR:'
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    with pytest.raises(ValueError):
        module_0.required(dict_0, str_0, tuple_0)