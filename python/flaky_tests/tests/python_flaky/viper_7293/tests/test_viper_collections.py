# Automatically generated by Pynguin.
import pytest
import viper.collections as module_0
import viper.const as module_1
import dataclasses as module_2

def test_case_0():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    with pytest.raises(ValueError):
        results_0.pipe(results_0)

def test_case_1():
    item_0 = module_0.Item()
    assert f'{type(module_0.Item.from_dict).__module__}.{type(module_0.Item.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Item.from_json).__module__}.{type(module_0.Item.from_json).__qualname__}' == 'builtins.method'
    str_0 = 'RMtf2GRPb6'
    with pytest.raises(KeyError):
        item_0.__getitem__(str_0)

def test_case_2():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    var_0 = results_0.head()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0

def test_case_3():
    items_0 = module_0.Items()
    assert f'{type(module_0.Items.from_items).__module__}.{type(module_0.Items.from_items).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Items.from_list).__module__}.{type(module_0.Items.from_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Items.from_json).__module__}.{type(module_0.Items.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Items.from_file).__module__}.{type(module_0.Items.from_file).__qualname__}' == 'builtins.method'
    str_0 = items_0.__str__()
    assert str_0 == '[]'

def test_case_4():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    str_0 = 'UGht'
    str_1 = results_0.format(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '-\x0bMk}SM'
    none_type_0 = None
    result_0 = module_0.Result(str_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, str_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(module_0.Result.by_id).__module__}.{type(module_0.Result.by_id).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Result.from_dict).__module__}.{type(module_0.Result.from_dict).__qualname__}' == 'builtins.method'
    result_0.save()

def test_case_6():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    results_1 = results_0.final()
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

def test_case_7():
    items_0 = module_0.Items()
    assert f'{type(module_0.Items.from_items).__module__}.{type(module_0.Items.from_items).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Items.from_list).__module__}.{type(module_0.Items.from_list).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Items.from_json).__module__}.{type(module_0.Items.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Items.from_file).__module__}.{type(module_0.Items.from_file).__qualname__}' == 'builtins.method'

def test_case_8():
    var_0 = module_0.meta()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(var_0) == 0

def test_case_9():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    int_0 = 482
    int_1 = results_0.hash()
    assert int_1 == -1889199547336582292
    results_1 = results_0.re_run(int_0)
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0
    results_2 = results_1.re_run()
    assert f'{type(results_2).__module__}.{type(results_2).__qualname__}' == 'viper.collections.Results'
    assert len(results_2) == 0

def test_case_10():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    int_0 = results_0.__len__()
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    results_1 = hosts_0.results()
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

def test_case_11():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    int_0 = results_0.count()
    none_type_0 = None
    var_0 = results_0.where(none_type_0, none_type_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0
    results_1 = results_0.re_run()
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_12():
    runners_0 = module_0.Runners()
    host_0 = module_0.Host(runners_0, runners_0, identity_file=runners_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert f'{type(host_0.ip).__module__}.{type(host_0.ip).__qualname__}' == 'viper.collections.Runners'
    assert len(host_0.ip) == 0
    assert f'{type(host_0.hostname).__module__}.{type(host_0.hostname).__qualname__}' == 'viper.collections.Runners'
    assert len(host_0.hostname) == 0
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert f'{type(host_0.identity_file).__module__}.{type(host_0.identity_file).__qualname__}' == 'viper.collections.Runners'
    assert len(host_0.identity_file) == 0
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    var_0 = runners_0.sort()
    host_0.run_task(var_0)

def test_case_13():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    str_0 = '!f}O((Qf%T'
    with pytest.raises(ValueError):
        results_0.to_file(str_0)

def test_case_14():
    runners_0 = module_0.Runners()
    var_0 = runners_0.tail()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Runners'
    assert len(var_0) == 0

def test_case_15():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    sequence_0 = results_0.to_items()
    runners_0 = hosts_0.task(results_0)
    assert len(runners_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_16():
    collection_0 = module_0.Collection()
    assert f'{type(module_0.Collection.from_json).__module__}.{type(module_0.Collection.from_json).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Collection.from_func).__module__}.{type(module_0.Collection.from_func).__qualname__}' == 'builtins.method'
    collection_0.pipe(collection_0)

def test_case_17():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    var_0 = results_0.order_by()
    results_1 = hosts_0.run_task(var_0)
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

def test_case_18():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    results_1 = results_0.re_run()
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '\n                INSERT INTO results (\n                    hash, trigger_time, task, host, args, command,\n                    stdout, stderr, returncode, start, end, retry\n                ) VALUES (\n                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n                )\n                '
    host_0 = module_0.Host(str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == '\n                INSERT INTO results (\n                    hash, trigger_time, task, host, args, command,\n                    stdout, stderr, returncode, start, end, retry\n                ) VALUES (\n                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n                )\n                '
    assert host_0.hostname is None
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    str_1 = host_0.format(str_0)
    var_0 = str_1.__ge__(host_0)
    host_0.run_task(str_0)

def test_case_20():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0

def test_case_21():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    sequence_0 = hosts_0.all()
    results_1 = hosts_0.run_task(hosts_0)
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

def test_case_22():
    config_0 = module_1.Config.max_workers
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    var_0 = results_0.where(config_0, config_0, config_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_23():
    item_0 = module_0.Item()
    assert f'{type(module_0.Item.from_dict).__module__}.{type(module_0.Item.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Item.from_json).__module__}.{type(module_0.Item.from_json).__qualname__}' == 'builtins.method'
    item_0.pipe(item_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    str_0 = 'Fetch and return all the results from history.\n\n        :rtype: ciper.collections.Results\n        '
    results_1 = module_0.Results(str_0)
    results_2 = results_0.final()
    assert f'{type(results_2).__module__}.{type(results_2).__qualname__}' == 'viper.collections.Results'
    assert len(results_2) == 0
    results_1.final()

def test_case_25():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    with pytest.raises(ValueError):
        results_0.filter(results_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    var_0 = module_0.meta()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(var_0) == 0
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.__repr__()
    var_3 = var_0.__lt__(var_1)
    var_0.__getitem__(var_1)

def test_case_27():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    var_0 = results_0.range()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0
    var_1 = module_0.meta()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(var_1) == 0
    with pytest.raises(ValueError):
        results_0.pipe(var_1)

def test_case_28():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    runners_0 = hosts_0.task(results_0)
    assert len(runners_0) == 0

def test_case_29():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    int_0 = 1265
    results_1 = results_0.re_run(int_0)
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

def test_case_30():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    results_1 = hosts_0.results()
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

def test_case_31():
    str_0 = 'Fetch and return all the results from history.\n\n        :rtype: ciper.collections.Results\n        '
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    with pytest.raises(ValueError):
        results_0.to_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = ''
    host_0 = module_0.Host(str_0, domain=str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == ''
    assert host_0.hostname is None
    assert host_0.domain == ''
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    var_0 = host_0.__hash__()
    assert var_0 == 0
    host_0.run_task(var_0)

def test_case_33():
    runners_0 = module_0.Runners()
    var_0 = runners_0.hosts()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = 'Zw>P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_not
    var_0 = results_0.where(str_0, where_conditions_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0
    results_0.re_run()

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = 'Zw>P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_not
    host_0 = module_0.Host(where_conditions_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == module_0.WhereConditions.is_not
    assert host_0.hostname is None
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    var_0 = host_0.__eq__(where_conditions_0)
    assert var_0 is False
    host_0.run_task(var_0)

def test_case_36():
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    results_1 = hosts_0.run_task(hosts_0)
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = 'Zw\t_P= ]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    results_1 = module_0.Results()
    results_2 = module_0.Results()
    results_3 = results_1.final()
    assert f'{type(results_3).__module__}.{type(results_3).__qualname__}' == 'viper.collections.Results'
    assert len(results_3) == 0
    str_1 = results_0.__str__()
    assert str_1 == '[]'
    results_0.hosts()

def test_case_38():
    str_0 = 'ZwP>H]'
    host_0 = module_0.Host(str_0, str_0, str_0, login_name=str_0, identity_file=str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == 'ZwP>H]'
    assert host_0.hostname == 'ZwP>H]'
    assert host_0.domain == 'ZwP>H]'
    assert host_0.port == 22
    assert host_0.login_name == 'ZwP>H]'
    assert host_0.identity_file == 'ZwP>H]'
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    str_1 = host_0.fqdn()
    assert str_1 == 'ZwP>H].ZwP>H]'
    result_0 = host_0.__ge__(str_0)

def test_case_39():
    str_0 = '?HG40mmbF\x0c&)>DWl{'
    host_0 = module_0.Host(str_0, str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == '?HG40mmbF\x0c&)>DWl{'
    assert host_0.hostname == '?HG40mmbF\x0c&)>DWl{'
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    with pytest.raises(AttributeError):
        host_0.fqdn()

@pytest.mark.xfail(strict=True)
def test_case_40():
    runners_0 = module_0.Runners()
    str_0 = "ufx1-:'A#"
    hosts_0 = runners_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    results_0 = hosts_0.results()
    assert f'{type(results_0).__module__}.{type(results_0).__qualname__}' == 'viper.collections.Results'
    assert len(results_0) == 0
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_1 = module_0.Hosts(str_0)
    hosts_1.results()

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = '.x'
    host_0 = module_0.Host(str_0, meta=str_0)
    assert host_0.port == 22
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    host_0.run_task(str_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = 'vT<dq;x<-#5&>IOF]%'
    host_0 = module_0.Host(str_0, str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == 'vT<dq;x<-#5&>IOF]%'
    assert host_0.hostname == 'vT<dq;x<-#5&>IOF]%'
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    var_0 = host_0.__eq__(host_0)
    assert var_0 is True
    host_0.run_task(host_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = ';uvk6ovR'
    host_0 = module_0.Host(str_0, port=str_0, login_name=str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == ';uvk6ovR'
    assert host_0.hostname is None
    assert host_0.domain is None
    assert host_0.port == ';uvk6ovR'
    assert host_0.login_name == ';uvk6ovR'
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    var_0 = host_0.to_dict()
    host_0.run_task(var_0)

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = 's\t\\(4QBz8_+v\r{2Fvt_'
    host_0 = module_0.Host(str_0, str_0, identity_file=str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == 's\t\\(4QBz8_+v\r{2Fvt_'
    assert host_0.hostname == 's\t\\(4QBz8_+v\r{2Fvt_'
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file == 's\t\\(4QBz8_+v\r{2Fvt_'
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    bool_0 = True
    str_1 = host_0.to_json(flatten=bool_0)
    assert str_1 == '{"ip": "s\\t\\\\(4QBz8_+v\\r{2Fvt_", "hostname": "s\\t\\\\(4QBz8_+v\\r{2Fvt_", "domain": null, "port": 22, "login_name": null, "identity_file": "s\\t\\\\(4QBz8_+v\\r{2Fvt_"}'
    host_0.run_task(host_0)

@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = '2A[PK+@?Y}HHsF*f%zx'
    host_0 = module_0.Host(str_0, port=str_0, login_name=str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == '2A[PK+@?Y}HHsF*f%zx'
    assert host_0.hostname is None
    assert host_0.domain is None
    assert host_0.port == '2A[PK+@?Y}HHsF*f%zx'
    assert host_0.login_name == '2A[PK+@?Y}HHsF*f%zx'
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    host_0.results()

def test_case_46():
    str_0 = 'Fetch and return all the results from history.\n\n        :rtype: ciper.collections.Results\n        '
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    list_0 = results_0.to_list()

@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = 'ZwP>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    results_0.head()

def test_case_48():
    str_0 = 'Fetch and return all the results from history.\n\n        :rtype: ciper.collections.Results\n        '
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    str_1 = results_0.format(str_0)
    assert str_1 == 'F\ne\nt\nc\nh\n \na\nn\nd\n \nr\ne\nt\nu\nr\nn\n \na\nl\nl\n \nt\nh\ne\n \nr\ne\ns\nu\nl\nt\ns\n \nf\nr\no\nm\n \nh\ni\ns\nt\no\nr\ny\n.\n\n\n\n\n \n \n \n \n \n \n \n \n:\nr\nt\ny\np\ne\n:\n \nc\ni\np\ne\nr\n.\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n.\nR\ne\ns\nu\nl\nt\ns\n\n\n \n \n \n \n \n \n \n '
    list_0 = results_0.to_list()
    with pytest.raises(ValueError):
        results_0.where(str_0, results_0, results_0)

def test_case_49():
    str_0 = 'Fetch and return all the results from history.\n\n        :rtype: ciper.collections.Results\n        '
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    with pytest.raises(ValueError):
        results_0.where(str_0, results_0, results_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = 'Fetch and return all the results from history.\n\n       rtype: ciper.collections.Results\n        '
    task_0 = module_0.Task(str_0, str_0)
    assert f'{type(task_0).__module__}.{type(task_0).__qualname__}' == 'viper.collections.Task'
    assert task_0.name == 'Fetch and return all the results from history.\n\n       rtype: ciper.collections.Results\n        '
    assert task_0.command_factory == 'Fetch and return all the results from history.\n\n       rtype: ciper.collections.Results\n        '
    assert task_0.timeout is None
    assert task_0.retry == 0
    assert task_0.stdout_processor is None
    assert task_0.stderr_processor is None
    assert task_0.pre_run is None
    assert task_0.post_run is None
    assert f'{type(task_0.meta).__module__}.{type(task_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(task_0.meta) == 0
    assert module_0.Task.retry == 0
    assert f'{type(module_0.Task.from_dict).__module__}.{type(module_0.Task.from_dict).__qualname__}' == 'builtins.method'
    task_0.results()

def test_case_51():
    item_0 = module_0.Item()
    assert f'{type(module_0.Item.from_dict).__module__}.{type(module_0.Item.from_dict).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Item.from_json).__module__}.{type(module_0.Item.from_json).__qualname__}' == 'builtins.method'
    results_0 = module_0.Results()
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    hosts_0 = results_0.hosts()
    assert f'{type(hosts_0).__module__}.{type(hosts_0).__qualname__}' == 'viper.collections.Hosts'
    assert len(hosts_0) == 0
    str_0 = 'Fetch and return all the results from history.\n\n        :rtype: ciper.collections.Results\n        '
    runners_0 = hosts_0.task(str_0)
    assert len(runners_0) == 0
    results_1 = hosts_0.results()
    assert f'{type(results_1).__module__}.{type(results_1).__qualname__}' == 'viper.collections.Results'
    assert len(results_1) == 0
    hosts_1 = runners_0.hosts()
    list_0 = runners_0.to_list()
    results_2 = results_0.final()
    dict_0 = {item_0: hosts_0, item_0: results_1, item_0: item_0}
    var_0 = module_2.dataclass(repr=item_0, eq=dict_0, order=dict_0, unsafe_hash=runners_0, match_args=results_1)
    var_1 = results_1.filter(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'viper.collections.Results'
    assert len(var_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_52():
    float_0 = -737.0
    str_0 = "AsG0jF^AI'6`o"
    tuple_0 = (str_0, float_0)
    int_0 = -1583
    int_1 = 2531
    result_0 = module_0.Result(float_0, float_0, float_0, tuple_0, tuple_0, tuple_0, tuple_0, int_0, int_0, float_0, int_1)
    assert f'{type(module_0.Result.by_id).__module__}.{type(module_0.Result.by_id).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Result.from_dict).__module__}.{type(module_0.Result.from_dict).__qualname__}' == 'builtins.method'
    result_0.retry_left()

@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = '%:w\x0c!H."?OrFh'
    host_0 = module_0.Host(str_0, str_0, identity_file=str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == '%:w\x0c!H."?OrFh'
    assert host_0.hostname == '%:w\x0c!H."?OrFh'
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file == '%:w\x0c!H."?OrFh'
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    host_0.run_task(str_0, *str_0)

@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = '_k]7'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_not
    list_0 = [results_0, str_0, str_0]
    var_0 = results_0.order_by(*list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 4
    var_1 = results_0.where(str_0, where_conditions_0, str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'viper.collections.Results'
    assert len(var_1) == 0
    results_1 = var_1.final()
    results_0.final()

@pytest.mark.xfail(strict=True)
def test_case_55():
    str_0 = 'Zw\t_P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    var_0 = results_0.order_by()
    var_1 = var_0.__repr__()
    results_1 = module_0.Results()
    results_2 = results_1.final()
    assert f'{type(results_2).__module__}.{type(results_2).__qualname__}' == 'viper.collections.Results'
    assert len(results_2) == 0
    results_0.range()

def test_case_56():
    str_0 = '\n                INSERT INTO results (\n                   hash, trigger_time, task, host, args, command,\n                    stdout, stderr, returncode, start, end, retry\n                ) VALUES (\n                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n                )\n                '
    host_0 = module_0.Host(str_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == '\n                INSERT INTO results (\n                   hash, trigger_time, task, host, args, command,\n                    stdout, stderr, returncode, start, end, retry\n                ) VALUES (\n                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n                )\n                '
    assert host_0.hostname is None
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    with pytest.raises(AttributeError):
        host_0.fqdn()

def test_case_57():
    config_0 = module_1.Config.max_workers
    host_0 = module_0.Host(config_0, domain=config_0, identity_file=config_0, meta=config_0)
    assert host_0.port == 22
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    with pytest.raises(AttributeError):
        host_0.fqdn()

@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = "Q&/!GpO,y`&'8~<Q"
    none_type_0 = None
    host_0 = module_0.Host(str_0, identity_file=none_type_0)
    assert f'{type(host_0).__module__}.{type(host_0).__qualname__}' == 'viper.collections.Host'
    assert host_0.ip == "Q&/!GpO,y`&'8~<Q"
    assert host_0.hostname is None
    assert host_0.domain is None
    assert host_0.port == 22
    assert host_0.login_name is None
    assert host_0.identity_file is None
    assert f'{type(host_0.meta).__module__}.{type(host_0.meta).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(host_0.meta) == 0
    assert module_0.Host.port == 22
    assert f'{type(module_0.Host.from_dict).__module__}.{type(module_0.Host.from_dict).__qualname__}' == 'builtins.method'
    list_0 = [host_0]
    host_0.run_task(list_0, *list_0)

def test_case_59():
    str_0 = '8-kGn3&'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.contains
    with pytest.raises(ValueError):
        results_0.where(results_0, where_conditions_0, str_0)

def test_case_60():
    str_0 = 'k)8>*>F%l(!+y\r:'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.not_startswith
    with pytest.raises(ValueError):
        results_0.where(str_0, where_conditions_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_61():
    float_0 = -737.0
    str_0 = "AsG0jF^AI'6`o"
    tuple_0 = (str_0, float_0)
    int_0 = -1583
    int_1 = 2531
    result_0 = module_0.Result(float_0, float_0, float_0, tuple_0, tuple_0, tuple_0, tuple_0, int_0, int_0, float_0, int_1)
    assert f'{type(module_0.Result.by_id).__module__}.{type(module_0.Result.by_id).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Result.from_dict).__module__}.{type(module_0.Result.from_dict).__qualname__}' == 'builtins.method'
    runner_0 = result_0.runner()
    assert f'{type(module_0.Runner.from_dict).__module__}.{type(module_0.Runner.from_dict).__qualname__}' == 'builtins.method'
    result_0.retry_left()

def test_case_62():
    str_0 = 'Zw>P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_
    with pytest.raises(ValueError):
        results_0.where(str_0, where_conditions_0, str_0)

def test_case_63():
    str_0 = 'Zw>P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.not_endswith
    with pytest.raises(ValueError):
        results_0.where(str_0, where_conditions_0, str_0)

def test_case_64():
    str_0 = 'k>8>*>F%l(!+y\r:'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.endswith
    with pytest.raises(ValueError):
        results_0.where(str_0, where_conditions_0, str_0)

def test_case_65():
    str_0 = ']8-k@n'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.startswith
    with pytest.raises(ValueError):
        results_0.where(results_0, where_conditions_0, str_0)

def test_case_66():
    str_0 = 'Zw>P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_not
    var_0 = results_0.where(str_0, where_conditions_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0

def test_case_67():
    str_0 = 'v-k@n3 '
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.not_contains
    with pytest.raises(ValueError):
        results_0.where(results_0, where_conditions_0, str_0)

def test_case_68():
    str_0 = 'Zw>P>H]'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_not
    str_1 = 'X0}o{F'
    with pytest.raises(ValueError):
        results_0.where(str_1, where_conditions_0, str_1)

def test_case_69():
    str_0 = '8-kGn3'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.is_
    str_1 = '--'
    with pytest.raises(ValueError):
        results_0.where(str_1, where_conditions_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = 'k\tx5/(gF'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.endswith
    str_1 = 'results:count'
    var_0 = results_0.where(str_1, where_conditions_0, str_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0
    var_0.__delattr__(var_0)

def test_case_71():
    str_0 = '8-kGn3&'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.startswith
    str_1 = 'H$\rylruOsV$?t'
    var_0 = results_0.where(str_1, where_conditions_0, str_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0
    results_1 = var_0.final()

def test_case_72():
    str_0 = '8-kGn3'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.not_endswith
    str_1 = '--'
    with pytest.raises(ValueError):
        results_0.where(str_1, where_conditions_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = '8-kGn&'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.contains
    var_0 = module_0.meta()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(var_0) == 0
    var_1 = results_0.where(str_0, where_conditions_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'viper.collections.Results'
    assert len(var_1) == 0
    var_0.re_run()

def test_case_74():
    bool_0 = True
    none_type_0 = None
    var_0 = module_2.field(init=none_type_0, repr=bool_0, compare=none_type_0)
    bool_1 = True
    int_0 = 1468
    result_0 = module_0.Result(bool_0, none_type_0, var_0, var_0, var_0, var_0, var_0, bool_1, var_0, var_0, int_0)
    assert f'{type(module_0.Result.by_id).__module__}.{type(module_0.Result.by_id).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Result.from_dict).__module__}.{type(module_0.Result.from_dict).__qualname__}' == 'builtins.method'
    bool_2 = result_0.errored()
    assert bool_2 is True

def test_case_75():
    str_0 = '0\x0c,6VQ-E'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.not_startswith
    var_0 = module_0.meta()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.meta.<locals>.Meta'
    assert len(var_0) == 0
    var_1 = results_0.where(str_0, where_conditions_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'viper.collections.Results'
    assert len(var_1) == 0
    results_1 = var_1.final()

def test_case_76():
    str_0 = 'hoJsts'
    results_0 = module_0.Results(str_0)
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'
    where_conditions_0 = module_0.WhereConditions.not_contains
    list_0 = []
    var_0 = results_0.where(str_0, where_conditions_0, list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'viper.collections.Results'
    assert len(var_0) == 0
    results_1 = var_0.final()

def test_case_77():
    str_0 = "ufHx1\nr'AC"
    hosts_0 = module_0.Hosts(str_0)
    result_0 = hosts_0.run_task(hosts_0)
    assert f'{type(result_0).__module__}.{type(result_0).__qualname__}' == 'viper.collections.Results'
    assert len(result_0) == 0
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_78():
    runners_0 = module_0.Runners()
    str_0 = "ufx1-:'A#"
    str_1 = runners_0.format(str_0)
    var_0 = runners_0.__repr__()
    var_1 = var_0.__repr__()
    runners_1 = module_0.Runners(var_1)
    str_2 = 'Vj'
    str_3 = runners_1.format(str_2)
    assert str_3 == '"\nR\nu\nn\nn\ne\nr\ns\n(\n_\na\nl\nl\n=\n(\n)\n,\n \n_\ni\nt\ne\nm\n_\nt\ny\np\ne\n=\n<\nc\nl\na\ns\ns\n \n\'\nv\ni\np\ne\nr\n.\nc\no\nl\nl\ne\nc\nt\ni\no\nn\ns\n.\nR\nu\nn\nn\ne\nr\n\'\n>\n)\n"'
    runners_1.hosts()

def test_case_79():
    str_0 = ':+'
    int_0 = 3115
    hosts_0 = module_0.Hosts(str_0)
    results_0 = hosts_0.run_task(hosts_0, max_workers=int_0)
    assert f'{type(results_0).__module__}.{type(results_0).__qualname__}' == 'viper.collections.Results'
    assert len(results_0) == 0
    assert f'{type(module_0.Results.from_history).__module__}.{type(module_0.Results.from_history).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_host).__module__}.{type(module_0.Results.by_host).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Results.by_task).__module__}.{type(module_0.Results.by_task).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = '-\x0bMk}SM'
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    result_0 = module_0.Result(str_0, none_type_0, none_type_0, tuple_0, none_type_0, none_type_0, none_type_0, str_0, none_type_0, none_type_0, none_type_0)
    assert f'{type(module_0.Result.by_id).__module__}.{type(module_0.Result.by_id).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Result.from_dict).__module__}.{type(module_0.Result.from_dict).__qualname__}' == 'builtins.method'
    bool_0 = result_0.ok()
    assert bool_0 is False
    result_0.save()