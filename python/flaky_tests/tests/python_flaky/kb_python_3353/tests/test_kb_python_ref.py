# Automatically generated by Pynguin.
import pytest
import kb_python.ref as module_0
import kb_python.config as module_1
import kb_python.fasta as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.check_chromosomes(bool_0, bool_0)

def test_case_1():
    str_0 = 'uI '
    var_0 = module_0.create_t2g_from_gtf(str_0, str_0)

def test_case_2():
    str_0 = 'url'
    var_0 = module_0.create_t2c(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '&yAXz<C3!K P\t1:'
    module_0.ref_kite(str_0, str_0, str_0, str_0, overwrite=str_0)

def test_case_4():
    str_0 = 'Q%0?tR%E[}gluA '
    var_0 = module_0.ref(str_0, str_0, str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'2\xf6d\x98v\x1d'
    none_type_0 = None
    complex_0 = (-309-2806.088047j)
    bool_0 = False
    module_0.ref_lamanno(none_type_0, none_type_0, bytes_0, none_type_0, bytes_0, complex_0, complex_0, bool_0, overwrite=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'url'
    var_0 = module_0.create_t2c(str_0, str_0)
    module_0.sort_gtf(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'u5$ yrl'
    module_0.ref(str_0, str_0, str_0, str_0, str_0, overwrite=str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'Writing matrix to h5ad {}'
    none_type_0 = None
    var_0 = module_0.kallisto_index(none_type_0, none_type_0)
    var_1 = module_0.download_reference(str_0, str_0)
    none_type_1 = None
    module_0.create_t2g_from_gtf(none_type_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '&yAXz<C3!K P\t1:'
    module_0.ref_kite(str_0, str_0, str_0, str_0, overwrite=str_0)

def test_case_10():
    str_0 = 'k\\"~}fHM)dFxR]D^'
    var_0 = module_0.ref_kite(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'Writing matrix to h5ad {}'
    none_type_0 = None
    module_0.create_t2c(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '@l{lmkcJcpm'
    var_0 = module_0.ref_lamanno(str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0)
    dict_0 = {str_0: str_0}
    module_0.sort_gtf(dict_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 't\tu6O'
    int_0 = 27
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    str_1 = 'P*b~;W.m,GiaSnn\t+U'
    var_0 = module_1.get_kallisto_binary_path()
    module_0.ref_lamanno(var_0, str_1, bool_0, bool_0, var_0, var_0, var_0, int_0, overwrite=tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'Writing matrix to h5ad {}'
    none_type_0 = None
    module_0.create_t2g_from_fasta(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'Writing matrix to h5ad {}'
    none_type_0 = None
    module_0.create_t2g_from_gtf(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '\\"~}fHM)dFx]R]D^'
    var_0 = module_0.create_t2g_from_gtf(str_0, str_0, str_0)
    module_0.download_reference(var_0, var_0, overwrite=var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'\xa8}O\x02\x87\xfdeba\xa0\x9bC\x00\xcd\xa7\x01 \xa5n'
    module_0.download_reference(bytes_0, bytes_0, overwrite=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'\xa8}O\x02\x87\xfdeba\xa0\x9bC\x00\xcd\xa7\x01 \xa5n'
    var_0 = module_0.download_reference(bytes_0, bytes_0)
    module_0.download_reference(bytes_0, bytes_0, overwrite=bytes_0)

def test_case_19():
    str_0 = '\\"~}fHM)dFx]R]D^'
    str_1 = 'ryqY5w_'
    var_0 = module_0.ref_kite(str_0, str_0, str_1, str_0)

def test_case_20():
    str_0 = 'Writing matrix to h5ad {}'
    str_1 = ';$TEme-h'
    var_0 = module_0.ref(str_1, str_0, str_0, str_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '\\"~}fHM)dFx]R]D^'
    str_1 = 'fitr_barcodes.txt'
    var_0 = module_0.ref(str_0, str_1, str_0, str_0, str_1)
    var_1 = module_0.kallisto_index(str_1, str_0)
    module_0.ref(str_1, str_0, var_0, str_1, str_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '10xv2_whitelist.txt.gz'
    var_0 = module_2.generate_kite_fasta(str_0, str_0)
    str_1 = 'fitr_barcodes.txt'
    module_0.ref_kite(str_0, str_1, str_1, str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    float_0 = 736.6415
    bool_0 = True
    module_0.check_chromosomes(float_0, bool_0)