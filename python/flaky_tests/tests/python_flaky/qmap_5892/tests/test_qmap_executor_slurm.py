# Automatically generated by Pynguin.
import pytest
import qmap.executor.slurm as module_0
import qmap.executor.executor as module_1

def test_case_0():
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    var_0 = module_0.get_usage_percentage(bool_0, none_type_0, bool_1, bool_0)
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0.terminate_jobs(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.get_usage_percentage(none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.terminate_jobs(dict_0)
    var_1 = module_0.convert_time(var_0)
    var_0.run(var_1, var_1, var_1)

def test_case_4():
    str_0 = "'<QuWaNIe2g_#Kb3%"
    var_0 = module_0.parse_parameters(str_0)
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0.create_script(executor_0, executor_0, executor_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_1 = module_0.Executor()
    executor_0.get_usage()

def test_case_7():
    dict_0 = {}
    var_0 = module_0.parse_parameters(dict_0)
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0 = module_0.Executor()
    var_1 = module_0.parse_parameters(dict_0)
    with pytest.raises(module_1.ExecutorError):
        executor_0.run_job(var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0.run(dict_0, dict_0, executor_0)

def test_case_9():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.terminate_jobs(dict_0)
    none_type_0 = None
    with pytest.raises(module_1.ExecutorError):
        executor_0.run_job(none_type_0, var_0, err=var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0.run(dict_0, dict_0)

def test_case_11():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = module_0.parse_parameters(dict_0)
    list_0 = []
    str_0 = '4M\t'
    with pytest.raises(module_1.ExecutorError):
        executor_0.run_job(list_0, dict_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_0 = {}
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.terminate_jobs(dict_0)
    executor_0.run(var_0, var_0, executor_0)

def test_case_13():
    executor_0 = module_0.Executor()
    assert module_0.STATUS_FORMAT == 'jobid,state,avecpu,cputime,elapsed,start,end,timelimit,maxdiskread,maxdiskwrite,maxvmsize,reqcpus,reqmem,reserved,nodelist,exitcode'
    assert module_0.SLURM_STATUS_CONVERSION == {'COMPLETED': ['COMPLETED', 'CD'], 'FAILED': ['FAILED', 'F', 'CANCELLED', 'CA', 'TIMEOUT', 'TO', 'PREEMPTED', 'PR', 'BOOT_FAIL', 'BF', 'NODE_FAIL', 'NF', 'DEADLINE', 'REVOKED', 'SPECIAL_EXIT', 'SE'], 'RUNNING': ['RUNNING', 'R', 'COMPLETING', 'CG'], 'PENDING': ['PENDING', 'PD', 'CONFIGURING', 'CF', 'SUSPENDED', 'S', 'RESIZING', 'STOPPED', 'ST'], 'OTHER': []}
    assert module_0.SLURM_STATUS == {'COMPLETED': 'COMPLETED', 'CD': 'COMPLETED', 'FAILED': 'FAILED', 'F': 'FAILED', 'CANCELLED': 'FAILED', 'CA': 'FAILED', 'TIMEOUT': 'FAILED', 'TO': 'FAILED', 'PREEMPTED': 'FAILED', 'PR': 'FAILED', 'BOOT_FAIL': 'FAILED', 'BF': 'FAILED', 'NODE_FAIL': 'FAILED', 'NF': 'FAILED', 'DEADLINE': 'FAILED', 'REVOKED': 'FAILED', 'SPECIAL_EXIT': 'FAILED', 'SE': 'FAILED', 'RUNNING': 'RUNNING', 'R': 'RUNNING', 'COMPLETING': 'RUNNING', 'CG': 'RUNNING', 'PENDING': 'PENDING', 'PD': 'PENDING', 'CONFIGURING': 'PENDING', 'CF': 'PENDING', 'SUSPENDED': 'PENDING', 'S': 'PENDING', 'RESIZING': 'PENDING', 'STOPPED': 'PENDING', 'ST': 'PENDING'}
    assert module_0.k == 'OTHER'
    assert module_0.v == []
    assert module_0.i == 'ST'
    assert module_0.USAGE_FORMAT == 'nodelist,cpusstate,memory,allocmem,statecompact'
    assert module_0.CMD_INFO == 'sinfo -N -O nodelist,cpusstate,memory,allocmem,statecompact --noheader'
    assert module_0.CMD_SQUEUE == 'squeue -u ${USER} -t R -o "%C %m %N" --noheader'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    str_0 = 'Gq*'
    with pytest.raises(module_1.ExecutorError):
        executor_0.terminate_jobs(str_0)

def test_case_14():
    str_0 = 'z{>F,W'
    with pytest.raises(module_1.ExecutorError):
        module_0.convert_time(str_0)