# Automatically generated by Pynguin.
import pytest
import re as module_0
import qmap.job.job as module_1
import qmap.globals as module_2
import qmap.file.metadata as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_1.Reattached(regex_flag_0, regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ''
    module_1.Submitted(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ''
    module_1.Submitted(str_0, str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'T,\\/D@s'
    module_1.Submitted(str_0, str_0, str_0, pre_commands=str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'T,\\/D@s'
    module_1.Submitted(str_0, str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ''
    module_1.Submitted(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ''
    module_1.Submitted(str_0, str_0, str_0, post_commands=str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'S'
    module_1.Submitted(str_0, str_0, str_0, str_0, post_commands=str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'irM(ip'
    module_1.Reattached(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'dzu9J!#'
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/dzu9J!#/dzu9J!#.out'
    assert job_0.f_stderr == '/pynguin/dzu9J!#/dzu9J!#.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    job_0.terminate()

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'reserved'
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/reserved/reserved.out'
    assert job_0.f_stderr == '/pynguin/reserved/reserved.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    job_0.save_metadata()

def test_case_11():
    str_0 = ''
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/.out'
    assert job_0.f_stderr == '/pynguin/.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    var_0 = job_0.change_status(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'e=y?%M-0vc\rDAQw'
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/e=y?%M-0vc\rDAQw/e=y?%M-0vc\rDAQw.out'
    assert job_0.f_stderr == '/pynguin/e=y?%M-0vc\rDAQw/e=y?%M-0vc\rDAQw.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    job_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ''
    module_1.Reattached(str_0, str_0)

def test_case_14():
    str_0 = ''
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/.out'
    assert job_0.f_stderr == '/pynguin/.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    with pytest.raises(module_2.QMapError):
        job_0.resubmit()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '#'
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/#/#.out'
    assert job_0.f_stderr == '/pynguin/#/#.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    job_0.update()

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ''
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/.out'
    assert job_0.f_stderr == '/pynguin/.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    job_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    list_0 = []
    q_map_error_0 = module_2.QMapError(*list_0)
    var_0 = module_3.get_fields(q_map_error_0, list_0, list_0)
    var_1 = var_0.__repr__()
    assert var_1 == '<generator object get_fields at 0x7fdf82863f40>'
    module_1.Submitted(var_0, var_1, list_0)

def test_case_18():
    str_0 = ''
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/.out'
    assert job_0.f_stderr == '/pynguin/.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    var_0 = job_0.change_status(str_0, job_0, str_0)
    with pytest.raises(module_2.QMapError):
        job_0.run(str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = ''
    module_1.Reattached(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ''
    job_0 = module_1.Job(str_0, str_0)
    assert job_0.f_stdout == '/pynguin/.out'
    assert job_0.f_stderr == '/pynguin/.err'
    assert job_0.retries == 0
    assert f'{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}' == 'logging.Logger'
    assert module_1.logger.name == 'qmap'
    assert module_1.logger.level == 0
    assert f'{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_1.logger.handlers == []
    assert module_1.Job.MD_RETRY == 'retries'
    assert module_1.Job.MD_JOB_ID == 'executor_id'
    assert module_1.Job.MD_CMD == 'command'
    assert module_1.Job.MD_JOB_CMD == 'job_cmd'
    assert module_1.Job.MD_STATUS == 'status'
    set_0 = {job_0, job_0, str_0}
    job_0.run(set_0)