# Automatically generated by Pynguin.
import pytest
import qmap.executor.executor as module_0
import enum as module_1

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    i_executor_0 = module_0.IExecutor(*list_0)
    assert module_0.ExecutorErrorCodesExplained == {0: 'No error', 1: 'Job return error', 2: 'Job reached wall time', 3: 'Job exceeded max memory', 4: 'Unknown reason'}
    executor_error_0 = module_0.ExecutorError(*list_0)
    i_executor_1 = module_0.IExecutor()
    auto_0 = module_1.auto()
    with pytest.raises(NotImplementedError):
        i_executor_1.run_job(i_executor_1, i_executor_0, err=auto_0)

def test_case_2():
    executor_error_codes_0 = module_0.ExecutorErrorCodes.UNKNOWN
    i_executor_0 = module_0.IExecutor()
    assert module_0.ExecutorErrorCodesExplained == {0: 'No error', 1: 'Job return error', 2: 'Job reached wall time', 3: 'Job exceeded max memory', 4: 'Unknown reason'}
    with pytest.raises(NotImplementedError):
        i_executor_0.generate_jobs_status(executor_error_codes_0, i_executor_0)

def test_case_3():
    i_executor_0 = module_0.IExecutor()
    assert module_0.ExecutorErrorCodesExplained == {0: 'No error', 1: 'Job return error', 2: 'Job reached wall time', 3: 'Job exceeded max memory', 4: 'Unknown reason'}
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        i_executor_0.terminate_jobs(none_type_0)

def test_case_4():
    str_0 = '-w'
    executor_error_codes_0 = module_0.ExecutorErrorCodes.MEMORY
    none_type_0 = None
    i_executor_0 = module_0.IExecutor()
    assert module_0.ExecutorErrorCodesExplained == {0: 'No error', 1: 'Job return error', 2: 'Job reached wall time', 3: 'Job exceeded max memory', 4: 'Unknown reason'}
    with pytest.raises(NotImplementedError):
        i_executor_0.create_script(executor_error_codes_0, none_type_0, none_type_0, str_0)

def test_case_5():
    i_executor_0 = module_0.IExecutor()
    assert module_0.ExecutorErrorCodesExplained == {0: 'No error', 1: 'Job return error', 2: 'Job reached wall time', 3: 'Job exceeded max memory', 4: 'Unknown reason'}
    i_executor_1 = module_0.IExecutor()
    executor_error_0 = module_0.ExecutorError()
    with pytest.raises(NotImplementedError):
        i_executor_1.get_usage()

def test_case_6():
    i_executor_0 = module_0.IExecutor()
    assert module_0.ExecutorErrorCodesExplained == {0: 'No error', 1: 'Job return error', 2: 'Job reached wall time', 3: 'Job exceeded max memory', 4: 'Unknown reason'}
    i_executor_1 = module_0.IExecutor()
    with pytest.raises(NotImplementedError):
        i_executor_0.run(i_executor_1, i_executor_1, i_executor_1)