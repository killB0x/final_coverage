# Automatically generated by Pynguin.
import pytest
import qmap.utils as module_0
import qmap.globals as module_1
import posixpath as module_2
import genericpath as module_3
import enum as module_4

def test_case_0():
    bytes_0 = b''
    var_0 = module_0.remove_file_if_exits(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 168.911387
    module_0.remove_file_if_exits(float_0)

def test_case_2():
    str_0 = 'Fr=YST@d3b'
    var_0 = module_0.tail(str_0)
    assert var_0 == 'T\n@\nd\n3\nb\n'

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1
    module_0.execute_command(int_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xdf(\xd4\x0c\xc2\x9f5\xc7\xe7\xb4\xf1\x1c\x03\xa6\x11\x99'
    module_0.write(bytes_0, bytes_0)

def test_case_5():
    var_0 = module_0.file_open()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'contextlib._GeneratorContextManager'
    assert f'{type(var_0.gen).__module__}.{type(var_0.gen).__qualname__}' == 'builtins.generator'
    assert var_0.args == ()
    assert var_0.kwds == {}

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.copy_file(none_type_0, none_type_0)

def test_case_7():
    str_0 = 'MaxDiskRead'
    with pytest.raises(module_1.QMapError):
        module_0.write(str_0, str_0)
    var_0 = module_0.exception_formatter(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\xa1\x02\xe5\x96\x8f\xbda\x8c\xd5i\x94\xe3}\x07\x986d'
    var_0 = module_2.dirname(bytes_0)
    var_1 = module_0.read_file(bytes_0)
    module_0.write(var_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.write(none_type_0, none_type_0)

def test_case_10():
    bytes_0 = b''
    var_0 = module_0.write(bytes_0, bytes_0, bytes_0)
    with pytest.raises(module_1.QMapError):
        module_0.tail(var_0, var_0)

def test_case_11():
    str_0 = 'MaxDiskRead'
    var_0 = module_0.get_files_by_ext(str_0, str_0)
    with pytest.raises(module_1.QMapError):
        module_0.write(str_0, str_0)

def test_case_12():
    str_0 = 'MaxDiskRead'
    var_0 = module_0.get_files_by_ext(str_0, str_0)
    var_1 = module_3.getctime(str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ''
    str_1 = '5h.5U\r\\FlPXx7Y'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_0: str_1}
    var_0 = module_0.get_files_by_ext(str_0, dict_0)
    var_1 = module_0.remove_file_if_exits(str_0)
    bytes_0 = b']\xeb\xf2\x04Q*\xb7&\xf1\xaaO\xc5'
    module_0.remove_file_if_exits(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '.\\FPuxJ'
    var_0 = module_0.remove_file_if_exits(str_0)
    module_0.write(str_0, var_0, var_0)

def test_case_15():
    str_0 = '/-)t&M'
    var_0 = module_3.exists(str_0)
    str_1 = '~\\oPuxJ'
    with pytest.raises(module_1.QMapError):
        module_0.write(str_0, str_1, str_0)
    var_1 = module_0.write(str_1, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = ''
    dict_0 = module_2.basename(str_0)
    var_0 = module_0.get_files_by_ext(str_0, dict_0)
    var_1 = module_0.remove_file_if_exits(str_0)
    bytes_0 = b'y\xd4oz#\xa8\x7f:\xec\xef.\xb7\xe2L\xf0\x12'
    var_2 = module_0.remove_file_if_exits(bytes_0)
    var_3 = var_2.__dir__()
    module_0.write(bytes_0, bytes_0, bytes_0)

def test_case_17():
    str_0 = '`!_s\\d&Hy^\x0bXi nNc`^W'
    var_0 = module_0.read_file(str_0)
    with pytest.raises(module_1.QMapError):
        module_0.write(str_0, var_0, str_0)
    var_1 = module_0.get_files_by_ext(str_0, var_0)
    var_3 = module_2.normpath(var_2)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    var_0 = module_0.read_file(bool_0)
    module_0.execute_command(var_0)

def test_case_19():
    str_0 = '<'
    with pytest.raises(module_1.QMapError):
        module_0.write(str_0, str_0)
    var_0 = module_0.read_file(str_0)
    var_1 = module_2.commonpath(var_0)
    var_2 = module_0.remove_file_if_exits(str_0)
    var_4 = module_0.write(var_3, str_0, var_2)
    var_5 = module_0.tail(var_2)

def test_case_20():
    str_0 = 'Z_\\dgzy^6Xo5 nN/`^W'
    var_0 = module_0.read_file(str_0)
    auto_0 = module_4.auto(*var_0)
    assert f'{type(auto_0).__module__}.{type(auto_0).__qualname__}' == 'enum.auto'

def test_case_21():
    str_0 = '~#'
    with pytest.raises(module_1.QMapError):
        module_0.write(str_0, str_0)
    var_0 = module_0.read_file(str_0)
    var_1 = module_2.commonpath(var_0)
    var_2 = var_0.__setattr__(str_0, var_0, var_0)