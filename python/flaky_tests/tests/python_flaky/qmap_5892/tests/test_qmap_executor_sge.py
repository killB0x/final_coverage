# Automatically generated by Pynguin.
import pytest
import qmap.executor.sge as module_0
import qmap.executor.executor as module_1

def test_case_0():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

def test_case_1():
    str_0 = '}'
    var_0 = module_0.convert_time(str_0)
    assert var_0 == '}'
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

def test_case_2():
    str_0 = '?~*\ri'
    var_0 = module_0.parse_parameters(str_0)
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

def test_case_3():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    dict_0 = {}
    var_0 = executor_0.generate_jobs_status(dict_0)
    with pytest.raises(module_1.ExecutorError):
        executor_0.terminate_jobs(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    str_0 = 'kl:fh*SH5/6<~hpV'
    executor_0.run(str_0, str_0)

def test_case_5():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.get_usage()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'bB'
    module_0.convert_time(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0.create_script(executor_0, executor_0, executor_0, executor_0)

def test_case_8():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    str_0 = 'kl:h*SH5/6<~hpRV'
    with pytest.raises(module_1.ExecutorError):
        executor_0.run_job(executor_0, str_0, str_0, executor_0)

def test_case_9():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    str_0 = 'kl:fhSH5/6<~hpV'
    with pytest.raises(module_1.ExecutorError):
        executor_0.run_job(executor_0, str_0)

def test_case_10():
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    str_0 = 'kl:h*SH5/6<~hpRV'
    with pytest.raises(module_1.ExecutorError):
        executor_0.terminate_jobs(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = []
    executor_0 = module_0.Executor()
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.terminate_jobs(list_0)
    executor_1 = module_0.Executor()
    str_0 = 'kl:fh*SH5/6<~hpV'
    executor_1.run(str_0, str_0)

def test_case_12():
    str_0 = '@+a]S_4P\n\t+'
    var_0 = module_0.convert_time(str_0)
    assert var_0 == '@+a]S_4P\n\t+'
    assert module_0.QSTAT_STATUS_CONVERSION == {'COMPLETED': [], 'FAILED': ['Eqw'], 'RUNNING': ['r'], 'PENDING': ['qw'], 'OTHER': ['hqw']}
    assert module_0.QSTAT_STATUS == {'Eqw': 'FAILED', 'r': 'RUNNING', 'qw': 'PENDING', 'hqw': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['hqw']
    assert module_0.i == 'hqw'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0 = module_0.Executor()
    var_1 = module_0.parse_parameters(var_0)
    var_2 = executor_0.generate_jobs_status(var_0)
    var_3 = executor_0.get_usage()
    with pytest.raises(module_1.ExecutorError):
        executor_0.terminate_jobs(var_2)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'Number of cores to use'
    module_0.parse_parameters(str_0)