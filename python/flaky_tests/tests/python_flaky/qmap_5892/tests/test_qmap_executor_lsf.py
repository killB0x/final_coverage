# Automatically generated by Pynguin.
import pytest
import qmap.executor.lsf as module_0
import re as module_1
import qmap.executor.executor as module_2

def test_case_0():
    executor_0 = module_0.Executor()
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

@pytest.mark.xfail(strict=True)
def test_case_1():
    executor_0 = module_0.Executor()
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    none_type_0 = None
    executor_0.create_script(executor_0, none_type_0, none_type_0, executor_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    executor_0 = module_0.Executor()
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    none_type_0 = None
    var_0 = executor_0.get_usage()
    executor_0.create_script(executor_0, none_type_0, none_type_0, executor_0)

def test_case_3():
    tuple_0 = ()
    var_0 = module_0.parse_parameters(tuple_0)
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'W*\x0b\x0bqpy4wVaf'
    module_0.convert_time(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    tuple_0 = ()
    list_0 = []
    executor_0 = module_0.Executor(*list_0)
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.terminate_jobs(tuple_0)
    executor_0.run(list_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    list_0 = []
    executor_0 = module_0.Executor(*list_0)
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0.run(list_0, tuple_0)

def test_case_7():
    str_0 = 'kd5ZZJU2\n_faBFL('
    var_0 = module_0.convert_time(str_0)
    assert var_0 == 'kd5ZZJU2\n_faBFL('
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_1 = module_1.escape(var_0)

def test_case_8():
    tuple_0 = ()
    list_0 = []
    executor_0 = module_0.Executor(*list_0)
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    with pytest.raises(module_2.ExecutorError):
        executor_0.run_job(tuple_0, tuple_0, err=list_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    tuple_0 = ()
    list_0 = []
    executor_0 = module_0.Executor()
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_1 = module_0.Executor(*list_0)
    executor_0.run_job(tuple_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    executor_0 = module_0.Executor()
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    executor_0.run(executor_0, tuple_0, executor_0)

def test_case_11():
    tuple_0 = ()
    list_0 = []
    executor_0 = module_0.Executor(*list_0)
    assert module_0.LSF_STATUS_CONVERSION == {'COMPLETED': ['DONE'], 'FAILED': ['EXIT', 'ZOMBI'], 'RUNNING': ['RUN'], 'PENDING': ['PEND'], 'OTHER': ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']}
    assert module_0.LSF_STATUS == {'DONE': 'COMPLETED', 'EXIT': 'FAILED', 'ZOMBI': 'FAILED', 'RUN': 'RUNNING', 'PEND': 'PENDING', 'UNKWN': 'OTHER', 'PSUSP': 'OTHER', 'USUSP': 'OTHER', 'SSUSP': 'OTHER'}
    assert module_0.k == 'OTHER'
    assert module_0.v == ['UNKWN', 'PSUSP', 'USUSP', 'SSUSP']
    assert module_0.i == 'SSUSP'
    assert module_0.SCRIPT_FILE_EXTENSION == 'sh'
    var_0 = executor_0.terminate_jobs(tuple_0)
    with pytest.raises(module_2.ExecutorError):
        executor_0.terminate_jobs(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '\n        Base class for a job\n\n        Args:\n            id_ (str): job ID\n            folder (str): path where to save the job files\n\n        The metadata\n           The metadata of a job has one field always: the job command.\n           Beside that there are 2 fields that are also class members:\n           the status and the job ID. The first one is set once the job is run.\n           The second before saving the metadata.\n           Additionally, there are several other fields that can appear:\n           the number of retries or the specific parameters\n           requested are fields added once the job is run.\n           The used resources are added to the metadata once the status has changed\n\n        Job files\n            Each job has 4 files:\n                - script: file with the list of commands to execute.\n                  What is passed to the cluster manager.\n                - info: file with the metadata in json format\n                - out: file with the job standard output\n                - err: file with the job standard error\n            Additionally, there can be an optional extra file:\n                - env: file that contains the specific job _params as\n                  environment variables that are exported before the\n                  execution\n            The env_default file refers to the environment file set by the manager.\n\n\n        '
    var_0 = module_1.escape(str_0)
    module_0.parse_parameters(str_0)