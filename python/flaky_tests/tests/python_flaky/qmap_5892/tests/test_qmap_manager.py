# Automatically generated by Pynguin.
import pytest
import qmap.manager as module_0
import qmap.globals as module_1
import enum as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'L>eAtf&57Tf~b)E'
    module_0.Status(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.Reattached(set_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'L>eAtf&57Tf~b)E'
    module_0.Submitted(str_0, str_0, str_0, str_0)

def test_case_3():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = manager_0.get(none_type_0)
    with pytest.raises(module_1.QMapError):
        module_0.Submitted(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    manager_0.terminate()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'X(w/>6b:h#so|6S3'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    manager_0.close()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    manager_0.submit_and_close()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    dict_0 = {str_0: str_0}
    manager_0.update_job_params(**dict_0)

def test_case_8():
    str_0 = 'X(w/>6b:h#so|6S3'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    var_0 = manager_0.get_jobs()

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    manager_0 = module_0.Manager(str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.Manager.MD_PROFILE == 'profile'
    assert module_0.Manager.MD_MAX_RUNNING == 'running'
    assert module_0.Manager.MD_GROUP_SIZE == 'groups'
    assert f'{type(module_0.Manager.is_done).__module__}.{type(module_0.Manager.is_done).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.job_params).__module__}.{type(module_0.Manager.job_params).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Manager.editable_job_params).__module__}.{type(module_0.Manager.editable_job_params).__qualname__}' == 'builtins.property'
    manager_0.get_jobs(manager_0)

def test_case_10():
    dict_0 = {}
    status_0 = module_0.Status(dict_0)
    assert f'{type(status_0).__module__}.{type(status_0).__qualname__}' == 'qmap.manager.Status'
    assert status_0.total == 0
    assert status_0.groups == {'COMPLETED': [], 'FAILED': [], 'OTHER': [], 'PENDING': [], 'RUNNING': [], 'UNSUBMITTED': []}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []

def test_case_11():
    dict_0 = {}
    status_0 = module_0.Status(dict_0)
    assert f'{type(status_0).__module__}.{type(status_0).__qualname__}' == 'qmap.manager.Status'
    assert status_0.total == 0
    assert status_0.groups == {'COMPLETED': [], 'FAILED': [], 'OTHER': [], 'PENDING': [], 'RUNNING': [], 'UNSUBMITTED': []}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    var_0 = status_0.update()

def test_case_12():
    enum_dict_0 = module_2._EnumDict()
    status_0 = module_0.Status(enum_dict_0)
    assert f'{type(status_0).__module__}.{type(status_0).__qualname__}' == 'qmap.manager.Status'
    assert status_0.total == 0
    assert status_0.groups == {'COMPLETED': [], 'FAILED': [], 'OTHER': [], 'PENDING': [], 'RUNNING': [], 'UNSUBMITTED': []}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    var_0 = status_0.__repr__()
    assert var_0 == 'Completed: 0   Failed: 0   Other: 0   Pending: 0   Running: 0   Unsubmitted: 0   TOTAL: 0'
    var_1 = status_0.update()

@pytest.mark.xfail(strict=True)
def test_case_13():
    dict_0 = {}
    status_0 = module_0.Status(dict_0)
    assert f'{type(status_0).__module__}.{type(status_0).__qualname__}' == 'qmap.manager.Status'
    assert status_0.total == 0
    assert status_0.groups == {'COMPLETED': [], 'FAILED': [], 'OTHER': [], 'PENDING': [], 'RUNNING': [], 'UNSUBMITTED': []}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    var_0 = status_0.notify_state_change(dict_0, dict_0, dict_0)
    var_0.update()

@pytest.mark.xfail(strict=True)
def test_case_14():
    dict_0 = {}
    status_0 = module_0.Status(dict_0)
    assert f'{type(status_0).__module__}.{type(status_0).__qualname__}' == 'qmap.manager.Status'
    assert status_0.total == 0
    assert status_0.groups == {'COMPLETED': [], 'FAILED': [], 'OTHER': [], 'PENDING': [], 'RUNNING': [], 'UNSUBMITTED': []}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'qmap'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    none_type_0 = None
    status_0.notify_state_change(dict_0, dict_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Status(dict_0)

def test_case_16():
    str_0 = 'RI#{yDj\t\x0bi?>{"^;da5'
    with pytest.raises(module_1.QMapError):
        module_0.Submitted(str_0, str_0, str_0, cli_params=str_0)