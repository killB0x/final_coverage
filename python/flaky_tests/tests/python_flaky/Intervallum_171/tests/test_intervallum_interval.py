# Automatically generated by Pynguin.
import pytest
import intervallum.interval as module_0
import builtins as module_1

def test_case_0():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.inner_subtraction(bool_0, bool_0)
    assert interval_1 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_1():
    dict_0 = {}
    interval_constants_0 = module_0.IntervalConstants(**dict_0)
    int_0 = 2980
    callable_0 = module_0.reduce_result(interval_constants_0)
    float_0 = -72.6274
    module_0.Interval(int_0, float_0)

def test_case_2():
    int_0 = 653
    interval_0 = module_0.Interval(int_0, int_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    int_1 = 1316
    interval_1 = module_0.Interval(int_0, int_1)
    assert f'{type(interval_1).__module__}.{type(interval_1).__qualname__}' == 'intervallum.interval.Interval'
    bool_0 = interval_1.__eq__(interval_0)
    assert bool_0 is False

def test_case_3():
    bool_0 = True
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.inner_subtraction(bool_0, interval_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_4():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__lshift__(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__sub__(bool_0)
    assert f'{type(interval_1).__module__}.{type(interval_1).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = interval_0.__le__(bool_0)
    assert bool_1 is True
    var_0 = interval_0.__sub__(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = var_0.__rsub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = interval_1.__truediv__(interval_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    bool_2 = var_2.__ne__(var_0)
    assert bool_2 is True
    interval_constants_0 = module_0.IntervalConstants()
    interval_0.__rtruediv__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    float_0 = 942.847708
    interval_0 = module_0.Interval(bool_0, float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__invert__()
    assert f'{type(interval_1).__module__}.{type(interval_1).__qualname__}' == 'intervallum.interval.Interval'
    list_0 = []
    interval_constants_0 = module_0.IntervalConstants(*list_0)
    interval_2 = interval_1.__add__(interval_0)
    assert f'{type(interval_2).__module__}.{type(interval_2).__qualname__}' == 'intervallum.interval.Interval'
    var_0 = interval_2.__sub__(interval_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_0.__ge__(interval_constants_0)

def test_case_7():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__add__(interval_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_8():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__sub__(interval_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_9():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__rmul__(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_10():
    bool_0 = True
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__rtruediv__(bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    interval_constants_0 = module_0.IntervalConstants(**dict_0)
    interval_exceptions_0 = module_0.IntervalExceptions()
    float_0 = -2338.86661
    interval_0 = module_0.Interval(float_0, float_0, interval_exceptions_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_0.__rtruediv__(interval_constants_0)

def test_case_12():
    bool_0 = True
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__truediv__(bool_0)
    assert interval_1 == pytest.approx(1.0, abs=0.01, rel=0.01)

def test_case_13():
    interval_exceptions_0 = module_0.IntervalExceptions()

@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    str_0 = interval_1.__repr__()
    assert str_0 == '[-2283.441567; False]'
    interval_2 = interval_0.__copy__()
    interval_3 = interval_1.__mul__(float_0)
    assert f'{type(interval_3).__module__}.{type(interval_3).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = interval_0.__le__(bool_0)
    assert bool_1 is True
    var_0 = interval_0.__sub__(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_3.__rtruediv__(float_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = var_0.__rsub__(bool_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    var_3 = var_0.__rtruediv__(bool_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    interval_4 = interval_1.__copy__()
    bool_2 = interval_3.__ne__(var_0)
    assert bool_2 is True
    var_4 = interval_2.__rmul__(var_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_constants_0 = module_0.IntervalConstants()
    interval_0.__rtruediv__(var_4)

def test_case_15():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__radd__(interval_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_16():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__rsub__(bool_0)
    assert interval_1 == pytest.approx(0.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    float_0 = 2477.487889
    bool_1 = True
    object_0 = module_1.object()
    interval_0 = module_0.Interval(float_0, bool_1, object_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__rmul__(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    interval_1 = var_0.__neg__()
    assert interval_1 == pytest.approx(-0.0, abs=0.01, rel=0.01)
    int_0 = -1910
    list_0 = [int_0, int_0, int_0]
    bool_2 = True
    float_1 = -1346.485391
    var_1 = interval_1.__truediv__(float_1)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    interval_2 = interval_1.__mul__(int_0)
    assert interval_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    module_0.Interval(list_0, bool_2, bool_2)

@pytest.mark.xfail(strict=True)
def test_case_18():
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_0.__copy__()
    interval_3 = interval_1.__mul__(float_0)
    assert f'{type(interval_3).__module__}.{type(interval_3).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = interval_0.__le__(bool_0)
    assert bool_1 is True
    var_0 = interval_0.__sub__(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_3.__rtruediv__(float_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = var_0.__rsub__(bool_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    var_3 = var_0.__rtruediv__(bool_1)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    interval_4 = interval_1.__copy__()
    bool_2 = interval_3.__ne__(var_0)
    assert bool_2 is True
    var_4 = interval_2.__rmul__(var_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_constants_0 = module_0.IntervalConstants()
    interval_0.__rtruediv__(var_4)

def test_case_19():
    int_0 = 1316
    interval_0 = module_0.Interval(int_0, int_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    bool_0 = interval_0.__eq__(interval_0)
    assert bool_0 is True

def test_case_20():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2284.243393786343
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = var_0.__rtruediv__(float_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    var_3 = var_1.__rsub__(bool_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    int_0 = -3791
    var_4 = var_1.__rtruediv__(int_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_4 = interval_2.__copy__()
    var_5 = interval_1.__sub__(bool_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    var_6 = var_5.__rtruediv__(interval_2)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = var_5.__ne__(interval_1)
    assert bool_1 is False
    interval_5 = var_4.inner_subtraction(interval_0, interval_4)
    assert interval_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_2 = interval_2.__ne__(var_2)
    assert bool_2 is True
    interval_6 = module_0.Interval(int_0, var_6, bool_0)
    assert f'{type(interval_6).__module__}.{type(interval_6).__qualname__}' == 'intervallum.interval.Interval'
    module_0.Interval(var_4, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = interval_4.__rtruediv__(float_0)
    assert var_2 == pytest.approx(-0.00032845158415214224, abs=0.01, rel=0.01)
    var_3 = var_1.__rsub__(bool_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    int_0 = -3774
    var_4 = var_1.__rtruediv__(int_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_5 = interval_2.__copy__()
    bool_1 = interval_5.__ge__(var_4)
    assert bool_1 is False
    bool_2 = interval_2.__ne__(var_1)
    assert bool_2 is False
    var_5 = interval_3.__rmul__(var_1)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    interval_constants_0 = module_0.IntervalConstants()
    module_0.IntervalConstants(**interval_constants_0)

def test_case_22():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__rmul__(interval_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_23():
    bool_0 = True
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__truediv__(interval_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)

def test_case_24():
    bool_0 = True
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    var_0 = interval_0.__pow__(bool_0, bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2283.441567
    list_0 = []
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = interval_4.__rtruediv__(float_0)
    assert var_2 == pytest.approx(-0.00032845158415214224, abs=0.01, rel=0.01)
    var_3 = var_1.__rsub__(bool_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    int_0 = -3774
    var_4 = var_1.__rtruediv__(int_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_5 = interval_2.__copy__()
    bool_1 = interval_5.__ge__(var_4)
    assert bool_1 is False
    var_3.__ne__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    bool_1 = interval_0.__le__(interval_0)
    assert bool_1 is True
    bool_2 = True
    interval_1 = interval_0.inner_subtraction(bool_2, bool_2)
    assert interval_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = interval_1.__pow__(bool_1)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_3 = interval_1.__ge__(float_0)
    var_1 = var_0.__sub__(bool_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0.__rtruediv__(var_1)

def test_case_27():
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = interval_4.__rtruediv__(float_0)
    assert var_2 == pytest.approx(-0.00032845158415214224, abs=0.01, rel=0.01)
    var_3 = var_1.__rsub__(bool_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    interval_5 = interval_2.__copy__()
    var_4 = interval_5.__rtruediv__(var_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    var_5 = interval_1.__sub__(bool_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    var_6 = var_5.__rtruediv__(interval_2)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = var_5.__ne__(interval_1)
    assert bool_1 is False
    module_0.Interval(var_4, var_2)

@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2284.243393786343
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = interval_4.__rtruediv__(float_0)
    assert var_2 == pytest.approx(-0.0003283362893990059, abs=0.01, rel=0.01)
    var_3 = var_1.__rsub__(bool_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    int_0 = -3791
    var_4 = var_1.__rtruediv__(int_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_5 = interval_2.__copy__()
    var_5 = interval_5.__rtruediv__(var_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    var_6 = interval_1.__sub__(bool_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'intervallum.interval.Interval'
    var_7 = var_6.__rtruediv__(interval_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = var_6.__ne__(interval_1)
    assert bool_1 is False
    var_8 = var_4.inner_subtraction(interval_0, interval_5)
    assert var_8 == pytest.approx(0.0, abs=0.01, rel=0.01)
    bool_2 = interval_2.__ne__(var_2)
    assert bool_2 is True
    interval_6 = module_0.Interval(int_0, var_7, bool_0)
    assert f'{type(interval_6).__module__}.{type(interval_6).__qualname__}' == 'intervallum.interval.Interval'
    interval_7 = var_2.__add__(var_0)
    interval_7.__invert__()

def test_case_29():
    bytes_0 = b'\xe7& \xa1\xd5'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_5 = interval_1.__neg__()
    assert f'{type(interval_5).__module__}.{type(interval_5).__qualname__}' == 'intervallum.interval.Interval'
    callable_3 = module_0.reduce_result(callable_2)
    callable_4 = module_0.reduce_result(callable_2)
    var_1 = interval_5.__rtruediv__(interval_5)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = var_1.__truediv__(float_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = var_0.__gt__(interval_4)
    assert bool_1 is False
    interval_6 = var_0.inner_subtraction(interval_0, interval_5)
    assert interval_6 == pytest.approx(-2283.441567, abs=0.01, rel=0.01)
    interval_7 = interval_1.__add__(interval_1)
    assert f'{type(interval_7).__module__}.{type(interval_7).__qualname__}' == 'intervallum.interval.Interval'
    var_3 = interval_5.__rsub__(var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    interval_8 = interval_5.__copy__()
    interval_9 = interval_2.__invert__()
    assert f'{type(interval_9).__module__}.{type(interval_9).__qualname__}' == 'intervallum.interval.Interval'
    interval_10 = var_3.__copy__()
    var_4 = var_2.__rmul__(interval_4)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_exceptions_0 = module_0.IntervalExceptions()
    interval_11 = interval_5.inner_subtraction(var_2, bool_0)
    assert f'{type(interval_11).__module__}.{type(interval_11).__qualname__}' == 'intervallum.interval.Interval'

def test_case_30():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2283.441567
    list_0 = []
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = interval_3.__copy__()
    interval_5 = interval_4.__mul__(var_0)
    assert f'{type(interval_5).__module__}.{type(interval_5).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_4.__sub__(interval_4)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = var_1.__rtruediv__(interval_4)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    var_3 = var_1.__rsub__(interval_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    interval_6 = var_3.__copy__()
    assert f'{type(interval_6).__module__}.{type(interval_6).__qualname__}' == 'intervallum.interval.Interval'
    interval_7 = interval_6.__mul__(bool_0)
    assert interval_7 == pytest.approx(-0.0, abs=0.01, rel=0.01)
    var_4 = interval_7.__rtruediv__(var_2)
    var_5 = interval_5.__sub__(var_3)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    var_6 = var_0.__pow__(bool_0)
    assert var_6 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_7 = interval_1.__rtruediv__(var_6)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = interval_7.__ne__(var_6)
    assert bool_1 is True
    float_1 = 864.6
    int_0 = 2119
    interval_8 = module_0.Interval(float_1, int_0)
    interval_9 = interval_4.__add__(interval_8)
    interval_10 = var_5.__invert__()
    interval_constants_0 = module_0.IntervalConstants(*list_0)

def test_case_31():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__pow__(bool_0, bool_0)
    assert interval_1 == pytest.approx(1.0, abs=0.01, rel=0.01)

def test_case_32():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.reduce_result(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2283.441567
    bool_0 = False
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = interval_4.__rtruediv__(float_0)
    assert var_2 == pytest.approx(-0.00032845158415214224, abs=0.01, rel=0.01)
    var_3 = var_1.__rsub__(bool_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'intervallum.interval.Interval'
    int_0 = -3774
    var_4 = var_1.__rtruediv__(int_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    interval_5 = interval_2.__copy__()
    bool_1 = interval_0.__lt__(interval_0)
    assert bool_1 is False
    var_5 = interval_5.__rtruediv__(var_0)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    var_6 = interval_1.__sub__(bool_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'intervallum.interval.Interval'
    var_7 = var_6.__rtruediv__(interval_2)
    assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'intervallum.interval.Interval'
    bool_2 = var_6.__ne__(interval_1)
    assert bool_2 is False
    module_0.Interval(var_5, var_2)

def test_case_33():
    bytes_0 = b'\xe7&\xa14\xd5\x0b'
    callable_0 = module_0.reduce_result(bytes_0)
    callable_1 = module_0.monotonic(callable_0)
    callable_2 = module_0.monotonic(callable_1)
    float_0 = -2283.441567
    bool_0 = True
    interval_0 = module_0.Interval(float_0, bool_0)
    assert f'{type(interval_0).__module__}.{type(interval_0).__qualname__}' == 'intervallum.interval.Interval'
    assert f'{type(module_0.Interval.from_point).__module__}.{type(module_0.Interval.from_point).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Interval.lb).__module__}.{type(module_0.Interval.lb).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.ub).__module__}.{type(module_0.Interval.ub).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.middle).__module__}.{type(module_0.Interval.middle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Interval.width).__module__}.{type(module_0.Interval.width).__qualname__}' == 'builtins.property'
    interval_1 = interval_0.__copy__()
    interval_2 = interval_1.__copy__()
    var_0 = interval_2.__radd__(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'intervallum.interval.Interval'
    interval_3 = interval_2.__copy__()
    interval_4 = var_0.__mul__(float_0)
    assert f'{type(interval_4).__module__}.{type(interval_4).__qualname__}' == 'intervallum.interval.Interval'
    var_1 = interval_0.__sub__(bool_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'intervallum.interval.Interval'
    var_2 = var_1.__radd__(var_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'intervallum.interval.Interval'
    bool_1 = var_2.__ge__(float_0)
    assert bool_1 is False
    bool_2 = True
    bool_3 = interval_4.__le__(bool_2)
    assert bool_3 is False
    var_3 = interval_1.__lshift__(interval_0)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    interval_5 = interval_4.__neg__()
    assert f'{type(interval_5).__module__}.{type(interval_5).__qualname__}' == 'intervallum.interval.Interval'
    str_0 = interval_5.__repr__()
    assert str_0 == '[-10428210.77980683; -5211821.948336415]'
    callable_3 = module_0.reduce_result(callable_2)
    callable_4 = module_0.reduce_result(callable_3)
    callable_5 = module_0.monotonic(callable_4)
    interval_6 = interval_2.__copy__()
    interval_7 = interval_5.__invert__()
    assert interval_7 == pytest.approx(-1.4388260450416517e-07, abs=0.01, rel=0.01)
    var_4 = interval_6.__rsub__(interval_7)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'intervallum.interval.Interval'
    var_5 = interval_3.__rtruediv__(interval_7)
    assert f'{type(var_5).__module__}.{type(var_5).__qualname__}' == 'intervallum.interval.Interval'
    int_0 = -158
    var_6 = interval_1.__rtruediv__(int_0)
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'intervallum.interval.Interval'
    bool_4 = var_2.__ne__(var_4)
    assert bool_4 is True
    float_1 = 3285.593
    bool_5 = False
    var_7 = interval_1.__pow__(bool_5)
    assert var_7 == pytest.approx(1.0, abs=0.01, rel=0.01)
    bool_6 = var_0.__le__(var_7)
    assert bool_6 is True
    module_0.Interval(float_1, var_1)