# Automatically generated by Pynguin.
import pytest
import intervallum.box as module_0
import intervallum.box_functions as module_1
import numpy as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    box_0 = module_0.Box()
    str_0 = '\x0brAyi;">x|~\nlK/^n'
    dict_0 = {str_0: box_0}
    box_1 = module_0.Box(*box_0, **dict_0)
    module_1.bisect(box_1)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\xd1UX\xbb$4P\x8a\x92\x89\x95\x91\xf2\xf0\xcc'C"
    none_type_0 = None
    var_0 = module_1.shrink(bytes_0, bytes_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 17
    module_1.split(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    str_0 = '9%+GtFZd92tfmi5LB'
    str_1 = 'i@'
    str_2 = 'G!B"\rRV<T7{#t'
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {str_0: str_0, str_1: str_1, str_2: list_0}
    box_0 = module_0.Box(*list_0, **dict_0)
    box_1 = box_0.__copy__()
    box_2 = box_1.__copy__()
    str_3 = box_1.__repr__()
    tuple_0 = module_1.split(box_2, list_0)
    module_1.bisect(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\x1aY\xb1\xb1\xbdOe\xe3_\x01'
    none_type_0 = None
    var_0 = module_1.shrink(bytes_0, bytes_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 10
    module_1.constrain(var_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    dict_0 = {}
    box_0 = module_0.Box(*list_0, **dict_0)
    module_1.constrain(box_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    box_0 = module_0.Box(**dict_0)
    bool_0 = False
    int_0 = 1024
    int_1 = 0
    list_0 = [bool_0, int_1, int_1, int_0]
    int_2 = 0
    module_1.split(box_0, list_0, int_2)

def test_case_6():
    bytes_0 = b"\xd1UX\xbb$4P\x8a\x92\x89\x95\x91\xf2\xf0\xcc'C"
    none_type_0 = None
    var_0 = module_1.shrink(bytes_0, bytes_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 17
    var_1 = var_0.__copy__()
    assert len(var_1) == 17
    tuple_0 = module_1.split(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'xL8d|`S3+Qad\t|M0}'
    module_1.shrink(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0]
    var_0 = module_1.shrink(list_0, bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 1
    str_0 = '9%+GtFZd92tfmi5LB'
    str_1 = 'i@'
    list_1 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {str_0: str_0, str_1: str_1, str_0: list_1}
    box_0 = module_0.Box(*list_0, **dict_0)
    box_1 = box_0.__copy__()
    bool_1 = False
    var_1 = module_1.shrink(box_0, bool_1)
    none_type_0 = None
    var_2 = module_1.shrink(box_1, none_type_0, list_0)
    box_2 = var_1.__copy__()
    tuple_0 = module_1.bisect(box_2, list_1)
    module_1.constrain(var_1, list_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    str_0 = '9%+GtFZd92tfmi5LB'
    str_1 = 'i@'
    str_2 = 'G!B"\rRV<T7{#t'
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {str_0: str_0, str_1: str_1, str_2: list_0}
    box_0 = module_0.Box(*list_0, **dict_0)
    box_1 = box_0.__copy__()
    box_2 = box_1.__copy__()
    str_3 = box_1.__repr__()
    bool_1 = False
    var_0 = module_1.shrink(box_2, bool_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'numpy.ndarray'
    assert len(var_0) == 4
    none_type_0 = None
    var_1 = module_1.shrink(box_1, none_type_0, list_0)
    assert len(var_1) == 4
    box_3 = var_0.__copy__()
    assert len(box_3) == 4
    tuple_0 = module_1.bisect(box_3, list_0)
    module_2.ndarray()