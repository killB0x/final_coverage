# Automatically generated by Pynguin.
import pytest
import pyke.rule_base as module_0
import builtins as module_1

def test_case_0():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    stop_iterator_0 = module_0.stopIterator(bytes_0, bytes_0)
    var_0 = stop_iterator_0.__next__()
    assert var_0 == 216

def test_case_1():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    outer_iterable_0 = module_0.outer_iterable(bytes_0)
    var_0 = outer_iterable_0.close()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    outer_iterable_0 = module_0.outer_iterable(bytes_0)
    outer_iterable_0.__next__()

def test_case_3():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    rule_list_0 = module_0.rule_list(bytes_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.trace(bytes_0)
    assert var_0 is False

def test_case_4():
    stop_proof_0 = module_0.StopProof()

def test_case_5():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    stop_iterator_context_0 = module_0.stopIteratorContext(bytes_0, bytes_0)
    stop_iterator_0 = module_0.stopIterator(bytes_0, bytes_0)
    var_0 = stop_iterator_0.__next__()
    assert var_0 == 216

def test_case_6():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    stop_iterator_context_0 = module_0.stopIteratorContext(bytes_0, bytes_0)
    set_0 = {bytes_0, bytes_0, stop_iterator_context_0}
    stop_iterator_0 = module_0.stopIterator(stop_iterator_context_0, set_0)
    var_0 = stop_iterator_0.__next__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyke.rule_base.stopIteratorContext'
    assert var_0.rule_base == b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    assert var_0.context == b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    outer_iterable_0 = module_0.outer_iterable(stop_iterator_0)
    outer_iterable_1 = module_0.outer_iterable(outer_iterable_0)
    var_1 = outer_iterable_0.close()
    var_2 = outer_iterable_0.__next__()
    assert f'{type(outer_iterable_0.inner_it).__module__}.{type(outer_iterable_0.inner_it).__qualname__}' == 'builtins.bytes_iterator'

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    stop_iterator_context_0 = module_0.stopIteratorContext(none_type_0, none_type_0)
    stop_iterator_context_0.__exit__(none_type_0, none_type_0, stop_iterator_context_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 131
    module_0.stopIterator(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\xd8\xc7\xb2\x9e\xaeQ+\x8c0\xc9>\xf8Cf\x941#\xfe'
    stop_iterator_0 = module_0.stopIterator(bytes_0, bytes_0)
    module_1.object(*stop_iterator_0)

def test_case_10():
    bytes_0 = b'\x9b\xdfXd\x84\xe0\x15'
    chain_context_0 = module_0.chain_context(bytes_0)
    var_0 = chain_context_0.__exit__(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = []
    chain_context_0 = module_0.chain_context(list_0)
    var_0 = chain_context_0.__enter__()
    var_0.run_fc_rules(chain_context_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    rule_list_0 = module_0.rule_list(none_type_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.add_bc_rule(rule_list_0)
    assert f'{type(rule_list_0.bc_rules).__module__}.{type(rule_list_0.bc_rules).__qualname__}' == 'builtins.list'
    assert len(rule_list_0.bc_rules) == 1
    rule_list_0.untrace(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    rule_list_0 = module_0.rule_list(bool_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.prove(rule_list_0, rule_list_0, bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyke.rule_base.chain_context'
    assert f'{type(var_0.outer_it).__module__}.{type(var_0.outer_it).__qualname__}' == 'pyke.rule_base.outer_iterable'
    var_1 = rule_list_0.trace(rule_list_0)
    var_2 = rule_list_0.add_fc_rule_ref(rule_list_0, var_1)
    var_3 = rule_list_0.untrace(var_1)
    module_0.stopIterator(rule_list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    rule_list_0 = module_0.rule_list(none_type_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.untrace(none_type_0)
    assert var_0 is False
    rule_list_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    rule_list_0 = module_0.rule_list(none_type_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.num_bc_rules()
    assert var_0 == 0
    var_1 = rule_list_0.add_bc_rule(rule_list_0)
    var_2 = rule_list_0.add_bc_rule(rule_list_0)
    rule_list_0.untrace(none_type_0)

def test_case_16():
    bytes_0 = b'\xd8\xc7\x03\x9e\xaeQ\xa9+\x8c0\xc9>\xf8\xd2Cf\x941J\xfe'
    stop_iterator_context_0 = module_0.stopIteratorContext(bytes_0, bytes_0)
    stop_iterator_0 = module_0.stopIterator(bytes_0, bytes_0)
    var_0 = stop_iterator_0.__next__()
    assert var_0 == 216
    outer_iterable_0 = module_0.outer_iterable(bytes_0)
    outer_iterable_1 = module_0.outer_iterable(outer_iterable_0)
    var_1 = outer_iterable_1.close()

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    rule_list_0 = module_0.rule_list(none_type_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.add_bc_rule(none_type_0)
    assert rule_list_0.bc_rules == [None]
    rule_list_0.trace(var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    rule_list_0 = module_0.rule_list(bool_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.add_bc_rule(rule_list_0)
    assert f'{type(rule_list_0.bc_rules).__module__}.{type(rule_list_0.bc_rules).__qualname__}' == 'builtins.list'
    assert len(rule_list_0.bc_rules) == 1
    var_1 = rule_list_0.prove(var_0, bool_0, rule_list_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pyke.rule_base.chain_context'
    assert f'{type(var_1.outer_it).__module__}.{type(var_1.outer_it).__qualname__}' == 'pyke.rule_base.outer_iterable'
    var_2 = rule_list_0.trace(var_0)
    assert var_2 is False
    rule_list_0.activate()

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = False
    none_type_0 = None
    rule_list_0 = module_0.rule_list(none_type_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.prove(bool_0, rule_list_0, rule_list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyke.rule_base.chain_context'
    assert f'{type(var_0.outer_it).__module__}.{type(var_0.outer_it).__qualname__}' == 'pyke.rule_base.outer_iterable'
    var_1 = rule_list_0.add_bc_rule(rule_list_0)
    var_2 = var_0.__exit__(rule_list_0, var_1, var_1)
    var_3 = rule_list_0.prove(rule_list_0, rule_list_0, bool_0)
    rule_list_0.trace(var_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    rule_list_0 = module_0.rule_list(bool_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.prove(bool_0, rule_list_0, rule_list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyke.rule_base.chain_context'
    assert f'{type(var_0.outer_it).__module__}.{type(var_0.outer_it).__qualname__}' == 'pyke.rule_base.outer_iterable'
    var_1 = rule_list_0.add_bc_rule(rule_list_0)
    list_0 = var_0.__enter__()
    module_0.StopProof(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    rule_list_0 = module_0.rule_list(bool_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.prove(bool_0, rule_list_0, rule_list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyke.rule_base.chain_context'
    assert f'{type(var_0.outer_it).__module__}.{type(var_0.outer_it).__qualname__}' == 'pyke.rule_base.outer_iterable'
    var_1 = rule_list_0.add_bc_rule(rule_list_0)
    var_2 = rule_list_0.num_bc_rules()
    list_0 = []
    stop_proof_0 = module_0.StopProof(*list_0)
    var_3 = rule_list_0.prove(var_1, bool_0, rule_list_0)
    var_4 = rule_list_0.untrace(rule_list_0)
    assert var_4 is False
    var_5 = var_3.__exit__(rule_list_0, stop_proof_0, stop_proof_0)
    var_6 = rule_list_0.prove(rule_list_0, rule_list_0, bool_0)
    var_7 = rule_list_0.trace(var_1)
    assert var_7 is False
    rule_list_0.untrace(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    rule_list_0 = module_0.rule_list(bool_0)
    assert rule_list_0.bc_rules == []
    var_0 = rule_list_0.prove(bool_0, rule_list_0, rule_list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyke.rule_base.chain_context'
    assert f'{type(var_0.outer_it).__module__}.{type(var_0.outer_it).__qualname__}' == 'pyke.rule_base.outer_iterable'
    var_1 = var_0.__enter__()
    stop_proof_0 = module_0.StopProof(*var_1)
    var_2 = rule_list_0.prove(rule_list_0, bool_0, rule_list_0)
    var_3 = var_2.__exit__(rule_list_0, stop_proof_0, stop_proof_0)
    var_4 = rule_list_0.prove(rule_list_0, rule_list_0, bool_0)
    var_5 = rule_list_0.trace(var_1)
    var_6 = rule_list_0.untrace(bool_0)
    var_6.activate()