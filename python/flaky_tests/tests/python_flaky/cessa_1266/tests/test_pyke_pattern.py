# Automatically generated by Pynguin.
import pytest
import pyke.pattern as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = (1228+3629.09j)
    pattern_literal_0 = module_0.pattern_literal(complex_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == (1228+3629.09j)
    var_0 = pattern_literal_0.__eq__(complex_0)
    assert var_0 is True
    var_0.is_data(complex_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ''
    set_0 = {str_0, str_0, str_0, str_0}
    pattern_literal_0 = module_0.pattern_literal(set_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == {''}
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_0 = module_0.pattern()
    none_type_0 = None
    var_0 = pattern_tuple_0.match_data(none_type_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is False
    var_1 = pattern_tuple_0.lookup(none_type_0)
    var_2 = pattern_tuple_0.simple_match_pattern(str_0, pattern_literal_0, var_0, pattern_0)
    var_3 = var_1.__hash__()
    assert var_3 == 5740354900026072187
    pattern_literal_1 = module_0.pattern_literal(pattern_0)
    var_1.match_pattern(none_type_0, none_type_0, pattern_literal_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'7\xcbL\xa1\xbfv\xadn\x89\xc0\r\xc5i;\xba\x8d'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (55, 203, 76, 161, 191, 118, 173, 110, 137, 192, 13, 197, 105, 59, 186, 141)
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.__ne__(bytes_0)
    assert var_0 is True
    pattern_tuple_0.as_data(bytes_0, final=bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\xb6\xf9|\xd8\xc8\x85\xcf\xb4\xb4\xb5\x9b\x1d\xd4),\x9d\x01\xd5'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (182, 249, 124, 216, 200, 133, 207, 180, 180, 181, 155, 29, 212, 41, 44, 157, 1, 213)
    assert pattern_tuple_0.rest_var is None
    pattern_tuple_0.match_data(pattern_tuple_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    var_0 = pattern_tuple_0.__ne__(str_0)
    assert var_0 is True
    pattern_tuple_1 = module_0.pattern_tuple(str_0)
    var_1 = pattern_tuple_1.lookup(var_0)
    var_2 = pattern_tuple_1.lookup(var_0, str_0)
    var_3 = var_2.is_data(var_2)
    assert var_3 is True
    var_4 = var_0.__ne__(str_0)
    pattern_literal_0 = module_0.pattern_literal(pattern_tuple_1)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert f'{type(pattern_literal_0.literal).__module__}.{type(pattern_literal_0.literal).__qualname__}' == 'pyke.pattern.pattern_tuple'
    var_5 = var_2.match_pattern(var_4, pattern_tuple_1, pattern_literal_0, var_2)
    assert var_5 is False
    var_6 = var_2.match_pattern(var_2, var_5, var_1, pattern_tuple_0)
    assert var_6 is True
    var_7 = var_2.as_data(var_0)
    var_8 = var_2.simple_match_pattern(pattern_tuple_1, var_0, var_2, var_2)
    pattern_tuple_0.match_data(pattern_tuple_0, pattern_tuple_1, var_8)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'7\xcbL\xa1\xbfv\xadn\x89\xc0\r\xc5i;\xba\x8d'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (55, 203, 76, 161, 191, 118, 173, 110, 137, 192, 13, 197, 105, 59, 186, 141)
    assert pattern_tuple_0.rest_var is None
    pattern_tuple_0.is_data(pattern_tuple_0)

def test_case_6():
    pattern_0 = module_0.pattern()

def test_case_7():
    pattern_0 = module_0.pattern()
    var_0 = pattern_0.__ne__(pattern_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_8():
    pattern_0 = module_0.pattern()
    pattern_0.simple_match_pattern(pattern_0, pattern_0, pattern_0, pattern_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'g8l&\x0by[&4M;XyFs6`d['
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ('g', '8', 'l', '&', '\x0b', 'y', '[', '&', '4', 'M', ';', 'X', 'y', 'F', 's', '6', '`', 'd', '[')
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.lookup(str_0)
    set_0 = {var_0, var_0, str_0, str_0}
    pattern_tuple_0.match_pattern(pattern_tuple_0, set_0, var_0, var_0)

def test_case_10():
    bytes_0 = b'1l\x13'
    pattern_literal_0 = module_0.pattern_literal(bytes_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == b'1l\x13'

def test_case_11():
    none_type_0 = None
    pattern_literal_0 = module_0.pattern_literal(none_type_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal is None
    var_0 = pattern_literal_0.__hash__()
    assert var_0 == 8735092410762
    var_1 = var_0.__hash__()

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = ''
    set_0 = {str_0, str_0, str_0, str_0}
    pattern_literal_0 = module_0.pattern_literal(set_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == {''}
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_0 = module_0.pattern()
    none_type_0 = None
    var_0 = pattern_tuple_0.match_data(none_type_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is False
    var_1 = pattern_tuple_0.lookup(none_type_0)
    var_2 = pattern_tuple_0.lookup(pattern_literal_0, pattern_literal_0)
    var_3 = pattern_tuple_0.__eq__(var_1)
    assert var_3 is True
    var_4 = pattern_literal_0.as_data(var_0, var_1)
    pattern_tuple_0.match_pattern(pattern_tuple_0, str_0, var_1, pattern_tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    pattern_0 = module_0.pattern()
    none_type_0 = None
    pattern_literal_0 = module_0.pattern_literal(pattern_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert f'{type(pattern_literal_0.literal).__module__}.{type(pattern_literal_0.literal).__qualname__}' == 'pyke.pattern.pattern'
    var_0 = pattern_literal_0.is_data(pattern_0)
    var_1 = var_0.__eq__(pattern_0)
    var_1.match_pattern(none_type_0, none_type_0, pattern_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 3161
    module_0.pattern_tuple(int_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = 'i'
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ('i',)
    assert pattern_tuple_0.rest_var == 'i'
    pattern_tuple_0.match_pattern(pattern_tuple_0, str_0, pattern_tuple_0, pattern_tuple_0)

def test_case_16():
    str_0 = 'r$e'
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ('r', '$', 'e')
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.match_data(pattern_tuple_0, str_0, pattern_tuple_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'7\xcbL\xa1\xbfv\xadn\x89\xc0\r\xc5i;\xba\x8d'
    pattern_literal_0 = module_0.pattern_literal(bytes_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == b'7\xcbL\xa1\xbfv\xadn\x89\xc0\r\xc5i;\xba\x8d'
    var_0 = pattern_literal_0.__hash__()
    assert var_0 == 8250284025051455281
    str_0 = "0`7[\\u'_BZ]C"
    pattern_literal_1 = module_0.pattern_literal(str_0)
    var_1 = pattern_literal_1.as_data(str_0)
    var_2 = pattern_literal_1.__ne__(pattern_literal_1)
    assert var_2 is False
    var_3 = pattern_literal_0.is_data(bytes_0)
    var_4 = var_3.__ne__(var_0)
    module_0.pattern_tuple(var_0, var_4)

@pytest.mark.xfail(strict=True)
def test_case_18():
    pattern_0 = module_0.pattern()
    bool_0 = True
    bool_1 = True
    pattern_literal_0 = module_0.pattern_literal(bool_1)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal is True
    var_0 = pattern_literal_0.lookup(pattern_literal_0)
    var_1 = pattern_literal_0.is_data(bool_0)
    var_2 = pattern_0.__hash__()
    var_3 = var_0.match_data(var_1, bool_1, pattern_literal_0)
    assert var_3 is True
    var_4 = pattern_literal_0.match_data(bool_0, bool_0, bool_0)
    assert var_4 is True
    var_5 = pattern_literal_0.match_pattern(bool_1, var_1, var_0, bool_1)
    assert var_5 is True
    var_6 = bool_1.__ne__(bool_1)
    var_7 = bool_1.__eq__(pattern_literal_0)
    var_2.is_data(var_3)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b'\xb6\xf9\xb3\xd8\xc8\x85\xcf\xb4\xb4\xb5\x9b\x1d\xd4),\x9d\x01'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (182, 249, 179, 216, 200, 133, 207, 180, 180, 181, 155, 29, 212, 41, 44, 157, 1)
    assert pattern_tuple_0.rest_var is None
    pattern_literal_0 = pattern_tuple_0.__ne__(pattern_tuple_0)
    assert pattern_literal_0 is False
    pattern_tuple_0.match_pattern(pattern_tuple_0, bytes_0, pattern_tuple_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    var_0 = pattern_tuple_0.match_data(pattern_tuple_0, pattern_tuple_0, str_0)
    assert var_0 is False
    pattern_tuple_0.is_data(pattern_tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = ''
    set_0 = {str_0, str_0, str_0, str_0, str_0, str_0, str_0}
    pattern_literal_0 = module_0.pattern_literal(set_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == {''}
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_0 = module_0.pattern()
    none_type_0 = None
    var_0 = pattern_tuple_0.match_data(none_type_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is False
    var_1 = pattern_literal_0.match_data(pattern_0, var_0, pattern_tuple_0)
    assert var_1 is False
    var_2 = pattern_tuple_0.lookup(none_type_0)
    var_3 = pattern_tuple_0.lookup(pattern_literal_0, pattern_literal_0)
    var_4 = pattern_literal_0.__ne__(none_type_0)
    assert var_4 is True
    var_5 = pattern_tuple_0.__eq__(var_2)
    assert var_5 is True
    var_6 = pattern_0.lookup(var_3)
    var_7 = pattern_literal_0.as_data(var_0, var_2)
    pattern_tuple_0.match_pattern(pattern_tuple_0, str_0, var_2, pattern_tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'\xb6\xf9\xb3|\xd8\xc8\x85\xcf\xb4\xb4\xb5\x9b\x1d\xd4),\x9d\x01\xd5'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (182, 249, 179, 124, 216, 200, 133, 207, 180, 180, 181, 155, 29, 212, 41, 44, 157, 1, 213)
    assert pattern_tuple_0.rest_var is None
    pattern_tuple_0.as_data(pattern_tuple_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = False
    bytes_0 = b'\xad\xcb_!'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0, bool_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (173, 203, 95, 33)
    assert pattern_tuple_0.rest_var is False
    pattern_tuple_0.match_data(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '$=o4k-5*N|\x0cqg'
    set_0 = {str_0, str_0, str_0, str_0}
    pattern_literal_0 = module_0.pattern_literal(set_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == {'$=o4k-5*N|\x0cqg'}
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ('$', '=', 'o', '4', 'k', '-', '5', '*', 'N', '|', '\x0c', 'q', 'g')
    assert pattern_tuple_0.rest_var == '$=o4k-5*N|\x0cqg'
    none_type_0 = None
    var_0 = pattern_tuple_0.__eq__(pattern_literal_0)
    assert var_0 is False
    var_1 = pattern_literal_0.match_pattern(pattern_literal_0, set_0, pattern_tuple_0, str_0)
    assert var_1 is False
    var_2 = pattern_tuple_0.lookup(none_type_0)
    var_3 = var_2.__hash__()
    assert var_3 == -3858134688076068330
    bytes_0 = b'\xb3<\xd0\x84u\xd3\x8d\xb6\x97\xc1A#\xf8L \x9d\x80\x1e'
    pattern_literal_1 = module_0.pattern_literal(var_1)
    var_4 = pattern_tuple_0.__eq__(var_2)
    assert var_4 is True
    var_5 = var_0.__ne__(bytes_0)
    pattern_tuple_0.match_pattern(pattern_tuple_0, str_0, var_2, pattern_tuple_0)

def test_case_25():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.is_data(pattern_tuple_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b'\xb6\xf9\xb3|\xd8\xc8\x85\xcf\xb4\xb4\xb5\x9b\x1d\xd4),\x9d\x01\xd5'
    pattern_tuple_0 = module_0.pattern_tuple(bytes_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == (182, 249, 179, 124, 216, 200, 133, 207, 180, 180, 181, 155, 29, 212, 41, 44, 157, 1, 213)
    assert pattern_tuple_0.rest_var is None
    pattern_tuple_0.match_pattern(pattern_tuple_0, bytes_0, pattern_tuple_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'g$'
    set_0 = {str_0, str_0, str_0, str_0}
    pattern_literal_0 = module_0.pattern_literal(set_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == {'g$'}
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ('g', '$')
    assert pattern_tuple_0.rest_var == 'g$'
    none_type_0 = None
    var_0 = pattern_tuple_0.match_data(none_type_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is False
    pattern_tuple_1 = module_0.pattern_tuple(set_0)
    var_1 = pattern_tuple_1.__hash__()
    assert var_1 == -2656213443022840872
    var_2 = pattern_literal_0.match_pattern(pattern_literal_0, set_0, pattern_tuple_0, pattern_literal_0)
    assert var_2 is False
    var_3 = pattern_tuple_0.__eq__(pattern_tuple_1)
    assert var_3 is False
    var_4 = pattern_literal_0.as_data(var_0, pattern_tuple_1)
    pattern_literal_1 = module_0.pattern_literal(var_1)
    assert pattern_literal_1.literal == -2656213443022840872
    var_5 = pattern_tuple_0.match_pattern(pattern_tuple_0, str_0, pattern_tuple_1, pattern_tuple_0)
    assert var_5 is False
    var_6 = pattern_tuple_0.__ne__(pattern_tuple_0)
    assert var_6 is False
    var_6.as_data(set_0, pattern_tuple_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_tuple_0.match_pattern(pattern_tuple_0, str_0, pattern_tuple_0, pattern_tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_tuple_0.is_data(str_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_tuple_0.as_data(str_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_0 = module_0.pattern()
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: pattern_0}
    pattern_tuple_0.match_data(pattern_0, none_type_0, dict_0)

def test_case_32():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.as_data(str_0)
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    var_1 = pattern_tuple_1.match_pattern(str_0, pattern_tuple_0, pattern_tuple_1, var_0)
    assert var_1 is True

def test_case_33():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.match_pattern(str_0, pattern_tuple_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    none_type_0 = None
    var_0 = pattern_tuple_0.match_data(none_type_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is False
    var_1 = pattern_tuple_0.lookup(none_type_0)
    bool_0 = True
    var_1.match_pattern(bool_0, pattern_tuple_0, pattern_tuple_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = ''
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.lookup(none_type_0, set_0)
    var_1 = var_0.match_pattern(none_type_0, set_0, pattern_tuple_0, set_0)
    assert var_1 is True
    pattern_literal_0 = module_0.pattern_literal(set_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == {''}
    pattern_0 = module_0.pattern()
    var_2 = var_0.match_data(set_0, var_0, set_0)
    assert var_2 is False
    var_2.lookup(var_1)

def test_case_36():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.as_data(str_0)
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    var_1 = pattern_tuple_1.match_pattern(str_0, pattern_tuple_0, pattern_tuple_1, var_0)
    assert var_1 is True
    var_2 = pattern_tuple_0.match_data(var_1, var_0, var_0)
    assert var_2 is True
    pattern_0 = module_0.pattern()
    var_3 = pattern_tuple_1.is_data(pattern_tuple_1)
    assert var_3 is True
    var_4 = var_3.__hash__()

@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0, str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var == ''
    pattern_tuple_1 = module_0.pattern_tuple(str_0)
    var_0 = pattern_tuple_0.lookup(str_0)
    pattern_tuple_1.match_pattern(pattern_tuple_1, pattern_tuple_0, var_0, pattern_tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    var_0 = pattern_tuple_0.as_data(str_0)
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    none_type_0 = None
    pattern_tuple_2 = module_0.pattern_tuple(str_0)
    var_1 = pattern_tuple_1.lookup(var_0)
    var_2 = pattern_tuple_1.match_data(pattern_tuple_2, var_1, pattern_tuple_1)
    assert var_2 is False
    var_3 = pattern_tuple_2.lookup(none_type_0, str_0)
    var_4 = var_3.as_data(var_0, pattern_tuple_2)
    var_5 = var_3.match_pattern(var_3, var_1, var_1, pattern_tuple_1)
    assert var_5 is True
    pattern_tuple_3 = module_0.pattern_tuple(var_0)
    var_6 = pattern_tuple_1.match_pattern(str_0, pattern_tuple_1, pattern_tuple_2, pattern_tuple_1)
    assert var_6 is True
    var_7 = var_3.simple_match_pattern(var_1, var_3, str_0, none_type_0)
    var_8 = pattern_tuple_1.is_data(pattern_tuple_1)
    assert var_8 is True
    var_2.match_data(var_6, var_6, var_6)

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    none_type_0 = None
    pattern_tuple_2 = module_0.pattern_tuple(str_0)
    var_0 = pattern_tuple_1.lookup(pattern_tuple_2)
    var_1 = pattern_tuple_2.lookup(none_type_0, str_0)
    var_2 = var_1.as_data(pattern_tuple_0, pattern_tuple_2)
    var_3 = var_1.match_pattern(var_1, var_0, var_0, pattern_tuple_1)
    assert var_3 is True
    module_0.pattern_tuple(pattern_tuple_2)

def test_case_40():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    var_0 = pattern_tuple_1.match_pattern(str_0, pattern_tuple_0, pattern_tuple_1, pattern_tuple_1)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = ''
    pattern_tuple_0 = module_0.pattern_tuple(str_0)
    assert f'{type(pattern_tuple_0).__module__}.{type(pattern_tuple_0).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_0.elements == ()
    assert pattern_tuple_0.rest_var is None
    none_type_0 = None
    var_0 = pattern_tuple_0.match_pattern(str_0, none_type_0, pattern_tuple_0, pattern_tuple_0)
    assert var_0 is True
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    none_type_1 = None
    var_1 = pattern_tuple_1.match_pattern(str_0, pattern_tuple_0, pattern_tuple_1, none_type_1)
    assert var_1 is False
    var_2 = pattern_tuple_0.is_data(none_type_0)
    assert var_2 is True
    var_3 = pattern_tuple_0.match_data(var_1, none_type_1, none_type_1)
    var_4 = pattern_tuple_1.match_data(none_type_1, none_type_1, str_0)
    pattern_tuple_2 = module_0.pattern_tuple(str_0)
    var_5 = pattern_tuple_1.lookup(var_3)
    var_6 = pattern_tuple_1.match_data(pattern_tuple_2, var_5, pattern_tuple_1)
    var_7 = pattern_tuple_2.lookup(none_type_1, str_0)
    var_8 = var_7.as_data(var_3, pattern_tuple_2)
    var_9 = var_7.match_pattern(var_7, var_4, var_5, pattern_tuple_1)
    assert var_9 is True
    var_10 = pattern_tuple_2.__ne__(pattern_tuple_0)
    assert var_10 is False
    var_11 = pattern_tuple_2.__ne__(pattern_tuple_1)
    assert var_11 is True
    pattern_0 = module_0.pattern()
    var_12 = pattern_tuple_1.match_pattern(str_0, var_4, pattern_tuple_2, pattern_tuple_1)
    assert var_12 is True
    var_5.as_data(var_1, final=var_10)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = ''
    none_type_0 = None
    pattern_literal_0 = module_0.pattern_literal(str_0)
    assert f'{type(pattern_literal_0).__module__}.{type(pattern_literal_0).__qualname__}' == 'pyke.pattern.pattern_literal'
    assert pattern_literal_0.literal == ''
    var_0 = pattern_literal_0.is_data(none_type_0)
    var_1 = var_0.__ne__(str_0)
    pattern_tuple_0 = pattern_literal_0.lookup(var_0)
    none_type_1 = None
    var_2 = pattern_tuple_0.match_pattern(str_0, none_type_1, pattern_tuple_0, pattern_tuple_0)
    assert var_2 is True
    var_3 = pattern_tuple_0.as_data(str_0)
    pattern_tuple_1 = module_0.pattern_tuple(str_0, pattern_tuple_0)
    assert f'{type(pattern_tuple_1).__module__}.{type(pattern_tuple_1).__qualname__}' == 'pyke.pattern.pattern_tuple'
    assert pattern_tuple_1.elements == ()
    assert f'{type(pattern_tuple_1.rest_var).__module__}.{type(pattern_tuple_1.rest_var).__qualname__}' == 'pyke.pattern.pattern_literal'
    none_type_2 = None
    var_4 = pattern_tuple_1.match_pattern(str_0, pattern_tuple_0, pattern_tuple_1, var_3)
    assert var_4 is True
    var_5 = pattern_tuple_0.is_data(none_type_1)
    var_6 = pattern_tuple_0.match_data(var_4, var_3, var_3)
    assert var_6 is True
    var_7 = pattern_tuple_1.match_data(none_type_2, none_type_2, str_0)
    pattern_tuple_2 = module_0.pattern_tuple(str_0)
    var_8 = pattern_tuple_1.lookup(var_6)
    var_9 = pattern_tuple_1.match_data(pattern_tuple_2, var_8, pattern_tuple_1)
    assert var_9 is False
    var_10 = pattern_tuple_2.lookup(none_type_2, str_0)
    var_11 = var_10.as_data(var_3, pattern_tuple_2)
    var_12 = var_7.__hash__()
    var_13 = var_10.match_pattern(var_10, var_7, var_8, pattern_tuple_1)
    assert var_13 is False
    var_14 = pattern_tuple_2.__ne__(pattern_tuple_0)
    assert var_14 is True
    var_15 = pattern_tuple_2.__ne__(pattern_tuple_1)
    assert var_15 is True
    var_16 = var_2.__hash__()
    assert var_16 == 1
    var_9.simple_match_pattern(var_0, var_3, var_16, var_15)