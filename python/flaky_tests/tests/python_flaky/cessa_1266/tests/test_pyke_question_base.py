# Automatically generated by Pynguin.
import pytest
import pyke.question_base as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'h'
    question_base_0 = module_0.question_base(str_0)
    assert f'{type(question_base_0).__module__}.{type(question_base_0).__qualname__}' == 'pyke.question_base.question_base'
    assert question_base_0.name == 'h'
    assert question_base_0.entity_lists == {}
    assert question_base_0.entity_list_type is None
    assert question_base_0.initialized is False
    assert question_base_0.engine is None
    question_base_0.add_question(question_base_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'SCMP_CMP_GT'
    question_base_0 = module_0.question_base(str_0)
    assert f'{type(question_base_0).__module__}.{type(question_base_0).__qualname__}' == 'pyke.question_base.question_base'
    assert question_base_0.name == 'SCMP_CMP_GT'
    assert question_base_0.entity_lists == {}
    assert question_base_0.entity_list_type is None
    assert question_base_0.initialized is False
    assert question_base_0.engine is None
    question_base_0.get_ask_module()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ''
    module_0.question(str_0, str_0, str_0, str_0)

def test_case_3():
    str_0 = 'h'
    question_base_0 = module_0.question_base(str_0)
    assert f'{type(question_base_0).__module__}.{type(question_base_0).__qualname__}' == 'pyke.question_base.question_base'
    assert question_base_0.name == 'h'
    assert question_base_0.entity_lists == {}
    assert question_base_0.entity_list_type is None
    assert question_base_0.initialized is False
    assert question_base_0.engine is None

def test_case_4():
    str_0 = 'h'
    question_0 = module_0.question(str_0, str_0, str_0, str_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == 'h'
    assert question_0.params == ('h',)
    assert question_0.answer_param == 'h'
    assert question_0.answer_param_position == 0
    assert question_0.input_param_positions == ()
    assert question_0.user_question == 'h'
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    bytes_0 = b"\xeb\x05\x91\x01]\x91\xc3\xfa6L\xdb\xff\xb4'\x03c"
    question_0 = module_0.question(bytes_0, bytes_0, bool_0, bool_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == b"\xeb\x05\x91\x01]\x91\xc3\xfa6L\xdb\xff\xb4'\x03c"
    assert question_0.params == (235, 5, 145, 1, 93, 145, 195, 250, 54, 76, 219, 255, 180, 39, 3, 99)
    assert question_0.answer_param is True
    assert question_0.answer_param_position == 3
    assert question_0.input_param_positions == (0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
    assert question_0.user_question is True
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'
    question_0.prove(bytes_0, question_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'd'
    question_0 = module_0.question(str_0, str_0, str_0, str_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == 'd'
    assert question_0.params == ('d',)
    assert question_0.answer_param == 'd'
    assert question_0.answer_param_position == 0
    assert question_0.input_param_positions == ()
    assert question_0.user_question == 'd'
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'
    var_0 = question_0.__repr__()
    assert var_0 == "<question d($d): $d = 'd'>"
    question_1 = module_0.question(var_0, var_0, str_0, question_0)
    assert question_1.name == "<question d($d): $d = 'd'>"
    assert question_1.params == ('<', 'q', 'u', 'e', 's', 't', 'i', 'o', 'n', ' ', 'd', '(', '$', 'd', ')', ':', ' ', '$', 'd', ' ', '=', ' ', "'", 'd', "'", '>')
    assert question_1.input_param_positions == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)
    question_0.lookup(str_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'M'
    question_0 = module_0.question(str_0, str_0, str_0, str_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == 'M'
    assert question_0.params == ('M',)
    assert question_0.answer_param == 'M'
    assert question_0.answer_param_position == 0
    assert question_0.input_param_positions == ()
    assert question_0.user_question == 'M'
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'
    question_base_0 = module_0.question_base(question_0)
    assert f'{type(question_base_0).__module__}.{type(question_base_0).__qualname__}' == 'pyke.question_base.question_base'
    assert f'{type(question_base_0.name).__module__}.{type(question_base_0.name).__qualname__}' == 'pyke.question_base.question'
    assert question_base_0.entity_lists == {}
    assert question_base_0.entity_list_type is None
    assert question_base_0.initialized is False
    assert question_base_0.engine is None
    question_base_0.add_question(question_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'h'
    question_0 = module_0.question(str_0, str_0, str_0, str_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == 'h'
    assert question_0.params == ('h',)
    assert question_0.answer_param == 'h'
    assert question_0.answer_param_position == 0
    assert question_0.input_param_positions == ()
    assert question_0.user_question == 'h'
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'
    module_0.question(question_0, str_0, question_0, question_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'h'
    question_0 = module_0.question(str_0, str_0, str_0, str_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == 'h'
    assert question_0.params == ('h',)
    assert question_0.answer_param == 'h'
    assert question_0.answer_param_position == 0
    assert question_0.input_param_positions == ()
    assert question_0.user_question == 'h'
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'
    var_0 = question_0.reset()
    question_0.lookup(str_0, str_0, question_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'h'
    question_0 = module_0.question(str_0, str_0, str_0, str_0)
    assert f'{type(question_0).__module__}.{type(question_0).__qualname__}' == 'pyke.question_base.question'
    assert question_0.name == 'h'
    assert question_0.params == ('h',)
    assert question_0.answer_param == 'h'
    assert question_0.answer_param_position == 0
    assert question_0.input_param_positions == ()
    assert question_0.user_question == 'h'
    assert question_0.cache == {}
    assert module_0.question.not_found.name == 'question.not_found'
    question_0.lookup(str_0, str_0, question_0)