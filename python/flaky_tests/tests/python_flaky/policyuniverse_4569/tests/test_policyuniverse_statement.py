# Automatically generated by Pynguin.
import pytest
import enum as module_0
import policyuniverse.statement as module_1
import policyuniverse.expander_minimizer as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.EnumMeta()

def test_case_1():
    dict_0 = {}
    statement_0 = module_1.Statement(dict_0)
    assert f'{type(statement_0).__module__}.{type(statement_0).__qualname__}' == 'policyuniverse.statement.Statement'
    assert statement_0.statement == {}
    assert statement_0.condition_entries == []
    assert statement_0.principals == {*()}
    assert statement_0.actions == {*()}
    assert f'{type(module_1.Statement.effect).__module__}.{type(module_1.Statement.effect).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.actions_expanded).__module__}.{type(module_1.Statement.actions_expanded).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.resources).__module__}.{type(module_1.Statement.resources).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_arns).__module__}.{type(module_1.Statement.condition_arns).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_accounts).__module__}.{type(module_1.Statement.condition_accounts).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_orgids).__module__}.{type(module_1.Statement.condition_orgids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_userids).__module__}.{type(module_1.Statement.condition_userids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_cidrs).__module__}.{type(module_1.Statement.condition_cidrs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpcs).__module__}.{type(module_1.Statement.condition_vpcs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpces).__module__}.{type(module_1.Statement.condition_vpces).__qualname__}' == 'builtins.property'

def test_case_2():
    dict_0 = {}
    statement_0 = module_1.Statement(dict_0)
    assert f'{type(statement_0).__module__}.{type(statement_0).__qualname__}' == 'policyuniverse.statement.Statement'
    assert statement_0.statement == {}
    assert statement_0.condition_entries == []
    assert statement_0.principals == {*()}
    assert statement_0.actions == {*()}
    assert f'{type(module_1.Statement.effect).__module__}.{type(module_1.Statement.effect).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.actions_expanded).__module__}.{type(module_1.Statement.actions_expanded).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.resources).__module__}.{type(module_1.Statement.resources).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_arns).__module__}.{type(module_1.Statement.condition_arns).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_accounts).__module__}.{type(module_1.Statement.condition_accounts).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_orgids).__module__}.{type(module_1.Statement.condition_orgids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_userids).__module__}.{type(module_1.Statement.condition_userids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_cidrs).__module__}.{type(module_1.Statement.condition_cidrs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpcs).__module__}.{type(module_1.Statement.condition_vpcs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpces).__module__}.{type(module_1.Statement.condition_vpces).__qualname__}' == 'builtins.property'
    var_0 = statement_0.whos_allowed()

def test_case_3():
    dict_0 = {}
    statement_0 = module_1.Statement(dict_0)
    assert f'{type(statement_0).__module__}.{type(statement_0).__qualname__}' == 'policyuniverse.statement.Statement'
    assert statement_0.statement == {}
    assert statement_0.condition_entries == []
    assert statement_0.principals == {*()}
    assert statement_0.actions == {*()}
    assert f'{type(module_1.Statement.effect).__module__}.{type(module_1.Statement.effect).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.actions_expanded).__module__}.{type(module_1.Statement.actions_expanded).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.resources).__module__}.{type(module_1.Statement.resources).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_arns).__module__}.{type(module_1.Statement.condition_arns).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_accounts).__module__}.{type(module_1.Statement.condition_accounts).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_orgids).__module__}.{type(module_1.Statement.condition_orgids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_userids).__module__}.{type(module_1.Statement.condition_userids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_cidrs).__module__}.{type(module_1.Statement.condition_cidrs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpcs).__module__}.{type(module_1.Statement.condition_vpcs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpces).__module__}.{type(module_1.Statement.condition_vpces).__qualname__}' == 'builtins.property'
    var_0 = statement_0.is_condition_internet_accessible()
    assert var_0 is True

def test_case_4():
    dict_0 = {}
    statement_0 = module_1.Statement(dict_0)
    assert f'{type(statement_0).__module__}.{type(statement_0).__qualname__}' == 'policyuniverse.statement.Statement'
    assert statement_0.statement == {}
    assert statement_0.condition_entries == []
    assert statement_0.principals == {*()}
    assert statement_0.actions == {*()}
    assert f'{type(module_1.Statement.effect).__module__}.{type(module_1.Statement.effect).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.actions_expanded).__module__}.{type(module_1.Statement.actions_expanded).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.resources).__module__}.{type(module_1.Statement.resources).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_arns).__module__}.{type(module_1.Statement.condition_arns).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_accounts).__module__}.{type(module_1.Statement.condition_accounts).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_orgids).__module__}.{type(module_1.Statement.condition_orgids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_userids).__module__}.{type(module_1.Statement.condition_userids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_cidrs).__module__}.{type(module_1.Statement.condition_cidrs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpcs).__module__}.{type(module_1.Statement.condition_vpcs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpces).__module__}.{type(module_1.Statement.condition_vpces).__qualname__}' == 'builtins.property'
    var_0 = statement_0.uses_not_principal()
    assert var_0 is False

def test_case_5():
    dict_0 = {}
    statement_0 = module_1.Statement(dict_0)
    assert f'{type(statement_0).__module__}.{type(statement_0).__qualname__}' == 'policyuniverse.statement.Statement'
    assert statement_0.statement == {}
    assert statement_0.condition_entries == []
    assert statement_0.principals == {*()}
    assert statement_0.actions == {*()}
    assert f'{type(module_1.Statement.effect).__module__}.{type(module_1.Statement.effect).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.actions_expanded).__module__}.{type(module_1.Statement.actions_expanded).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.resources).__module__}.{type(module_1.Statement.resources).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_arns).__module__}.{type(module_1.Statement.condition_arns).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_accounts).__module__}.{type(module_1.Statement.condition_accounts).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_orgids).__module__}.{type(module_1.Statement.condition_orgids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_userids).__module__}.{type(module_1.Statement.condition_userids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_cidrs).__module__}.{type(module_1.Statement.condition_cidrs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpcs).__module__}.{type(module_1.Statement.condition_vpcs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpces).__module__}.{type(module_1.Statement.condition_vpces).__qualname__}' == 'builtins.property'
    var_0 = statement_0.is_internet_accessible()

@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    statement_0 = module_1.Statement(dict_0)
    assert f'{type(statement_0).__module__}.{type(statement_0).__qualname__}' == 'policyuniverse.statement.Statement'
    assert statement_0.statement == {}
    assert statement_0.condition_entries == []
    assert statement_0.principals == {*()}
    assert statement_0.actions == {*()}
    assert f'{type(module_1.Statement.effect).__module__}.{type(module_1.Statement.effect).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.actions_expanded).__module__}.{type(module_1.Statement.actions_expanded).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.resources).__module__}.{type(module_1.Statement.resources).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_arns).__module__}.{type(module_1.Statement.condition_arns).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_accounts).__module__}.{type(module_1.Statement.condition_accounts).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_orgids).__module__}.{type(module_1.Statement.condition_orgids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_userids).__module__}.{type(module_1.Statement.condition_userids).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_cidrs).__module__}.{type(module_1.Statement.condition_cidrs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpcs).__module__}.{type(module_1.Statement.condition_vpcs).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.Statement.condition_vpces).__module__}.{type(module_1.Statement.condition_vpces).__qualname__}' == 'builtins.property'
    var_0 = statement_0.action_summary()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.defaultdict'
    assert len(var_0) == 0
    module_2.get_actions_from_statement(statement_0)