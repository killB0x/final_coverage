# Automatically generated by Pynguin.
import pytest
import policyuniverse.policy as module_0

def test_case_0():
    dict_0 = {}
    policy_0 = module_0.Policy(dict_0)
    assert f'{type(policy_0).__module__}.{type(policy_0).__qualname__}' == 'policyuniverse.policy.Policy'
    assert policy_0.policy == {}
    assert policy_0.statements == []
    assert f'{type(module_0.Policy.principals).__module__}.{type(module_0.Policy.principals).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Policy.condition_entries).__module__}.{type(module_0.Policy.condition_entries).__qualname__}' == 'builtins.property'

def test_case_1():
    dict_0 = {}
    policy_0 = module_0.Policy(dict_0)
    assert f'{type(policy_0).__module__}.{type(policy_0).__qualname__}' == 'policyuniverse.policy.Policy'
    assert policy_0.policy == {}
    assert policy_0.statements == []
    assert f'{type(module_0.Policy.principals).__module__}.{type(module_0.Policy.principals).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Policy.condition_entries).__module__}.{type(module_0.Policy.condition_entries).__qualname__}' == 'builtins.property'
    var_0 = policy_0.is_internet_accessible()

def test_case_2():
    dict_0 = {}
    policy_0 = module_0.Policy(dict_0)
    assert f'{type(policy_0).__module__}.{type(policy_0).__qualname__}' == 'policyuniverse.policy.Policy'
    assert policy_0.policy == {}
    assert policy_0.statements == []
    assert f'{type(module_0.Policy.principals).__module__}.{type(module_0.Policy.principals).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Policy.condition_entries).__module__}.{type(module_0.Policy.condition_entries).__qualname__}' == 'builtins.property'
    var_0 = policy_0.whos_allowed()

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -542
    module_0.Policy(int_0)

def test_case_4():
    dict_0 = {}
    policy_0 = module_0.Policy(dict_0)
    assert f'{type(policy_0).__module__}.{type(policy_0).__qualname__}' == 'policyuniverse.policy.Policy'
    assert policy_0.policy == {}
    assert policy_0.statements == []
    assert f'{type(module_0.Policy.principals).__module__}.{type(module_0.Policy.principals).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Policy.condition_entries).__module__}.{type(module_0.Policy.condition_entries).__qualname__}' == 'builtins.property'
    var_0 = policy_0.action_summary()

def test_case_5():
    dict_0 = {}
    policy_0 = module_0.Policy(dict_0)
    assert f'{type(policy_0).__module__}.{type(policy_0).__qualname__}' == 'policyuniverse.policy.Policy'
    assert policy_0.policy == {}
    assert policy_0.statements == []
    assert f'{type(module_0.Policy.principals).__module__}.{type(module_0.Policy.principals).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Policy.condition_entries).__module__}.{type(module_0.Policy.condition_entries).__qualname__}' == 'builtins.property'
    var_0 = policy_0.internet_accessible_actions()