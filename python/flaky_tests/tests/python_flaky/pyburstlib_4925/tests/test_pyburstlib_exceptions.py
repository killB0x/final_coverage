# Automatically generated by Pynguin.
import pytest
import pyburstlib.exceptions as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    burst_a_p_i_error_code_0 = module_0.BurstAPIErrorCode(none_type_0)
    assert module_0.BurstAPIErrorCode.GENERIC.description == 'Generic'
    assert module_0.BurstAPIErrorCode.OK.description == 'OK'
    assert module_0.BurstAPIErrorCode.CREATED.description == 'Created'
    assert module_0.BurstAPIErrorCode.ACCEPTED.description == 'Accepted'
    assert module_0.BurstAPIErrorCode.NO_CONTENT.description == 'No Content'
    assert module_0.BurstAPIErrorCode.MOVED_PERMANENTLY.description == 'Moved Permanently'
    assert module_0.BurstAPIErrorCode.FOUND.description == 'Found'
    assert module_0.BurstAPIErrorCode.TEMPORARY_REDIRECT.description == 'Temporary Redirect'
    assert module_0.BurstAPIErrorCode.PERMANENT_REDIRECT.description == 'Permanent Redirect'
    assert module_0.BurstAPIErrorCode.BAD_REQUEST.description == 'Bad Request'
    assert module_0.BurstAPIErrorCode.UNAUTHORIZED.description == 'Unauthorized'
    assert module_0.BurstAPIErrorCode.NOT_FOUND.description == 'Not Found'
    assert module_0.BurstAPIErrorCode.METHOD_NOT_ALLOWED.description == 'Method Not Allowed'
    assert module_0.BurstAPIErrorCode.NOT_ACCEPTABLE.description == 'Not Acceptable'
    assert module_0.BurstAPIErrorCode.PROXY_AUTHENTICATION_REQUIRED.description == 'Proxy Authentication Required'
    assert module_0.BurstAPIErrorCode.REQUEST_TIMEOUT.description == 'Request Timeout'
    assert module_0.BurstAPIErrorCode.CONFLICT.description == 'Conflict'
    assert module_0.BurstAPIErrorCode.GONE.description == 'Gone'
    assert module_0.BurstAPIErrorCode.PAYLOAD_TOO_LARGE.description == 'Payload Too Large'
    assert module_0.BurstAPIErrorCode.IM_A_TEAPOT.description == "I'm a teapot"
    assert module_0.BurstAPIErrorCode.UNPROCESSABLE_ENTITY.description == 'Unprocessable Entity'
    assert module_0.BurstAPIErrorCode.LOCKED.description == 'Locked'
    assert module_0.BurstAPIErrorCode.FAILED_DEPENDENCY.description == 'Failed Dependency'
    assert module_0.BurstAPIErrorCode.UPGRADE_REQUIRED.description == 'Upgrade Required'
    assert module_0.BurstAPIErrorCode.TOO_MANY_REQUESTS.description == 'Too Many Requests'
    assert module_0.BurstAPIErrorCode.CLIENT_CLOSED_REQUEST.description == 'Client Closed Request'
    assert module_0.BurstAPIErrorCode.INTERNAL_SERVER_ERROR.description == 'Internal Server Error'
    assert module_0.BurstAPIErrorCode.NOT_IMPLEMENTED.description == 'Not Implemented'
    assert module_0.BurstAPIErrorCode.BAD_GATEWAY.description == 'Bad Gateway'
    assert module_0.BurstAPIErrorCode.SERVICE_UNAVAILABLE.description == 'Service Unavailable'
    assert module_0.BurstAPIErrorCode.GATEWAY_TIMEOUT.description == 'Gateway Timeout'
    assert module_0.BurstAPIErrorCode.HTTP_VERSION_NOT_SUPPORTED.description == 'HTTP Version Not Supported'
    py_burst_lib_exception_0 = module_0.PyBurstLibException(burst_a_p_i_error_code_0)
    assert f'{type(py_burst_lib_exception_0).__module__}.{type(py_burst_lib_exception_0).__qualname__}' == 'pyburstlib.exceptions.PyBurstLibException'
    assert f'{type(py_burst_lib_exception_0.code).__module__}.{type(py_burst_lib_exception_0.code).__qualname__}' == 'pyburstlib.exceptions.ErrorCode'
    assert f'{type(py_burst_lib_exception_0.message).__module__}.{type(py_burst_lib_exception_0.message).__qualname__}' == 'pyburstlib.exceptions.BurstAPIErrorCode'
    burst_a_p_i_error_code_1 = module_0.BurstAPIErrorCode(py_burst_lib_exception_0)
    float_0 = 1262.0
    error_code_0 = module_0.ErrorCode(float_0)
    var_0 = error_code_0.from_http_code(float_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pyburstlib.exceptions.BurstAPIErrorCode'
    assert var_0.description == pytest.approx(1262.0, abs=0.01, rel=0.01)
    var_1 = error_code_0.__str__()
    none_type_1 = None
    var_2 = var_1.__str__()
    module_0.BurstAPIException(none_type_1)

def test_case_1():
    py_burst_lib_exception_0 = module_0.PyBurstLibException()
    assert f'{type(py_burst_lib_exception_0).__module__}.{type(py_burst_lib_exception_0).__qualname__}' == 'pyburstlib.exceptions.PyBurstLibException'
    assert f'{type(py_burst_lib_exception_0.code).__module__}.{type(py_burst_lib_exception_0.code).__qualname__}' == 'pyburstlib.exceptions.ErrorCode'
    assert py_burst_lib_exception_0.message == 'Generic'

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    burst_a_p_i_error_code_0 = module_0.BurstAPIErrorCode(bool_0)
    assert module_0.BurstAPIErrorCode.GENERIC.description == 'Generic'
    assert module_0.BurstAPIErrorCode.OK.description == 'OK'
    assert module_0.BurstAPIErrorCode.CREATED.description == 'Created'
    assert module_0.BurstAPIErrorCode.ACCEPTED.description == 'Accepted'
    assert module_0.BurstAPIErrorCode.NO_CONTENT.description == 'No Content'
    assert module_0.BurstAPIErrorCode.MOVED_PERMANENTLY.description == 'Moved Permanently'
    assert module_0.BurstAPIErrorCode.FOUND.description == 'Found'
    assert module_0.BurstAPIErrorCode.TEMPORARY_REDIRECT.description == 'Temporary Redirect'
    assert module_0.BurstAPIErrorCode.PERMANENT_REDIRECT.description == 'Permanent Redirect'
    assert module_0.BurstAPIErrorCode.BAD_REQUEST.description == 'Bad Request'
    assert module_0.BurstAPIErrorCode.UNAUTHORIZED.description == 'Unauthorized'
    assert module_0.BurstAPIErrorCode.NOT_FOUND.description == 'Not Found'
    assert module_0.BurstAPIErrorCode.METHOD_NOT_ALLOWED.description == 'Method Not Allowed'
    assert module_0.BurstAPIErrorCode.NOT_ACCEPTABLE.description == 'Not Acceptable'
    assert module_0.BurstAPIErrorCode.PROXY_AUTHENTICATION_REQUIRED.description == 'Proxy Authentication Required'
    assert module_0.BurstAPIErrorCode.REQUEST_TIMEOUT.description == 'Request Timeout'
    assert module_0.BurstAPIErrorCode.CONFLICT.description == 'Conflict'
    assert module_0.BurstAPIErrorCode.GONE.description == 'Gone'
    assert module_0.BurstAPIErrorCode.PAYLOAD_TOO_LARGE.description == 'Payload Too Large'
    assert module_0.BurstAPIErrorCode.IM_A_TEAPOT.description == "I'm a teapot"
    assert module_0.BurstAPIErrorCode.UNPROCESSABLE_ENTITY.description == 'Unprocessable Entity'
    assert module_0.BurstAPIErrorCode.LOCKED.description == 'Locked'
    assert module_0.BurstAPIErrorCode.FAILED_DEPENDENCY.description == 'Failed Dependency'
    assert module_0.BurstAPIErrorCode.UPGRADE_REQUIRED.description == 'Upgrade Required'
    assert module_0.BurstAPIErrorCode.TOO_MANY_REQUESTS.description == 'Too Many Requests'
    assert module_0.BurstAPIErrorCode.CLIENT_CLOSED_REQUEST.description == 'Client Closed Request'
    assert module_0.BurstAPIErrorCode.INTERNAL_SERVER_ERROR.description == 'Internal Server Error'
    assert module_0.BurstAPIErrorCode.NOT_IMPLEMENTED.description == 'Not Implemented'
    assert module_0.BurstAPIErrorCode.BAD_GATEWAY.description == 'Bad Gateway'
    assert module_0.BurstAPIErrorCode.SERVICE_UNAVAILABLE.description == 'Service Unavailable'
    assert module_0.BurstAPIErrorCode.GATEWAY_TIMEOUT.description == 'Gateway Timeout'
    assert module_0.BurstAPIErrorCode.HTTP_VERSION_NOT_SUPPORTED.description == 'HTTP Version Not Supported'
    burst_a_p_i_error_code_1 = module_0.BurstAPIErrorCode(bool_0, bool_0)
    var_0 = burst_a_p_i_error_code_1.__str__()
    module_0.PyBurstLibException(code=var_0)

def test_case_3():
    py_burst_lib_exception_0 = module_0.PyBurstLibException()
    assert f'{type(py_burst_lib_exception_0).__module__}.{type(py_burst_lib_exception_0).__qualname__}' == 'pyburstlib.exceptions.PyBurstLibException'
    assert f'{type(py_burst_lib_exception_0.code).__module__}.{type(py_burst_lib_exception_0.code).__qualname__}' == 'pyburstlib.exceptions.ErrorCode'
    assert py_burst_lib_exception_0.message == 'Generic'
    var_0 = py_burst_lib_exception_0.__str__()
    assert var_0 == 'Generic'
    var_1 = var_0.__str__()
    assert var_1 == 'Generic'
    var_2 = var_1.__str__()
    assert var_2 == 'Generic'

def test_case_4():
    str_0 = '\n)\n[>o[@9DCm+gNP'
    burst_a_p_i_error_code_0 = module_0.BurstAPIErrorCode(str_0, str_0)
    assert module_0.BurstAPIErrorCode.GENERIC.description == 'Generic'
    assert module_0.BurstAPIErrorCode.OK.description == 'OK'
    assert module_0.BurstAPIErrorCode.CREATED.description == 'Created'
    assert module_0.BurstAPIErrorCode.ACCEPTED.description == 'Accepted'
    assert module_0.BurstAPIErrorCode.NO_CONTENT.description == 'No Content'
    assert module_0.BurstAPIErrorCode.MOVED_PERMANENTLY.description == 'Moved Permanently'
    assert module_0.BurstAPIErrorCode.FOUND.description == 'Found'
    assert module_0.BurstAPIErrorCode.TEMPORARY_REDIRECT.description == 'Temporary Redirect'
    assert module_0.BurstAPIErrorCode.PERMANENT_REDIRECT.description == 'Permanent Redirect'
    assert module_0.BurstAPIErrorCode.BAD_REQUEST.description == 'Bad Request'
    assert module_0.BurstAPIErrorCode.UNAUTHORIZED.description == 'Unauthorized'
    assert module_0.BurstAPIErrorCode.NOT_FOUND.description == 'Not Found'
    assert module_0.BurstAPIErrorCode.METHOD_NOT_ALLOWED.description == 'Method Not Allowed'
    assert module_0.BurstAPIErrorCode.NOT_ACCEPTABLE.description == 'Not Acceptable'
    assert module_0.BurstAPIErrorCode.PROXY_AUTHENTICATION_REQUIRED.description == 'Proxy Authentication Required'
    assert module_0.BurstAPIErrorCode.REQUEST_TIMEOUT.description == 'Request Timeout'
    assert module_0.BurstAPIErrorCode.CONFLICT.description == 'Conflict'
    assert module_0.BurstAPIErrorCode.GONE.description == 'Gone'
    assert module_0.BurstAPIErrorCode.PAYLOAD_TOO_LARGE.description == 'Payload Too Large'
    assert module_0.BurstAPIErrorCode.IM_A_TEAPOT.description == "I'm a teapot"
    assert module_0.BurstAPIErrorCode.UNPROCESSABLE_ENTITY.description == 'Unprocessable Entity'
    assert module_0.BurstAPIErrorCode.LOCKED.description == 'Locked'
    assert module_0.BurstAPIErrorCode.FAILED_DEPENDENCY.description == 'Failed Dependency'
    assert module_0.BurstAPIErrorCode.UPGRADE_REQUIRED.description == 'Upgrade Required'
    assert module_0.BurstAPIErrorCode.TOO_MANY_REQUESTS.description == 'Too Many Requests'
    assert module_0.BurstAPIErrorCode.CLIENT_CLOSED_REQUEST.description == 'Client Closed Request'
    assert module_0.BurstAPIErrorCode.INTERNAL_SERVER_ERROR.description == 'Internal Server Error'
    assert module_0.BurstAPIErrorCode.NOT_IMPLEMENTED.description == 'Not Implemented'
    assert module_0.BurstAPIErrorCode.BAD_GATEWAY.description == 'Bad Gateway'
    assert module_0.BurstAPIErrorCode.SERVICE_UNAVAILABLE.description == 'Service Unavailable'
    assert module_0.BurstAPIErrorCode.GATEWAY_TIMEOUT.description == 'Gateway Timeout'
    assert module_0.BurstAPIErrorCode.HTTP_VERSION_NOT_SUPPORTED.description == 'HTTP Version Not Supported'
    error_code_0 = module_0.ErrorCode(str_0)
    var_0 = error_code_0.from_http_code(error_code_0)
    var_1 = error_code_0.__str__()

def test_case_5():
    none_type_0 = None
    py_burst_lib_exception_0 = module_0.PyBurstLibException(code=none_type_0)
    assert f'{type(py_burst_lib_exception_0).__module__}.{type(py_burst_lib_exception_0).__qualname__}' == 'pyburstlib.exceptions.PyBurstLibException'
    assert f'{type(py_burst_lib_exception_0.code).__module__}.{type(py_burst_lib_exception_0.code).__qualname__}' == 'pyburstlib.exceptions.ErrorCode'
    assert py_burst_lib_exception_0.message == 'Generic'
    error_code_0 = module_0.ErrorCode(none_type_0, none_type_0)
    var_0 = error_code_0.__str__()