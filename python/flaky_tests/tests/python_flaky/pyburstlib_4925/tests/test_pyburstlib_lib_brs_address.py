# Automatically generated by Pynguin.
import pytest
import pyburstlib.lib.brs_address as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.to_string()
    assert var_0 == 'BURST-3333-3333-3333-33333'
    assert b_r_s_address_0.address == 'BURST-3333-3333-3333-33333'
    b_r_s_address_1 = module_0.BRSAddress()
    var_1 = b_r_s_address_1.from_acct(var_0)
    assert var_1 is True
    assert module_0.BRSAddress.codeword == [21, 12, 21, 27, 1, 3, 20, 7, 4, 0, 7, 12, 9, 30, 26, 0, 20]
    var_2 = b_r_s_address_1.encode()
    var_2.set_address(var_2)

def test_case_1():
    str_0 = '<\x0c\n\t<g5B^ws07bw!DS"Q'
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.codeword == [21, 12, 21, 27, 1, 3, 20, 7, 4, 0, 7, 12, 9, 30, 26, 0, 20]
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.set_address(str_0)
    assert var_0 is False
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -22.112361
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.set_address(float_0)
    assert var_0 is False
    var_1 = b_r_s_address_0.set_address(b_r_s_address_0)
    var_2 = b_r_s_address_0.set_address(var_1)
    b_r_s_address_0.gmult(float_0, float_0)

def test_case_3():
    float_0 = -23.445754828695378
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.set_address(float_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    b_r_s_address_0.from_acct(list_0)

def test_case_5():
    str_0 = '<\x0c\nN<g5B^ws07bw!DSQ'
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.from_acct(str_0)
    assert var_0 is True
    assert module_0.BRSAddress.codeword == [7, 1, 8, 5, 0, 30, 13, 20, 22, 12, 15, 31, 6, 9, 26, 12, 20]

def test_case_6():
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'

def test_case_7():
    float_0 = -23.445754828695378
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.set_address(float_0)
    assert var_0 is False
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    var_1 = b_r_s_address_0.set_address(b_r_s_address_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'ww8H3Ww}Fe\x0bpG6~|'
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    b_r_s_address_0.from_acct(str_0)

def test_case_9():
    str_0 = '<\x0c?N<g5B^wm07bw!DSQ'
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.from_acct(str_0)
    assert var_0 is True
    assert module_0.BRSAddress.codeword == [7, 17, 22, 8, 19, 29, 17, 26, 6, 4, 6, 14, 7, 27, 12, 23, 0]

def test_case_10():
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.reset()
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    b_r_s_address_1 = module_0.BRSAddress()
    none_type_0 = None
    var_1 = b_r_s_address_1.set_address(none_type_0)
    assert var_1 is False
    var_2 = b_r_s_address_1.set_address(b_r_s_address_0)
    var_3 = b_r_s_address_1.to_string()
    assert var_3 == 'BURST-3333-3333-3333-33333'
    assert b_r_s_address_1.address == 'BURST-3333-3333-3333-33333'
    b_r_s_address_2 = module_0.BRSAddress()
    var_4 = b_r_s_address_2.from_acct(var_3)
    assert var_4 is True
    assert module_0.BRSAddress.codeword == [21, 12, 21, 27, 1, 3, 20, 7, 4, 0, 7, 12, 9, 30, 26, 0, 20]
    var_5 = b_r_s_address_1.reset()
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    str_0 = '<\x0c\n\t<g5B^ws07bw!DS"Q'
    b_r_s_address_3 = module_0.BRSAddress()
    var_6 = b_r_s_address_1.set_address(str_0)
    var_7 = b_r_s_address_1.set_address(var_3)
    b_r_s_address_4 = module_0.BRSAddress()
    var_8 = b_r_s_address_3.from_acct(str_0)
    assert var_8 is False
    var_9 = b_r_s_address_3.gmult(var_1, var_6)
    assert var_9 == 0

def test_case_11():
    str_0 = '<\x0c\n\t<g5B^ws07bw!DS"Q'
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    var_0 = b_r_s_address_0.from_acct(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_12():
    b_r_s_address_0 = module_0.BRSAddress()
    assert f'{type(b_r_s_address_0).__module__}.{type(b_r_s_address_0).__qualname__}' == 'pyburstlib.lib.brs_address.BRSAddress'
    assert b_r_s_address_0.address is None
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert module_0.BRSAddress.syndrome == [0, 0, 0, 0, 0]
    assert module_0.BRSAddress.gexp == [1, 2, 4, 8, 16, 5, 10, 20, 13, 26, 17, 7, 14, 28, 29, 31, 27, 19, 3, 6, 12, 24, 21, 15, 30, 25, 23, 11, 22, 9, 18, 1]
    assert module_0.BRSAddress.glog == [0, 0, 1, 18, 2, 5, 19, 11, 3, 29, 6, 27, 20, 8, 12, 23, 4, 10, 30, 17, 7, 22, 28, 26, 21, 25, 9, 16, 13, 14, 24, 15]
    assert module_0.BRSAddress.cwmap == [3, 2, 1, 0, 7, 6, 5, 4, 13, 14, 15, 16, 12, 8, 9, 10, 11]
    assert module_0.BRSAddress.alphabet == '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    none_type_0 = None
    var_0 = b_r_s_address_0.set_address(none_type_0)
    assert var_0 is False
    var_1 = b_r_s_address_0.encode()
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 30, 17, 28]
    b_r_s_address_1 = module_0.BRSAddress()
    var_2 = b_r_s_address_0.to_string()
    assert var_2 == 'BURST-3333-3333-FYKW-33333'
    assert b_r_s_address_0.address == 'BURST-3333-3333-FYKW-33333'
    b_r_s_address_2 = module_0.BRSAddress()
    var_3 = b_r_s_address_2.from_acct(var_2)
    assert var_3 is True
    assert module_0.BRSAddress.codeword == [21, 20, 9, 27, 24, 18, 9, 8, 4, 0, 7, 12, 9, 29, 30, 22, 5]
    var_4 = b_r_s_address_0.reset()
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    str_0 = '1\x0c\n\t<g5B^ws07bw!DS"C'
    b_r_s_address_3 = module_0.BRSAddress()
    var_5 = b_r_s_address_0.set_address(str_0)
    assert var_5 is False
    var_6 = b_r_s_address_0.set_address(var_1)
    var_7 = b_r_s_address_0.set_address(var_2)
    b_r_s_address_4 = module_0.BRSAddress()
    var_8 = b_r_s_address_3.encode()
    assert module_0.BRSAddress.codeword == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 30, 17, 28]
    b_r_s_address_3.from_acct(str_0)