# Automatically generated by Pynguin.
import pytest
import pyburstlib.wallet_api.models.mining as module_0

def test_case_0():
    str_0 = ' kM{j|TFg\rEo_MjQ"'
    set_reward_recipient_request_0 = module_0.SetRewardRecipientRequest(str_0, secretPhrase=str_0, feeNQT=str_0, broadcast=str_0, encryptedMessageData=str_0, encryptedMessageNonce=str_0, messageToEncryptToSelf=str_0, messageToEncryptToSelfIsText=str_0)
    assert f'{type(set_reward_recipient_request_0).__module__}.{type(set_reward_recipient_request_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientRequest'
    assert set_reward_recipient_request_0.recipient == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.amountNQT == 'None'
    assert set_reward_recipient_request_0.secretPhrase == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.publicKey is None
    assert set_reward_recipient_request_0.feeNQT == '100000000'
    assert set_reward_recipient_request_0.deadline == '1440'
    assert set_reward_recipient_request_0.referencedTransactionFullHash is None
    assert set_reward_recipient_request_0.broadcast == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.message is None
    assert set_reward_recipient_request_0.messageIsText is None
    assert set_reward_recipient_request_0.messageToEncrypt is None
    assert set_reward_recipient_request_0.messageToEncryptIsText is None
    assert set_reward_recipient_request_0.encryptedMessageData == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.encryptedMessageNonce == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.messageToEncryptToSelf == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.messageToEncryptToSelfIsText == ' kM{j|TFg\rEo_MjQ"'
    assert set_reward_recipient_request_0.encryptToSelfMessageData is None
    assert set_reward_recipient_request_0.encryptToSelfMessageNonce is None
    assert set_reward_recipient_request_0.recipientPublicKey is None
    assert set_reward_recipient_request_0.requestType == 'setRewardRecipient'
    assert module_0.SetRewardRecipientRequest.DEFAULT_REWARD_RECIPIENT_FEE == '100000000'
    assert module_0.SetRewardRecipientRequest.DEFAULT_REWARD_RECIPIENT_DEADLINE == '1440'

def test_case_1():
    reward_recipient_0 = module_0.RewardRecipient()
    assert f'{type(reward_recipient_0).__module__}.{type(reward_recipient_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.RewardRecipient'
    assert reward_recipient_0.rewardRecipient is None
    assert reward_recipient_0.requestProcessingTime is None
    with pytest.raises(AssertionError):
        module_0.SetRewardRecipientRequest(amountNQT=reward_recipient_0, messageIsText=reward_recipient_0)

def test_case_2():
    submit_nonce_response_0 = module_0.SubmitNonceResponse()
    assert f'{type(submit_nonce_response_0).__module__}.{type(submit_nonce_response_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SubmitNonceResponse'
    assert submit_nonce_response_0.result is None
    assert submit_nonce_response_0.deadline is None
    assert submit_nonce_response_0.requestProcessingTime is None
    assert module_0.SubmitNonceResponse.SUCCESS == 'success'

def test_case_3():
    accounts_0 = module_0.Accounts()
    assert f'{type(accounts_0).__module__}.{type(accounts_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.Accounts'
    assert accounts_0.accounts is None
    assert accounts_0.requestProcessingTime is None

def test_case_4():
    mining_info_0 = module_0.MiningInfo()
    assert f'{type(mining_info_0).__module__}.{type(mining_info_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.MiningInfo'
    assert mining_info_0.generationSignature is None
    assert mining_info_0.baseTarget is None
    assert mining_info_0.requestProcessingTime is None
    assert mining_info_0.height is None

def test_case_5():
    reward_recipient_0 = module_0.RewardRecipient()
    assert f'{type(reward_recipient_0).__module__}.{type(reward_recipient_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.RewardRecipient'
    assert reward_recipient_0.rewardRecipient is None
    assert reward_recipient_0.requestProcessingTime is None

def test_case_6():
    set_reward_recipient_response_0 = module_0.SetRewardRecipientResponse()
    assert f'{type(set_reward_recipient_response_0).__module__}.{type(set_reward_recipient_response_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientResponse'
    assert set_reward_recipient_response_0.unsignedTransactionBytes is None
    assert set_reward_recipient_response_0.broadcasted is None
    assert set_reward_recipient_response_0.transactionBytes is None
    assert set_reward_recipient_response_0.fullHash is None
    assert set_reward_recipient_response_0.transaction is None
    assert set_reward_recipient_response_0.signatureHash is None
    assert set_reward_recipient_response_0.requestProcessingTime is None
    assert f'{type(module_0.SetRewardRecipientResponse.transactionJSON).__module__}.{type(module_0.SetRewardRecipientResponse.transactionJSON).__qualname__}' == 'builtins.property'

def test_case_7():
    bool_0 = False
    mining_info_0 = module_0.MiningInfo(bool_0)
    assert f'{type(mining_info_0).__module__}.{type(mining_info_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.MiningInfo'
    assert mining_info_0.generationSignature is False
    assert mining_info_0.baseTarget is None
    assert mining_info_0.requestProcessingTime is None
    assert mining_info_0.height is None
    accounts_0 = module_0.Accounts()
    assert f'{type(accounts_0).__module__}.{type(accounts_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.Accounts'
    assert accounts_0.accounts is None
    assert accounts_0.requestProcessingTime is None
    mining_info_1 = module_0.MiningInfo(bool_0, height=accounts_0)
    set_reward_recipient_response_0 = module_0.SetRewardRecipientResponse()
    assert f'{type(set_reward_recipient_response_0).__module__}.{type(set_reward_recipient_response_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientResponse'
    assert set_reward_recipient_response_0.unsignedTransactionBytes is None
    assert set_reward_recipient_response_0.broadcasted is None
    assert set_reward_recipient_response_0.transactionBytes is None
    assert set_reward_recipient_response_0.fullHash is None
    assert set_reward_recipient_response_0.transaction is None
    assert set_reward_recipient_response_0.signatureHash is None
    assert set_reward_recipient_response_0.requestProcessingTime is None
    assert f'{type(module_0.SetRewardRecipientResponse.transactionJSON).__module__}.{type(module_0.SetRewardRecipientResponse.transactionJSON).__qualname__}' == 'builtins.property'
    with pytest.raises(AssertionError):
        module_0.SetRewardRecipientRequest(bool_0, referencedTransactionFullHash=set_reward_recipient_response_0, message=mining_info_0, messageIsText=set_reward_recipient_response_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    bytes_0 = b'\xa1\x9e\x92Yl$m'
    accounts_0 = module_0.Accounts(bool_0)
    assert f'{type(accounts_0).__module__}.{type(accounts_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.Accounts'
    assert accounts_0.accounts is True
    assert accounts_0.requestProcessingTime is None
    var_0 = accounts_0.to_json()
    set_reward_recipient_request_0 = module_0.SetRewardRecipientRequest(var_0, bool_0, var_0, deadline=var_0, referencedTransactionFullHash=var_0, messageIsText=bool_0, messageToEncryptIsText=var_0, encryptedMessageData=bytes_0, encryptToSelfMessageNonce=bytes_0)
    assert f'{type(set_reward_recipient_request_0).__module__}.{type(set_reward_recipient_request_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientRequest'
    assert set_reward_recipient_request_0.recipient == '{"accounts": true, "requestProcessingTime": null}'
    assert set_reward_recipient_request_0.amountNQT == 'True'
    assert set_reward_recipient_request_0.secretPhrase == '{"accounts": true, "requestProcessingTime": null}'
    assert set_reward_recipient_request_0.publicKey is None
    assert set_reward_recipient_request_0.feeNQT == '100000000'
    assert set_reward_recipient_request_0.deadline == '{"accounts": true, "requestProcessingTime": null}'
    assert set_reward_recipient_request_0.referencedTransactionFullHash == '{"accounts": true, "requestProcessingTime": null}'
    assert set_reward_recipient_request_0.broadcast is None
    assert set_reward_recipient_request_0.message is None
    assert set_reward_recipient_request_0.messageIsText is True
    assert set_reward_recipient_request_0.messageToEncrypt is None
    assert set_reward_recipient_request_0.messageToEncryptIsText == '{"accounts": true, "requestProcessingTime": null}'
    assert set_reward_recipient_request_0.encryptedMessageData == b'\xa1\x9e\x92Yl$m'
    assert set_reward_recipient_request_0.encryptedMessageNonce is None
    assert set_reward_recipient_request_0.messageToEncryptToSelf is None
    assert set_reward_recipient_request_0.messageToEncryptToSelfIsText is None
    assert set_reward_recipient_request_0.encryptToSelfMessageData is None
    assert set_reward_recipient_request_0.encryptToSelfMessageNonce == b'\xa1\x9e\x92Yl$m'
    assert set_reward_recipient_request_0.recipientPublicKey is None
    assert set_reward_recipient_request_0.requestType == 'setRewardRecipient'
    assert module_0.SetRewardRecipientRequest.DEFAULT_REWARD_RECIPIENT_FEE == '100000000'
    assert module_0.SetRewardRecipientRequest.DEFAULT_REWARD_RECIPIENT_DEADLINE == '1440'
    set_reward_recipient_request_0.as_payload()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    str_0 = 'Created'
    set_reward_recipient_response_0 = module_0.SetRewardRecipientResponse(bool_0, transaction=bool_0, signatureHash=str_0)
    assert f'{type(set_reward_recipient_response_0).__module__}.{type(set_reward_recipient_response_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientResponse'
    assert set_reward_recipient_response_0.unsignedTransactionBytes is True
    assert set_reward_recipient_response_0.broadcasted is None
    assert set_reward_recipient_response_0.transactionBytes is None
    assert set_reward_recipient_response_0.fullHash is None
    assert set_reward_recipient_response_0.transaction is True
    assert set_reward_recipient_response_0.signatureHash == 'Created'
    assert set_reward_recipient_response_0.requestProcessingTime is None
    assert f'{type(module_0.SetRewardRecipientResponse.transactionJSON).__module__}.{type(module_0.SetRewardRecipientResponse.transactionJSON).__qualname__}' == 'builtins.property'
    accounts_0 = module_0.Accounts()
    assert f'{type(accounts_0).__module__}.{type(accounts_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.Accounts'
    assert accounts_0.accounts is None
    assert accounts_0.requestProcessingTime is None
    dict_0 = {bool_0: bool_0}
    bytes_0 = b'\xa1\x9e\x92Yl$m'
    none_type_0 = None
    var_0 = accounts_0.to_json()
    assert var_0 == '{"accounts": null, "requestProcessingTime": null}'
    set_reward_recipient_request_0 = module_0.SetRewardRecipientRequest(dict_0, bool_0, dict_0, deadline=dict_0, referencedTransactionFullHash=dict_0, messageIsText=bool_0, messageToEncryptIsText=dict_0, encryptedMessageData=bytes_0, encryptToSelfMessageNonce=bytes_0)
    assert f'{type(set_reward_recipient_request_0).__module__}.{type(set_reward_recipient_request_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientRequest'
    assert set_reward_recipient_request_0.recipient == {True: True}
    assert set_reward_recipient_request_0.amountNQT == 'True'
    assert set_reward_recipient_request_0.secretPhrase == {True: True}
    assert set_reward_recipient_request_0.publicKey is None
    assert set_reward_recipient_request_0.feeNQT == '100000000'
    assert set_reward_recipient_request_0.deadline == {True: True}
    assert set_reward_recipient_request_0.referencedTransactionFullHash == {True: True}
    assert set_reward_recipient_request_0.broadcast is None
    assert set_reward_recipient_request_0.message is None
    assert set_reward_recipient_request_0.messageIsText is True
    assert set_reward_recipient_request_0.messageToEncrypt is None
    assert set_reward_recipient_request_0.messageToEncryptIsText == {True: True}
    assert set_reward_recipient_request_0.encryptedMessageData == b'\xa1\x9e\x92Yl$m'
    assert set_reward_recipient_request_0.encryptedMessageNonce is None
    assert set_reward_recipient_request_0.messageToEncryptToSelf is None
    assert set_reward_recipient_request_0.messageToEncryptToSelfIsText is None
    assert set_reward_recipient_request_0.encryptToSelfMessageData is None
    assert set_reward_recipient_request_0.encryptToSelfMessageNonce == b'\xa1\x9e\x92Yl$m'
    assert set_reward_recipient_request_0.recipientPublicKey is None
    assert set_reward_recipient_request_0.requestType == 'setRewardRecipient'
    assert module_0.SetRewardRecipientRequest.DEFAULT_REWARD_RECIPIENT_FEE == '100000000'
    assert module_0.SetRewardRecipientRequest.DEFAULT_REWARD_RECIPIENT_DEADLINE == '1440'
    mining_info_0 = module_0.MiningInfo(baseTarget=set_reward_recipient_request_0)
    assert f'{type(mining_info_0).__module__}.{type(mining_info_0).__qualname__}' == 'pyburstlib.wallet_api.models.mining.MiningInfo'
    assert mining_info_0.generationSignature is None
    assert f'{type(mining_info_0.baseTarget).__module__}.{type(mining_info_0.baseTarget).__qualname__}' == 'pyburstlib.wallet_api.models.mining.SetRewardRecipientRequest'
    assert mining_info_0.requestProcessingTime is None
    assert mining_info_0.height is None
    bool_1 = True
    accounts_1 = module_0.Accounts(bool_1, accounts_0)
    assert f'{type(accounts_1).__module__}.{type(accounts_1).__qualname__}' == 'pyburstlib.wallet_api.models.mining.Accounts'
    assert accounts_1.accounts is True
    assert f'{type(accounts_1.requestProcessingTime).__module__}.{type(accounts_1.requestProcessingTime).__qualname__}' == 'pyburstlib.wallet_api.models.mining.Accounts'
    set_reward_recipient_request_1 = module_0.SetRewardRecipientRequest(mining_info_0, none_type_0, set_reward_recipient_response_0, dict_0, var_0, referencedTransactionFullHash=var_0, encryptedMessageData=set_reward_recipient_request_0, recipientPublicKey=set_reward_recipient_request_0)
    assert set_reward_recipient_request_1.feeNQT == '{"accounts": null, "requestProcessingTime": null}'
    assert set_reward_recipient_request_1.deadline == '1440'
    assert set_reward_recipient_request_1.requestType == 'setRewardRecipient'
    var_1 = set_reward_recipient_request_0.as_dict()
    mining_info_1 = module_0.MiningInfo(height=bool_1)
    var_2 = set_reward_recipient_response_0.to_dict()
    var_1.as_dict()