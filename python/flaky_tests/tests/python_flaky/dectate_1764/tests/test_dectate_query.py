# Automatically generated by Pynguin.
import pytest
import dectate.query as module_0
import dectate.error as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'7\x81n\x9f\xf2\xa8\xce\x8aG<4i\xe6\x81\x0f\xfaC'
    module_0.expand_action_classes(bytes_0)

def test_case_1():
    list_0 = []
    var_0 = module_0.query_action_classes(list_0, list_0)
    var_1 = module_0.expand_action_classes(var_0)

def test_case_2():
    base_0 = module_0.Base()

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    var_0 = module_0.query_action_classes(list_0, list_0)
    callable_0 = module_0.Callable(*var_0)
    assert f'{type(callable_0).__module__}.{type(callable_0).__qualname__}' == 'dectate.query.Callable'
    callable_0.__call__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    var_0 = module_0.query_action_classes(list_0, list_0)
    query_0 = module_0.Query(*var_0)
    assert f'{type(query_0).__module__}.{type(query_0).__qualname__}' == 'dectate.query.Query'
    assert query_0.action_classes == ()
    list_1 = [list_0, list_0, var_0, list_0]
    var_1 = query_0.filter()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'dectate.query.Filter'
    assert var_1.kw == {}
    module_0.expand_action_classes(list_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    query_0 = module_0.Query()
    assert query_0.action_classes == ()
    var_0 = query_0.attrs()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'dectate.query.Attrs'
    assert var_0.names == ()
    dict_0 = {var_0: var_0}
    module_0.expand_action_classes(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    var_0 = module_0.query_action_classes(list_0, list_0)
    query_0 = module_0.Query(*var_0)
    assert f'{type(query_0).__module__}.{type(query_0).__qualname__}' == 'dectate.query.Query'
    assert query_0.action_classes == ()
    list_1 = [list_0, list_0]
    var_1 = query_0.obj()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'dectate.query.Obj'
    module_0.expand_action_classes(list_1)

def test_case_7():
    query_0 = module_0.Query()
    assert query_0.action_classes == ()

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.compare_equality(none_type_0, none_type_0)
    assert var_0 is True
    var_0.__call__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    filter_0 = module_0.Filter(list_0)
    assert f'{type(filter_0).__module__}.{type(filter_0).__qualname__}' == 'dectate.query.Filter'
    assert filter_0.query == []
    assert filter_0.kw == {}
    var_0 = module_0.query_action_classes(list_0, list_0)
    query_0 = module_0.Query(*var_0)
    assert f'{type(query_0).__module__}.{type(query_0).__qualname__}' == 'dectate.query.Query'
    assert query_0.action_classes == ()
    list_1 = [var_0, list_0, var_0, list_0]
    module_0.expand_action_classes(list_1)

def test_case_10():
    none_type_0 = None
    attrs_0 = module_0.Attrs(none_type_0, none_type_0)
    assert f'{type(attrs_0).__module__}.{type(attrs_0).__qualname__}' == 'dectate.query.Attrs'
    assert attrs_0.query is None
    assert attrs_0.names is None

def test_case_11():
    list_0 = []
    var_0 = module_0.query_action_classes(list_0, list_0)
    obj_0 = module_0.Obj(var_0)
    assert f'{type(obj_0).__module__}.{type(obj_0).__qualname__}' == 'dectate.query.Obj'
    assert f'{type(obj_0.query).__module__}.{type(obj_0.query).__qualname__}' == 'builtins.generator'
    callable_0 = module_0.Callable(*var_0)
    assert f'{type(callable_0).__module__}.{type(callable_0).__qualname__}' == 'dectate.query.Callable'

def test_case_12():
    str_0 = ''
    with pytest.raises(module_1.QueryError):
        module_0.get_action_class(str_0, str_0)