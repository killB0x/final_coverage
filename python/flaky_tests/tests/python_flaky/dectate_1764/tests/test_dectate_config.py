# Automatically generated by Pynguin.
import pytest
import dectate.config as module_0
import inspect as module_1

def test_case_0():
    var_0 = module_0.commit()
    assert module_0.order_count == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xc3\xd4\xb4\xc0\xba\xd3'
    configurable_0 = module_0.Configurable(bytes_0, bytes_0)
    assert module_0.order_count == 0
    action_group_0 = module_0.ActionGroup(bytes_0, bytes_0)
    action_group_0.execute(action_group_0)

def test_case_2():
    complex_0 = (-2765.30551+848.83274j)
    action_group_0 = module_0.ActionGroup(complex_0, complex_0)
    assert module_0.order_count == 0
    var_0 = action_group_0.combine(action_group_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    none_type_0 = None
    module_0.Directive(bool_0, bool_0, bool_0, bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    directive_abbreviation_0 = module_0.DirectiveAbbreviation(list_0)
    assert module_0.order_count == 0
    directive_abbreviation_0.__call__()

def test_case_5():
    set_0 = set()
    var_0 = module_0.sort_action_classes(set_0)
    assert module_0.order_count == 0
    var_1 = module_0.group_action_classes(set_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_1.currentframe()
    var_1 = module_0.create_code_info(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'dectate.config.CodeInfo'
    assert var_1.path == '<ast>'
    assert var_1.lineno == 1
    assert var_1.sourceline is None
    assert module_0.order_count == 0
    var_2 = module_0.get_factory_arguments(var_1, var_1, var_1, var_1)
    var_3 = module_0.group_action_classes(var_2)
    var_4 = module_0.commit()
    module_0.dotted_name(var_4)

def test_case_7():
    none_type_0 = None
    var_0 = module_0.get_factory_arguments(none_type_0, none_type_0, none_type_0, none_type_0)
    assert module_0.order_count == 0

def test_case_8():
    var_0 = module_1.currentframe()
    var_1 = module_0.create_code_info(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'dectate.config.CodeInfo'
    assert var_1.path == '<ast>'
    assert var_1.lineno == 1
    assert var_1.sourceline is None
    assert module_0.order_count == 0

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -2029
    list_0 = [int_0, int_0, int_0]
    module_0.commit(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    var_0 = module_1.currentframe()
    var_1 = module_0.create_code_info(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'dectate.config.CodeInfo'
    assert var_1.path == '<ast>'
    assert var_1.lineno == 1
    assert var_1.sourceline is None
    assert module_0.order_count == 0
    var_2 = var_1.__reduce__()
    var_3 = module_0.get_factory_arguments(var_1, var_2, var_1, none_type_0)
    var_4 = module_0.group_action_classes(var_3)
    var_5 = module_0.commit()
    module_0.sort_action_classes(var_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    action_group_0 = module_0.ActionGroup(none_type_0, none_type_0)
    assert module_0.order_count == 0
    var_0 = action_group_0.get_actions()
    action_group_0.execute(action_group_0)

def test_case_12():
    var_0 = module_0.commit()
    assert module_0.order_count == 0
    code_info_0 = module_0.CodeInfo(var_0, var_0, var_0)
    var_1 = code_info_0.filelineno()
    assert var_1 == 'File "None", line None'

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    configurable_0 = module_0.Configurable(none_type_0, none_type_0)
    assert module_0.order_count == 0
    var_0 = module_0.get_factory_arguments(none_type_0, none_type_0, none_type_0, none_type_0)
    var_1 = module_0.group_action_classes(var_0)
    var_2 = module_1.isbuiltin(var_0)
    configurable_0.group_actions()

def test_case_14():
    set_0 = set()
    var_0 = module_0.group_action_classes(set_0)
    assert module_0.order_count == 0

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    configurable_0 = module_0.Configurable(none_type_0, none_type_0)
    assert module_0.order_count == 0
    configurable_0.get_action_group(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b'\xc3\xd4\xb4\xc0\xba\xd3'
    configurable_0 = module_0.Configurable(bytes_0, bytes_0)
    assert module_0.order_count == 0
    configurable_0.action_extends(configurable_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'\xc3\xd4\xb4\xc0\xba\xd3'
    module_0.group_action_classes(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'\xc3\xd4\xb4\x8et\xe5\xc0\xba\xd3'
    configurable_0 = module_0.Configurable(bytes_0, bytes_0)
    assert module_0.order_count == 0
    var_0 = configurable_0.register_directive(configurable_0, bytes_0)
    configurable_0.action_extends(configurable_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    configurable_0 = module_0.Configurable(none_type_0, none_type_0)
    assert module_0.order_count == 0
    var_0 = module_0.get_factory_arguments(none_type_0, none_type_0, none_type_0, none_type_0)
    configurable_1 = module_0.Configurable(none_type_0, none_type_0)
    var_1 = configurable_0.register_directive(configurable_1, configurable_1)
    var_2 = module_0.group_action_classes(var_0)
    var_3 = module_0.commit()
    configurable_0.group_actions()

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '[4@+GS'
    module_0.sort_configurables(str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    complex_0 = (-2753.9565494529434+848.83274j)
    action_group_0 = module_0.ActionGroup(complex_0, complex_0)
    assert module_0.order_count == 0
    action_group_0.execute(action_group_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'\xc3\xd4\xb4\xc0\xba\xd3'
    action_group_0 = module_0.ActionGroup(bytes_0, bytes_0)
    assert module_0.order_count == 0
    action_group_0.execute(action_group_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    configurable_0 = module_0.Configurable(none_type_0, none_type_0)
    assert module_0.order_count == 0
    list_0 = [configurable_0, none_type_0]
    module_0.commit(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    action_group_0 = module_0.ActionGroup(none_type_0, none_type_0)
    assert module_0.order_count == 0
    var_0 = action_group_0.add(none_type_0, none_type_0)
    var_1 = action_group_0.get_actions()
    var_2 = var_1.clear()
    action_group_0.execute(action_group_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    var_0 = module_1.currentframe()
    var_1 = module_0.create_code_info(var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'dectate.config.CodeInfo'
    assert var_1.path == '<ast>'
    assert var_1.lineno == 1
    assert var_1.sourceline is None
    assert module_0.order_count == 0
    bool_0 = False
    var_2 = module_0.get_factory_arguments(var_0, bool_0, var_1, var_1)
    action_group_0 = module_0.ActionGroup(var_1, var_2)
    assert action_group_0.extends == {}
    action_group_0.execute(action_group_0)