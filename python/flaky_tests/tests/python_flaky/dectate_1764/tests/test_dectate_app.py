# Automatically generated by Pynguin.
import pytest
import dectate.app as module_0
import dectate.config as module_1

def test_case_0():
    app_0 = module_0.App()
    assert module_0.App.logger_name == 'dectate.directive'
    assert f'{type(module_0.App.dectate).__module__}.{type(module_0.App.dectate).__qualname__}' == 'dectate.config.Configurable'
    assert module_0.App.dectate.extends == []
    assert f'{type(module_0.App.dectate.config).__module__}.{type(module_0.App.dectate.config).__qualname__}' == 'dectate.app.Config'
    assert module_0.App.dectate.committed is False
    assert f'{type(module_0.App.config).__module__}.{type(module_0.App.config).__qualname__}' == 'dectate.app.Config'
    assert f'{type(module_0.App.get_directive_methods).__module__}.{type(module_0.App.get_directive_methods).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.commit).__module__}.{type(module_0.App.commit).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.is_committed).__module__}.{type(module_0.App.is_committed).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.clean).__module__}.{type(module_0.App.clean).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_1():
    app_0 = module_0.App()
    assert module_0.App.logger_name == 'dectate.directive'
    assert f'{type(module_0.App.dectate).__module__}.{type(module_0.App.dectate).__qualname__}' == 'dectate.config.Configurable'
    assert module_0.App.dectate.extends == []
    assert f'{type(module_0.App.dectate.config).__module__}.{type(module_0.App.dectate.config).__qualname__}' == 'dectate.app.Config'
    assert module_0.App.dectate.committed is False
    assert f'{type(module_0.App.config).__module__}.{type(module_0.App.config).__qualname__}' == 'dectate.app.Config'
    assert f'{type(module_0.App.get_directive_methods).__module__}.{type(module_0.App.get_directive_methods).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.commit).__module__}.{type(module_0.App.commit).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.is_committed).__module__}.{type(module_0.App.is_committed).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.clean).__module__}.{type(module_0.App.clean).__qualname__}' == 'builtins.method'
    var_0 = module_0.directive(app_0)
    list_0 = [app_0, app_0, app_0, app_0, app_0, app_0, app_0, app_0, app_0, app_0, app_0]
    var_1 = module_1.commit(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'YTz'
    module_0.AppMeta(*str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    app_0 = module_0.App()
    assert module_0.App.logger_name == 'dectate.directive'
    assert f'{type(module_0.App.dectate).__module__}.{type(module_0.App.dectate).__qualname__}' == 'dectate.config.Configurable'
    assert module_0.App.dectate.extends == []
    assert f'{type(module_0.App.dectate.config).__module__}.{type(module_0.App.dectate.config).__qualname__}' == 'dectate.app.Config'
    assert module_0.App.dectate.committed is False
    assert f'{type(module_0.App.config).__module__}.{type(module_0.App.config).__qualname__}' == 'dectate.app.Config'
    assert f'{type(module_0.App.get_directive_methods).__module__}.{type(module_0.App.get_directive_methods).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.commit).__module__}.{type(module_0.App.commit).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.is_committed).__module__}.{type(module_0.App.is_committed).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.clean).__module__}.{type(module_0.App.clean).__qualname__}' == 'builtins.method'
    list_0 = [app_0, app_0, app_0, app_0, app_0, app_0, app_0]
    var_0 = module_1.commit(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    app_0 = module_0.App()
    assert module_0.App.logger_name == 'dectate.directive'
    assert f'{type(module_0.App.dectate).__module__}.{type(module_0.App.dectate).__qualname__}' == 'dectate.config.Configurable'
    assert module_0.App.dectate.extends == []
    assert f'{type(module_0.App.dectate.config).__module__}.{type(module_0.App.dectate.config).__qualname__}' == 'dectate.app.Config'
    assert module_0.App.dectate.committed is False
    assert f'{type(module_0.App.config).__module__}.{type(module_0.App.config).__qualname__}' == 'dectate.app.Config'
    assert f'{type(module_0.App.get_directive_methods).__module__}.{type(module_0.App.get_directive_methods).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.commit).__module__}.{type(module_0.App.commit).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.is_committed).__module__}.{type(module_0.App.is_committed).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.App.clean).__module__}.{type(module_0.App.clean).__qualname__}' == 'builtins.method'
    list_0 = [app_0, app_0, app_0, app_0, app_0, app_0, app_0]
    list_1 = [list_0, list_0, list_0]
    module_0.AppMeta(*list_1)