# Automatically generated by Pynguin.
import pytest
import dacite.types as module_0
import dataclasses as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '$(zfLltA%.X@<g762u-'
    module_0.transform_value(str_0, str_0, str_0, str_0)

def test_case_1():
    list_0 = []
    var_0 = module_0.transform_value(list_0, list_0, list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -2513.659
    module_0.extract_origin_collection(float_0)

def test_case_3():
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.extract_optional(bool_0)

def test_case_4():
    bool_0 = True
    bool_1 = module_0.is_instance(bool_0, bool_0)
    assert bool_1 is False

def test_case_5():
    bool_0 = True
    init_var_0 = module_1.InitVar(bool_0)
    bool_1 = module_0.is_instance(init_var_0, init_var_0)
    assert bool_1 is False

def test_case_6():
    str_0 = 'v+fT|yo3>DP|Dy:g-w'
    bool_0 = module_0.is_subclass(str_0, str_0)
    assert bool_0 is False

def test_case_7():
    bytes_0 = b'\xfb\xa5\x994+\xc9\x12\xbf\x91V\xc8\xa0\x1d\xd3\xf4\x9d&\x02'
    bool_0 = module_0.is_generic(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = -2513.659
    module_0.extract_new_type(float_0)

def test_case_9():
    bool_0 = True
    init_var_0 = module_1.InitVar(bool_0)
    dict_0 = {init_var_0: init_var_0}
    var_0 = module_0.transform_value(dict_0, dict_0, bool_0, bool_0)
    assert var_0 is True

def test_case_10():
    complex_0 = (-5564+254.94j)
    bool_0 = module_0.is_instance(complex_0, complex_0)
    assert bool_0 is False