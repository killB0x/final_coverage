# Automatically generated by Pynguin.
import pytest
import dacite.exceptions as module_0

def test_case_0():
    str_0 = '\r[d$QAPd:w#\x0b+'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    missing_value_error_0 = module_0.MissingValueError(dict_0)
    assert f'{type(missing_value_error_0).__module__}.{type(missing_value_error_0).__qualname__}' == 'dacite.exceptions.MissingValueError'
    assert missing_value_error_0.field_path == {'\r[d$QAPd:w#\x0b+': '\r[d$QAPd:w#\x0b+'}
    str_1 = missing_value_error_0.__str__()
    assert str_1 == 'missing value for field "{\'\\r[d$QAPd:w#\\x0b+\': \'\\r[d$QAPd:w#\\x0b+\'}"'
    set_0 = set()
    wrong_type_error_0 = module_0.WrongTypeError(set_0, set_0)
    assert f'{type(wrong_type_error_0).__module__}.{type(wrong_type_error_0).__qualname__}' == 'dacite.exceptions.WrongTypeError'
    assert wrong_type_error_0.field_path is None
    assert wrong_type_error_0.field_type == {*()}
    assert wrong_type_error_0.value == {*()}
    str_2 = missing_value_error_0.__str__()
    assert str_2 == 'missing value for field "{\'\\r[d$QAPd:w#\\x0b+\': \'\\r[d$QAPd:w#\\x0b+\'}"'
    str_3 = wrong_type_error_0.__str__()
    assert str_3 == 'wrong value type for field "None" - should be "set()" instead of value "set()" of type "set"'
    str_4 = wrong_type_error_0.__str__()
    assert str_4 == 'wrong value type for field "None" - should be "set()" instead of value "set()" of type "set"'
    union_match_error_0 = module_0.UnionMatchError(set_0, set_0)

def test_case_1():
    none_type_0 = None
    str_0 = '_7$'
    set_0 = {str_0}
    unexpected_data_error_0 = module_0.UnexpectedDataError(set_0)
    assert unexpected_data_error_0.keys == {'_7$'}
    dict_0 = {none_type_0: none_type_0}
    strict_union_match_error_0 = module_0.StrictUnionMatchError(dict_0, none_type_0)
    assert f'{type(strict_union_match_error_0).__module__}.{type(strict_union_match_error_0).__qualname__}' == 'dacite.exceptions.StrictUnionMatchError'
    assert strict_union_match_error_0.field_path is None
    assert strict_union_match_error_0.union_matches == {None: None}
    str_1 = strict_union_match_error_0.__str__()
    assert str_1 == 'can not choose between possible Union matches for field "None": None'

def test_case_2():
    str_0 = '&D|F)fPq3v:Yl'
    tuple_0 = ()
    forward_reference_error_0 = module_0.ForwardReferenceError(tuple_0)
    assert forward_reference_error_0.message == ()
    str_1 = forward_reference_error_0.__str__()
    assert str_1 == 'can not resolve forward reference: ()'
    wrong_type_error_0 = module_0.WrongTypeError(tuple_0, str_0)
    assert f'{type(wrong_type_error_0).__module__}.{type(wrong_type_error_0).__qualname__}' == 'dacite.exceptions.WrongTypeError'
    assert wrong_type_error_0.field_path is None
    assert wrong_type_error_0.field_type == ()
    assert wrong_type_error_0.value == '&D|F)fPq3v:Yl'
    missing_value_error_0 = module_0.MissingValueError(str_0)
    assert missing_value_error_0.field_path == '&D|F)fPq3v:Yl'
    none_type_0 = wrong_type_error_0.update_path(str_0)
    assert wrong_type_error_0.field_path == '&D|F)fPq3v:Yl'
    missing_value_error_1 = module_0.MissingValueError()
    assert missing_value_error_1.field_path is None
    none_type_1 = missing_value_error_1.update_path(str_0)
    assert missing_value_error_1.field_path == '&D|F)fPq3v:Yl'
    dacite_field_error_0 = module_0.DaciteFieldError()
    none_type_2 = dacite_field_error_0.update_path(str_0)
    assert dacite_field_error_0.field_path == '&D|F)fPq3v:Yl'
    none_type_3 = dacite_field_error_0.update_path(str_0)
    assert dacite_field_error_0.field_path == '&D|F)fPq3v:Yl.&D|F)fPq3v:Yl'
    none_type_4 = dacite_field_error_0.update_path(str_0)
    assert dacite_field_error_0.field_path == '&D|F)fPq3v:Yl.&D|F)fPq3v:Yl.&D|F)fPq3v:Yl'

def test_case_3():
    none_type_0 = None
    str_0 = '" to any type of "'
    forward_reference_error_0 = module_0.ForwardReferenceError(str_0)
    assert forward_reference_error_0.message == '" to any type of "'
    float_0 = -2042.508
    wrong_type_error_0 = module_0.WrongTypeError(forward_reference_error_0, float_0)
    assert f'{type(wrong_type_error_0).__module__}.{type(wrong_type_error_0).__qualname__}' == 'dacite.exceptions.WrongTypeError'
    assert wrong_type_error_0.field_path is None
    assert f'{type(wrong_type_error_0.field_type).__module__}.{type(wrong_type_error_0.field_type).__qualname__}' == 'dacite.exceptions.ForwardReferenceError'
    assert wrong_type_error_0.value == pytest.approx(-2042.508, abs=0.01, rel=0.01)
    dacite_field_error_0 = module_0.DaciteFieldError(none_type_0)
    none_type_1 = dacite_field_error_0.update_path(none_type_0)

def test_case_4():
    missing_value_error_0 = module_0.MissingValueError()
    assert f'{type(missing_value_error_0).__module__}.{type(missing_value_error_0).__qualname__}' == 'dacite.exceptions.MissingValueError'
    assert missing_value_error_0.field_path is None
    str_0 = 'i>nfM-r\'r/"'
    str_1 = '#$I]Jd'
    dacite_error_0 = module_0.DaciteError()
    str_2 = missing_value_error_0.__str__()
    assert str_2 == 'missing value for field "None"'
    set_0 = {str_0, str_1}
    unexpected_data_error_0 = module_0.UnexpectedDataError(set_0)
    assert unexpected_data_error_0.keys == {'i>nfM-r\'r/"', '#$I]Jd'}
    unexpected_data_error_1 = module_0.UnexpectedDataError(set_0)
    assert unexpected_data_error_1.keys == {'i>nfM-r\'r/"', '#$I]Jd'}
    str_3 = missing_value_error_0.__str__()
    assert str_3 == 'missing value for field "None"'
    float_0 = -705.19604
    wrong_type_error_0 = module_0.WrongTypeError(float_0, float_0)
    assert f'{type(wrong_type_error_0).__module__}.{type(wrong_type_error_0).__qualname__}' == 'dacite.exceptions.WrongTypeError'
    assert wrong_type_error_0.field_path is None
    assert wrong_type_error_0.field_type == pytest.approx(-705.19604, abs=0.01, rel=0.01)
    assert wrong_type_error_0.value == pytest.approx(-705.19604, abs=0.01, rel=0.01)
    str_4 = unexpected_data_error_0.__str__()
    assert str_4 == 'can not match "i>nfM-r\'r/"", "#$I]Jd" to any data class field'
    str_5 = '"'
    forward_reference_error_0 = module_0.ForwardReferenceError(str_5)
    assert forward_reference_error_0.message == '"'
    str_6 = forward_reference_error_0.__str__()
    assert str_6 == 'can not resolve forward reference: "'
    str_7 = wrong_type_error_0.__str__()
    assert str_7 == 'wrong value type for field "None" - should be "-705.19604" instead of value "-705.19604" of type "float"'

def test_case_5():
    str_0 = '9FJH?GWD.TvHZ`>"xaL'
    int_0 = 2
    list_0 = [int_0, int_0]
    dacite_error_0 = module_0.DaciteError(*list_0)
    forward_reference_error_0 = module_0.ForwardReferenceError(str_0)
    assert forward_reference_error_0.message == '9FJH?GWD.TvHZ`>"xaL'

def test_case_6():
    str_0 = 'o;C\x0b'
    forward_reference_error_0 = module_0.ForwardReferenceError(str_0)
    assert forward_reference_error_0.message == 'o;C\x0b'
    str_1 = forward_reference_error_0.__str__()
    assert str_1 == 'can not resolve forward reference: o;C\x0b'
    none_type_0 = None
    missing_value_error_0 = module_0.MissingValueError(none_type_0)
    assert f'{type(missing_value_error_0).__module__}.{type(missing_value_error_0).__qualname__}' == 'dacite.exceptions.MissingValueError'
    assert missing_value_error_0.field_path is None
    str_2 = missing_value_error_0.__str__()
    assert str_2 == 'missing value for field "None"'
    str_3 = forward_reference_error_0.__str__()
    assert str_3 == 'can not resolve forward reference: o;C\x0b'
    dacite_field_error_0 = module_0.DaciteFieldError()

def test_case_7():
    none_type_0 = None
    dacite_field_error_0 = module_0.DaciteFieldError(none_type_0)
    assert dacite_field_error_0.field_path is None
    union_match_error_0 = module_0.UnionMatchError(dacite_field_error_0, none_type_0, none_type_0)
    assert f'{type(union_match_error_0).__module__}.{type(union_match_error_0).__qualname__}' == 'dacite.exceptions.UnionMatchError'
    assert union_match_error_0.field_path is None
    assert f'{type(union_match_error_0.field_type).__module__}.{type(union_match_error_0.field_type).__qualname__}' == 'dacite.exceptions.DaciteFieldError'
    assert union_match_error_0.value is None
    dacite_field_error_1 = module_0.DaciteFieldError()
    none_type_1 = dacite_field_error_0.update_path(dacite_field_error_0)
    assert f'{type(dacite_field_error_0.field_path).__module__}.{type(dacite_field_error_0.field_path).__qualname__}' == 'dacite.exceptions.DaciteFieldError'
    dict_0 = {dacite_field_error_0: none_type_0, none_type_0: none_type_1, none_type_1: dacite_field_error_1, dacite_field_error_0: union_match_error_0}
    forward_reference_error_0 = module_0.ForwardReferenceError(dict_0)
    assert f'{type(forward_reference_error_0.message).__module__}.{type(forward_reference_error_0.message).__qualname__}' == 'builtins.dict'
    assert len(forward_reference_error_0.message) == 2
    none_type_2 = dacite_field_error_0.update_path(none_type_1)
    assert dacite_field_error_0.field_path == 'None.'
    union_match_error_1 = module_0.UnionMatchError(none_type_0, none_type_2)
    assert union_match_error_1.field_path is None
    str_0 = "y^\tp9c*'"
    none_type_3 = dacite_field_error_1.update_path(str_0)
    assert dacite_field_error_1.field_path == "y^\tp9c*'"
    union_match_error_2 = module_0.UnionMatchError(union_match_error_1, none_type_1)
    assert union_match_error_2.field_path is None
    str_1 = union_match_error_1.__str__()
    assert str_1 == 'can not match type "NoneType" to any type of "None" union: None'
    wrong_type_error_0 = module_0.WrongTypeError(dacite_field_error_0, dacite_field_error_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'Pc:X5\n@aDi#_~D^{EXZ!'
    str_1 = '<TC?U+I7_]qppV'
    str_2 = ''
    set_0 = {str_0, str_1, str_2, str_0}
    unexpected_data_error_0 = module_0.UnexpectedDataError(set_0)
    assert unexpected_data_error_0.keys == {'', 'Pc:X5\n@aDi#_~D^{EXZ!', '<TC?U+I7_]qppV'}
    none_type_0 = None
    module_0.DaciteError(*none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    missing_value_error_0 = module_0.MissingValueError()
    assert f'{type(missing_value_error_0).__module__}.{type(missing_value_error_0).__qualname__}' == 'dacite.exceptions.MissingValueError'
    assert missing_value_error_0.field_path is None
    str_0 = missing_value_error_0.__str__()
    assert str_0 == 'missing value for field "None"'
    none_type_0 = None
    unexpected_data_error_0 = module_0.UnexpectedDataError(none_type_0)
    assert unexpected_data_error_0.keys is None
    unexpected_data_error_0.__str__()