# Automatically generated by Pynguin.
import pytest
import dacite.core as module_0
import dacite.config as module_1
import dacite.exceptions as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1
    module_0.from_dict(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    module_0.from_dict(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    config_0 = module_1.Config()
    module_0.from_dict(config_0, config_0, config_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    config_0 = module_1.Config(forward_references=dict_0)
    module_0.from_dict(config_0, dict_0, config_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    bool_0 = True
    config_0 = module_1.Config(strict=bool_0, strict_unions_match=bool_0)
    module_0.from_dict(config_0, dict_0, config_0)

def test_case_5():
    dict_0 = {}
    bool_0 = True
    config_0 = module_1.Config(strict=bool_0, strict_unions_match=bool_0)
    str_0 = '" instead of value "'
    str_1 = 'NG!JU[GV?63wZmO&9'
    str_2 = 'ZE ],:Nhb)00aZrMpi\n'
    dict_1 = {str_0: dict_0, str_0: str_0, str_1: dict_0, str_2: bool_0}
    with pytest.raises(module_2.UnexpectedDataError):
        module_0.from_dict(config_0, dict_1, config_0)