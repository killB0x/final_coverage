# Automatically generated by Pynguin.
import pytest
import nhl.conference as module_0

def test_case_0():
    str_0 = 'e[[f:PW!.>?\x0bLg;`@mHA'
    conference_0 = module_0.Conference(str_0, str_0, str_0, str_0)
    assert f'{type(conference_0).__module__}.{type(conference_0).__qualname__}' == 'nhl.conference.Conference'
    assert f'{type(module_0.Conference.has_key).__module__}.{type(module_0.Conference.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Conference.from_key).__module__}.{type(module_0.Conference.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Conference.abbreviation).__module__}.{type(module_0.Conference.abbreviation).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Conference.id).__module__}.{type(module_0.Conference.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Conference.name).__module__}.{type(module_0.Conference.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Conference.name_short).__module__}.{type(module_0.Conference.name_short).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    bool_0 = False
    str_0 = '-p!'
    str_1 = 'iCNx!!Z'
    conference_0 = module_0.Conference(bool_0, str_0, dict_0, str_1)
    assert f'{type(conference_0).__module__}.{type(conference_0).__qualname__}' == 'nhl.conference.Conference'
    assert f'{type(module_0.Conference.has_key).__module__}.{type(module_0.Conference.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Conference.from_key).__module__}.{type(module_0.Conference.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Conference.abbreviation).__module__}.{type(module_0.Conference.abbreviation).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Conference.id).__module__}.{type(module_0.Conference.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Conference.name).__module__}.{type(module_0.Conference.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Conference.name_short).__module__}.{type(module_0.Conference.name_short).__qualname__}' == 'builtins.member_descriptor'
    var_0 = conference_0.__repr__()
    assert var_0 == '<nhl.Conference: -p!, ID False>'
    var_1 = var_0.__eq__(dict_0)
    conference_0.__hash__()