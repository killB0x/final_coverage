# Automatically generated by Pynguin.
import pytest
import nhl.team as module_0
import dataclasses as module_1

def test_case_0():
    bool_0 = True
    team_0 = module_0.Team(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    assert f'{type(team_0).__module__}.{type(team_0).__qualname__}' == 'nhl.team.Team'
    assert f'{type(module_0.Team.has_key).__module__}.{type(module_0.Team.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Team.from_key).__module__}.{type(module_0.Team.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Team.full_name).__module__}.{type(module_0.Team.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Team.abbreviation).__module__}.{type(module_0.Team.abbreviation).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.conference).__module__}.{type(module_0.Team.conference).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.division).__module__}.{type(module_0.Team.division).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.first_year).__module__}.{type(module_0.Team.first_year).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.franchise).__module__}.{type(module_0.Team.franchise).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.id).__module__}.{type(module_0.Team.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.location).__module__}.{type(module_0.Team.location).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.name).__module__}.{type(module_0.Team.name).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    str_0 = '.;e&'
    var_0 = module_1.dataclass(repr=bool_0, unsafe_hash=str_0)
    var_1 = var_0.__repr__()
    str_1 = 'v=iUEBG:@?\r"V~i)PXm'
    bool_1 = False
    var_2 = var_0.__eq__(var_0)
    team_0 = module_0.Team(var_1, var_1, str_1, var_0, bool_1, var_0, str_0, var_2)
    assert f'{type(team_0).__module__}.{type(team_0).__qualname__}' == 'nhl.team.Team'
    assert f'{type(module_0.Team.has_key).__module__}.{type(module_0.Team.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Team.from_key).__module__}.{type(module_0.Team.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Team.full_name).__module__}.{type(module_0.Team.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Team.abbreviation).__module__}.{type(module_0.Team.abbreviation).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.conference).__module__}.{type(module_0.Team.conference).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.division).__module__}.{type(module_0.Team.division).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.first_year).__module__}.{type(module_0.Team.first_year).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.franchise).__module__}.{type(module_0.Team.franchise).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.id).__module__}.{type(module_0.Team.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.location).__module__}.{type(module_0.Team.location).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Team.name).__module__}.{type(module_0.Team.name).__qualname__}' == 'builtins.member_descriptor'
    team_0.__repr__()