# Automatically generated by Pynguin.
import pytest
import nhl.location as module_0

def test_case_0():
    int_0 = -1217
    location_0 = module_0.Location(int_0, int_0)
    assert f'{type(location_0).__module__}.{type(location_0).__qualname__}' == 'nhl.location.Location'
    assert f'{type(module_0.Location.has_key).__module__}.{type(module_0.Location.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Location.from_key).__module__}.{type(module_0.Location.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Location.x).__module__}.{type(module_0.Location.x).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Location.y).__module__}.{type(module_0.Location.y).__qualname__}' == 'builtins.member_descriptor'

def test_case_1():
    bool_0 = True
    location_0 = module_0.Location(bool_0, bool_0)
    assert f'{type(location_0).__module__}.{type(location_0).__qualname__}' == 'nhl.location.Location'
    assert f'{type(module_0.Location.has_key).__module__}.{type(module_0.Location.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Location.from_key).__module__}.{type(module_0.Location.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Location.x).__module__}.{type(module_0.Location.x).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Location.y).__module__}.{type(module_0.Location.y).__qualname__}' == 'builtins.member_descriptor'
    var_0 = location_0.__repr__()
    assert var_0 == '<nhl.Location:   1,   1>'

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    location_0 = module_0.Location(bool_0, bool_0)
    assert f'{type(location_0).__module__}.{type(location_0).__qualname__}' == 'nhl.location.Location'
    assert f'{type(module_0.Location.has_key).__module__}.{type(module_0.Location.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Location.from_key).__module__}.{type(module_0.Location.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Location.x).__module__}.{type(module_0.Location.x).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Location.y).__module__}.{type(module_0.Location.y).__qualname__}' == 'builtins.member_descriptor'
    location_0.distance(bool_0)