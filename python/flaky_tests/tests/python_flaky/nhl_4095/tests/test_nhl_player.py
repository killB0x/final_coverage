# Automatically generated by Pynguin.
import pytest
import nhl.player as module_0
import datetime as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2334
    none_type_0 = None
    str_0 = '{}/venues/{}'
    str_1 = 'lbe2'
    player_0 = module_0.Player(int_0, int_0, int_0, none_type_0, int_0, int_0, int_0, int_0, str_0, str_1)
    assert f'{type(player_0).__module__}.{type(player_0).__qualname__}' == 'nhl.player.Player'
    assert f'{type(module_0.Player.has_key).__module__}.{type(module_0.Player.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.from_key).__module__}.{type(module_0.Player.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.first_name).__module__}.{type(module_0.Player.first_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.last_name).__module__}.{type(module_0.Player.last_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.height_ft_in).__module__}.{type(module_0.Player.height_ft_in).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.age).__module__}.{type(module_0.Player.age).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.birth_city).__module__}.{type(module_0.Player.birth_city).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_country).__module__}.{type(module_0.Player.birth_country).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_date).__module__}.{type(module_0.Player.birth_date).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.height).__module__}.{type(module_0.Player.height).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.id).__module__}.{type(module_0.Player.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.name).__module__}.{type(module_0.Player.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.number).__module__}.{type(module_0.Player.number).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.position).__module__}.{type(module_0.Player.position).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.shoots_catches).__module__}.{type(module_0.Player.shoots_catches).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.weight).__module__}.{type(module_0.Player.weight).__qualname__}' == 'builtins.member_descriptor'
    player_0.__delattr__(player_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    none_type_0.__delattr__(none_type_0)

def test_case_2():
    int_0 = 2334
    none_type_0 = None
    str_0 = 'lbe2'
    player_0 = module_0.Player(int_0, int_0, int_0, none_type_0, int_0, int_0, int_0, int_0, str_0, str_0)
    assert f'{type(player_0).__module__}.{type(player_0).__qualname__}' == 'nhl.player.Player'
    assert f'{type(module_0.Player.has_key).__module__}.{type(module_0.Player.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.from_key).__module__}.{type(module_0.Player.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.first_name).__module__}.{type(module_0.Player.first_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.last_name).__module__}.{type(module_0.Player.last_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.height_ft_in).__module__}.{type(module_0.Player.height_ft_in).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.age).__module__}.{type(module_0.Player.age).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.birth_city).__module__}.{type(module_0.Player.birth_city).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_country).__module__}.{type(module_0.Player.birth_country).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_date).__module__}.{type(module_0.Player.birth_date).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.height).__module__}.{type(module_0.Player.height).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.id).__module__}.{type(module_0.Player.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.name).__module__}.{type(module_0.Player.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.number).__module__}.{type(module_0.Player.number).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.position).__module__}.{type(module_0.Player.position).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.shoots_catches).__module__}.{type(module_0.Player.shoots_catches).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.weight).__module__}.{type(module_0.Player.weight).__qualname__}' == 'builtins.member_descriptor'

@pytest.mark.xfail(strict=True)
def test_case_3():
    time_0 = module_1.time()
    bool_0 = False
    str_0 = 'y ,+w\x0bk?~y\\IK]$k\\"~}'
    str_1 = "dFxR]D^|Li>nfM-r'"
    str_2 = 'birth_country'
    str_3 = ']\\sLbMjr4Dn?WhU"'
    player_0 = module_0.Player(time_0, str_0, bool_0, str_1, bool_0, bool_0, bool_0, bool_0, str_2, str_3)
    assert f'{type(player_0).__module__}.{type(player_0).__qualname__}' == 'nhl.player.Player'
    assert f'{type(module_0.Player.has_key).__module__}.{type(module_0.Player.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.from_key).__module__}.{type(module_0.Player.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.first_name).__module__}.{type(module_0.Player.first_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.last_name).__module__}.{type(module_0.Player.last_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.height_ft_in).__module__}.{type(module_0.Player.height_ft_in).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.age).__module__}.{type(module_0.Player.age).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.birth_city).__module__}.{type(module_0.Player.birth_city).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_country).__module__}.{type(module_0.Player.birth_country).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_date).__module__}.{type(module_0.Player.birth_date).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.height).__module__}.{type(module_0.Player.height).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.id).__module__}.{type(module_0.Player.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.name).__module__}.{type(module_0.Player.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.number).__module__}.{type(module_0.Player.number).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.position).__module__}.{type(module_0.Player.position).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.shoots_catches).__module__}.{type(module_0.Player.shoots_catches).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.weight).__module__}.{type(module_0.Player.weight).__qualname__}' == 'builtins.member_descriptor'
    player_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    time_0 = module_1.time()
    bytes_0 = b'\x9a]'
    list_0 = [bytes_0, bytes_0]
    int_0 = -613
    str_0 = 'birth_country'
    str_1 = ']\\sLbMjr4Dn?WhU"'
    int_1 = -1005
    none_type_0 = None
    bool_0 = True
    str_2 = "Il'RCD38"
    player_0 = module_0.Player(int_1, int_0, none_type_0, str_0, str_1, bool_0, str_0, list_0, str_2, none_type_0)
    assert f'{type(player_0).__module__}.{type(player_0).__qualname__}' == 'nhl.player.Player'
    assert f'{type(module_0.Player.has_key).__module__}.{type(module_0.Player.has_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.from_key).__module__}.{type(module_0.Player.from_key).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Player.first_name).__module__}.{type(module_0.Player.first_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.last_name).__module__}.{type(module_0.Player.last_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.height_ft_in).__module__}.{type(module_0.Player.height_ft_in).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.age).__module__}.{type(module_0.Player.age).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Player.birth_city).__module__}.{type(module_0.Player.birth_city).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_country).__module__}.{type(module_0.Player.birth_country).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.birth_date).__module__}.{type(module_0.Player.birth_date).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.height).__module__}.{type(module_0.Player.height).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.id).__module__}.{type(module_0.Player.id).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.name).__module__}.{type(module_0.Player.name).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.number).__module__}.{type(module_0.Player.number).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.position).__module__}.{type(module_0.Player.position).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.shoots_catches).__module__}.{type(module_0.Player.shoots_catches).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Player.weight).__module__}.{type(module_0.Player.weight).__qualname__}' == 'builtins.member_descriptor'
    player_0.__repr__()