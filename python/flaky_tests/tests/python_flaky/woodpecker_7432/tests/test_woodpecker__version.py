# Automatically generated by Pynguin.
import pytest
import woodpecker._version as module_0

def test_case_0():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1

def test_case_1():
    not_this_method_0 = module_0.NotThisMethod()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(AssertionError):
        module_0.run_command(not_this_method_0, not_this_method_0, hide_stderr=not_this_method_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.versions_from_parentdir(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    module_0.git_get_keywords(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    not_this_method_0 = module_0.NotThisMethod(**var_0)
    module_0.render_pep440_pre(var_0)

def test_case_5():
    tuple_0 = ()
    str_0 = 'http'
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(tuple_0, none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == ''
    assert var_0.parentdir_prefix == ''
    assert var_0.versionfile_source == 'woodpecker/_version.py'
    assert len(module_0.HANDLERS) == 1
    module_0.git_pieces_from_vcs(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'git-describe-long'
    bool_0 = True
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.versions_from_parentdir(str_0, str_0, var_0)
    var_2 = module_0.get_versions()
    module_0.render(var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.render(var_0, var_0)
    module_0.versions_from_parentdir(var_1, var_2, var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    module_0.git_versions_from_keywords(var_0, var_0, var_1)

def test_case_10():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'

def test_case_11():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(none_type_0, none_type_0, var_1)

def test_case_12():
    str_0 = 'Z=@2\\pDmIv\x0bi=}y-H'
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.get_config()
    assert var_2.VCS == 'git'
    assert var_2.style == 'pep440'
    assert var_2.tag_prefix == ''
    assert var_2.parentdir_prefix == ''
    assert var_2.versionfile_source == 'woodpecker/_version.py'

def test_case_13():
    str_0 = ''
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    with pytest.raises(ValueError):
        module_0.render(var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ''
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.versions_from_parentdir(str_0, str_0, var_0)
    var_2 = module_0.get_versions()
    var_3 = module_0.get_versions()
    var_4 = module_0.register_vcs_handler(str_0, var_3)
    tuple_0 = ()
    module_0.render(var_1, tuple_0)

def test_case_15():
    str_0 = ''
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'
    var_2 = module_0.get_config()
    assert var_2.VCS == 'git'
    assert var_2.style == 'pep440'
    assert var_2.tag_prefix == ''
    assert var_2.parentdir_prefix == ''
    assert var_2.versionfile_source == 'woodpecker/_version.py'
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(var_1, str_0, var_1)

def test_case_16():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)

def test_case_17():
    str_0 = ''
    str_1 = "wxZF'{'yi6OU#h|"
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_1, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'git-describe-long'
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    module_0.render(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -578
    list_0 = [int_0, int_0, int_0]
    module_0.run_command(list_0, list_0, verbose=int_0, env=int_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'pep440-post'
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    module_0.render(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'default'
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.plus_or_dot(var_0)
    assert var_2 == '+'
    var_3 = module_0.git_get_keywords(var_2)
    var_4 = module_0.get_keywords()
    module_0.render(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'pep440-old'
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.versions_from_parentdir(str_0, str_0, var_0)
    var_2 = module_0.plus_or_dot(var_1)
    assert var_2 == '+'
    module_0.render(var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'pep440-pre'
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.versions_from_parentdir(str_0, str_0, var_0)
    var_2 = module_0.get_versions()
    not_this_method_0 = module_0.NotThisMethod()
    var_3 = module_0.plus_or_dot(var_1)
    assert var_3 == '+'
    module_0.render(var_1, str_0)