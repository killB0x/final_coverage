# Automatically generated by Pynguin.
import pytest
import woodpecker.misc.contrib.validate as module_0
import re as module_1
import locale as module_2
import pprint as module_3
import enum as module_4

def test_case_0():
    vdt_missing_value_0 = module_0.VdtMissingValue()
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

def test_case_1():
    str_0 = 'hv;l[;=EeCz3M{Y'
    with pytest.raises(module_0.VdtValueError):
        module_0.is_ip_addr(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    var_0 = module_0.force_list(bool_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    var_1 = module_0.is_float_list(var_0)
    var_2 = module_0.Validator()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(var_2.functions).__module__}.{type(var_2.functions).__qualname__}' == 'builtins.dict'
    assert len(var_2.functions) == 17
    var_3 = module_0.is_float_list(var_1)
    module_0.dottedQuadToNum(var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.numToDottedQuad(bool_0)
    assert var_0 == '0.0.0.0'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    module_0.is_float(bool_0, max=var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'X#=kI{Nm@IyN=EhIr'
    vdt_param_error_0 = module_0.VdtParamError(str_0)
    assert f'{type(vdt_param_error_0).__module__}.{type(vdt_param_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtParamError'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    module_0.is_float(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '__main__'
    module_0.is_string(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -811
    module_0.Validator(int_0)

def test_case_7():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

@pytest.mark.xfail(strict=True)
def test_case_8():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    validator_0.check(validator_0, validator_0)

def test_case_9():
    none_type_0 = None
    var_0 = module_0.force_list(none_type_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

def test_case_10():
    bool_0 = False
    var_0 = module_0.is_float(bool_0, bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

def test_case_11():
    bool_0 = True
    validate_error_0 = module_0.is_boolean(bool_0)
    assert validate_error_0 is True
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

def test_case_12():
    none_type_0 = None
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_ip_addr(none_type_0)

def test_case_13():
    bool_0 = False
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_string(bool_0, bool_0, bool_0)

def test_case_14():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_string_list(validator_0)

def test_case_15():
    bool_0 = True
    var_0 = module_0.is_boolean(bool_0)
    assert var_0 is True
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    dict_0 = {bool_0: bool_0}
    var_1 = module_0.is_boolean(var_0)
    assert var_1 is True
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_string_list(dict_0)

def test_case_16():
    str_0 = '6<5S/\x0cpB'
    with pytest.raises(module_0.VdtValueTooLongError):
        module_0.is_mixed_list(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    dict_0 = {}
    var_0 = module_0.is_int_list(dict_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    set_0 = set()
    var_1 = module_0.is_mixed_list(set_0, *var_0)
    module_0.numToDottedQuad(var_1)

def test_case_18():
    var_0 = module_1.purge()
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_option(var_0)

def test_case_19():
    str_0 = ' 35?.;$c$?g'
    vdt_value_too_big_error_0 = module_0.VdtValueTooBigError(str_0)
    assert f'{type(vdt_value_too_big_error_0).__module__}.{type(vdt_value_too_big_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooBigError'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_boolean(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    vdt_value_too_short_error_0 = module_0.VdtValueTooShortError(bool_0)
    assert f'{type(vdt_value_too_short_error_0).__module__}.{type(vdt_value_too_short_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooShortError'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = '__main__'
    module_0.is_string(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    module_0.is_int_list(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    module_0.is_bool_list(bool_0, max=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    float_0 = 0.1
    module_0.is_float_list(float_0, max=float_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    module_0.is_ip_addr_list(none_type_0)

def test_case_25():
    bool_0 = True
    var_0 = module_0.force_list(bool_0, max=bool_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

def test_case_26():
    error_0 = module_2.Error()
    list_0 = [error_0, error_0]
    with pytest.raises(module_0.VdtParamError):
        module_0.is_mixed_list(list_0, *list_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    module_0.is_float(validator_0, max=validator_0)

def test_case_28():
    bytes_0 = b'\x9e&\xbaj\xc7\xf5\x19\xd8\x8c{7\x19\x99~C\x90'
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_boolean(bytes_0)

def test_case_29():
    bool_0 = False
    var_0 = module_0.is_float(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

@pytest.mark.xfail(strict=True)
def test_case_30():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    validator_0.check(str_0, validator_0)

def test_case_31():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    vdt_value_too_small_error_0 = module_0.VdtValueTooSmallError(validator_0)
    assert f'{type(vdt_value_too_small_error_0).__module__}.{type(vdt_value_too_small_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooSmallError'

@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = False
    var_0 = module_0.is_float(bool_0, bool_0, bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    var_1 = module_0.force_list(bool_0)
    module_0.force_list(var_1, max=var_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.check(str_0, str_0, validator_0)
    assert var_0 == 10
    module_0.is_int_list(str_0)

def test_case_34():
    bool_0 = True
    var_0 = module_0.is_float(bool_0, max=bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    var_1 = var_0.__bool__()
    var_2 = module_0.numToDottedQuad(bool_0)
    assert var_2 == '0.0.0.1'
    var_3 = module_0.is_string(var_2, var_0)
    assert var_3 == '0.0.0.1'
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_string_list(var_3, max=var_1)

@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    module_0.is_tuple(none_type_0)

def test_case_36():
    set_0 = set()
    none_type_0 = None
    var_0 = module_0.is_float_list(set_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_mixed_list(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_37():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integeW(min0, default=10)'
    validator_0.get_default_value(str_0)

def test_case_38():
    bool_0 = False
    var_0 = module_0.is_integer(bool_0, bool_0)
    assert var_0 is False
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

def test_case_39():
    str_0 = ' 35?.;$c$?g'
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_boolean(str_0)

def test_case_40():
    str_0 = 'X#=kI{Nm@I=VhI('
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_integer(str_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    set_0 = set()
    var_0 = module_0.is_string_list(set_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    var_1 = module_0.is_mixed_list(var_0)
    float_0 = 183.0
    var_2 = module_0.is_float(float_0)
    assert var_2 == pytest.approx(183.0, abs=0.01, rel=0.01)
    var_2.__reversed__(var_2)

def test_case_42():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_mixed_list(validator_0)

def test_case_43():
    none_type_0 = None
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_float(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.force_list(none_type_0, bool_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    var_0.__iter__(var_0)

def test_case_45():
    bool_0 = True
    var_0 = module_0.is_integer(bool_0, max=bool_0)
    assert var_0 is True
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

@pytest.mark.xfail(strict=True)
def test_case_46():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    var_0 = module_0.force_list(validator_0)
    str_0 = 'integer(min=0, default=10)'
    var_1 = validator_0.get_default_value(str_0)
    assert var_1 == 10
    var_2 = module_0.is_string(str_0)
    assert var_2 == 'integer(min=0, default=10)'
    var_3 = var_2.__dir__()
    module_0.is_bool_list(var_3)

@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = False
    var_0 = module_0.force_list(bool_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    var_1 = module_0.is_float_list(var_0)
    module_3.pprint(var_1, var_1, var_1, depth=var_0)

def test_case_48():
    float_0 = 30.0
    var_0 = module_0.is_float(float_0, float_0)
    assert var_0 == pytest.approx(30.0, abs=0.01, rel=0.01)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}

@pytest.mark.xfail(strict=True)
def test_case_49():
    list_0 = []
    var_0 = module_0.is_ip_addr_list(list_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    list_1 = [var_0, var_0, list_0, list_0]
    validate_error_0 = module_0.ValidateError(*list_1)
    bool_0 = False
    vdt_value_too_long_error_0 = module_0.VdtValueTooLongError(bool_0)
    assert f'{type(vdt_value_too_long_error_0).__module__}.{type(vdt_value_too_long_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooLongError'
    var_1 = module_0.is_boolean(bool_0)
    assert var_1 is False
    var_2 = module_0.is_integer(var_1)
    assert var_2 is False
    vdt_value_too_small_error_0 = module_0.VdtValueTooSmallError(validate_error_0)
    assert f'{type(vdt_value_too_small_error_0).__module__}.{type(vdt_value_too_small_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooSmallError'
    bool_0.check(vdt_value_too_small_error_0, var_2)

def test_case_50():
    bool_0 = True
    var_0 = module_0.numToDottedQuad(bool_0)
    assert var_0 == '0.0.0.1'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    float_0 = -961.77
    with pytest.raises(ValueError):
        module_0.numToDottedQuad(float_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    int_0 = 42
    module_0.force_list(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = 'X#=kI{N+@I=nhI('
    var_0 = module_0.is_string(str_0)
    assert var_0 == 'X#=kI{N+@I=nhI('
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    module_0.is_integer(var_0, var_0)

def test_case_53():
    bool_0 = True
    var_0 = module_0.numToDottedQuad(bool_0)
    assert var_0 == '0.0.0.1'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtValueError):
        module_0.is_option(var_0, *var_0)

def test_case_54():
    bool_0 = True
    var_0 = module_0.numToDottedQuad(bool_0)
    assert var_0 == '0.0.0.1'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtValueTooLongError):
        module_0.is_string(var_0, bool_0, bool_0)

def test_case_55():
    bool_0 = False
    var_0 = module_0.is_boolean(bool_0)
    assert var_0 is False
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'X#=kW{Nm@I=VhI('
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_float(str_0, var_0)

def test_case_56():
    str_0 = 'X#=kI{Nm@I=VhI('
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_float(str_0)

@pytest.mark.xfail(strict=True)
def test_case_57():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.get_default_value(str_0)
    assert var_0 == 10
    int_0 = 6
    dict_0 = {int_0: var_0, str_0: validator_0, validator_0: validator_0, int_0: var_0}
    module_0.is_int_list(dict_0)

def test_case_58():
    dict_0 = {}
    var_0 = module_0.is_int_list(dict_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    set_0 = set()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    with pytest.raises(module_0.VdtValueTooShortError):
        module_0.is_mixed_list(set_0, *list_0)

def test_case_59():
    set_0 = set()
    none_type_0 = None
    var_0 = module_0.is_int_list(set_0, none_type_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    with pytest.raises(module_0.VdtTypeError):
        module_0.is_mixed_list(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    vdt_missing_value_0 = module_0.VdtMissingValue()
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.get_default_value(str_0)
    assert var_0 == 10
    vdt_param_error_0 = module_0.VdtParamError(vdt_missing_value_0, var_0)
    assert f'{type(vdt_param_error_0).__module__}.{type(vdt_param_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtParamError'
    var_1 = module_0.force_list(vdt_param_error_0)
    module_0.is_ip_addr_list(var_1)

def test_case_61():
    bool_0 = False
    var_0 = module_0.is_float(bool_0, max=bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    list_0 = []
    var_1 = module_0.is_bool_list(list_0)
    with pytest.raises(TypeError):
        var_1.__contains__(var_0, var_1)

def test_case_62():
    bool_0 = True
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    bool_1 = False
    with pytest.raises(module_0.VdtValueTooBigError):
        module_0.is_float(bool_0, max=bool_1)

def test_case_63():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.check(str_0, str_0, validator_0)
    assert var_0 == 10

def test_case_64():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = '$/((9Ya#kk'
    with pytest.raises(KeyError):
        validator_0.get_default_value(str_0)

def test_case_65():
    bool_0 = True
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    bool_1 = False
    with pytest.raises(module_0.VdtValueTooSmallError):
        module_0.is_integer(bool_1, bool_0, bool_1)

def test_case_66():
    bool_0 = False
    vdt_value_too_short_error_0 = module_0.VdtValueTooShortError(bool_0)
    assert f'{type(vdt_value_too_short_error_0).__module__}.{type(vdt_value_too_short_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooShortError'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    bool_1 = True
    with pytest.raises(module_0.VdtValueTooBigError):
        module_0.is_integer(bool_1, max=bool_0)

def test_case_67():
    bool_0 = False
    var_0 = module_0.numToDottedQuad(bool_0)
    assert var_0 == '0.0.0.0'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    bool_1 = True
    var_1 = module_0.is_integer(bool_1)
    assert var_1 is True
    var_2 = module_0.is_integer(bool_0)
    assert var_2 is False
    with pytest.raises(module_0.VdtValueTooSmallError):
        module_0.is_float(var_2, var_1)

@pytest.mark.xfail(strict=True)
def test_case_68():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    validator_0.check(str_0, str_0)

def test_case_69():
    bytes_0 = b"''\xc2A\xce\xc9\x9d\xf2\xe1t\x90p\xac\x06r\x1a"
    var_0 = module_0.force_list(bytes_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    bool_0 = False
    var_1 = module_0.is_float(bool_0, max=bool_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = module_0.numToDottedQuad(bool_0)
    assert var_2 == '0.0.0.0'
    regex_flag_0 = module_1.RegexFlag.UNICODE
    with pytest.raises(module_0.VdtValueTooShortError):
        module_0.is_string(var_2, regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = 'woodpecker.misc.contrib.validate'
    list_0 = [str_0]
    var_0 = module_0.is_option(str_0, *list_0)
    assert var_0 == 'woodpecker.misc.contrib.validate'
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    module_0.is_float_list(str_0)

def test_case_71():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'i\\teger(mjn=0, defaut=10)'
    with pytest.raises(module_0.VdtMissingValue):
        validator_0.check(str_0, str_0, validator_0)

@pytest.mark.xfail(strict=True)
def test_case_72():
    var_0 = module_4._EnumDict()
    list_0 = [var_0, var_0]
    module_0.is_mixed_list(list_0, *list_0)

@pytest.mark.xfail(strict=True)
def test_case_73():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.get_default_value(str_0)
    assert var_0 == 10
    validator_0.check(str_0, str_0)

def test_case_74():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'ZZ5%X="=<3(p'
    none_type_0 = None
    var_0 = validator_0.check(str_0, none_type_0)
    with pytest.raises(module_0.VdtMissingValue):
        validator_0.check(str_0, str_0, validator_0)

def test_case_75():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.get_default_value(str_0)
    assert var_0 == 10

@pytest.mark.xfail(strict=True)
def test_case_76():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = 'integer(min=0, default=10)'
    var_0 = validator_0.get_default_value(str_0)
    assert var_0 == 10
    var_1 = module_0.force_list(validator_0)
    var_2 = module_0.is_string(str_0)
    assert var_2 == 'integer(min=0, default=10)'
    var_3 = validator_0.check(var_2, var_0)
    assert var_3 == 10
    var_4 = module_0.numToDottedQuad(var_0)
    assert var_4 == '0.0.0.10'
    var_5 = module_0.is_string(var_4, max=var_0)
    assert var_5 == '0.0.0.10'
    var_6 = module_0.is_ip_addr(var_4)
    assert var_6 == '0.0.0.10'
    vdt_value_too_big_error_0 = module_0.VdtValueTooBigError(var_5)
    assert f'{type(vdt_value_too_big_error_0).__module__}.{type(vdt_value_too_big_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtValueTooBigError'
    module_0.is_integer(vdt_value_too_big_error_0, var_4)

def test_case_77():
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    str_0 = '\n    >>>\n    >>> v = Validator()\n    >>> v.get_default_value(\'string(default="#ff00dd")\')\n    \'#ff00dd\'\n    >>> v.get_default_value(\'integer(default=3) # comment\')\n    3\n    '
    with pytest.raises(KeyError):
        validator_0.get_default_value(str_0)

@pytest.mark.xfail(strict=True)
def test_case_78():
    bytes_0 = b'\xb9'
    var_0 = module_0.is_tuple(bytes_0)
    assert module_0.bool_dict == {True: True, 'on': True, '1': True, 'true': True, 'yes': True, False: False, 'off': False, '0': False, 'false': False, 'no': False}
    validator_0 = module_0.Validator()
    assert f'{type(validator_0).__module__}.{type(validator_0).__qualname__}' == 'woodpecker.misc.contrib.validate.Validator'
    assert f'{type(validator_0.functions).__module__}.{type(validator_0.functions).__qualname__}' == 'builtins.dict'
    assert len(validator_0.functions) == 17
    var_1 = module_0.is_int_list(var_0)
    str_0 = ''
    vdt_param_error_0 = module_0.VdtParamError(bytes_0)
    assert f'{type(vdt_param_error_0).__module__}.{type(vdt_param_error_0).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtParamError'
    var_2 = module_0.is_string(str_0)
    assert var_2 == ''
    var_3 = var_2.__dir__()
    var_4 = validator_0.check(var_2, vdt_param_error_0)
    assert f'{type(var_4).__module__}.{type(var_4).__qualname__}' == 'woodpecker.misc.contrib.validate.VdtParamError'
    module_0.numToDottedQuad(vdt_param_error_0)