# Automatically generated by Pynguin.
import pytest
import woodpecker.io.variablejar as module_0

def test_case_0():
    none_type_0 = None
    variable_jar_0 = module_0.VariableJar(none_type_0)
    var_0 = variable_jar_0.set(variable_jar_0, none_type_0)

def test_case_1():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.get(variable_jar_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'woodpecker.io.variablejar.VariableJar'

def test_case_2():
    str_0 = 'sequences'
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.delete(str_0)

def test_case_3():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.is_set(variable_jar_0)
    assert var_0 is False
    str_0 = '>wxP\n_f$H'
    var_1 = variable_jar_0.get(str_0)
    assert var_1 == '>wxP\n_f$H'

@pytest.mark.xfail(strict=True)
def test_case_4():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.dump()
    var_0.dump()

def test_case_5():
    str_0 = 'sequences'
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.set_pecker_id(variable_jar_0)
    var_1 = variable_jar_0.delete(str_0)

def test_case_6():
    str_0 = 'sequences'
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.set(str_0, variable_jar_0)
    var_1 = variable_jar_0.set_current_sequence(variable_jar_0)

def test_case_7():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.set_current_iteration(variable_jar_0)
    var_1 = variable_jar_0.set_pecker_id(variable_jar_0)
    var_2 = variable_jar_0.set(variable_jar_0, variable_jar_0)
    var_3 = variable_jar_0.get_current_sequence()

def test_case_8():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.get_pecker_id()
    str_0 = '>ExP\n_f$H'
    var_1 = variable_jar_0.get(str_0)
    assert var_1 == '>ExP\n_f$H'

def test_case_9():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.get_current_iteration()
    assert var_0 == 0
    str_0 = '>wxP\n_f$H'
    var_1 = variable_jar_0.get(str_0)
    assert var_1 == '>wxP\n_f$H'

@pytest.mark.xfail(strict=True)
def test_case_10():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.get(variable_jar_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'woodpecker.io.variablejar.VariableJar'
    var_1 = variable_jar_0.set(var_0, variable_jar_0)
    float_0 = -2615.0
    var_2 = var_0.set_current_iteration(float_0)
    var_3 = variable_jar_0.delete(variable_jar_0)
    var_3.reset()

def test_case_11():
    str_0 = 'sequences'
    variable_jar_0 = module_0.VariableJar(str_0)
    with pytest.raises(KeyError):
        variable_jar_0.get(str_0)

def test_case_12():
    str_0 = 'ez"N,\x0c!HV@~5LSZ0W'
    variable_jar_0 = module_0.VariableJar(str_0)
    with pytest.raises(KeyError):
        variable_jar_0.delete(str_0)

def test_case_13():
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.reset()
    var_1 = variable_jar_0.set(variable_jar_0, variable_jar_0)
    var_2 = variable_jar_0.get(variable_jar_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'woodpecker.io.variablejar.VariableJar'
    var_3 = variable_jar_0.set_current_sequence(var_2)
    var_4 = variable_jar_0.delete(variable_jar_0)

def test_case_14():
    str_0 = 'last_updated_item'
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.dump()
    var_1 = variable_jar_0.set_current_iteration(str_0)
    with pytest.raises(KeyError):
        variable_jar_0.get(str_0)

def test_case_15():
    str_0 = 'last_updated_item'
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.dump()
    with pytest.raises(KeyError):
        variable_jar_0.delete(str_0)

def test_case_16():
    str_0 = 'last_updated_item'
    variable_jar_0 = module_0.VariableJar()
    var_0 = variable_jar_0.dump()
    var_1 = variable_jar_0.set_current_iteration(var_0)
    var_2 = variable_jar_0.set_current_sequence(var_0)
    var_3 = variable_jar_0.get(variable_jar_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'woodpecker.io.variablejar.VariableJar'
    with pytest.raises(KeyError):
        variable_jar_0.set(str_0, var_3)