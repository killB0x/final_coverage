# Automatically generated by Pynguin.
import pytest
import re as module_0
import woodpecker.io.generators.basegenerator as module_1
import ast as module_2
import inspect as module_3
import woodpecker.io.correlators.event as module_4

def test_case_0():
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        module_1.BaseGenerator(var_0)

def test_case_1():
    import_from_0 = module_2.ImportFrom()
    command_generator_0 = module_1.CommandGenerator(import_from_0)

def test_case_2():
    none_type_0 = None
    command_generator_0 = module_1.CommandGenerator(none_type_0)
    var_0 = command_generator_0.add_named_argument(none_type_0, none_type_0)
    var_1 = command_generator_0.add_argument(command_generator_0)
    var_2 = command_generator_0.generate_command()
    assert var_2 == "        None('CommandGenerator - None', None='None')\n\n"
    var_3 = command_generator_0.add_named_argument(command_generator_0, command_generator_0)

def test_case_3():
    none_type_0 = None
    command_generator_0 = module_1.CommandGenerator(none_type_0)
    var_0 = command_generator_0.add_named_argument(none_type_0, none_type_0)
    var_1 = command_generator_0.generate_command()
    assert var_1 == "        None(, None='None')\n\n"

def test_case_4():
    bytes_0 = b'\x8d)\x9f\x9a\xd5\xbbVU\x19\xf25H\xdc\xc2UUc@\xe8'
    var_0 = module_0.purge()
    command_generator_0 = module_1.CommandGenerator(var_0)
    var_1 = command_generator_0.generate_command()
    assert var_1 == '        None()\n\n'
    with pytest.raises(TypeError):
        module_1.BaseGenerator(bytes_0)

def test_case_5():
    bytes_0 = b'\x8d)\x9f\x9a\xd5\xbbU\x19\xf25\x97\xdc\xc2UUc@\xe8'
    command_generator_0 = module_1.CommandGenerator(bytes_0)
    var_0 = module_3.ismethod(bytes_0)
    var_1 = command_generator_0.add_named_argument(bytes_0, var_0)
    var_2 = var_1.__repr__()
    var_3 = command_generator_0.generate_command()
    assert var_3 == "        b'\\x8d)\\x9f\\x9a\\xd5\\xbbU\\x19\\xf25\\x97\\xdc\\xc2UUc@\\xe8'(, b'\\x8d)\\x9f\\x9a\\xd5\\xbbU\\x19\\xf25\\x97\\xdc\\xc2UUc@\\xe8'=False)\n\n"
    with pytest.raises(TypeError):
        module_1.BaseGenerator(var_3)

def test_case_6():
    var_0 = module_4.EventCollection()
    base_generator_0 = module_1.BaseGenerator(var_0)
    assert f'{type(base_generator_0).__module__}.{type(base_generator_0).__qualname__}' == 'woodpecker.io.generators.basegenerator.BaseGenerator'
    assert f'{type(base_generator_0.buffer).__module__}.{type(base_generator_0.buffer).__qualname__}' == '_io.StringIO'
    assert base_generator_0.buffer_list == []
    assert base_generator_0.base_sequence_name is None
    assert f'{type(base_generator_0.events).__module__}.{type(base_generator_0.events).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'

def test_case_7():
    event_collection_0 = module_4.EventCollection()
    base_generator_0 = module_1.BaseGenerator(event_collection_0)
    assert f'{type(base_generator_0).__module__}.{type(base_generator_0).__qualname__}' == 'woodpecker.io.generators.basegenerator.BaseGenerator'
    assert f'{type(base_generator_0.buffer).__module__}.{type(base_generator_0.buffer).__qualname__}' == '_io.StringIO'
    assert base_generator_0.buffer_list == []
    assert base_generator_0.base_sequence_name is None
    assert f'{type(base_generator_0.events).__module__}.{type(base_generator_0.events).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'
    var_0 = base_generator_0.generate(event_collection_0)

def test_case_8():
    bytes_0 = b'\x8d)\x9f\x9a\xd5\xbbVU\x19\xf25H\xdc\xc2UUc@\xe8'
    command_generator_0 = module_1.CommandGenerator(bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, command_generator_0: command_generator_0, bytes_0: bytes_0}
    command_generator_1 = module_1.CommandGenerator(dict_0, bytes_0)
    var_0 = command_generator_0.add_named_argument(command_generator_0, dict_0)
    var_1 = command_generator_0.generate_command()
    assert var_1 == "        b'\\x8d)\\x9f\\x9a\\xd5\\xbbVU\\x19\\xf25H\\xdc\\xc2UUc@\\xe8'(, CommandGenerator - b'\\x8d)\\x9f\\x9a\\xd5\\xbbVU\\x19\\xf25H\\xdc\\xc2UUc@\\xe8'={b'\\x8d)\\x9f\\x9a\\xd5\\xbbVU\\x19\\xf25H\\xdc\\xc2UUc@\\xe8': b'\\x8d)\\x9f\\x9a\\xd5\\xbbVU\\x19\\xf25H\\xdc\\xc2UUc@\\xe8', CommandGenerator - b'\\x8d)\\x9f\\x9a\\xd5\\xbbVU\\x19\\xf25H\\xdc\\xc2UUc@\\xe8': CommandGenerator - b'\\x8d)\\x9f\\x9a\\xd5\\xbbVU\\x19\\xf25H\\xdc\\xc2UUc@\\xe8'})\n\n"
    with pytest.raises(TypeError):
        module_1.BaseGenerator(command_generator_0)