# Automatically generated by Pynguin.
import pytest
import woodpecker.io.correlators.event as module_0
import platform as module_1
import enum as module_2
import collections.abc as module_3

def test_case_0():
    event_collection_0 = module_0.EventCollection()
    event_0 = module_0.Event(event_collection_0, event_collection_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'
    with pytest.raises(KeyError):
        event_collection_0.prepend_event(event_0, event_0)

def test_case_1():
    none_type_0 = None
    event_0 = module_0.Event(none_type_0, none_type_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'uuid.UUID'
    event_collection_0 = module_0.EventCollection()
    with pytest.raises(TypeError):
        event_collection_0.search_by_data(event_collection_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    event_collection_0 = module_0.EventCollection()
    var_0 = module_1.freedesktop_os_release()
    var_1 = event_collection_0.search_by_data(var_0)
    event_collection_0.append_event(var_1, event_collection_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    event_collection_0 = module_0.EventCollection()
    event_collection_0.last_event()

def test_case_4():
    event_collection_0 = module_0.EventCollection()

def test_case_5():
    event_collection_0 = module_0.EventCollection()
    event_0 = module_0.Event(event_collection_0, event_collection_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'
    var_0 = event_0.prepend_event(event_0)
    with pytest.raises(KeyError):
        event_collection_0.prepend_event(event_0, event_0)

def test_case_6():
    event_collection_0 = module_0.EventCollection()
    event_0 = module_0.Event(event_collection_0, event_collection_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'
    var_0 = event_0.has_prepended_events()
    assert var_0 is False
    with pytest.raises(KeyError):
        event_collection_0.append_event(event_0, event_0)

def test_case_7():
    event_collection_0 = module_0.EventCollection()
    var_0 = event_collection_0.all_events()
    with pytest.raises(TypeError):
        event_collection_0.search_by_data(event_collection_0)

def test_case_8():
    event_collection_0 = module_0.EventCollection()
    with pytest.raises(TypeError):
        event_collection_0.search_by_data(event_collection_0)

def test_case_9():
    event_collection_0 = module_0.EventCollection()
    var_0 = module_1.freedesktop_os_release()
    var_1 = event_collection_0.search_by_data(var_0)

def test_case_10():
    var_0 = module_1.libc_ver()
    event_0 = module_0.Event(var_0, var_0)
    assert event_0.id == ('glibc', '2.31')
    event_collection_0 = module_0.EventCollection()
    var_1 = event_collection_0.add_event(event_0)
    assert len(event_collection_0.events) == 1
    var_2 = event_0.append_event(event_0)
    enum_dict_0 = module_2._EnumDict()
    with pytest.raises(KeyError):
        event_collection_0.append_event(event_collection_0, event_0)

def test_case_11():
    event_collection_0 = module_0.EventCollection()
    event_0 = module_0.Event(event_collection_0, event_collection_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'
    var_0 = event_0.has_appended_events()
    assert var_0 is False
    var_1 = event_0.prepend_event(event_0)
    with pytest.raises(KeyError):
        event_collection_0.prepend_event(event_0, event_0)

def test_case_12():
    event_collection_0 = module_0.EventCollection()
    event_0 = module_0.Event(event_collection_0, event_collection_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'woodpecker.io.correlators.event.EventCollection'
    with pytest.raises(KeyError):
        event_collection_0.append_event(event_0, event_0)

def test_case_13():
    var_0 = module_1.uname()
    event_0 = module_0.Event(var_0, var_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'platform.uname_result'
    assert len(event_0.id) == 6
    event_collection_0 = module_0.EventCollection()
    var_1 = event_collection_0.add_event(event_0)
    assert len(event_collection_0.events) == 1
    enum_dict_0 = module_2._EnumDict()
    var_2 = event_collection_0.search_by_data(enum_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_1.win32_is_iot()
    event_0 = module_0.Event(var_0, var_0)
    assert f'{type(event_0.id).__module__}.{type(event_0.id).__qualname__}' == 'uuid.UUID'
    event_collection_0 = module_0.EventCollection()
    var_1 = event_collection_0.add_event(event_0)
    assert len(event_collection_0.events) == 1
    enum_dict_0 = module_2._EnumDict()
    var_2 = module_3.KeysView(var_0)
    event_collection_0.prepend_event(var_2, event_0)

def test_case_15():
    var_0 = module_1.libc_ver()
    event_0 = module_0.Event(var_0, var_0)
    assert event_0.id == ('glibc', '2.31')
    event_collection_0 = module_0.EventCollection()
    var_1 = event_collection_0.add_event(event_0)
    assert len(event_collection_0.events) == 1
    var_2 = module_1.freedesktop_os_release()
    var_3 = event_collection_0.search_by_data(var_2)

@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_1.libc_ver()
    event_0 = module_0.Event(var_0, var_0)
    assert event_0.id == ('glibc', '2.31')
    var_1 = event_0.__repr__()
    assert var_1 == "Event - ('glibc', '2.31') - ('glibc', '2.31')"
    var_2 = event_0.has_prepended_events()
    assert var_2 is False
    event_collection_0 = module_0.EventCollection()
    var_3 = event_collection_0.add_event(event_0)
    assert len(event_collection_0.events) == 1
    var_4 = module_1.freedesktop_os_release()
    event_collection_1 = module_0.EventCollection()
    var_5 = event_collection_0.search_by_data(var_4)
    event_collection_0.append_event(var_4, event_0)