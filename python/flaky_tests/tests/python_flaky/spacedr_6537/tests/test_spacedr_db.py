# Automatically generated by Pynguin.
import pytest
import spacedr.db as module_0
import spacedr.errors as module_1

def test_case_0():
    int_0 = -207
    with pytest.raises(module_1.CardNotFoundError):
        module_0.get_card_by_id(int_0)

def test_case_1():
    int_0 = 577
    with pytest.raises(module_1.DeckNotFoundError):
        module_0.get_deck_by_id(int_0)

def test_case_2():
    str_0 = module_0.get_db_path()
    assert str_0 == '/pynguin/spacedr/spacedr.sqlite'
    assert f'{type(module_0.session).__module__}.{type(module_0.session).__qualname__}' == 'sqlalchemy.orm.session.Session'
    assert f'{type(module_0.session.identity_map).__module__}.{type(module_0.session.identity_map).__qualname__}' == 'sqlalchemy.orm.identity.WeakInstanceDict'
    assert len(module_0.session.identity_map) == 0
    assert f'{type(module_0.session.bind).__module__}.{type(module_0.session.bind).__qualname__}' == 'sqlalchemy.engine.base.Engine'
    assert module_0.session.future is False
    assert module_0.session.autoflush is True
    assert module_0.session.expire_on_commit is False
    assert module_0.session.enable_baked_queries is True
    assert module_0.session.autocommit is False
    assert module_0.session.twophase is False
    assert f'{type(module_0.session.dispatch).__module__}.{type(module_0.session.dispatch).__qualname__}' == 'sqlalchemy.event.base.SessionEventsDispatch'

def test_case_3():
    none_type_0 = module_0.db_init()
    assert f'{type(module_0.session).__module__}.{type(module_0.session).__qualname__}' == 'sqlalchemy.orm.session.Session'
    assert f'{type(module_0.session.identity_map).__module__}.{type(module_0.session.identity_map).__qualname__}' == 'sqlalchemy.orm.identity.WeakInstanceDict'
    assert len(module_0.session.identity_map) == 0
    assert f'{type(module_0.session.bind).__module__}.{type(module_0.session.bind).__qualname__}' == 'sqlalchemy.engine.base.Engine'
    assert module_0.session.future is False
    assert module_0.session.hash_key == 16575
    assert module_0.session.autoflush is True
    assert module_0.session.expire_on_commit is False
    assert module_0.session.enable_baked_queries is True
    assert module_0.session.autocommit is False
    assert module_0.session.twophase is False
    assert f'{type(module_0.session.dispatch).__module__}.{type(module_0.session.dispatch).__qualname__}' == 'sqlalchemy.event.base.SessionEventsDispatch'