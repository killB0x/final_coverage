# Automatically generated by Pynguin.
import pytest
import wikidataintegrator.wdi_fastrun as module_0

def test_case_0():
    none_type_0 = None
    fast_run_container_0 = module_0.FastRunContainer(none_type_0, none_type_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is None
    assert fast_run_container_0.engine is None
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None

def test_case_1():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'

def test_case_2():
    int_0 = -587
    fast_run_container_0 = module_0.FastRunContainer(int_0, int_0, concept_base_uri=int_0, case_insensitive=int_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == -587
    assert fast_run_container_0.engine == -587
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == -587
    assert fast_run_container_0.case_insensitive == -587
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None

def test_case_3():
    bool_0 = False
    fast_run_container_0 = module_0.FastRunContainer(bool_0, bool_0, sparql_endpoint_url=bool_0, base_filter=bool_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is False
    assert fast_run_container_0.engine is False
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url is False
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.FastRunContainer(bool_0, bool_0, sparql_endpoint_url=bool_0, base_filter=bool_0)

def test_case_5():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)
    fast_run_container_0.write_required(bytes_0, cqid=var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    fast_run_container_0 = module_0.FastRunContainer(none_type_0, none_type_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is None
    assert fast_run_container_0.engine is None
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    fast_run_container_0.check_language_data(fast_run_container_0, fast_run_container_0, none_type_0, fast_run_container_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'?'
    bool_0 = False
    fast_run_container_0 = module_0.FastRunContainer(bool_0, bool_0, bool_0, base_filter=bool_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is False
    assert fast_run_container_0.engine is False
    assert fast_run_container_0.mediawiki_api_url is False
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    fast_run_container_0.update_frc_from_query(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    fast_run_container_0 = module_0.FastRunContainer(bool_0, bool_0, sparql_endpoint_url=bool_0, base_filter=bool_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is False
    assert fast_run_container_0.engine is False
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url is False
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    fast_run_container_1 = fast_run_container_0.__repr__()
    none_type_0 = None
    module_0.FastRunContainer(fast_run_container_1, fast_run_container_0, wikibase_url=fast_run_container_1, base_filter=fast_run_container_1, ref_handler=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, use_refs=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.ref_handler is None
    var_0 = fast_run_container_0.get_all_data()
    str_0 = 'v,Q^~GgEajb"*eo'
    var_0.update_frc_from_query(str_0, fast_run_container_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_0}
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bool_0, base_filter=dict_0, debug=dict_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd': b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd', False: False}
    assert fast_run_container_0.base_filter_string == "?item wdt:b'a=P\\x0e\\x81\\xd6\\x1f\\xf0\\xb3\\xff\\x0f\\xdd' wd:b'a=P\\x0e\\x81\\xd6\\x1f\\xf0\\xb3\\xff\\x0f\\xdd' . \n?item wdt:False ?zz . \n"
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine is False
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug == {b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd': b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd', False: False}
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    fast_run_container_0.format_query_results(bytes_0, bytes_0)

def test_case_12():
    none_type_0 = None
    fast_run_container_0 = module_0.FastRunContainer(none_type_0, none_type_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is None
    assert fast_run_container_0.engine is None
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    var_0 = fast_run_container_0.clear()

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '\n        A method to check if when invoking __select_wd_item() and the WD item does not exist yet, but another item\n        has a property of the current domain with a value like submitted in the data dict, this item does not get\n        selected but a ManualInterventionReqException() is raised. This check is dependent on the core identifiers\n        of a certain domain.\n        :return: boolean True if test passed\n        '
    module_0.FastRunContainer(str_0, str_0, str_0, base_filter=str_0, use_refs=str_0, debug=str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, use_refs=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs == b'a=\x7f\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.ref_handler is None
    fast_run_container_0.load_item(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'?'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'?'
    assert fast_run_container_0.engine == b'?'
    assert fast_run_container_0.mediawiki_api_url == b'?'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'?'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'?'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'?'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)
    fast_run_container_0.write_required(var_0, fast_run_container_0, bytes_0)

def test_case_16():
    none_type_0 = None
    int_0 = -773
    int_1 = 1904
    dict_0 = {none_type_0: int_1, int_1: none_type_0, int_1: int_1}
    fast_run_container_0 = module_0.FastRunContainer(int_0, dict_0, sparql_endpoint_url=none_type_0, wikibase_url=none_type_0, base_filter=dict_0, debug=int_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {None: 1904, 1904: 1904}
    assert fast_run_container_0.base_filter_string == '?item wdt:None wd:1904 . \n?item wdt:1904 wd:1904 . \n'
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == -773
    assert fast_run_container_0.engine == {None: 1904, 1904: 1904}
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug == -773
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)
    var_1 = fast_run_container_0.clear()
    fast_run_container_1 = module_0.FastRunContainer(var_1, var_0, fast_run_container_0, var_1, var_1, var_1, var_1, var_0, var_1)
    assert f'{type(fast_run_container_1).__module__}.{type(fast_run_container_1).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_1.prop_data == {}
    assert fast_run_container_1.loaded_langs == {}
    assert fast_run_container_1.statements == []
    assert fast_run_container_1.base_filter == {}
    assert fast_run_container_1.base_filter_string == ''
    assert fast_run_container_1.prop_dt_map == {}
    assert fast_run_container_1.current_qid == ''
    assert f'{type(fast_run_container_1.rev_lookup).__module__}.{type(fast_run_container_1.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_1.rev_lookup) == 0
    assert f'{type(fast_run_container_1.rev_lookup_ci).__module__}.{type(fast_run_container_1.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_1.rev_lookup_ci) == 0
    assert fast_run_container_1.base_data_type is None
    assert fast_run_container_1.engine == []
    assert f'{type(fast_run_container_1.mediawiki_api_url).__module__}.{type(fast_run_container_1.mediawiki_api_url).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_1.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_1.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_1.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_1.case_insensitive is False
    assert fast_run_container_1.debug is False
    assert fast_run_container_1.reconstructed_statements == []
    assert fast_run_container_1.use_refs == []
    assert fast_run_container_1.ref_handler is None
    var_2 = fast_run_container_1.write_required(var_0, cqid=bytes_0)
    assert var_2 is False
    assert fast_run_container_1.current_qid == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_3 = var_1.__repr__()
    var_4 = fast_run_container_1.update_frc_from_query(var_0, var_2)
    fast_run_container_1.write_required(var_0, var_3)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)
    var_1 = fast_run_container_0.clear()
    fast_run_container_1 = module_0.FastRunContainer(var_1, var_0, fast_run_container_0, var_1, var_1, var_1, var_1, var_0, var_1)
    assert f'{type(fast_run_container_1).__module__}.{type(fast_run_container_1).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_1.prop_data == {}
    assert fast_run_container_1.loaded_langs == {}
    assert fast_run_container_1.statements == []
    assert fast_run_container_1.base_filter == {}
    assert fast_run_container_1.base_filter_string == ''
    assert fast_run_container_1.prop_dt_map == {}
    assert fast_run_container_1.current_qid == ''
    assert f'{type(fast_run_container_1.rev_lookup).__module__}.{type(fast_run_container_1.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_1.rev_lookup) == 0
    assert f'{type(fast_run_container_1.rev_lookup_ci).__module__}.{type(fast_run_container_1.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_1.rev_lookup_ci) == 0
    assert fast_run_container_1.base_data_type is None
    assert fast_run_container_1.engine == []
    assert f'{type(fast_run_container_1.mediawiki_api_url).__module__}.{type(fast_run_container_1.mediawiki_api_url).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_1.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_1.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_1.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_1.case_insensitive is False
    assert fast_run_container_1.debug is False
    assert fast_run_container_1.reconstructed_statements == []
    assert fast_run_container_1.use_refs == []
    assert fast_run_container_1.ref_handler is None
    var_2 = fast_run_container_1.write_required(var_0, cqid=bytes_0)
    assert var_2 is False
    assert fast_run_container_1.current_qid == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_3 = fast_run_container_1.update_frc_from_query(var_0, var_2)
    fast_run_container_0.write_required(bytes_0, cqid=var_2)

def test_case_19():
    bytes_0 = b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.engine == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.mediawiki_api_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)
    var_1 = fast_run_container_0.write_required(var_0, cqid=bytes_0)
    assert var_1 is False
    assert fast_run_container_0.current_qid == b'a=P\x0e\x81\xd6\x1f\xf0\xb3\xff\x0f\xdd'

@pytest.mark.xfail(strict=True)
def test_case_20():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    fast_run_container_0 = module_0.FastRunContainer(dict_0, list_0, concept_base_uri=dict_0, base_filter=list_0, ref_handler=none_type_0, case_insensitive=dict_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == {}
    assert fast_run_container_0.engine == [{}, {}]
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == {}
    assert fast_run_container_0.case_insensitive == {}
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    fast_run_container_0.check_language_data(list_0, list_0, list_0, dict_0)

def test_case_21():
    bool_0 = False
    fast_run_container_0 = module_0.FastRunContainer(bool_0, bool_0, sparql_endpoint_url=bool_0, base_filter=bool_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is False
    assert fast_run_container_0.engine is False
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url is False
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    var_0 = fast_run_container_0.format_amount(bool_0)
    assert var_0 == '+0'

@pytest.mark.xfail(strict=True)
def test_case_22():
    float_0 = -200.0
    none_type_0 = None
    fast_run_container_0 = module_0.FastRunContainer(float_0, float_0, sparql_endpoint_url=float_0, wikibase_url=none_type_0, case_insensitive=none_type_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_0.engine == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is None
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    var_0 = fast_run_container_0.format_amount(float_0)
    assert var_0 == '-200'
    none_type_1 = None
    fast_run_container_1 = module_0.FastRunContainer(float_0, float_0, use_refs=float_0, debug=float_0)
    assert f'{type(fast_run_container_1).__module__}.{type(fast_run_container_1).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_1.prop_data == {}
    assert fast_run_container_1.loaded_langs == {}
    assert fast_run_container_1.statements == []
    assert fast_run_container_1.base_filter == {}
    assert fast_run_container_1.base_filter_string == ''
    assert fast_run_container_1.prop_dt_map == {}
    assert fast_run_container_1.current_qid == ''
    assert f'{type(fast_run_container_1.rev_lookup).__module__}.{type(fast_run_container_1.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_1.rev_lookup) == 0
    assert f'{type(fast_run_container_1.rev_lookup_ci).__module__}.{type(fast_run_container_1.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_1.rev_lookup_ci) == 0
    assert fast_run_container_1.base_data_type == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_1.engine == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_1.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_1.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_1.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_1.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_1.case_insensitive is False
    assert fast_run_container_1.debug == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_1.reconstructed_statements == []
    assert fast_run_container_1.use_refs == pytest.approx(-200.0, abs=0.01, rel=0.01)
    assert fast_run_container_1.ref_handler is None
    fast_run_container_2 = module_0.FastRunContainer(float_0, float_0, sparql_endpoint_url=fast_run_container_1, concept_base_uri=none_type_1, ref_handler=float_0, case_insensitive=none_type_1, debug=float_0)
    assert fast_run_container_2.base_filter_string == ''
    assert fast_run_container_2.current_qid == ''
    fast_run_container_2.init_language_data(fast_run_container_1, none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    float_0 = 1834.18
    none_type_0 = None
    fast_run_container_0 = module_0.FastRunContainer(none_type_0, none_type_0, sparql_endpoint_url=none_type_0, debug=none_type_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type is None
    assert fast_run_container_0.engine is None
    assert fast_run_container_0.mediawiki_api_url == 'https://www.wikidata.org/w/api.php'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == 'http://www.wikidata.org'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive is False
    assert fast_run_container_0.debug is None
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler is None
    var_0 = fast_run_container_0.format_amount(float_0)
    assert var_0 == '+1834.18'
    var_0.write_required(float_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b'?'
    fast_run_container_0 = module_0.FastRunContainer(bytes_0, bytes_0, bytes_0, wikibase_url=bytes_0, ref_handler=bytes_0, case_insensitive=bytes_0)
    assert f'{type(fast_run_container_0).__module__}.{type(fast_run_container_0).__qualname__}' == 'wikidataintegrator.wdi_fastrun.FastRunContainer'
    assert fast_run_container_0.prop_data == {}
    assert fast_run_container_0.loaded_langs == {}
    assert fast_run_container_0.statements == []
    assert fast_run_container_0.base_filter == {}
    assert fast_run_container_0.base_filter_string == ''
    assert fast_run_container_0.prop_dt_map == {}
    assert fast_run_container_0.current_qid == ''
    assert f'{type(fast_run_container_0.rev_lookup).__module__}.{type(fast_run_container_0.rev_lookup).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup) == 0
    assert f'{type(fast_run_container_0.rev_lookup_ci).__module__}.{type(fast_run_container_0.rev_lookup_ci).__qualname__}' == 'collections.defaultdict'
    assert len(fast_run_container_0.rev_lookup_ci) == 0
    assert fast_run_container_0.base_data_type == b'?'
    assert fast_run_container_0.engine == b'?'
    assert fast_run_container_0.mediawiki_api_url == b'?'
    assert fast_run_container_0.sparql_endpoint_url == 'https://query.wikidata.org/sparql'
    assert fast_run_container_0.wikibase_url == b'?'
    assert fast_run_container_0.concept_base_uri == 'http://www.wikidata.org/entity/'
    assert fast_run_container_0.case_insensitive == b'?'
    assert fast_run_container_0.debug is False
    assert fast_run_container_0.reconstructed_statements == []
    assert fast_run_container_0.use_refs is False
    assert fast_run_container_0.ref_handler == b'?'
    var_0 = fast_run_container_0.reconstruct_statements(fast_run_container_0)
    var_1 = fast_run_container_0.write_required(var_0, bytes_0, bytes_0)
    assert var_1 is False
    assert fast_run_container_0.current_qid == b'?'
    var_0.format_amount(var_1)