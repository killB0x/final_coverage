# Automatically generated by Pynguin.
import pytest
import gabbi.handlers.jsonhandler as module_0
import tokenize as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    j_s_o_n_handler_0 = module_0.JSONHandler()
    assert j_s_o_n_handler_0.test_base == {'response_json_paths': {}}
    assert module_0.JSONHandler.test_key_suffix == 'json_paths'
    assert module_0.JSONHandler.test_key_value == {}
    assert f'{type(module_0.JSONHandler.replacer).__module__}.{type(module_0.JSONHandler.replacer).__qualname__}' == 'builtins.method'
    j_s_o_n_handler_0.dumps(j_s_o_n_handler_0, test=j_s_o_n_handler_0)

def test_case_1():
    j_s_o_n_handler_0 = module_0.JSONHandler()
    assert j_s_o_n_handler_0.test_base == {'response_json_paths': {}}
    assert module_0.JSONHandler.test_key_suffix == 'json_paths'
    assert module_0.JSONHandler.test_key_value == {}
    assert f'{type(module_0.JSONHandler.replacer).__module__}.{type(module_0.JSONHandler.replacer).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    j_s_o_n_handler_0 = module_0.JSONHandler()
    assert j_s_o_n_handler_0.test_base == {'response_json_paths': {}}
    assert module_0.JSONHandler.test_key_suffix == 'json_paths'
    assert module_0.JSONHandler.test_key_value == {}
    assert f'{type(module_0.JSONHandler.replacer).__module__}.{type(module_0.JSONHandler.replacer).__qualname__}' == 'builtins.method'
    j_s_o_n_handler_0.loads(j_s_o_n_handler_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    j_s_o_n_handler_0 = module_0.JSONHandler()
    assert j_s_o_n_handler_0.test_base == {'response_json_paths': {}}
    assert module_0.JSONHandler.test_key_suffix == 'json_paths'
    assert module_0.JSONHandler.test_key_value == {}
    assert f'{type(module_0.JSONHandler.replacer).__module__}.{type(module_0.JSONHandler.replacer).__qualname__}' == 'builtins.method'
    j_s_o_n_handler_1 = module_0.JSONHandler()
    assert j_s_o_n_handler_1.test_base == {'response_json_paths': {}}
    j_s_o_n_handler_1.load_data_file(j_s_o_n_handler_1, j_s_o_n_handler_1)

def test_case_4():
    j_s_o_n_handler_0 = module_0.JSONHandler()
    assert j_s_o_n_handler_0.test_base == {'response_json_paths': {}}
    assert module_0.JSONHandler.test_key_suffix == 'json_paths'
    assert module_0.JSONHandler.test_key_value == {}
    assert f'{type(module_0.JSONHandler.replacer).__module__}.{type(module_0.JSONHandler.replacer).__qualname__}' == 'builtins.method'
    none_type_0 = None
    var_0 = j_s_o_n_handler_0.dumps(none_type_0, j_s_o_n_handler_0)
    assert var_0 == 'null'
    with pytest.raises(ValueError):
        j_s_o_n_handler_0.extract_json_path_value(var_0, var_0)

def test_case_5():
    j_s_o_n_handler_0 = module_0.JSONHandler()
    assert j_s_o_n_handler_0.test_base == {'response_json_paths': {}}
    assert module_0.JSONHandler.test_key_suffix == 'json_paths'
    assert module_0.JSONHandler.test_key_value == {}
    assert f'{type(module_0.JSONHandler.replacer).__module__}.{type(module_0.JSONHandler.replacer).__qualname__}' == 'builtins.method'
    var_0 = module_1.any()
    var_1 = j_s_o_n_handler_0.accepts(var_0)
    assert var_1 is False