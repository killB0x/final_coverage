# Automatically generated by Pynguin.
import pytest
import gabbi.utils as module_0
import enum as module_1
import yaml.tokens as module_2
import re as module_3

def test_case_0():
    str_0 = '4\tiqy5NOg5tZba'
    var_0 = module_0.create_url(str_0, str_0)
    assert var_0 == 'http://4\tiqy5NOg5tZba/4iqy5NOg5tZba'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '(>:OZ-'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    var_1 = module_0.create_url(str_0, str_0)
    assert var_1 == 'http://[(>:OZ-]/(>:OZ-'
    var_2 = module_0.host_info_from_target(str_0)
    var_3 = module_0.parse_content_type(var_1)
    module_0.load_yaml(yaml_file=var_3)

@pytest.mark.xfail(strict=True)
def test_case_2():
    module_0.load_yaml()

def test_case_3():
    str_0 = ',\\]Zj'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.host_info_from_target(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.extract_content_type(none_type_0)

def test_case_6():
    str_0 = '4\tiqy5NOg5tZba'
    var_0 = module_0.parse_content_type(str_0)

def test_case_7():
    str_0 = '(>OZ-'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    var_1 = module_0.create_url(str_0, str_0)
    assert var_1 == 'http://(>OZ-/(>OZ-'
    var_2 = module_0.create_url(var_1, var_1, ssl=var_1)
    assert var_2 == 'https://[http://(>OZ-/(>OZ-]/(>OZ-'

def test_case_8():
    str_0 = '4\tiqy5NOg5tZba'
    var_0 = module_0.host_info_from_target(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '4\tiqy5NOg5tZba'
    var_0 = module_0.host_info_from_target(str_0)
    module_0.create_url(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "'_' in test filename %s. This can break suite grouping."
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    module_0.create_url(var_0, str_0, prefix=str_0)

def test_case_11():
    str_0 = '(>:OZ-'
    var_0 = module_0.create_url(str_0, str_0)
    assert var_0 == 'http://[(>:OZ-]/(>:OZ-'

def test_case_12():
    str_0 = '4\tiqy5NOg5tZba'
    var_0 = module_0.create_url(str_0, str_0, prefix=str_0)
    assert var_0 == 'http://4\tiqy5NOg5tZba/4\tiqy5NOg5tZba/4iqy5NOg5tZba'
    var_1 = var_0.capitalize()
    assert var_1 == 'Http://4\tiqy5nog5tzba/4\tiqy5nog5tzba/4iqy5nog5tzba'
    var_2 = module_0.create_url(str_0, var_0)
    assert var_2 == 'http://[http://4\tiqy5NOg5tZba/4\tiqy5NOg5tZba/4iqy5NOg5tZba]/4iqy5NOg5tZba'

def test_case_13():
    str_0 = "'I' in test filename %s. This can break suite grouping."
    var_0 = module_0.create_url(str_0, str_0, prefix=str_0)
    assert var_0 == "http://'I' in test filename %s. This can break suite grouping./'I' in test filename %s. This can break suite grouping."
    var_1 = module_0.host_info_from_target(str_0)

def test_case_14():
    str_0 = '(>:OZ-'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    var_1 = module_0.create_url(str_0, str_0)
    assert var_1 == 'http://[(>:OZ-]/(>:OZ-'
    var_2 = module_0.host_info_from_target(var_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.decode_response_content(enum_dict_0, enum_dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'enum._EnumDict'
    assert len(var_0) == 0
    module_0.load_yaml(yaml_file=enum_dict_0, safe=enum_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '(>OZ-'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    var_1 = module_0.create_url(str_0, str_0, ssl=str_0)
    assert var_1 == 'https://(>OZ-/(>OZ-'
    var_2 = module_0.host_info_from_target(var_1, str_0)
    var_3 = module_0.parse_content_type(var_2)
    var_0.rfind(var_1)

def test_case_17():
    str_0 = '(>:OZ-'
    var_0 = module_0.parse_content_type(str_0)
    var_1 = module_0.create_url(str_0, str_0)
    assert var_1 == 'http://[(>:OZ-]/(>:OZ-'
    var_2 = module_0.host_info_from_target(str_0, var_0)
    var_3 = module_0.parse_content_type(var_1)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'a,W0d[`3Q\n:9p'
    var_0 = module_0.host_info_from_target(str_0)
    var_0.__mul__(var_0)

def test_case_19():
    str_0 = '>;OZX'
    var_0 = str_0.__ge__(str_0)
    var_1 = module_0.create_url(str_0, str_0, var_0, str_0)
    assert var_1 == 'http://>;OZX:True/>;OZX'

def test_case_20():
    str_0 = ';>OZ-'
    var_0 = module_0.parse_content_type(str_0)

def test_case_21():
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.decode_response_content(enum_dict_0, enum_dict_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'enum._EnumDict'
    assert len(var_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '(>;OX=*'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    var_1 = module_0.create_url(str_0, str_0, prefix=str_0)
    assert var_1 == 'http://(>;OX=*/(>;OX=*'
    var_2 = module_0.create_url(var_1, var_1)
    assert var_2 == 'http://[http://(>;OX=*/(>;OX=*]/(>;OX=*'
    var_3 = module_0.host_info_from_target(str_0)
    tag_token_0 = module_2.TagToken(var_0, var_1, str_0)
    assert tag_token_0.value is False
    assert tag_token_0.start_mark == 'http://(>;OX=*/(>;OX=*'
    var_4 = tag_token_0.__repr__()
    assert var_4 == 'TagToken(value=False)'
    var_5 = module_0.host_info_from_target(var_1)
    var_6 = module_0.parse_content_type(str_0)
    var_7 = var_1.__str__()
    assert var_7 == 'http://(>;OX=*/(>;OX=*'
    module_0.extract_content_type(var_7)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '(6;OoX#*'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is False
    var_1 = module_0.create_url(str_0, str_0, prefix=str_0)
    assert var_1 == 'http://(6;OoX#*/(6;OoX#*/(6;OoX'
    var_2 = module_0.create_url(var_1, var_1)
    assert var_2 == 'http://[http://(6;OoX#*/(6;OoX#*/(6;OoX]'
    var_3 = module_0.host_info_from_target(str_0)
    tag_token_0 = module_2.TagToken(var_0, var_1, str_0)
    assert tag_token_0.value is False
    assert tag_token_0.start_mark == 'http://(6;OoX#*/(6;OoX#*/(6;OoX'
    var_4 = module_0.host_info_from_target(var_1)
    var_5 = var_2.__ge__(var_1)
    tag_token_1 = module_2.TagToken(var_2, var_0, str_0)
    assert tag_token_1.value == 'http://[http://(6;OoX#*/(6;OoX#*/(6;OoX]'
    assert tag_token_1.start_mark is False
    module_0.load_yaml(yaml_file=var_5)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '+xml'
    var_0 = module_0.not_binary(str_0)
    assert var_0 is True
    var_1 = var_0.__ge__(var_0)
    var_2 = module_0.create_url(str_0, str_0, var_1, str_0)
    assert var_2 == 'http://+xml:True/+xml'
    var_3 = module_0.host_info_from_target(str_0)
    var_4 = var_3.__le__(var_3)
    tag_token_0 = module_2.TagToken(var_1, var_0, var_2)
    assert tag_token_0.start_mark is True
    assert tag_token_0.end_mark == 'http://+xml:True/+xml'
    module_0.extract_content_type(var_3)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = 'application/javascript'
    regex_flag_0 = module_3.RegexFlag.ASCII
    var_0 = module_0.parse_content_type(str_0)
    var_1 = module_0.create_url(str_0, str_0, regex_flag_0, str_0)
    assert var_1 == 'http://application/javascript:re.ASCII/application/javascript'
    var_2 = var_1.__iter__()
    var_3 = module_0.not_binary(str_0)
    assert var_3 is True
    var_4 = module_0.create_url(str_0, var_1, ssl=regex_flag_0)
    assert var_4 == 'https://[http://application/javascript:re.ASCII/application/javascript]/application/javascript'
    var_5 = module_0.host_info_from_target(str_0, var_4)
    tag_token_0 = module_2.TagToken(var_4, str_0, var_1)
    assert tag_token_0.value == 'https://[http://application/javascript:re.ASCII/application/javascript]/application/javascript'
    assert tag_token_0.end_mark == 'http://application/javascript:re.ASCII/application/javascript'
    var_6 = var_3.__repr__()
    assert var_6 == 'True'
    module_0.load_yaml(safe=var_1)