# Automatically generated by Pynguin.
import pytest
import gabbi.handlers.base as module_0

def test_case_0():
    response_handler_0 = module_0.ContentHandler()
    assert response_handler_0.response_handler is None
    assert f'{type(module_0.ContentHandler.replacer).__module__}.{type(module_0.ContentHandler.replacer).__qualname__}' == 'builtins.method'

def test_case_1():
    response_handler_0 = module_0.ResponseHandler()
    assert response_handler_0.response_handler is None
    assert response_handler_0.content_handler is None
    assert module_0.ResponseHandler.test_key_suffix == ''

def test_case_2():
    float_0 = 535.8
    content_handler_0 = module_0.ContentHandler()
    assert content_handler_0.response_handler is None
    assert f'{type(module_0.ContentHandler.replacer).__module__}.{type(module_0.ContentHandler.replacer).__qualname__}' == 'builtins.method'
    list_0 = [float_0, float_0]
    content_handler_1 = module_0.ContentHandler()
    assert content_handler_1.response_handler is None
    var_0 = content_handler_1.loads(list_0)
    var_1 = content_handler_1.__eq__(content_handler_1)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    int_0 = 255
    content_handler_0 = module_0.ContentHandler()
    assert content_handler_0.response_handler is None
    assert f'{type(module_0.ContentHandler.replacer).__module__}.{type(module_0.ContentHandler.replacer).__qualname__}' == 'builtins.method'
    var_0 = content_handler_0.accepts(int_0)
    assert var_0 is False
    content_handler_1 = module_0.ContentHandler()
    assert content_handler_1.response_handler is None
    var_1 = content_handler_1.__ne__(var_0)
    assert var_1 is True
    var_1.action(list_0, list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    none_type_1 = None
    content_handler_0 = module_0.ContentHandler()
    assert content_handler_0.response_handler is None
    assert f'{type(module_0.ContentHandler.replacer).__module__}.{type(module_0.ContentHandler.replacer).__qualname__}' == 'builtins.method'
    var_0 = content_handler_0.preprocess(none_type_0)
    var_1 = content_handler_0.dumps(none_type_1, test=none_type_1)
    var_1.accepts(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    response_handler_0 = module_0.ResponseHandler()
    assert response_handler_0.response_handler is None
    assert response_handler_0.content_handler is None
    assert module_0.ResponseHandler.test_key_suffix == ''
    none_type_0 = None
    content_handler_0 = module_0.ContentHandler()
    assert content_handler_0.response_handler is None
    assert f'{type(module_0.ContentHandler.replacer).__module__}.{type(module_0.ContentHandler.replacer).__qualname__}' == 'builtins.method'
    var_0 = content_handler_0.action(none_type_0, none_type_0, none_type_0)
    var_0.dumps(content_handler_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    response_handler_0 = module_0.ResponseHandler()
    assert response_handler_0.response_handler is None
    assert response_handler_0.content_handler is None
    assert module_0.ResponseHandler.test_key_suffix == ''
    content_handler_0 = module_0.ContentHandler()
    assert content_handler_0.response_handler is None
    assert f'{type(module_0.ContentHandler.replacer).__module__}.{type(module_0.ContentHandler.replacer).__qualname__}' == 'builtins.method'
    content_handler_0.load_data_file(response_handler_0, response_handler_0)