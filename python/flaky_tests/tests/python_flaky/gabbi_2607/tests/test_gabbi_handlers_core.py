# Automatically generated by Pynguin.
import pytest
import gabbi.handlers.core as module_0

def test_case_0():
    headers_response_handler_0 = module_0.HeadersResponseHandler()
    assert headers_response_handler_0.test_base == {'response_headers': {}}
    assert module_0.HeadersResponseHandler.test_key_suffix == 'headers'
    assert module_0.HeadersResponseHandler.test_key_value == {}

@pytest.mark.xfail(strict=True)
def test_case_1():
    forbidden_headers_response_handler_0 = module_0.ForbiddenHeadersResponseHandler()
    assert forbidden_headers_response_handler_0.test_base == {'response_forbidden_headers': []}
    assert module_0.ForbiddenHeadersResponseHandler.test_key_suffix == 'forbidden_headers'
    headers_response_handler_0 = module_0.HeadersResponseHandler()
    assert headers_response_handler_0.test_base == {'response_headers': {}}
    assert module_0.HeadersResponseHandler.test_key_suffix == 'headers'
    assert module_0.HeadersResponseHandler.test_key_value == {}
    forbidden_headers_response_handler_1 = module_0.ForbiddenHeadersResponseHandler()
    assert forbidden_headers_response_handler_1.test_base == {'response_forbidden_headers': []}
    string_response_handler_0 = module_0.StringResponseHandler()
    assert string_response_handler_0.test_base == {'response_strings': []}
    assert module_0.StringResponseHandler.test_key_suffix == 'strings'
    string_response_handler_0.action(headers_response_handler_0, forbidden_headers_response_handler_1)

@pytest.mark.xfail(strict=True)
def test_case_2():
    forbidden_headers_response_handler_0 = module_0.ForbiddenHeadersResponseHandler()
    assert forbidden_headers_response_handler_0.test_base == {'response_forbidden_headers': []}
    assert module_0.ForbiddenHeadersResponseHandler.test_key_suffix == 'forbidden_headers'
    forbidden_headers_response_handler_0.action(forbidden_headers_response_handler_0, forbidden_headers_response_handler_0)