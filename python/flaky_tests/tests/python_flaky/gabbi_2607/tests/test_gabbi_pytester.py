# Automatically generated by Pynguin.
import pytest
import gabbi.pytester as module_0
import _pytest.config as module_1
import _pytest.freeze_support as module_2
import _pytest.mark.structures as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'n(]JAcb,CJ>-0&Ie0dP'
    module_0.c_pytest_collection_modifyitems(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'n(]AJAcb,CJ>-0&Ie0dP'
    module_0.a_pytest_collection_modifyitems(str_0, str_0)

def test_case_2():
    set_0 = set()
    pytest_unknown_mark_warning_0 = module_0.a_pytest_collection_modifyitems(set_0, set_0)

def test_case_3():
    str_0 = 'c+5FJ0(d"j'
    var_0 = module_0.pytest_runtest_setup(str_0)

def test_case_4():
    none_type_0 = None
    var_0 = module_0.pytest_runtest_teardown(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'n(]AJAcb,CJ>-0&Ie0dP'
    list_0 = [str_0]
    var_0 = module_0.pytest_collection_modifyitems(list_0, str_0)
    module_0.c_pytest_collection_modifyitems(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'n(]AJAcb,CJ>-0&Ie0dP'
    module_0.get_suitename(str_0)

def test_case_7():
    set_0 = set()
    var_0 = module_0.c_pytest_collection_modifyitems(set_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'start_'
    module_0.get_suitename(str_0)

def test_case_9():
    exit_code_0 = module_1.ExitCode.OK
    var_0 = module_0.get_cleanname(exit_code_0)
    assert var_0 == 'OK'

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    list_0 = module_2.freeze_includes()
    var_0 = module_0.pytest_runtest_setup(list_0)
    var_1 = list_0.__repr__()
    var_2 = module_0.get_suitename(var_1)
    assert var_2 == 'pytest.'
    set_0 = set()
    var_3 = module_0.c_pytest_collection_modifyitems(set_0, list_0)
    var_4 = module_0.pytest_runtest_teardown(list_0, set_0)
    var_5 = module_3.MarkGenerator(_ispytest=var_1)
    var_6 = module_0.pytest_runtest_teardown(var_5, var_0)
    module_0.c_pytest_collection_modifyitems(var_1, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    mark_generator_0 = module_3.MarkGenerator()
    module_0.pytest_runtest_setup(mark_generator_0)

def test_case_12():
    pytest_plugin_manager_0 = module_1.PytestPluginManager()
    var_0 = pytest_plugin_manager_0.get_hookcallers(pytest_plugin_manager_0)
    var_1 = module_0.c_pytest_collection_modifyitems(var_0, pytest_plugin_manager_0)

def test_case_13():
    pytest_plugin_manager_0 = module_1.PytestPluginManager()
    var_0 = pytest_plugin_manager_0.get_hookcallers(pytest_plugin_manager_0)
    var_1 = module_0.a_pytest_collection_modifyitems(var_0, var_0)