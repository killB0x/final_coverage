# Automatically generated by Pynguin.
import pytest
import attila.virtual.virtualserial as module_0
import attila.virtual.exceptions as module_1
import builtins as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '+1GR~'
    module_0.VirtualSerial(str_0, str_0, str_0)

def test_case_1():
    str_0 = '+G*~'
    virtual_serial_0 = module_0.VirtualSerial(str_0, str_0, read_callback=str_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '\n`ke\x0bo/Z&m P+E'
    bool_0 = True
    virtual_serial_0 = module_0.VirtualSerial(str_0, bool_0, read_callback=str_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    var_0 = virtual_serial_0.open()
    assert var_0 is True
    var_0.reset_input_buffer()

def test_case_3():
    bool_0 = True
    none_type_0 = None
    virtual_serial_0 = module_0.VirtualSerial(none_type_0, bool_0, in_waiting_callback=none_type_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.VirtualSerialException):
        virtual_serial_0.open()

def test_case_4():
    str_0 = 'i;]%<lzK}ak%A~A  ~'
    str_1 = 'WRITE'
    bool_0 = True
    virtual_serial_0 = module_0.VirtualSerial(str_1, bool_0, bool_0, in_waiting_callback=str_1)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    var_0 = virtual_serial_0.close()
    assert var_0 is True
    bool_1 = virtual_serial_0.write(var_0)
    assert bool_1 is True
    virtual_serial_exception_0 = module_1.VirtualSerialException(str_0)
    var_1 = virtual_serial_exception_0.__repr__()

def test_case_5():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    virtual_serial_0 = module_0.VirtualSerial(bool_0, bool_1, write_callback=none_type_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.VirtualSerialException):
        virtual_serial_0.close()

@pytest.mark.xfail(strict=True)
def test_case_6():
    exception_0 = module_2.Exception()
    bool_0 = True
    int_0 = -1499
    str_0 = 'F\x0bWy6'
    virtual_serial_0 = module_0.VirtualSerial(str_0, bool_0, int_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    var_0 = virtual_serial_0.reset_input_buffer()
    var_1 = var_0.__str__()
    var_1.open()

def test_case_7():
    bool_0 = True
    virtual_serial_0 = module_0.VirtualSerial(bool_0, bool_0, bool_0, bool_0, in_waiting_callback=bool_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'

def test_case_8():
    int_0 = -1757
    virtual_serial_0 = module_0.VirtualSerial(int_0, int_0, int_0, write_callback=int_0, in_waiting_callback=int_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'

def test_case_9():
    str_0 = '$Sj_<ILL'
    str_1 = '='
    none_type_0 = None
    virtual_serial_0 = module_0.VirtualSerial(str_1, str_0, in_waiting_callback=none_type_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    bool_0 = False
    virtual_serial_1 = module_0.VirtualSerial(str_0, bool_0, in_waiting_callback=str_0)
    with pytest.raises(module_1.VirtualSerialException):
        virtual_serial_1.open()

def test_case_10():
    str_0 = 'D,@eL\x0b4Go\x0b1F'
    bool_0 = False
    virtual_serial_0 = module_0.VirtualSerial(str_0, bool_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.VirtualSerialException):
        virtual_serial_0.close()

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'NpS{!\nZ{(d'
    bool_0 = True
    virtual_serial_0 = module_0.VirtualSerial(str_0, bool_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    virtual_serial_0.read_line()

def test_case_12():
    bytes_0 = b'\xff\xdbb;>\r\xd8\xfd'
    bytes_1 = b'\xd5\x84\xc9'
    bool_0 = True
    none_type_0 = None
    virtual_serial_0 = module_0.VirtualSerial(bytes_1, bool_0, write_callback=none_type_0, in_waiting_callback=none_type_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    bool_1 = virtual_serial_0.write(bytes_0)
    assert bool_1 is True

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    str_0 = 'Ew<O\ngB\x0b]]'
    none_type_0 = None
    virtual_serial_0 = module_0.VirtualSerial(str_0, str_0, in_waiting_callback=none_type_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    var_0 = virtual_serial_0.reset_input_buffer()
    str_1 = '\roH1;GMjt"Vw'
    bytes_0 = virtual_serial_0.read()
    var_1 = virtual_serial_0.open()
    assert var_1 is True
    list_0 = []
    var_2 = virtual_serial_0.close()
    assert var_2 is True
    module_0.VirtualSerial(str_1, bool_0, str_1, bool_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'Ew<O\ngB\x0b]]'
    none_type_0 = None
    virtual_serial_0 = module_0.VirtualSerial(str_0, str_0, in_waiting_callback=none_type_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    var_0 = virtual_serial_0.reset_input_buffer()
    int_0 = 2867
    bytes_0 = virtual_serial_0.read()
    str_1 = '\n    Get log level from attila option\n\n    :param log_level_num\n    :type int\n    :returns logging level\n    '
    var_1 = virtual_serial_0.open()
    assert var_1 is True
    list_0 = []
    var_2 = virtual_serial_0.close()
    assert var_2 is True
    virtual_serial_1 = module_0.VirtualSerial(str_1, int_0, var_1, int_0, list_0)
    virtual_serial_1.read()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '@[T%2&LUr\\\\ux"kw/wAR'
    int_0 = 765
    virtual_serial_0 = module_0.VirtualSerial(str_0, int_0, write_callback=int_0)
    assert f'{type(virtual_serial_0).__module__}.{type(virtual_serial_0).__qualname__}' == 'attila.virtual.virtualserial.VirtualSerial'
    assert f'{type(module_0.VirtualSerial.serial_port).__module__}.{type(module_0.VirtualSerial.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.baudrate).__module__}.{type(module_0.VirtualSerial.baudrate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.timeout).__module__}.{type(module_0.VirtualSerial.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.VirtualSerial.in_waiting).__module__}.{type(module_0.VirtualSerial.in_waiting).__qualname__}' == 'builtins.property'
    var_0 = virtual_serial_0.close()
    assert var_0 is True
    bytes_0 = b'\xd1\xa2\x85\xf4w\xdb)#\xca["\xdf:\xb3!'
    virtual_serial_0.write(bytes_0)