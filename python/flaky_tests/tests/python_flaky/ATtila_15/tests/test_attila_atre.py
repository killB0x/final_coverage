# Automatically generated by Pynguin.
import pytest
import attila.atre as module_0
import attila.exceptions as module_1
import attila.atresponse as module_2
import attila.atsession as module_3
import attila.atcommand as module_4

def test_case_0():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    int_0 = -796
    none_type_0 = a_t_runtime_environment_0.configure_communicator(a_t_runtime_environment_0, int_0)
    with pytest.raises(module_1.ATSerialPortError):
        a_t_runtime_environment_0.run()

def test_case_1():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '\n    This class represents an Environment Setup Keyword value\n    '
    int_0 = -1272
    none_type_0 = a_t_runtime_environment_0.configure_communicator(str_0, int_0, int_0)
    a_t_serial_port_error_0 = module_1.ATSerialPortError(int_0)
    var_0 = a_t_serial_port_error_0.__str__()
    var_1 = var_0.__repr__()
    list_0 = [var_1, var_0, var_0]
    none_type_1 = a_t_runtime_environment_0.init_session(list_0)
    none_type_2 = None
    none_type_3 = a_t_runtime_environment_0.configure_communicator(str_0, int_0, line_break=str_0, dsrdtr=none_type_2)

def test_case_2():
    str_0 = '\n        Starts and run current ATSession\n\n        :returns List of ATResponse\n        :raises ATSerialPortError, ATRuntimeError, ATREUninitializedError\n        '
    bool_0 = False
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment(bool_0)
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    var_0 = a_t_runtime_environment_0.exec_next()
    with pytest.raises(module_1.ATScriptNotFound):
        a_t_runtime_environment_0.parse_ATScript(str_0)

def test_case_3():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATREUninitializedError):
        a_t_runtime_environment_0.run()

def test_case_4():
    bool_0 = False
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment(bool_0)
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    var_0 = a_t_runtime_environment_0.exec_next()
    str_0 = ':q'
    with pytest.raises(module_1.ATREUninitializedError):
        a_t_runtime_environment_0.exec(str_0)

def test_case_5():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATREUninitializedError):
        a_t_runtime_environment_0.close_serial()

def test_case_6():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = 'R'
    with pytest.raises(KeyError):
        a_t_runtime_environment_0.get_session_value(str_0)

def test_case_7():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'

def test_case_8():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = ''
    var_0 = a_t_runtime_environment_0.exec_next()
    var_1 = a_t_runtime_environment_0.exec(str_0)
    var_2 = a_t_runtime_environment_0.exec(str_0)

def test_case_9():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    var_0 = a_t_runtime_environment_0.exec_next()

@pytest.mark.xfail(strict=True)
def test_case_10():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    bool_0 = True
    var_0 = a_t_runtime_environment_0.exec_next()
    var_1 = a_t_runtime_environment_0.exec_next()
    a_t_runtime_environment_1 = module_0.ATRuntimeEnvironment(bool_0)
    a_t_runtime_environment_2 = module_0.ATRuntimeEnvironment()
    a_t_runtime_environment_0.exec(var_1)

def test_case_11():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    var_0 = a_t_runtime_environment_0.exec_next()
    var_1 = a_t_runtime_environment_0.exec_next()
    str_0 = 'Usage: %s [OPTION]... [FILE]\n  \n  With no FILE, run in interactive mode\n  \n  \t-p <device path>\tUse this device to communicate\n  \t-b <baud rate>\t\tUse the specified baudrate to communicate\n  \t-T <default timeout>\tUse the specified timeout as default to communicate\n  \t-B <break>\t\tUse the specified line break [CRLF, LF, CR, NONE] (Default: CRLF)\n  \t-A <True/False>\t\tAbort on failure (Default: True)\n  \t-L <logfile>\t\tEnable log and log to the specified log file (stdout is supported)\n  \t-l <loglevel>\t\tSpecify the log level (0: CRITICAL, 1: ERROR, 2: WARN, 3: INFO, 4: DEBUG) (Default: INFO\n  \t-R <True/False>\t\tSpecify value for rtscts (Default: True)\n  \t-D <True/False>\t\tSpecify value for dsrdtr (Default: True)\n  \t-v\t\t\tBe more verbose\n  \t-q\t\t\tBe quiet (print only PRINT ESKs and ERRORS)\n  \t-h\t\t\tShow this page\n  '
    with pytest.raises(module_1.ATScriptSyntaxError):
        a_t_runtime_environment_0.exec(str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    bool_0 = False
    a_t_response_0 = module_2.ATResponse(bool_0, a_t_runtime_environment_0, bool_0, bool_0)
    str_0 = 'Zl_2r`J?nE_r'
    a_t_script_not_found_0 = module_1.ATScriptNotFound(str_0)
    var_0 = a_t_script_not_found_0.__str__()
    var_1 = var_0.__str__()
    var_2 = var_1.__str__()
    var_3 = var_2.__str__()
    bool_1 = a_t_runtime_environment_0.add_command(var_3)
    a_t_runtime_environment_0.exec_next()

@pytest.mark.xfail(strict=True)
def test_case_13():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    a_t_runtime_environment_0.parse_ATScript(a_t_runtime_environment_0)

def test_case_14():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '\n        Get ESK enum value from its string representation\n\n        :param esk_string\n        :type esk_string: String\n        :returns ESK or None if invalid\n        '
    bool_0 = True
    none_type_0 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, bool_0, bool_0, read_callback=bool_0)
    list_0 = a_t_runtime_environment_0.run()

@pytest.mark.xfail(strict=True)
def test_case_15():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    int_0 = 679
    none_type_0 = None
    none_type_1 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, int_0, line_break=str_0, write_callback=none_type_0)
    none_type_2 = a_t_runtime_environment_0.open_serial()
    var_0 = a_t_runtime_environment_0.exec_next()
    bool_0 = True
    none_type_3 = a_t_runtime_environment_0.configure_communicator(str_0, bool_0, dsrdtr=str_0)
    a_t_runtime_environment_0.exec(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = ''
    var_0 = a_t_runtime_environment_0.exec(str_0)
    int_0 = 763
    complex_0 = (-1995.4039-334.506j)
    none_type_0 = a_t_runtime_environment_0.configure_communicator(str_0, int_0, rtscts=complex_0, dsrdtr=var_0)
    none_type_1 = a_t_runtime_environment_0.set_ESKs(complex_0)
    a_t_runtime_environment_0.exec_next()

@pytest.mark.xfail(strict=True)
def test_case_17():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = ''
    bool_0 = True
    var_0 = a_t_runtime_environment_0.exec_next()
    bool_1 = False
    none_type_0 = None
    none_type_1 = a_t_runtime_environment_0.configure_virtual_communicator(bool_0, bool_1, none_type_0, write_callback=var_0)
    none_type_2 = a_t_runtime_environment_0.close_serial()
    var_0.get_collectable(str_0)

def test_case_18():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    int_0 = 4
    none_type_0 = None
    none_type_1 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, int_0, line_break=str_0, write_callback=none_type_0)
    none_type_2 = a_t_runtime_environment_0.open_serial()
    var_0 = a_t_runtime_environment_0.exec_next()
    str_1 = 'EFvl\x0c2blAY=vyk|cL('
    none_type_3 = a_t_runtime_environment_0.configure_virtual_communicator(str_1, none_type_0, none_type_0)
    with pytest.raises(module_1.ATSerialPortError):
        a_t_runtime_environment_0.run()

def test_case_19():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    int_0 = 679
    none_type_0 = None
    none_type_1 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, int_0, line_break=str_0, write_callback=none_type_0)
    none_type_2 = a_t_runtime_environment_0.open_serial()
    none_type_3 = a_t_runtime_environment_0.open_serial()
    var_0 = a_t_runtime_environment_0.exec_next()
    bool_0 = True
    none_type_4 = a_t_runtime_environment_0.configure_communicator(str_0, bool_0, dsrdtr=str_0)
    str_1 = ''
    var_1 = a_t_runtime_environment_0.exec(str_1)
    with pytest.raises(module_1.ATSerialPortError):
        a_t_runtime_environment_0.run()

@pytest.mark.xfail(strict=True)
def test_case_20():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    bool_0 = False
    int_0 = 4
    none_type_0 = a_t_runtime_environment_0.configure_communicator(str_0, bool_0, int_0, dsrdtr=a_t_runtime_environment_0)
    int_1 = 700
    none_type_1 = None
    none_type_2 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, int_1, line_break=str_0, write_callback=none_type_1)
    none_type_3 = a_t_runtime_environment_0.open_serial()
    none_type_4 = a_t_runtime_environment_0.open_serial()
    str_1 = ''
    a_t_session_0 = module_3.ATSession()
    var_0 = a_t_session_0.reset()
    var_1 = var_0.__repr__()
    var_2 = var_0.__str__()
    tuple_0 = (var_2, bool_0)
    none_type_5 = a_t_runtime_environment_0.set_ESKs(tuple_0)
    var_3 = a_t_runtime_environment_0.exec(str_1)
    none_type_6 = a_t_runtime_environment_0.close_serial()
    list_0 = a_t_runtime_environment_0.run()
    a_t_runtime_environment_0.exec_next()

@pytest.mark.xfail(strict=True)
def test_case_21():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = 'R7.T Ck>V2(wU'
    a_t_script_syntax_error_0 = module_1.ATScriptSyntaxError(str_0)
    var_0 = a_t_script_syntax_error_0.__str__()
    var_1 = var_0.__str__()
    tuple_0 = (var_1, var_0)
    none_type_0 = a_t_runtime_environment_0.set_ESKs(tuple_0)
    str_1 = ''
    var_2 = a_t_runtime_environment_0.exec(str_1)
    str_2 = '\n    ATREUninitializedError class provides an exception in case of uninitialized ATRE\n    '
    list_0 = [str_2]
    bool_0 = True
    tuple_1 = (list_0, bool_0)
    bool_1 = True
    none_type_1 = a_t_runtime_environment_0.configure_communicator(tuple_1, bool_1, bool_0, rtscts=tuple_1)
    var_3 = a_t_runtime_environment_0.exec_next()
    str_3 = ''
    a_t_response_0 = module_2.ATResponse(str_3, var_2, str_3, bool_1)
    var_4 = a_t_runtime_environment_0.exec_next()
    none_type_2 = var_0.__repr__()
    none_type_3 = a_t_runtime_environment_0.close_serial()
    var_1.run()

def test_case_22():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    int_0 = 4
    none_type_0 = None
    none_type_1 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, int_0, line_break=str_0, write_callback=none_type_0)
    var_0 = a_t_runtime_environment_0.exec_next()
    str_1 = 'EFvl\x0c2blAY=vyk|cL('
    none_type_2 = a_t_runtime_environment_0.configure_virtual_communicator(str_1, none_type_0, none_type_0)
    with pytest.raises(module_1.ATSerialPortError):
        a_t_runtime_environment_0.run()

def test_case_23():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    int_0 = 679
    int_1 = 4
    none_type_0 = a_t_runtime_environment_0.configure_communicator(str_0, str_0, line_break=int_1)
    none_type_1 = None
    none_type_2 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, int_0, int_1)
    none_type_3 = a_t_runtime_environment_0.open_serial()
    none_type_4 = a_t_runtime_environment_0.open_serial()
    var_0 = a_t_runtime_environment_0.exec_next()
    str_1 = ''
    str_2 = 'I<P+HS'
    var_1 = a_t_runtime_environment_0.exec(str_2)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'attila.atresponse.ATResponse'
    none_type_5 = a_t_runtime_environment_0.configure_virtual_communicator(str_1, int_0, read_callback=none_type_1, in_waiting_callback=var_0)
    with pytest.raises(module_1.ATREUninitializedError):
        a_t_runtime_environment_0.run()

def test_case_24():
    a_t_runtime_environment_0 = module_0.ATRuntimeEnvironment()
    assert f'{type(module_0.ATRuntimeEnvironment.aof).__module__}.{type(module_0.ATRuntimeEnvironment.aof).__qualname__}' == 'builtins.property'
    str_0 = '@Kx@lY0<\rRC5N+'
    bool_0 = False
    int_0 = 4
    a_t_command_0 = module_4.ATCommand(str_0, str_0, dganger=a_t_runtime_environment_0)
    bool_1 = a_t_runtime_environment_0.add_command(a_t_command_0)
    none_type_0 = a_t_runtime_environment_0.configure_communicator(str_0, bool_0, int_0, dsrdtr=a_t_runtime_environment_0)
    none_type_1 = None
    none_type_2 = a_t_runtime_environment_0.configure_virtual_communicator(str_0, bool_0, read_callback=none_type_1)
    with pytest.raises(module_1.ATSerialPortError):
        a_t_runtime_environment_0.exec_next()