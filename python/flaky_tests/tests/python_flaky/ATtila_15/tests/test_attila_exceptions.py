# Automatically generated by Pynguin.
import attila.exceptions as module_0

def test_case_0():
    str_0 = ''
    a_t_script_not_found_0 = module_0.ATScriptNotFound(str_0)
    assert a_t_script_not_found_0.message == ''

def test_case_1():
    str_0 = '/2PmyA$;e<h/'
    a_t_runtime_error_0 = module_0.ATRuntimeError(str_0)
    assert a_t_runtime_error_0.message == '/2PmyA$;e<h/'
    str_1 = 'AOF'
    a_t_serial_port_error_0 = module_0.ATSerialPortError(str_1)
    assert a_t_serial_port_error_0.message == 'AOF'
    var_0 = a_t_serial_port_error_0.__str__()
    assert var_0 == "'AOF'"
    var_1 = var_0.__repr__()
    assert var_1 == '"\'AOF\'"'

def test_case_2():
    str_0 = 'DEVICE'
    a_t_serial_port_error_0 = module_0.ATSerialPortError(str_0)
    assert a_t_serial_port_error_0.message == 'DEVICE'
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (a_t_serial_port_error_0, str_0, str_0, list_0)
    a_t_script_syntax_error_0 = module_0.ATScriptSyntaxError(tuple_0)
    assert f'{type(a_t_script_syntax_error_0.message).__module__}.{type(a_t_script_syntax_error_0.message).__qualname__}' == 'builtins.tuple'
    assert len(a_t_script_syntax_error_0.message) == 4
    var_0 = a_t_script_syntax_error_0.__repr__()
    assert var_0 == "(DEVICE, 'DEVICE', 'DEVICE', ['DEVICE', 'DEVICE', 'DEVICE', 'DEVICE'])"
    var_1 = var_0.__repr__()
    assert var_1 == '"(DEVICE, \'DEVICE\', \'DEVICE\', [\'DEVICE\', \'DEVICE\', \'DEVICE\', \'DEVICE\'])"'
    var_2 = var_1.__str__()
    assert var_2 == '"(DEVICE, \'DEVICE\', \'DEVICE\', [\'DEVICE\', \'DEVICE\', \'DEVICE\', \'DEVICE\'])"'

def test_case_3():
    str_0 = '[m.e/ uB8@'
    a_t_script_not_found_0 = module_0.ATScriptNotFound(str_0)
    assert a_t_script_not_found_0.message == '[m.e/ uB8@'
    var_0 = a_t_script_not_found_0.__str__()
    assert var_0 == "'[m.e/ uB8@'"
    var_1 = var_0.__repr__()
    assert var_1 == '"\'[m.e/ uB8@\'"'
    var_2 = var_1.__repr__()
    assert var_2 == '\'"\\\'[m.e/ uB8@\\\'"\''
    var_3 = var_2.__repr__()
    assert var_3 == '\'\\\'"\\\\\\\'[m.e/ uB8@\\\\\\\'"\\\'\''
    var_4 = var_3.__repr__()
    assert var_4 == '\'\\\'\\\\\\\'"\\\\\\\\\\\\\\\'[m.e/ uB8@\\\\\\\\\\\\\\\'"\\\\\\\'\\\'\''
    var_5 = var_4.__repr__()
    assert var_5 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[m.e/ uB8@\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    var_6 = var_5.__str__()
    assert var_6 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[m.e/ uB8@\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    var_7 = var_6.__str__()
    assert var_7 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[m.e/ uB8@\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    var_8 = var_7.__str__()
    assert var_8 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[m.e/ uB8@\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    var_9 = var_8.__str__()
    assert var_9 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[m.e/ uB8@\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    str_1 = '|'
    a_t_runtime_error_0 = module_0.ATRuntimeError(str_1)
    assert a_t_runtime_error_0.message == '|'

def test_case_4():
    bytes_0 = b'\x81^\x94\xa5a]\xa1M&2\xb4z'
    a_t_script_not_found_0 = module_0.ATScriptNotFound(bytes_0)
    assert a_t_script_not_found_0.message == b'\x81^\x94\xa5a]\xa1M&2\xb4z'
    var_0 = a_t_script_not_found_0.__repr__()
    assert var_0 == "b'\\x81^\\x94\\xa5a]\\xa1M&2\\xb4z'"
    var_1 = var_0.__repr__()
    assert var_1 == '"b\'\\\\x81^\\\\x94\\\\xa5a]\\\\xa1M&2\\\\xb4z\'"'
    var_2 = var_1.__repr__()
    assert var_2 == '\'"b\\\'\\\\\\\\x81^\\\\\\\\x94\\\\\\\\xa5a]\\\\\\\\xa1M&2\\\\\\\\xb4z\\\'"\''
    var_3 = var_2.__repr__()
    assert var_3 == '\'\\\'"b\\\\\\\'\\\\\\\\\\\\\\\\x81^\\\\\\\\\\\\\\\\x94\\\\\\\\\\\\\\\\xa5a]\\\\\\\\\\\\\\\\xa1M&2\\\\\\\\\\\\\\\\xb4z\\\\\\\'"\\\'\''
    var_4 = var_3.__str__()
    assert var_4 == '\'\\\'"b\\\\\\\'\\\\\\\\\\\\\\\\x81^\\\\\\\\\\\\\\\\x94\\\\\\\\\\\\\\\\xa5a]\\\\\\\\\\\\\\\\xa1M&2\\\\\\\\\\\\\\\\xb4z\\\\\\\'"\\\'\''
    var_5 = var_4.__repr__()
    assert var_5 == '\'\\\'\\\\\\\'"b\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x81^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x94\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa5a]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa1M&2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xb4z\\\\\\\\\\\\\\\'"\\\\\\\'\\\'\''
    var_6 = var_5.__repr__()
    assert var_6 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'"b\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x81^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x94\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa5a]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa1M&2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xb4z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    var_7 = var_6.__repr__()
    assert var_7 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"b\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x81^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x94\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa5a]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa1M&2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xb4z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    var_8 = var_7.__repr__()
    assert var_8 == '\'\\\'\\\\\\\'\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"b\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x81^\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x94\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa5a]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xa1M&2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\xb4z\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\'\\\\\\\'\\\'\''
    str_0 = '\n    ATSerialPortError class provides an exception in case of an error on the serial port\n    '
    a_t_r_e_uninitialized_error_0 = module_0.ATREUninitializedError(str_0)
    assert a_t_r_e_uninitialized_error_0.message == '\n    ATSerialPortError class provides an exception in case of an error on the serial port\n    '

def test_case_5():
    bytes_0 = b'tUr\xdf\xb1\xbb\x81[\xcf.\x98\xe5\xfa\x99RV'
    a_t_script_syntax_error_0 = module_0.ATScriptSyntaxError(bytes_0)
    assert a_t_script_syntax_error_0.message == b'tUr\xdf\xb1\xbb\x81[\xcf.\x98\xe5\xfa\x99RV'
    var_0 = a_t_script_syntax_error_0.__str__()
    assert var_0 == "b'tUr\\xdf\\xb1\\xbb\\x81[\\xcf.\\x98\\xe5\\xfa\\x99RV'"
    var_1 = var_0.__repr__()

def test_case_6():
    str_0 = ''
    a_t_r_e_uninitialized_error_0 = module_0.ATREUninitializedError(str_0)
    assert a_t_r_e_uninitialized_error_0.message == ''

def test_case_7():
    str_0 = 'g~\x0cddi\x0b?v0g_Om\r'
    a_t_r_e_uninitialized_error_0 = module_0.ATREUninitializedError(str_0)
    assert a_t_r_e_uninitialized_error_0.message == 'g~\x0cddi\x0b?v0g_Om\r'
    var_0 = a_t_r_e_uninitialized_error_0.__repr__()
    assert var_0 == 'g~\x0cddi\x0b?v0g_Om\r'
    var_1 = var_0.__repr__()
    assert var_1 == "'g~\\x0cddi\\x0b?v0g_Om\\r'"
    a_t_r_e_uninitialized_error_1 = module_0.ATREUninitializedError(var_1)
    assert a_t_r_e_uninitialized_error_1.message == "'g~\\x0cddi\\x0b?v0g_Om\\r'"
    var_2 = a_t_r_e_uninitialized_error_1.__str__()
    assert var_2 == '"\'g~\\\\x0cddi\\\\x0b?v0g_Om\\\\r\'"'
    var_3 = var_2.__repr__()
    assert var_3 == '\'"\\\'g~\\\\\\\\x0cddi\\\\\\\\x0b?v0g_Om\\\\\\\\r\\\'"\''
    var_4 = var_3.__str__()
    assert var_4 == '\'"\\\'g~\\\\\\\\x0cddi\\\\\\\\x0b?v0g_Om\\\\\\\\r\\\'"\''
    var_5 = var_4.__repr__()
    assert var_5 == '\'\\\'"\\\\\\\'g~\\\\\\\\\\\\\\\\x0cddi\\\\\\\\\\\\\\\\x0b?v0g_Om\\\\\\\\\\\\\\\\r\\\\\\\'"\\\'\''
    var_6 = var_5.__str__()
    assert var_6 == '\'\\\'"\\\\\\\'g~\\\\\\\\\\\\\\\\x0cddi\\\\\\\\\\\\\\\\x0b?v0g_Om\\\\\\\\\\\\\\\\r\\\\\\\'"\\\'\''
    var_7 = var_6.__str__()
    assert var_7 == '\'\\\'"\\\\\\\'g~\\\\\\\\\\\\\\\\x0cddi\\\\\\\\\\\\\\\\x0b?v0g_Om\\\\\\\\\\\\\\\\r\\\\\\\'"\\\'\''
    str_1 = '0],KG%ukK'
    a_t_serial_port_error_0 = module_0.ATSerialPortError(str_1)
    assert a_t_serial_port_error_0.message == '0],KG%ukK'
    a_t_r_e_uninitialized_error_2 = module_0.ATREUninitializedError(a_t_serial_port_error_0)

def test_case_8():
    str_0 = 'stdout'
    a_t_r_e_uninitialized_error_0 = module_0.ATREUninitializedError(str_0)
    assert a_t_r_e_uninitialized_error_0.message == 'stdout'
    var_0 = a_t_r_e_uninitialized_error_0.__repr__()
    assert var_0 == 'stdout'
    var_1 = var_0.__repr__()
    assert var_1 == "'stdout'"
    var_2 = var_1.__str__()
    assert var_2 == "'stdout'"
    var_3 = var_2.__repr__()
    assert var_3 == '"\'stdout\'"'
    var_4 = var_3.__str__()
    assert var_4 == '"\'stdout\'"'
    var_5 = var_4.__str__()
    assert var_5 == '"\'stdout\'"'

def test_case_9():
    str_0 = "jYp|9FXU'"
    a_t_runtime_error_0 = module_0.ATRuntimeError(str_0)
    assert a_t_runtime_error_0.message == "jYp|9FXU'"

def test_case_10():
    str_0 = 'i\r]Q>uc'
    a_t_runtime_error_0 = module_0.ATRuntimeError(str_0)
    assert a_t_runtime_error_0.message == 'i\r]Q>uc'
    var_0 = a_t_runtime_error_0.__str__()
    assert var_0 == "'i\\r]Q>uc'"
    var_1 = var_0.__str__()
    assert var_1 == "'i\\r]Q>uc'"

def test_case_11():
    str_0 = 'wZOtpK8'
    str_1 = '-v'
    a_t_serial_port_error_0 = module_0.ATSerialPortError(str_1)
    assert a_t_serial_port_error_0.message == '-v'
    var_0 = a_t_serial_port_error_0.__repr__()
    assert var_0 == '-v'
    var_1 = var_0.__repr__()
    assert var_1 == "'-v'"
    var_2 = a_t_serial_port_error_0.__repr__()
    assert var_2 == '-v'
    var_3 = a_t_serial_port_error_0.__repr__()
    assert var_3 == '-v'
    var_4 = var_3.__str__()
    assert var_4 == '-v'
    var_5 = var_4.__repr__()
    assert var_5 == "'-v'"
    var_6 = var_5.__str__()
    assert var_6 == "'-v'"
    str_2 = 'H\rZ1T4edX\rkF'
    a_t_runtime_error_0 = module_0.ATRuntimeError(str_2)
    assert a_t_runtime_error_0.message == 'H\rZ1T4edX\rkF'
    var_7 = a_t_runtime_error_0.__repr__()
    assert var_7 == 'H\rZ1T4edX\rkF'
    var_8 = var_7.__repr__()
    assert var_8 == "'H\\rZ1T4edX\\rkF'"
    var_9 = var_8.__str__()
    assert var_9 == "'H\\rZ1T4edX\\rkF'"
    var_10 = var_9.__repr__()
    assert var_10 == '"\'H\\\\rZ1T4edX\\\\rkF\'"'
    var_11 = var_10.__str__()
    assert var_11 == '"\'H\\\\rZ1T4edX\\\\rkF\'"'
    var_12 = var_11.__str__()
    assert var_12 == '"\'H\\\\rZ1T4edX\\\\rkF\'"'
    var_13 = var_3.__str__()
    assert var_13 == '-v'
    var_14 = var_12.__str__()
    assert var_14 == '"\'H\\\\rZ1T4edX\\\\rkF\'"'
    a_t_runtime_error_1 = module_0.ATRuntimeError(str_0)