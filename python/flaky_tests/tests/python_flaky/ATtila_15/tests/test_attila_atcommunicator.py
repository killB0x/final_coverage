# Automatically generated by Pynguin.
import pytest
import attila.atcommunicator as module_0
import attila.exceptions as module_1

def test_case_0():
    int_0 = 2005
    a_t_communicator_0 = module_0.ATCommunicator(int_0, int_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'

def test_case_1():
    int_0 = 2005
    a_t_communicator_0 = module_0.ATCommunicator(int_0, int_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATSerialPortError):
        a_t_communicator_0.exec(int_0, int_0)

def test_case_2():
    int_0 = 2005
    a_t_communicator_0 = module_0.ATCommunicator(int_0, int_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'
    bool_0 = a_t_communicator_0.is_open()
    assert bool_0 is False
    with pytest.raises(module_1.ATSerialPortError):
        a_t_communicator_0.exec(a_t_communicator_0)

def test_case_3():
    int_0 = -291
    a_t_communicator_0 = module_0.ATCommunicator(int_0, int_0, int_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'

def test_case_4():
    int_0 = -279
    a_t_communicator_0 = module_0.ATCommunicator(int_0, int_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATSerialPortError):
        a_t_communicator_0.open()

def test_case_5():
    none_type_0 = None
    bool_0 = True
    str_0 = 'l\x0b'
    a_t_communicator_0 = module_0.ATCommunicator(none_type_0, bool_0, bool_0, str_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATSerialPortError):
        a_t_communicator_0.open()

def test_case_6():
    str_0 = '7'
    a_t_communicator_0 = module_0.ATCommunicator(str_0, str_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATSerialPortError):
        a_t_communicator_0.open()

def test_case_7():
    int_0 = 2005
    a_t_communicator_0 = module_0.ATCommunicator(int_0, int_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.ATSerialPortError):
        a_t_communicator_0.close()

def test_case_8():
    bool_0 = False
    a_t_communicator_0 = module_0.ATCommunicator(bool_0, bool_0, bool_0)
    assert f'{type(module_0.ATCommunicator.serial_port).__module__}.{type(module_0.ATCommunicator.serial_port).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.baud_rate).__module__}.{type(module_0.ATCommunicator.baud_rate).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.default_timeout).__module__}.{type(module_0.ATCommunicator.default_timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.line_break).__module__}.{type(module_0.ATCommunicator.line_break).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.rtscts).__module__}.{type(module_0.ATCommunicator.rtscts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommunicator.dsrdtr).__module__}.{type(module_0.ATCommunicator.dsrdtr).__qualname__}' == 'builtins.property'