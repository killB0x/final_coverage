# Automatically generated by Pynguin.
import attila.atcommand as module_0

def test_case_0():
    str_0 = 'B=^ixn{%xh'
    a_t_command_0 = module_0.ATCommand(str_0)
    assert f'{type(module_0.ATCommand.command).__module__}.{type(module_0.ATCommand.command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.expected_response).__module__}.{type(module_0.ATCommand.expected_response).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.response).__module__}.{type(module_0.ATCommand.response).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.timeout).__module__}.{type(module_0.ATCommand.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.delay).__module__}.{type(module_0.ATCommand.delay).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.collectables).__module__}.{type(module_0.ATCommand.collectables).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.doppel_ganger).__module__}.{type(module_0.ATCommand.doppel_ganger).__qualname__}' == 'builtins.property'
    a_t_command_1 = module_0.ATCommand(a_t_command_0, dganger=a_t_command_0)
    str_1 = '\n        Read line\n\n        :returns bytes\n        '
    a_t_command_2 = module_0.ATCommand(str_1, str_1)
    str_2 = ''
    a_t_command_3 = module_0.ATCommand(str_2, tout=a_t_command_0, dganger=str_1)
    none_type_0 = None
    a_t_command_4 = module_0.ATCommand(str_2, str_0, collectables=none_type_0, dganger=a_t_command_2)

def test_case_1():
    str_0 = 'Could not open serial port: %s'
    a_t_command_0 = module_0.ATCommand(str_0)
    assert f'{type(module_0.ATCommand.command).__module__}.{type(module_0.ATCommand.command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.expected_response).__module__}.{type(module_0.ATCommand.expected_response).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.response).__module__}.{type(module_0.ATCommand.response).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.timeout).__module__}.{type(module_0.ATCommand.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.delay).__module__}.{type(module_0.ATCommand.delay).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.collectables).__module__}.{type(module_0.ATCommand.collectables).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.doppel_ganger).__module__}.{type(module_0.ATCommand.doppel_ganger).__qualname__}' == 'builtins.property'

def test_case_2():
    float_0 = 1243.62
    str_0 = "`PP//tOLs'M8D"
    list_0 = [str_0, str_0]
    a_t_command_0 = module_0.ATCommand(float_0, collectables=list_0)
    assert f'{type(module_0.ATCommand.command).__module__}.{type(module_0.ATCommand.command).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.expected_response).__module__}.{type(module_0.ATCommand.expected_response).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.response).__module__}.{type(module_0.ATCommand.response).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.timeout).__module__}.{type(module_0.ATCommand.timeout).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.delay).__module__}.{type(module_0.ATCommand.delay).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.collectables).__module__}.{type(module_0.ATCommand.collectables).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ATCommand.doppel_ganger).__module__}.{type(module_0.ATCommand.doppel_ganger).__qualname__}' == 'builtins.property'