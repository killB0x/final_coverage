# Automatically generated by Pynguin.
import pytest
import attila.atscriptparser as module_0
import attila.exceptions as module_1

def test_case_0():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = "{ZJRE/G'Z9"
    tuple_0 = a_t_script_parser_0.parse(str_0)

def test_case_1():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = ';;'
    tuple_0 = a_t_script_parser_0.parse(str_0)
    with pytest.raises(module_1.ATScriptNotFound):
        a_t_script_parser_0.parse_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    a_t_script_parser_0 = module_0.ATScriptParser()
    a_t_script_parser_0.parse_file(a_t_script_parser_0)

def test_case_3():
    dict_0 = {}
    a_t_script_parser_0 = module_0.ATScriptParser(**dict_0)

def test_case_4():
    str_0 = "[8?Z(V'4 }\x0cwgBOqA$V`"
    a_t_script_parser_0 = module_0.ATScriptParser()
    tuple_0 = a_t_script_parser_0.parse(str_0)

def test_case_5():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = '\n        Check if attributes for this esk have a valid syntax\n\n        :param esk\n        :param attr\n        :type esk: ESK\n        :type attr: String\n        :returns ESKValue (None in case of errors)\n        '
    with pytest.raises(module_1.ATScriptSyntaxError):
        a_t_script_parser_0.parse(str_0)

def test_case_6():
    str_0 = ' TmV$3YsI3\x0bA\r\x0cUn-PFx'
    a_t_script_parser_0 = module_0.ATScriptParser()
    tuple_0 = a_t_script_parser_0.parse(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = 'X'
    str_1 = '#so6e=xt'
    tuple_0 = a_t_script_parser_0.parse(str_1)
    tuple_1 = a_t_script_parser_0.parse(str_0)
    tuple_2 = a_t_script_parser_0.parse(str_0)
    module_0.ATScriptParser(*tuple_2)

def test_case_8():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = 'AOF'
    with pytest.raises(module_1.ATScriptSyntaxError):
        a_t_script_parser_0.parse(str_0)

def test_case_9():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = ';;'
    tuple_0 = a_t_script_parser_0.parse(str_0)

def test_case_10():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = ';;d'
    tuple_0 = a_t_script_parser_0.parse(str_0)

def test_case_11():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = ';;;;'
    tuple_0 = a_t_script_parser_0.parse(str_0)

def test_case_12():
    a_t_script_parser_0 = module_0.ATScriptParser()
    str_0 = ';;;;g='
    with pytest.raises(module_1.ATScriptSyntaxError):
        a_t_script_parser_0.parse(str_0)