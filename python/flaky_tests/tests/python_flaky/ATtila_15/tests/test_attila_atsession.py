# Automatically generated by Pynguin.
import pytest
import attila.atsession as module_0
import re as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'v$g~`}I_gS)'
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    int_0 = -145
    bool_0 = a_t_session_0.add_new_command(str_0, str_0, delay=int_0)
    assert bool_0 is True
    module_1.split(str_0, str_0, str_0, str_0)

def test_case_1():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    bool_0 = True
    bool_1 = a_t_session_0.rem_command(bool_0)
    assert bool_1 is True

def test_case_2():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.reset()
    str_0 = 'B]O}Rnm'
    bool_0 = a_t_session_0.add_new_command(str_0, str_0, dganger=var_0)
    assert bool_0 is True
    list_0 = [str_0, str_0, str_0, var_0]
    a_t_response_0 = a_t_session_0.validate_response(list_0, str_0)
    assert f'{type(a_t_response_0).__module__}.{type(a_t_response_0).__qualname__}' == 'attila.atresponse.ATResponse'
    var_1 = a_t_session_0.get_command(bool_0)

def test_case_3():
    str_0 = '1VP='
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    str_1 = a_t_session_0.replace_session_keys(str_0)
    assert str_1 == '1VP='

def test_case_4():
    str_0 = 'R'
    str_1 = 'nm'
    str_2 = ' NuPl\t<3'
    str_3 = 'o.ZNKF|Jm&a'
    list_0 = [str_1, str_1, str_2, str_3]
    a_t_session_0 = module_0.ATSession(list_0)
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    with pytest.raises(KeyError):
        a_t_session_0.get_session_value(str_0)

def test_case_5():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'

def test_case_6():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.reset()
    str_0 = 'B]O}Rnm'
    bool_0 = a_t_session_0.add_new_command(str_0, str_0, dganger=var_0)
    assert bool_0 is True
    list_0 = [str_0, str_0, str_0, var_0]
    a_t_response_0 = a_t_session_0.validate_response(list_0, str_0)
    assert f'{type(a_t_response_0).__module__}.{type(a_t_response_0).__qualname__}' == 'attila.atresponse.ATResponse'

def test_case_7():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.clear_commands()
    var_1 = a_t_session_0.get_next_command()
    var_2 = module_1.purge()

def test_case_8():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    str_0 = 'B]O}Rnm'
    bool_0 = a_t_session_0.add_new_command(str_0, str_0, dganger=str_0)
    assert bool_0 is True
    list_0 = [str_0, str_0, str_0, a_t_session_0]
    str_1 = '&*n${*}Ka'
    str_2 = a_t_session_0.replace_session_keys(str_1)
    assert str_2 == '&*nKa'
    bool_1 = a_t_session_0.add_command(list_0)
    str_3 = 'BREAK'
    none_type_0 = a_t_session_0.set_session_value(str_3, list_0)

def test_case_9():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.reset()
    str_0 = 'B]O}Rnm'
    bool_0 = a_t_session_0.add_new_command(str_0, str_0, dganger=var_0)
    assert bool_0 is True
    var_1 = a_t_session_0.get_next_command()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'attila.atcommand.ATCommand'
    list_0 = [str_0, str_0, str_0, var_0]
    a_t_response_0 = a_t_session_0.validate_response(list_0, str_0)
    assert f'{type(a_t_response_0).__module__}.{type(a_t_response_0).__qualname__}' == 'attila.atresponse.ATResponse'
    var_2 = a_t_session_0.get_command(bool_0)
    none_type_0 = a_t_session_0.set_session_value(a_t_response_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'nm'
    str_1 = ' NuPl\t<3'
    str_2 = 'o.ZNKF|Jm&a'
    list_0 = [str_0, str_0, str_1, str_2]
    a_t_session_0 = module_0.ATSession(list_0)
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.reset()
    bool_0 = a_t_session_0.add_new_command(var_0, var_0, var_0)
    assert bool_0 is False
    var_0.get_command(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    str_0 = 'Syntax error at line %d: %s (%s)'
    list_0 = [str_0]
    bool_0 = True
    a_t_session_0.validate_response(list_0, bool_0)

def test_case_12():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    bool_0 = a_t_session_0.add_command(a_t_session_0)
    var_0 = a_t_session_0.reset()
    str_0 = 'B]O}Rnm'
    none_type_0 = None
    bool_1 = a_t_session_0.add_new_command(str_0, str_0, dganger=none_type_0)
    assert bool_1 is True
    var_1 = a_t_session_0.get_next_command()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'attila.atcommand.ATCommand'
    list_0 = [str_0, str_0, str_0, var_0]
    a_t_response_0 = a_t_session_0.validate_response(list_0, str_0)
    assert f'{type(a_t_response_0).__module__}.{type(a_t_response_0).__qualname__}' == 'attila.atresponse.ATResponse'
    var_2 = a_t_session_0.get_command(bool_1)
    var_3 = a_t_session_0.get_next_command()
    str_1 = "v&S/xkI/6)VewT'6|]gx"
    str_2 = a_t_session_0.replace_session_keys(str_0)
    a_t_session_1 = module_0.ATSession()
    bool_2 = a_t_session_0.add_command(bool_0)
    bool_3 = a_t_session_0.add_new_command(var_0, str_1, collectables=var_2)
    str_3 = '~$g1Zb\'=NV"vi'
    none_type_1 = a_t_session_0.set_session_value(var_0, str_3)
    none_type_2 = a_t_session_0.get_command(bool_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    str_0 = 'TtmPOn3kb'
    none_type_0 = None
    none_type_1 = a_t_session_0.set_session_value(none_type_0, str_0)
    var_0 = a_t_session_0.get_session_value(none_type_0)
    assert var_0 == 'TtmPOn3kb'
    a_t_session_0.get_command(str_0)

def test_case_14():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.reset()
    str_0 = '|wvI;Z;9uop_N+90'
    bool_0 = a_t_session_0.add_new_command(str_0, str_0, dganger=var_0)
    assert bool_0 is True
    var_1 = a_t_session_0.get_next_command()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'attila.atcommand.ATCommand'
    list_0 = [str_0, str_0, str_0, var_0]
    a_t_response_0 = a_t_session_0.validate_response(list_0, str_0)
    assert f'{type(a_t_response_0).__module__}.{type(a_t_response_0).__qualname__}' == 'attila.atresponse.ATResponse'

@pytest.mark.xfail(strict=True)
def test_case_15():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    str_0 = ''
    bool_0 = True
    bool_1 = a_t_session_0.rem_command(bool_0)
    assert bool_1 is True
    str_1 = 'B]O}Rnm'
    str_2 = 'z4t"^ob7^[r/[8p'
    list_0 = [str_0, str_0, str_1, str_2]
    a_t_session_0.validate_response(list_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    var_0 = a_t_session_0.reset()
    str_0 = 'B]O}Rnm'
    none_type_0 = None
    bool_0 = a_t_session_0.add_new_command(str_0, var_0, dganger=none_type_0)
    assert bool_0 is True
    var_1 = a_t_session_0.get_next_command()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'attila.atcommand.ATCommand'
    list_0 = [str_0, str_0, str_0, str_0]
    a_t_response_0 = a_t_session_0.validate_response(list_0, str_0)
    assert f'{type(a_t_response_0).__module__}.{type(a_t_response_0).__qualname__}' == 'attila.atresponse.ATResponse'
    var_2 = a_t_session_0.get_next_command()
    str_1 = "v&S/xkI/6)VewT'6|]gx"
    bool_1 = a_t_session_0.add_command(var_0)
    a_t_session_0.set_session_value(list_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_17():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    bool_0 = a_t_session_0.add_command(a_t_session_0)
    var_0 = module_0.ATSession(a_t_session_0)
    str_0 = 'B]O}Rnm'
    none_type_0 = None
    bool_1 = a_t_session_0.add_new_command(str_0, str_0, dganger=none_type_0)
    assert bool_1 is True
    var_0.get_next_command()

def test_case_18():
    a_t_session_0 = module_0.ATSession()
    assert f'{type(module_0.ATSession.last_command_failed).__module__}.{type(module_0.ATSession.last_command_failed).__qualname__}' == 'builtins.property'
    str_0 = '&*n${*}Ka'
    str_1 = a_t_session_0.replace_session_keys(str_0)
    assert str_1 == '&*nKa'