# Automatically generated by Pynguin.
import pytest
import redisqueue.mock as module_0
import redisqueue as module_1

def test_case_0():
    int_0 = -3575
    mock_redis_queue_0 = module_0.MockRedisQueue(int_0, int_0)
    assert mock_redis_queue_0.connected is False
    assert mock_redis_queue_0.name == -3575
    assert mock_redis_queue_0.namespace == 'mock_queue'
    assert mock_redis_queue_0.task_class == -3575
    assert f'{type(mock_redis_queue_0.logger).__module__}.{type(mock_redis_queue_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = mock_redis_queue_0.connect()
    assert var_0 is True
    assert mock_redis_queue_0.connected is True
    var_1 = mock_redis_queue_0.get()

def test_case_1():
    bytes_0 = b'\xbc\x94\xa54'
    list_0 = [bytes_0, bytes_0, bytes_0]
    mock_redis_queue_0 = module_0.MockRedisQueue(list_0, bytes_0)
    assert mock_redis_queue_0.connected is False
    assert mock_redis_queue_0.name == [b'\xbc\x94\xa54', b'\xbc\x94\xa54', b'\xbc\x94\xa54']
    assert mock_redis_queue_0.namespace == 'mock_queue'
    assert mock_redis_queue_0.task_class == b'\xbc\x94\xa54'
    assert f'{type(mock_redis_queue_0.logger).__module__}.{type(mock_redis_queue_0.logger).__qualname__}' == 'logging.Logger'
    with pytest.raises(module_1.QueueNotConnectedError):
        mock_redis_queue_0.qsize()

def test_case_2():
    int_0 = -3575
    mock_redis_queue_0 = module_0.MockRedisQueue(int_0, int_0)
    assert mock_redis_queue_0.connected is False
    assert mock_redis_queue_0.name == -3575
    assert mock_redis_queue_0.namespace == 'mock_queue'
    assert mock_redis_queue_0.task_class == -3575
    assert f'{type(mock_redis_queue_0.logger).__module__}.{type(mock_redis_queue_0.logger).__qualname__}' == 'logging.Logger'
    with pytest.raises(module_1.QueueNotConnectedError):
        mock_redis_queue_0.put(mock_redis_queue_0)

def test_case_3():
    bytes_0 = b'\xbc\x94\xa54'
    list_0 = [bytes_0, bytes_0]
    mock_redis_queue_0 = module_0.MockRedisQueue(list_0, bytes_0)
    assert mock_redis_queue_0.connected is False
    assert mock_redis_queue_0.name == [b'\xbc\x94\xa54', b'\xbc\x94\xa54']
    assert mock_redis_queue_0.namespace == 'mock_queue'
    assert mock_redis_queue_0.task_class == b'\xbc\x94\xa54'
    assert f'{type(mock_redis_queue_0.logger).__module__}.{type(mock_redis_queue_0.logger).__qualname__}' == 'logging.Logger'
    with pytest.raises(module_1.QueueNotConnectedError):
        mock_redis_queue_0.get(list_0, bytes_0)

def test_case_4():
    bytes_0 = b'\xbc\x94\xa54'
    list_0 = [bytes_0, bytes_0, bytes_0]
    mock_redis_queue_0 = module_0.MockRedisQueue(list_0, bytes_0)
    assert mock_redis_queue_0.connected is False
    assert mock_redis_queue_0.name == [b'\xbc\x94\xa54', b'\xbc\x94\xa54', b'\xbc\x94\xa54']
    assert mock_redis_queue_0.namespace == 'mock_queue'
    assert mock_redis_queue_0.task_class == b'\xbc\x94\xa54'
    assert f'{type(mock_redis_queue_0.logger).__module__}.{type(mock_redis_queue_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = mock_redis_queue_0.clear()
    with pytest.raises(module_1.QueueNotConnectedError):
        mock_redis_queue_0.put(var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'\xbc\x94\xa54'
    list_0 = [bytes_0, bytes_0]
    mock_redis_queue_0 = module_0.MockRedisQueue(list_0, bytes_0)
    assert mock_redis_queue_0.connected is False
    assert mock_redis_queue_0.name == [b'\xbc\x94\xa54', b'\xbc\x94\xa54']
    assert mock_redis_queue_0.namespace == 'mock_queue'
    assert mock_redis_queue_0.task_class == b'\xbc\x94\xa54'
    assert f'{type(mock_redis_queue_0.logger).__module__}.{type(mock_redis_queue_0.logger).__qualname__}' == 'logging.Logger'
    var_0 = mock_redis_queue_0.connect()
    assert var_0 is True
    assert mock_redis_queue_0.connected is True
    var_1 = mock_redis_queue_0.get(list_0, bytes_0)
    mock_redis_queue_0.put(var_1)