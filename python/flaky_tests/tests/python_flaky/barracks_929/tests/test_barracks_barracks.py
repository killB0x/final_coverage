# Automatically generated by Pynguin.
import pytest
import barracks.barracks as module_0
import json.scanner as module_1
import re as module_2

def test_case_0():
    str_0 = 'd:w#\x0b+EFD.1x'
    barracks_0 = module_0.Barracks(str_0, str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'd:w#\x0b+EFD.1x'
    assert barracks_0.chucksize == 'd:w#\x0b+EFD.1x'
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'

def test_case_1():
    compressor_0 = module_0.Compressor()

@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    module_0.Chunk(list_0, list_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'Mz;]\rVA# '
    barracks_0 = module_0.Barracks(str_0, str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'Mz;]\rVA# '
    assert barracks_0.chucksize == 'Mz;]\rVA# '
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    module_1.py_make_scanner(str_0)

def test_case_4():
    str_0 = 'd:w#\x0b+EFD.1x'
    barracks_0 = module_0.Barracks(str_0, str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'd:w#\x0b+EFD.1x'
    assert barracks_0.chucksize == 'd:w#\x0b+EFD.1x'
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    with pytest.raises(RuntimeError):
        module_0.Barracks(barracks_0, compressor=barracks_0)

def test_case_5():
    str_0 = 'd:w#\x0b+EFD.1x'
    barracks_0 = module_0.Barracks(str_0, str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'd:w#\x0b+EFD.1x'
    assert barracks_0.chucksize == 'd:w#\x0b+EFD.1x'
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    var_0 = barracks_0.save()
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1360
    var_0 = barracks_0.set(int_0, int_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.chunks()
    var_0.readall()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'Yme~62\rPdh#\\J$-'
    none_type_0 = None
    barracks_0 = module_0.Barracks(str_0, compressor=none_type_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'Yme~62\rPdh#\\J$-'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Naive'
    int_0 = 1359
    barracks_0.get(int_0)

def test_case_8():
    str_0 = 'd:w#\x0b+EFD.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'd:w#\x0b+EFD.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    var_0 = barracks_0.chunks()
    var_1 = var_0.__next__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_1.barracks).__module__}.{type(var_1.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_1.id == 0
    assert var_1.mode == 'r'
    assert var_1.filepath == 'd:w#\x0b+EFD.1x/0.dat'
    assert var_1.header == {'_version': '0.2.0', 'keys': [False]}
    assert f'{type(var_1.buffer).__module__}.{type(var_1.buffer).__qualname__}' == '_io.StringIO'

def test_case_9():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1360
    var_0 = barracks_0.set(int_0, int_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.chunks()
    var_2 = var_1.__next__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_2.barracks).__module__}.{type(var_2.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_2.id == 0
    assert var_2.mode == 'r'
    assert var_2.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_2.buffer).__module__}.{type(var_2.buffer).__qualname__}' == '_io.StringIO'
    with pytest.raises(RuntimeError):
        module_0.Barracks(var_1, compressor=var_2)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0, str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 'w#\x0bW+.1x'
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    var_0 = barracks_0.chunks()
    var_1 = var_0.__next__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_1.barracks).__module__}.{type(var_1.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_1.id == 0
    assert var_1.mode == 'r'
    assert var_1.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_1.buffer).__module__}.{type(var_1.buffer).__qualname__}' == '_io.StringIO'
    var_1.reset()

def test_case_11():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1349
    var_0 = barracks_0.get(int_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.get(int_0)

def test_case_12():
    str_0 = 'w#\x0b+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0b+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1349
    var_0 = barracks_0.get(int_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.get(int_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1360
    barracks_0.get(int_0)
    assert var_0 == 1360
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.chunks()
    var_2 = var_1.__next__()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_2.barracks).__module__}.{type(var_2.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_2.id == 0
    assert var_2.mode == 'r'
    assert var_2.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_2.buffer).__module__}.{type(var_2.buffer).__qualname__}' == '_io.StringIO'
    var_3 = var_1.setstate(var_1)

def test_case_14():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1312
    var_0 = barracks_0.get(int_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.get(int_0)

def test_case_15():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    var_0 = barracks_0.chunks()
    var_1 = var_0.__next__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_1.barracks).__module__}.{type(var_1.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_1.id == 0
    assert var_1.mode == 'r'
    assert var_1.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_1.buffer).__module__}.{type(var_1.buffer).__qualname__}' == '_io.StringIO'
    with pytest.raises(RuntimeError):
        var_1.append(str_0, barracks_0)

def test_case_16():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1360
    var_0 = barracks_0.set(int_0, str_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.getchunk(int_0, str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_1.barracks).__module__}.{type(var_1.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_1.id == 0
    assert var_1.mode == 'w#\x0bW+.1x'
    assert var_1.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_1.buffer).__module__}.{type(var_1.buffer).__qualname__}' == '_io.StringIO'
    with pytest.raises(RuntimeError):
        var_1.save()

def test_case_17():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1360
    barracks_0.get(int_0)
    assert var_0 == 1360
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.set(int_0, var_0)
    var_2 = barracks_0.getchunk(var_0, str_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_2.barracks).__module__}.{type(var_2.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_2.id == 0
    assert var_2.mode == 'w#\x0bW+.1x'
    assert var_2.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_2.buffer).__module__}.{type(var_2.buffer).__qualname__}' == '_io.StringIO'
    with pytest.raises(RuntimeError):
        var_3 = var_2.save()

def test_case_18():
    str_0 = 'w#\x0bW+.1x'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'w#\x0bW+.1x'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    int_0 = 1360
    barracks_0.get(int_0)
    assert var_0 == 1360
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    var_1 = barracks_0.set(int_0, var_0)
    var_2 = barracks_0.chunks()
    var_3 = barracks_0.getchunk(var_0, str_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'barracks.barracks.Chunk'
    assert f'{type(var_3.barracks).__module__}.{type(var_3.barracks).__qualname__}' == 'barracks.barracks.Barracks'
    assert var_3.id == 0
    assert var_3.mode == 'w#\x0bW+.1x'
    assert var_3.filepath == 'w#\x0bW+.1x/0.dat'
    assert f'{type(var_3.buffer).__module__}.{type(var_3.buffer).__qualname__}' == '_io.StringIO'
    with pytest.raises(RuntimeError):
        var_4 = var_3.nextitem()

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'pN_K\x0b#\x0c:z?"BU\r'
    barracks_0 = module_0.Barracks(str_0)
    assert f'{type(barracks_0).__module__}.{type(barracks_0).__qualname__}' == 'barracks.barracks.Barracks'
    assert barracks_0.dirname == 'pN_K\x0b#\x0c:z?"BU\r'
    assert barracks_0.chucksize == 10000
    assert barracks_0.cur_chunk is None
    assert f'{type(barracks_0.compressor).__module__}.{type(barracks_0.compressor).__qualname__}' == 'barracks.barracks.Compressor.Lz4'
    var_0 = barracks_0.save()
    assert var_0 is False
    regex_flag_0 = module_2.RegexFlag.MULTILINE
    var_1 = barracks_0.set(var_0, regex_flag_0)
    assert f'{type(barracks_0.cur_chunk).__module__}.{type(barracks_0.cur_chunk).__qualname__}' == 'barracks.barracks.Chunk'
    barracks_0.get(var_0)
    assert var_2 == 8
    int_0 = 10000
    var_3 = barracks_0.get(int_0)
    var_4 = barracks_0.save()
    var_5 = barracks_0.get(var_4)
    assert var_5 == 8
    var_6 = var_0.chunks()