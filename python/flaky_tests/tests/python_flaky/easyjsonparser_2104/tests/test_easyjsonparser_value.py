# Automatically generated by Pynguin.
import pytest
import easyjsonparser.value as module_0
import easyjsonparser.helper as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'
    value_instance_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '[N\n"Mmj'
    int_0 = 2688
    value_0 = module_0._Value(optional=str_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'
    var_0 = value_0.check_params()
    var_0.find_all(int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = False
    module_0._Value(none_type_0, bool_0)

def test_case_3():
    value_0 = module_0._Value()
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.Empty()
    var_1 = var_0.__repr__()
    bytes_0 = b"Yx\xf3'\xbe@xw\x1d"
    module_0._ValueInstance(bytes_0)

def test_case_5():
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'
    value_0 = module_0._Value()
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'
    var_0 = value_0.compute_instance_type()
    var_0.compute_instance_type()

def test_case_7():
    value_0 = module_0._Value()
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'
    var_0 = value_0.__call__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.value.ValueType'
    var_1 = var_0.to_json()
    assert var_1 == ''

@pytest.mark.xfail(strict=True)
def test_case_8():
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'
    var_0 = value_instance_0.__repr__()
    assert var_0 == '<JSON Value _ValueInstance: <Empty value>>'
    value_instance_0.to_json()

def test_case_9():
    bool_0 = True
    value_0 = module_0._Value(optional=bool_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'
    tuple_0 = ()
    var_0 = value_0.__call__(*tuple_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.value.ValueType'
    var_1 = var_0.to_json()
    assert var_1 == ''
    with pytest.raises(NotImplementedError):
        var_0.compute_to_json()

@pytest.mark.xfail(strict=True)
def test_case_10():
    value_0 = module_0._Value()
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'
    bool_0 = True
    var_0 = value_0.check_params()
    var_1 = value_instance_0.find(bool_0)
    var_2 = value_instance_0.find_all(value_instance_0)
    value_instance_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_11():
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'
    var_0 = value_instance_0.find_all(value_instance_0)
    value_instance_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_12():
    value_0 = module_0._Value()
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'easyjsonparser.value._Value'
    assert f'{type(module_0._Value.is_optional).__module__}.{type(module_0._Value.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._Value.default).__module__}.{type(module_0._Value.default).__qualname__}' == 'builtins.property'
    value_instance_0 = module_0._ValueInstance()
    assert f'{type(value_instance_0).__module__}.{type(value_instance_0).__qualname__}' == 'easyjsonparser.value._ValueInstance'
    assert f'{type(module_0._ValueInstance.value).__module__}.{type(module_0._ValueInstance.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.is_optional).__module__}.{type(module_0._ValueInstance.is_optional).__qualname__}' == 'builtins.property'
    assert f'{type(module_0._ValueInstance.default).__module__}.{type(module_0._ValueInstance.default).__qualname__}' == 'builtins.property'
    set_0 = value_instance_0.__str__()
    assert set_0 == '<JSON Value _ValueInstance: <Empty value>>'
    var_0 = value_instance_0.__str__()
    assert var_0 == '<JSON Value _ValueInstance: <Empty value>>'
    var_0.__call__()