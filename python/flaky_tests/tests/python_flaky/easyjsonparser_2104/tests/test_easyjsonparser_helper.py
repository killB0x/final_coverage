# Automatically generated by Pynguin.
import pytest
import easyjsonparser.helper as module_0
import ast as module_1
import re as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.JSONArrayMetaclass(*list_0, **dict_0)

def test_case_1():
    private_easy_none_helper_0 = module_0.Empty()
    assert f'{type(private_easy_none_helper_0).__module__}.{type(private_easy_none_helper_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    var_0 = module_0.Empty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    var_1 = var_0.__repr__()
    assert var_1 == '<Empty value>'
    list_0 = [dict_0, dict_0, var_1]
    module_0.JSONArrayMetaclass(*list_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_0.Empty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    var_1 = var_0.__str__()
    assert var_1 == '<Empty value>'
    list_0 = [var_1, dict_0, var_1]
    module_0.JSONArrayMetaclass(*list_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.JSONObjectMetaclass(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '&1>fQ@G'
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.JSONObjectMetaclass(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_1._Precedence.YIELD
    var_1 = var_0.__str__()
    regex_flag_0 = module_2.RegexFlag.ASCII
    str_0 = 'Object'
    dict_0 = {str_0: str_0, regex_flag_0: str_0}
    list_0 = [str_0, dict_0, dict_0]
    var_2 = module_0.Empty()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    var_3 = var_2.__gt__(dict_0)
    module_0.JSONObjectMetaclass(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.Empty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    list_0 = var_0.__reduce__()
    var_1 = var_0.__str__()
    assert var_1 == '<Empty value>'
    module_0.JSONObjectMetaclass(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.Empty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    var_1 = var_0.__reduce__()
    not_primitive_instance_0 = module_0.NotPrimitiveInstance()
    var_2 = var_0.__str__()
    assert var_2 == '<Empty value>'
    module_0.JSONObjectMetaclass(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    not_primitive_instance_0 = module_0.NotPrimitiveInstance()
    precedence_0 = module_1._Precedence.TUPLE
    str_0 = 'object'
    dict_0 = {str_0: str_0, precedence_0: str_0}
    list_0 = [str_0, str_0, dict_0]
    var_0 = module_0.Empty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    module_0.JSONArrayMetaclass(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    not_primitive_instance_0 = module_0.NotPrimitiveInstance()
    precedence_0 = module_1._Precedence.TUPLE
    str_0 = 'object'
    dict_0 = {str_0: str_0, precedence_0: str_0}
    list_0 = [str_0, str_0, dict_0]
    var_0 = module_0.Empty()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    module_0.JSONObjectMetaclass(*list_0)