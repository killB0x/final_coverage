# Automatically generated by Pynguin.
import pytest
import easyjsonparser.string as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    string_0 = module_0.String()
    string_instance_0 = module_0._StringInstance()
    assert f'{type(string_instance_0).__module__}.{type(string_instance_0).__qualname__}' == 'easyjsonparser.string._StringInstance'
    module_0.String(string_0)

def test_case_1():
    string_instance_0 = module_0._StringInstance()
    assert f'{type(string_instance_0).__module__}.{type(string_instance_0).__qualname__}' == 'easyjsonparser.string._StringInstance'
    var_0 = string_instance_0.__repr__()
    assert var_0 == '<JSON Value _StringInstance: <Empty value>>'

@pytest.mark.xfail(strict=True)
def test_case_2():
    string_0 = module_0.String()
    var_0 = string_0.check_params()
    var_1 = string_0.compute_instance_type()
    var_2 = string_0.check_params()
    string_instance_0 = module_0._StringInstance()
    assert f'{type(string_instance_0).__module__}.{type(string_instance_0).__qualname__}' == 'easyjsonparser.string._StringInstance'
    var_1.check_params()

@pytest.mark.xfail(strict=True)
def test_case_3():
    string_instance_0 = module_0._StringInstance()
    assert f'{type(string_instance_0).__module__}.{type(string_instance_0).__qualname__}' == 'easyjsonparser.string._StringInstance'
    string_instance_1 = module_0._StringInstance()
    var_0 = string_instance_0.compute_to_json()
    assert var_0 == '"<Empty value>"'
    var_0.check_and_sanitize_input(var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'i[jAvGI^\x0cK4LMU'
    string_instance_0 = module_0._StringInstance(str_0)
    assert f'{type(string_instance_0).__module__}.{type(string_instance_0).__qualname__}' == 'easyjsonparser.string._StringInstance'
    var_0 = string_instance_0.__repr__()
    assert var_0 == '<JSON Value _StringInstance: "i[jAvGI^\x0cK4LMU">'
    var_1 = var_0.__str__()
    assert var_1 == '<JSON Value _StringInstance: "i[jAvGI^\x0cK4LMU">'
    string_0 = module_0.String()
    list_0 = [string_instance_0, var_1, string_0]
    string_instance_1 = module_0._StringInstance()
    assert f'{type(string_instance_1).__module__}.{type(string_instance_1).__qualname__}' == 'easyjsonparser.string._StringInstance'
    string_instance_1.check_and_sanitize_input(list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    string_instance_0 = module_0._StringInstance()
    assert f'{type(string_instance_0).__module__}.{type(string_instance_0).__qualname__}' == 'easyjsonparser.string._StringInstance'
    string_instance_1 = string_instance_0.check_and_sanitize_input(string_instance_0)
    assert f'{type(string_instance_1).__module__}.{type(string_instance_1).__qualname__}' == 'easyjsonparser.helper.PrivateEasyNoneHelper'
    var_0 = string_instance_0.compute_to_json()
    assert var_0 == '"<Empty value>"'
    str_0 = '0w<%6GqH#_*we'
    var_1 = string_instance_0.check_and_sanitize_input(str_0)
    assert var_1 == '0w<%6GqH#_*we'
    string_instance_2 = module_0._StringInstance()
    string_instance_1.compute_to_json()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = 'i[jAvGI^\x0cK4LMU'
    string_0 = module_0.String(str_0)
    assert f'{type(string_0).__module__}.{type(string_0).__qualname__}' == 'easyjsonparser.string.String'
    string_1 = module_0.String()
    var_0 = string_1.__call__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'easyjsonparser.string.StringInstance'
    var_1 = var_0.__str__()
    assert var_1 == '<JSON Value StringInstance: <Empty value>>'
    string_2 = module_0.String()
    var_1.compute_to_json()