# Automatically generated by Pynguin.
import pytest
import easyjsonparser.array as module_0
import easyjsonparser.value as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.Array()

def test_case_1():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.__str__()
    assert var_0 == '<JSON _ArrayInstance: []>'

def test_case_2():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'

def test_case_3():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.to_json()
    assert var_0 == '[]'

def test_case_4():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.__str__()
    assert var_0 == '<JSON _ArrayInstance: []>'
    var_1 = array_instance_0.__repr__()
    assert var_1 == '<JSON _ArrayInstance: None>'

@pytest.mark.xfail(strict=True)
def test_case_5():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.__len__()
    assert var_0 == 0
    array_instance_0.__getitem__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.to_json()
    assert var_0 == '[]'
    var_1 = array_instance_0.__str__()
    assert var_1 == '<JSON _ArrayInstance: []>'
    var_2 = var_1.__iter__()
    array_instance_1 = module_0._ArrayInstance(*array_instance_0)
    assert f'{type(array_instance_1).__module__}.{type(array_instance_1).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_1) == 0
    var_3 = array_instance_0.__iter__()
    array_instance_0.__setitem__(var_2, var_3)

def test_case_7():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    array_instance_1 = module_0._ArrayInstance(*array_instance_0)
    assert f'{type(array_instance_1).__module__}.{type(array_instance_1).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_8():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.to_json()
    assert var_0 == '[]'
    var_1 = array_instance_0.__str__()
    assert var_1 == '<JSON _ArrayInstance: []>'
    array_instance_0.__contains__(var_1)

def test_case_9():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.__reversed__()
    array_instance_1 = module_0._ArrayInstance(*var_0)
    assert len(array_instance_1) == 0

@pytest.mark.xfail(strict=True)
def test_case_10():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.to_json()
    assert var_0 == '[]'
    var_1 = array_instance_0.__str__()
    assert var_1 == '<JSON _ArrayInstance: []>'
    var_2 = var_1.__iter__()
    array_instance_1 = module_0._ArrayInstance(*array_instance_0)
    assert f'{type(array_instance_1).__module__}.{type(array_instance_1).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_1) == 0
    module_0._ArrayInstance(*var_2)

def test_case_11():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    value_0 = module_1._Value()
    array_0 = module_0.Array(value_0, array_instance_0)
    assert f'{type(array_0).__module__}.{type(array_0).__qualname__}' == 'easyjsonparser.array.Array'
    assert f'{type(module_0.Array.schema).__module__}.{type(module_0.Array.schema).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Array.minsize).__module__}.{type(module_0.Array.minsize).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Array.maxsize).__module__}.{type(module_0.Array.maxsize).__qualname__}' == 'builtins.property'

def test_case_12():
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    value_0 = module_1._Value()
    array_0 = module_0.Array(value_0, array_instance_0)
    assert f'{type(array_0).__module__}.{type(array_0).__qualname__}' == 'easyjsonparser.array.Array'
    assert f'{type(module_0.Array.schema).__module__}.{type(module_0.Array.schema).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Array.minsize).__module__}.{type(module_0.Array.minsize).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Array.maxsize).__module__}.{type(module_0.Array.maxsize).__qualname__}' == 'builtins.property'
    var_0 = array_0.compute_instance_type()

def test_case_13():
    tuple_0 = ()
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.find_all(tuple_0)

def test_case_14():
    tuple_0 = ()
    array_instance_0 = module_0._ArrayInstance()
    assert f'{type(array_instance_0).__module__}.{type(array_instance_0).__qualname__}' == 'easyjsonparser.array._ArrayInstance'
    assert len(array_instance_0) == 0
    assert f'{type(module_0._ArrayInstance.value).__module__}.{type(module_0._ArrayInstance.value).__qualname__}' == 'builtins.property'
    var_0 = array_instance_0.find(tuple_0)