# Automatically generated by Pynguin.
import pytest
import platform as module_0
import authnzerver.actions.user as module_1
import urllib.request as module_2
import sqlalchemy.util.langhelpers as module_3
import email.charset as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.python_version()
    module_1.validate_input_password(none_type_0, var_0, var_0, var_0, none_type_0, config=var_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.validate_input_password(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.change_user_password(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.create_new_user(none_type_0, none_type_0)

def test_case_4():
    str_0 = '#JgjLk-)\n`h15`CNY'
    str_1 = 'Returns the column expression for all required info retrieved by\n    a user lookup.\n\n    *table* is the users SQLAlchemy table object. Required to preserve type\n    information for the columns.\n\n    '
    var_0 = module_1.delete_user(str_0, str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_1.verify_password_reset(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_2.noheaders()
    var_1 = module_1.change_user_password(var_0)
    module_1.create_new_user(none_type_0, config=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'F9'
    var_0 = module_1.create_new_user(str_0, override_authdb_path=str_0, raiseonfail=str_0)
    var_0.children()

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'J#+=B+C6_MS1dQA'
    var_0 = module_1.verify_password_reset(str_0, max_unsafe_similarity=str_0, config=str_0)
    var_1 = var_0.__repr__()
    assert var_1 == '{\'success\': False, \'failure_reason\': "invalid request: missing \'reqid\' in request", \'messages\': [\'Invalid password reset request.\']}'
    var_2 = module_1.validate_input_password(str_0, str_0, var_1, var_1, var_1, config=var_1)
    none_type_0 = None
    module_1.create_new_user(none_type_0, none_type_0, config=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.python_compiler()
    var_1 = module_1.validate_input_password(var_0, var_0, var_0, var_0, var_0, config=var_0)
    var_1.values()

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'J#+=B+C6_MS1dQA'
    var_0 = module_1.verify_password_reset(str_0, max_unsafe_similarity=str_0, config=str_0)
    var_1 = var_0.__repr__()
    assert var_1 == '{\'success\': False, \'failure_reason\': "invalid request: missing \'reqid\' in request", \'messages\': [\'Invalid password reset request.\']}'
    var_2 = module_1.create_new_user(var_1, var_1)
    var_3 = module_1.delete_user(str_0, override_authdb_path=var_0)
    var_4 = module_1.create_new_user(var_1, max_unsafe_similarity=var_1, override_authdb_path=var_1)
    var_5 = module_1.change_user_password(var_2)
    var_1.visit_Import(var_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'J#+=B+C6_MS1dQA'
    var_0 = module_1.verify_password_reset(str_0, max_unsafe_similarity=str_0, config=str_0)
    var_1 = var_0.__repr__()
    assert var_1 == '{\'success\': False, \'failure_reason\': "invalid request: missing \'reqid\' in request", \'messages\': [\'Invalid password reset request.\']}'
    var_2 = module_1.validate_input_password(str_0, str_0, var_1, var_1, var_1, config=var_1)
    var_3 = module_1.delete_user(str_0, override_authdb_path=var_0)
    var_4 = module_1.create_new_user(var_1, max_unsafe_similarity=var_1, override_authdb_path=var_2)
    var_5 = module_1.change_user_password(var_1)
    var_6 = module_1.create_new_user(var_1, str_0, raiseonfail=var_2, config=var_5)
    var_7 = module_1.change_user_password(var_6, var_4, var_3, var_1, config=var_2)
    var_3.visit_Import(var_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'J#+=B+C6_MS1dQA'
    var_0 = module_3.has_compiled_ext()
    var_1 = var_0.__repr__()
    var_2 = module_1.validate_input_password(str_0, str_0, var_1, var_1, var_1, config=var_1)
    var_3 = module_1.create_new_user(var_1, var_1)
    none_type_0 = None
    var_4 = module_1.create_new_user(var_3, var_3, raiseonfail=none_type_0)
    var_5 = module_1.create_new_user(var_3, override_authdb_path=var_0, config=var_3)
    var_0.visit_Import(var_5)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'J#+=B+C6_MS1dQA'
    var_0 = module_4.add_alias(str_0, str_0)
    var_1 = var_0.__repr__()
    var_2 = module_1.validate_input_password(str_0, str_0, var_1, var_1, var_1, config=var_1)
    var_3 = module_1.create_new_user(var_1, var_1)
    var_4 = module_1.delete_user(str_0, override_authdb_path=var_0)
    var_5 = module_1.change_user_password(var_3)
    var_0.exec_once_unless_exception(*var_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'J#+=B+C6_MS1dQA'
    var_0 = module_1.verify_password_reset(str_0, max_unsafe_similarity=str_0, config=str_0)
    var_1 = var_0.__iter__()
    var_2 = var_0.__repr__()
    assert var_2 == '{\'success\': False, \'failure_reason\': "invalid request: missing \'reqid\' in request", \'messages\': [\'Invalid password reset request.\']}'
    module_1.validate_input_password(var_2, str_0, var_2, var_2, var_1, config=var_2)