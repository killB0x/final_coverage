# Automatically generated by Pynguin.
import pytest
import authnzerver.actions.passcheck as module_0
import tokenize as module_1
import inspect as module_2
import urllib.request as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.auth_password_check(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.auth_password_check_nosession(none_type_0, raiseonfail=none_type_0)

def test_case_2():
    var_0 = module_1.any()
    var_1 = module_0.auth_password_check(var_0)

def test_case_3():
    var_0 = module_2.trace()
    var_1 = module_0.auth_password_check_nosession(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'Sends an account verification email.\n\n    Parameters\n    -----------\n\n    payload : dict\n        Keys expected in this dict from a client are:\n\n        - email_address: str, the email address to send the email to\n        - session_token: str, session token of the user being sent the email\n        - created_info: str, the dict returned by ``users.auth_create_user()``\n        - server_name: str, the name of the frontend server\n        - server_baseurl: str, the base URL of the frontend server\n        - account_verify_url: str, the URL fragment of the frontend verification\n          endpoint\n        - verification_token: str, a verification token generated by frontend\n        - verification_expiry: int, number of seconds after which the token\n          expires\n\n        In addition, the following items must be provided by a wrapper function\n        to set up the email server.\n\n        - emailuser\n        - emailpass\n        - emailserver\n        - emailport\n        - emailsender\n\n        These can be provided as part of the payload as dict keys or as\n        attributes in the SimpleNamespace object passed in the config kwarg. The\n        config object will be checked first, and the payload items will override\n        it.\n\n        Finally, the payload must also include the following keys (usually added\n        in by a wrapping function):\n\n        - reqid: int or str\n        - pii_salt: str\n\n    override_authdb_path : str or None\n        If given as a str, is the alternative path to the auth DB.\n\n    raiseonfail : bool\n        If True, will raise an Exception if something goes wrong.\n\n    config : SimpleNamespace object or None\n        An object containing systemwide config variables as attributes. This is\n        useful when the wrapping function needs to pass in some settings\n        directly from environment variables.\n\n    Returns\n    -------\n\n    dict\n        Returns a dict containing the user_id, email_address, and the\n        emailverify_sent_datetime value if email was sent successfully.\n\n    '
    module_0.auth_password_check(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_3.ftperrors()
    var_1 = module_0.auth_password_check(var_0)
    var_2 = module_0.auth_password_check_nosession(var_0)
    var_3 = var_2.__str__()
    assert var_3 == '{\'success\': False, \'failure_reason\': "invalid request: missing \'reqid\' in request", \'user_id\': None, \'messages\': [\'Invalid password check request.\']}'
    var_4 = var_0.__repr__()
    var_5 = module_0.auth_password_check(var_1, var_4, var_4)
    none_type_0 = None
    var_6 = module_0.auth_password_check_nosession(var_3)
    var_3.__setitem__(none_type_0, var_1)