# Automatically generated by Pynguin.
import pytest
import authnzerver._version as module_0
import re as module_1

def test_case_0():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440-pre'
    assert var_0.tag_prefix == ''
    assert var_0.parentdir_prefix == 'None'
    assert var_0.versionfile_source == 'authnzerver/_version.py'
    assert len(module_0.HANDLERS) == 1

def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1

def test_case_2():
    float_0 = -1940.0
    with pytest.raises(AssertionError):
        module_0.run_command(float_0, float_0, hide_stderr=float_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.git_get_keywords(bool_0)
    assert len(module_0.HANDLERS) == 1
    module_1.search(var_0, bool_0, bool_0)

def test_case_4():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(none_type_0, var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -729
    module_0.git_pieces_from_vcs(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 21
    var_0 = module_0.git_get_keywords(int_0)
    assert len(module_0.HANDLERS) == 1
    module_0.versions_from_parentdir(int_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    module_0.git_get_keywords(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\xf0\xf0\x0bA+\x9c\xa3\x88SR\xb2>\x12X*\xbd'
    var_0 = module_0.versions_from_parentdir(bytes_0, bytes_0, bytes_0)
    assert len(module_0.HANDLERS) == 1
    var_0.__len__(var_0)

def test_case_9():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)

def test_case_10():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'

@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)
    module_0.git_versions_from_keywords(var_0, var_1, var_0)

def test_case_12():
    complex_0 = (1776.9+3667.89j)
    float_0 = -1940.0
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(float_0, none_type_0, complex_0)

def test_case_13():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    str_0 = "*6?TScGlPU/S:H'$}qq"
    var_1 = var_0.__dir__()
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_0, str_0, str_0)

def test_case_14():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)

def test_case_15():
    str_0 = 'This automatically generates secrets files and an authentication DB.\n\n    Run this only once on the first start of an authnzerver.\n\n    Parameters\n    ----------\n\n    basedir : str\n        The base directory of the authnzerver.\n\n        - The authentication database will be written to a file called\n          ``.authdb.sqlite`` in this directory.\n\n        - The secret token to authenticate HTTP communications between the\n          authnzerver and a frontend server will be written to a file called\n          ``.authnzerver-secret-key`` in this directory.\n\n        - Credentials for a superuser that can be used to edit various\n          authnzerver options, and users will be written to\n          ``.authnzerver-admin-credentials`` in this directory.\n\n        - A random salt value will be written to ``.authnzerver-random-salt`` in\n          this directory. This is used to hash user IDs and other PII in logs.\n\n    database_url : str or None\n        If this is a str, must be a valid SQLAlchemy database URL to use to\n        connect to a database and make the necessary tables for authentication\n        info. If this is None, will create a new SQLite database in the\n        ``<basedir>/.authdb.sqlite`` file.\n\n    interactive : bool\n        If True, will ask the user for an admin email address and\n        password. Otherwise, will auto-generate both.\n\n    generate_envfile : bool\n        If True, generates an .env file in the basedir containing all the\n        required information for the next start up of the server.\n\n    Returns\n    -------\n\n    (authdb_path, creds, secret_file, salt_file, env_file) : tuple of str\n        The names of the files written by this function will be returned as a\n        tuple of strings.\n\n    '
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b':\xd3U\xa3N\xfc\xb4\xfd\x80\xc1\n\x85*\xa8$\xfdzz'
    none_type_0 = None
    module_0.run_command(list_0, list_0, bytes_0, none_type_0)