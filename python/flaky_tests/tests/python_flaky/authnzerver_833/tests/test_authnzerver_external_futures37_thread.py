# Automatically generated by Pynguin.
import pytest
import authnzerver.external.futures37.thread as module_0
import collections as module_1

def test_case_0():
    thread_pool_executor_0 = module_0.ThreadPoolExecutor()
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'

def test_case_1():
    int_0 = 1357
    with pytest.raises(TypeError):
        module_0.ThreadPoolExecutor(int_0, initializer=int_0)

def test_case_2():
    thread_pool_executor_0 = module_0.ThreadPoolExecutor()
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    thread_pool_executor_1 = thread_pool_executor_0.shutdown()
    with pytest.raises(RuntimeError):
        thread_pool_executor_0.submit(thread_pool_executor_0)

def test_case_3():
    bool_0 = True
    thread_pool_executor_0 = module_0.ThreadPoolExecutor(thread_name_prefix=bool_0, initargs=bool_0)
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    var_0 = thread_pool_executor_0.submit(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'concurrent.futures._base.Future'

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    thread_pool_executor_0 = module_0.ThreadPoolExecutor(thread_name_prefix=bool_0, initargs=bool_0)
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    none_type_0 = None
    var_0 = thread_pool_executor_0.shutdown(none_type_0)
    var_1 = thread_pool_executor_0.map(bool_0)
    var_2 = thread_pool_executor_0.map(thread_pool_executor_0)
    thread_pool_executor_0.submit(bool_0)

def test_case_5():
    broken_thread_pool_0 = module_0.BrokenThreadPool()

def test_case_6():
    thread_pool_executor_0 = module_0.ThreadPoolExecutor()
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    thread_pool_executor_1 = module_0.ThreadPoolExecutor()
    var_0 = thread_pool_executor_0.submit(thread_pool_executor_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'concurrent.futures._base.Future'
    var_1 = thread_pool_executor_0.shutdown()
    broken_thread_pool_0 = module_0.BrokenThreadPool()

@pytest.mark.xfail(strict=True)
def test_case_7():
    thread_pool_executor_0 = module_0.ThreadPoolExecutor()
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    var_0 = thread_pool_executor_0.shutdown()
    var_0.isascii()

@pytest.mark.xfail(strict=True)
def test_case_8():
    broken_thread_pool_0 = module_0.BrokenThreadPool()
    thread_pool_executor_0 = module_0.ThreadPoolExecutor()
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    var_0 = thread_pool_executor_0.submit(thread_pool_executor_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'concurrent.futures._base.Future'
    var_1 = thread_pool_executor_0.submit(thread_pool_executor_0)
    none_type_0 = None
    work_item_0 = module_0._WorkItem(var_1, none_type_0, thread_pool_executor_0, thread_pool_executor_0)
    var_2 = work_item_0.run()
    var_3 = var_0.__eq__(var_0)
    work_item_1 = module_0._WorkItem(thread_pool_executor_0, thread_pool_executor_0, none_type_0, none_type_0)
    module_1._Link(**var_3)

def test_case_9():
    bool_0 = True
    broken_thread_pool_0 = module_0.BrokenThreadPool()
    thread_pool_executor_0 = module_0.ThreadPoolExecutor(thread_name_prefix=bool_0, initargs=bool_0)
    assert f'{type(thread_pool_executor_0).__module__}.{type(thread_pool_executor_0).__qualname__}' == 'authnzerver.external.futures37.thread.ThreadPoolExecutor'
    var_0 = thread_pool_executor_0.submit(bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'concurrent.futures._base.Future'
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    var_1 = var_0.done()
    var_2 = thread_pool_executor_0.submit(bool_0, *list_0)
    var_3 = thread_pool_executor_0.submit(list_0)
    none_type_1 = None
    var_4 = thread_pool_executor_0.shutdown(none_type_1)
    with pytest.raises(ValueError):
        module_0.ThreadPoolExecutor(var_1, initializer=var_4)