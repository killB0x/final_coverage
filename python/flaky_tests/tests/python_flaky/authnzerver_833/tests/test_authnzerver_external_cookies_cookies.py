# Automatically generated by Pynguin.
import pytest
import authnzerver.external.cookies.cookies as module_0
import re as module_1
import builtins as module_2

def test_case_0():
    base_cookie_0 = module_0.BaseCookie()
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    module_0.SimpleCookie(morsel_0)

def test_case_2():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_3():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.update(morsel_0)
    none_type_0 = None
    var_1 = morsel_0.output(header=none_type_0)
    assert var_1 == 'None None=None'
    simple_cookie_0 = module_0.SimpleCookie(none_type_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_2 = simple_cookie_0.value_decode(var_1)
    var_3 = simple_cookie_0.value_encode(var_1)
    bool_0 = False
    var_1.__ior__(bool_0)

def test_case_4():
    str_0 = '$'
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    base_cookie_0 = module_0.BaseCookie(str_0)
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0
    morsel_1 = module_0.Morsel()
    assert len(morsel_1) == 9
    var_0 = morsel_1.update(base_cookie_0)
    var_1 = base_cookie_0.value_encode(morsel_1)
    morsel_2 = module_0.Morsel()
    assert len(morsel_2) == 9
    with pytest.raises(module_0.CookieError):
        morsel_0.__setitem__(str_0, str_0)

def test_case_5():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.js_output()
    assert var_0 == '\n        <script type="text/javascript">\n        <!-- begin hiding\n        document.cookie = "None=None";\n        // end hiding -->\n        </script>\n        '

def test_case_6():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.js_output(morsel_0)
    assert var_0 == '\n        <script type="text/javascript">\n        <!-- begin hiding\n        document.cookie = "None=None";\n        // end hiding -->\n        </script>\n        '

def test_case_7():
    simple_cookie_0 = module_0.SimpleCookie()
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_0 = simple_cookie_0.value_encode(simple_cookie_0)

def test_case_8():
    base_cookie_0 = module_0.BaseCookie()
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0
    var_0 = base_cookie_0.__repr__()
    assert var_0 == '<BaseCookie: >'
    var_1 = base_cookie_0.__iter__()

def test_case_9():
    simple_cookie_0 = module_0.SimpleCookie()
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_0 = simple_cookie_0.js_output(simple_cookie_0)
    assert var_0 == ''

def test_case_10():
    str_0 = '[%s] Email sent notification request succeeded for user_id: %s, email: %s, role: %s, is_active: %s.'
    base_cookie_0 = module_0.BaseCookie(str_0)
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0

def test_case_11():
    simple_cookie_0 = module_0.SimpleCookie()
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    morsel_0 = simple_cookie_0.load(simple_cookie_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.copy()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'authnzerver.external.cookies.cookies.Morsel'
    assert len(var_0) == 9
    var_1 = morsel_0.__repr__()
    assert var_1 == '<Morsel: None=None>'
    morsel_0.update(var_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = morsel_0.output(header=none_type_0)
    assert var_0 == 'None None=None'
    simple_cookie_0 = module_0.SimpleCookie(none_type_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_1 = simple_cookie_0.value_decode(var_0)
    morsel_0.isReservedKey(var_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.js_output(morsel_0)
    assert var_0 == '\n        <script type="text/javascript">\n        <!-- begin hiding\n        document.cookie = "None=None";\n        // end hiding -->\n        </script>\n        '
    var_1 = morsel_0.copy()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'authnzerver.external.cookies.cookies.Morsel'
    assert len(var_1) == 9
    var_2 = var_1.__getstate__()
    var_3 = var_1.__ior__(var_2)
    assert len(var_1) == 12
    assert len(var_3) == 12
    var_1.output(var_3)

def test_case_15():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.output(header=morsel_0)
    assert var_0 == 'Set-Cookie: None=None None=None'

def test_case_16():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.__repr__()
    assert var_0 == '<Morsel: None=None>'

def test_case_17():
    base_cookie_0 = module_0.BaseCookie()
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0
    var_0 = base_cookie_0.value_decode(base_cookie_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    base_cookie_0 = module_0.BaseCookie()
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0
    var_0 = base_cookie_0.value_encode(base_cookie_0)
    module_1.Scanner(var_0, base_cookie_0)

def test_case_19():
    str_0 = '.A'
    simple_cookie_0 = module_0.SimpleCookie(str_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_0 = simple_cookie_0.value_encode(str_0)
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_1 = simple_cookie_0.value_decode(var_0)
    with pytest.raises(module_0.CookieError):
        morsel_0.__setitem__(str_0, str_0)

def test_case_20():
    str_0 = '$'
    base_cookie_0 = module_0.BaseCookie(str_0)
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0

def test_case_21():
    str_0 = 'O='
    simple_cookie_0 = module_0.SimpleCookie(str_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 1

@pytest.mark.xfail(strict=True)
def test_case_22():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.__eq__(morsel_0)
    assert var_0 is True
    morsel_0.__setstate__(var_0)

def test_case_23():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.__eq__(morsel_0)
    assert var_0 is True

def test_case_24():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.__getstate__()
    var_1 = morsel_0.__getstate__()
    var_2 = morsel_0.update(morsel_0)
    var_3 = morsel_0.copy()
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'authnzerver.external.cookies.cookies.Morsel'
    assert len(var_3) == 9
    var_4 = morsel_0.OutputString()
    assert var_4 == 'None=None'
    var_5 = morsel_0.__getstate__()
    with pytest.raises(module_0.CookieError):
        var_3.update(var_1)

@pytest.mark.xfail(strict=True)
def test_case_25():
    simple_cookie_0 = module_0.SimpleCookie()
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_0 = simple_cookie_0.output()
    assert var_0 == ''
    var_1 = simple_cookie_0.load(var_0)
    simple_cookie_0.__setitem__(var_0, var_1)

def test_case_26():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    var_0 = morsel_0.OutputString()
    assert var_0 == 'None=None'
    simple_cookie_0 = module_0.SimpleCookie(var_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 1

def test_case_27():
    none_type_0 = None
    simple_cookie_0 = module_0.SimpleCookie(none_type_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_0 = simple_cookie_0.value_decode(none_type_0)
    list_0 = [simple_cookie_0]
    var_1 = simple_cookie_0.value_decode(simple_cookie_0)
    var_2 = simple_cookie_0.value_decode(list_0)

def test_case_28():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = morsel_0.output(header=none_type_0)
    assert var_0 == 'None None=None'
    simple_cookie_0 = module_0.SimpleCookie(none_type_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_1 = simple_cookie_0.__setitem__(var_0, morsel_0)
    assert len(simple_cookie_0) == 1
    list_0 = [simple_cookie_0]
    var_2 = simple_cookie_0.value_decode(list_0)

def test_case_29():
    str_0 = 'T'
    base_cookie_0 = module_0.BaseCookie(str_0)
    assert f'{type(base_cookie_0).__module__}.{type(base_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.BaseCookie'
    assert len(base_cookie_0) == 0

def test_case_30():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = morsel_0.output(header=none_type_0)
    assert var_0 == 'None None=None'
    with pytest.raises(module_0.CookieError):
        morsel_0.setdefault(var_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    morsel_0 = module_0.Morsel()
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = morsel_0.__eq__(none_type_0)
    var_1 = morsel_0.output(header=none_type_0)
    assert var_1 == 'None None=None'
    simple_cookie_0 = module_0.SimpleCookie(var_1)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_2 = simple_cookie_0.__repr__()
    assert var_2 == '<SimpleCookie: >'
    var_3 = simple_cookie_0.value_decode(var_1)
    exception_0 = module_2.Exception()
    morsel_0.parse(var_3)

def test_case_32():
    str_0 = 'A=Q'
    simple_cookie_0 = module_0.SimpleCookie(str_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 1
    var_0 = simple_cookie_0.value_encode(simple_cookie_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = 'A=Q'
    simple_cookie_0 = module_0.SimpleCookie(str_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 1
    var_0 = simple_cookie_0.value_encode(simple_cookie_0)
    var_1 = simple_cookie_0.value_decode(var_0)
    bool_0 = False
    var_2 = simple_cookie_0.__repr__()
    assert var_2 == "<SimpleCookie: A='Q'>"
    var_3 = var_0.__eq__(var_0)
    var_1.__setitem__(var_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = 'O=jYQ\x0cr'
    simple_cookie_0 = module_0.SimpleCookie(str_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    simple_cookie_0.__setitem__(simple_cookie_0, simple_cookie_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = 'A=Q'
    simple_cookie_0 = module_0.SimpleCookie(str_0)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 1
    var_0 = simple_cookie_0.js_output()
    assert var_0 == '\n        <script type="text/javascript">\n        <!-- begin hiding\n        document.cookie = "A=Q";\n        // end hiding -->\n        </script>\n        '
    var_1 = simple_cookie_0.value_decode(var_0)
    var_2 = simple_cookie_0.output(header=simple_cookie_0, sep=var_0)
    assert var_2 == 'Set-Cookie: A=Q A=Q'
    var_0.clear()

@pytest.mark.xfail(strict=True)
def test_case_36():
    morsel_0 = module_0.Morsel()
    assert f'{type(morsel_0).__module__}.{type(morsel_0).__qualname__}' == 'authnzerver.external.cookies.cookies.Morsel'
    assert len(morsel_0) == 9
    assert f'{type(module_0.Morsel.key).__module__}.{type(module_0.Morsel.key).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.value).__module__}.{type(module_0.Morsel.value).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Morsel.coded_value).__module__}.{type(module_0.Morsel.coded_value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = morsel_0.js_output(morsel_0)
    assert var_0 == '\n        <script type="text/javascript">\n        <!-- begin hiding\n        document.cookie = "None=None";\n        // end hiding -->\n        </script>\n        '
    var_1 = morsel_0.__eq__(none_type_0)
    var_2 = morsel_0.copy()
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'authnzerver.external.cookies.cookies.Morsel'
    assert len(var_2) == 9
    var_3 = morsel_0.__eq__(morsel_0)
    assert var_3 is True
    var_4 = var_3.__repr__()
    assert var_4 == 'True'
    var_5 = var_2.__getstate__()
    var_6 = var_2.__ior__(var_5)
    assert len(var_2) == 12
    assert len(var_6) == 12
    simple_cookie_0 = module_0.SimpleCookie(var_4)
    assert f'{type(simple_cookie_0).__module__}.{type(simple_cookie_0).__qualname__}' == 'authnzerver.external.cookies.cookies.SimpleCookie'
    assert len(simple_cookie_0) == 0
    var_7 = var_2.__repr__()
    assert var_7 == '<Morsel: None=None>'
    var_8 = none_type_0.__bool__()
    var_9 = simple_cookie_0.value_encode(var_3)
    var_10 = simple_cookie_0.value_decode(var_4)
    var_11 = var_5.__repr__()
    assert var_11 == "{'key': None, 'value': None, 'coded_value': None}"
    var_12 = var_8.__ror__(var_2)
    var_9.__setstate__(var_4)