# Automatically generated by Pynguin.
import pytest
import authnzerver.dictcache as module_0
import _blake2 as module_1

def test_case_0():
    bytes_0 = b'\xd3\xd1\x11\xc6\x8fl\x7f\x8eYPQ\xb2'
    bool_0 = False
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_increment(bytes_0)
    assert var_0 == 1

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    dict_cache_0.save(dict_cache_0, hmac_key=dict_cache_0)

def test_case_2():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_decrement(dict_cache_0, var_0)
    assert var_1 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    dict_cache_0.counter_set(dict_cache_0, dict_cache_0)

def test_case_4():
    bool_0 = False
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1

def test_case_5():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    none_type_0 = None
    var_0 = dict_cache_0.set(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    dict_cache_0.set(list_0, list_0, extras=dict_cache_0)

def test_case_7():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.delete(dict_cache_0)
    assert var_0 is False
    var_1 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_1 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_2 = dict_cache_0.counter_decrement(dict_cache_0, var_0)
    assert var_2 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0

def test_case_8():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    dict_cache_1 = module_0.DictCache(dict_cache_0)
    bytes_0 = b'\xca\xfaS\xe1\xe17\x9f\x1e\xff\x89a\xab'
    var_0 = dict_cache_0.counter_get(bytes_0)
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    dict_cache_0.save(dict_cache_0, dict_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    module_0.KeyWithTime()

@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.time()
    assert var_0 == pytest.approx(1665635663.6459355, abs=0.01, rel=0.01)
    str_0 = '\tXD*fKYE=\x0c3m'
    tuple_0 = (str_0, dict_cache_0)
    bool_0 = False
    var_1 = dict_cache_0.counter_decrement(str_0, bool_0)
    dict_cache_0.save(str_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.size()
    assert var_0 == 0
    var_1 = dict_cache_0.get(dict_cache_0, dict_cache_0)
    var_1.discard(dict_cache_0)

def test_case_13():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_1 = dict_cache_0.counter_set(bool_0, bool_0)
    assert var_1 == 1

def test_case_14():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.add(dict_cache_0, dict_cache_0)
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_0.container).__module__}.{type(var_0.container).__qualname__}' == 'builtins.dict'
    assert len(var_0.container) == 1
    assert var_0.capacity == 20000
    assert f'{type(var_0.sortedkeys).__module__}.{type(var_0.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.sortedkeys) == 1
    assert f'{type(var_0.expireable_key_ttls).__module__}.{type(var_0.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.expireable_key_ttls) == 0
    var_1 = dict_cache_0.get(dict_cache_0, dict_cache_0)

def test_case_15():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_decrement(dict_cache_0)
    str_0 = 'O!\x0cT]=5\tgvk]yrq=9}('
    with pytest.raises(ValueError):
        dict_cache_0.load(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_1 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_1 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    var_2 = dict_cache_0.counter_increment(var_0, bool_0)
    assert var_2 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_3 = dict_cache_0.counter_set(var_0, var_0, bool_0)
    assert var_3 == 1
    var_4 = dict_cache_0.counter_add(bool_0, var_3)
    assert var_4 == 1
    dict_cache_0.info()

@pytest.mark.xfail(strict=True)
def test_case_17():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.flush()
    dict_cache_0.save(var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.add(dict_cache_0, dict_cache_0)
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_0.container).__module__}.{type(var_0.container).__qualname__}' == 'builtins.dict'
    assert len(var_0.container) == 1
    assert var_0.capacity == 20000
    assert f'{type(var_0.sortedkeys).__module__}.{type(var_0.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.sortedkeys) == 1
    assert f'{type(var_0.expireable_key_ttls).__module__}.{type(var_0.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.expireable_key_ttls) == 0
    var_1 = dict_cache_0.add(dict_cache_0, dict_cache_0, extras=var_0)
    assert len(var_1.container) == 1
    assert var_1.capacity == 20000
    assert len(var_1.sortedkeys) == 1
    var_2 = var_0.flush()
    var_1.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_19():
    list_0 = []
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_rate(list_0, dict_cache_0, dict_cache_0)
    var_0.union()

@pytest.mark.xfail(strict=True)
def test_case_20():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    dict_cache_0.load(dict_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.size()
    assert var_0 == 0
    var_1 = dict_cache_0.get(dict_cache_0, dict_cache_0)
    var_2 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=var_1)
    var_3 = dict_cache_0.counter_get(dict_cache_0)
    assert var_3 == 0
    dict_cache_0.counter_increment(dict_cache_0, dict_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_decrement(dict_cache_0)
    str_0 = 'O!\x0cT]=5\tgvk]yrq=9}('
    dict_cache_0.load(str_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_set(bool_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_rate(bool_0, var_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_2 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_3 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_3 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    int_0 = 1501
    var_0.counter_set(var_3, int_0)

def test_case_24():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_decrement(dict_cache_0, var_0)
    assert var_1 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    var_2 = dict_cache_0.counter_set(var_1, var_1)
    assert var_2 == 0
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1

@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=dict_cache_0)
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_0.container).__module__}.{type(var_0.container).__qualname__}' == 'builtins.dict'
    assert len(var_0.container) == 1
    assert var_0.capacity == 20000
    assert f'{type(var_0.sortedkeys).__module__}.{type(var_0.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.sortedkeys) == 1
    assert f'{type(var_0.expireable_key_ttls).__module__}.{type(var_0.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.expireable_key_ttls) == 0
    var_1 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_1.container).__module__}.{type(var_1.container).__qualname__}' == 'builtins.dict'
    assert len(var_1.container) == 1
    assert var_1.capacity == 20000
    assert f'{type(var_1.sortedkeys).__module__}.{type(var_1.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_1.sortedkeys) == 1
    assert f'{type(var_1.expireable_key_ttls).__module__}.{type(var_1.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_1.expireable_key_ttls) == 0
    var_1.set(dict_cache_0, var_0, dict_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_1 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    var_1.counter_set(var_0, var_1, var_0)

def test_case_27():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_1 == 2
    var_2 = dict_cache_0.counter_decrement(dict_cache_0, var_0)
    assert var_2 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_3 = var_1.__lt__(var_2)
    assert var_3 is False
    var_4 = dict_cache_0.counter_rate(dict_cache_0, var_2)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_28():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    str_0 = 'O!\x0cT]=5\tgvk]yrq=9}('
    dict_cache_0.save(str_0, str_0)

def test_case_29():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    str_0 = 'O!\x0cT]=5\tgvk]yrq=9}('
    with pytest.raises(ValueError):
        dict_cache_0.load(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_set(bool_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_add(bool_0, bool_0)
    assert var_1 == 1
    var_2 = dict_cache_0.counter_decrement(var_0)
    var_3 = dict_cache_0.counter_rate(bool_0, var_0)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_4 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_5 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_5 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    var_6 = dict_cache_0.counter_set(var_0, var_3)
    assert var_6 == 0
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    dict_cache_1 = module_0.DictCache(var_5)
    assert dict_cache_1.capacity == 0
    var_7 = dict_cache_1.set(bool_0, var_2, var_6)
    var_8 = dict_cache_0.counter_increment(var_0, var_5)
    assert var_8 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    dict_cache_1.load(bool_0, bool_0)

def test_case_31():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    none_type_0 = None
    float_0 = 628.5
    var_0 = dict_cache_0.size()
    assert var_0 == 0
    with pytest.raises(ValueError):
        dict_cache_0.counter_set(none_type_0, float_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=dict_cache_0)
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_0.container).__module__}.{type(var_0.container).__qualname__}' == 'builtins.dict'
    assert len(var_0.container) == 1
    assert var_0.capacity == 20000
    assert f'{type(var_0.sortedkeys).__module__}.{type(var_0.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.sortedkeys) == 1
    assert f'{type(var_0.expireable_key_ttls).__module__}.{type(var_0.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.expireable_key_ttls) == 0
    var_1 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_1.container).__module__}.{type(var_1.container).__qualname__}' == 'builtins.dict'
    assert len(var_1.container) == 1
    assert var_1.capacity == 20000
    assert f'{type(var_1.sortedkeys).__module__}.{type(var_1.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_1.sortedkeys) == 1
    assert f'{type(var_1.expireable_key_ttls).__module__}.{type(var_1.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_1.expireable_key_ttls) == 0
    dict_0 = {dict_cache_0: var_1, var_0: dict_cache_0, var_1: var_1, dict_cache_0: var_0}
    dict_cache_0.set(dict_cache_0, dict_0, extras=var_0)

def test_case_33():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.set(dict_cache_0, bool_0)
    assert var_0 is True
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.delete(dict_cache_0)
    assert var_1 is True
    assert len(dict_cache_0.sortedkeys) == 0
    var_2 = dict_cache_0.counter_rate(dict_cache_0, dict_cache_0, absolute_rate=bool_0)
    var_3 = dict_cache_0.counter_get(var_2)
    assert var_3 == 0
    var_4 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_4 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_5 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_5 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    dict_cache_0.save(var_5, var_4)

def test_case_34():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.flush()
    bool_1 = True
    var_1 = dict_cache_0.counter_decrement(bool_1)
    dict_cache_1 = module_0.DictCache(bool_1)
    var_2 = dict_cache_1.counter_increment(bool_0, bool_1)
    assert var_2 == 1
    assert len(dict_cache_1.container) == 1
    assert len(dict_cache_1.sortedkeys) == 1
    assert len(dict_cache_1.expireable_key_ttls) == 1
    float_0 = -743.0
    with pytest.raises(ValueError):
        dict_cache_0.counter_add(bool_1, float_0)

def test_case_35():
    bool_0 = True
    int_0 = -2973
    str_0 = '1'
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    with pytest.raises(ValueError):
        dict_cache_0.counter_add(int_0, str_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_set(bool_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_rate(bool_0, var_0, dict_cache_0)
    var_2 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_2 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_3 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_3 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    dict_cache_1 = module_0.DictCache(var_3)
    assert dict_cache_1.capacity == 0
    int_0 = 1501
    var_4 = dict_cache_1.counter_set(var_3, int_0)
    assert var_4 == 1501
    var_5 = dict_cache_0.counter_increment(var_0, var_3)
    assert var_5 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    dict_cache_0.save(var_2, hmac_key=var_2)

def test_case_37():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_set(bool_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    blake2b_0 = module_1.blake2b()
    var_1 = dict_cache_0.counter_rate(bool_0, var_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_2 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_3 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_3 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    dict_cache_1 = module_0.DictCache(var_3)
    assert dict_cache_1.capacity == 0
    int_0 = -4458
    with pytest.raises(ValueError):
        dict_cache_1.counter_set(var_3, int_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.counter_get(dict_cache_0)
    assert var_0 == 0
    var_1 = dict_cache_0.counter_increment(dict_cache_0)
    assert var_1 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    float_0 = 86400000.0
    var_2 = dict_cache_0.delete(float_0)
    assert var_2 is False
    var_3 = dict_cache_0.counter_rate(dict_cache_0, float_0, absolute_rate=dict_cache_0)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1.info()

@pytest.mark.xfail(strict=True)
def test_case_39():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    int_0 = -665
    dict_cache_0.counter_increment(bool_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = True
    dict_cache_0 = module_0.DictCache(bool_0)
    var_0 = dict_cache_0.counter_set(bool_0, bool_0)
    assert var_0 == 1
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    var_1 = dict_cache_0.counter_decrement(var_0)
    var_2 = var_0.__le__(var_1)
    var_3 = dict_cache_0.counter_rate(bool_0, var_0)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = dict_cache_0.counter_increment(dict_cache_0, bool_0)
    assert var_4 == 1
    assert len(dict_cache_0.expireable_key_ttls) == 1
    var_5 = dict_cache_0.counter_decrement(dict_cache_0)
    assert var_5 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    assert len(dict_cache_0.expireable_key_ttls) == 0
    var_6 = dict_cache_0.counter_set(var_0, var_3)
    assert var_6 == 0
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    dict_cache_1 = module_0.DictCache(var_5)
    assert dict_cache_1.capacity == 0
    var_7 = dict_cache_1.set(bool_0, var_1, var_6)
    var_8 = var_0.__and__(var_4)
    assert var_8 == 1
    var_9 = dict_cache_0.counter_decrement(var_0, var_2)
    assert var_9 == 0
    assert dict_cache_0.container == {}
    assert len(dict_cache_0.sortedkeys) == 0
    var_6.save(var_1)

def test_case_41():
    int_0 = -2457
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    with pytest.raises(ValueError):
        dict_cache_0.set(int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    dict_cache_0 = module_0.DictCache()
    assert dict_cache_0.capacity == 20000
    var_0 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=dict_cache_0)
    assert len(dict_cache_0.container) == 1
    assert len(dict_cache_0.sortedkeys) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_0.container).__module__}.{type(var_0.container).__qualname__}' == 'builtins.dict'
    assert len(var_0.container) == 1
    assert var_0.capacity == 20000
    assert f'{type(var_0.sortedkeys).__module__}.{type(var_0.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.sortedkeys) == 1
    assert f'{type(var_0.expireable_key_ttls).__module__}.{type(var_0.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_0.expireable_key_ttls) == 0
    var_1 = dict_cache_0.set(dict_cache_0, dict_cache_0, add_ifnotexists=var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'authnzerver.dictcache.DictCache'
    assert f'{type(var_1.container).__module__}.{type(var_1.container).__qualname__}' == 'builtins.dict'
    assert len(var_1.container) == 1
    assert var_1.capacity == 20000
    assert f'{type(var_1.sortedkeys).__module__}.{type(var_1.sortedkeys).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_1.sortedkeys) == 1
    assert f'{type(var_1.expireable_key_ttls).__module__}.{type(var_1.expireable_key_ttls).__qualname__}' == 'sortedcontainers.sortedset.SortedSet'
    assert len(var_1.expireable_key_ttls) == 0
    dict_0 = var_1.get(var_0, var_0, var_0)
    dict_cache_0.set(dict_cache_0, dict_0, extras=var_0)