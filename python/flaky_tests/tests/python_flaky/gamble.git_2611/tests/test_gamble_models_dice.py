# Automatically generated by Pynguin.
import pytest
import gamble.models.dice as module_0

def test_case_0():
    bool_0 = False
    with pytest.raises(Exception):
        module_0.RiggedDie(bool_0)

def test_case_1():
    die_0 = module_0.Die()
    assert f'{type(die_0).__module__}.{type(die_0).__qualname__}' == 'gamble.models.dice.Die'
    assert die_0.sides == 6
    assert die_0.negative is False
    assert die_0.multiplier == 1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.net_sides).__module__}.{type(module_0.Die.net_sides).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'

def test_case_2():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    str_0 = dice_0.__str__()
    assert str_0 == '{\n<d6 Die>\n<d6 Die>\n}'

@pytest.mark.xfail(strict=True)
def test_case_3():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    list_0 = dice_0.roll_many()
    assert dice_0.rolls == 2
    dice_1 = module_0.Dice()
    assert len(dice_1.dice) == 2
    assert dice_1.rolls == 0
    int_0 = dice_1.roll()
    assert dice_1.rolls == 1
    tuple_0 = dice_1.min_of()
    assert dice_1.rolls == 3
    list_1 = dice_1.roll_many()
    assert dice_1.rolls == 5
    int_1 = 1755
    tuple_1 = dice_1.min_of()
    assert dice_1.rolls == 7
    rigged_die_0 = module_0.RiggedDie(int_1)
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 1755
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    tuple_2 = dice_1.max_of()
    assert dice_1.rolls == 9
    bool_0 = rigged_die_0.__lt__(rigged_die_0)
    assert bool_0 is False
    bool_1 = rigged_die_0.__le__(rigged_die_0)
    assert bool_1 is True
    str_0 = rigged_die_0.__repr__()
    assert str_0 == '<d1755 Die>'
    str_1 = 't\\C~;\tSM .\x0b\r1}wn2pq'
    str_2 = dice_1.__str__()
    assert str_2 == '{\n<d6 Die>\n<d6 Die>\n}'
    module_0.RiggedDie(str_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -574
    die_0 = module_0.Die(int_0)
    assert f'{type(die_0).__module__}.{type(die_0).__qualname__}' == 'gamble.models.dice.Die'
    assert die_0.sides == 574
    assert die_0.negative is True
    assert die_0.multiplier == -1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.net_sides).__module__}.{type(module_0.Die.net_sides).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'
    rigged_die_0 = module_0.RiggedDie()
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 6
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    bool_0 = rigged_die_0.__ge__(die_0)
    assert bool_0 is True
    str_0 = '3M!Bby{\n|Y/Kew4.KP~'
    module_0.Dice(str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    rigged_die_0 = module_0.RiggedDie()
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 6
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    int_0 = rigged_die_0.roll()
    assert rigged_die_0.rolls == 1
    str_0 = rigged_die_0.__str__()
    assert str_0 == '<d6 Die>'
    bool_0 = rigged_die_0.__gt__(rigged_die_0)
    assert bool_0 is False
    str_1 = rigged_die_0.__repr__()
    assert str_1 == '<d6 Die>'
    int_1 = rigged_die_0.roll()
    assert rigged_die_0.rolls == 2
    str_2 = rigged_die_0.__str__()
    assert str_2 == '<d6 Die>'
    str_3 = rigged_die_0.__repr__()
    assert str_3 == '<d6 Die>'
    int_2 = 244
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    var_0 = dice_0.create_die(int_2, int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert var_0.sides == 244
    assert var_0.negative is False
    assert var_0.multiplier == 1
    assert var_0.rolls == 0
    bool_1 = var_0.__lt__(rigged_die_0)
    assert bool_1 is False
    bool_2 = rigged_die_0.__ge__(rigged_die_0)
    assert bool_2 is True
    bool_3 = rigged_die_0.__gt__(rigged_die_0)
    assert bool_3 is False
    int_3 = 2077
    bool_4 = rigged_die_0.__lt__(rigged_die_0)
    rigged_die_0.__le__(int_3)

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -175
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    dice_0.create_die(int_0, int_0)

def test_case_7():
    rigged_die_0 = module_0.RiggedDie()
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 6
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0

@pytest.mark.xfail(strict=True)
def test_case_8():
    rigged_die_0 = module_0.RiggedDie()
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 6
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    int_0 = rigged_die_0.roll()
    assert rigged_die_0.rolls == 1
    str_0 = '\n        @cc 1\n        @desc check if the hand is a straight flush\n        @ret true if straight flush\n        '
    int_1 = rigged_die_0.roll()
    assert int_1 == 4
    assert rigged_die_0.rolls == 2
    module_0.Dice(str_0)

def test_case_9():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'

def test_case_10():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    tuple_0 = dice_0.max_of()
    assert dice_0.rolls == 2
    list_0 = dice_0.roll_many()
    assert dice_0.rolls == 4
    bool_0 = False
    with pytest.raises(Exception):
        module_0.Die(bool_0)

def test_case_11():
    rigged_die_0 = module_0.RiggedDie()
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 6
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    str_0 = rigged_die_0.__str__()
    assert str_0 == '<d6 Die>'
    bool_0 = rigged_die_0.__gt__(rigged_die_0)
    assert bool_0 is False
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    str_1 = dice_0.__str__()
    assert str_1 == '{\n<d6 Die>\n<d6 Die>\n}'

def test_case_12():
    bool_0 = True
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    str_0 = dice_0.__repr__()
    assert str_0 == '{\n<d6 Die>\n<d6 Die>\n}'
    str_1 = dice_0.__str__()
    assert str_1 == '{\n<d6 Die>\n<d6 Die>\n}'
    with pytest.raises(Exception):
        module_0.RiggedDie(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    tuple_0 = dice_0.min_of(bool_0)
    assert dice_0.rolls == 1
    dice_1 = module_0.Dice()
    assert len(dice_1.dice) == 2
    assert dice_1.rolls == 0
    int_0 = dice_1.roll()
    assert dice_1.rolls == 1
    dice_2 = module_0.Dice()
    assert len(dice_2.dice) == 2
    assert dice_2.rolls == 0
    tuple_1 = dice_2.min_of()
    assert dice_2.rolls == 2
    str_0 = 'K:t=/'
    die_0 = module_0.Die()
    assert die_0.sides == 6
    assert die_0.negative is False
    assert die_0.multiplier == 1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'
    str_1 = die_0.__str__()
    assert str_1 == '<d6 Die>'
    module_0.Dice(str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -190
    rigged_die_0 = module_0.RiggedDie(int_0)
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 190
    assert rigged_die_0.negative is True
    assert rigged_die_0.multiplier == -1
    assert rigged_die_0.rolls == 0
    int_1 = rigged_die_0.roll()
    assert rigged_die_0.rolls == 1
    bytes_0 = b'\xfe\xeehs\xc1c'
    die_0 = module_0.Die()
    assert die_0.sides == 6
    assert die_0.negative is False
    assert die_0.multiplier == 1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.net_sides).__module__}.{type(module_0.Die.net_sides).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'
    die_0.__le__(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 101
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    dice_0.create_die(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'MV3'
    module_0.Dice(str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    die_0 = module_0.Die()
    assert f'{type(die_0).__module__}.{type(die_0).__qualname__}' == 'gamble.models.dice.Die'
    assert die_0.sides == 6
    assert die_0.negative is False
    assert die_0.multiplier == 1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.net_sides).__module__}.{type(module_0.Die.net_sides).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'
    rigged_die_0 = module_0.RiggedDie()
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 6
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    bool_0 = rigged_die_0.__gt__(die_0)
    assert bool_0 is False
    str_0 = 'd8-b,`%q2OWejC46wSj'
    int_0 = 2521
    module_0.Dice(str_0, int_0)

def test_case_18():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    list_0 = dice_0.roll_many()
    assert dice_0.rolls == 2
    str_0 = dice_0.__str__()
    assert str_0 == '{\n<d6 Die>\n<d6 Die>\n}'
    dice_1 = module_0.Dice()
    assert len(dice_1.dice) == 2
    assert dice_1.rolls == 0
    int_0 = dice_1.roll()
    assert dice_1.rolls == 1
    tuple_0 = dice_1.min_of()
    assert dice_1.rolls == 3
    tuple_1 = dice_1.min_of()
    assert dice_1.rolls == 5
    list_1 = dice_1.roll_many()
    assert dice_1.rolls == 7
    int_1 = 1735
    rigged_die_0 = module_0.RiggedDie(int_1)
    assert f'{type(rigged_die_0).__module__}.{type(rigged_die_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.sides == 1735
    assert rigged_die_0.negative is False
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    tuple_2 = dice_1.max_of()
    assert dice_1.rolls == 9
    bool_0 = rigged_die_0.__lt__(rigged_die_0)
    assert bool_0 is False
    bool_1 = True
    bool_2 = rigged_die_0.__le__(rigged_die_0)
    assert bool_2 is True
    str_1 = rigged_die_0.__repr__()
    assert str_1 == '<d1735 Die>'
    str_2 = dice_1.__str__()
    assert str_2 == '{\n<d6 Die>\n<d6 Die>\n}'
    var_0 = dice_0.create_die(int_1, bool_1)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert var_0.rigged_factor is True
    assert var_0.sides == 1735
    assert var_0.negative is False
    assert var_0.multiplier == 1
    assert var_0.rolls == 0
    die_0 = module_0.Die()
    assert die_0.sides == 6
    assert die_0.negative is False
    assert die_0.multiplier == 1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'
    int_2 = -280
    var_1 = dice_0.create_die(int_2, bool_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert var_1.rigged_factor is True
    assert var_1.negative is True
    assert var_1.multiplier == -1
    assert var_1.rolls == 0
    str_3 = var_1.__repr__()
    assert str_3 == '<-d280 Die>'
    str_4 = var_0.__repr__()
    assert str_4 == '<d1735 Die>'
    dice_2 = module_0.Dice()
    assert len(dice_2.dice) == 2
    assert dice_2.rolls == 0
    bool_3 = var_0.__le__(die_0)
    assert bool_3 is False
    die_1 = module_0.Die()
    assert die_1.sides == 6
    assert die_1.negative is False
    assert die_1.multiplier == 1
    assert die_1.rolls == 0
    list_2 = dice_1.roll_many()
    assert dice_1.rolls == 11
    str_5 = dice_0.__repr__()
    assert str_5 == '{\n<d6 Die>\n<d6 Die>\n}'

@pytest.mark.xfail(strict=True)
def test_case_19():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    list_0 = dice_0.roll_many()
    assert dice_0.rolls == 2
    str_0 = dice_0.__str__()
    assert str_0 == '{\n<d6 Die>\n<d6 Die>\n}'
    dice_1 = module_0.Dice()
    assert len(dice_1.dice) == 2
    assert dice_1.rolls == 0
    int_0 = dice_1.roll()
    assert dice_1.rolls == 1
    tuple_0 = dice_1.min_of()
    assert dice_1.rolls == 3
    int_1 = 183
    var_0 = dice_1.create_die(int_1, int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert var_0.sides == 183
    assert var_0.negative is False
    assert var_0.multiplier == 1
    assert var_0.rolls == 0
    str_1 = var_0.__repr__()
    assert str_1 == '<d183 Die>'
    tuple_1 = dice_0.max_of()
    assert dice_0.rolls == 4
    list_1 = dice_1.roll_many()
    assert dice_1.rolls == 5
    tuple_2 = dice_1.min_of()
    assert dice_1.rolls == 7
    var_1 = dice_0.create_die(int_0, int_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'gamble.models.dice.RiggedDie'
    assert var_1.negative is False
    assert var_1.multiplier == 1
    assert var_1.rolls == 0
    tuple_3 = dice_1.max_of()
    assert dice_1.rolls == 9
    bool_0 = var_1.__lt__(var_1)
    assert bool_0 is False
    bool_1 = var_1.__le__(var_1)
    assert bool_1 is True
    str_2 = var_1.__repr__()
    str_3 = dice_1.__str__()
    assert str_3 == '{\n<d6 Die>\n<d6 Die>\n}'
    dice_2 = module_0.Dice()
    assert len(dice_2.dice) == 2
    assert dice_2.rolls == 0
    int_2 = 3485
    rigged_die_0 = module_0.RiggedDie(int_2)
    assert rigged_die_0.rigged_factor == 50
    assert rigged_die_0.multiplier == 1
    assert rigged_die_0.rolls == 0
    bool_2 = var_0.__lt__(rigged_die_0)
    assert bool_2 is True
    die_0 = module_0.Die()
    assert die_0.sides == 6
    assert die_0.multiplier == 1
    assert die_0.rolls == 0
    assert f'{type(module_0.Die.max).__module__}.{type(module_0.Die.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Die.min).__module__}.{type(module_0.Die.min).__qualname__}' == 'builtins.property'
    rigged_die_1 = module_0.RiggedDie()
    assert rigged_die_1.rigged_factor == 50
    assert rigged_die_1.sides == 6
    assert rigged_die_1.multiplier == 1
    assert rigged_die_1.rolls == 0
    bool_3 = rigged_die_1.__le__(var_0)
    assert bool_3 is True
    die_1 = module_0.Die()
    assert die_1.sides == 6
    assert die_1.multiplier == 1
    assert die_1.rolls == 0
    dice_2.roll_many(die_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    dice_0 = module_0.Dice()
    assert f'{type(dice_0).__module__}.{type(dice_0).__qualname__}' == 'gamble.models.dice.Dice'
    assert dice_0.d_strings == ['2d6']
    assert f'{type(dice_0.dice).__module__}.{type(dice_0.dice).__qualname__}' == 'builtins.list'
    assert len(dice_0.dice) == 2
    assert dice_0.bonuses == []
    assert dice_0.rolls == 0
    assert f'{type(module_0.Dice.parts).__module__}.{type(module_0.Dice.parts).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.max).__module__}.{type(module_0.Dice.max).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Dice.min).__module__}.{type(module_0.Dice.min).__qualname__}' == 'builtins.property'
    str_0 = dice_0.__str__()
    assert str_0 == '{\n<d6 Die>\n<d6 Die>\n}'
    str_1 = dice_0.__repr__()
    assert str_1 == '{\n<d6 Die>\n<d6 Die>\n}'
    dice_1 = module_0.Dice()
    assert len(dice_1.dice) == 2
    assert dice_1.rolls == 0
    str_2 = 'D-r\x0cNu'
    list_0 = dice_1.roll_many()
    assert dice_1.rolls == 2
    module_0.Dice(str_2)