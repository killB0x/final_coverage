# Automatically generated by Pynguin.
import pytest
import gamble.models.cards as module_0
import gamble.errors as module_1
import collections as module_2

def test_case_0():
    deck_0 = module_0.Deck()
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'

def test_case_1():
    card_0 = module_0.Card()
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    bool_0 = card_0.__le__(card_0)
    assert bool_0 is True
    bool_1 = card_0.__eq__(card_0)

def test_case_2():
    card_0 = module_0.Card()
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    bool_0 = card_0.__ge__(card_0)
    assert bool_0 is True
    str_0 = card_0.__repr__()
    assert str_0 == '<Card:A♠>'
    card_1 = module_0.Card()
    bool_1 = card_0.__le__(card_0)
    list_0 = [card_0, card_0, card_0]
    hand_0 = module_0.Hand(list_0)
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    list_1 = [card_0, card_0, card_0]
    str_1 = card_0.__str__()
    assert str_1 == 'A♠'
    hand_1 = module_0.Hand(list_1)

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    card_0 = module_0.Card()
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    bool_0 = card_0.__eq__(list_0)
    assert bool_0 is False
    hand_0 = module_0.Hand(list_0)
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    card_0.__gt__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    deck_0 = module_0.Deck()
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    none_type_0 = deck_0.shuffle()
    assert deck_0.shuffles == 2
    hand_0 = deck_0.draw_hand()
    assert len(deck_0.cards) == 47
    assert deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    dict_0 = {}
    value_0 = module_0.Value(**dict_0)
    deck_0.draw(deck_0)

def test_case_5():
    rank_0 = module_0.Rank()
    bool_0 = True
    deck_0 = module_0.Deck(shuffle=bool_0)
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    str_0 = deck_0.__repr__()
    assert str_0 == '<Deck[52]>'
    none_type_0 = deck_0.shuffle()
    assert deck_0.shuffles == 2
    bool_1 = deck_0.__contains__(bool_0)
    hand_0 = deck_0.draw_hand(bool_0)
    assert len(deck_0.cards) == 51
    assert deck_0.draws == 1
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 1
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    str_1 = hand_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    rank_0 = module_0.Rank()
    bool_0 = False
    deck_0 = module_0.Deck(shuffle=bool_0)
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 0
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    str_0 = deck_0.__repr__()
    assert str_0 == '<Deck[52]>'
    none_type_0 = deck_0.shuffle()
    assert deck_0.shuffles == 1
    bool_1 = deck_0.__contains__(bool_0)
    hand_0 = deck_0.draw_hand(bool_0)
    assert len(hand_0) == 0
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    hand_0.__repr__()

def test_case_7():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 23
    assert euchre_deck_0.draws == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 18
    assert euchre_deck_0.draws == 6
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    bool_0 = hand_0.__lt__(hand_0)
    assert bool_0 is False
    str_0 = euchre_deck_0.__repr__()
    assert str_0 == '<Deck[18]>'
    str_1 = euchre_deck_0.__str__()
    assert str_1 == '<Deck[18]>'
    euchre_deck_1 = module_0.EuchreDeck()
    assert len(euchre_deck_1.cards) == 24
    assert euchre_deck_1.shuffles == 1
    assert euchre_deck_1.draws == 0
    bool_1 = euchre_deck_0.__contains__(str_0)
    int_0 = hand_0.__len__()
    assert int_0 == 5

def test_case_8():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0

def test_case_9():
    rank_0 = module_0.Rank()
    bool_0 = True
    deck_0 = module_0.Deck(shuffle=bool_0)
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    str_0 = deck_0.__repr__()
    assert str_0 == '<Deck[52]>'
    none_type_0 = deck_0.shuffle()
    assert deck_0.shuffles == 2
    bool_1 = deck_0.__contains__(bool_0)

def test_case_10():
    rank_0 = module_0.Rank()

def test_case_11():
    card_0 = module_0.Card()
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    bool_0 = card_0.__gt__(card_0)
    assert bool_0 is False
    bool_1 = card_0.__eq__(card_0)
    assert bool_1 is True
    str_0 = card_0.__repr__()
    assert str_0 == '<Card:A♠>'
    bool_2 = card_0.__le__(card_0)
    assert bool_2 is True
    deck_0 = module_0.Deck()
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    bool_3 = deck_0.__contains__(deck_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'spades'
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: str_0}
    invalid_card_0 = module_1.InvalidCard(**dict_0)
    module_0.Hand(invalid_card_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    bool_0 = hand_0.__lt__(hand_0)
    assert bool_0 is False
    str_0 = hand_0.__str__()
    str_1 = euchre_deck_0.__repr__()
    assert str_1 == '<Deck[19]>'
    str_2 = euchre_deck_0.__str__()
    assert str_2 == '<Deck[19]>'
    str_3 = euchre_deck_0.__str__()
    assert str_3 == '<Deck[19]>'
    euchre_deck_1 = module_0.EuchreDeck()
    assert len(euchre_deck_1.cards) == 24
    assert euchre_deck_1.shuffles == 1
    assert euchre_deck_1.draws == 0
    bool_1 = euchre_deck_0.__contains__(str_1)
    str_4 = euchre_deck_0.__repr__()
    assert str_4 == '<Deck[19]>'
    none_type_0 = euchre_deck_0.shuffle(bool_0)
    hand_0.__gt__(str_4)

@pytest.mark.xfail(strict=True)
def test_case_14():
    card_0 = module_0.Card()
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    counter_0 = module_2.Counter()
    bool_0 = card_0.__lt__(card_0)
    assert bool_0 is False
    deck_0 = module_0.Deck()
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    str_0 = deck_0.__str__()
    assert str_0 == '<Deck[52]>'
    var_0 = counter_0.__iadd__(counter_0)
    str_1 = var_0.__str__()
    bool_1 = deck_0.__contains__(var_0)
    bool_2 = card_0.__le__(card_0)
    assert bool_2 is True
    list_0 = [card_0, card_0]
    hand_0 = module_0.Hand(list_0)
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    int_0 = hand_0.__len__()
    deck_1 = module_0.Deck(list_0)
    assert deck_1.shuffles == 1
    assert deck_1.draws == 0
    hand_1 = module_0.Hand(list_0)
    bool_3 = card_0.__eq__(deck_1)
    none_type_0 = None
    hand_0.__gt__(none_type_0)

def test_case_15():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 23
    assert euchre_deck_0.draws == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 18
    assert euchre_deck_0.draws == 6
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    bool_0 = hand_0.__lt__(hand_0)
    assert bool_0 is False
    str_0 = hand_0.__str__()
    str_1 = euchre_deck_0.__repr__()
    assert str_1 == '<Deck[18]>'
    str_2 = euchre_deck_0.__str__()
    assert str_2 == '<Deck[18]>'
    str_3 = euchre_deck_0.__str__()
    assert str_3 == '<Deck[18]>'
    euchre_deck_1 = module_0.EuchreDeck()
    assert len(euchre_deck_1.cards) == 24
    assert euchre_deck_1.shuffles == 1
    assert euchre_deck_1.draws == 0
    bool_1 = euchre_deck_0.__contains__(str_1)
    euchre_deck_2 = module_0.EuchreDeck()
    assert len(euchre_deck_2.cards) == 24
    assert euchre_deck_2.shuffles == 1
    assert euchre_deck_2.draws == 0
    int_0 = hand_0.__len__()
    assert int_0 == 5

@pytest.mark.xfail(strict=True)
def test_case_16():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    none_type_0 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 2
    bool_0 = euchre_deck_0.__contains__(euchre_deck_0)
    none_type_1 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 3
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 18
    assert euchre_deck_0.draws == 6
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    int_0 = hand_0.__len__()
    assert int_0 == 5
    str_0 = var_0.__str__()
    var_1 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 17
    assert euchre_deck_0.draws == 7
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_1.suit).__module__}.{type(var_1.suit).__qualname__}' == 'gamble.models.cards.Suit'
    bool_1 = var_1.__le__(var_1)
    assert bool_1 is True
    str_1 = 'don(WV\n>3[t60KD5Qo'
    dict_0 = {str_1: none_type_0, str_0: none_type_0}
    int_1 = hand_0.__len__()
    assert int_1 == 5
    suit_0 = module_0.Suit(**dict_0)
    str_2 = hand_0.__repr__()
    list_0 = []
    hand_0.__lt__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    card_0 = module_0.Card()
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    bytes_0 = b'\xa9\x9f\xd4?\x16a\xfe\x8b\xbbr'
    counter_0 = module_2.Counter()
    bool_0 = card_0.__lt__(card_0)
    assert bool_0 is False
    deck_0 = module_0.Deck()
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    str_0 = deck_0.__str__()
    assert str_0 == '<Deck[52]>'
    str_1 = counter_0.__repr__()
    bool_1 = deck_0.__contains__(bytes_0)
    bool_2 = card_0.__le__(card_0)
    assert bool_2 is True
    list_0 = [card_0, card_0, card_0, card_0]
    hand_0 = module_0.Hand(list_0)
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    int_0 = hand_0.__len__()
    deck_1 = module_0.Deck(list_0)
    assert deck_1.shuffles == 1
    assert deck_1.draws == 0
    bool_3 = card_0.__eq__(deck_1)
    none_type_0 = None
    hand_0.__gt__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    bool_0 = hand_0.__lt__(hand_0)
    assert bool_0 is False
    str_0 = hand_0.__str__()
    str_1 = hand_0.__str__()
    str_2 = euchre_deck_0.__repr__()
    assert str_2 == '<Deck[19]>'
    str_3 = euchre_deck_0.__str__()
    assert str_3 == '<Deck[19]>'
    str_4 = euchre_deck_0.__str__()
    assert str_4 == '<Deck[19]>'
    euchre_deck_1 = module_0.EuchreDeck()
    assert len(euchre_deck_1.cards) == 24
    assert euchre_deck_1.shuffles == 1
    assert euchre_deck_1.draws == 0
    bool_1 = euchre_deck_0.__contains__(str_2)
    str_5 = euchre_deck_0.__repr__()
    assert str_5 == '<Deck[19]>'
    none_type_0 = euchre_deck_0.shuffle(bool_0)
    counter_0 = module_2.Counter()
    var_0 = counter_0.__delitem__(str_1)
    str_6 = var_0.__repr__()
    hand_0.__gt__(str_5)

def test_case_19():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    bool_0 = hand_0.__lt__(hand_0)
    assert bool_0 is False
    str_0 = hand_0.__str__()
    str_1 = euchre_deck_0.__repr__()
    assert str_1 == '<Deck[19]>'
    str_2 = euchre_deck_0.__str__()
    assert str_2 == '<Deck[19]>'
    str_3 = euchre_deck_0.__str__()
    assert str_3 == '<Deck[19]>'
    euchre_deck_1 = module_0.EuchreDeck()
    assert len(euchre_deck_1.cards) == 24
    assert euchre_deck_1.shuffles == 1
    assert euchre_deck_1.draws == 0
    bool_1 = euchre_deck_0.__contains__(str_1)
    str_4 = euchre_deck_0.__repr__()
    assert str_4 == '<Deck[19]>'
    none_type_0 = euchre_deck_0.shuffle(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    none_type_0 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 2
    bool_0 = euchre_deck_0.__contains__(euchre_deck_0)
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 23
    assert euchre_deck_0.draws == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    bool_1 = euchre_deck_0.__contains__(var_0)
    assert bool_1 is False
    bool_2 = var_0.__ge__(var_0)
    assert bool_2 is True
    none_type_1 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 3
    var_1 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 22
    assert euchre_deck_0.draws == 2
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_1.suit).__module__}.{type(var_1.suit).__qualname__}' == 'gamble.models.cards.Suit'
    bool_3 = var_1.__le__(var_1)
    list_0 = []
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 17
    assert euchre_deck_0.draws == 7
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    hand_1 = module_0.Hand(list_0)
    deck_0 = module_0.Deck()
    assert f'{type(deck_0).__module__}.{type(deck_0).__qualname__}' == 'gamble.models.cards.Deck'
    assert f'{type(deck_0.cards).__module__}.{type(deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(deck_0.cards) == 52
    assert deck_0.shuffles == 1
    assert deck_0.draws == 0
    assert f'{type(module_0.Deck.top).__module__}.{type(module_0.Deck.top).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.bottom).__module__}.{type(module_0.Deck.bottom).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Deck.cards_left).__module__}.{type(module_0.Deck.cards_left).__qualname__}' == 'builtins.property'
    module_0.Hand(var_1)

@pytest.mark.xfail(strict=True)
def test_case_21():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    none_type_0 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 2
    none_type_1 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 3
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 18
    assert euchre_deck_0.draws == 6
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    int_0 = hand_0.__len__()
    assert int_0 == 5
    str_0 = var_0.__str__()
    bool_0 = var_0.__le__(var_0)
    assert bool_0 is True
    int_1 = hand_0.__len__()
    assert int_1 == 5
    str_1 = hand_0.__repr__()
    hand_0.__lt__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    none_type_0 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 2
    bool_0 = euchre_deck_0.__contains__(euchre_deck_0)
    none_type_1 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 3
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 18
    assert euchre_deck_0.draws == 6
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    int_0 = hand_0.__len__()
    assert int_0 == 5
    bool_1 = euchre_deck_0.__contains__(var_0)
    assert bool_1 is False
    bool_2 = var_0.__ge__(var_0)
    assert bool_2 is True
    str_0 = var_0.__str__()
    none_type_2 = euchre_deck_0.shuffle(bool_1)
    none_type_3 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 4
    var_1 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 17
    assert euchre_deck_0.draws == 7
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_1.suit).__module__}.{type(var_1.suit).__qualname__}' == 'gamble.models.cards.Suit'
    bool_3 = var_1.__le__(var_1)
    str_1 = 'don(WV\n>3[t60KD5Qo'
    bool_4 = var_1.__ge__(var_0)
    dict_0 = {str_1: none_type_0, str_0: none_type_0}
    int_1 = hand_0.__len__()
    assert int_1 == 5
    suit_0 = module_0.Suit(**dict_0)
    str_2 = hand_0.__repr__()
    list_0 = []
    hand_0.__lt__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    euchre_deck_0 = module_0.EuchreDeck()
    assert f'{type(euchre_deck_0).__module__}.{type(euchre_deck_0).__qualname__}' == 'gamble.models.cards.EuchreDeck'
    assert f'{type(euchre_deck_0.cards).__module__}.{type(euchre_deck_0.cards).__qualname__}' == 'builtins.list'
    assert len(euchre_deck_0.cards) == 24
    assert euchre_deck_0.shuffles == 1
    assert euchre_deck_0.draws == 0
    bool_0 = euchre_deck_0.__contains__(euchre_deck_0)
    hand_0 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 19
    assert euchre_deck_0.draws == 5
    assert f'{type(hand_0).__module__}.{type(hand_0).__qualname__}' == 'gamble.models.cards.Hand'
    assert len(hand_0) == 5
    assert f'{type(module_0.Hand.get).__module__}.{type(module_0.Hand.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Hand.rank).__module__}.{type(module_0.Hand.rank).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight_flush).__module__}.{type(module_0.Hand.is_straight_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_four_of_a_kind).__module__}.{type(module_0.Hand.is_four_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_full_house).__module__}.{type(module_0.Hand.is_full_house).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_flush).__module__}.{type(module_0.Hand.is_flush).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_straight).__module__}.{type(module_0.Hand.is_straight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_three_of_a_kind).__module__}.{type(module_0.Hand.is_three_of_a_kind).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_two_pair).__module__}.{type(module_0.Hand.is_two_pair).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Hand.is_one_pair).__module__}.{type(module_0.Hand.is_one_pair).__qualname__}' == 'builtins.property'
    var_0 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 18
    assert euchre_deck_0.draws == 6
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_0.suit).__module__}.{type(var_0.suit).__qualname__}' == 'gamble.models.cards.Suit'
    assert module_0.Card.BLACK == 0
    assert module_0.Card.RED == 1
    assert f'{type(module_0.Card.get).__module__}.{type(module_0.Card.get).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.Card.color).__module__}.{type(module_0.Card.color).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.full_name).__module__}.{type(module_0.Card.full_name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_black).__module__}.{type(module_0.Card.is_black).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.is_red).__module__}.{type(module_0.Card.is_red).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Card.unicode).__module__}.{type(module_0.Card.unicode).__qualname__}' == 'builtins.property'
    int_0 = hand_0.__len__()
    assert int_0 == 5
    bool_1 = euchre_deck_0.__contains__(var_0)
    assert bool_1 is False
    bool_2 = var_0.__ge__(var_0)
    assert bool_2 is True
    str_0 = var_0.__str__()
    none_type_0 = euchre_deck_0.shuffle()
    assert euchre_deck_0.shuffles == 2
    var_1 = euchre_deck_0.draw()
    assert len(euchre_deck_0.cards) == 17
    assert euchre_deck_0.draws == 7
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'gamble.models.cards.Card'
    assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'gamble.models.cards.Value'
    assert f'{type(var_1.suit).__module__}.{type(var_1.suit).__qualname__}' == 'gamble.models.cards.Suit'
    bool_3 = var_0.__le__(var_1)
    assert bool_3 is False
    str_1 = 'don(WV\n>3[t60KD5Qo'
    dict_0 = {str_1: none_type_0, str_0: none_type_0}
    int_1 = hand_0.__len__()
    assert int_1 == 5
    euchre_deck_1 = module_0.EuchreDeck()
    assert len(euchre_deck_1.cards) == 24
    assert euchre_deck_1.shuffles == 1
    assert euchre_deck_1.draws == 0
    suit_0 = module_0.Suit(**dict_0)
    hand_1 = euchre_deck_0.draw_hand()
    assert len(euchre_deck_0.cards) == 12
    assert euchre_deck_0.draws == 12
    assert len(hand_1) == 5
    module_0.Hand(var_1)