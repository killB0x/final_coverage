# Automatically generated by Pynguin.
import pytest
import cachelock as module_0
import inspect as module_1
import re as module_2
import ast as module_3

def test_case_0():
    memory_cache_0 = module_0.MemoryCache()
    assert f'{type(memory_cache_0).__module__}.{type(memory_cache_0).__qualname__}' == 'cachelock.MemoryCache'

def test_case_1():
    memory_cache_0 = module_0.MemoryCache()
    assert f'{type(memory_cache_0).__module__}.{type(memory_cache_0).__qualname__}' == 'cachelock.MemoryCache'
    var_0 = memory_cache_0.set(memory_cache_0, memory_cache_0)
    lock_error_0 = module_0.LockError()
    var_1 = memory_cache_0.delete(memory_cache_0)
    with pytest.raises(AttributeError):
        module_1.getattr_static(memory_cache_0, lock_error_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    memory_cache_0 = module_0.MemoryCache()
    assert f'{type(memory_cache_0).__module__}.{type(memory_cache_0).__qualname__}' == 'cachelock.MemoryCache'
    lock_error_0 = module_0.LockError()
    var_0 = module_1.formatannotation(lock_error_0)
    var_1 = var_0.__le__(lock_error_0)
    var_2 = memory_cache_0.delete(var_1)
    lock_0 = module_0.Lock(memory_cache_0)
    assert f'{type(lock_0.cache).__module__}.{type(lock_0.cache).__qualname__}' == 'cachelock.MemoryCache'
    var_3 = memory_cache_0.set(memory_cache_0, lock_error_0)
    var_4 = memory_cache_0.get(lock_0)
    var_5 = lock_0.__enter__()
    var_4.visit_Import(lock_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'p(:5,|\tmxAPk&;"*[K\x0c'
    var_0 = module_0.once(str_0)
    lock_0 = module_0.Lock(var_0, var_0)
    lock_0.__enter__()

def test_case_4():
    lock_error_0 = module_0.LockError()
    lock_0 = module_0.Lock(lock_error_0)
    assert f'{type(lock_0).__module__}.{type(lock_0).__qualname__}' == 'cachelock.Lock'
    assert f'{type(lock_0.key).__module__}.{type(lock_0.key).__qualname__}' == 'cachelock.LockError'
    assert f'{type(lock_0.cache).__module__}.{type(lock_0.cache).__qualname__}' == 'cachelock.MemoryCache'

def test_case_5():
    bool_0 = False
    lock_0 = module_0.Lock(bool_0)
    assert f'{type(lock_0).__module__}.{type(lock_0).__qualname__}' == 'cachelock.Lock'
    assert lock_0.key is False
    assert f'{type(lock_0.cache).__module__}.{type(lock_0.cache).__qualname__}' == 'cachelock.MemoryCache'
    with pytest.raises(module_0.LockError):
        var_0 = lock_0.__enter__()
    memory_cache_0 = module_0.MemoryCache()
    module_2.split(memory_cache_0, memory_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    operator_0 = module_3.operator()
    memory_cache_0 = module_0.MemoryCache()
    assert f'{type(memory_cache_0).__module__}.{type(memory_cache_0).__qualname__}' == 'cachelock.MemoryCache'
    var_0 = module_0.once(operator_0, raise_if_lock=operator_0)
    var_0.__enter__()

def test_case_7():
    bool_0 = False
    lock_0 = module_0.Lock(bool_0)
    assert f'{type(lock_0).__module__}.{type(lock_0).__qualname__}' == 'cachelock.Lock'
    assert lock_0.key is False
    assert f'{type(lock_0.cache).__module__}.{type(lock_0.cache).__qualname__}' == 'cachelock.MemoryCache'
    with pytest.raises(module_0.LockError):
        lock_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    lock_0 = module_0.Lock(bool_0)
    assert f'{type(lock_0).__module__}.{type(lock_0).__qualname__}' == 'cachelock.Lock'
    assert lock_0.key is False
    assert f'{type(lock_0.cache).__module__}.{type(lock_0.cache).__qualname__}' == 'cachelock.MemoryCache'
    none_type_0 = None
    var_0 = lock_0.__exit__(lock_0, lock_0, none_type_0)
    var_1 = lock_0.__enter__()
    memory_cache_0 = module_0.MemoryCache()
    module_2.split(memory_cache_0, memory_cache_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = ';]-s2\n'
    str_1 = 'MqR,\n&YO9o3\x0cfo['
    dict_0 = module_1.getblock(str_1)
    var_0 = module_0.once(dict_0, raise_if_lock=str_0)
    module_1.formatargspec(str_0, varkw=str_0, formatarg=var_0, formatreturns=dict_0, formatannotation=str_1)