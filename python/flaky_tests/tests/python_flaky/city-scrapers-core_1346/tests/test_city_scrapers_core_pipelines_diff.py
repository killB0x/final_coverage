# Automatically generated by Pynguin.
import pytest
import re as module_0
import city_scrapers_core.pipelines.diff as module_1
import enum as module_2
import city_scrapers_core.items as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.template(none_type_0)

def test_case_1():
    var_0 = module_0.purge()
    diff_pipeline_0 = module_1.DiffPipeline(var_0, var_0)
    assert f'{type(module_1.DiffPipeline.from_crawler).__module__}.{type(module_1.DiffPipeline.from_crawler).__qualname__}' == 'builtins.method'

def test_case_2():
    list_0 = []
    str_0 = 'Captions'
    diff_pipeline_0 = module_1.DiffPipeline(list_0, str_0)
    assert f'{type(module_1.DiffPipeline.from_crawler).__module__}.{type(module_1.DiffPipeline.from_crawler).__qualname__}' == 'builtins.method'
    with pytest.raises(NotImplementedError):
        diff_pipeline_0.load_previous_results()

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.purge()
    module_1.AzureDiffPipeline(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.purge()
    module_1.S3DiffPipeline(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_0.purge()
    diff_pipeline_0 = module_1.DiffPipeline(var_0, var_0)
    assert f'{type(module_1.DiffPipeline.from_crawler).__module__}.{type(module_1.DiffPipeline.from_crawler).__qualname__}' == 'builtins.method'
    diff_pipeline_0.process_item(var_0, diff_pipeline_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_2._EnumDict()
    diff_pipeline_0 = module_1.DiffPipeline(var_0, var_0)
    assert f'{type(module_1.DiffPipeline.from_crawler).__module__}.{type(module_1.DiffPipeline.from_crawler).__qualname__}' == 'builtins.method'
    diff_pipeline_0.process_item(var_0, diff_pipeline_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    regex_flag_0 = module_0.RegexFlag.ASCII
    str_0 = 'ocd'
    none_type_0 = None
    diff_pipeline_0 = module_1.DiffPipeline(none_type_0, str_0)
    assert f'{type(module_1.DiffPipeline.from_crawler).__module__}.{type(module_1.DiffPipeline.from_crawler).__qualname__}' == 'builtins.method'
    diff_pipeline_0.process_item(regex_flag_0, regex_flag_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.purge()
    str_0 = '*S.'
    diff_pipeline_0 = module_1.DiffPipeline(var_0, str_0)
    assert f'{type(module_1.DiffPipeline.from_crawler).__module__}.{type(module_1.DiffPipeline.from_crawler).__qualname__}' == 'builtins.method'
    var_1 = module_3.Meeting()
    diff_pipeline_0.process_item(var_1, var_1)