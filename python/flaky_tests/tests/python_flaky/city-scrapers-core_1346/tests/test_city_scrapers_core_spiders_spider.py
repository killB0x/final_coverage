# Automatically generated by Pynguin.
import pytest
import city_scrapers_core.spiders.spider as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.CityScrapersSpider()

def test_case_1():
    str_0 = '('
    city_scrapers_spider_0 = module_0.CityScrapersSpider(*str_0)
    assert f'{type(city_scrapers_spider_0).__module__}.{type(city_scrapers_spider_0).__qualname__}' == 'city_scrapers_core.spiders.spider.CityScrapersSpider'
    assert city_scrapers_spider_0.name == '('
    assert city_scrapers_spider_0.start_urls == []
    assert city_scrapers_spider_0.timezone == 'America/Chicago'
    assert city_scrapers_spider_0.year == 2022
    assert city_scrapers_spider_0.month == '10'
    assert city_scrapers_spider_0.day == '12'
    assert city_scrapers_spider_0.hour_min == '1906'

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -2530.913
    list_0 = [float_0]
    city_scrapers_spider_0 = module_0.CityScrapersSpider(*list_0)
    assert f'{type(city_scrapers_spider_0).__module__}.{type(city_scrapers_spider_0).__qualname__}' == 'city_scrapers_core.spiders.spider.CityScrapersSpider'
    assert city_scrapers_spider_0.name == pytest.approx(-2530.913, abs=0.01, rel=0.01)
    assert city_scrapers_spider_0.start_urls == []
    assert city_scrapers_spider_0.timezone == 'America/Chicago'
    assert city_scrapers_spider_0.year == 2022
    assert city_scrapers_spider_0.month == '10'
    assert city_scrapers_spider_0.day == '12'
    assert city_scrapers_spider_0.hour_min == '1906'
    city_scrapers_spider_0.get_status(city_scrapers_spider_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -2530.913
    list_0 = [float_0]
    city_scrapers_spider_0 = module_0.CityScrapersSpider(*list_0)
    assert f'{type(city_scrapers_spider_0).__module__}.{type(city_scrapers_spider_0).__qualname__}' == 'city_scrapers_core.spiders.spider.CityScrapersSpider'
    assert city_scrapers_spider_0.name == pytest.approx(-2530.913, abs=0.01, rel=0.01)
    assert city_scrapers_spider_0.start_urls == []
    assert city_scrapers_spider_0.timezone == 'America/Chicago'
    assert city_scrapers_spider_0.year == 2022
    assert city_scrapers_spider_0.month == '10'
    assert city_scrapers_spider_0.day == '12'
    assert city_scrapers_spider_0.hour_min == '1906'
    none_type_0 = None
    city_scrapers_spider_0.get_id(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '<X [FFOpH+'
    dict_0 = {str_0: str_0}
    city_scrapers_spider_0 = module_0.CityScrapersSpider(*dict_0)
    assert f'{type(city_scrapers_spider_0).__module__}.{type(city_scrapers_spider_0).__qualname__}' == 'city_scrapers_core.spiders.spider.CityScrapersSpider'
    assert city_scrapers_spider_0.name == '<X [FFOpH+'
    assert city_scrapers_spider_0.start_urls == []
    assert city_scrapers_spider_0.timezone == 'America/Chicago'
    assert city_scrapers_spider_0.year == 2022
    assert city_scrapers_spider_0.month == '10'
    assert city_scrapers_spider_0.day == '12'
    assert city_scrapers_spider_0.hour_min == '1906'
    city_scrapers_spider_0.get_status(dict_0)

def test_case_5():
    str_0 = 'Determine the status of a meeting based off of its details as well as any\n        additional text that may indicate whether it has been cancelled.\n\n        :param item: Meeting to get the status for\n        :param text: Any additional text not included in the meeting details that may\n                     indicate whether it\'s been cancelled, defaults to ""\n        :return: Status constant\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    city_scrapers_spider_0 = module_0.CityScrapersSpider(*dict_0)
    assert f'{type(city_scrapers_spider_0).__module__}.{type(city_scrapers_spider_0).__qualname__}' == 'city_scrapers_core.spiders.spider.CityScrapersSpider'
    assert city_scrapers_spider_0.name == 'Determine the status of a meeting based off of its details as well as any\n        additional text that may indicate whether it has been cancelled.\n\n        :param item: Meeting to get the status for\n        :param text: Any additional text not included in the meeting details that may\n                     indicate whether it\'s been cancelled, defaults to ""\n        :return: Status constant\n        '
    assert city_scrapers_spider_0.start_urls == []
    assert city_scrapers_spider_0.timezone == 'America/Chicago'
    assert city_scrapers_spider_0.year == 2022
    assert city_scrapers_spider_0.month == '10'
    assert city_scrapers_spider_0.day == '12'
    assert city_scrapers_spider_0.hour_min == '1906'
    str_1 = city_scrapers_spider_0.get_status(dict_0, str_0)
    assert str_1 == 'cancelled'