# Automatically generated by Pynguin.
import pytest
import grade.mixins as module_0
import inspect as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    scoring_mixin_0.getTest()

def test_case_1():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    callable_0 = module_1.stack()
    dict_0 = {}
    scoring_mixin_1 = module_0.ScoringMixin(*dict_0, **dict_0)
    with pytest.raises(AssertionError):
        scoring_mixin_1.require()

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.stack()
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    scoring_mixin_0.find(var_0)

def test_case_3():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_4():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    str_0 = scoring_mixin_0.__str__()
    assert str_0 == 'ScoringMixin'
    scoring_mixin_0.getTest()

@pytest.mark.xfail(strict=True)
def test_case_5():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    scoring_mixin_0.setattr(scoring_mixin_0, scoring_mixin_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_1.stack()
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    scoring_mixin_0.require(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    bool_0 = True
    list_0 = [bool_0, scoring_mixin_0, bool_0]
    scoring_mixin_0.require(*list_0)

def test_case_8():
    str_0 = 'o-+t'
    str_1 = 'a\x0b7}fL>XimT$QGc_B+'
    list_0 = [str_0, str_1, str_1]
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    list_1 = scoring_mixin_0.find(list_0)
    list_2 = scoring_mixin_0.find(str_0, str_1)

def test_case_9():
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    list_0 = scoring_mixin_0.getTests()
    str_0 = scoring_mixin_0.__str__()
    with pytest.raises(AssertionError):
        scoring_mixin_0.require(*str_0)

def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    scoring_mixin_0 = module_0.ScoringMixin()
    assert f'{type(module_0.ScoringMixin.weight).__module__}.{type(module_0.ScoringMixin.weight).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.score).__module__}.{type(module_0.ScoringMixin.score).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.visibility).__module__}.{type(module_0.ScoringMixin.visibility).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboard).__module__}.{type(module_0.ScoringMixin.leaderboard).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardTitle).__module__}.{type(module_0.ScoringMixin.leaderboardTitle).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardOrder).__module__}.{type(module_0.ScoringMixin.leaderboardOrder).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ScoringMixin.leaderboardScore).__module__}.{type(module_0.ScoringMixin.leaderboardScore).__qualname__}' == 'builtins.property'
    none_type_0 = scoring_mixin_0.require(*list_0)
    scoring_mixin_1 = module_0.ScoringMixin()
    list_1 = scoring_mixin_1.getTests()
    var_0 = module_1.stack()
    scoring_mixin_2 = module_0.ScoringMixin()
    scoring_mixin_3 = module_0.ScoringMixin()
    str_0 = scoring_mixin_2.__str__()
    with pytest.raises(AssertionError):
        scoring_mixin_1.require()