# Automatically generated by Pynguin.
import pytest
import grade.pipeline.asserts as module_0
import re as module_1
import posixpath as module_2

def test_case_0():
    or_0 = module_0.Or()
    assert f'{type(or_0).__module__}.{type(or_0).__qualname__}' == 'grade.pipeline.asserts.Or'
    assert or_0.callbacks == ()
    with pytest.raises(AssertionError):
        or_0.__call__(or_0)

def test_case_1():
    int_0 = 2677
    assert_exit_status_0 = module_0.AssertExitStatus(int_0)
    assert f'{type(assert_exit_status_0).__module__}.{type(assert_exit_status_0).__qualname__}' == 'grade.pipeline.asserts.AssertExitStatus'
    assert assert_exit_status_0.returncode == 2677
    completed_process_0 = assert_exit_status_0.__call__(assert_exit_status_0)

def test_case_2():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None

def test_case_3():
    or_0 = module_0.Or()
    assert f'{type(or_0).__module__}.{type(or_0).__qualname__}' == 'grade.pipeline.asserts.Or'
    assert or_0.callbacks == ()

def test_case_4():
    bytes_0 = b''
    check_0 = module_0.Check(bytes_0)
    assert f'{type(check_0).__module__}.{type(check_0).__qualname__}' == 'grade.pipeline.asserts.Check'
    assert check_0.callback == b''
    completed_process_0 = check_0.__call__(bytes_0)

def test_case_5():
    or_0 = module_0.Or()
    assert f'{type(or_0).__module__}.{type(or_0).__qualname__}' == 'grade.pipeline.asserts.Or'
    assert or_0.callbacks == ()
    assert_faster_0 = module_0.AssertFaster(or_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '?\r4'
    str_1 = ' Decorators.\n\nInspired by Gradescope-utils.\nhttps://github.com/gradescope/gradescope-utils\n'
    assert_stdout_regex_0 = module_0.AssertStdoutRegex(str_1)
    or_0 = module_0.Or()
    assert_stderr_matches_1 = module_0.AssertStderrMatches(str_0)
    module_0.AssertStderrMatches(filepath=str_1)

def test_case_7():
    str_0 = "lb0:]o\tC`'x-TE]\nm9="
    assert_stderr_regex_0 = module_0.AssertStderrRegex(str_0)
    assert f'{type(assert_stderr_regex_0).__module__}.{type(assert_stderr_regex_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrRegex'
    assert f'{type(assert_stderr_regex_0.pattern).__module__}.{type(assert_stderr_regex_0.pattern).__qualname__}' == 're.Pattern'
    var_0 = module_1.purge()

def test_case_8():
    str_0 = '!S*:"#a'
    str_1 = "V'cMP\t8i@A"
    str_2 = ' not found in '
    list_0 = [str_0, str_1, str_1, str_2]
    assert_stdout_contains_0 = module_0.AssertStdoutContains(list_0)
    assert f'{type(assert_stdout_contains_0).__module__}.{type(assert_stdout_contains_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutContains'
    assert assert_stdout_contains_0.strings == ['!S*:"#a', "V'cMP\t8i@A", "V'cMP\t8i@A", ' not found in ']

def test_case_9():
    str_0 = '\x0b]_P(G]4s ,S`o\n\x0btd'
    str_1 = ' Run.\n\nHandles running the test suite and saving results.\n'
    list_0 = [str_0, str_1]
    assert_stderr_contains_0 = module_0.AssertStderrContains(list_0)
    assert f'{type(assert_stderr_contains_0).__module__}.{type(assert_stderr_contains_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrContains'
    assert assert_stderr_contains_0.strings == ['\x0b]_P(G]4s ,S`o\n\x0btd', ' Run.\n\nHandles running the test suite and saving results.\n']

@pytest.mark.xfail(strict=True)
def test_case_10():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '}P4fSLNUP4,]9*Q{\x0c'
    module_0.AssertStderrMatches(filepath=str_0)

def test_case_11():
    none_type_0 = None
    not_0 = module_0.Not(none_type_0)
    assert f'{type(not_0).__module__}.{type(not_0).__qualname__}' == 'grade.pipeline.asserts.Not'
    assert not_0.callback is None
    completed_process_0 = not_0.__call__(none_type_0)

def test_case_12():
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout is None

@pytest.mark.xfail(strict=True)
def test_case_13():
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout is None
    str_0 = '?\r4'
    module_0.AssertStdoutMatches(filepath=str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    assert_stderr_matches_0.__call__(assert_stderr_matches_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '4'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout == '4'
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    assert_stdout_matches_1 = module_0.AssertStdoutMatches()
    assert_stdout_matches_1.__call__(completed_process_0)

def test_case_16():
    str_0 = '07\x0b'
    assert_stderr_matches_0 = module_0.AssertStderrMatches(str_0)
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr == '07\x0b'
    completed_process_0 = assert_stderr_matches_0.__call__(assert_stderr_matches_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '}P4fSLNUP4,]9*Q{\x0c'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    module_0.AssertStderrMatches(filepath=str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    assert_exit_success_0 = module_0.AssertExitSuccess()
    int_0 = 2686
    assert_exit_status_0 = module_0.AssertExitStatus(int_0)
    assert f'{type(assert_exit_status_0).__module__}.{type(assert_exit_status_0).__qualname__}' == 'grade.pipeline.asserts.AssertExitStatus'
    assert assert_exit_status_0.returncode == 2686
    completed_process_0 = assert_exit_status_0.__call__(assert_exit_status_0)
    assert_exit_success_0.__call__(completed_process_0)

def test_case_19():
    bytes_0 = b'\x05\x86'
    check_0 = module_0.Check(bytes_0)
    assert f'{type(check_0).__module__}.{type(check_0).__qualname__}' == 'grade.pipeline.asserts.Check'
    assert check_0.callback == b'\x05\x86'
    completed_process_0 = check_0.__call__(check_0)
    str_0 = '0F167tH'
    assert_stdout_regex_0 = module_0.AssertStdoutRegex(str_0)
    assert_stderr_matches_0 = module_0.AssertStderrMatches(str_0)
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    completed_process_1 = assert_stderr_matches_0.__call__(assert_stderr_matches_0)
    assert_stderr_regex_0 = module_0.AssertStderrRegex(str_0)
    list_0 = [assert_stdout_matches_0, assert_stdout_regex_0, completed_process_0]
    or_0 = module_0.Or(*list_0)
    bool_0 = True
    assert_exit_status_0 = module_0.AssertExitStatus(bool_0)
    completed_process_2 = or_0.__call__(completed_process_0)
    completed_process_3 = or_0.__call__(completed_process_1)
    with pytest.raises(ValueError):
        module_0.AssertStderrMatches(str_0, str_0)

def test_case_20():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '?\r4'
    with pytest.raises(ValueError):
        module_0.AssertStdoutMatches(assert_stderr_matches_0, str_0)

def test_case_21():
    str_0 = '?\r4'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout == '?\r4'
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    or_0 = module_0.Or()

def test_case_22():
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout is None
    list_0 = []
    assert_stdout_contains_0 = module_0.AssertStdoutContains(list_0)
    int_0 = 2242
    completed_process_0 = assert_stdout_contains_0.__call__(int_0)

def test_case_23():
    int_0 = 2679
    assert_faster_0 = module_0.AssertFaster(int_0)
    assert f'{type(assert_faster_0).__module__}.{type(assert_faster_0).__qualname__}' == 'grade.pipeline.asserts.AssertFaster'
    assert assert_faster_0.duration == 2679
    completed_process_0 = assert_faster_0.__call__(assert_faster_0)

def test_case_24():
    str_0 = '?\r4'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout == '?\r4'
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    str_1 = ' Decorators.\n\nInspired by Gradescope-utils.\nhttps://github.com/gradescope/gradescope-utils\n'
    assert_stdout_regex_0 = module_0.AssertStdoutRegex(str_1)
    with pytest.raises(AssertionError):
        assert_stdout_regex_0.__call__(completed_process_0)

def test_case_25():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    or_0 = module_0.Or(*list_0)
    assert f'{type(or_0).__module__}.{type(or_0).__qualname__}' == 'grade.pipeline.asserts.Or'
    assert or_0.callbacks == (None, None)
    with pytest.raises(AssertionError):
        or_0.__call__(none_type_0)

def test_case_26():
    dict_0 = {}
    assert_stderr_contains_0 = module_0.AssertStderrContains(dict_0)
    assert f'{type(assert_stderr_contains_0).__module__}.{type(assert_stderr_contains_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrContains'
    assert assert_stderr_contains_0.strings == {}
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    completed_process_0 = assert_stderr_contains_0.__call__(assert_stderr_matches_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    assert_stderr_matches_1 = module_0.AssertStderrMatches()
    str_0 = '?\r4'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    assert_exit_success_0 = module_0.AssertExitSuccess()
    str_1 = ' Decorators.\n\nInspired by Gradescope-utils.\nhttps://github.com/gradescope/gradescope-utils\n'
    assert_stdout_matches_1 = module_0.AssertStdoutMatches()
    assert_stdout_matches_2 = module_0.AssertStdoutMatches(str_1)
    assert_stdout_matches_2.__call__(completed_process_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '?\r'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    list_0 = [str_0]
    assert_stdout_contains_0 = module_0.AssertStdoutContains(list_0)
    completed_process_1 = assert_stdout_contains_0.__call__(completed_process_0)
    module_0.AssertStderrMatches(filepath=str_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '\nGEHyJ{.d\r~<zxb$'
    str_1 = 's[Ni'
    str_2 = 'Kt&tw=X )1$'
    list_0 = [str_0, str_0, str_1, str_2]
    assert_stderr_contains_0 = module_0.AssertStderrContains(list_0)
    none_type_0 = None
    assert_stderr_matches_1 = module_0.AssertStderrMatches(filepath=none_type_0)
    assert_stderr_contains_0.__call__(list_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = '#Z4'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout == '#Z4'
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    assert_stdout_regex_0 = module_0.AssertStdoutRegex(str_0)
    completed_process_1 = assert_stdout_regex_0.__call__(completed_process_0)
    module_2.islink(completed_process_1)

def test_case_31():
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    str_0 = '?\r'
    assert_stdout_matches_0 = module_0.AssertStdoutMatches(str_0)
    completed_process_0 = assert_stdout_matches_0.__call__(assert_stdout_matches_0)
    str_1 = 'I\n\\mu'
    str_2 = "^-1\rPFa~'yeN5lW_\x0bl$"
    list_0 = [str_1, str_2, str_0]
    assert_stdout_contains_0 = module_0.AssertStdoutContains(list_0)
    with pytest.raises(AssertionError):
        assert_stdout_contains_0.__call__(completed_process_0)

def test_case_32():
    none_type_0 = None
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    assert f'{type(assert_stdout_matches_0).__module__}.{type(assert_stdout_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutMatches'
    assert assert_stdout_matches_0.stdout is None
    error_0 = module_1.error(assert_stdout_matches_0, assert_stdout_matches_0, none_type_0)
    with pytest.raises(ValueError):
        assert_stdout_matches_0.__call__(error_0)

def test_case_33():
    none_type_0 = None
    assert_stderr_matches_0 = module_0.AssertStderrMatches(none_type_0)
    assert f'{type(assert_stderr_matches_0).__module__}.{type(assert_stderr_matches_0).__qualname__}' == 'grade.pipeline.asserts.AssertStderrMatches'
    assert assert_stderr_matches_0.stderr is None
    error_0 = module_1.error(assert_stderr_matches_0, assert_stderr_matches_0, none_type_0)
    with pytest.raises(ValueError):
        assert_stderr_matches_0.__call__(error_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    bytes_0 = b'\x05\x86'
    check_0 = module_0.Check(bytes_0)
    assert f'{type(check_0).__module__}.{type(check_0).__qualname__}' == 'grade.pipeline.asserts.Check'
    assert check_0.callback == b'\x05\x86'
    completed_process_0 = check_0.__call__(check_0)
    bool_0 = True
    assert_exit_status_0 = module_0.AssertExitStatus(bool_0)
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    module_0.AssertStdoutMatches(filepath=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    assert_exit_status_0 = module_0.AssertExitStatus(bool_0)
    assert f'{type(assert_exit_status_0).__module__}.{type(assert_exit_status_0).__qualname__}' == 'grade.pipeline.asserts.AssertExitStatus'
    assert assert_exit_status_0.returncode is False
    str_0 = 'Ba6,6LfO'
    assert_exit_status_1 = module_0.AssertExitStatus(str_0)
    assert_exit_status_1.__call__(assert_exit_status_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    bytes_0 = b'\x05\x86'
    check_0 = module_0.Check(bytes_0)
    assert f'{type(check_0).__module__}.{type(check_0).__qualname__}' == 'grade.pipeline.asserts.Check'
    assert check_0.callback == b'\x05\x86'
    completed_process_0 = check_0.__call__(check_0)
    str_0 = '07H'
    assert_stderr_matches_0 = module_0.AssertStderrMatches(str_0)
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    completed_process_1 = assert_stderr_matches_0.__call__(assert_stderr_matches_0)
    assert_stderr_matches_1 = module_0.AssertStderrMatches()
    str_1 = ']I5E/eFOy<'
    assert_stderr_matches_2 = module_0.AssertStderrMatches(str_1)
    none_type_0 = None
    assert_stdout_matches_1 = module_0.AssertStdoutMatches(none_type_0)
    assert_stderr_matches_2.__call__(completed_process_1)

def test_case_37():
    str_0 = '0F167H'
    assert_stdout_regex_0 = module_0.AssertStdoutRegex(str_0)
    assert f'{type(assert_stdout_regex_0).__module__}.{type(assert_stdout_regex_0).__qualname__}' == 'grade.pipeline.asserts.AssertStdoutRegex'
    assert f'{type(assert_stdout_regex_0.pattern).__module__}.{type(assert_stdout_regex_0.pattern).__qualname__}' == 're.Pattern'
    assert_stderr_matches_0 = module_0.AssertStderrMatches(str_0)
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    completed_process_0 = assert_stderr_matches_0.__call__(assert_stderr_matches_0)
    assert_stderr_regex_0 = module_0.AssertStderrRegex(str_0)
    completed_process_1 = assert_stderr_regex_0.__call__(completed_process_0)
    or_0 = module_0.Or(*str_0)

def test_case_38():
    bytes_0 = b'\x05\x86'
    check_0 = module_0.Check(bytes_0)
    assert f'{type(check_0).__module__}.{type(check_0).__qualname__}' == 'grade.pipeline.asserts.Check'
    assert check_0.callback == b'\x05\x86'
    completed_process_0 = check_0.__call__(check_0)
    str_0 = '07H'
    str_1 = '0F167H'
    assert_stdout_regex_0 = module_0.AssertStdoutRegex(str_1)
    assert_stderr_matches_0 = module_0.AssertStderrMatches(str_0)
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    var_0 = module_2.isabs(bytes_0)
    completed_process_1 = check_0.__call__(var_0)
    completed_process_2 = assert_stderr_matches_0.__call__(assert_stderr_matches_0)
    assert_stderr_matches_1 = module_0.AssertStderrMatches()
    str_2 = "F|_YZ8=h}u\rIo{!'h"
    assert_stderr_regex_0 = module_0.AssertStderrRegex(str_2)
    with pytest.raises(AssertionError):
        assert_stderr_regex_0.__call__(assert_stderr_matches_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    or_0 = module_0.Or()
    assert f'{type(or_0).__module__}.{type(or_0).__qualname__}' == 'grade.pipeline.asserts.Or'
    assert or_0.callbacks == ()
    none_type_0 = None
    not_0 = module_0.Not(none_type_0)
    completed_process_0 = not_0.__call__(none_type_0)
    completed_process_1 = not_0.__call__(completed_process_0)
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    error_0 = module_1.error(not_0, not_0, none_type_0)
    list_0 = []
    assert_stderr_contains_0 = module_0.AssertStderrContains(list_0)
    completed_process_2 = assert_stderr_contains_0.__call__(completed_process_1)
    list_1 = [none_type_0, assert_stdout_matches_0, completed_process_0, not_0]
    or_1 = module_0.Or(*list_1)
    assert_exit_status_0 = module_0.AssertExitStatus(or_1)
    completed_process_3 = or_1.__call__(completed_process_1)
    completed_process_4 = or_1.__call__(completed_process_0)
    completed_process_5 = or_1.__call__(completed_process_3)
    check_0 = module_0.Check(or_0)
    assert_stdout_matches_1 = module_0.AssertStdoutMatches(none_type_0)
    completed_process_6 = or_1.__call__(completed_process_1)
    assert_stderr_matches_0 = module_0.AssertStderrMatches()
    completed_process_7 = check_0.__call__(completed_process_6)
    assert_stderr_matches_0.__call__(completed_process_6)

@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    not_0 = module_0.Not(none_type_0)
    assert f'{type(not_0).__module__}.{type(not_0).__qualname__}' == 'grade.pipeline.asserts.Not'
    assert not_0.callback is None
    error_0 = module_1.error(not_0, not_0, none_type_0)
    assert_valgrind_success_0 = module_0.AssertValgrindSuccess()
    assert_valgrind_success_0.__call__(error_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    or_0 = module_0.Or()
    assert f'{type(or_0).__module__}.{type(or_0).__qualname__}' == 'grade.pipeline.asserts.Or'
    assert or_0.callbacks == ()
    assert_stdout_matches_0 = module_0.AssertStdoutMatches()
    list_0 = []
    assert_stderr_contains_0 = module_0.AssertStderrContains(list_0)
    int_0 = 2
    module_0.AssertStderrMatches(filepath=int_0)