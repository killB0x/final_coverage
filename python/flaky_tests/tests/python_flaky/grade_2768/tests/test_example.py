# Automatically generated by Pynguin.
import pytest
import example as module_0
import unittest.suite as module_1
import ast as module_2

def test_case_0():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_1():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    var_0 = tests_0.test_executable_multiple_times()
    tests_1 = module_0.Tests()
    var_1 = tests_0.__hash__()
    assert var_1 == 7535358135574507702
    var_2 = tests_1.test_collecting_runtimes()
    var_3 = tests_0.test_collecting_runtimes()
    var_4 = tests_1.test_compile()
    test_suite_0 = module_1.TestSuite()
    var_3.setUp()

@pytest.mark.xfail(strict=True)
def test_case_2():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    var_0 = tests_0.test_collecting_runtimes()
    module_2.Pow(**var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    var_0 = tests_0.test_collecting_runtimes()
    var_1 = tests_0.test_student_function()
    var_2 = tests_0.__hash__()
    assert var_2 == 7535358135574507702
    var_3 = tests_0.test_collecting_runtimes()
    var_3.assertDictContainsSubset(var_3, var_3, tests_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    var_0 = tests_0.test_collecting_runtimes()
    tests_1 = module_0.Tests()
    var_1 = tests_0.__hash__()
    assert var_1 == 7535358135574507702
    var_2 = tests_1.test_collecting_runtimes()
    tests_0.setUp()

@pytest.mark.xfail(strict=True)
def test_case_5():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    var_0 = tests_0.test_collecting_runtimes()
    var_1 = tests_0.test_compile()
    var_0.setUp()

@pytest.mark.xfail(strict=True)
def test_case_6():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    tests_0.test_executable()

@pytest.mark.xfail(strict=True)
def test_case_7():
    tests_0 = module_0.Tests()
    assert f'{type(module_0.Tests.setUpClass).__module__}.{type(module_0.Tests.setUpClass).__qualname__}' == 'builtins.method'
    tests_0.test_failure()