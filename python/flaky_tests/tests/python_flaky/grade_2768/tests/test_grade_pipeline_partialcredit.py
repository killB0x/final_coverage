# Automatically generated by Pynguin.
import pytest
import collections as module_0
import grade.pipeline.partialcredit as module_1

def test_case_0():
    deque_0 = module_0.deque()
    partial_credit_0 = module_1.PartialCredit(deque_0, deque_0)
    assert f'{type(module_1.PartialCredit.score).__module__}.{type(module_1.PartialCredit.score).__qualname__}' == 'builtins.property'

def test_case_1():
    set_0 = set()
    int_0 = 10
    partial_credit_0 = module_1.PartialCredit(set_0, int_0)
    assert f'{type(partial_credit_0).__module__}.{type(partial_credit_0).__qualname__}' == 'grade.pipeline.partialcredit.PartialCredit'
    assert partial_credit_0.pipelines == []
    assert f'{type(partial_credit_0.value).__module__}.{type(partial_credit_0.value).__qualname__}' == 'collections.deque'
    assert len(partial_credit_0.value) == 0
    assert partial_credit_0.max_score == 0
    assert f'{type(module_1.PartialCredit.score).__module__}.{type(module_1.PartialCredit.score).__qualname__}' == 'builtins.property'

def test_case_2():
    bytes_0 = b'\xa8q\x11\xf5\xb6'
    partial_credit_0 = module_1.PartialCredit(bytes_0, bytes_0)
    assert f'{type(partial_credit_0).__module__}.{type(partial_credit_0).__qualname__}' == 'grade.pipeline.partialcredit.PartialCredit'
    assert partial_credit_0.pipelines == [168, 113, 17, 245, 182]
    assert f'{type(partial_credit_0.value).__module__}.{type(partial_credit_0.value).__qualname__}' == 'collections.deque'
    assert len(partial_credit_0.value) == 5
    assert partial_credit_0.max_score == 725
    assert f'{type(module_1.PartialCredit.score).__module__}.{type(module_1.PartialCredit.score).__qualname__}' == 'builtins.property'

def test_case_3():
    bytes_0 = b'=%\xf0\xba'
    bool_0 = False
    partial_credit_0 = module_1.PartialCredit(bytes_0, bool_0)
    assert f'{type(partial_credit_0).__module__}.{type(partial_credit_0).__qualname__}' == 'grade.pipeline.partialcredit.PartialCredit'
    assert partial_credit_0.pipelines == [61, 37, 240, 186]
    assert f'{type(partial_credit_0.value).__module__}.{type(partial_credit_0.value).__qualname__}' == 'collections.deque'
    assert len(partial_credit_0.value) == 4
    assert partial_credit_0.max_score == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_1.PartialCredit.score).__module__}.{type(module_1.PartialCredit.score).__qualname__}' == 'builtins.property'
    var_0 = partial_credit_0.__call__()
    assert len(partial_credit_0.value) == 0
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'grade.pipeline.partialcredit.PartialCredit'
    assert var_0.pipelines == [61, 37, 240, 186]
    assert f'{type(var_0.value).__module__}.{type(var_0.value).__qualname__}' == 'collections.deque'
    assert len(var_0.value) == 0
    assert var_0.max_score == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_4():
    bytes_0 = b'(Q\x1f\xa7\xd5\x87\xe1\x9bp\xc9Vm(\x9c@\xe2\x8b\xee\xaf\xc3'
    partial_credit_0 = module_1.PartialCredit(bytes_0, bytes_0)
    assert f'{type(partial_credit_0).__module__}.{type(partial_credit_0).__qualname__}' == 'grade.pipeline.partialcredit.PartialCredit'
    assert partial_credit_0.pipelines == [40, 81, 31, 167, 213, 135, 225, 155, 112, 201, 86, 109, 40, 156, 64, 226, 139, 238, 175, 195]
    assert f'{type(partial_credit_0.value).__module__}.{type(partial_credit_0.value).__qualname__}' == 'collections.deque'
    assert len(partial_credit_0.value) == 20
    assert partial_credit_0.max_score == 2788
    assert f'{type(module_1.PartialCredit.score).__module__}.{type(module_1.PartialCredit.score).__qualname__}' == 'builtins.property'
    callable_0 = partial_credit_0.__call__()
    assert len(partial_credit_0.value) == 0
    assert f'{type(callable_0).__module__}.{type(callable_0).__qualname__}' == 'grade.pipeline.partialcredit.PartialCredit'
    assert callable_0.pipelines == [40, 81, 31, 167, 213, 135, 225, 155, 112, 201, 86, 109, 40, 156, 64, 226, 139, 238, 175, 195]
    assert f'{type(callable_0.value).__module__}.{type(callable_0.value).__qualname__}' == 'collections.deque'
    assert len(callable_0.value) == 0
    assert callable_0.max_score == 2788

@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = (-1304.96+1332.03j)
    module_1.PartialCredit(complex_0, complex_0)