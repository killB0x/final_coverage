# Automatically generated by Pynguin.
import pytest
import sanic_envconfig.envconfig as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    bool_1 = True
    str_0 = 'N"Wp^@+^gP\td$\''
    env_var_0 = module_0.EnvVar(bool_1, name=str_0)
    assert f'{type(env_var_0).__module__}.{type(env_var_0).__qualname__}' == 'sanic_envconfig.envconfig.EnvVar'
    assert env_var_0.default is True
    assert env_var_0.name == '__N"Wp^@+^gP\td$\''
    assert module_0.EnvVar.prefix == '_ENV_PREFIX_'
    assert len(module_0.EnvVar.parsers) == 3
    var_0 = env_var_0.__get__(bool_0, bool_1)
    assert var_0 is True
    env_var_0.__set_name__(var_0, str_0)

def test_case_1():
    none_type_0 = None
    env_var_0 = module_0.EnvVar(none_type_0)
    assert f'{type(env_var_0).__module__}.{type(env_var_0).__qualname__}' == 'sanic_envconfig.envconfig.EnvVar'
    assert env_var_0.default is None
    assert env_var_0.name == '__None'
    assert module_0.EnvVar.prefix == '_ENV_PREFIX_'
    assert len(module_0.EnvVar.parsers) == 3

def test_case_2():
    none_type_0 = None
    env_var_0 = module_0.EnvVar(none_type_0)
    assert f'{type(env_var_0).__module__}.{type(env_var_0).__qualname__}' == 'sanic_envconfig.envconfig.EnvVar'
    assert env_var_0.default is None
    assert env_var_0.name == '__None'
    assert module_0.EnvVar.prefix == '_ENV_PREFIX_'
    assert len(module_0.EnvVar.parsers) == 3
    var_0 = env_var_0.__get__(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.EnvConfigMeta()

@pytest.mark.xfail(strict=True)
def test_case_4():
    env_config_0 = module_0.EnvConfig()
    str_0 = ''
    env_var_0 = module_0.EnvVar(env_config_0, name=str_0)
    assert f'{type(env_var_0).__module__}.{type(env_var_0).__qualname__}' == 'sanic_envconfig.envconfig.EnvVar'
    assert f'{type(env_var_0.default).__module__}.{type(env_var_0.default).__qualname__}' == 'sanic_envconfig.envconfig.EnvConfig'
    assert env_var_0.name == '__'
    assert module_0.EnvVar.prefix == '_ENV_PREFIX_'
    assert len(module_0.EnvVar.parsers) == 3
    var_0 = env_var_0.__get__(str_0, str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'sanic_envconfig.envconfig.EnvConfig'
    var_1 = env_var_0.__get__(env_var_0, var_0)
    var_2 = var_1.parse(env_config_0)
    var_0.__new__(env_var_0, var_2, var_0, env_var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "O$5M\x0c4\t;~'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0]
    module_0.EnvConfigMeta(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '_CONFIG_PATH'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0]
    module_0.EnvConfigMeta(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '_ENV_PREFIX'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0]
    env_var_0 = module_0.EnvVar(list_0)
    assert f'{type(env_var_0).__module__}.{type(env_var_0).__qualname__}' == 'sanic_envconfig.envconfig.EnvVar'
    assert env_var_0.default == [{'_ENV_PREFIX': '_ENV_PREFIX'}, '_ENV_PREFIX', {'_ENV_PREFIX': '_ENV_PREFIX'}]
    assert env_var_0.name == '__None'
    assert module_0.EnvVar.prefix == '_ENV_PREFIX_'
    assert len(module_0.EnvVar.parsers) == 3
    var_0 = env_var_0.__get__(dict_0, list_0)
    module_0.EnvConfigMeta(*var_0)