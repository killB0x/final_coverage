# Automatically generated by Pynguin.
import pytest
import cache_alchemy.utils as module_0
import builtins as module_1

def test_case_0():
    unsupported_error_0 = module_0.UnsupportedError()

def test_case_1():
    str_0 = 'dj J3R'
    var_0 = module_0.escape(str_0)
    assert var_0 == 'dj\\ J3R'

@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    module_0.escape(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    complex_0 = (-3549.98+1203.41j)
    tuple_0 = (complex_0,)
    dict_0 = {bool_0: tuple_0, complex_0: bool_0, bool_0: bool_0}
    str_0 = '>B\n~C@'
    tuple_1 = module_0.generate_fast_key(args=tuple_0, kwargs=dict_0, func=str_0)
    tuple_2 = ()
    dict_1 = {tuple_2: tuple_2, bool_0: bool_0, tuple_2: bool_0, tuple_2: bool_0}
    value_error_0 = module_1.ValueError()
    list_0 = [value_error_0, dict_0, tuple_2, dict_0]
    unsupported_error_0 = module_0.UnsupportedError(*list_0)
    tuple_3 = module_0.generate_fast_key(args=tuple_2, kwargs=dict_1, func=tuple_2)
    module_0.escape(bool_0)

def test_case_4():
    int_0 = 4
    tuple_0 = (int_0,)
    dict_0 = {}
    tuple_1 = module_0.generate_fast_key(args=tuple_0, kwargs=dict_0, func=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    unsupported_error_0 = module_0.UnsupportedError()
    set_0 = set()
    tuple_0 = (unsupported_error_0, set_0, set_0)
    none_type_0 = None
    tuple_1 = module_0.generate_fast_key(args=unsupported_error_0, kwargs=set_0, func=none_type_0)
    str_0 = '\tY31'
    int_0 = -2074
    bool_0 = False
    tuple_2 = module_0.generate_fast_key(args=tuple_0, kwargs=none_type_0, func=int_0, is_method=bool_0)
    float_0 = -1395.0
    tuple_3 = (str_0, float_0)
    dict_0 = {}
    bool_1 = False
    tuple_4 = module_0.generate_fast_key(args=tuple_3, kwargs=dict_0, func=unsupported_error_0, is_method=bool_1)
    none_type_1 = None
    tuple_5 = module_0.generate_fast_key(args=tuple_0, kwargs=none_type_1, func=unsupported_error_0, is_method=unsupported_error_0)
    module_0.escape(set_0)

def test_case_6():
    bytes_0 = b'\xc6\x99\x92\x15H\xec\xfcJ\xeb\xf0\xb2\x97\xc2mW'
    tuple_0 = (bytes_0,)
    str_0 = '".}aZ|\x0cTu'
    float_0 = 1247.612343
    with pytest.raises(module_0.UnsupportedError):
        module_0.generate_fast_key_pattern(args=tuple_0, kwargs=str_0, func=float_0)