# Automatically generated by Pynguin.
import pytest
import toolkit.translator.token_acquirer as module_0
import ast as module_1
import re as module_2
import enum as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'f3xh/E`#y"\\Ra{YC'
    baidu_acquirer_0 = module_0.BaiduAcquirer(str_0, str_0, str_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.headers == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.proxies == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    var_0 = baidu_acquirer_0.adjust(str_0)
    assert var_0 == 'f3xh/E`#y"\\Ra{YC'
    baidu_acquirer_0.enrich(str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    function_type_0 = module_1.FunctionType()
    set_0 = {function_type_0, function_type_0, function_type_0, function_type_0}
    google_acquirer_0 = module_0.GoogleAcquirer(set_0, set_0, function_type_0)
    assert f'{type(google_acquirer_0).__module__}.{type(google_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.GoogleAcquirer'
    assert f'{type(google_acquirer_0.session).__module__}.{type(google_acquirer_0.session).__qualname__}' == 'builtins.set'
    assert len(google_acquirer_0.session) == 1
    assert f'{type(google_acquirer_0.headers).__module__}.{type(google_acquirer_0.headers).__qualname__}' == 'builtins.set'
    assert len(google_acquirer_0.headers) == 1
    assert f'{type(google_acquirer_0.proxies).__module__}.{type(google_acquirer_0.proxies).__qualname__}' == 'ast.FunctionType'
    assert google_acquirer_0.key is None
    assert module_0.GoogleAcquirer.host == 'https://translate.google.cn'
    google_acquirer_0.__enter__()

def test_case_2():
    none_type_0 = None
    baidu_acquirer_0 = module_0.BaiduAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session is None
    assert baidu_acquirer_0.headers is None
    assert baidu_acquirer_0.proxies is None
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'

@pytest.mark.xfail(strict=True)
def test_case_3():
    function_type_0 = module_1.FunctionType()
    google_acquirer_0 = module_0.GoogleAcquirer(function_type_0, function_type_0, function_type_0)
    assert f'{type(google_acquirer_0).__module__}.{type(google_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.GoogleAcquirer'
    assert f'{type(google_acquirer_0.session).__module__}.{type(google_acquirer_0.session).__qualname__}' == 'ast.FunctionType'
    assert f'{type(google_acquirer_0.headers).__module__}.{type(google_acquirer_0.headers).__qualname__}' == 'ast.FunctionType'
    assert f'{type(google_acquirer_0.proxies).__module__}.{type(google_acquirer_0.proxies).__qualname__}' == 'ast.FunctionType'
    assert google_acquirer_0.key is None
    assert module_0.GoogleAcquirer.host == 'https://translate.google.cn'
    google_acquirer_0.acquire(google_acquirer_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'f3xh/E`#y"\\Ra{YC'
    baidu_acquirer_0 = module_0.BaiduAcquirer(str_0, str_0, str_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.headers == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.proxies == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    var_0 = baidu_acquirer_0.adjust(str_0)
    assert var_0 == 'f3xh/E`#y"\\Ra{YC'
    str_0.__enter__()

def test_case_5():
    none_type_0 = None
    bing_acquirer_0 = module_0.BingAcquirer(none_type_0, none_type_0)
    assert f'{type(bing_acquirer_0).__module__}.{type(bing_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert bing_acquirer_0.session is None
    assert bing_acquirer_0.headers is None
    assert bing_acquirer_0.proxies is None
    assert bing_acquirer_0.key is None
    assert module_0.BingAcquirer.host == 'https://cn.bing.com/translator/'

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bing_acquirer_0 = module_0.BingAcquirer(none_type_0, none_type_0)
    assert f'{type(bing_acquirer_0).__module__}.{type(bing_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert bing_acquirer_0.session is None
    assert bing_acquirer_0.headers is None
    assert bing_acquirer_0.proxies is None
    assert bing_acquirer_0.key is None
    assert module_0.BingAcquirer.host == 'https://cn.bing.com/translator/'
    var_0 = bing_acquirer_0.auth(none_type_0)
    assert bing_acquirer_0.key == '0'
    bing_acquirer_0.update()

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    baidu_acquirer_0 = module_0.BaiduAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session is None
    assert baidu_acquirer_0.headers is None
    assert baidu_acquirer_0.proxies is None
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    baidu_acquirer_0.__exit__(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    baidu_acquirer_0 = module_0.BaiduAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session is None
    assert baidu_acquirer_0.headers is None
    assert baidu_acquirer_0.proxies is None
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    baidu_acquirer_0.auth(none_type_0)

def test_case_9():
    none_type_0 = None
    qq_acquirer_0 = module_0.QqAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(qq_acquirer_0).__module__}.{type(qq_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.QqAcquirer'
    assert qq_acquirer_0.session is None
    assert qq_acquirer_0.headers is None
    assert qq_acquirer_0.proxies is None
    assert qq_acquirer_0.key is None
    assert module_0.QqAcquirer.host == 'http://fanyi.qq.com/'
    var_0 = qq_acquirer_0.enrich(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    var_0 = module_2.purge()
    qq_acquirer_0 = module_0.QqAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(qq_acquirer_0).__module__}.{type(qq_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.QqAcquirer'
    assert qq_acquirer_0.session is None
    assert qq_acquirer_0.headers is None
    assert qq_acquirer_0.proxies is None
    assert qq_acquirer_0.key is None
    assert module_0.QqAcquirer.host == 'http://fanyi.qq.com/'
    var_1 = qq_acquirer_0.acquire(qq_acquirer_0)
    var_2 = qq_acquirer_0.enrich(none_type_0)
    var_0.__exit__(var_2, none_type_0, qq_acquirer_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    baidu_acquirer_0 = module_0.BaiduAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session is None
    assert baidu_acquirer_0.headers is None
    assert baidu_acquirer_0.proxies is None
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    baidu_acquirer_0.acquire(baidu_acquirer_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    qq_acquirer_0 = module_0.QqAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(qq_acquirer_0).__module__}.{type(qq_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.QqAcquirer'
    assert qq_acquirer_0.session is None
    assert qq_acquirer_0.headers is None
    assert qq_acquirer_0.proxies is None
    assert qq_acquirer_0.key is None
    assert module_0.QqAcquirer.host == 'http://fanyi.qq.com/'
    var_0 = module_2.RegexFlag.DEBUG
    qq_acquirer_1 = module_0.QqAcquirer(none_type_0, none_type_0, none_type_0)
    qq_acquirer_0.__exit__(var_0, none_type_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    bing_acquirer_0 = module_0.BingAcquirer(none_type_0, none_type_0)
    assert f'{type(bing_acquirer_0).__module__}.{type(bing_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert bing_acquirer_0.session is None
    assert bing_acquirer_0.headers is None
    assert bing_acquirer_0.proxies is None
    assert bing_acquirer_0.key is None
    assert module_0.BingAcquirer.host == 'https://cn.bing.com/translator/'
    qq_acquirer_0 = module_0.QqAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(qq_acquirer_0).__module__}.{type(qq_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.QqAcquirer'
    assert qq_acquirer_0.session is None
    assert qq_acquirer_0.headers is None
    assert qq_acquirer_0.proxies is None
    assert qq_acquirer_0.key is None
    assert module_0.QqAcquirer.host == 'http://fanyi.qq.com/'
    var_0 = qq_acquirer_0.enrich(none_type_0)
    bing_acquirer_0.__exit__(var_0, none_type_0, qq_acquirer_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    function_type_0 = module_1.FunctionType()
    set_0 = {function_type_0, function_type_0, function_type_0, function_type_0, function_type_0, function_type_0}
    google_acquirer_0 = module_0.GoogleAcquirer(set_0, set_0, function_type_0)
    assert f'{type(google_acquirer_0).__module__}.{type(google_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.GoogleAcquirer'
    assert f'{type(google_acquirer_0.session).__module__}.{type(google_acquirer_0.session).__qualname__}' == 'builtins.set'
    assert len(google_acquirer_0.session) == 1
    assert f'{type(google_acquirer_0.headers).__module__}.{type(google_acquirer_0.headers).__qualname__}' == 'builtins.set'
    assert len(google_acquirer_0.headers) == 1
    assert f'{type(google_acquirer_0.proxies).__module__}.{type(google_acquirer_0.proxies).__qualname__}' == 'ast.FunctionType'
    assert google_acquirer_0.key is None
    assert module_0.GoogleAcquirer.host == 'https://translate.google.cn'
    var_0 = google_acquirer_0.n(function_type_0, set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'ast.FunctionType'
    google_acquirer_0.__exit__(var_0, var_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    qq_acquirer_0 = module_0.QqAcquirer(none_type_0, none_type_0, none_type_0)
    assert f'{type(qq_acquirer_0).__module__}.{type(qq_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.QqAcquirer'
    assert qq_acquirer_0.session is None
    assert qq_acquirer_0.headers is None
    assert qq_acquirer_0.proxies is None
    assert qq_acquirer_0.key is None
    assert module_0.QqAcquirer.host == 'http://fanyi.qq.com/'
    qq_acquirer_0.auth(qq_acquirer_0)

def test_case_16():
    bytes_0 = b's>'
    baidu_acquirer_0 = module_0.BaiduAcquirer(bytes_0, bytes_0, bytes_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session == b's>'
    assert baidu_acquirer_0.headers == b's>'
    assert baidu_acquirer_0.proxies == b's>'
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    var_0 = baidu_acquirer_0.n(baidu_acquirer_0, bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert var_0.session == b's>'
    assert var_0.headers == b's>'
    assert var_0.proxies == b's>'
    assert var_0.key is None

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    bing_acquirer_0 = module_0.BingAcquirer(none_type_0, none_type_0)
    assert f'{type(bing_acquirer_0).__module__}.{type(bing_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert bing_acquirer_0.session is None
    assert bing_acquirer_0.headers is None
    assert bing_acquirer_0.proxies is None
    assert bing_acquirer_0.key is None
    assert module_0.BingAcquirer.host == 'https://cn.bing.com/translator/'
    var_0 = bing_acquirer_0.auth(none_type_0)
    assert bing_acquirer_0.key == '0'
    var_1 = bing_acquirer_0.__enter__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert var_1.session is None
    assert var_1.headers is None
    assert var_1.proxies is None
    assert var_1.key == '0'
    qq_acquirer_0 = module_0.QqAcquirer(none_type_0, var_1, none_type_0)
    assert f'{type(qq_acquirer_0).__module__}.{type(qq_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.QqAcquirer'
    assert qq_acquirer_0.session is None
    assert f'{type(qq_acquirer_0.headers).__module__}.{type(qq_acquirer_0.headers).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert qq_acquirer_0.proxies is None
    assert qq_acquirer_0.key is None
    assert module_0.QqAcquirer.host == 'http://fanyi.qq.com/'
    var_2 = qq_acquirer_0.enrich(none_type_0)
    qq_acquirer_0.enrich(qq_acquirer_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'>>> '
    baidu_acquirer_0 = module_0.BaiduAcquirer(bytes_0, bytes_0, bytes_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session == b'>>> '
    assert baidu_acquirer_0.headers == b'>>> '
    assert baidu_acquirer_0.proxies == b'>>> '
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    baidu_acquirer_0.n(baidu_acquirer_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'f3xh/E`#y"\\Ra{YC'
    baidu_acquirer_0 = module_0.BaiduAcquirer(str_0, str_0, str_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.headers == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.proxies == 'f3xh/E`#y"\\Ra{YC'
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    baidu_acquirer_0.n(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'Iy5A}\tVt'
    bing_acquirer_0 = module_0.BingAcquirer(str_0, str_0)
    assert f'{type(bing_acquirer_0).__module__}.{type(bing_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert bing_acquirer_0.session == 'Iy5A}\tVt'
    assert bing_acquirer_0.headers == 'Iy5A}\tVt'
    assert bing_acquirer_0.proxies is None
    assert bing_acquirer_0.key is None
    assert module_0.BingAcquirer.host == 'https://cn.bing.com/translator/'
    var_0 = bing_acquirer_0.acquire(str_0)
    assert var_0 == -4323959546
    var_1 = bing_acquirer_0.auth(str_0)
    assert bing_acquirer_0.key == '0'
    none_type_0 = None
    bing_acquirer_0.n(str_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    function_type_0 = module_1.FunctionType()
    enum_dict_0 = module_3._EnumDict()
    bing_acquirer_0 = module_0.BingAcquirer(function_type_0, enum_dict_0)
    assert f'{type(bing_acquirer_0).__module__}.{type(bing_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BingAcquirer'
    assert f'{type(bing_acquirer_0.session).__module__}.{type(bing_acquirer_0.session).__qualname__}' == 'ast.FunctionType'
    assert f'{type(bing_acquirer_0.headers).__module__}.{type(bing_acquirer_0.headers).__qualname__}' == 'enum._EnumDict'
    assert len(bing_acquirer_0.headers) == 0
    assert bing_acquirer_0.proxies is None
    assert bing_acquirer_0.key is None
    assert module_0.BingAcquirer.host == 'https://cn.bing.com/translator/'
    var_0 = bing_acquirer_0.acquire(enum_dict_0)
    assert var_0 == 0
    baidu_acquirer_0 = module_0.BaiduAcquirer(function_type_0, function_type_0, enum_dict_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert f'{type(baidu_acquirer_0.session).__module__}.{type(baidu_acquirer_0.session).__qualname__}' == 'ast.FunctionType'
    assert f'{type(baidu_acquirer_0.headers).__module__}.{type(baidu_acquirer_0.headers).__qualname__}' == 'ast.FunctionType'
    assert f'{type(baidu_acquirer_0.proxies).__module__}.{type(baidu_acquirer_0.proxies).__qualname__}' == 'enum._EnumDict'
    assert len(baidu_acquirer_0.proxies) == 0
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    var_1 = baidu_acquirer_0.adjust(enum_dict_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'enum._EnumDict'
    assert len(var_1) == 0
    google_acquirer_0 = module_0.GoogleAcquirer(enum_dict_0, enum_dict_0, function_type_0)
    assert f'{type(google_acquirer_0).__module__}.{type(google_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.GoogleAcquirer'
    assert f'{type(google_acquirer_0.session).__module__}.{type(google_acquirer_0.session).__qualname__}' == 'enum._EnumDict'
    assert len(google_acquirer_0.session) == 0
    assert f'{type(google_acquirer_0.headers).__module__}.{type(google_acquirer_0.headers).__qualname__}' == 'enum._EnumDict'
    assert len(google_acquirer_0.headers) == 0
    assert f'{type(google_acquirer_0.proxies).__module__}.{type(google_acquirer_0.proxies).__qualname__}' == 'ast.FunctionType'
    assert google_acquirer_0.key is None
    assert module_0.GoogleAcquirer.host == 'https://translate.google.cn'
    none_type_0 = None
    var_2 = google_acquirer_0.enrich(none_type_0)
    var_3 = google_acquirer_0.n(function_type_0, enum_dict_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'ast.FunctionType'
    google_acquirer_0.acquire(google_acquirer_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    var_0 = module_2.purge()
    enum_dict_0 = var_0.__dir__()
    baidu_acquirer_0 = module_0.BaiduAcquirer(var_0, var_0, enum_dict_0)
    assert f'{type(baidu_acquirer_0).__module__}.{type(baidu_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.BaiduAcquirer'
    assert baidu_acquirer_0.session is None
    assert baidu_acquirer_0.headers is None
    assert baidu_acquirer_0.proxies == ['__new__', '__repr__', '__bool__', '__doc__', '__hash__', '__str__', '__getattribute__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__init__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__']
    assert baidu_acquirer_0.key is None
    assert module_0.BaiduAcquirer.host == 'http://fanyi.baidu.com/'
    var_1 = baidu_acquirer_0.adjust(enum_dict_0)
    google_acquirer_0 = module_0.GoogleAcquirer(enum_dict_0, enum_dict_0, var_0)
    assert f'{type(google_acquirer_0).__module__}.{type(google_acquirer_0).__qualname__}' == 'toolkit.translator.token_acquirer.GoogleAcquirer'
    assert google_acquirer_0.session == ['__new__', '__repr__', '__bool__', '__doc__', '__hash__', '__str__', '__getattribute__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__init__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__']
    assert google_acquirer_0.headers == ['__new__', '__repr__', '__bool__', '__doc__', '__hash__', '__str__', '__getattribute__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__init__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__']
    assert google_acquirer_0.proxies is None
    assert google_acquirer_0.key is None
    assert module_0.GoogleAcquirer.host == 'https://translate.google.cn'
    google_acquirer_0.n(var_0, enum_dict_0)