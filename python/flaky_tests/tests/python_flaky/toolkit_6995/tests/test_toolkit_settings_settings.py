# Automatically generated by Pynguin.
import pytest
import toolkit.settings.settings as module_0

def test_case_0():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    var_0 = settings_loader_0.load(settings_loader_0, settings_loader_0)
    assert len(settings_loader_0.settings) == 5
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_0) == 5

def test_case_1():
    settings_0 = module_0.Settings()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    var_0 = settings_0.get_int(settings_0, settings_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.settings.settings.Settings'
    assert len(var_0) == 0
    var_1 = settings_0.__ror__(settings_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    settings_0 = module_0.Settings()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    var_0 = settings_0.get_bool(settings_0)
    assert var_0 is False
    var_0.__setattr__(settings_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    settings_0 = module_0.Settings()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    bool_0 = True
    var_0 = settings_0.get_float(bool_0, bool_0)
    assert var_0 is True
    var_0.load_from_string()

def test_case_4():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    var_0 = settings_loader_0.load_from_string(module_name=settings_loader_0)

def test_case_5():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    var_0 = settings_loader_0.load_from_string()
    var_1 = settings_loader_0.load()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_1) == 0
    settings_loader_1 = module_0.SettingsLoader()
    var_2 = settings_loader_1.load(settings_loader_1, settings_loader_1)
    assert len(settings_loader_1.settings) == 5
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_2) == 5

def test_case_6():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_7():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    var_0 = settings_loader_0.load(settings_loader_0)
    assert len(settings_loader_0.settings) == 5
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_0) == 5
    var_1 = settings_loader_0.load(var_0, settings_loader_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_1) == 5
    var_2 = settings_loader_0.load_from_string(settings_loader_0)
    str_0 = ''
    settings_0 = module_0.Settings()
    var_3 = settings_0.get_int(str_0, var_0)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_3) == 5
    var_2.clear()

@pytest.mark.xfail(strict=True)
def test_case_8():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    var_0 = settings_loader_0.load_from_string(module_name=settings_loader_0)
    str_0 = '.py'
    settings_loader_0.load(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '$5y/NZ['
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    settings_0 = module_0.Settings(**dict_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    var_0 = settings_0.get_bool(dict_0, settings_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.settings.settings.Settings'
    assert len(var_0) == 1
    settings_0.get_float(str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    var_0 = settings_loader_0.load(settings_loader_0, settings_loader_0)
    assert len(settings_loader_0.settings) == 5
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(var_0) == 5
    var_1 = settings_loader_0.load_from_string(settings_loader_0)
    str_0 = ''
    settings_0 = module_0.Settings()
    settings_0.get_int(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '.py'
    settings_loader_0 = module_0.SettingsLoader()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'toolkit.settings'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.SettingsLoader.ignore == ['__builtins__', '__file__', '__package__', '__doc__', '__name__', '__cached__']
    assert f'{type(module_0.SettingsLoader.register_types).__module__}.{type(module_0.SettingsLoader.register_types).__qualname__}' == 'builtins.method'
    settings_loader_0.load_from_string(str_0)