# Automatically generated by Pynguin.
import pytest
import toolkit.settings.frozen as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.FrozenSettings()

def test_case_1():
    bool_0 = True
    list_0 = [bool_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert frozen_0 is True

def test_case_2():
    set_0 = set()
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 0

def test_case_3():
    set_0 = set()
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 0
    var_0 = frozen_0.keys()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'collections.abc.KeysView'
    assert len(var_0) == 0
    var_1 = var_0.__str__()
    assert var_1 == 'KeysView(set())'

def test_case_4():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()
    var_1 = frozen_0.__bool__()

def test_case_5():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()
    var_1 = frozen_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()
    frozen_0.__delitem__(var_0)

def test_case_7():
    set_0 = set()
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 0
    var_0 = frozen_0.normalize()

def test_case_8():
    set_0 = set()
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 0
    var_0 = frozen_0.normalize()
    var_1 = frozen_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()
    frozen_0.__getitem__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 0
    var_0 = frozen_0.normalize()
    frozen_0.insert(set_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()
    frozen_0.__setitem__(frozen_0, set_0)

def test_case_12():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()
    with pytest.raises(NotImplementedError):
        frozen_0.__setattr__(var_0, bool_0)

def test_case_13():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 1
    var_0 = frozen_0.normalize()

@pytest.mark.xfail(strict=True)
def test_case_14():
    set_0 = set()
    list_0 = [set_0]
    frozen_0 = module_0.Frozen(*list_0)
    assert f'{type(frozen_0).__module__}.{type(frozen_0).__qualname__}' == 'toolkit.settings.frozen.Frozen'
    assert len(frozen_0) == 0
    var_0 = frozen_0.__bool__()
    assert var_0 is False
    var_1 = frozen_0.normalize()
    list_1 = [frozen_0]
    frozen_1 = module_0.Frozen(*list_1)
    var_2 = frozen_1.normalize()
    var_1.__setitem__(var_2, var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    set_0 = set()
    list_0 = [set_0]
    frozen_settings_0 = module_0.FrozenSettings(*list_0)
    assert f'{type(frozen_settings_0).__module__}.{type(frozen_settings_0).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(frozen_settings_0) == 0
    dict_0 = {}
    frozen_settings_0.__new__(dict_0, dict_0)

def test_case_16():
    set_0 = set()
    list_0 = [set_0]
    frozen_settings_0 = module_0.FrozenSettings(*list_0)
    assert f'{type(frozen_settings_0).__module__}.{type(frozen_settings_0).__qualname__}' == 'toolkit.settings.frozen.FrozenSettings'
    assert len(frozen_settings_0) == 0
    str_0 = "'3y`<Ij;]:&"
    with pytest.raises(AttributeError):
        frozen_settings_0.__getattr__(str_0)