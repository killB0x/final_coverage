# Automatically generated by Pynguin.
import pytest
import toolkit.tools.managers as module_0

def test_case_0():
    timer_0 = module_0.Timer()
    var_0 = timer_0.__enter__()
    blocker_0 = module_0.Blocker(var_0)
    assert blocker_0.interval == pytest.approx(0.5, abs=0.01, rel=0.01)
    except_context_0 = module_0.ExceptContext(func_name=blocker_0)
    assert f'{type(except_context_0.func_name).__module__}.{type(except_context_0.func_name).__qualname__}' == 'toolkit.tools.managers.Blocker'

def test_case_1():
    except_context_0 = module_0.ExceptContext()
    assert except_context_0.func_name == 'execute_ast'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'bTUq;=CYxD6N55\x0cb5k'
    except_context_0 = module_0.ExceptContext(errback=str_0, finalback=str_0)
    assert except_context_0.func_name == 'execute_ast'
    none_type_0 = None
    list_0 = [none_type_0]
    except_context_0.__exit__(except_context_0, none_type_0, list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    timer_0 = module_0.Timer(bool_0)
    blocker_0 = module_0.Blocker(bool_0)
    assert blocker_0.interval == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_0 = blocker_0.wait_timeout_or_notify()
    var_0.wait_timeout_or_notify()

def test_case_4():
    timer_0 = module_0.Timer()

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'bTUq;=CYxD6N55\x0cb5k'
    float_0 = 1262.6217
    except_context_0 = module_0.ExceptContext(errback=str_0, finalback=str_0)
    assert except_context_0.func_name == 'execute_ast'
    except_context_1 = module_0.ExceptContext()
    assert except_context_1.func_name == 'execute_ast'
    var_0 = except_context_1.__enter__()
    assert var_0.func_name == 'execute_ast'
    var_1 = var_0.__exit__(float_0, float_0, float_0)
    assert var_1 is False
    var_1.__exit__(str_0, str_0, str_0)

def test_case_6():
    bool_0 = True
    timer_0 = module_0.Timer()
    blocker_0 = module_0.Blocker(bool_0)
    assert blocker_0.interval == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_0 = blocker_0.wait_timeout_or_notify()
    var_1 = blocker_0.wait_timeout_or_notify()
    var_2 = timer_0.__exit__(var_1, var_1, bool_0)
    assert timer_0.cost == pytest.approx(2.0031585693359375, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    timer_0 = module_0.Timer()
    var_0 = module_0.Blocker(bool_0)
    assert var_0.interval == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_1 = var_0.wait_timeout_or_notify()
    var_1.__exit__(var_0, var_1, var_1)

def test_case_8():
    bool_0 = True
    timer_0 = module_0.Timer()
    blocker_0 = module_0.Blocker(bool_0)
    assert blocker_0.interval == pytest.approx(0.5, abs=0.01, rel=0.01)
    var_0 = blocker_0.wait_timeout_or_notify()