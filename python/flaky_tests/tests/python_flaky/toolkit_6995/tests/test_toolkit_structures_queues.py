# Automatically generated by Pynguin.
import pytest
import toolkit.structures.queues as module_0
import json.encoder as module_1
import json.decoder as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.FifoDiskQueue(none_type_0)

def test_case_1():
    bool_0 = True
    redis_queue_0 = module_0.RedisQueue(bool_0, bool_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn is True
    assert redis_queue_0.key is True

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    redis_queue_0 = module_0.RedisQueue(none_type_0, none_type_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn is None
    assert redis_queue_0.key is None
    redis_queue_0.push()

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    bool_0 = True
    var_0 = fifo_disk_queue_0.rid(bool_0)
    redis_queue_0 = module_0.RedisQueue(bool_0, bool_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn is True
    assert redis_queue_0.key is True
    redis_queue_0.__len__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    bool_0 = False
    redis_queue_0 = module_0.RedisQueue(str_0, bool_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn == 'J]M.0F}e%'
    assert redis_queue_0.key is False
    redis_queue_0.rid(str_0)

def test_case_5():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    redis_queue_0 = module_0.RedisQueue(none_type_0, none_type_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn is None
    assert redis_queue_0.key is None
    redis_queue_0.clear()

def test_case_7():
    str_0 = 'J]M.0F}e8~%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    redis_queue_0 = module_0.RedisQueue(bool_0, bool_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn is True
    assert redis_queue_0.key is True
    var_0 = redis_queue_0.close()
    module_1.py_encode_basestring(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    redis_queue_0 = module_0.RedisQueue(bool_0, bool_0)
    assert f'{type(redis_queue_0).__module__}.{type(redis_queue_0).__qualname__}' == 'toolkit.structures.queues.RedisQueue'
    assert f'{type(redis_queue_0.lock).__module__}.{type(redis_queue_0.lock).__qualname__}' == '_thread.RLock'
    assert redis_queue_0.redis_conn is True
    assert redis_queue_0.key is True
    redis_queue_0.pop()

def test_case_10():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    bool_0 = True
    var_0 = fifo_disk_queue_0.rid(bool_0)

def test_case_11():
    str_0 = 'J]M.0F}e8~%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    var_0 = fifo_disk_queue_0.pop()

def test_case_12():
    str_0 = 'J]M.0F}e8~%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    fifo_disk_queue_0.push(*str_0)

def test_case_14():
    str_0 = 'J]M.0F}f%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    bool_0 = False
    var_0 = fifo_disk_queue_0.rid(bool_0)
    var_1 = var_0.__len__()
    with pytest.raises(module_2.JSONDecodeError):
        module_2.py_scanstring(str_0, bool_0, _b=var_0)

def test_case_15():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    var_0 = fifo_disk_queue_0.close()

def test_case_16():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    fifo_disk_queue_0.clear()

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'J]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    var_0 = fifo_disk_queue_0.push()
    list_0 = [fifo_disk_queue_0, str_0, fifo_disk_queue_0]
    fifo_disk_queue_0.push(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'J[D]M.0F}e%'
    fifo_disk_queue_0 = module_0.FifoDiskQueue(str_0)
    assert f'{type(fifo_disk_queue_0).__module__}.{type(fifo_disk_queue_0).__qualname__}' == 'toolkit.structures.queues.FifoDiskQueue'
    assert len(fifo_disk_queue_0) == 0
    assert module_0.FifoDiskQueue.szhdr_format == '>L'
    assert module_0.FifoDiskQueue.szhdr_size == 4
    fifo_disk_queue_1 = module_0.FifoDiskQueue(str_0)
    assert len(fifo_disk_queue_1) == 0
    var_0 = fifo_disk_queue_1.pop()
    var_1 = fifo_disk_queue_1.close()
    fifo_disk_queue_1.clear()