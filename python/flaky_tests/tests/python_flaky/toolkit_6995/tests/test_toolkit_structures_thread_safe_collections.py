# Automatically generated by Pynguin.
import pytest
import toolkit.structures.thread_safe_collections as module_0

def test_case_0():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_1():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    var_0 = thread_safe_set_0.__isub__(thread_safe_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(var_0) == 0
    thread_safe_set_0.add(thread_safe_set_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    thread_safe_set_0.discard(thread_safe_set_0)

def test_case_3():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0
    var_0 = tread_safe_dict_0.pop_all()
    thread_safe_set_0 = module_0.ThreadSafeSet(*var_0)
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    var_1 = tread_safe_dict_0.get(var_0, thread_safe_set_0)
    assert len(var_1) == 0
    var_2 = thread_safe_set_0.update(tread_safe_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0
    var_0 = tread_safe_dict_0.pop_all()
    thread_safe_set_0 = module_0.ThreadSafeSet(*var_0)
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    thread_safe_set_0.__contains__(tread_safe_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    thread_safe_set_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_6():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    var_0 = thread_safe_set_0.__len__()
    assert var_0 == 0
    thread_safe_set_1 = module_0.ThreadSafeSet()
    var_1 = thread_safe_set_1.pop_all()
    var_2 = thread_safe_set_1.add(var_1)
    assert len(thread_safe_set_1) == 1
    module_0.TreadSafeDict(*var_1)

def test_case_7():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0

def test_case_8():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0
    var_0 = tread_safe_dict_0.update()
    var_1 = tread_safe_dict_0.pop_all()
    thread_safe_set_0 = module_0.ThreadSafeSet(*var_1)
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0

def test_case_9():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0
    var_0 = tread_safe_dict_0.pop_all()
    thread_safe_set_0 = module_0.ThreadSafeSet(*var_0)
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_10():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0
    var_0 = tread_safe_dict_0.update()
    var_1 = tread_safe_dict_0.__setitem__(var_0, tread_safe_dict_0)
    assert len(tread_safe_dict_0) == 1
    var_2 = tread_safe_dict_0.pop_all()
    module_0.ThreadSafeSet(*var_2)

@pytest.mark.xfail(strict=True)
def test_case_11():
    tread_safe_dict_0 = module_0.TreadSafeDict()
    assert len(tread_safe_dict_0) == 0
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    var_0 = tread_safe_dict_0.update()
    var_1 = tread_safe_dict_0.__setitem__(var_0, tread_safe_dict_0)
    assert len(tread_safe_dict_0) == 1
    var_2 = tread_safe_dict_0.pop_all()
    var_3 = tread_safe_dict_0.setdefault(var_2)
    assert len(tread_safe_dict_0) == 2
    module_0.ThreadSafeSet(*var_2)

@pytest.mark.xfail(strict=True)
def test_case_12():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    var_0 = thread_safe_set_0.pop_all()
    thread_safe_set_1 = module_0.ThreadSafeSet(*var_0)
    assert f'{type(thread_safe_set_1).__module__}.{type(thread_safe_set_1).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_1) == 0
    var_1 = thread_safe_set_0.__contains__(var_0)
    assert var_1 is False
    thread_safe_set_2 = module_0.ThreadSafeSet()
    var_0.__contains__(thread_safe_set_2)

@pytest.mark.xfail(strict=True)
def test_case_13():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    var_0 = thread_safe_set_0.pop_all()
    thread_safe_set_1 = thread_safe_set_0.add(var_0)
    assert len(thread_safe_set_0) == 1
    module_0.TreadSafeDict(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    thread_safe_set_0 = module_0.ThreadSafeSet()
    assert f'{type(thread_safe_set_0).__module__}.{type(thread_safe_set_0).__qualname__}' == 'toolkit.structures.thread_safe_collections.ThreadSafeSet'
    assert len(thread_safe_set_0) == 0
    none_type_0 = None
    var_0 = thread_safe_set_0.add(none_type_0)
    assert len(thread_safe_set_0) == 1
    var_1 = thread_safe_set_0.pop_all()
    var_2 = thread_safe_set_0.add(var_1)
    assert len(thread_safe_set_0) == 2
    module_0.TreadSafeDict(*var_1)