# Automatically generated by Pynguin.
import pytest
import phenum.polyaburnside as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = (-1424.76292+1890.67j)
    module_0.Sequence(complex_0, complex_0, complex_0, complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 379
    module_0.Sequence(int_0, int_0, int_0, int_0, int_0, int_0)

def test_case_2():
    str_0 = '(_7G+<C'
    product_0 = module_0.Product(str_0, str_0)
    var_0 = product_0.coeff()
    assert var_0 == ''

def test_case_3():
    object_0 = module_1.object()
    product_0 = module_0.Product(object_0, object_0)
    var_0 = product_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = (-1424.76292+1890.67j)
    module_0.polya(complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'<W\x88\xe0'
    module_0.polya(bytes_0, bytes_0, bytes_0, bytes_0)

def test_case_6():
    str_0 = '(_7G+<C'
    product_0 = module_0.Product(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\x07^\xf7\xa8\xec/}o\xc9\xc1\x80\x1d\xb81\x83\xa9\x96\xee\xd4\xca'
    module_0.Multinomial(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\x00\xac\xe0'
    product_0 = module_0.Product(bytes_0, bytes_0)
    var_0 = product_0.__str__()
    assert var_0 == "b'\\x00\\xac\\xe0'"
    bool_0 = True
    var_1 = var_0.__str__()
    multinomial_0 = module_0.Multinomial(bool_0, var_1, bytes_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power is True
    assert multinomial_0.coeff == "b'\\x00\\xac\\xe0'"
    assert multinomial_0.arrowings == b'\x00\xac\xe0'
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 1
    assert multinomial_0.possible_powers == [0, 1]
    var_2 = multinomial_0.__str__()
    assert var_2 == "(1^True + b'\\x00\\xac\\xe0'^True + b'\\x00\\xac\\xe0'^True)^1"
    var_2.nchoosekm(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b'\x00q%\xe0'
    bool_0 = True
    multinomial_0 = module_0.Multinomial(bool_0, bool_0, bool_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power is True
    assert multinomial_0.coeff is True
    assert multinomial_0.arrowings is True
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 1
    assert multinomial_0.possible_powers == [0, 1]
    multinomial_0.nchoosekm(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'-\x9a\xe2\x02\xe9\x1c\xb7\xd7\x9aYc\xdcX\xd7O\xe7hKjf'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.group(list_0)

def test_case_11():
    bytes_0 = b'\x00\x07'
    bool_0 = True
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert sequence_0.used == 1
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    var_0 = sequence_0.expand()
    var_1 = module_0.group(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 369
    module_0.polya(int_0, int_0, int_0)

def test_case_13():
    set_0 = set()
    str_0 = 'DETAILS'
    with pytest.raises(ValueError):
        module_0.polya(set_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -439
    none_type_0 = None
    multinomial_0 = module_0.Multinomial(int_0, int_0, int_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power == -439
    assert multinomial_0.coeff == -439
    assert multinomial_0.arrowings == -439
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == -439
    assert multinomial_0.possible_powers == [0]
    var_0 = multinomial_0.nchoosek(none_type_0, int_0)
    assert var_0 == 0
    module_0.group(var_0)

def test_case_15():
    bool_0 = True
    multinomial_0 = module_0.Multinomial(bool_0, bool_0, bool_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power is True
    assert multinomial_0.coeff is True
    assert multinomial_0.arrowings is True
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 1
    assert multinomial_0.possible_powers == [0, 1]
    var_0 = multinomial_0.nchoosek(bool_0, bool_0)
    assert var_0 == 1

def test_case_16():
    bytes_0 = b'\x00%\xe0'
    product_0 = module_0.Product(bytes_0, bytes_0)
    var_0 = product_0.coeff()
    assert var_0 == b''

def test_case_17():
    bytes_0 = b'\x00%\xe0'
    product_0 = module_0.Product(bytes_0, bytes_0)
    int_0 = 351
    multinomial_0 = module_0.Multinomial(int_0, product_0, int_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power == 351
    assert f'{type(multinomial_0.coeff).__module__}.{type(multinomial_0.coeff).__qualname__}' == 'phenum.polyaburnside.Product'
    assert multinomial_0.arrowings == 351
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 351
    assert multinomial_0.possible_powers == [0, 351]
    var_0 = multinomial_0.nchoosekm(bytes_0)
    assert var_0 == 0
    var_1 = var_0.__str__()
    assert var_1 == '0'

def test_case_18():
    bytes_0 = b'\x00%\xe0'
    bool_0 = False
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert f'{type(sequence_0).__module__}.{type(sequence_0).__qualname__}' == 'phenum.polyaburnside.Sequence'
    assert sequence_0.used == 0
    assert sequence_0.parent is None
    assert f'{type(sequence_0.kids).__module__}.{type(sequence_0.kids).__qualname__}' == 'builtins.list'
    assert len(sequence_0.kids) == 1
    assert sequence_0.varcount == 3
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'

def test_case_19():
    bytes_0 = b'\x00%\xe0'
    bool_0 = False
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert f'{type(sequence_0).__module__}.{type(sequence_0).__qualname__}' == 'phenum.polyaburnside.Sequence'
    assert sequence_0.used == 0
    assert sequence_0.parent is None
    assert f'{type(sequence_0.kids).__module__}.{type(sequence_0.kids).__qualname__}' == 'builtins.list'
    assert len(sequence_0.kids) == 1
    assert sequence_0.varcount == 3
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    var_0 = sequence_0.expand()

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b'\xe1z'
    bool_0 = True
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert sequence_0.used == 1
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    sequence_0.expand_noappend(bytes_0, sequence_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b'\x00%\xe0'
    bool_0 = False
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert f'{type(sequence_0).__module__}.{type(sequence_0).__qualname__}' == 'phenum.polyaburnside.Sequence'
    assert sequence_0.used == 0
    assert sequence_0.parent is None
    assert f'{type(sequence_0.kids).__module__}.{type(sequence_0.kids).__qualname__}' == 'builtins.list'
    assert len(sequence_0.kids) == 1
    assert sequence_0.varcount == 3
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    sequence_0.expand_noappend(bytes_0, sequence_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b'\x00\xe7\xe0'
    bool_0 = True
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert sequence_0.used == 1
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    sequence_0.expand_noappend(bytes_0, sequence_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b'%'
    bool_0 = False
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert f'{type(sequence_0).__module__}.{type(sequence_0).__qualname__}' == 'phenum.polyaburnside.Sequence'
    assert sequence_0.used == 0
    assert sequence_0.parent is None
    assert sequence_0.kids == []
    assert sequence_0.varcount == 1
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    product_0 = module_0.Product(bytes_0, bytes_0)
    var_0 = product_0.__str__()
    assert var_0 == "b'%'"
    var_1 = product_0.coeff()
    assert var_1 == b''
    var_2 = sequence_0.expand()
    list_0 = []
    module_0.polya(var_1, list_0)

def test_case_24():
    bytes_0 = b''
    bool_0 = True
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert sequence_0.used == 1
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        sequence_0.expand_noappend(bytes_0, sequence_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b'\x00%\xe0'
    bool_0 = False
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert f'{type(sequence_0).__module__}.{type(sequence_0).__qualname__}' == 'phenum.polyaburnside.Sequence'
    assert sequence_0.used == 0
    assert sequence_0.parent is None
    assert f'{type(sequence_0.kids).__module__}.{type(sequence_0.kids).__qualname__}' == 'builtins.list'
    assert len(sequence_0.kids) == 1
    assert sequence_0.varcount == 3
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    product_0 = module_0.Product(bytes_0, bytes_0)
    var_0 = product_0.__str__()
    assert var_0 == "b'\\x00%\\xe0'"
    var_1 = product_0.coeff()
    assert var_1 == b''
    sequence_0.expand_noappend(var_1, sequence_0, bytes_0)

def test_case_26():
    bytes_0 = b'\x00%\xe0'
    bool_0 = False
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert f'{type(sequence_0).__module__}.{type(sequence_0).__qualname__}' == 'phenum.polyaburnside.Sequence'
    assert sequence_0.used == 0
    assert sequence_0.parent is None
    assert f'{type(sequence_0.kids).__module__}.{type(sequence_0.kids).__qualname__}' == 'builtins.list'
    assert len(sequence_0.kids) == 1
    assert sequence_0.varcount == 3
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    var_0 = sequence_0.expand()
    var_1 = module_0.group(var_0)

def test_case_27():
    bool_0 = False
    bool_1 = True
    multinomial_0 = module_0.Multinomial(bool_1, bool_1, bool_1)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power is True
    assert multinomial_0.coeff is True
    assert multinomial_0.arrowings is True
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 1
    assert multinomial_0.possible_powers == [0, 1]
    var_0 = multinomial_0.nchoosek(bool_0, bool_0)
    assert var_0 == 1

@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b'\x00%\x01\xe0'
    bool_0 = True
    sequence_0 = module_0.Sequence(bool_0, bytes_0, bool_0, bool_0, bytes_0)
    assert sequence_0.used == 1
    assert len(sequence_0.kids) == 1
    assert f'{type(module_0.Sequence.kidcount).__module__}.{type(module_0.Sequence.kidcount).__qualname__}' == 'builtins.property'
    product_0 = module_0.Product(bytes_0, bytes_0)
    var_0 = product_0.__str__()
    assert var_0 == "b'\\x00%\\x01\\xe0'"
    var_1 = sequence_0.expand()
    var_2 = product_0.coeff()
    assert var_2 == b''
    var_3 = module_0.group(var_1)
    module_0.polya(var_2, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = ''
    list_0 = [str_0, str_0]
    tuple_0 = (list_0, str_0, list_0)
    module_0.polya(str_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = ''
    list_0 = []
    tuple_0 = (list_0, str_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.polya(str_0, tuple_1)

@pytest.mark.xfail(strict=True)
def test_case_31():
    int_0 = -1492
    product_0 = module_0.Product(int_0, int_0)
    bool_0 = True
    multinomial_0 = module_0.Multinomial(int_0, product_0, int_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power == -1492
    assert f'{type(multinomial_0.coeff).__module__}.{type(multinomial_0.coeff).__qualname__}' == 'phenum.polyaburnside.Product'
    assert multinomial_0.arrowings == -1492
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == -1492
    assert multinomial_0.possible_powers == [0]
    var_0 = multinomial_0.nchoosek(int_0, bool_0)
    assert var_0 == 0
    var_1 = product_0.__str__()
    assert var_1 == '-1492'
    var_0.coeff()

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = ''
    int_0 = 27
    multinomial_0 = module_0.Multinomial(int_0, int_0, str_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power == 27
    assert multinomial_0.coeff == 27
    assert multinomial_0.arrowings == ''
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 27
    assert multinomial_0.possible_powers == [0, 27]
    var_0 = multinomial_0.nchoosekm(str_0)
    assert var_0 == 1
    bool_0 = True
    product_0 = module_0.Product(bool_0, var_0)
    assert product_0.targets == 1
    module_0.Sequence(bool_0, var_0, bool_0, bool_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b'\x00%\xe0'
    bool_0 = True
    multinomial_0 = module_0.Multinomial(bool_0, bool_0, bytes_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power is True
    assert multinomial_0.coeff is True
    assert multinomial_0.arrowings == b'\x00%\xe0'
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 1
    assert multinomial_0.possible_powers == [0, 1]
    var_0 = multinomial_0.nchoosekm(bytes_0)
    assert var_0 == pytest.approx(1.2976481296717644e+45, abs=0.01, rel=0.01)
    var_1 = var_0.__str__()
    assert var_1 == '1.2976481296717644e+45'
    module_0.Sequence(bytes_0, bool_0, bytes_0, var_1, var_1, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    bytes_0 = b'\x1e\x00%\xe0'
    bool_0 = True
    multinomial_0 = module_0.Multinomial(bool_0, bool_0, bytes_0)
    assert f'{type(multinomial_0).__module__}.{type(multinomial_0).__qualname__}' == 'phenum.polyaburnside.Multinomial'
    assert multinomial_0.power is True
    assert multinomial_0.coeff is True
    assert multinomial_0.arrowings == b'\x1e\x00%\xe0'
    assert multinomial_0.exponent == 1
    assert multinomial_0.powersum == 1
    assert multinomial_0.possible_powers == [0, 1]
    var_0 = multinomial_0.nchoosekm(bytes_0)
    assert var_0 == pytest.approx(8.589378450894915e+85, abs=0.01, rel=0.01)
    var_1 = var_0.__str__()
    assert var_1 == '8.589378450894915e+85'
    module_0.Sequence(bytes_0, bool_0, bytes_0, var_1, var_1, bytes_0)