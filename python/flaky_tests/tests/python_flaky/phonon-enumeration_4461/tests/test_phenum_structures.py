# Automatically generated by Pynguin.
import pytest
import phenum.structures as module_0

def test_case_0():
    list_0 = []
    with pytest.raises(ValueError):
        module_0.make_enum_in(list_0, list_0, list_0, sizes=list_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.make_enum_in(none_type_0, none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.make_enum_in(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)

def test_case_3():
    str_0 = '~s8|SM#R8.Y4m:0V@-*'
    with pytest.raises(ValueError):
        module_0.make_enum_in(str_0, str_0, str_0)

def test_case_4():
    str_0 = '~stQBTKwu`'
    with pytest.raises(ValueError):
        module_0.make_enum_in(str_0, str_0, str_0, sizes=str_0, save=str_0, seed=str_0, restrict=str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    list_0 = []
    module_0.make_enum_in(list_0, list_0, list_0, list_0, list_0, seed=list_0, restrict=list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ''
    module_0.make_enum_in(str_0, str_0, str_0, str_0, save=str_0)

def test_case_7():
    str_0 = 'ha'
    with pytest.raises(ValueError):
        module_0.make_enum_in(str_0, str_0, str_0, seed=str_0)

def test_case_8():
    str_0 = 'shape'
    with pytest.raises(ValueError):
        module_0.make_enum_in(str_0, str_0, str_0, seed=str_0)

def test_case_9():
    list_0 = []
    str_0 = 'shape'
    set_0 = module_0.make_enum_in(list_0, str_0, list_0, sizes=list_0, save=list_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'conc'
    none_type_0 = None
    list_0 = []
    module_0.make_enum_in(str_0, str_0, none_type_0, list_0, list_0, seed=none_type_0)

def test_case_11():
    list_0 = []
    str_0 = 'shape'
    var_0 = module_0.make_enum_in(str_0, str_0, str_0, sizes=list_0)

def test_case_12():
    list_0 = []
    str_0 = 'size'
    int_0 = 25
    var_0 = module_0.make_enum_in(int_0, str_0, str_0, int_0, list_0, int_0)

def test_case_13():
    list_0 = []
    str_0 = 'size'
    int_0 = -193
    var_0 = module_0.make_enum_in(int_0, str_0, str_0, int_0, list_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    list_0 = []
    str_0 = 'shape'
    set_0 = set()
    var_0 = module_0.make_enum_in(list_0, str_0, str_0, sizes=list_0, save=set_0)
    var_1 = module_0.make_enum_in(set_0, str_0, str_0, sizes=list_0, save=str_0, seed=set_0)
    dict_0 = {var_1: list_0, var_1: var_1, var_0: str_0}
    list_1 = [list_0, dict_0, var_1, dict_0]
    bool_0 = True
    bool_1 = True
    tuple_0 = (var_0, bool_0, var_1, bool_1)
    module_0.make_enum_in(dict_0, list_1, bool_0, sizes=set_0, restrict=tuple_0)

def test_case_15():
    list_0 = []
    str_0 = 'conc'
    list_1 = [str_0, str_0]
    with pytest.raises(ValueError):
        module_0.make_enum_in(list_1, list_1, list_1, sizes=list_0, save=list_1, restrict=list_1)

def test_case_16():
    list_0 = []
    str_0 = 'shape'
    set_0 = set()
    bool_0 = False
    tuple_0 = (bool_0, str_0, str_0, bool_0)
    with pytest.raises(ValueError):
        module_0.make_enum_in(list_0, list_0, bool_0, sizes=set_0, restrict=tuple_0)

def test_case_17():
    list_0 = []
    str_0 = 'shape'
    set_0 = set()
    bool_0 = False
    tuple_0 = (str_0, str_0, str_0, bool_0)
    with pytest.raises(ValueError):
        module_0.make_enum_in(bool_0, list_0, bool_0, sizes=set_0, restrict=tuple_0)

def test_case_18():
    list_0 = []
    str_0 = 'conc'
    var_0 = module_0.make_enum_in(str_0, str_0, str_0, sizes=list_0, save=str_0)

def test_case_19():
    list_0 = []
    str_0 = 'all'
    var_0 = module_0.make_enum_in(str_0, str_0, str_0, sizes=list_0, save=str_0)

def test_case_20():
    list_0 = []
    str_0 = 'size'
    set_0 = {str_0}
    var_0 = module_0.make_enum_in(list_0, str_0, str_0, sizes=list_0, save=set_0)

def test_case_21():
    list_0 = []
    str_0 = 'conc'
    var_0 = module_0.make_enum_in(str_0, str_0, list_0, sizes=list_0, save=list_0)
    int_0 = -1
    var_1 = module_0.make_enum_in(int_0, str_0, str_0, int_0, list_0, int_0, int_0)
    str_1 = 'OAIG1y'
    with pytest.raises(ValueError):
        module_0.make_enum_in(str_0, var_0, var_1, list_0, str_1, var_1)