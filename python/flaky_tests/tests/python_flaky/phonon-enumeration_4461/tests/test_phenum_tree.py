# Automatically generated by Pynguin.
import pytest
import phenum.tree as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'U\x84\x85\xa2\x96\xf1<.\xe22\x80#:'
    module_0.brancher(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    module_0.guess_and_check_brancher(tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0, tuple_0)

def test_case_2():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_0, list_0, list_0, subset=list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, bool_0, list_0, list_1)
    module_0.brancher(list_0, bool_0, var_0, var_0, list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xf45\x92\xe9\x86\xf4\xcc\x9a\xf53\x9bW'
    module_0.guess_and_check_brancher(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)

def test_case_5():
    tuple_0 = ()
    bool_0 = True
    var_0 = module_0.guess_and_check_brancher(tuple_0, tuple_0, tuple_0, bool_0, bool_0, tuple_0, bool_0)

def test_case_6():
    bytes_0 = b''
    int_0 = -1496
    var_0 = module_0.guess_and_check_brancher(bytes_0, bytes_0, bytes_0, bytes_0, int_0, int_0, int_0)

def test_case_7():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_1, list_0, list_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.brancher(list_0, list_1, list_1, list_0, list_0, list_0, subset=list_0)

def test_case_9():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_1, list_0, list_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    none_type_0 = None
    list_0 = []
    module_0.guess_and_check_brancher(list_0, list_0, list_0, bool_0, list_0, none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = []
    module_0.brancher(list_0, list_1, list_1, list_1, list_1, list_1, subset=list_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = []
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.brancher(list_0, list_1, list_1, list_1, list_1, list_0, subset=tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, bool_0, bool_0, bool_0, subset=bool_0)
    float_0 = -3232.0
    bool_1 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_1, bool_1, bool_0, set_0)
    module_0.brancher(float_0, tuple_0, var_0, float_0, bool_1, none_type_0, none_type_0)

def test_case_14():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_0, list_0, list_0, subset=list_0)

def test_case_15():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_0, list_0, list_0, subset=list_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = []
    module_0.brancher(list_0, list_1, list_1, bool_0, list_1, list_1)

def test_case_17():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    list_1 = []
    var_0 = module_0.brancher(list_0, list_0, list_1, none_type_0, list_0, list_0, accept=list_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_0, list_1, bool_0)
    module_1.object(*var_0)

def test_case_19():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    list_1 = []
    var_0 = module_0.guess_and_check_brancher(list_1, list_1, list_1, bool_0, list_0, none_type_0, bool_0)
    var_1 = module_0.brancher(list_0, list_1, var_0, var_0, none_type_0, bool_0, accept=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    list_1 = []
    var_0 = module_0.guess_and_check_brancher(list_1, list_1, list_1, bool_0, list_0, none_type_0, bool_0)
    module_0.guess_and_check_brancher(list_1, var_0, list_1, list_0, list_0, list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_0, list_1, bool_0)
    dict_0 = {}
    module_0.guess_and_check_brancher(list_0, dict_0, list_1, list_0, list_1, list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = []
    var_0 = module_0.brancher(list_0, list_1, list_1, list_0, list_0, list_0, subset=list_0)
    tuple_0 = (var_0, var_0, var_0, list_1)
    module_0.brancher(list_0, tuple_0, list_1, tuple_0, list_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    list_1 = []
    var_0 = module_0.guess_and_check_brancher(list_1, list_1, list_1, bool_0, list_0, none_type_0, bool_0)
    str_0 = 'uPEQ9MJ7a..7`'
    module_0.brancher(list_0, str_0, list_1, str_0, none_type_0, list_1)