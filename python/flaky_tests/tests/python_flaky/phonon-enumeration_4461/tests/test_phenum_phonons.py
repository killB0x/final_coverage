# Automatically generated by Pynguin.
import pytest
import phenum.phonons as module_0
import phenum.numerics as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    set_0 = set()
    bool_0 = False
    module_0.add_arrows(set_0, set_0, set_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xdd'
    module_0.how_many_arrows(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    int_0 = 1
    none_type_0 = None
    module_0.add_arrows(dict_0, dict_0, int_0, int_0, num_wanted=int_0, small=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'L}EO0DP(l'
    module_0.arrow_concs(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -834
    module_0.enum_sys(int_0, int_0, int_0, int_0, int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 0
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b'\xae\xf7\xef\xfc?\xc7'
    tuple_0 = (list_0, bytes_0)
    var_0 = module_0.how_many_arrows(tuple_0)
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.add_arrows(set_0, set_0, none_type_0, none_type_0, num_wanted=bool_0)

def test_case_6():
    bytes_0 = b''
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)

def test_case_7():
    bytes_0 = b'\xdd'
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    int_0 = 1
    float_0 = -1972.2706
    var_0 = module_0.add_arrows(dict_0, dict_0, int_0, dict_0, float_0, dict_0, dict_0, supers=float_0)
    module_0.how_many_arrows(float_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    int_0 = 1
    none_type_0 = None
    var_0 = module_0.arrow_concs(dict_0, none_type_0)
    var_1 = module_0.add_arrows(var_0, dict_0, int_0, var_0, num_wanted=var_0)
    module_0.how_many_arrows(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.arrow_concs(dict_0, none_type_0)
    bool_0 = True
    var_1 = module_0.add_arrows(var_0, dict_0, bool_0, var_0, num_wanted=bool_0)
    module_0.add_arrows(dict_0, var_0, var_1, none_type_0, supers=var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.arrow_concs(dict_0, none_type_0)
    bool_0 = False
    var_1 = module_0.add_arrows(var_0, dict_0, bool_0, var_0, num_wanted=bool_0)
    module_0.add_arrows(var_0, var_1, bool_0, dict_0, small=var_1, supers=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\xe0\xba\x8a\xa8\x0c\x0c.joj'
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)
    dict_0 = {}
    none_type_0 = None
    var_1 = module_0.arrow_concs(dict_0, none_type_0)
    bool_0 = False
    var_2 = module_0.add_arrows(var_1, var_1, bool_0, dict_0, small=var_1, supers=bool_0)
    dict_1 = {}
    module_0.add_arrows(var_1, dict_0, dict_1, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\xa39+\x04q}J\xfd'
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)
    bytes_1 = b'\xe7p75\x9f@\x01Fp\xb5G\x05\x1c0\x03'
    var_1 = module_0.arrow_concs(bytes_1, bytes_1)
    module_0.get_arrow_concs(var_1)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'+9\x04\x06D\xbb\x8b\xf2\xab\xf8z\xbcL\xf7'
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)
    bool_0 = False
    module_0.add_arrows(var_0, var_0, bool_0, var_0, num_wanted=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'\xaf\xc9\x88`\xcc\xc6`Z'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = module_0.how_many_arrows(list_0)
    module_0.add_arrows(list_0, bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    var_0 = module_0.arrow_concs(tuple_0, tuple_0)
    module_0.add_arrows(var_0, tuple_0, bool_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b'+9\x04\x06D\xbb\x8b\xf2\xab\xf8z\xbcL\xf7'
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)
    dict_0 = {}
    bool_0 = False
    module_0.add_arrows(var_0, dict_0, bool_0, var_0, num_wanted=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'\xa7\x01\x9aLP\x17V\xd5\x00fH\xe3>\xd0K'
    var_0 = module_0.arrow_concs(bytes_0, bytes_0)
    dict_0 = {}
    var_1 = module_0.arrow_concs(dict_0, var_0)
    bool_0 = False
    var_2 = module_0.add_arrows(var_1, dict_0, bool_0, var_1, num_wanted=bool_0)
    dict_1 = {}
    module_0.add_arrows(var_1, dict_0, dict_1, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b'\xc0\x00@\x05\x8c:\xff!\xa1n\xd0\x9f\n\xf6\x83z\xb0'
    bytes_1 = b'\x99\x81$\xa84o\xe2Q\x80A\xda'
    var_0 = module_0.arrow_concs(bytes_1, bytes_0)
    dict_0 = {}
    module_1.multinomial(dict_0)