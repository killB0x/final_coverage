# Automatically generated by Pynguin.
import pytest
import skbuild._version as module_0
import builtins as module_1

def test_case_0():
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == ''
    assert var_0.parentdir_prefix == 'None'
    assert var_0.versionfile_source == 'skbuild/_version.py'
    assert len(module_0.HANDLERS) == 1

def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1

def test_case_2():
    float_0 = -1940.0
    with pytest.raises(AssertionError):
        module_0.run_command(float_0, float_0, hide_stderr=float_0)

def test_case_3():
    tuple_0 = ()
    var_0 = module_0.get_config()
    assert var_0.VCS == 'git'
    assert var_0.style == 'pep440'
    assert var_0.tag_prefix == ''
    assert var_0.parentdir_prefix == 'None'
    assert var_0.versionfile_source == 'skbuild/_version.py'
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(tuple_0, tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, verbose=var_1)
    var_3 = module_0.get_versions()
    module_0.git_pieces_from_vcs(var_2, var_0, var_0)

def test_case_5():
    str_0 = 'Z"gifbF?'
    var_0 = module_0.git_get_keywords(str_0)
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    with pytest.raises(ValueError):
        module_0.render(var_1, var_1)

def test_case_6():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == '+'

def test_case_7():
    str_0 = "This function instantiates a Distribution object and\n    parses the command line arguments.\n\n    It returns the tuple ``(display_only, help_commands, commands, hide_listing, force_cmake, skip_cmake, plat_name)``\n    where\n\n    - display_only is a boolean indicating if an argument like '--help',\n      '--help-commands' or '--author' was passed.\n    - help_commands is a boolean indicating if argument '--help-commands'\n      was passed.\n    - commands contains the list of commands that were passed.\n    - hide_listing is a boolean indicating if the list of files being included\n      in the distribution is displayed or not.\n    - force_cmake a boolean indicating that CMake should always be executed.\n    - skip_cmake is a boolean indicating if the execution of CMake should\n      explicitly be skipped.\n    - plat_name is a string identifying the platform name to embed in generated\n      filenames. It defaults to :func:`skbuild.constants.skbuild_plat_name()`.\n    - build_ext_inplace is a boolean indicating if ``build_ext`` command was\n      specified along with the --inplace argument.\n\n    Otherwise it raises DistutilsArgError exception if there are\n    any error on the command-line, and it raises DistutilsGetoptError\n    if there any error in the command 'options' attribute.\n\n    The code has been adapted from the setup() function available\n    in distutils/core.py.\n    "
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    module_0.git_get_keywords(var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    bool_0 = False
    var_1 = module_0.git_get_keywords(bool_0)
    module_0.versions_from_parentdir(bool_0, bool_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 32
    var_0 = module_0.git_get_keywords(int_0)
    assert len(module_0.HANDLERS) == 1
    int_1 = -558
    module_0.versions_from_parentdir(int_0, int_0, int_1)

def test_case_11():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.render(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    exception_0 = module_1.Exception()
    var_1 = module_0.render(var_0, var_0)
    module_0.git_versions_from_keywords(var_1, var_1, var_0)

def test_case_13():
    str_0 = "*6?TScGlPU/S:H'$}qq"
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_0, str_0, str_0)

def test_case_14():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)

def test_case_15():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1, verbose=var_1)

def test_case_16():
    str_0 = '-^@?Eg\n0[`x@=F0ssNP'
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1
    list_0 = [str_0, str_0, str_0]
    var_1 = module_0.run_command(list_0, list_0, verbose=var_0)
    str_1 = '(cS\n'
    with pytest.raises(AssertionError):
        module_0.run_command(str_1, str_1, verbose=var_1, env=str_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.plus_or_dot(var_0)
    assert var_2 == '+'
    var_3 = module_0.versions_from_parentdir(var_2, var_2, var_2)
    none_type_0 = None
    module_0.render(var_3, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = var_0.__dir__()
    var_2 = module_0.run_command(var_1, var_1)
    var_2.__bool__()