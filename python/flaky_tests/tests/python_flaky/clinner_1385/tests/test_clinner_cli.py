# Automatically generated by Pynguin.
import pytest
import clinner.cli as module_0
import collections as module_1
import clinner.command as module_2

def test_case_0():
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    var_0 = c_l_i_0.print_return(none_type_0)
    var_0.enable()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xb6\x91\xde\xceE'
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    int_0 = -788
    var_0 = c_l_i_0.print_return(int_0)
    c_l_i_0.set_level(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    str_0 = ''
    float_0 = 1386.0
    dict_0 = {str_0: c_l_i_0, str_0: float_0}
    var_0 = c_l_i_0.print_header(c_l_i_0, **dict_0)
    dict_1 = {c_l_i_0: c_l_i_0}
    c_l_i_0.print_header(dict_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    list_0 = []
    none_type_0 = None
    var_0 = c_l_i_0.disable()
    var_1 = c_l_i_0.print_commands_list(list_0, var_0)
    var_1.print_commands_list(list_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    int_0 = 2792
    dict_0 = {}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    tuple_0 = (ordered_dict_0, bool_0, ordered_dict_0, bool_0)
    list_0 = [tuple_0]
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    c_l_i_1 = module_0.CLI()
    assert f'{type(c_l_i_1.logger).__module__}.{type(c_l_i_1.logger).__qualname__}' == 'logging.Logger'
    c_l_i_1.print_commands_list(list_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    var_0 = c_l_i_0.enable()
    c_l_i_1 = module_0.CLI()
    assert f'{type(c_l_i_1.logger).__module__}.{type(c_l_i_1.logger).__qualname__}' == 'logging.Logger'
    var_1 = c_l_i_1.enable()
    var_1.set_level(list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    c_l_i_0.set_level(c_l_i_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    set_0 = {c_l_i_0}
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (c_l_i_0, set_0, list_0)
    str_0 = ''
    str_1 = '$YC"E7)jDYa}s1'
    list_1 = [str_0, str_1]
    list_2 = [tuple_1, list_1]
    type_0 = module_2.Type.PYTHON
    c_l_i_0.print_commands_list(list_2, type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    dict_0 = {}
    ordered_dict_0 = module_1.OrderedDict(**dict_0)
    bool_1 = True
    tuple_0 = (ordered_dict_0, bool_0, ordered_dict_0, bool_1)
    list_0 = [tuple_0]
    c_l_i_0 = module_0.CLI()
    assert f'{type(c_l_i_0).__module__}.{type(c_l_i_0).__qualname__}' == 'clinner.cli.CLI'
    assert f'{type(c_l_i_0.handler).__module__}.{type(c_l_i_0.handler).__qualname__}' == 'logging.StreamHandler'
    assert f'{type(c_l_i_0.logger).__module__}.{type(c_l_i_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.CLI.SEP == '----------------------------------------------------------------------'
    type_0 = module_2.Type.PYTHON
    var_0 = c_l_i_0.print_commands_list(ordered_dict_0, type_0)
    c_l_i_0.print_commands_list(list_0, var_0)