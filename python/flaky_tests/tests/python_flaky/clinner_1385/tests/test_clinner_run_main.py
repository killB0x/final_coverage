# Automatically generated by Pynguin.
import pytest
import clinner.run.main as module_0
import clinner.exceptions as module_1

def test_case_0():
    tuple_0 = ()
    main_0 = module_0.Main(parse_args=tuple_0)
    assert f'{type(main_0).__module__}.{type(main_0).__qualname__}' == 'clinner.run.main.Main'
    assert f'{type(main_0.args).__module__}.{type(main_0.args).__qualname__}' == 'argparse.Namespace'
    assert main_0.unknown_args == []
    assert f'{type(main_0.cli).__module__}.{type(main_0.cli).__qualname__}' == 'clinner.cli.CLI'
    with pytest.raises(module_1.NotCommandError):
        main_0.run()

@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.Main()

@pytest.mark.xfail(strict=True)
def test_case_2():
    tuple_0 = ()
    main_0 = module_0.Main(parse_args=tuple_0)
    assert f'{type(main_0).__module__}.{type(main_0).__qualname__}' == 'clinner.run.main.Main'
    assert f'{type(main_0.args).__module__}.{type(main_0.args).__qualname__}' == 'argparse.Namespace'
    assert main_0.unknown_args == []
    assert f'{type(main_0.cli).__module__}.{type(main_0.cli).__qualname__}' == 'clinner.cli.CLI'
    main_0.run(command=main_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b'\xdf\x0bQe\x07Z\x0b5!a\xc5X.`\x0b\xef\xb7'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = ()
    main_0 = module_0.Main(parse_args=tuple_0)
    assert f'{type(main_0).__module__}.{type(main_0).__qualname__}' == 'clinner.run.main.Main'
    assert f'{type(main_0.args).__module__}.{type(main_0.args).__qualname__}' == 'argparse.Namespace'
    assert main_0.unknown_args == []
    assert f'{type(main_0.cli).__module__}.{type(main_0.cli).__qualname__}' == 'clinner.cli.CLI'
    var_0 = module_0.Main(parse_args=tuple_0)
    var_0.run(*set_0)