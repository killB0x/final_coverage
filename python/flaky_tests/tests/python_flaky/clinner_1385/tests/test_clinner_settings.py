# Automatically generated by Pynguin.
import pytest
import clinner.settings as module_0
import builtins as module_1

def test_case_0():
    settings_0 = module_0.Settings()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = '\n        Make t works with functions and metods.\n        '
    settings_0 = module_0.Settings()
    var_0 = settings_0.reset_default()
    str_1 = '!'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    settings_0.import_settings(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    int_0 = -1007
    none_type_0 = None
    set_0 = set()
    reset_0 = module_0.reset(set_0)
    var_0 = reset_0.__get__(none_type_0)
    var_0.get(dict_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    complex_0 = (-4950+1634j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    reset_0 = module_0.reset(dict_0)
    reset_0.__call__(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    object_0 = module_1.object()
    settings_0 = module_0.Settings()
    settings_0.get(object_0, object_0, settings_0)

def test_case_5():
    str_0 = 'INFO'
    settings_0 = module_0.Settings()
    with pytest.raises(ImportError):
        settings_0.import_settings(str_0)