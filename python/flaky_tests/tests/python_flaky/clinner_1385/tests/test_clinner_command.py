# Automatically generated by Pynguin.
import pytest
import clinner.command as module_0
import clinner.exceptions as module_1

def test_case_0():
    none_type_0 = None
    command_register_0 = module_0.CommandRegister()
    with pytest.raises(module_1.WrongCommandError):
        command_register_0.__getitem__(none_type_0)

def test_case_1():
    bytes_0 = b'\x99\xd1\x08\xbe\x9f.\x1c\xc4\x10\x1b \xe0~1\x9aa'
    command_0 = module_0.command(parser_opts=bytes_0)
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == b'\x99\xd1\x08\xbe\x9f.\x1c\xc4\x10\x1b \xe0~1\x9aa'
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None
    with pytest.raises(ValueError):
        command_0.__call__()

def test_case_2():
    command_0 = module_0.command()
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == {}
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None
    with pytest.raises(ValueError):
        command_0.__call__()

def test_case_3():
    int_0 = 730
    command_0 = module_0.command(int_0)
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == {}
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None

def test_case_4():
    type_0 = module_0.Type.SHELL
    command_0 = module_0.command(args=type_0, parser_opts=type_0)
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == module_0.Type.SHELL
    assert command_0.kwargs == module_0.Type.SHELL
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None
    with pytest.raises(ValueError):
        command_0.__call__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    command_0 = module_0.command(args=none_type_0)
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == {}
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None
    module_0.command(command_0)

def test_case_6():
    type_0 = module_0.Type.PYTHON
    command_0 = module_0.command()
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == {}
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None
    var_0 = command_0.__get__(type_0)
    command_register_0 = module_0.CommandRegister()
    with pytest.raises(module_1.WrongCommandError):
        command_register_0.__getitem__(type_0)

def test_case_7():
    wrong_command_error_0 = module_1.WrongCommandError()
    command_0 = module_0.command()
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == {}
    assert command_0.command_type == module_0.Type.PYTHON
    assert command_0.func is None
    var_0 = command_0.__get__(wrong_command_error_0)
    with pytest.raises(ValueError):
        var_0.__call__()

def test_case_8():
    list_0 = []
    str_0 = 'oopGfs+C8NV'
    dict_0 = {str_0: str_0}
    command_0 = module_0.command(list_0, list_0, parser_opts=list_0)
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == ()
    assert command_0.kwargs == {}
    assert command_0.command_type == []
    assert command_0.func is None
    var_0 = command_0.__get__(list_0, list_0)
    with pytest.raises(ValueError):
        var_0.__call__(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 4775.6
    type_0 = module_0.Type.SHELL_WITH_HELP
    dict_0 = {}
    command_0 = module_0.command(command_type=type_0, args=float_0)
    assert f'{type(command_0).__module__}.{type(command_0).__qualname__}' == 'clinner.command.command'
    assert command_0.args == pytest.approx(4775.6, abs=0.01, rel=0.01)
    assert command_0.kwargs == {}
    assert command_0.command_type == module_0.Type.SHELL_WITH_HELP
    assert command_0.func is None
    list_0 = [command_0]
    command_1 = module_0.command()
    assert command_1.args == ()
    assert command_1.kwargs == {}
    command_0.__call__(*list_0, **dict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\xc2 i'
    wrong_command_error_0 = module_1.WrongCommandError()
    list_0 = []
    str_0 = 'MW2lQoYd'
    str_1 = ''
    dict_0 = {str_0: bytes_0, str_1: bytes_0, str_1: list_0}
    command_register_0 = module_0.CommandRegister(**dict_0)
    bool_0 = False
    var_0 = command_register_0.__getitem__(str_0)
    assert var_0 == b'\xc2 i'
    command_register_0.register(bool_0, var_0, var_0, bytes_0)