# Automatically generated by Pynguin.
import pytest
import shrun.command as module_0

def test_case_0():
    shared_context_0 = module_0.SharedContext()
    shared_context_1 = module_0.SharedContext()
    var_0 = shared_context_1.register_name(shared_context_1)

def test_case_1():
    shared_context_0 = module_0.SharedContext()
    tuple_0 = ()
    var_0 = shared_context_0.wait_for_dependencies(tuple_0)
    var_1 = shared_context_0.register_name(var_0)

def test_case_2():
    shared_context_0 = module_0.SharedContext()
    bytes_0 = b'\x85='
    var_0 = shared_context_0.mark_as_done(bytes_0, bytes_0)

def test_case_3():
    shared_context_0 = module_0.SharedContext()
    bool_0 = False
    none_type_0 = None
    var_0 = shared_context_0.mark_as_done(bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bytes_0 = b'=b\x1d,f\xc1\xc9\x92\x0b\xcf7\xe1'
    shared_context_0 = module_0.SharedContext()
    shared_context_0.should_skip(bytes_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -1698.0
    job_0 = module_0.Job(float_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    job_0.extract_tags(float_0)

def test_case_6():
    str_0 = 'tyJw~\ny '
    job_0 = module_0.Job(str_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    with pytest.raises(AssertionError):
        job_0.run(str_0, job_0)

def test_case_7():
    shared_context_0 = module_0.SharedContext()

def test_case_8():
    str_0 = 'tyJw~\ny '
    job_0 = module_0.Job(str_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_9():
    shared_context_0 = module_0.SharedContext()
    var_0 = module_0.Job(shared_context_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_1 = module_0.Job(none_type_0)
    var_0.synchronous_prepare(shared_context_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    shared_context_0 = module_0.SharedContext()
    job_0 = module_0.Job(shared_context_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    var_0 = shared_context_0.mark_as_done(shared_context_0, shared_context_0)
    var_1 = job_0.extract_tags(var_0)
    var_2 = shared_context_0.mark_as_done(var_0, shared_context_0)
    job_0.tags(var_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    str_0 = 'E8;](GI~i'
    job_0 = module_0.Job(str_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    job_0.synchronous_prepare(bool_0)

def test_case_12():
    shared_context_0 = module_0.SharedContext()
    shared_context_1 = module_0.SharedContext()
    with pytest.raises(AssertionError):
        shared_context_0.should_skip(shared_context_0, shared_context_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    shared_context_0 = module_0.SharedContext()
    none_type_0 = None
    var_0 = shared_context_0.mark_as_done(none_type_0, shared_context_0)
    var_1 = shared_context_0.should_skip(var_0, none_type_0)
    job_0 = module_0.Job(var_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    var_2 = job_0.extract_tags(var_1)
    shared_context_0.should_skip(job_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    bytes_0 = b'^\xe2~C_\xe5\xbbr\x1b\xd0\xb4\x9b\xd4\xb9\xd9'
    shared_context_0 = module_0.SharedContext()
    var_0 = shared_context_0.set_predicates(bool_0, bytes_0)
    var_1 = shared_context_0.should_skip(bool_0, bytes_0)
    assert var_1 is False
    shared_context_0.wait_for_dependencies(shared_context_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    shared_context_0 = module_0.SharedContext()
    none_type_0 = None
    shared_context_0.should_skip(none_type_0, shared_context_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    shared_context_0 = module_0.SharedContext()
    bytes_0 = b'\x85='
    bool_0 = False
    var_0 = shared_context_0.mark_as_done(bool_0, bool_0)
    shared_context_0.wait_for_dependencies(bytes_0)

def test_case_17():
    shared_context_0 = module_0.SharedContext()
    var_0 = shared_context_0.mark_as_done(shared_context_0, shared_context_0)
    with pytest.raises(AssertionError):
        shared_context_0.register_name(shared_context_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    shared_context_0 = module_0.SharedContext()
    var_0 = shared_context_0.mark_as_done(shared_context_0, shared_context_0)
    var_1 = shared_context_0.should_skip(var_0, var_0)
    var_1.synchronous_prepare(shared_context_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    shared_context_0 = module_0.SharedContext()
    job_0 = module_0.Job(shared_context_0)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    var_0 = shared_context_0.mark_as_done(shared_context_0, shared_context_0)
    list_0 = [var_0, shared_context_0]
    var_1 = job_0.extract_tags(list_0)
    var_2 = shared_context_0.mark_as_done(var_0, shared_context_0)
    shared_context_0.should_skip(var_0, shared_context_0)

def test_case_20():
    shared_context_0 = module_0.SharedContext()
    tuple_0 = ()
    var_0 = shared_context_0.wait_for_dependencies(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    bytes_0 = b'^\xe2~C_\xe5\xbbr\x1b\xd0\xb4\x9b\xd4\xb9\xd9'
    shared_context_0 = module_0.SharedContext()
    shared_context_0.should_skip(bool_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    shared_context_0 = module_0.SharedContext()
    var_0 = shared_context_0.mark_as_done(shared_context_0, shared_context_0)
    var_1 = shared_context_0.mark_as_done(var_0, shared_context_0)
    var_2 = shared_context_0.should_skip(var_1, var_0)
    job_0 = module_0.Job(var_1)
    assert f'{type(module_0.Job.name).__module__}.{type(module_0.Job.name).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.background).__module__}.{type(module_0.Job.background).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Job.command).__module__}.{type(module_0.Job.command).__qualname__}' == 'builtins.property'
    tuple_0 = (var_1, var_2)
    var_3 = job_0.extract_tags(var_2)
    var_4 = shared_context_0.register_name(var_1)
    var_5 = shared_context_0.set_predicates(var_4, tuple_0)
    var_6 = shared_context_0.should_skip(tuple_0, var_4)
    assert var_6 is True
    var_6.register_name(job_0)

def test_case_23():
    shared_context_0 = module_0.SharedContext()
    none_type_0 = None
    var_0 = shared_context_0.mark_as_done(shared_context_0, none_type_0)
    bytes_0 = b'\x08x\xf5\xb3\x98\xac\x03\xb3\x046o\xd7F\xde'
    shared_context_1 = module_0.SharedContext()
    var_1 = shared_context_1.set_predicates(shared_context_1, bytes_0)
    var_2 = shared_context_1.should_skip(bytes_0, var_1)
    var_3 = shared_context_1.mark_as_done(bytes_0, bytes_0)
    shared_context_2 = module_0.SharedContext()
    with pytest.raises(AssertionError):
        shared_context_1.should_skip(bytes_0, bytes_0)