# Automatically generated by Pynguin.
import pytest
import shrun.runner as module_0
import ast as module_1
import inspect as module_2

def test_case_0():
    bool_0 = False
    list_0 = []
    with pytest.raises(AssertionError):
        module_0.run_commands(list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    complex_0 = (290.0192380468924+3017.2650557319475j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    runner_0.print_command(runner_0)

def test_case_2():
    tuple_0 = ()
    with pytest.raises(AssertionError):
        module_0.run_commands(tuple_0, tmpdir=tuple_0, environment=tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.RunnerResults()

def test_case_4():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    with pytest.raises(AssertionError):
        module_0.run_commands(list_0, tmpdir=tuple_0, output_timeout=bool_0)

def test_case_5():
    complex_0 = (-256.1+710.62j)
    runner_0 = module_0.Runner(complex_0, complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.failures()

@pytest.mark.xfail(strict=True)
def test_case_6():
    interruptible_thread_0 = module_0.InterruptibleThread()
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert module_0.InterruptibleThread.POLL_FREQ == pytest.approx(0.1, abs=0.01, rel=0.01)
    interruptible_thread_0.join()

def test_case_7():
    complex_0 = (317.8959943536103+3000.6465618241828j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    str_0 = 'D=w'
    var_0 = runner_0.print_command(str_0)

def test_case_8():
    complex_0 = (290.0192380468924+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.create_name(complex_0, complex_0)
    assert var_0 == (290.0192380468924+3017.4928016219683j)
    var_1 = runner_0.finish()

def test_case_9():
    complex_0 = (-256.1+710.62j)
    runner_0 = module_0.Runner(complex_0, complex_0, complex_0, output_timeout=complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.finish()

def test_case_10():
    complex_0 = (290.0192380468924+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.running()

@pytest.mark.xfail(strict=True)
def test_case_11():
    complex_0 = (317.8959943536103+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    none_type_0 = None
    runner_0.create_name(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    complex_0 = (290.0407399044359+3015.919075470174j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    runner_0._run(complex_0, complex_0, runner_0, complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    complex_0 = (290.0192380468924+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    runner_0._run(runner_0, complex_0, runner_0, runner_0, timeout=runner_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    complex_0 = (317.8959943536103+3000.6465618241828j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.finish()
    str_0 = 'D=w'
    runner_0.print_lines(str_0, runner_0, runner_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    complex_0 = (317.8959943536103+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    runner_0._run(complex_0, complex_0, complex_0, complex_0, timeout=complex_0, interval=runner_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    interruptible_thread_0 = module_0.InterruptibleThread()
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert module_0.InterruptibleThread.POLL_FREQ == pytest.approx(0.1, abs=0.01, rel=0.01)
    var_0 = interruptible_thread_0.isDaemon()
    var_1 = module_1.iter_child_nodes(interruptible_thread_0)
    interruptible_thread_0.join(var_0)

def test_case_17():
    complex_0 = (317.8959943536103+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    str_0 = 'D=w'
    none_type_0 = None
    var_0 = runner_0.create_name(none_type_0, str_0)
    assert var_0 == 'D'

@pytest.mark.xfail(strict=True)
def test_case_18():
    complex_0 = (290.0192380468924+3017.4928016219683j)
    runner_0 = module_0.Runner(complex_0, complex_0, shell=complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    none_type_0 = None
    module_2.getmembers(runner_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    complex_0 = (317.8959943536103+2992.7300395785946j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.failures()
    str_0 = 'w'
    runner_1 = module_0.Runner(complex_0, runner_0, shell=str_0)
    var_1 = var_0.append(str_0)
    module_0.run_commands(var_0, shell=runner_0, output_timeout=str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    complex_0 = (317.8959943536103+3000.6465618241828j)
    runner_0 = module_0.Runner(complex_0, complex_0, shell=complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    str_0 = '\n=\tw'
    runner_0.print_command(str_0, color=runner_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    complex_0 = (317.8959943536103+3000.6465618241828j)
    runner_0 = module_0.Runner(complex_0, complex_0)
    assert module_0.COLORS == ['yellow', 'blue', 'red', 'green', 'magenta', 'cyan']
    assert module_0.IO_ERROR_RETRY_INTERVAL == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert module_0.IO_ERROR_RETRY_ATTEMPTS == 100
    assert f'{type(module_0.Runner.env).__module__}.{type(module_0.Runner.env).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Runner.output_timeout).__module__}.{type(module_0.Runner.output_timeout).__qualname__}' == 'builtins.property'
    var_0 = runner_0.kill_all()
    assert var_0 is True
    var_1 = runner_0.failures()
    str_0 = 'D=w'
    var_2 = runner_0.print_command(str_0)
    none_type_0 = None
    runner_1 = module_0.Runner(complex_0, runner_0, shell=str_0)
    var_3 = runner_0.create_name(none_type_0, str_0)
    assert var_3 == 'D'
    var_4 = runner_0.create_name(var_1, var_3)
    assert var_4 == 'D_1'
    var_3.finish()