# Automatically generated by Pynguin.
import pytest
import nala.wrap_internal_symbols as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    none_type_0 = None
    module_0.load_section_headers(bool_0, bool_0, bool_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.load_section_headers(bool_0, bool_0, bool_0, bool_0)
    assert module_0.ELFCLASS64 == 2
    assert module_0.ELFDATA2LSB == 1
    assert module_0.ET_REL == 1
    assert module_0.SHT_SYMTAB == 2
    assert module_0.SHT_STRTAB == 3
    assert module_0.SHT_RELA == 4
    assert module_0.STB_GLOBAL == 1
    assert module_0.SHN_UNDEF == 0
    assert module_0.SHN_LORESERVE == 65280
    var_0.has_symbols_to_wrap()

def test_case_2():
    list_0 = []
    with pytest.raises(module_0.Error):
        module_0.load_elf_header(list_0)

def test_case_3():
    error_0 = module_0.Error()
    assert module_0.ELFCLASS64 == 2
    assert module_0.ELFDATA2LSB == 1
    assert module_0.ET_REL == 1
    assert module_0.SHT_SYMTAB == 2
    assert module_0.SHT_STRTAB == 3
    assert module_0.SHT_RELA == 4
    assert module_0.STB_GLOBAL == 1
    assert module_0.SHN_UNDEF == 0
    assert module_0.SHN_LORESERVE == 65280

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'\xcb-'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    set_0 = set()
    int_0 = -340
    tuple_0 = (list_0, set_0, int_0)
    module_0.Elf64LsbSectionHeader(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 366
    module_0.Elf64LsbRela(int_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.Section(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.create_undefined_global_symbol(none_type_0)

def test_case_8():
    bytes_0 = b'\x7fELF\x02\x0cM\x13\x7f'
    with pytest.raises(module_0.Error):
        module_0.load_elf_header(bytes_0)

def test_case_9():
    bytes_0 = b'\x7fELF\x13\x7f'
    with pytest.raises(module_0.Error):
        module_0.load_elf_header(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\x7fELF\x02\x01\x0b\xca'
    module_0.load_elf_header(bytes_0)