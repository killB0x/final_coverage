# Automatically generated by Pynguin.
import pytest
import bloop.transactions as module_0
import platform as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\x0bD\xd6\x1a\xdd\x02\xf4.\xdcF\xc4\x1a'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    var_1 = write_transaction_0.__exit__(var_0, write_transaction_0, bytes_0)
    var_0.prepare(var_0, var_0, bytes_0)

def test_case_1():
    none_type_0 = None
    write_transaction_0 = module_0.WriteTransaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    write_transaction_1 = write_transaction_0.save()
    assert f'{type(write_transaction_1).__module__}.{type(write_transaction_1).__qualname__}' == 'bloop.transactions.WriteTransaction'
    assert write_transaction_1.engine is None

def test_case_2():
    bytes_0 = b'\xb5\xff\xf9'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    var_1 = var_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    prepared_transaction_0 = module_0.PreparedTransaction()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    prepared_transaction_0.commit()

def test_case_4():
    prepared_transaction_0 = module_0.PreparedTransaction()
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10

def test_case_5():
    bytes_0 = b'\xb5\xff\xf9'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.__enter__()
    var_1 = var_0.prepare()
    assert var_1.mode == 'w'
    var_2 = var_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xe6HBj4\x12b^\\'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    write_transaction_1 = write_transaction_0.check(bytes_0, var_0)
    assert len(var_0.items) == 1
    assert f'{type(write_transaction_1).__module__}.{type(write_transaction_1).__qualname__}' == 'bloop.transactions.WriteTransaction'
    assert write_transaction_1.engine == b'\xe6HBj4\x12b^\\'
    var_0.commit()

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b'\x0bD\xd6\x1a\xdd\x02\xf4.\xdcF\xc4\x1a'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    var_0.prepare(var_0, var_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    write_transaction_0 = module_0.WriteTransaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    read_transaction_0 = module_0.ReadTransaction(none_type_0)
    assert module_0.ReadTransaction.mode == 'r'
    list_0 = [read_transaction_0, read_transaction_0, write_transaction_0, read_transaction_0, write_transaction_0, none_type_0]
    read_transaction_1 = read_transaction_0.load(*list_0)
    assert f'{type(read_transaction_1).__module__}.{type(read_transaction_1).__qualname__}' == 'bloop.transactions.ReadTransaction'
    assert read_transaction_1.engine is None
    read_transaction_1.prepare()

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    write_transaction_0 = module_0.WriteTransaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.__enter__()
    var_0.__exit__(none_type_0, var_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\xa5\xa9L'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    write_transaction_1 = write_transaction_0.delete(condition=write_transaction_0)
    assert f'{type(write_transaction_1).__module__}.{type(write_transaction_1).__qualname__}' == 'bloop.transactions.WriteTransaction'
    assert write_transaction_1.engine == b'\xa5\xa9L'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    var_0.commit()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\xd3H\xfa\x18'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    var_0.commit()

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    read_transaction_0 = module_0.ReadTransaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.ReadTransaction.mode == 'r'
    var_0 = read_transaction_0.__exit__(none_type_0, none_type_0, none_type_0)
    write_transaction_0 = module_0.WriteTransaction(none_type_0)
    assert module_0.WriteTransaction.mode == 'w'
    var_1 = write_transaction_0.prepare()
    assert var_1.mode == 'w'
    var_1.commit()

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\xe6HBj4\x85^'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    write_transaction_1 = write_transaction_0.save(*bytes_0)
    assert len(var_0.items) == 7
    assert f'{type(write_transaction_1).__module__}.{type(write_transaction_1).__qualname__}' == 'bloop.transactions.WriteTransaction'
    assert write_transaction_1.engine == b'\xe6HBj4\x85^'
    var_0.commit()

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    write_transaction_0 = module_0.WriteTransaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    write_transaction_1 = write_transaction_0.save()
    assert f'{type(write_transaction_1).__module__}.{type(write_transaction_1).__qualname__}' == 'bloop.transactions.WriteTransaction'
    assert write_transaction_1.engine is None
    read_transaction_0 = module_0.ReadTransaction(write_transaction_1)
    assert module_0.ReadTransaction.mode == 'r'
    prepared_transaction_0 = module_0.PreparedTransaction()
    list_0 = [read_transaction_0, read_transaction_0, write_transaction_0, prepared_transaction_0, write_transaction_0, none_type_0]
    read_transaction_1 = read_transaction_0.load(*list_0)
    assert f'{type(read_transaction_1).__module__}.{type(read_transaction_1).__qualname__}' == 'bloop.transactions.ReadTransaction'
    assert f'{type(read_transaction_1.engine).__module__}.{type(read_transaction_1.engine).__qualname__}' == 'bloop.transactions.WriteTransaction'
    write_transaction_2 = write_transaction_0.delete()
    read_transaction_0.load(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b'HB\xf5\x12\xf9\\'
    write_transaction_0 = module_0.WriteTransaction(bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.WriteTransaction.mode == 'w'
    var_0 = write_transaction_0.prepare()
    assert var_0.mode == 'w'
    write_transaction_1 = write_transaction_0.delete(*bytes_0)
    assert len(var_0.items) == 6
    assert f'{type(write_transaction_1).__module__}.{type(write_transaction_1).__qualname__}' == 'bloop.transactions.WriteTransaction'
    assert write_transaction_1.engine == b'HB\xf5\x12\xf9\\'
    var_0.commit()

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    transaction_0 = module_0.Transaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    read_transaction_0 = module_0.ReadTransaction(transaction_0)
    assert module_0.ReadTransaction.mode == 'r'
    var_0 = read_transaction_0.prepare()
    assert var_0.mode == 'r'
    var_0.commit()

def test_case_17():
    none_type_0 = None
    read_transaction_0 = module_0.ReadTransaction(none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.transactions'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.MAX_TRANSACTION_ITEMS == 10
    assert module_0.ReadTransaction.mode == 'r'
    prepared_transaction_0 = module_0.PreparedTransaction()
    list_0 = []
    none_type_1 = prepared_transaction_0.prepare(prepared_transaction_0, list_0, list_0)
    var_0 = module_1.freedesktop_os_release()
    with pytest.raises(ValueError):
        prepared_transaction_0.commit()