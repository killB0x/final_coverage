# Automatically generated by Pynguin.
import pytest
import bloop.stream.coordinator as module_0
import bloop.exceptions as module_1
import collections as module_2

def test_case_0():
    str_0 = ' )VK0)k.l0hb7'
    coordinator_0 = module_0.Coordinator(session=str_0, stream_arn=str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.__next__()

def test_case_1():
    str_0 = 'Q)hh'
    coordinator_0 = module_0.Coordinator(session=str_0, stream_arn=str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.advance_shards()

def test_case_2():
    str_0 = 'eventID'
    coordinator_0 = module_0.Coordinator(session=str_0, stream_arn=str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.heartbeat()

def test_case_3():
    none_type_0 = None
    coordinator_0 = module_0.Coordinator(session=none_type_0, stream_arn=none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.migrate_closed_shards()

def test_case_4():
    bool_0 = True
    coordinator_0 = module_0.Coordinator(session=bool_0, stream_arn=bool_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.remove_shard(coordinator_0)

def test_case_5():
    bool_0 = False
    coordinator_0 = module_0.Coordinator(session=bool_0, stream_arn=bool_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.remove_shard(bool_0, coordinator_0)

def test_case_6():
    str_0 = ' )VK0)k.l0hb7'
    coordinator_0 = module_0.Coordinator(session=str_0, stream_arn=str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.InvalidPosition):
        coordinator_0.move_to(str_0)

def test_case_7():
    bytes_0 = b'\x8f\xa5\xe5\xc3c:+\xd0\xa5W\xff6z\n\x17'
    coordinator_0 = module_0.Coordinator(session=bytes_0, stream_arn=bytes_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'

def test_case_8():
    str_0 = 'Q)hh'
    coordinator_0 = module_0.Coordinator(session=str_0, stream_arn=str_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    with pytest.raises(module_1.InvalidPosition):
        coordinator_0.move_to(coordinator_0)

def test_case_9():
    tuple_0 = ()
    coordinator_0 = module_0.Coordinator(session=tuple_0, stream_arn=tuple_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    coordinator_0 = module_0.Coordinator(session=dict_0, stream_arn=dict_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.heartbeat()
    coordinator_1 = module_0.Coordinator(session=dict_0, stream_arn=dict_0)
    var_1 = coordinator_1.__next__()
    var_2 = coordinator_0.__next__()
    var_3 = coordinator_0.heartbeat()
    var_4 = coordinator_0.advance_shards()
    coordinator_0.move_to(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    coordinator_0 = module_0.Coordinator(session=none_type_0, stream_arn=none_type_0)
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert f'{type(module_0.Coordinator.token).__module__}.{type(module_0.Coordinator.token).__qualname__}' == 'builtins.property'
    var_0 = coordinator_0.__repr__()
    assert var_0 == '<Coordinator[None]>'
    var_1 = coordinator_0.__iter__()
    var_2 = var_1.heartbeat()
    counter_0 = module_2.Counter()
    var_3 = var_1.remove_shard(var_1, coordinator_0)
    var_4 = counter_0.__neg__()
    coordinator_0.move_to(var_4)