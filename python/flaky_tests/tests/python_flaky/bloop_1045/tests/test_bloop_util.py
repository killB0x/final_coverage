# Automatically generated by Pynguin.
import pytest
import bloop.util as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'FilterExpression'
    module_0.index(str_0, str_0)

def test_case_1():
    set_0 = set()
    var_0 = module_0.index(set_0, set_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

def test_case_2():
    str_0 = ' }A?QzHH>>xf.,.|'
    var_0 = module_0.ordered(str_0)
    assert var_0 == ' }A?QzHH>>xf.,.|'
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

def test_case_3():
    bytes_0 = b'\xfc]\xc0M$\xaeI\xe6\xe1\xd9\xb3\x97\x16\xbb a\xba3\xb9'
    var_0 = module_0.ordered(bytes_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

def test_case_4():
    set_0 = set()
    var_0 = module_0.ordered(set_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

def test_case_5():
    dict_0 = {}
    var_0 = module_0.index_for(dict_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xf0\xde\x9c\xcbm\xef\x89/\xa1>6\xe4\x01'
    module_0.extract_key(bytes_0, bytes_0)

def test_case_7():
    bytes_0 = b''
    var_0 = module_0.extract_key(bytes_0, bytes_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.dump_key(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b''
    module_0.index_for(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 30
    module_0.index(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_0.value_of(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    module_0.get_table_name(bool_0, bool_0)

def test_case_13():
    str_0 = 'EJ@ghAYKx_(ZCb.D~'
    sentinel_0 = module_0.Sentinel(str_0)
    assert f'{type(sentinel_0).__module__}.{type(sentinel_0).__qualname__}' == 'bloop.util.Sentinel'
    assert sentinel_0.name == 'EJ@ghAYKx_(ZCb.D~'
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'
    var_0 = module_0.walk_subclasses(str_0)
    var_1 = sentinel_0.__repr__()
    assert var_1 == '<Sentinel[EJ@ghAYKx_(ZCb.D~]>'

def test_case_14():
    bool_0 = True
    var_0 = module_0.ordered(bool_0)
    assert var_0 is True
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

def test_case_15():
    str_0 = 'FilterExpression'
    sentinel_0 = module_0.Sentinel(str_0)
    assert f'{type(sentinel_0).__module__}.{type(sentinel_0).__qualname__}' == 'bloop.util.Sentinel'
    assert sentinel_0.name == 'FilterExpression'
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = 'FilterExp0ession'
    module_0.default_context(str_0, str_0)

def test_case_17():
    dict_0 = {}
    var_0 = module_0.ordered(dict_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'b'
    var_0 = module_0.walk_subclasses(str_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'
    dict_0 = {var_0: var_0, var_0: var_0, str_0: var_0, str_0: str_0}
    module_0.ordered(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b'\xdc"\x02\x1f\xea9%\x1dBaW\x03\x9b\x80\xa9\xc8\x8b\xc6'
    var_0 = module_0.ordered(bytes_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'
    sentinel_0 = module_0.Sentinel(bytes_0)
    assert f'{type(sentinel_0).__module__}.{type(sentinel_0).__qualname__}' == 'bloop.util.Sentinel'
    assert sentinel_0.name == b'\xdc"\x02\x1f\xea9%\x1dBaW\x03\x9b\x80\xa9\xc8\x8b\xc6'
    dict_0 = module_0.default_context(bytes_0)
    module_0.index_for(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'FilterExpression'
    var_0 = module_0.walk_subclasses(str_0)
    assert f'{type(module_0.missing).__module__}.{type(module_0.missing).__qualname__}' == 'bloop.util.Sentinel'
    assert module_0.missing.name == 'missing'
    var_0.__new__(var_0, var_0, *var_0, **var_0)