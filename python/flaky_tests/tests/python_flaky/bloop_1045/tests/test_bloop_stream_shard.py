# Automatically generated by Pynguin.
import pytest
import bloop.stream.shard as module_0
import collections as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0, sequence_number=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    shard_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -963.7111
    module_0.unpack_shards(float_0, float_0, float_0)

def test_case_2():
    none_type_0 = None
    var_0 = module_0.unpack_shards(none_type_0, none_type_0, none_type_0)
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'C3HvQI*&'
    module_0.unpack_shards(str_0, str_0, str_0)

def test_case_4():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0, sequence_number=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    module_1.namedtuple(none_type_0, shard_0, defaults=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\x12\xf99(\x874\x16\x00\x884\x06k\x1f;J\xdf\xdd\x8a\x9c'
    shard_0 = module_0.Shard(stream_arn=bytes_0, shard_id=bytes_0, parent=bytes_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    none_type_0 = None
    shard_0.jump_to(iterator_type=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.reformat_record(none_type_0)

def test_case_8():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__eq__(shard_0)
    assert var_0 is True

def test_case_9():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__eq__(none_type_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0, sequence_number=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    shard_0.load_children()

def test_case_11():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__repr__()
    assert var_0 == '<Shard[id=None]>'

def test_case_12():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.walk_tree()
    var_1 = var_0.__next__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bloop.stream.shard.Shard'
    assert var_1.stream_arn is None
    assert var_1.shard_id is None
    assert var_1.iterator_id is None
    assert var_1.iterator_type is None
    assert var_1.sequence_number is None
    assert var_1.parent is None
    assert var_1.children == []
    assert var_1.empty_responses == 0
    assert var_1.session is None

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.walk_tree()
    var_1 = var_0.__next__()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bloop.stream.shard.Shard'
    assert var_1.stream_arn is None
    assert var_1.shard_id is None
    assert var_1.iterator_id is None
    assert var_1.iterator_type is None
    assert var_1.sequence_number is None
    assert var_1.parent is None
    assert var_1.children == []
    assert var_1.empty_responses == 0
    assert var_1.session is None
    var_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    str_0 = 'heqn'
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=str_0, sequence_number=str_0, session=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__eq__(str_0)
    assert var_0 is False
    var_1 = shard_0.__repr__()
    assert var_1 == "<Shard[id='heqn']>"
    module_0.unpack_shards(str_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    shard_1 = module_0.Shard(stream_arn=shard_0, shard_id=none_type_0)
    assert shard_1.empty_responses == 0
    var_0 = shard_0.__eq__(shard_1)
    assert var_0 is False
    var_1 = var_0.__repr__()
    assert var_1 == 'False'
    module_0.unpack_shards(var_1, var_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__eq__(none_type_0)
    assert var_0 is False
    var_1 = shard_0.__repr__()
    assert var_1 == '<Shard[id=None]>'
    shard_1 = module_0.Shard(stream_arn=none_type_0, shard_id=var_1, parent=shard_0)
    assert shard_1.shard_id == '<Shard[id=None]>'
    assert shard_1.empty_responses == 0
    var_2 = module_0.unpack_shards(none_type_0, none_type_0, none_type_0)
    list_0 = [shard_0, var_0, var_1]
    var_3 = shard_1.__eq__(list_0)
    assert var_3 is False
    var_0.walk_tree()

def test_case_17():
    none_type_0 = None
    str_0 = 'parent'
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=str_0, iterator_type=str_0, parent=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__eq__(shard_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    shard_1 = module_0.Shard(stream_arn=none_type_0, shard_id=none_type_0, iterator_id=shard_0, session=shard_0)
    assert shard_1.empty_responses == 0
    var_0 = shard_1.__eq__(shard_0)
    assert var_0 is False
    var_1 = var_0.__repr__()
    assert var_1 == 'False'
    var_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    str_0 = 'after_sequence'
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=str_0, iterator_type=str_0, parent=none_type_0)
    assert shard_0.empty_responses == 0
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_0 = shard_0.__repr__()
    assert var_0 == "<Shard[after_seq=None, id='after_sequence']>"
    shard_0.load_children()

@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    str_0 = 'at_sequence'
    var_0 = module_0.unpack_shards(none_type_0, str_0, none_type_0)
    assert module_0.CALLS_TO_REACH_HEAD == 5
    assert module_0.EXACT_ITERATORS == {'after_sequence', 'at_sequence'}
    assert module_0.RELATIVE_ITERATORS == {'latest', 'trim_horizon'}
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'bloop.stream'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.last_iterator.name == 'LastIterator'
    assert module_0.missing.name == 'missing'
    shard_0 = module_0.Shard(stream_arn=none_type_0, shard_id=str_0, iterator_type=str_0, parent=none_type_0)
    assert shard_0.empty_responses == 0
    assert f'{type(module_0.Shard.token).__module__}.{type(module_0.Shard.token).__qualname__}' == 'builtins.property'
    var_1 = shard_0.__repr__()
    assert var_1 == "<Shard[at_seq=None, id='at_sequence']>"
    var_2 = var_1.__eq__(none_type_0)
    none_type_1 = None
    var_3 = shard_0.__iter__()
    assert var_3.empty_responses == 0
    var_4 = var_2.__le__(shard_0)
    var_5 = var_1.__repr__()
    assert var_5 == '"<Shard[at_seq=None, id=\'at_sequence\']>"'
    var_6 = none_type_1.__ne__(shard_0)
    shard_0.__next__()