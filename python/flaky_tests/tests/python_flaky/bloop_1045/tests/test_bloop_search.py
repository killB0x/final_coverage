# Automatically generated by Pynguin.
import pytest
import bloop.search as module_0
import bloop.exceptions as module_1
import bloop.conditions as module_2

def test_case_0():
    bytes_0 = b'`W\x890\xdf\xcc\x83\x94OM)0u'
    var_0 = module_0.printable_query(bytes_0)
    assert var_0 == b'`W\x890\xdf\xcc\x83\x94OM)0u'

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'NQV\x0b?Y\r#PGXv:JL'
    none_type_0 = None
    module_0.search_repr(str_0, str_0, none_type_0)

def test_case_2():
    prepared_search_0 = module_0.PreparedSearch()
    with pytest.raises(module_1.InvalidSearch):
        module_0.fail_bad_range(prepared_search_0)

def test_case_3():
    str_0 = 'cJ'
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_search_mode(str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'o'
    module_0.validate_key_condition(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    none_type_0 = None
    search_0 = module_0.Search(filter=none_type_0)
    module_0.validate_key_condition(bool_0, none_type_0, bool_0)

def test_case_6():
    str_0 = '\re'
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    var_0 = module_0.check_hash_key(str_0, base_condition_0)
    assert var_0 is False
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_search_projection(base_condition_0, base_condition_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    var_0 = module_0.validate_filter_condition(none_type_0, none_type_0, none_type_0)
    search_iterator_0 = module_0.SearchIterator(session=none_type_0, model=none_type_0, index=none_type_0, request=none_type_0, projected=none_type_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'
    module_0.validate_search_projection(none_type_0, search_iterator_0, search_iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\xff\x98\x1a\xc9\x83O\xb3\x13MN\x89\xe2FP\x99'
    module_0.validate_filter_condition(bytes_0, bytes_0, bytes_0)

def test_case_9():
    none_type_0 = None
    var_0 = module_0.check_hash_key(none_type_0, none_type_0)
    assert var_0 is False

def test_case_10():
    float_0 = 4460.763640274981
    var_0 = module_0.check_range_key(float_0, float_0)
    assert var_0 is False

def test_case_11():
    prepared_search_0 = module_0.PreparedSearch()
    var_0 = prepared_search_0.prepare_key(prepared_search_0)

def test_case_12():
    prepared_search_0 = module_0.PreparedSearch()

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'Jc\xa2\x8ee\x99\xb0\x9eT'
    module_0.fail_bad_hash(bytes_0)

def test_case_14():
    none_type_0 = None
    with pytest.raises(module_1.InvalidSearch):
        module_0.fail_bad_range(none_type_0)

def test_case_15():
    search_0 = module_0.Search()

@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b'Jc\xa2\x8ee\x99\xb0\x9eT'
    search_0 = module_0.Search(bytes_0, index=bytes_0, key=bytes_0, filter=bytes_0, parallel=bytes_0)
    search_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    var_0 = module_0.PreparedSearch()
    var_0.prepare(mode=none_type_0, model=none_type_0, key=none_type_0, filter=none_type_0, projection=none_type_0, consistent=var_0)

def test_case_18():
    bool_0 = True
    prepared_search_0 = module_0.PreparedSearch()
    var_0 = prepared_search_0.prepare_key(bool_0)
    var_1 = prepared_search_0.prepare_model(var_0, prepared_search_0, var_0)
    var_2 = module_0.check_hash_key(var_0, var_0)
    assert var_2 is False
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_search_projection(bool_0, var_1, var_2)

def test_case_19():
    prepared_search_0 = module_0.PreparedSearch()
    var_0 = prepared_search_0.prepare_constraints(prepared_search_0, prepared_search_0)
    var_1 = prepared_search_0.prepare_key(var_0)
    var_2 = module_0.validate_filter_condition(var_1, var_1, var_1)
    var_3 = var_1.__repr__()
    var_4 = module_0.check_hash_key(var_2, var_2)
    assert var_4 is False
    var_5 = module_0.check_range_key(var_0, var_2)
    assert var_5 is False
    dict_0 = {var_2: var_2}
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_search_projection(var_5, prepared_search_0, dict_0)

def test_case_20():
    none_type_0 = None
    search_iterator_0 = module_0.SearchIterator(session=none_type_0, model=none_type_0, index=none_type_0, request=none_type_0, projected=none_type_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    var_0 = module_0.printable_query(none_type_0)
    search_iterator_0 = module_0.SearchIterator(session=none_type_0, model=none_type_0, index=none_type_0, request=none_type_0, projected=none_type_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'
    scan_iterator_0 = module_0.ScanIterator(engine=search_iterator_0, model=var_0, index=var_0, request=search_iterator_0, projected=var_0)
    assert f'{type(scan_iterator_0).__module__}.{type(scan_iterator_0).__qualname__}' == 'bloop.search.ScanIterator'
    assert f'{type(scan_iterator_0.engine).__module__}.{type(scan_iterator_0.engine).__qualname__}' == 'bloop.search.SearchIterator'
    assert scan_iterator_0.model is None
    assert scan_iterator_0.session is None
    assert f'{type(scan_iterator_0.request).__module__}.{type(scan_iterator_0.request).__qualname__}' == 'bloop.search.SearchIterator'
    assert scan_iterator_0.index is None
    assert scan_iterator_0.projected is None
    assert f'{type(scan_iterator_0.buffer).__module__}.{type(scan_iterator_0.buffer).__qualname__}' == 'collections.deque'
    assert len(scan_iterator_0.buffer) == 0
    assert module_0.ScanIterator.mode == 'scan'
    var_1 = module_0.validate_filter_condition(var_0, search_iterator_0, search_iterator_0)
    module_0.validate_search_projection(scan_iterator_0, scan_iterator_0, scan_iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '=/'
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    var_0 = module_0.check_hash_key(str_0, base_condition_0)
    assert var_0 is False
    var_1 = module_0.printable_query(base_condition_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'bloop.conditions.BaseCondition'
    assert var_1.operation == '=/'
    assert var_1.column == '=/'
    assert var_1.values == ['=', '/']
    bool_0 = False
    search_iterator_0 = module_0.SearchIterator(session=bool_0, model=bool_0, index=var_1, request=var_1, projected=str_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'
    list_0 = [search_iterator_0]
    module_0.validate_search_projection(str_0, var_1, list_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    complex_0 = (-1446.780836-802.3j)
    module_0.validate_search_projection(complex_0, complex_0, complex_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    prepared_search_0 = module_0.PreparedSearch()
    prepared_search_0.prepare_projection(prepared_search_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    prepared_search_0 = module_0.PreparedSearch()
    prepared_search_0.prepare_filter(prepared_search_0)

def test_case_26():
    str_0 = '$o'
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_search_projection(str_0, str_0, str_0)

def test_case_27():
    bytes_0 = b'\xff\x98\x1a\xc9\x83O\xb3\x13$N\x89\xe2F\x80\x99'
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_search_projection(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    search_0 = module_0.Search()
    search_0.prepare()

@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    search_iterator_0 = module_0.SearchIterator(session=none_type_0, model=none_type_0, index=none_type_0, request=none_type_0, projected=none_type_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'
    module_0.validate_search_projection(none_type_0, none_type_0, search_iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = '='
    var_0 = module_0.printable_query(str_0)
    assert var_0 == '='
    tuple_0 = (var_0,)
    module_0.validate_search_projection(var_0, str_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    search_iterator_0 = module_0.SearchIterator(session=none_type_0, model=none_type_0, index=none_type_0, request=none_type_0, projected=none_type_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'
    search_iterator_0.all()

@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    search_iterator_0 = module_0.SearchIterator(session=none_type_0, model=none_type_0, index=none_type_0, request=none_type_0, projected=none_type_0)
    assert module_0.SearchIterator.mode == '<mode-placeholder>'
    assert f'{type(module_0.SearchIterator.token).__module__}.{type(module_0.SearchIterator.token).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.count).__module__}.{type(module_0.SearchIterator.count).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.scanned).__module__}.{type(module_0.SearchIterator.scanned).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.SearchIterator.exhausted).__module__}.{type(module_0.SearchIterator.exhausted).__qualname__}' == 'builtins.property'
    var_0 = search_iterator_0.__repr__()
    assert var_0 == '<SearchIterator[None]>'
    module_0.validate_search_projection(search_iterator_0, none_type_0, search_iterator_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    prepared_search_0 = module_0.PreparedSearch()
    var_0 = prepared_search_0.prepare_key(bool_0)
    var_1 = prepared_search_0.prepare_model(var_0, prepared_search_0, var_0)
    var_2 = module_0.validate_filter_condition(var_1, bool_0, var_1)
    var_3 = module_0.check_hash_key(var_2, var_2)
    assert var_3 is False
    var_4 = module_0.printable_query(var_3)
    assert var_4 is False
    prepared_search_0.prepare_filter(var_0)

def test_case_34():
    str_0 = ''
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    var_0 = module_0.check_range_key(base_condition_0, base_condition_0)
    assert var_0 is False

def test_case_35():
    str_0 = '\re'
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_filter_condition(base_condition_0, str_0, str_0)

def test_case_36():
    str_0 = '\re'
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    var_0 = module_0.check_hash_key(str_0, base_condition_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_37():
    bytes_0 = b'`W\x890\xdf\xcc\x83\x94OM)0'
    none_type_0 = None
    base_condition_0 = module_2.BaseCondition(bytes_0, column=none_type_0)
    var_0 = module_0.check_hash_key(bytes_0, base_condition_0)
    assert var_0 is False
    var_1 = var_0.__bool__()
    assert var_1 is False
    var_2 = module_0.validate_filter_condition(base_condition_0, var_1, var_1)
    var_3 = var_0.__le__(var_2)
    var_4 = module_0.check_hash_key(var_3, bytes_0)
    assert var_4 is False
    var_0.__ior__(none_type_0)

def test_case_38():
    str_0 = '\re'
    str_1 = 'H'
    base_condition_0 = module_2.BaseCondition(str_0, column=str_1)
    var_0 = module_0.check_hash_key(str_0, base_condition_0)
    assert var_0 is False
    var_1 = var_0.__bool__()
    assert var_1 is False
    with pytest.raises(module_1.InvalidSearch):
        module_0.validate_filter_condition(base_condition_0, str_0, base_condition_0)

def test_case_39():
    str_0 = 'count'
    var_0 = module_0.validate_search_projection(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_40():
    float_0 = 359.221
    none_type_0 = None
    search_0 = module_0.Search(float_0, float_0, none_type_0)
    str_0 = '=='
    var_0 = module_0.printable_query(search_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'bloop.search.Search'
    assert var_0.mode == pytest.approx(359.221, abs=0.01, rel=0.01)
    assert var_0.engine == pytest.approx(359.221, abs=0.01, rel=0.01)
    assert var_0.model is None
    assert var_0.index is None
    assert var_0.key is None
    assert var_0.filter is None
    assert var_0.projection is None
    assert var_0.consistent is False
    assert var_0.forward is True
    assert var_0.parallel is None
    var_1 = module_0.check_range_key(str_0, var_0)
    assert var_1 is False
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    prepared_search_0 = module_0.PreparedSearch()
    var_2 = prepared_search_0.__repr__()
    assert var_2 == '<PreparedSearch[None]>'
    module_0.check_range_key(base_condition_0, base_condition_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = 'all'
    module_0.validate_search_projection(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = 'all'
    none_type_0 = None
    module_0.validate_search_projection(str_0, none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = '=='
    base_condition_0 = module_2.BaseCondition(str_0, column=str_0, values=str_0)
    module_0.check_hash_key(str_0, base_condition_0)