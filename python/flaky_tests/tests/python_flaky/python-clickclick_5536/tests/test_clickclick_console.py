# Automatically generated by Pynguin.
import pytest
import clickclick.console as module_0
import re as module_1
import inspect as module_2
import gettext as module_3
import yaml.constructor as module_4
import click._compat as module_5
import enum as module_6
import yaml.tokens as module_7
import token as module_8

def test_case_0():
    var_0 = module_0.ok()

def test_case_1():
    var_0 = module_0.secho()

def test_case_2():
    bool_0 = True
    var_0 = module_0.format_time(bool_0)
    assert var_0 == '19278d ago'

def test_case_3():
    str_0 = '{'
    var_0 = module_0.format(str_0, str_0)
    assert var_0 == '{'

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.purge()
    module_0.print_table(var_0, var_0, titles=var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_0.secho()
    module_0.choice(var_0, var_0, var_0)

def test_case_6():
    var_0 = module_0.is_json_output()
    assert var_0 is False

def test_case_7():
    var_0 = module_0.is_yaml_output()
    assert var_0 is False

def test_case_8():
    var_0 = module_0.is_tsv_output()
    assert var_0 is False

def test_case_9():
    var_0 = module_0.is_text_output()
    assert var_0 is False

def test_case_10():
    str_0 = '_AU0_0sveT.'
    action_0 = module_0.Action(str_0, str_0, str_0)
    var_0 = action_0.__enter__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'clickclick.console.Action'
    assert var_0.msg == '_AU0_0sveT.'
    assert var_0.ok_msg == '_AU0_0sveT.'
    assert var_0.msg_args == {}
    assert var_0.nl == '_AU0_0sveT.'
    assert var_0.errors == []

def test_case_11():
    var_0 = module_0.get_now()
    action_0 = module_0.Action(var_0, var_0, var_0)
    var_1 = action_0.__exit__(var_0, action_0, action_0)

def test_case_12():
    var_0 = module_0.ok()
    var_1 = module_0.warning(var_0)
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    var_2 = module_2.isdatadescriptor(var_0)
    var_3 = float_range_0.convert(var_2, var_2, var_1)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)

def test_case_13():
    str_0 = '_AU0_0sveT.'
    action_0 = module_0.Action(str_0, str_0, str_0)
    var_0 = action_0.__enter__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'clickclick.console.Action'
    assert var_0.msg == '_AU0_0sveT.'
    assert var_0.ok_msg == '_AU0_0sveT.'
    assert var_0.msg_args == {}
    assert var_0.nl == '_AU0_0sveT.'
    assert var_0.errors == []
    var_1 = var_0.__eq__(str_0)
    action_1 = module_0.Action(var_0, nl=action_0)
    assert action_1.ok_msg == ' OK'
    var_2 = module_0.info(var_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '_Ak0_0sveT.'
    output_format_0 = module_0.OutputFormat(str_0)
    action_0 = module_0.Action(str_0, str_0, str_0)
    var_0 = action_0.__enter__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'clickclick.console.Action'
    assert var_0.msg == '_Ak0_0sveT.'
    assert var_0.ok_msg == '_Ak0_0sveT.'
    assert var_0.msg_args == {}
    assert var_0.nl == '_Ak0_0sveT.'
    assert var_0.errors == []
    module_0.print_table(var_0, str_0, max_column_widths=var_0)

def test_case_15():
    var_0 = module_0.get_now()

def test_case_16():
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'

def test_case_17():
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    aliased_group_0 = module_0.AliasedGroup()
    var_0 = aliased_group_0.get_command(float_range_0, float_range_0)
    var_1 = float_range_0.__repr__()
    assert var_1 == 'FloatRange(None, None)'
    var_2 = module_2.isdatadescriptor(aliased_group_0)

def test_case_18():
    url_type_0 = module_0.UrlType()
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme == 'https'
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_0.is_json_output()
    assert var_0 is False
    str_0 = 'white'
    output_format_0 = module_0.OutputFormat(var_0)
    assert output_format_0.fmt is False
    tuple_0 = (str_0, var_0)
    var_1 = module_3.ngettext(tuple_0, str_0, var_0)
    assert var_1 == 'white'
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    url_type_0 = module_0.UrlType()
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme == 'https'
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    var_2 = module_0.error(url_type_0)
    module_0.choice(url_type_0, float_range_0)

def test_case_20():
    url_type_0 = module_0.UrlType()
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme == 'https'
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    var_0 = module_0.ok()

def test_case_21():
    none_type_0 = None
    var_0 = module_0.format(none_type_0, none_type_0)
    assert var_0 == ''
    var_1 = module_0.print_table(var_0, var_0, none_type_0, max_column_widths=var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    var_0 = module_0.is_yaml_output()
    assert var_0 is False
    aliased_group_0 = module_0.AliasedGroup()
    float_range_0 = module_0.FloatRange(aliased_group_0, clamp=aliased_group_0)
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.max is None
    assert module_0.FloatRange.name == 'float range'
    none_type_0 = None
    var_1 = module_0.format_time(var_0)
    assert var_1 == ''
    var_2 = module_2.isdatadescriptor(none_type_0)
    float_range_0.convert(var_0, aliased_group_0, aliased_group_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    var_0 = module_4.UnsafeConstructor()
    module_0.print_table(var_0, var_0, max_column_widths=var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    var_0 = module_4.SafeConstructor()
    module_0.print_table(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    output_format_0 = module_0.OutputFormat(none_type_0)
    var_0 = output_format_0.__exit__(none_type_0, none_type_0, none_type_0)
    assert module_0.GLOBAL_STATE == {'output_format': None}
    module_0.print_tsv_table(none_type_0, output_format_0)

def test_case_26():
    var_0 = module_0.get_now()
    action_0 = module_0.Action(var_0, var_0, var_0)

def test_case_27():
    var_0 = module_5.get_binary_stdin()
    var_1 = module_0.print_table(var_0, var_0, titles=var_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.print_table(none_type_0, none_type_0, dict_0, max_column_widths=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    enum_dict_0 = module_6._EnumDict()
    str_0 = '{~ qJ81Q\x0ctd'
    tuple_0 = (str_0, enum_dict_0)
    var_0 = module_0.print_table(enum_dict_0, tuple_0, tuple_0)
    assert module_0.GLOBAL_STATE == {'output_format': None}
    var_0.ok(str_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    var_0 = module_4.SafeConstructor()
    module_0.print_table(var_0, var_0, titles=var_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    action_0 = module_0.Action(none_type_0)
    assert action_0.ok_msg == ' OK'
    assert module_0.GLOBAL_STATE == {'output_format': None}
    var_0 = action_0.__exit__(action_0, none_type_0, action_0)
    var_1 = action_0.ok(var_0)
    assert action_0.ok_msg == ' None'
    module_0.print_table(none_type_0, none_type_0, none_type_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = '_Ak0_0sveT.'
    action_0 = module_0.Action(str_0, str_0, str_0)
    var_0 = action_0.__enter__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'clickclick.console.Action'
    assert var_0.msg == '_Ak0_0sveT.'
    assert var_0.ok_msg == '_Ak0_0sveT.'
    assert var_0.msg_args == {}
    assert var_0.nl == '_Ak0_0sveT.'
    assert var_0.errors == []
    module_0.print_table(str_0, action_0, max_column_widths=str_0)

@pytest.mark.xfail(strict=True)
def test_case_33():
    constructor_0 = module_4.Constructor()
    var_0 = module_0.warning(constructor_0)
    assert module_0.GLOBAL_STATE == {'output_format': None}
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    none_type_0 = None
    aliased_group_0 = module_0.AliasedGroup()
    var_1 = float_range_0.__repr__()
    assert var_1 == 'FloatRange(None, None)'
    var_2 = module_0.format_time(none_type_0)
    var_3 = module_2.isdatadescriptor(constructor_0)
    var_4 = float_range_0.convert(var_3, var_3, var_0)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    module_0.print_table(var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    tuple_0 = (none_type_0, none_type_0)
    list_0 = [tuple_0, tuple_0]
    action_0 = module_0.Action(none_type_0, list_0, none_type_0)
    assert module_0.GLOBAL_STATE == {'output_format': None}
    action_0.fatal_error(action_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = '1Ju\r\r]P2Nb'
    module_0.print_tsv_table(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    var_0 = module_0.format(none_type_0, none_type_0)
    assert var_0 == ''
    assert module_0.GLOBAL_STATE == {'output_format': None}
    str_0 = '{~ qJ81SQ\x0c,tad/'
    var_1 = module_0.print_tsv_table(var_0, str_0)
    tuple_0 = (str_0, var_0)
    var_2 = module_0.print_table(var_0, tuple_0, tuple_0)
    var_3 = tuple_0.__ge__(var_2)
    var_4 = var_3.__repr__()
    var_3.parse_document_start()

@pytest.mark.xfail(strict=True)
def test_case_37():
    var_0 = module_0.is_json_output()
    assert var_0 is False
    assert module_0.GLOBAL_STATE == {'output_format': None}
    str_0 = 'white'
    output_format_0 = module_0.OutputFormat(var_0)
    assert output_format_0.fmt is False
    tuple_0 = (str_0, var_0)
    var_1 = module_3.ngettext(tuple_0, str_0, var_0)
    assert var_1 == 'white'
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    url_type_0 = module_0.UrlType()
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme == 'https'
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    var_2 = module_0.error(url_type_0)
    var_3 = output_format_0.__enter__()
    assert module_0.GLOBAL_STATE == {'output_format': False}
    module_0.choice(url_type_0, float_range_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = '{~ qJ81SQ\x0ctad/'
    module_0.choice(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    none_type_0 = None
    var_0 = module_0.error(none_type_0)
    var_1 = module_0.format(var_0, var_0)
    assert var_1 == ''
    var_2 = module_0.is_tsv_output()
    assert var_2 is False
    str_0 = '\\'
    var_3 = module_0.print_tsv_table(var_1, str_0)
    tuple_0 = (str_0, var_0)
    var_4 = module_0.format_time(var_0)
    var_5 = module_0.print_table(var_1, tuple_0, tuple_0)
    var_6 = var_2.__bool__()
    assert var_6 is False
    var_7 = module_0.secho()
    var_8 = module_7.FlowSequenceStartToken(var_6, var_4)
    assert var_8.start_mark is False
    assert var_8.end_mark is None
    module_0.choice(var_6, tuple_0)

def test_case_40():
    var_0 = module_0.is_tsv_output()
    assert var_0 is False
    str_0 = '{~ qJ81SQ\x0ctad/'
    var_1 = module_0.format(str_0, var_0)
    assert var_1 == 'no'
    var_2 = var_0.__bool__()
    assert var_2 is False
    var_3 = module_0.secho()

def test_case_41():
    float_range_0 = module_0.is_text_output()
    assert float_range_0 is False
    assert module_0.GLOBAL_STATE == {'output_format': False}
    aliased_group_0 = module_0.AliasedGroup()
    var_0 = aliased_group_0.get_command(float_range_0, float_range_0)
    var_1 = float_range_0.__repr__()
    assert var_1 == 'False'

@pytest.mark.xfail(strict=True)
def test_case_42():
    none_type_0 = None
    action_0 = module_0.Action(none_type_0)
    assert action_0.ok_msg == ' OK'
    assert module_0.GLOBAL_STATE == {'output_format': False}
    var_0 = action_0.progress()
    var_1 = action_0.__exit__(action_0, none_type_0, action_0)
    var_2 = action_0.warning(action_0)
    assert len(action_0.errors) == 1
    var_3 = action_0.ok(var_1)
    assert action_0.ok_msg == ' None'
    module_0.print_table(none_type_0, none_type_0, titles=action_0)

@pytest.mark.xfail(strict=True)
def test_case_43():
    none_type_0 = None
    var_0 = module_0.format(none_type_0, none_type_0)
    assert var_0 == ''
    assert module_0.GLOBAL_STATE == {'output_format': False}
    var_1 = var_0.__eq__(var_0)
    str_0 = '{~ qJ81SQ\x0ctad/'
    var_2 = module_0.format(str_0, var_1)
    assert var_2 == 'yes'
    var_3 = module_0.print_tsv_table(var_0, str_0)
    tuple_0 = (str_0, var_0)
    var_4 = module_0.info(str_0)
    var_5 = module_0.format_time(var_1)
    assert var_5 == '19278d ago'
    var_6 = module_0.print_table(var_0, tuple_0, tuple_0)
    var_7 = module_0.secho()
    module_0.choice(tuple_0, var_6)

def test_case_44():
    float_range_0 = module_0.FloatRange()
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.GLOBAL_STATE == {'output_format': False}
    assert module_0.FloatRange.name == 'float range'
    var_0 = module_2.isdatadescriptor(float_range_0)
    var_1 = float_range_0.convert(var_0, var_0, float_range_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)

@pytest.mark.xfail(strict=True)
def test_case_45():
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    var_1 = module_0.format(none_type_0, none_type_0)
    assert var_1 == ''
    str_0 = '{~ qJ81Q\x0ctad/'
    var_2 = module_0.print_tsv_table(var_1, str_0)
    var_3 = module_0.format_time(none_type_0)
    var_4 = module_0.print_table(str_0, var_1, max_column_widths=var_2)
    url_type_0 = module_0.UrlType(var_0)
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme == 'None'
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    url_type_0.convert(str_0, var_4, var_1)

@pytest.mark.xfail(strict=True)
def test_case_46():
    float_0 = -1458.15
    dict_0 = {float_0: float_0}
    module_0.print_table(dict_0, dict_0, titles=dict_0)

def test_case_47():
    none_type_0 = None
    action_0 = module_0.Action(none_type_0)
    assert action_0.ok_msg == ' OK'
    var_0 = action_0.__exit__(none_type_0, none_type_0, action_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    action_0 = module_0.Action(none_type_0)
    assert action_0.ok_msg == ' OK'
    assert module_0.GLOBAL_STATE == {'output_format': False}
    dict_0 = {}
    var_0 = action_0.error(none_type_0, **dict_0)
    assert action_0.errors == [None]
    var_1 = action_0.__exit__(none_type_0, none_type_0, action_0)
    var_2 = action_0.__exit__(action_0, none_type_0, action_0)
    var_3 = action_0.ok(var_2)
    assert action_0.ok_msg == ' None'
    module_0.print_table(none_type_0, none_type_0, none_type_0, var_3)

@pytest.mark.xfail(strict=True)
def test_case_49():
    none_type_0 = None
    action_0 = module_0.Action(none_type_0)
    assert action_0.ok_msg == ' OK'
    assert module_0.GLOBAL_STATE == {'output_format': False}
    var_0 = action_0.progress()
    var_1 = action_0.__exit__(none_type_0, none_type_0, action_0)
    var_2 = action_0.__exit__(action_0, none_type_0, action_0)
    var_3 = action_0.ok(var_2)
    assert action_0.ok_msg == ' None'
    module_0.print_table(none_type_0, none_type_0, titles=action_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = 'O4oU>'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.format_time(dict_0)
    none_type_0 = None
    aliased_group_0 = module_0.AliasedGroup(commands=dict_0)
    aliased_group_0.get_command(dict_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    none_type_0 = None
    var_0 = module_0.format(none_type_0, none_type_0)
    assert var_0 == ''
    var_1 = var_0.__eq__(var_0)
    str_0 = '{~ qJ81SQ\x0ctad/'
    var_2 = module_0.format(str_0, var_1)
    assert var_2 == 'yes'
    var_3 = module_0.format_time(var_1)
    assert var_3 == '19278d ago'
    var_4 = module_0.print_table(var_0, var_2, var_2)
    url_type_0 = module_0.UrlType(var_4)
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme is None
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    url_type_0.convert(var_3, none_type_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    var_1 = module_0.format(none_type_0, none_type_0)
    assert var_1 == ''
    str_0 = '{~ qJ81Q\x0ctad/'
    var_2 = module_0.print_tsv_table(var_1, str_0)
    var_3 = module_0.format_time(none_type_0)
    url_type_0 = module_0.UrlType(var_0)
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme == 'None'
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    url_type_0.convert(str_0, var_2, var_1)

@pytest.mark.xfail(strict=True)
def test_case_53():
    none_type_0 = None
    var_0 = module_0.error(none_type_0)
    assert module_0.GLOBAL_STATE == {'output_format': False}
    var_1 = var_0.__repr__()
    var_2 = module_0.format(none_type_0, none_type_0)
    assert var_2 == ''
    var_3 = module_0.is_yaml_output()
    assert var_3 is False
    str_0 = '{~ qJ81SQ\x0ctad/'
    var_4 = module_0.format(str_0, none_type_0)
    assert var_4 == ''
    var_5 = module_0.print_tsv_table(var_2, str_0)
    tuple_0 = (str_0, var_2)
    var_6 = module_0.print_table(var_4, var_2, max_column_widths=var_5)
    var_7 = module_0.info(str_0)
    var_8 = module_0.format_time(var_4)
    assert var_8 == ''
    var_9 = module_0.print_table(var_2, tuple_0, tuple_0)
    url_type_0 = module_0.UrlType(var_9)
    assert f'{type(url_type_0).__module__}.{type(url_type_0).__qualname__}' == 'clickclick.console.UrlType'
    assert url_type_0.default_scheme is None
    assert url_type_0.allowed_schemes == ('http', 'https')
    assert module_0.UrlType.name == 'url'
    url_type_0.convert(var_8, var_6, var_2)

@pytest.mark.xfail(strict=True)
def test_case_54():
    var_0 = module_0.is_yaml_output()
    assert var_0 is False
    aliased_group_0 = module_0.AliasedGroup()
    float_range_0 = module_0.FloatRange(aliased_group_0, clamp=aliased_group_0)
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.max is None
    assert module_0.FloatRange.name == 'float range'
    float_range_0.convert(var_0, aliased_group_0, aliased_group_0)

@pytest.mark.xfail(strict=True)
def test_case_55():
    str_0 = '_Ak0_0sveT.'
    str_1 = 'Ni\nN4<}qJ,~\n<c^{A'
    str_2 = 'PGHM6zUP.kvedm'
    str_3 = ''
    dict_0 = {str_1: str_0, str_1: str_1, str_2: str_0, str_3: str_3}
    action_0 = module_0.Action(str_0, **dict_0)
    assert action_0.ok_msg == ' OK'
    var_0 = action_0.__enter__()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'clickclick.console.Action'
    assert var_0.msg == '_Ak0_0sveT.'
    assert var_0.ok_msg == ' OK'
    assert var_0.msg_args == {'Ni\nN4<}qJ,~\n<c^{A': 'Ni\nN4<}qJ,~\n<c^{A', 'PGHM6zUP.kvedm': '_Ak0_0sveT.', '': ''}
    assert var_0.nl is False
    assert var_0.errors == []
    var_0.__add__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_56():
    var_0 = module_0.is_yaml_output()
    assert var_0 is False
    var_1 = module_2.stack()
    module_0.choice(var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_57():
    none_type_0 = None
    var_0 = module_0.is_yaml_output()
    assert var_0 is False
    aliased_group_0 = module_0.AliasedGroup()
    float_range_0 = module_0.FloatRange(var_0)
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is False
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    aliased_group_1 = module_0.AliasedGroup()
    var_1 = module_0.format_time(none_type_0)
    var_2 = module_0.format_time(var_0)
    assert var_2 == ''
    var_3 = module_2.isdatadescriptor(var_0)
    var_4 = float_range_0.convert(var_3, aliased_group_0, var_1)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    module_8.ISNONTERMINAL(aliased_group_0)

@pytest.mark.xfail(strict=True)
def test_case_58():
    var_0 = module_0.is_yaml_output()
    assert var_0 is False
    float_range_0 = module_0.FloatRange(max=var_0)
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is False
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    aliased_group_0 = module_0.AliasedGroup()
    var_1 = module_0.format_time(var_0)
    assert var_1 == ''
    var_2 = float_range_0.convert(var_0, float_range_0, var_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    module_0.print_table(var_2, float_range_0, max_column_widths=aliased_group_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    none_type_0 = None
    var_0 = module_0.format(none_type_0, none_type_0)
    assert var_0 == ''
    var_1 = module_0.format(var_0, var_0)
    assert var_1 == ''
    regex_flag_0 = module_1.RegexFlag.UNICODE
    var_2 = module_0.is_yaml_output()
    assert var_2 is False
    float_range_0 = module_0.FloatRange(max=var_2)
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min is None
    assert float_range_0.max is False
    assert float_range_0.clamp is False
    assert module_0.FloatRange.name == 'float range'
    float_range_0.convert(regex_flag_0, var_1, float_range_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    regex_flag_0 = module_1.RegexFlag.UNICODE
    float_range_0 = module_0.FloatRange(regex_flag_0)
    assert f'{type(float_range_0).__module__}.{type(float_range_0).__qualname__}' == 'clickclick.console.FloatRange'
    assert float_range_0.min == module_1.RegexFlag.UNICODE
    assert float_range_0.max is None
    assert float_range_0.clamp is False
    assert module_0.GLOBAL_STATE == {'output_format': False}
    assert module_0.FloatRange.name == 'float range'
    aliased_group_0 = module_0.AliasedGroup()
    var_0 = aliased_group_0.get_command(aliased_group_0, regex_flag_0)
    var_1 = module_0.format_time(var_0)
    var_2 = module_2.isdatadescriptor(var_0)
    float_range_0.convert(var_2, var_0, float_range_0)