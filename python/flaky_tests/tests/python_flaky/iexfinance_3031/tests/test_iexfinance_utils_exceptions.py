# Automatically generated by Pynguin.
import pytest
import iexfinance.utils.exceptions as module_0

def test_case_0():
    none_type_0 = None
    i_e_x_authentication_error_0 = module_0.IEXAuthenticationError(none_type_0)
    assert i_e_x_authentication_error_0.msg is None
    assert module_0.DEP_ERROR_MSG == '%s has been immediately deprecated.'

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -771
    none_type_0 = None
    i_e_x_query_error_0 = module_0.IEXQueryError(int_0, none_type_0)
    assert i_e_x_query_error_0.response is None
    assert i_e_x_query_error_0.status == -771
    assert module_0.DEP_ERROR_MSG == '%s has been immediately deprecated.'
    i_e_x_symbol_error_0 = module_0.IEXSymbolError(i_e_x_query_error_0)
    assert f'{type(i_e_x_symbol_error_0.symbol).__module__}.{type(i_e_x_symbol_error_0.symbol).__qualname__}' == 'iexfinance.utils.exceptions.IEXQueryError'
    i_e_x_symbol_error_0.__str__()

def test_case_2():
    bool_0 = False
    none_type_0 = None
    i_e_x_query_error_0 = module_0.IEXQueryError(bool_0, none_type_0)
    assert i_e_x_query_error_0.response is None
    assert i_e_x_query_error_0.status is False
    assert module_0.DEP_ERROR_MSG == '%s has been immediately deprecated.'
    immediate_deprecation_error_0 = module_0.ImmediateDeprecationError(bool_0)
    assert immediate_deprecation_error_0.endpoint is False
    var_0 = immediate_deprecation_error_0.__str__()
    assert var_0 == 'False has been immediately deprecated.'
    var_1 = immediate_deprecation_error_0.__str__()
    assert var_1 == 'False has been immediately deprecated.'
    var_2 = var_1.__str__()
    assert var_2 == 'False has been immediately deprecated.'
    var_3 = var_2.__str__()
    assert var_3 == 'False has been immediately deprecated.'

def test_case_3():
    dict_0 = {}
    i_e_x_query_error_0 = module_0.IEXQueryError(dict_0, dict_0)
    assert i_e_x_query_error_0.response == {}
    assert i_e_x_query_error_0.status == {}
    assert module_0.DEP_ERROR_MSG == '%s has been immediately deprecated.'
    var_0 = i_e_x_query_error_0.__str__()
    assert var_0 == 'An error occurred while making the query ({}): {}'
    var_1 = var_0.__str__()
    assert var_1 == 'An error occurred while making the query ({}): {}'
    var_2 = var_1.__str__()
    assert var_2 == 'An error occurred while making the query ({}): {}'
    var_3 = var_2.__str__()
    assert var_3 == 'An error occurred while making the query ({}): {}'
    var_4 = var_3.__str__()
    assert var_4 == 'An error occurred while making the query ({}): {}'
    var_5 = var_4.__str__()
    assert var_5 == 'An error occurred while making the query ({}): {}'
    var_6 = var_5.__str__()
    assert var_6 == 'An error occurred while making the query ({}): {}'
    var_7 = var_6.__str__()
    assert var_7 == 'An error occurred while making the query ({}): {}'

def test_case_4():
    none_type_0 = None
    i_e_x_authentication_error_0 = module_0.IEXAuthenticationError(none_type_0)
    assert i_e_x_authentication_error_0.msg is None
    assert module_0.DEP_ERROR_MSG == '%s has been immediately deprecated.'
    var_0 = i_e_x_authentication_error_0.__str__()
    var_1 = i_e_x_authentication_error_0.__str__()
    var_2 = i_e_x_authentication_error_0.__str__()

def test_case_5():
    bool_0 = True
    immediate_deprecation_error_0 = module_0.ImmediateDeprecationError(bool_0)
    assert immediate_deprecation_error_0.endpoint is True
    assert module_0.DEP_ERROR_MSG == '%s has been immediately deprecated.'
    var_0 = immediate_deprecation_error_0.__str__()
    assert var_0 == 'True has been immediately deprecated.'
    var_1 = var_0.__str__()
    assert var_1 == 'True has been immediately deprecated.'