# Automatically generated by Pynguin.
import pytest
import idstools.maps as module_0
import re as module_1

def test_case_0():
    signature_map_0 = module_0.SignatureMap()
    var_0 = signature_map_0.get(signature_map_0, signature_map_0)

def test_case_1():
    classification_map_0 = module_0.ClassificationMap()
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}

def test_case_2():
    classification_map_0 = module_0.ClassificationMap()
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}
    var_0 = classification_map_0.get_by_name(classification_map_0)

def test_case_3():
    signature_map_0 = module_0.SignatureMap()

@pytest.mark.xfail(strict=True)
def test_case_4():
    signature_map_0 = module_0.SignatureMap()
    str_0 = '9bAc\n'
    var_0 = module_1.escape(str_0)
    var_1 = signature_map_0.size()
    signature_map_0.load_signature_map(var_0)

def test_case_5():
    classification_map_0 = module_0.ClassificationMap()
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}
    var_0 = classification_map_0.size()
    list_0 = []
    signature_map_0 = module_0.SignatureMap()
    signature_map_1 = module_0.SignatureMap()
    classification_map_1 = module_0.ClassificationMap(list_0)
    str_0 = '9bAc\n'
    var_1 = classification_map_1.get_by_name(str_0)
    var_2 = signature_map_1.load_generator_map(list_0)
    signature_map_2 = module_0.SignatureMap()
    var_3 = signature_map_1.size()
    var_4 = classification_map_1.get(var_3)
    var_5 = signature_map_1.size()
    var_6 = classification_map_1.load_from_file(list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    classification_map_0 = module_0.ClassificationMap()
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}
    var_0 = classification_map_0.get_by_name(classification_map_0)
    classification_map_0.add(classification_map_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    signature_map_0 = module_0.SignatureMap()
    str_0 = '{Jo_R^\\D8RF2H&!ib1'
    signature_map_0.load_generator_map(str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    signature_map_0 = module_0.SignatureMap()
    classification_map_0 = module_0.ClassificationMap(list_0)
    bool_0 = True
    var_0 = signature_map_0.load_generator_map(list_0)
    var_1 = classification_map_0.get(bool_0)
    var_1.__len__(list_0)

def test_case_9():
    str_0 = '9bAc\n'
    classification_map_0 = module_0.ClassificationMap(str_0)
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}

def test_case_10():
    list_0 = []
    signature_map_0 = module_0.SignatureMap()
    signature_map_1 = module_0.SignatureMap()
    classification_map_0 = module_0.ClassificationMap(list_0)
    signature_map_2 = module_0.SignatureMap()
    var_0 = signature_map_1.load_generator_map(list_0)
    var_1 = signature_map_1.size()
    var_2 = classification_map_0.get(var_1)
    var_3 = signature_map_1.get(classification_map_0, var_0)
    var_4 = var_2.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    signature_map_0 = module_0.SignatureMap()
    str_0 = '9bAc\n'
    signature_map_0.load_signature_map(str_0)

def test_case_12():
    classification_map_0 = module_0.ClassificationMap()
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}
    var_0 = classification_map_0.size()
    list_0 = []
    signature_map_0 = module_0.SignatureMap()
    signature_map_1 = module_0.SignatureMap()
    classification_map_1 = module_0.ClassificationMap(list_0)
    signature_map_2 = module_0.SignatureMap()
    str_0 = '9bAc\n'
    var_1 = classification_map_1.get_by_name(str_0)
    var_2 = signature_map_1.load_generator_map(list_0)
    var_3 = module_1.escape(str_0)
    signature_map_3 = module_0.SignatureMap()
    var_4 = signature_map_1.size()
    var_5 = classification_map_1.get(var_4)
    var_6 = classification_map_1.load_from_file(list_0)
    var_7 = signature_map_2.get(signature_map_1, var_6)
    var_8 = signature_map_1.load_signature_map(list_0)
    with pytest.raises(TypeError):
        var_3.__contains__(var_5, var_1)

def test_case_13():
    var_0 = module_1.purge()
    classification_map_0 = module_0.ClassificationMap(var_0)
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}
    bool_0 = True
    var_1 = classification_map_0.get(bool_0)

def test_case_14():
    int_0 = 3
    signature_map_0 = module_0.SignatureMap()
    var_0 = signature_map_0.get(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    classification_map_0 = module_0.ClassificationMap()
    assert f'{type(classification_map_0).__module__}.{type(classification_map_0).__qualname__}' == 'idstools.maps.ClassificationMap'
    assert classification_map_0.id_map == []
    assert classification_map_0.name_map == {}
    var_0 = classification_map_0.size()
    var_1 = classification_map_0.get(var_0)
    classification_map_1 = module_0.ClassificationMap()
    list_0 = []
    signature_map_0 = module_0.SignatureMap()
    classification_map_2 = module_0.ClassificationMap(list_0)
    str_0 = '# YN\n` ;'
    var_2 = classification_map_2.get_by_name(str_0)
    bool_0 = True
    var_3 = signature_map_0.get(bool_0, str_0)
    var_4 = signature_map_0.load_generator_map(list_0)
    var_5 = module_1.escape(str_0)
    signature_map_1 = module_0.SignatureMap()
    var_6 = classification_map_2.get(bool_0)
    var_7 = signature_map_0.load_signature_map(list_0, list_0)
    var_8 = classification_map_2.load_from_file(var_5)
    var_9 = signature_map_0.size()
    signature_map_0.load_generator_map(str_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    signature_map_0 = module_0.SignatureMap()
    str_0 = '\n9bAc\n'
    signature_map_0.load_signature_map(str_0)