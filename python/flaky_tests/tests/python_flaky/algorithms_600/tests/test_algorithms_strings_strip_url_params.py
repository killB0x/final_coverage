# Automatically generated by Pynguin.
import pytest
import algorithms.strings.strip_url_params as module_0
import urllib.parse as module_1
import collections.abc as module_2

def test_case_0():
    str_0 = '='
    var_0 = module_0.strip_url_params1(str_0, str_0)
    assert var_0 == '='

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -1766.92159
    module_0.strip_url_params1(float_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    module_0.strip_url_params1(dict_0, dict_0)

def test_case_3():
    str_0 = '='
    var_0 = module_0.strip_url_params2(str_0)
    assert var_0 == '='
    var_1 = module_0.strip_url_params1(str_0, str_0)
    assert var_1 == '='

def test_case_4():
    str_0 = '?_(&F2&%p~+l)/GJ1'
    var_0 = module_0.strip_url_params3(str_0, str_0)

def test_case_5():
    none_type_0 = None
    var_0 = module_0.strip_url_params3(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '?9(&F2&xp~+l)/GJ1'
    module_0.strip_url_params1(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '?_(&F2&%p~+l)/GJ1'
    module_0.strip_url_params1(str_0)

def test_case_8():
    str_0 = '?9(&F<&xp~+K)/GJ1'
    var_0 = module_0.strip_url_params2(str_0)
    assert var_0 == '?9(&F<&xp~+K)/GJ1'

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '&rILX3*e]RO'
    module_0.strip_url_params1(str_0, str_0)

def test_case_10():
    str_0 = '7'
    var_0 = module_0.strip_url_params1(str_0, str_0)
    assert var_0 == '7'

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '\nHistogram function.\n\nHistogram is an accurate representation of the distribution of numerical data.\nIt is an estimate of the probability distribution of a continuous variable.\nhttps://en.wikipedia.org/wiki/Histogram\n\nExample:\n    list_1 = [3, 3, 2, 1]\n    :return {1: 1, 2: 1, 3: 2}\n\n    list_2 = [2, 3, 5, 5, 5, 6, 4, 3, 7]\n    :return {2: 1, 3: 2, 4: 1, 5: 3, 6: 1, 7: 1}\n'
    var_0 = module_1.unquote_to_bytes(str_0)
    str_1 = '='
    str_2 = '?9(&F2&xp~+l)/GJ1'
    var_1 = module_0.strip_url_params1(str_1)
    assert var_1 == '='
    dict_0 = {str_1: var_0, str_1: var_0, str_2: var_0}
    var_2 = module_0.strip_url_params2(str_2)
    assert var_2 == '?9(&F2&xp~+l)/GJ1'
    var_3 = var_0.__len__()
    var_4 = module_0.strip_url_params2(var_2, dict_0)
    assert var_4 == '?9(&F2&xp~+l)/GJ1'
    module_0.strip_url_params1(var_4, var_4)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '?i(&F2.\x0b& =p+3/GJ1'
    var_0 = module_0.strip_url_params2(str_0, str_0)
    assert var_0 == '?i('
    var_1 = module_0.strip_url_params3(str_0)
    assert var_1 == '?+=p+3%2FGJ1'
    module_0.strip_url_params1(var_1)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '=1'
    str_1 = '?9(&F2&xp~+l)/GJ1'
    var_0 = module_0.strip_url_params1(str_0)
    assert var_0 == '=1'
    var_1 = module_0.strip_url_params3(str_1, str_0)
    var_2 = module_0.strip_url_params2(str_1)
    assert var_2 == '?9(&F2&xp~+l)/GJ1'
    module_0.strip_url_params1(var_2)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = '?'
    none_type_0 = None
    var_0 = module_0.strip_url_params1(str_0, none_type_0)
    assert var_0 == '?'
    module_0.strip_url_params2(str_0, str_0)

def test_case_15():
    str_0 = '/=1'
    var_0 = module_0.strip_url_params1(str_0)
    assert var_0 == '/=1/=1'
    var_1 = module_0.strip_url_params3(var_0, str_0)
    assert var_1 == '/=1/=1'
    var_2 = module_0.strip_url_params2(var_0)
    assert var_2 == '/=1/=1'
    var_3 = module_0.strip_url_params1(var_2)
    assert var_3 == '/=1/=1/=1'
    var_4 = module_0.strip_url_params2(str_0, var_2)

def test_case_16():
    none_type_0 = None
    var_0 = module_0.strip_url_params3(none_type_0)
    str_0 = '\nHistogram function.\n\nHistogram is an accurate representation of the distribution of numerical data.\nIt is an estimate of the probability distribution of a continuous variable.\nhttps://en.wikipedia.org/wiki/Histogram\n\nExample:\n    list_1 = [3, 3, 2, 1]\n    :return {1: 1, 2: 1, 3: 2}\n\n    list_2 = [2, 3, 5, 5, 5, 6, 4, 3, 7]\n    :return {2: 1, 3: 2, 4: 1, 5: 3, 6: 1, 7: 1}\n'
    none_type_1 = None
    str_1 = '//=1'
    keys_view_0 = module_2.KeysView(none_type_1)
    var_1 = module_0.strip_url_params1(str_1)
    assert var_1 == '//=1//=1'
    var_2 = module_0.strip_url_params3(str_1, str_1)
    dict_0 = {str_1: keys_view_0, str_1: keys_view_0, str_0: keys_view_0}
    var_3 = module_0.strip_url_params2(var_2)
    assert var_3 == '//=1'
    var_4 = module_0.strip_url_params2(var_3, dict_0)
    var_5 = module_0.strip_url_params1(var_3)
    assert var_5 == '//=1//=1'
    var_6 = var_4.__eq__(dict_0)
    var_7 = module_0.strip_url_params2(str_1, dict_0)
    var_8 = module_0.strip_url_params1(var_3, str_1)
    assert var_8 == '//=1'

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = '?i(&F2.\x0b& =p+3/GJ1'
    var_0 = module_0.strip_url_params3(str_0)
    assert var_0 == '?+=p+3%2FGJ1'
    module_0.strip_url_params1(var_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    var_0 = module_0.strip_url_params3(none_type_0)
    str_0 = '/=1'
    str_1 = '?i(&iF2&x =p~+l3/GJ1'
    keys_view_0 = module_2.KeysView(var_0)
    var_1 = module_0.strip_url_params1(str_0)
    assert var_1 == '/=1/=1'
    var_2 = module_0.strip_url_params3(str_1, str_0)
    assert var_2 == '?x+=p~+l3%2FGJ1'
    dict_0 = {str_0: keys_view_0, str_0: keys_view_0, str_1: keys_view_0}
    var_3 = module_0.strip_url_params3(var_2, var_0)
    assert var_3 == '?x+=p~+l3%2FGJ1'
    var_4 = module_0.strip_url_params2(str_1)
    assert var_4 == '?i(&x =p~+l3/GJ1'
    var_5 = module_0.strip_url_params2(var_4, dict_0)
    assert var_5 == '?i(&x =p~+l3/GJ1'
    module_0.strip_url_params1(str_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = '?i(&F2.\x0b& =p+3/GJ1'
    var_0 = module_0.strip_url_params3(str_0, str_0)
    assert var_0 == ''
    var_1 = module_0.strip_url_params3(str_0)
    assert var_1 == '?+=p+3%2FGJ1'
    module_0.strip_url_params1(var_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '~b/=1'
    str_1 = '?i(&F2.g& =p>+`/GJ1'
    var_0 = module_0.strip_url_params3(str_1, str_0)
    assert var_0 == '?+=p%3E+%60%2FGJ1'
    module_0.strip_url_params1(var_0)