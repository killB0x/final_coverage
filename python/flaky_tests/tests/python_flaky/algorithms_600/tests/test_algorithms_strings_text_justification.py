# Automatically generated by Pynguin.
import pytest
import algorithms.strings.text_justification as module_0

def test_case_0():
    bool_0 = True
    str_0 = "\tZT1g'{jhKj# 0I^Ih\\P"
    var_0 = module_0.text_justification(str_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    var_0 = module_0.text_justification(dict_0, dict_0)
    bytes_0 = b' \x8e\x9d\xb9,D'
    set_0 = {bytes_0}
    bool_0 = True
    list_0 = [set_0, bool_0, bytes_0, bytes_0]
    module_0.text_justification(list_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.text_justification(bool_0, bool_0)

def test_case_3():
    bool_0 = False
    str_0 = 'cXfQq'
    with pytest.raises(ValueError):
        module_0.text_justification(str_0, bool_0)

def test_case_4():
    bool_0 = True
    str_0 = "\tZT1g'{jhKj# 0I^Ih\\P"
    var_0 = module_0.text_justification(str_0, bool_0)
    int_0 = 9
    var_1 = module_0.text_justification(str_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    str_0 = "\tZT1g'{jhKj# 0I^Ih\\P"
    var_0 = module_0.text_justification(str_0, bool_0)
    int_0 = 38
    complex_0 = (504.41908003018864+554.5465j)
    var_1 = module_0.text_justification(str_0, int_0)
    module_0.text_justification(var_1, complex_0)