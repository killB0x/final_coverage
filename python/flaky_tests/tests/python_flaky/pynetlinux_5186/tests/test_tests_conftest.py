# Automatically generated by Pynguin.
import pytest
import re as module_0
import tests.conftest as module_1
import _pytest.config as module_2
import pynetlinux.ifconfig as module_3

def test_case_0():
    var_0 = module_0.purge()
    with pytest.raises(AssertionError):
        module_1.check_output(var_0, substr=var_0, not_regex=var_0, not_substr=var_0, debug=var_0)

def test_case_1():
    str_0 = 'Hb2^GS @!LvQ<_qwo\tV'
    module_1.if2(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.interface(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.RegexFlag.UNICODE
    module_1.check_output(var_0, substr=var_0, not_regex=var_0, not_substr=var_0, debug=var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'BKddv=SM9}RDgdo'
    module_1.check_output(str_0, not_substr=str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_2.PytestPluginManager()
    module_1.check_output(var_0, var_0, var_0, not_substr=var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_2.PytestPluginManager()
    module_1.check_output(var_0, not_regex=var_0, not_substr=var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = 'BKddv=SM9}R\rDgdo'
    module_1.check_output(str_0, str_0, debug=str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'BKddv=SM9}R\rDgdo'
    module_1.check_output(str_0, not_regex=str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'BKddv=SM9}R\rDgdo'
    module_1.check_output(str_0, substr=str_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'BKddv=SM9}R\rDgdo'
    module_1.check_output(str_0, not_regex=str_0, not_substr=str_0)

def test_case_11():
    str_0 = 'Kddv=SM9}RDgdo'
    bytes_0 = b'R\x13@\xd8'
    with pytest.raises(AssertionError):
        module_1.check_output(str_0, substr=bytes_0, debug=bytes_0)

def test_case_12():
    str_0 = 'xBKddv=S9!Dgdo'
    var_0 = module_3.iterifs()
    var_1 = module_1.check_output(str_0, substr=var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'BKddv=S^}R\rDgNo'
    bytes_0 = b'R\x13@\xd8'
    module_1.check_output(str_0, not_regex=bytes_0, not_substr=bytes_0)

def test_case_14():
    str_0 = '!<D\x0cXT$uXa%\rm'
    bytes_0 = b'1'
    with pytest.raises(AssertionError):
        module_1.check_output(str_0, not_substr=bytes_0)

def test_case_15():
    str_0 = 'BK};dv=D^}\rDgC\x0b'
    bytes_0 = b'/proc/net/dev'
    with pytest.raises(AssertionError):
        module_1.check_output(str_0, substr=bytes_0, not_regex=bytes_0, debug=str_0)

def test_case_16():
    str_0 = 'BKJA8=^}\rDgC\x0b'
    bytes_0 = b'='
    dict_0 = {bytes_0: str_0, bytes_0: bytes_0}
    with pytest.raises(AssertionError):
        module_1.check_output(str_0, dict_0)

def test_case_17():
    str_0 = 'BdvK=^}3TC\x0b'
    bytes_0 = b'H'
    list_0 = [bytes_0]
    var_0 = module_1.check_output(str_0, not_regex=list_0, debug=list_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = 'BKJA8=^}\rDgC\x0b'
    bytes_0 = b''
    dict_0 = {bytes_0: str_0, bytes_0: bytes_0}
    var_0 = module_1.check_output(str_0, dict_0)
    var_0.str()

def test_case_19():
    str_0 = 'BdvK=^}3TC\x0b'
    bytes_0 = b''
    list_0 = [bytes_0]
    with pytest.raises(AssertionError):
        module_1.check_output(str_0, not_regex=list_0, debug=list_0)