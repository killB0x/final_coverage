# Automatically generated by Pynguin.
import pytest
import pynetlinux.ifconfig as module_0

def test_case_0():
    var_0 = module_0.list_ifs()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40

def test_case_1():
    var_0 = module_0.list_ifs()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert f'{type(module_0.sock).__module__}.{type(module_0.sock).__qualname__}' == 'socket.socket'
    var_1 = module_0.findif(var_0)

def test_case_2():
    float_0 = 961.91052
    interface_0 = module_0.Interface(float_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert f'{type(module_0.sock).__module__}.{type(module_0.sock).__qualname__}' == 'socket.socket'
    assert module_0.sockfd == 3
    var_0 = interface_0.get_stats()

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    interface_0 = module_0.Interface(bool_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert f'{type(module_0.sock).__module__}.{type(module_0.sock).__qualname__}' == 'socket.socket'
    interface_0.set_netmask(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.list_ifs()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert f'{type(module_0.sock).__module__}.{type(module_0.sock).__qualname__}' == 'socket.socket'
    int_0 = -1999
    interface_0 = module_0.Interface(int_0)
    interface_0.set_pause_param(int_0, int_0, int_0)

def test_case_5():
    var_0 = module_0.shutdown()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sock is None
    assert module_0.sockfd is None

def test_case_6():
    var_0 = module_0.list_ifs()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    module_0.findif(var_0, var_0)

def test_case_7():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_0 = interface_0.__repr__()
    interface_0.is_up()
    var_2 = module_0.list_ifs(var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    interface_0 = module_0.Interface(none_type_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_0 = module_0.list_ifs()
    interface_0.up()

def test_case_9():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_0 = interface_0.__repr__()
    interface_0.is_up()
    var_1 = module_0.findif(bytes_0)
    var_2 = interface_0.get_index()
    var_4 = module_0.list_ifs(var_3)

@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    interface_0 = module_0.Interface(set_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    interface_0.down()

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    interface_0 = module_0.Interface(none_type_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sock is None
    assert module_0.sockfd is None
    interface_0.set_link_mode(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sock is None
    assert module_0.sockfd is None
    interface_0.is_up()
    interface_1 = module_0.Interface(bytes_0)
    var_0 = interface_1.set_ip(interface_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.init()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_1 = var_0.__repr__()
    interface_0 = module_0.Interface(var_1)
    interface_0.set_mac(var_1)

def test_case_14():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sockfd == 3
    var_0 = interface_0.get_mac()
    assert var_0 == '06:07:70:54:70:E8'
    var_1 = interface_0.is_up()
    assert var_1 is True
    var_2 = module_0.findif(bytes_0)

def test_case_15():
    bytes_0 = b'\xa2\xf3\xcd\xfa\x89a\\|t\xfbF\xf7\xdbe'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sockfd == 3
    var_0 = interface_0.get_netmask()
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_16():
    var_0 = module_0.list_ifs()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    bytes_0 = b'a'
    interface_0 = module_0.Interface(bytes_0)
    var_1 = interface_0.get_ip()
    interface_0.get_link_info()

def test_case_17():
    bytes_0 = b'\xa2\xf3\xcd\xfa\x89a\\|t\xfbF\xf7\xdbe'
    var_0 = module_0.findif(bytes_0, bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    interface_0 = module_0.Interface(bytes_0)
    interface_1 = module_0.Interface(bytes_0)
    var_1 = interface_1.get_ip()

def test_case_18():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_0 = interface_0.get_stats()
    var_1 = interface_0.__repr__()
    var_2 = interface_0.is_up()
    var_3 = module_0.list_ifs(var_2)

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_0.list_ifs()
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    bytes_0 = b'a'
    interface_0 = module_0.Interface(bytes_0)
    var_1 = interface_0.get_netmask()
    var_2 = interface_0.get_ip()
    interface_0.get_link_info()

def test_case_20():
    bytes_0 = b'M\x13<\xe7\xb1\xf1\xaa\xfd\x84\xb8\x80\xa5\xa1\xb3\xba'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    interface_0.get_link_info()

@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b'Cap'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sockfd == 3
    interface_0.get_link_info()

def test_case_22():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_0 = interface_0.is_up()
    assert var_0 is True

def test_case_23():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    interface_0.set_link_auto(hundred=interface_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    var_0 = module_0.list_ifs()
    interface_0.set_link_auto(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b'tap0'
    interface_0 = module_0.Interface(bytes_0)
    assert module_0.SIOCGIFCONF == 35090
    assert module_0.SIOCGIFINDEX == 35123
    assert module_0.SIOCGIFFLAGS == 35091
    assert module_0.SIOCSIFFLAGS == 35092
    assert module_0.SIOCGIFHWADDR == 35111
    assert module_0.SIOCSIFHWADDR == 35108
    assert module_0.SIOCGIFADDR == 35093
    assert module_0.SIOCSIFADDR == 35094
    assert module_0.SIOCGIFNETMASK == 35099
    assert module_0.SIOCSIFNETMASK == 35100
    assert module_0.SIOCETHTOOL == 35142
    assert module_0.IFF_UP == 1
    assert module_0.AF_UNIX == 1
    assert module_0.AF_INET == 2
    assert module_0.ETHTOOL_GSET == 1
    assert module_0.ETHTOOL_SSET == 2
    assert module_0.ETHTOOL_GLINK == 10
    assert module_0.ETHTOOL_SPAUSEPARAM == 19
    assert module_0.ADVERTISED_10baseT_Half == 1
    assert module_0.ADVERTISED_10baseT_Full == 2
    assert module_0.ADVERTISED_100baseT_Half == 4
    assert module_0.ADVERTISED_100baseT_Full == 8
    assert module_0.ADVERTISED_1000baseT_Half == 16
    assert module_0.ADVERTISED_1000baseT_Full == 32
    assert module_0.ADVERTISED_Autoneg == 64
    assert module_0.ADVERTISED_TP == 128
    assert module_0.ADVERTISED_AUI == 256
    assert module_0.ADVERTISED_MII == 512
    assert module_0.ADVERTISED_FIBRE == 1024
    assert module_0.ADVERTISED_BNC == 2048
    assert module_0.ADVERTISED_10000baseT_Full == 4096
    assert module_0.SIZE_OF_IFREQ == 40
    assert module_0.sockfd == 3
    var_0 = interface_0.__repr__()
    var_1 = interface_0.get_mac()
    assert var_1 == '06:07:70:54:70:E8'
    interface_0.set_mac(var_1)