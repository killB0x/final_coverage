# Automatically generated by Pynguin.
import pytest
import vkbeautify as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'eN\x0bC]#.9(][6~>q#tfD'
    module_0.xml(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1849
    module_0.xml(int_0)

def test_case_2():
    bool_0 = True
    module_0.json(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    module_0.json(list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 1859
    module_0.css(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = (143.36-1904.98853j)
    module_0.css(complex_0)

def test_case_6():
    str_0 = 'a'
    var_0 = module_0.xml(str_0)
    assert var_0 == ' '

def test_case_7():
    str_0 = '>$?'
    var_0 = module_0.xml(str_0)
    assert var_0 == ' '

def test_case_8():
    str_0 = 'Yh\x0cg~\rN+9*4E#mRVg@'
    var_0 = module_0.json(str_0)
    assert var_0 == ' '

def test_case_9():
    str_0 = 'eN\x0bC]#.9(][6~>q#tfD'
    var_0 = module_0.css(str_0)
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'eN\x0bC]#.9(][6~>q#f'
    var_0 = module_0.xml(str_0)
    str_1 = 'H*k_J{!vo<D4'
    var_1 = module_0.css(str_1)
    var_2 = module_0.json(str_1, str_0)
    var_3 = module_0.json(str_1)
    var_4 = module_0.json(str_1)
    var_5 = module_0.css(str_1)
    var_6 = module_0.xml(str_0)
    var_7 = module_0.json(var_6, var_2)
    module_0.xml(var_2, var_2)

def test_case_11():
    str_0 = '.EeKL0`rt0Mw6T-'
    var_0 = module_0.css(str_0, str_0)
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '>$'
    var_0 = module_0.css(str_0, str_0)
    assert var_0 == 0
    module_0.json(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'FTj!*\\HL51Df'
    none_type_0 = None
    module_0.css(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'eN\x0bC]#.9H][6~>n#f'
    str_1 = 'Ajk_J{ovo<Ds'
    var_0 = module_0.css(str_1)
    var_1 = module_0.json(str_1, str_0)
    var_2 = module_0.css(str_0, str_1)
    assert var_2 == 1
    var_3 = module_0.css(str_1)
    assert var_3 == ' '
    var_4 = module_0.xml(str_0)
    var_5 = var_3.__dir__()
    var_6 = module_0.json(var_4, var_1)
    var_7 = module_0.json(var_0)
    assert var_7 == ' '
    var_8 = module_0.css(str_1, var_1)
    assert var_8 == ' '
    module_0.xml(var_2, str_0, var_2)

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '>$'
    var_0 = module_0.json(str_0, str_0, str_0)
    assert var_0 == 1
    module_0.json(var_0, str_0)

def test_case_16():
    str_0 = '69<Q(j9D COg'
    var_0 = module_0.json(str_0, shift=str_0)
    assert var_0 == ' '
    var_1 = module_0.xml(var_0)

def test_case_17():
    str_0 = ",{\t'Q"
    var_0 = module_0.json(str_0)
    assert var_0 == '  '

def test_case_18():
    str_0 = 'FTj!*\\HL51D{'
    var_0 = module_0.css(str_0)
    assert var_0 == 'FTj!*\\HL51D{\n    '

def test_case_19():
    str_0 = 'eN\x0b\r]#.9}][6~>q#f'
    var_0 = module_0.json(str_0, shift=str_0)
    assert var_0 == ' '

def test_case_20():
    str_0 = ',{\tj[Q'
    var_0 = module_0.json(str_0)
    assert var_0 == ' '

@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = -1127
    module_0.json(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "<'{#_wSJ'im-6O|N"
    module_0.xml(str_0, str_0, str_0)

def test_case_23():
    str_0 = '.y]h~Uee\\aK /v/'
    var_0 = module_0.json(str_0)
    assert var_0 == ' .y\n                                                                                                                                                                                                                                                                                                                                                                                                                ]h~Uee\\aK /v/'

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    str_0 = '<aHv.eggO'
    module_0.xml(str_0)
    var_1 = var_0.__call__(none_type_0, none_type_0, none_type_0, type=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = 'eN\x0bC]#.9(]>6~fq>q#f'
    str_1 = 'Ajk_J{vo<Ds'
    var_0 = module_0.css(str_0)
    assert var_0 == ' '
    module_0.xml(str_0, var_0)
    assert var_1 == 1
    var_2 = module_0.css(str_1)
    assert var_2 == ''
    var_3 = module_0.css(var_2, var_2)
    assert var_3 == ''
    var_4 = module_0.json(str_1, str_0)
    assert var_4 == 1
    var_5 = module_0.css(str_1)
    assert var_5 == ''
    var_6 = module_0.xml(str_0)
    assert var_6 == ' '
    var_7 = module_0.json(var_6, var_4)
    assert var_7 == '  '
    var_8 = module_0.json(var_2)
    assert var_8 == ' '
    var_9 = module_0.css(str_1, var_4)
    assert var_9 == ''
    var_10 = module_0.xml(var_4, var_6)

def test_case_26():
    str_0 = 'FTj!*\\HL51Df'
    var_0 = module_0.css(str_0)
    assert var_0 == ''

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'eN\x0bC]#.9(][6~>q#f'
    str_1 = 'P>J^NdqhJr/>E*b'
    var_0 = module_0.css(str_0, shift=str_0)
    assert var_0 == ''
    var_1 = module_0.xml(str_1)
    assert var_1 == 'P>J^NdqhJr/>E*b'
    var_2 = module_0.xml(var_0)