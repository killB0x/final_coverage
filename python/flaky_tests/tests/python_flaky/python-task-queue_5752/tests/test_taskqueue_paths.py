# Automatically generated by Pynguin.
import pytest
import taskqueue.paths as module_0
import taskqueue.lib as module_1

def test_case_0():
    str_0 = '\n    This is the main thread function that consumes functions that are\n    inside the _queue object. To use, execute self._queue(fn), where fn\n    is a function that performs some kind of network IO or otherwise\n    benefits from threading and is independent.\n\n    terminate_evt is automatically passed in on thread creation and \n    is a common event for this generation of threads. The threads\n    will terminate when the event is set and the queue burns down.\n\n    Returns: void\n    '
    var_0 = module_0.extract_path(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'taskqueue.paths.ExtractedPath'
    assert len(var_0) == 2
    assert module_0.ALLOWED_PROTOCOLS == ['sqs', 'fq', 'mem']
    assert f'{type(module_0.ExtractedPath.protocol).__module__}.{type(module_0.ExtractedPath.protocol).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.ExtractedPath.path).__module__}.{type(module_0.ExtractedPath.path).__qualname__}' == '_collections._tuplegetter'

@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -3508
    module_0.mkpath(int_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '*Wu!z(^Gfly'
    var_0 = module_0.extract_path(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'taskqueue.paths.ExtractedPath'
    assert len(var_0) == 2
    assert module_0.ALLOWED_PROTOCOLS == ['sqs', 'fq', 'mem']
    assert f'{type(module_0.ExtractedPath.protocol).__module__}.{type(module_0.ExtractedPath.protocol).__qualname__}' == '_collections._tuplegetter'
    assert f'{type(module_0.ExtractedPath.path).__module__}.{type(module_0.ExtractedPath.path).__qualname__}' == '_collections._tuplegetter'
    var_1 = module_0.mkpath(var_0)
    assert var_1 == 'sqs://*Wu!z(^Gfly'
    var_2 = module_0.extract_path(var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'taskqueue.paths.ExtractedPath'
    module_1.toabs(var_0)