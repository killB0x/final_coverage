# Automatically generated by Pynguin.
import pytest
import taskqueue.lib as module_0
import enum as module_1

def test_case_0():
    numpy_encoder_0 = module_0.NumpyEncoder()
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

def test_case_1():
    str_0 = 'tC_fk"B\toADSia _2m'
    var_0 = module_0.mkdir(str_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.first(none_type_0)

def test_case_3():
    str_0 = 'tC_fk"B\toADSia _2m'
    var_0 = module_0.toiter(str_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

def test_case_4():
    none_type_0 = None
    var_0 = module_0.toiter(none_type_0, none_type_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.green(none_type_0)

def test_case_6():
    str_0 = '/root/.cloudvolume/secrets'
    var_0 = module_0.yellow(str_0)
    assert var_0 == '\x1b[1;93m/root/.cloudvolume/secrets\x1b[m'
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.red(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_0.toabs(bool_0)

def test_case_9():
    none_type_0 = None
    var_0 = module_0.jsonify(none_type_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

def test_case_10():
    str_0 = '7=+YSl[57L@mr'
    var_0 = module_0.mkdir(str_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b'\x80\xc5 o\xc2Cq\xbeq\x17\xcf'
    module_0.jsonify(bytes_0)

def test_case_12():
    str_0 = 'tC_fk"B\toADSia _2m'
    var_0 = module_0.toiter(str_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    var_1 = module_0.toiter(str_0, var_0)
    var_2 = module_0.first(str_0)
    assert var_2 == 't'

@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b'\x00'
    var_0 = module_0.toiter(bytes_0)
    assert var_0 == b'\x00'
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    module_0.mkdir(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b'\x00'
    var_0 = module_0.toiter(bytes_0, bytes_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    module_0.mkdir(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_1._EnumDict()
    module_0.first(var_0)

def test_case_16():
    none_type_0 = None
    var_0 = module_0.toiter(none_type_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    var_1 = module_0.sip(var_0, none_type_0)
    var_2 = module_0.first(var_1)

@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    enum_dict_0 = module_1._EnumDict()
    var_0 = module_0.toiter(enum_dict_0, none_type_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    none_type_1 = None
    var_1 = module_0.toiter(none_type_0)
    module_0.first(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b'\x00\x9bF'
    none_type_0 = None
    var_0 = module_0.toiter(none_type_0, bytes_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    module_0.mkdir(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    var_0 = module_1._EnumDict()
    var_1 = module_0.sip(var_0, none_type_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    module_0.first(var_1)

def test_case_20():
    bytes_0 = b'\x80\xc5 o\xc2\xaeCq\xbeqy\x17\xcf'
    var_0 = module_0.duplicates(bytes_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}

@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b'\x00'
    module_0.mkdir(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    var_0 = module_0.scatter(bool_0, bool_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    module_0.first(var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    var_0 = module_0.scatter(bool_0, bool_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    var_0.__next__()

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    numpy_encoder_0 = module_0.NumpyEncoder(skipkeys=bool_0, check_circular=bool_0, sort_keys=bool_0, default=bool_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    none_type_0 = None
    var_0 = module_0.toiter(none_type_0)
    var_1 = module_0.sip(var_0, none_type_0)
    var_2 = var_1.__dir__()
    var_3 = module_0.sip(var_1, bool_0)
    var_4 = module_0.jsonify(var_0)
    assert var_4 == '[null]'
    var_5 = module_0.first(var_3)
    module_0.jsonify(var_1)

def test_case_25():
    str_0 = '\n    Returns the approximate(!) number of tasks enqueued in the cloud.\n    WARNING: The number computed by Google is eventually\n      consistent. It may return impossible numbers that\n      are small deviations from the number in the queue.\n      For instance, we\'ve seen 1005 enqueued after 1000 \n      inserts.\n    \n    Returns: (int) n"mber of tasks in cloud queue\n    '
    with pytest.raises(OSError):
        module_0.mkdir(str_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    var_0 = module_0.toiter(bool_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    var_1 = module_0.scatter(var_0, bool_0)
    var_2 = module_0.first(var_1)
    module_0.toabs(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    var_0 = module_0.toiter(bool_0)
    assert module_0.COLORS == {'RESET': '\x1b[m', 'YELLOW': '\x1b[1;93m', 'RED': '\x1b[1;91m', 'GREEN': '\x1b[1;92m'}
    var_1 = module_0.scatter(var_0, bool_0)
    var_2 = module_0.first(var_1)
    module_0.first(var_1)