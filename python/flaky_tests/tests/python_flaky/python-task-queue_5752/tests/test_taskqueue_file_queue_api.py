# Automatically generated by Pynguin.
import pytest
import platform as module_0
import taskqueue.file_queue_api as module_1
import uuid as module_2
import json.decoder as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.python_version()
    var_1 = module_1.write_file(var_0, var_0, fsync=var_0, lock=var_0)
    var_2 = var_0.__iter__()
    none_type_0 = None
    module_1.idfn(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.processor()
    module_1.read_lock_file(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_1.idfn(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.system()
    file_queue_a_p_i_0 = module_1.FileQueueAPI(var_0)
    assert f'{type(module_1.FileQueueAPI.completed).__module__}.{type(module_1.FileQueueAPI.completed).__qualname__}' == 'builtins.property'
    var_1 = file_queue_a_p_i_0.release_all()
    file_queue_a_p_i_0.is_empty()

def test_case_4():
    var_0 = module_1.nowfn()

def test_case_5():
    none_type_0 = None
    var_0 = module_1.move_file(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '\n    This is the main thread function that consumes functions that are\n    inside the _queue object. To use, execute self._queue(fn), where fn\n    is a function that performs some kind of network IO or otherwise\n    benefits from threading and is independent.\n\n    terminate_evt is automatically passed in on thread creation and \n    is a common event for this generation of threads. The threads\n    will terminate when the event is set and the queue burns down.\n\n    Returns: void\n    '
    module_1.unlock_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.win32_edition()
    module_1.get_timestamp(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'SmNaH\x0bkCyn'
    module_1.set_timestamp(str_0, str_0)

def test_case_9():
    var_0 = module_0.system()
    file_queue_a_p_i_0 = module_1.FileQueueAPI(var_0)
    assert f'{type(module_1.FileQueueAPI.completed).__module__}.{type(module_1.FileQueueAPI.completed).__qualname__}' == 'builtins.property'
    var_1 = file_queue_a_p_i_0.release_all()

def test_case_10():
    var_0 = module_0.release()
    var_1 = module_1.idfn(var_0)
    assert var_1 == '5.10'

def test_case_11():
    var_0 = module_2.uuid4()
    module_1.read_lock_file(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.version()
    file_queue_a_p_i_0 = module_1.FileQueueAPI(var_0)
    assert f'{type(module_1.FileQueueAPI.completed).__module__}.{type(module_1.FileQueueAPI.completed).__qualname__}' == 'builtins.property'
    var_1 = module_1.nowfn()
    var_2 = file_queue_a_p_i_0.purge()
    var_1.clear()

def test_case_13():
    var_0 = module_0.system()
    file_queue_a_p_i_0 = module_1.FileQueueAPI(var_0)
    assert f'{type(module_1.FileQueueAPI.completed).__module__}.{type(module_1.FileQueueAPI.completed).__qualname__}' == 'builtins.property'
    var_1 = module_1.nowfn()
    var_2 = module_1.idfn(var_0)
    assert var_2 == 'Linux'
    var_3 = file_queue_a_p_i_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.python_version_tuple()
    var_1 = var_0.__iter__()
    module_1.write_lock_file(var_1, var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    module_1.read_file(bool_0, block=bool_0)

def test_case_16():
    var_0 = module_0.python_version()
    var_1 = module_1.write_file(var_0, var_0, fsync=var_0, block=var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    var_0 = module_0.system()
    var_1 = module_1.move_file(var_0, var_0)
    file_queue_a_p_i_0 = module_1.FileQueueAPI(var_0)
    assert f'{type(module_1.FileQueueAPI.completed).__module__}.{type(module_1.FileQueueAPI.completed).__qualname__}' == 'builtins.property'
    file_queue_a_p_i_0.add_insert_count(var_1)

@pytest.mark.xfail(strict=True)
def test_case_18():
    var_0 = module_0.python_version()
    var_1 = module_1.write_file(var_0, var_0)
    module_3.JSONObject(var_0, var_0, var_1, var_0, var_0, _w=var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_0.system()
    file_queue_a_p_i_0 = module_1.FileQueueAPI(var_0)
    assert f'{type(module_1.FileQueueAPI.completed).__module__}.{type(module_1.FileQueueAPI.completed).__qualname__}' == 'builtins.property'
    module_1.read_lock_file(var_0, file_queue_a_p_i_0)