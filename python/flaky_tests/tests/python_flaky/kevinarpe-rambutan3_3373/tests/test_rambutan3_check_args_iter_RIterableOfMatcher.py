# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.iter.RIterableMatcher as module_0
import rambutan3.check_args.iter.RIterableOfMatcher as module_1
import rambutan3.check_args.RCheckArgsError as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    bool_0 = r_iterable_of_matcher_0.matches(r_iterable_of_matcher_0)
    assert bool_0 is False
    r_iterable_of_matcher_0.check_arg(var_0, r_iterable_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    r_iterable_of_matcher_0.check_arg(var_0, r_iterable_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    bool_0 = r_iterable_of_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(bool_0).__module__}.{type(bool_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    r_iterable_of_matcher_0.check_arg(bool_0, r_iterable_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    bool_0 = r_iterable_of_matcher_0.__eq__(r_iterable_of_matcher_0)
    assert bool_0 is True
    r_iterable_of_matcher_0.check_arg(var_0, r_iterable_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    bool_0 = r_iterable_of_matcher_0.__eq__(var_0)
    assert bool_0 is False
    r_iterable_of_matcher_0.check_arg(var_0, r_iterable_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    list_0 = []
    bool_0 = r_iterable_of_matcher_0.__eq__(list_0)
    assert bool_0 is False
    bool_1 = r_iterable_of_matcher_0.matches(r_iterable_of_matcher_0)
    assert bool_1 is False
    str_0 = r_iterable_of_matcher_0.__str__()
    assert str_0 == 'iterable of [iterable]'
    bool_2 = r_iterable_of_matcher_0.matches(list_0)
    str_1 = '\x0cgK'
    str_2 = 'f>YxZ0R3%=^,I.G=\\'
    var_1 = r_iterable_matcher_0.check_arg(var_0, str_2)
    bool_3 = var_0.__eq__(str_1)
    var_0.matches(str_2, var_0)

def test_case_6():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    r_iterable_of_matcher_0 = module_1.RIterableOfMatcher(r_iterable_matcher_0)
    assert f'{type(r_iterable_of_matcher_0).__module__}.{type(r_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableOfMatcher.RIterableOfMatcher'
    assert f'{type(module_1.RIterableOfMatcher.core_matches).__module__}.{type(module_1.RIterableOfMatcher.core_matches).__qualname__}' == 'builtins.method'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    str_0 = r_iterable_of_matcher_0.__str__()
    assert str_0 == 'iterable of [iterable]'
    bool_0 = var_0.matches(r_iterable_matcher_0)
    assert bool_0 is False
    bool_1 = r_iterable_matcher_0.__eq__(r_iterable_matcher_0)
    complex_0 = (-3461.445081+1987.168j)
    tuple_0 = (r_iterable_matcher_0, complex_0, var_0)
    dict_0 = {var_0: bool_1, bool_1: tuple_0, r_iterable_matcher_0: complex_0, complex_0: bool_1}
    str_1 = '%?uU;WR\x0b<'
    with pytest.raises(module_2.RCheckArgsError):
        r_iterable_of_matcher_0.check_arg(dict_0, str_1)