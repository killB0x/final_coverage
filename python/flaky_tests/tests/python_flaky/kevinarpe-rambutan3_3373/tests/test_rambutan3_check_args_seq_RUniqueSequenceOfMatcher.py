# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_0
import rambutan3.check_args.seq.RSequenceEnum as module_1
import rambutan3.check_args.seq.RUniqueSequenceOfMatcher as module_2
import rambutan3.check_args.seq.RUniqueSequenceMatcher as module_3
import rambutan3.check_args.RCheckArgsError as module_4
import rambutan3.check_args.seq.RSequenceOfMatcher as module_5

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    r_type_matcher_error_0.add_traverse_path_step(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_sequence_enum_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_sequence_enum_1 = module_1.RSequenceEnum.LIST
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_1)
    r_unique_sequence_of_matcher_0 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    assert f'{type(r_unique_sequence_of_matcher_0).__module__}.{type(r_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceOfMatcher.RUniqueSequenceOfMatcher'
    r_unique_sequence_of_matcher_1 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_of_matcher_0)
    bytes_0 = b'M5*z\xb7c'
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    bool_0 = r_unique_sequence_of_matcher_1.matches(r_type_matcher_error_0)
    assert bool_0 is False
    r_type_matcher_error_0.add_traverse_path_step(r_unique_sequence_of_matcher_0, bytes_0)

def test_case_3():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    r_unique_sequence_of_matcher_0 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    assert f'{type(r_unique_sequence_of_matcher_0).__module__}.{type(r_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceOfMatcher.RUniqueSequenceOfMatcher'
    r_unique_sequence_of_matcher_1 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_of_matcher_0)
    none_type_0 = None
    str_0 = '], ['
    with pytest.raises(module_4.RCheckArgsError):
        r_unique_sequence_of_matcher_1.check_arg(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_sequence_enum_1 = module_1.RSequenceEnum.LIST
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_1)
    r_sequence_of_matcher_0 = module_5.RSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    var_0 = r_sequence_of_matcher_0.__str__()
    int_0 = var_0.__hash__()
    r_unique_sequence_of_matcher_0 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    assert f'{type(r_unique_sequence_of_matcher_0).__module__}.{type(r_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceOfMatcher.RUniqueSequenceOfMatcher'
    int_1 = r_unique_sequence_of_matcher_0.__hash__()
    assert int_1 == -1370334958141526373
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    bool_0 = r_unique_sequence_of_matcher_0.matches(r_unique_sequence_matcher_0)
    assert bool_0 is False
    str_0 = '!{X^eo!)y&I~'
    r_unique_sequence_of_matcher_0.check_arg(r_sequence_enum_0, str_0, *r_unique_sequence_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_sequence_enum_1 = module_1.RSequenceEnum.LIST
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_1)
    r_unique_sequence_of_matcher_0 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    assert f'{type(r_unique_sequence_of_matcher_0).__module__}.{type(r_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceOfMatcher.RUniqueSequenceOfMatcher'
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    none_type_0 = None
    bool_0 = r_unique_sequence_of_matcher_0.__eq__(r_type_matcher_error_0)
    assert bool_0 is False
    var_0 = r_type_matcher_error_0.add_failed_match(r_sequence_enum_1, none_type_0)
    r_type_matcher_error_0.add_traverse_path_step(var_0, var_0)

def test_case_6():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    r_unique_sequence_of_matcher_0 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    assert f'{type(r_unique_sequence_of_matcher_0).__module__}.{type(r_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceOfMatcher.RUniqueSequenceOfMatcher'
    r_unique_sequence_of_matcher_1 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_of_matcher_0)
    bool_0 = r_unique_sequence_of_matcher_0.__eq__(r_unique_sequence_of_matcher_0)
    assert bool_0 is True
    none_type_0 = None
    str_0 = '], ['
    with pytest.raises(module_4.RCheckArgsError):
        r_unique_sequence_of_matcher_1.check_arg(none_type_0, str_0)

def test_case_7():
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_sequence_enum_1 = module_1.RSequenceEnum.LIST
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_1)
    r_unique_sequence_of_matcher_0 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0)
    assert f'{type(r_unique_sequence_of_matcher_0).__module__}.{type(r_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceOfMatcher.RUniqueSequenceOfMatcher'
    r_unique_sequence_of_matcher_1 = module_2.RUniqueSequenceOfMatcher(r_sequence_enum_1, r_unique_sequence_matcher_0)
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    list_0 = []
    bool_0 = r_unique_sequence_of_matcher_0.matches(list_0)
    assert bool_0 is True