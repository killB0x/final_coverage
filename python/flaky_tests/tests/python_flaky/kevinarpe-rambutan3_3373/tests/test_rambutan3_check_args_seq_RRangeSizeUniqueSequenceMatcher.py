# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.seq.RSequenceEnum as module_0
import rambutan3.check_args.seq.RRangeSizeUniqueSequenceMatcher as module_1
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    r_sequence_enum_0 = module_0.RSequenceEnum.TUPLE
    module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_0)

def test_case_1():
    r_sequence_enum_0 = module_0.RSequenceEnum.TUPLE
    int_0 = 4
    r_range_size_unique_sequence_matcher_0 = module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_matcher_0).__module__}.{type(r_range_size_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceMatcher.RRangeSizeUniqueSequenceMatcher'
    r_type_matcher_error_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert r_type_matcher_error_0 == 'unique tuple where size <= 4'
    bool_0 = r_range_size_unique_sequence_matcher_0.matches(r_sequence_enum_0)
    assert bool_0 is False
    r_range_size_unique_sequence_matcher_1 = module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_0, max_size=int_0)
    str_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert str_0 == 'unique tuple where size <= 4'
    var_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert var_0 == 'unique tuple where size <= 4'

def test_case_2():
    r_sequence_enum_0 = module_0.RSequenceEnum.TUPLE
    int_0 = 4
    r_range_size_unique_sequence_matcher_0 = module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_matcher_0).__module__}.{type(r_range_size_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceMatcher.RRangeSizeUniqueSequenceMatcher'
    int_1 = r_range_size_unique_sequence_matcher_0.__hash__()
    assert int_1 == 6119388894324868314
    r_type_matcher_error_0 = module_2.RTypeMatcherError()
    bool_0 = r_range_size_unique_sequence_matcher_0.matches(r_sequence_enum_0)
    assert bool_0 is False
    r_range_size_unique_sequence_matcher_1 = module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_0, max_size=int_0)
    str_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert str_0 == 'unique tuple where size <= 4'
    var_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert var_0 == 'unique tuple where size <= 4'

@pytest.mark.xfail(strict=True)
def test_case_3():
    r_sequence_enum_0 = module_0.RSequenceEnum.TUPLE
    int_0 = 4
    r_range_size_unique_sequence_matcher_0 = module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_matcher_0).__module__}.{type(r_range_size_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceMatcher.RRangeSizeUniqueSequenceMatcher'
    int_1 = r_range_size_unique_sequence_matcher_0.__hash__()
    assert int_1 == 6119388894324868314
    r_type_matcher_error_0 = module_2.RTypeMatcherError()
    var_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert var_0 == 'unique tuple where size <= 4'
    r_sequence_enum_1 = module_0.RSequenceEnum.LIST
    r_range_size_unique_sequence_matcher_1 = module_1.RRangeSizeUniqueSequenceMatcher(r_sequence_enum_1, max_size=int_0)
    str_0 = r_range_size_unique_sequence_matcher_0.__str__()
    assert str_0 == 'unique tuple where size <= 4'
    bool_0 = r_range_size_unique_sequence_matcher_1.matches(int_1)
    assert bool_0 is False
    bool_1 = r_range_size_unique_sequence_matcher_1.__eq__(bool_0)
    var_1 = r_range_size_unique_sequence_matcher_1.__str__()
    assert var_1 == 'unique list where size <= 4'
    r_type_matcher_error_1 = module_2.RTypeMatcherError()
    bool_2 = r_range_size_unique_sequence_matcher_0.matches(str_0, r_type_matcher_error_1)
    var_2 = var_1.__str__()
    assert var_2 == 'unique list where size <= 4'
    list_0 = [var_1, var_2]
    r_range_size_unique_sequence_matcher_1.check_arg(list_0, int_1)