# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.seq.RSequenceOfMatcher as module_0
import rambutan3.check_args.seq.RSequenceEnum as module_1
import rambutan3.check_args.seq.RSequenceMatcher as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.RSequenceOfMatcher(bool_0, bool_0)

def test_case_1():
    str_0 = 'p\\>{toATYRxyV6ucT'
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_sequence_matcher_0 = module_2.RSequenceMatcher(r_sequence_enum_0)
    r_sequence_of_matcher_0 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)
    assert f'{type(r_sequence_of_matcher_0).__module__}.{type(r_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RSequenceOfMatcher.RSequenceOfMatcher'
    bool_0 = r_sequence_of_matcher_0.matches(str_0)
    assert bool_0 is False
    r_sequence_of_matcher_1 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'p\\>{toATYRxyV6ucT'
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_sequence_matcher_0 = module_2.RSequenceMatcher(r_sequence_enum_0)
    r_sequence_of_matcher_0 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)
    assert f'{type(r_sequence_of_matcher_0).__module__}.{type(r_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RSequenceOfMatcher.RSequenceOfMatcher'
    bool_0 = r_sequence_of_matcher_0.matches(str_0)
    assert bool_0 is False
    var_0 = r_sequence_of_matcher_0.__str__()
    assert var_0 == 'tuple | Sequence | list | MutableSequence of [tuple | Sequence | list | MutableSequence]'
    module_0.RSequenceOfMatcher(var_0, bool_0)

def test_case_3():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_sequence_matcher_0 = module_2.RSequenceMatcher(r_sequence_enum_0)
    r_sequence_of_matcher_0 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)
    assert f'{type(r_sequence_of_matcher_0).__module__}.{type(r_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RSequenceOfMatcher.RSequenceOfMatcher'
    r_sequence_of_matcher_1 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)
    var_0 = r_sequence_of_matcher_1.__or__(r_sequence_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_sequence_matcher_0 = module_2.RSequenceMatcher(r_sequence_enum_0)
    r_sequence_of_matcher_0 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)
    assert f'{type(r_sequence_of_matcher_0).__module__}.{type(r_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RSequenceOfMatcher.RSequenceOfMatcher'
    list_0 = []
    bool_0 = r_sequence_of_matcher_0.matches(list_0)
    assert bool_0 is True
    module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_enum_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    r_sequence_enum_0 = module_1.RSequenceEnum.TUPLE
    r_sequence_matcher_0 = module_2.RSequenceMatcher(r_sequence_enum_0)
    r_sequence_of_matcher_0 = module_0.RSequenceOfMatcher(r_sequence_enum_0, r_sequence_matcher_0)
    assert f'{type(r_sequence_of_matcher_0).__module__}.{type(r_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RSequenceOfMatcher.RSequenceOfMatcher'
    var_0 = r_sequence_of_matcher_0.__str__()
    assert var_0 == 'tuple of [tuple]'
    set_0 = {r_sequence_matcher_0, r_sequence_matcher_0}
    bool_0 = r_sequence_of_matcher_0.matches(set_0)
    assert bool_0 is False
    bool_1 = r_sequence_of_matcher_0.__eq__(set_0)
    assert bool_1 is False
    module_0.RSequenceOfMatcher(var_0, var_0)