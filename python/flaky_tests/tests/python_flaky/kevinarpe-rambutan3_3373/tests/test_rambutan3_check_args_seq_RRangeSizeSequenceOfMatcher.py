# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_0
import rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher as module_1
import rambutan3.check_args.seq.RSequenceEnum as module_2
import rambutan3.check_args.seq.RRangeSizeSequenceMatcher as module_3

def test_case_0():
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    int_0 = r_type_matcher_error_0.__hash__()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'ZXT\r.]vHTxLh'
    module_1.RRangeSizeSequenceOfMatcher(str_0, str_0, max_size=str_0)

def test_case_2():
    none_type_0 = None
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    bool_0 = False
    r_range_size_sequence_matcher_0 = module_3.RRangeSizeSequenceMatcher(r_sequence_enum_0, min_size=bool_0)
    r_range_size_sequence_of_matcher_0 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_sequence_of_matcher_0).__module__}.{type(r_range_size_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_1 = r_range_size_sequence_of_matcher_0.matches(none_type_0, none_type_0)
    assert bool_1 is False

def test_case_3():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    bool_0 = True
    r_range_size_sequence_matcher_0 = module_3.RRangeSizeSequenceMatcher(r_sequence_enum_0, min_size=bool_0)
    r_range_size_sequence_of_matcher_0 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_sequence_of_matcher_0).__module__}.{type(r_range_size_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_1 = r_range_size_sequence_of_matcher_0.__eq__(r_range_size_sequence_of_matcher_0)
    assert bool_1 is True
    var_0 = r_range_size_sequence_of_matcher_0.__str__()
    assert var_0 == 'tuple | Sequence | list | MutableSequence where size >= True of [tuple | Sequence | list | MutableSequence where size >= True]'

def test_case_4():
    none_type_0 = None
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    bool_0 = False
    r_range_size_sequence_matcher_0 = module_3.RRangeSizeSequenceMatcher(r_sequence_enum_0, min_size=bool_0)
    r_range_size_sequence_of_matcher_0 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_sequence_of_matcher_0).__module__}.{type(r_range_size_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_1 = r_range_size_sequence_of_matcher_0.matches(none_type_0, none_type_0)
    assert bool_1 is False
    var_0 = r_range_size_sequence_of_matcher_0.__str__()
    assert var_0 == 'tuple | Sequence | list | MutableSequence where size >= False of [tuple | Sequence | list | MutableSequence where size >= False]'
    int_0 = r_range_size_sequence_of_matcher_0.__hash__()
    assert int_0 == -627106029763153568

def test_case_5():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    bool_0 = False
    r_range_size_sequence_matcher_0 = module_3.RRangeSizeSequenceMatcher(r_sequence_enum_0, min_size=bool_0)
    r_range_size_sequence_of_matcher_0 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_sequence_of_matcher_0).__module__}.{type(r_range_size_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_1 = r_range_size_sequence_of_matcher_0.__eq__(bool_0)
    assert bool_1 is False

def test_case_6():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    bool_0 = False
    r_range_size_sequence_matcher_0 = module_3.RRangeSizeSequenceMatcher(r_sequence_enum_0, min_size=bool_0)
    r_range_size_sequence_of_matcher_0 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_sequence_of_matcher_0).__module__}.{type(r_range_size_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_1 = r_range_size_sequence_of_matcher_0.__eq__(bool_0)
    assert bool_1 is False
    bytes_0 = b';\xd9l\x9d\xea\xd01\xf0\\4\x1e'
    bool_2 = r_range_size_sequence_of_matcher_0.matches(bytes_0)
    assert bool_2 is False
    var_0 = r_range_size_sequence_of_matcher_0.__str__()
    assert var_0 == 'tuple | Sequence | list | MutableSequence where size >= False of [tuple | Sequence | list | MutableSequence where size >= False]'
    int_0 = var_0.__hash__()
    assert int_0 == 3895808698072698093

def test_case_7():
    str_0 = 'ZXT\r.]vHTxLh'
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    bool_0 = False
    r_range_size_sequence_matcher_0 = module_3.RRangeSizeSequenceMatcher(r_sequence_enum_0, min_size=bool_0)
    r_range_size_sequence_of_matcher_0 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_sequence_of_matcher_0).__module__}.{type(r_range_size_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_1 = False
    r_range_size_sequence_of_matcher_1 = module_1.RRangeSizeSequenceOfMatcher(r_sequence_enum_0, r_range_size_sequence_matcher_0, max_size=bool_1)
    assert f'{type(r_range_size_sequence_of_matcher_1).__module__}.{type(r_range_size_sequence_of_matcher_1).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeSequenceOfMatcher.RRangeSizeSequenceOfMatcher'
    bool_2 = r_range_size_sequence_of_matcher_1.__eq__(r_range_size_sequence_of_matcher_0)
    assert bool_2 is False
    str_1 = r_range_size_sequence_matcher_0.__str__()
    bool_3 = r_range_size_sequence_of_matcher_1.matches(str_0, bool_0)
    assert bool_3 is False
    var_0 = r_range_size_sequence_of_matcher_1.__str__()
    assert var_0 == 'tuple | Sequence | list | MutableSequence where size <= False of [tuple | Sequence | list | MutableSequence where size >= False]'
    int_0 = var_0.__hash__()
    assert int_0 == -6931100237080593864