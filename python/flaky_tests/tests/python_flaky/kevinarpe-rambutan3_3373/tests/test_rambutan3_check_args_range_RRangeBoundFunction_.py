# Automatically generated by Pynguin.
import pytest
import rambutan3.RArgs as module_0
import rambutan3.check_args.range.RRangeBoundFunctionEnum_ as module_1
import rambutan3.check_args.range.RRangeBoundFunction_ as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.check_iterable_not_empty_and_items_not_none(bool_0, bool_0)

def test_case_1():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function_enum__0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'

def test_case_2():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS_EQUAL
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function_enum__0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    bool_0 = r_range_bound_function__0.__eq__(r_range_bound_function_enum__0)
    assert bool_0 is False

def test_case_3():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function_enum__0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    bool_0 = r_range_bound_function__0.__eq__(r_range_bound_function__0)
    assert bool_0 is True
    int_0 = r_range_bound_function__0.__hash__()
    var_0 = r_range_bound_function__0.__str__()
    assert var_0 == 'x < RRangeBoundFunctionEnum_.LESS'

def test_case_4():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function_enum__0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    bool_0 = r_range_bound_function__0.__eq__(r_range_bound_function_enum__0)
    assert bool_0 is False
    var_0 = r_range_bound_function__0.__str__()
    assert var_0 == 'x < RRangeBoundFunctionEnum_.LESS'

@pytest.mark.xfail(strict=True)
def test_case_5():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS_EQUAL
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function_enum__0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    bool_0 = r_range_bound_function__0.__eq__(r_range_bound_function_enum__0)
    assert bool_0 is False
    r_range_bound_function__0.__call__(r_range_bound_function__0)

def test_case_6():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function_enum__0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    bool_0 = r_range_bound_function__0.__eq__(r_range_bound_function__0)
    assert bool_0 is True

def test_case_7():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    str_0 = 'Internal error: Do not call this member function'
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, str_0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    bool_0 = r_range_bound_function__0.__contains__(r_range_bound_function__0)

def test_case_8():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    bool_0 = False
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, bool_0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    r_range_bound_function_enum__1 = module_1.RRangeBoundFunctionEnum_.LESS_EQUAL
    bool_1 = r_range_bound_function__0.__str__()
    assert bool_1 == 'x < False'
    int_0 = r_range_bound_function__0.__hash__()
    r_range_bound_function__1 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__1, int_0)
    bool_2 = r_range_bound_function__1.__contains__(r_range_bound_function__0)
    assert bool_2 is True

@pytest.mark.xfail(strict=True)
def test_case_9():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    r_range_bound_function_enum__1 = module_1.RRangeBoundFunctionEnum_.LESS_EQUAL
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__1, r_range_bound_function_enum__1)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    r_range_bound_function__1 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, r_range_bound_function__0)
    bool_0 = r_range_bound_function__0.__eq__(r_range_bound_function__1)
    var_0 = r_range_bound_function__1.__str__()
    assert var_0 == 'x < x <= RRangeBoundFunctionEnum_.LESS_EQUAL'
    int_0 = r_range_bound_function__1.__hash__()
    var_1 = r_range_bound_function__1.__str__()
    assert var_1 == 'x < x <= RRangeBoundFunctionEnum_.LESS_EQUAL'
    module_2.RRangeBoundFunction_(var_0, var_1)

def test_case_10():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    bool_0 = True
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, bool_0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    r_range_bound_function_enum__1 = module_1.RRangeBoundFunctionEnum_.LESS_EQUAL
    r_range_bound_function__1 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__1, bool_0)
    bool_1 = r_range_bound_function__1.__eq__(r_range_bound_function__1)
    assert bool_1 is True
    r_range_bound_function__2 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__1, r_range_bound_function_enum__1)
    var_0 = r_range_bound_function__0.__str__()
    assert var_0 == 'x < True'
    bool_2 = True
    int_0 = r_range_bound_function__1.__hash__()
    r_range_bound_function__3 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, bool_2)
    bool_3 = r_range_bound_function__0.__contains__(r_range_bound_function__2)
    assert bool_3 is False

def test_case_11():
    r_range_bound_function_enum__0 = module_1.RRangeBoundFunctionEnum_.LESS
    bool_0 = True
    r_range_bound_function__0 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, bool_0)
    assert f'{type(module_2.RRangeBoundFunction_.op_func_enum_data).__module__}.{type(module_2.RRangeBoundFunction_.op_func_enum_data).__qualname__}' == 'builtins.property'
    r_range_bound_function_enum__1 = module_1.RRangeBoundFunctionEnum_.GREATER
    r_range_bound_function__1 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__1, bool_0)
    bool_1 = r_range_bound_function__1.__eq__(r_range_bound_function__1)
    assert bool_1 is True
    var_0 = r_range_bound_function__0.__str__()
    assert var_0 == 'x < True'
    bool_2 = True
    int_0 = r_range_bound_function__1.__hash__()
    r_range_bound_function__2 = module_2.RRangeBoundFunction_(r_range_bound_function_enum__0, bool_2)
    bool_3 = r_range_bound_function__1.__contains__(r_range_bound_function__0)