# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.range.RRange_ as module_0
import rambutan3.RArgs as module_1

def test_case_0():
    int_0 = 17
    with pytest.raises(ValueError):
        module_0.RRange_(int_0, int_0, int_0)

def test_case_1():
    int_0 = 90
    with pytest.raises(ValueError):
        module_0.RRange_(int_0, int_0, int_0)

def test_case_2():
    int_0 = 90
    str_0 = ''
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    str_1 = r_range__0.__str__()

def test_case_3():
    int_0 = 90
    str_0 = ''
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    bool_0 = r_range__0.__eq__(str_0)
    str_1 = r_range__0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 90
    str_0 = ''
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    int_1 = r_range__0.__hash__()
    bool_0 = r_range__0.__contains__(r_range__0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 90
    str_0 = ''
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    bool_0 = r_range__0.__contains__(r_range__0)

def test_case_6():
    int_0 = 90
    str_0 = '<='
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    bool_0 = r_range__0.__contains__(str_0)

def test_case_7():
    int_0 = 90
    str_0 = ''
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    bool_0 = r_range__0.__eq__(r_range__0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ',|GWiJ\t8!$'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_1.check_iterable_not_empty_and_items_not_none(dict_0, str_0)
    var_1 = module_1.check_iterable_not_empty(var_0, str_0)
    str_1 = var_1.__str__()
    int_0 = 90
    module_0.RRange_(int_0, var_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 90
    str_0 = '<='
    str_1 = '<='
    module_0.RRange_(int_0, str_1, int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    bool_0 = r_range__0.__eq__(r_range__0)
    int_1 = r_range__0.__hash__()
    bool_1 = r_range__0.__eq__(r_range__0)
    str_2 = r_range__0.__str__()
    bool_2 = r_range__0.__contains__(int_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 90
    str_0 = '<='
    module_0.RRange_(int_0, str_0, str_0)
    assert f'{type(r_range__0).__module__}.{type(r_range__0).__qualname__}' == 'rambutan3.check_args.range.RRange_.RRange_'
    assert f'{type(module_0.RRange_.create).__module__}.{type(module_0.RRange_.create).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_one_bound).__module__}.{type(module_0.RRange_.for_one_bound).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.RRange_.for_two_bounds).__module__}.{type(module_0.RRange_.for_two_bounds).__qualname__}' == 'builtins.method'
    bool_0 = r_range__0.__eq__(str_0)
    int_1 = r_range__0.__hash__()
    bool_1 = r_range__0.__eq__(r_range__0)
    str_1 = r_range__0.__str__()
    none_type_0 = None
    r_range__1 = module_0.RRange_(int_0, none_type_0, int_1)
    bool_2 = r_range__0.__eq__(r_range__1)
    bool_3 = r_range__0.__eq__(int_0)
    int_2 = r_range__0.__hash__()
    bool_4 = r_range__0.__eq__(bool_3)
    str_2 = r_range__1.__str__()
    bool_5 = r_range__0.__contains__(r_range__1)