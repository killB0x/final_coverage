# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.iter.RIterableMatcher as module_0

def test_case_0():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    assert f'{type(r_iterable_matcher_0).__module__}.{type(r_iterable_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableMatcher.RIterableMatcher'
    bool_0 = r_iterable_matcher_0.matches(r_iterable_matcher_0)
    assert bool_0 is False

def test_case_1():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    assert f'{type(r_iterable_matcher_0).__module__}.{type(r_iterable_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableMatcher.RIterableMatcher'

def test_case_2():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    assert f'{type(r_iterable_matcher_0).__module__}.{type(r_iterable_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableMatcher.RIterableMatcher'
    none_type_0 = None
    bool_0 = r_iterable_matcher_0.__eq__(r_iterable_matcher_0)
    assert bool_0 is True
    bool_1 = r_iterable_matcher_0.matches(r_iterable_matcher_0, none_type_0)
    assert bool_1 is False

def test_case_3():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    assert f'{type(r_iterable_matcher_0).__module__}.{type(r_iterable_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableMatcher.RIterableMatcher'
    int_0 = r_iterable_matcher_0.__hash__()
    assert int_0 == 1

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    assert f'{type(r_iterable_matcher_0).__module__}.{type(r_iterable_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableMatcher.RIterableMatcher'
    r_iterable_matcher_0.check_arg(r_iterable_matcher_0, r_iterable_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    r_iterable_matcher_0 = module_0.RIterableMatcher()
    assert f'{type(r_iterable_matcher_0).__module__}.{type(r_iterable_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RIterableMatcher.RIterableMatcher'
    var_0 = r_iterable_matcher_0.__or__(r_iterable_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    bool_0 = var_0.matches(var_0)
    assert bool_0 is True
    bool_1 = r_iterable_matcher_0.matches(r_iterable_matcher_0)
    assert bool_1 is False
    bool_2 = r_iterable_matcher_0.matches(r_iterable_matcher_0)
    r_iterable_matcher_0.__or__(bool_1)