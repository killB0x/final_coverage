# Automatically generated by Pynguin.
import pytest
import rambutan3.RArgs as module_0
import rambutan3.check_args.set.RRangeSizeSetOfMatcher as module_1
import rambutan3.check_args.set.RSetEnum as module_2
import rambutan3.check_args.set.RRangeSizeSetMatcher as module_3

def test_case_0():
    str_0 = 'not {}'
    with pytest.raises(TypeError):
        module_0.check_is_instance(str_0, str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'not {}'
    module_1.RRangeSizeSetOfMatcher(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    r_set_enum_0 = module_2.RSetEnum.SET
    bool_0 = True
    r_range_size_set_matcher_0 = module_3.RRangeSizeSetMatcher(r_set_enum_0, min_size=bool_0)
    r_range_size_set_of_matcher_0 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_0).__module__}.{type(r_range_size_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    int_0 = r_range_size_set_of_matcher_0.__hash__()
    assert int_0 == 0
    var_0 = r_range_size_set_of_matcher_0.__str__()
    assert var_0 == 'set | hashableset | frozenset | Set | MutableSet where size >= True of [set | hashableset | frozenset | Set | MutableSet where size >= True]'
    str_0 = ''
    module_1.RRangeSizeSetOfMatcher(str_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    r_set_enum_0 = module_2.RSetEnum.SET
    bool_0 = False
    r_range_size_set_matcher_0 = module_3.RRangeSizeSetMatcher(r_set_enum_0, min_size=bool_0)
    r_range_size_set_of_matcher_0 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_0).__module__}.{type(r_range_size_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    bool_1 = r_range_size_set_of_matcher_0.matches(r_range_size_set_matcher_0)
    assert bool_1 is False
    module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_set_enum_0 = module_2.RSetEnum.SET
    bool_0 = False
    r_range_size_set_matcher_0 = module_3.RRangeSizeSetMatcher(r_set_enum_0, min_size=bool_0)
    r_range_size_set_of_matcher_0 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_0).__module__}.{type(r_range_size_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    int_0 = r_range_size_set_matcher_0.__hash__()
    var_0 = r_range_size_set_of_matcher_0.__str__()
    assert var_0 == 'set | hashableset | frozenset | Set | MutableSet where size >= False of [set | hashableset | frozenset | Set | MutableSet where size >= False]'
    bool_1 = r_range_size_set_of_matcher_0.matches(r_range_size_set_matcher_0)
    assert bool_1 is False
    bool_2 = r_range_size_set_of_matcher_0.__eq__(bool_0)
    var_1 = r_range_size_set_of_matcher_0.__str__()
    assert var_1 == 'set | hashableset | frozenset | Set | MutableSet where size >= False of [set | hashableset | frozenset | Set | MutableSet where size >= False]'
    int_1 = 1233
    var_0.matches(int_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    r_set_enum_0 = module_2.RSetEnum.SET
    bool_0 = True
    r_range_size_set_matcher_0 = module_3.RRangeSizeSetMatcher(r_set_enum_0, min_size=bool_0)
    r_range_size_set_of_matcher_0 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_0).__module__}.{type(r_range_size_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    bool_1 = r_range_size_set_of_matcher_0.__eq__(r_range_size_set_of_matcher_0)
    assert bool_1 is True
    module_1.RRangeSizeSetOfMatcher(r_range_size_set_matcher_0, r_range_size_set_of_matcher_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    r_set_enum_0 = module_2.RSetEnum.SET
    bool_0 = False
    r_range_size_set_matcher_0 = module_3.RRangeSizeSetMatcher(r_set_enum_0, min_size=bool_0)
    r_range_size_set_of_matcher_0 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_0).__module__}.{type(r_range_size_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    set_0 = {r_set_enum_0, r_range_size_set_matcher_0, r_range_size_set_matcher_0, r_range_size_set_of_matcher_0}
    bool_1 = r_range_size_set_of_matcher_0.matches(set_0)
    assert bool_1 is False
    int_0 = r_range_size_set_matcher_0.__hash__()
    var_0 = r_range_size_set_of_matcher_0.__str__()
    assert var_0 == 'set | hashableset | frozenset | Set | MutableSet where size >= False of [set | hashableset | frozenset | Set | MutableSet where size >= False]'
    bool_2 = r_range_size_set_of_matcher_0.matches(r_range_size_set_matcher_0)
    assert bool_2 is False
    bool_3 = r_range_size_set_of_matcher_0.__eq__(r_range_size_set_of_matcher_0)
    assert bool_3 is True
    var_1 = r_range_size_set_of_matcher_0.__str__()
    assert var_1 == 'set | hashableset | frozenset | Set | MutableSet where size >= False of [set | hashableset | frozenset | Set | MutableSet where size >= False]'
    module_1.RRangeSizeSetOfMatcher(r_set_enum_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    r_set_enum_0 = module_2.RSetEnum.SET
    bool_0 = True
    r_range_size_set_matcher_0 = module_3.RRangeSizeSetMatcher(r_set_enum_0, min_size=bool_0)
    r_range_size_set_of_matcher_0 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, min_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_0).__module__}.{type(r_range_size_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    r_range_size_set_of_matcher_1 = module_1.RRangeSizeSetOfMatcher(r_set_enum_0, r_range_size_set_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_set_of_matcher_1).__module__}.{type(r_range_size_set_of_matcher_1).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetOfMatcher.RRangeSizeSetOfMatcher'
    int_0 = r_range_size_set_of_matcher_0.__hash__()
    assert int_0 == 0
    bool_1 = r_range_size_set_of_matcher_1.__ne__(r_range_size_set_of_matcher_0)
    assert bool_1 is True
    var_0 = r_range_size_set_of_matcher_1.__str__()
    assert var_0 == 'set | hashableset | frozenset | Set | MutableSet where size <= True of [set | hashableset | frozenset | Set | MutableSet where size >= True]'
    r_range_size_set_matcher_0.matches(bool_1, var_0)