# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.range.RRangeBound_ as module_0

def test_case_0():
    bool_0 = True
    bool_1 = bool_0.__eq__(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'Tests if an iterable is not empty and items from an iterable are instances of a type.\n\n    Example: Tuple {@code ("abc", "def")} has items of type {@link builtins#str}.\n\n    @param iterable\n           reference to test\n    @param class_or_type_or_tuple_of\n           class, type, or tuple of classes or types.  Must not be a list (or sequence).\n    @param arg_name\n           name of argument to be used in thrown exception message, e.g., {@code "file_name_list"}\n    @param *arg_name_format_args\n           zero or more arguments passed to {@link str#format()} along with {@code arg_name}\n           Example: if {@code arg_name} is {@code "Index {}"},\n                    then {@code *arg_name_format_args} might be {@code 7}.\n           Example: if {@code arg_name} is {@code "{}[{}]"},\n                    then {@code *arg_name_format_args} might be {@code ("Index", 7)}.\n\n    @return checked iterable\n\n    @throws ValueError\n            if {@code iterable} is empty\n            if {@code class_or_type_or_tuple_of} is {@code None}\n    @throws TypeError\n            if {@code iterable} is not iterable, including {@code None}\n            if {@code class_or_type_or_tuple_of} is invalid, e.g., {@code "abc"}\n            if any item from {@code iterable} has unexpected type, e.g., "abc" for int, or 123 for str\n\n    @see #check_is_iterable()\n    @see #check_is_instance()\n    '
    module_0.RRangeBound_(str_0)