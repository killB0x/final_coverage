# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.collection.RRangeSizeMatcher as module_0
import rambutan3.check_args.dict.RRangeSizeDictMatcher as module_1
import rambutan3.check_args.dict.RDictEnum as module_2
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.RRangeSizeMatcher()

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_1.RRangeSizeDictMatcher(bool_0)

def test_case_2():
    bool_0 = False
    r_dict_enum_0 = module_2.RDictEnum.BUILTIN_DICT
    r_range_size_dict_matcher_0 = module_1.RRangeSizeDictMatcher(r_dict_enum_0, min_size=bool_0)
    assert f'{type(r_range_size_dict_matcher_0).__module__}.{type(r_range_size_dict_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    str_0 = r_range_size_dict_matcher_0.__str__()
    assert str_0 == 'dict where size >= False'
    bool_1 = r_range_size_dict_matcher_0.__eq__(r_range_size_dict_matcher_0)
    assert bool_1 is True
    int_0 = r_range_size_dict_matcher_0.__hash__()
    assert int_0 == 5278547947155241227

def test_case_3():
    bool_0 = True
    r_dict_enum_0 = module_2.RDictEnum.BUILTIN_DICT
    r_range_size_dict_matcher_0 = module_1.RRangeSizeDictMatcher(r_dict_enum_0, min_size=bool_0)
    assert f'{type(r_range_size_dict_matcher_0).__module__}.{type(r_range_size_dict_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    r_type_matcher_error_0 = module_3.RTypeMatcherError()
    bool_1 = r_range_size_dict_matcher_0.matches(bool_0, r_type_matcher_error_0)
    assert bool_1 is False

def test_case_4():
    bool_0 = True
    r_dict_enum_0 = module_2.RDictEnum.BUILTIN_DICT
    r_range_size_dict_matcher_0 = module_1.RRangeSizeDictMatcher(r_dict_enum_0, min_size=bool_0)
    assert f'{type(r_range_size_dict_matcher_0).__module__}.{type(r_range_size_dict_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    bool_1 = r_range_size_dict_matcher_0.__eq__(r_range_size_dict_matcher_0)
    assert bool_1 is True
    int_0 = r_range_size_dict_matcher_0.__or__(r_range_size_dict_matcher_0)
    assert f'{type(int_0).__module__}.{type(int_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'

def test_case_5():
    bool_0 = False
    none_type_0 = None
    r_dict_enum_0 = module_2.RDictEnum.BUILTIN_DICT
    r_range_size_dict_matcher_0 = module_1.RRangeSizeDictMatcher(r_dict_enum_0, min_size=bool_0)
    assert f'{type(r_range_size_dict_matcher_0).__module__}.{type(r_range_size_dict_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    bool_1 = r_range_size_dict_matcher_0.__eq__(none_type_0)
    assert bool_1 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    r_dict_enum_0 = module_2.RDictEnum.BUILTIN_DICT
    r_dict_enum_1 = module_2.RDictEnum.BUILTIN_DICT
    int_0 = 564
    r_range_size_dict_matcher_0 = module_1.RRangeSizeDictMatcher(r_dict_enum_0, min_size=int_0)
    assert f'{type(r_range_size_dict_matcher_0).__module__}.{type(r_range_size_dict_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    bool_0 = r_range_size_dict_matcher_0.__eq__(int_0)
    assert bool_0 is False
    bool_1 = r_range_size_dict_matcher_0.__eq__(r_dict_enum_0)
    dict_0 = {r_range_size_dict_matcher_0: r_dict_enum_1}
    bool_2 = True
    r_range_size_dict_matcher_0.check_arg(dict_0, bool_2)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    none_type_0 = None
    r_dict_enum_0 = module_2.RDictEnum.DICT
    r_range_size_dict_matcher_0 = module_1.RRangeSizeDictMatcher(r_dict_enum_0, min_size=bool_0)
    assert f'{type(r_range_size_dict_matcher_0).__module__}.{type(r_range_size_dict_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    r_dict_enum_1 = module_2.RDictEnum.BUILTIN_DICT
    r_range_size_dict_matcher_1 = module_1.RRangeSizeDictMatcher(r_dict_enum_1, max_size=bool_0)
    assert f'{type(r_range_size_dict_matcher_1).__module__}.{type(r_range_size_dict_matcher_1).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictMatcher.RRangeSizeDictMatcher'
    int_0 = r_range_size_dict_matcher_0.__hash__()
    assert int_0 == 393434074858708332
    bool_1 = r_range_size_dict_matcher_0.__eq__(r_range_size_dict_matcher_1)
    assert bool_1 is False
    bool_2 = r_range_size_dict_matcher_1.__eq__(none_type_0)
    assert bool_2 is False
    set_0 = {bool_1, int_0, bool_0, r_range_size_dict_matcher_1}
    r_range_size_dict_matcher_1.__or__(set_0)