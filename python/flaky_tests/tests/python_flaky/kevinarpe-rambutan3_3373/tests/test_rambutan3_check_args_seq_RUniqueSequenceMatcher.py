# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.seq.RUniqueSequenceMatcher as module_0
import rambutan3.check_args.seq.RSequenceEnum as module_1
import rambutan3.string.RStr as module_2
import rambutan3.string.RMessageText as module_3
import rambutan3.check_args.RCheckArgsError as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.RUniqueSequenceMatcher(none_type_0)

def test_case_1():
    none_type_0 = None
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_0.RUniqueSequenceMatcher(r_sequence_enum_0)
    assert f'{type(r_unique_sequence_matcher_0).__module__}.{type(r_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceMatcher.RUniqueSequenceMatcher'
    assert f'{type(module_0.RUniqueSequenceMatcher.core_matches).__module__}.{type(module_0.RUniqueSequenceMatcher.core_matches).__qualname__}' == 'builtins.method'
    bool_0 = r_unique_sequence_matcher_0.matches(none_type_0)
    assert bool_0 is False

def test_case_2():
    none_type_0 = None
    r_sequence_enum_0 = module_1.RSequenceEnum.LIST
    r_unique_sequence_matcher_0 = module_0.RUniqueSequenceMatcher(r_sequence_enum_0)
    assert f'{type(r_unique_sequence_matcher_0).__module__}.{type(r_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceMatcher.RUniqueSequenceMatcher'
    assert f'{type(module_0.RUniqueSequenceMatcher.core_matches).__module__}.{type(module_0.RUniqueSequenceMatcher.core_matches).__qualname__}' == 'builtins.method'
    bool_0 = r_unique_sequence_matcher_0.matches(none_type_0)
    assert bool_0 is False
    r_str_0 = module_2.RStr()
    var_0 = r_unique_sequence_matcher_0.__str__()
    assert var_0 == 'unique list'
    r_message_text_0 = module_3.RMessageText(var_0)
    assert len(r_message_text_0) == 11
    var_1 = r_message_text_0.iter()

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_0.RUniqueSequenceMatcher(r_sequence_enum_0)
    assert f'{type(r_unique_sequence_matcher_0).__module__}.{type(r_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceMatcher.RUniqueSequenceMatcher'
    assert f'{type(module_0.RUniqueSequenceMatcher.core_matches).__module__}.{type(module_0.RUniqueSequenceMatcher.core_matches).__qualname__}' == 'builtins.method'
    bool_0 = r_unique_sequence_matcher_0.matches(none_type_0)
    assert bool_0 is False
    none_type_1 = None
    r_str_0 = module_2.RStr()
    var_0 = r_unique_sequence_matcher_0.__str__()
    assert var_0 == 'unique tuple | Sequence | list | MutableSequence'
    bool_1 = r_unique_sequence_matcher_0.matches(none_type_0)
    str_0 = 'lX7vGbT\n1\x0bK@nl|'
    r_message_text_0 = module_3.RMessageText(str_0)
    var_1 = r_message_text_0.iter()
    var_2 = var_0.__str__()
    assert var_2 == 'unique tuple | Sequence | list | MutableSequence'
    int_0 = r_unique_sequence_matcher_0.__hash__()
    assert int_0 == 1004693537688201540
    module_0.RUniqueSequenceMatcher(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_0.RUniqueSequenceMatcher(r_sequence_enum_0)
    assert f'{type(r_unique_sequence_matcher_0).__module__}.{type(r_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceMatcher.RUniqueSequenceMatcher'
    assert f'{type(module_0.RUniqueSequenceMatcher.core_matches).__module__}.{type(module_0.RUniqueSequenceMatcher.core_matches).__qualname__}' == 'builtins.method'
    bool_0 = r_unique_sequence_matcher_0.matches(none_type_0)
    assert bool_0 is False
    r_str_0 = module_2.RStr()
    list_0 = [r_str_0]
    str_0 = '.)cqge '
    var_0 = r_unique_sequence_matcher_0.check_arg(list_0, str_0)
    str_1 = '\r\n(<c'
    var_1 = r_str_0.iter()
    var_0.check_arg(r_sequence_enum_0, str_1)

def test_case_5():
    none_type_0 = None
    r_sequence_enum_0 = module_1.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_0.RUniqueSequenceMatcher(r_sequence_enum_0)
    assert f'{type(r_unique_sequence_matcher_0).__module__}.{type(r_unique_sequence_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RUniqueSequenceMatcher.RUniqueSequenceMatcher'
    assert f'{type(module_0.RUniqueSequenceMatcher.core_matches).__module__}.{type(module_0.RUniqueSequenceMatcher.core_matches).__qualname__}' == 'builtins.method'
    bool_0 = r_unique_sequence_matcher_0.matches(none_type_0)
    assert bool_0 is False
    r_str_0 = module_2.RStr()
    list_0 = [none_type_0, r_str_0, none_type_0, r_unique_sequence_matcher_0]
    bool_1 = r_unique_sequence_matcher_0.matches(r_sequence_enum_0)
    var_0 = r_unique_sequence_matcher_0.__str__()
    assert var_0 == 'unique tuple | Sequence | list | MutableSequence'
    str_0 = 'P;'
    with pytest.raises(module_4.RCheckArgsError):
        r_unique_sequence_matcher_0.check_arg(list_0, str_0)