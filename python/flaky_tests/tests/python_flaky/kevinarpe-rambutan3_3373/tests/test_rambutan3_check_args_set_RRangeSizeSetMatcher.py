# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.set.RRangeSizeSetMatcher as module_0
import rambutan3.check_args.set.RSetEnum as module_1
import rambutan3.check_args.RCheckArgsError as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.RRangeSizeSetMatcher(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    r_set_enum_0 = module_1.RSetEnum.BUILTIN_FROZENSET
    int_0 = 189
    r_range_size_set_matcher_0 = module_0.RRangeSizeSetMatcher(r_set_enum_0, min_size=int_0)
    assert f'{type(r_range_size_set_matcher_0).__module__}.{type(r_range_size_set_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    bool_0 = r_range_size_set_matcher_0.__eq__(r_range_size_set_matcher_0)
    assert bool_0 is True
    module_0.RRangeSizeSetMatcher(r_range_size_set_matcher_0)

def test_case_2():
    r_set_enum_0 = module_1.RSetEnum.BUILTIN_FROZENSET
    int_0 = 189
    r_range_size_set_matcher_0 = module_0.RRangeSizeSetMatcher(r_set_enum_0, min_size=int_0)
    assert f'{type(r_range_size_set_matcher_0).__module__}.{type(r_range_size_set_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    bool_0 = r_range_size_set_matcher_0.__eq__(r_set_enum_0)
    assert bool_0 is False
    str_0 = '], ['
    with pytest.raises(module_2.RCheckArgsError):
        r_range_size_set_matcher_0.check_arg(bool_0, str_0)

def test_case_3():
    r_set_enum_0 = module_1.RSetEnum.BUILTIN_FROZENSET
    int_0 = 189
    r_range_size_set_matcher_0 = module_0.RRangeSizeSetMatcher(r_set_enum_0, min_size=int_0)
    assert f'{type(r_range_size_set_matcher_0).__module__}.{type(r_range_size_set_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    bool_0 = r_range_size_set_matcher_0.__eq__(r_range_size_set_matcher_0)
    assert bool_0 is True
    var_0 = r_range_size_set_matcher_0.__or__(r_range_size_set_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'

def test_case_4():
    r_set_enum_0 = module_1.RSetEnum.BUILTIN_FROZENSET
    int_0 = 189
    r_range_size_set_matcher_0 = module_0.RRangeSizeSetMatcher(r_set_enum_0, min_size=int_0)
    assert f'{type(r_range_size_set_matcher_0).__module__}.{type(r_range_size_set_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    bool_0 = r_range_size_set_matcher_0.__eq__(r_range_size_set_matcher_0)
    assert bool_0 is True

def test_case_5():
    r_set_enum_0 = module_1.RSetEnum.SET
    int_0 = 210
    r_range_size_set_matcher_0 = module_0.RRangeSizeSetMatcher(r_set_enum_0, min_size=int_0)
    assert f'{type(r_range_size_set_matcher_0).__module__}.{type(r_range_size_set_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    bool_0 = r_range_size_set_matcher_0.__eq__(r_set_enum_0)
    assert bool_0 is False
    str_0 = r_range_size_set_matcher_0.__str__()
    assert str_0 == 'set | hashableset | frozenset | Set | MutableSet where size >= 210'
    str_1 = r_range_size_set_matcher_0.__str__()
    str_2 = r_range_size_set_matcher_0.__str__()
    str_3 = r_range_size_set_matcher_0.__str__()
    bool_1 = r_range_size_set_matcher_0.__eq__(int_0)
    set_0 = {bool_0}
    str_4 = ' | '
    with pytest.raises(module_2.RCheckArgsError):
        r_range_size_set_matcher_0.check_arg(set_0, str_4)

def test_case_6():
    r_set_enum_0 = module_1.RSetEnum.BUILTIN_SET
    bool_0 = False
    r_range_size_set_matcher_0 = module_0.RRangeSizeSetMatcher(r_set_enum_0, max_size=bool_0)
    assert f'{type(r_range_size_set_matcher_0).__module__}.{type(r_range_size_set_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    int_0 = r_range_size_set_matcher_0.__hash__()
    assert int_0 == -8362154334477595492
    r_set_enum_1 = module_1.RSetEnum.BUILTIN_FROZENSET
    int_1 = 152
    r_range_size_set_matcher_1 = module_0.RRangeSizeSetMatcher(r_set_enum_1, min_size=int_1)
    assert f'{type(r_range_size_set_matcher_1).__module__}.{type(r_range_size_set_matcher_1).__qualname__}' == 'rambutan3.check_args.set.RRangeSizeSetMatcher.RRangeSizeSetMatcher'
    bool_1 = r_range_size_set_matcher_0.__eq__(r_range_size_set_matcher_1)
    assert bool_1 is False
    bool_2 = r_range_size_set_matcher_1.__eq__(r_range_size_set_matcher_1)
    assert bool_2 is True