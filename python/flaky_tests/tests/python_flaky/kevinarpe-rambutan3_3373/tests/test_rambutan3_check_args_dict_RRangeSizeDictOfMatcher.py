# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.dict.RDictEnum as module_0
import rambutan3.check_args.dict.RRangeSizeDictOfMatcher as module_1
import rambutan3.check_args.dict.RDictMatcher as module_2
import rambutan3.check_args.RCheckArgsError as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    module_1.RRangeSizeDictOfMatcher(r_dict_enum_0)

def test_case_1():
    bool_0 = True
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    bool_1 = r_range_size_dict_of_matcher_0.__eq__(r_range_size_dict_of_matcher_0)
    assert bool_1 is True
    var_0 = r_range_size_dict_of_matcher_0.__str__()
    assert var_0 == 'dict where size <= True of [values: dict]'

def test_case_2():
    bool_0 = True
    none_type_0 = None
    str_0 = 'Iterable instance matcher\n\n    This class is fully tested.\n\n    @author Kevin Connor ARPE (kevinarpe@gmail.com)\n\n    @see RArgs#is_iterable()\n    '
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    bool_1 = r_dict_matcher_0.__ne__(bool_0)
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_1)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    int_0 = r_range_size_dict_of_matcher_0.__hash__()
    assert int_0 == 6269856238033718758
    bytes_0 = b'\xa3\xaa\x91\xa9\xa8\x07\x93%"@\x07'
    dict_0 = {bool_1: bytes_0}
    bool_2 = r_range_size_dict_of_matcher_0.matches(dict_0)
    assert bool_2 is False
    var_0 = r_range_size_dict_of_matcher_0.__str__()
    assert var_0 == 'dict where size <= True of [values: dict]'
    bool_3 = r_dict_matcher_0.matches(r_dict_enum_0, none_type_0)
    with pytest.raises(module_3.RCheckArgsError):
        r_dict_matcher_0.check_arg(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = 'Iterable instance matcher\n\n    This class is fully tested.\n\n    @author Kevin Connor ARPE (kevinarpe@gmail.com)\n\n    @see RArgs#is_iterable()\n    '
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    bool_1 = True
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_1)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    int_0 = r_range_size_dict_of_matcher_0.__hash__()
    assert int_0 == 6269856238033718758
    bool_2 = r_range_size_dict_of_matcher_0.__eq__(bool_0)
    var_0 = r_range_size_dict_of_matcher_0.__str__()
    assert var_0 == 'dict where size <= True of [values: dict]'
    r_dict_matcher_0.check_arg(int_0, str_0, *r_range_size_dict_of_matcher_0)

def test_case_4():
    bool_0 = True
    none_type_0 = None
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    bool_1 = r_range_size_dict_of_matcher_0.__eq__(bool_0)
    bool_2 = r_range_size_dict_of_matcher_0.matches(none_type_0, bool_1)
    assert bool_2 is False
    bool_3 = r_range_size_dict_of_matcher_0.__eq__(r_range_size_dict_of_matcher_0)
    assert bool_3 is True
    var_0 = r_range_size_dict_of_matcher_0.__str__()
    assert var_0 == 'dict where size <= True of [values: dict]'

def test_case_5():
    bool_0 = True
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    bool_1 = r_range_size_dict_of_matcher_0.__eq__(bool_0)
    bool_2 = r_range_size_dict_of_matcher_0.__eq__(r_range_size_dict_of_matcher_0)
    assert bool_2 is True
    var_0 = r_range_size_dict_of_matcher_0.__str__()
    assert var_0 == 'dict where size <= True of [values: dict]'

def test_case_6():
    bool_0 = True
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    bool_1 = r_range_size_dict_of_matcher_0.__eq__(r_range_size_dict_of_matcher_0)
    assert bool_1 is True

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    none_type_0 = None
    r_dict_enum_0 = module_0.RDictEnum.BUILTIN_DICT
    r_dict_matcher_0 = module_2.RDictMatcher(r_dict_enum_0)
    r_range_size_dict_of_matcher_0 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, value_matcher=r_dict_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_dict_of_matcher_0).__module__}.{type(r_range_size_dict_of_matcher_0).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    int_0 = r_range_size_dict_of_matcher_0.__hash__()
    assert int_0 == 6269856238033718758
    int_1 = r_range_size_dict_of_matcher_0.__hash__()
    assert int_1 == 6269856238033718758
    bool_1 = r_range_size_dict_of_matcher_0.__eq__(bool_0)
    bytes_0 = b'\xa3\xaa\x91\xa9\xa8\x07\x93%"@\x07'
    r_range_size_dict_of_matcher_1 = module_1.RRangeSizeDictOfMatcher(r_dict_enum_0, key_matcher=r_dict_matcher_0, value_matcher=r_range_size_dict_of_matcher_0, min_size=int_0)
    assert f'{type(r_range_size_dict_of_matcher_1).__module__}.{type(r_range_size_dict_of_matcher_1).__qualname__}' == 'rambutan3.check_args.dict.RRangeSizeDictOfMatcher.RRangeSizeDictOfMatcher'
    bool_2 = r_range_size_dict_of_matcher_0.__eq__(r_range_size_dict_of_matcher_1)
    dict_0 = {bool_0: bytes_0}
    bool_3 = r_range_size_dict_of_matcher_0.matches(none_type_0, bool_1)
    assert bool_3 is False
    bool_4 = r_range_size_dict_of_matcher_0.__eq__(r_range_size_dict_of_matcher_0)
    assert bool_4 is True
    bool_5 = r_range_size_dict_of_matcher_0.matches(dict_0)
    assert bool_5 is False
    var_0 = r_range_size_dict_of_matcher_0.__str__()
    assert var_0 == 'dict where size <= True of [values: dict]'
    bool_6 = r_dict_matcher_0.matches(r_dict_enum_0, none_type_0)
    int_2 = var_0.__hash__()
    assert int_2 == -1873653967461872069
    str_0 = '\n    Wraps a {@link str} value that is a reasonable identifier:\n    One or more [0-9A-Za-z_-.=]\n\n    No whitespace or silly special chars.  The list above may slowly expand in the future.\n\n    Examples: email_address, telephone_number123, or __something_very_private, 3rd, a.b.c, small-size, pid=123\n\n    This class is fully tested.\n\n    @author Kevin Connor ARPE (kevinarpe@gmail.com)\n    @see RStrictIdentifier\n    '
    var_0.check_arg(bool_3, str_0)