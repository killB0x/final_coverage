# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_0
import rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher as module_1
import rambutan3.check_args.seq.RSequenceEnum as module_2
import rambutan3.check_args.seq.RUniqueSequenceMatcher as module_3

def test_case_0():
    none_type_0 = None
    r_type_matcher_error_0 = module_0.RTypeMatcherError()
    var_0 = r_type_matcher_error_0.add_failed_match(none_type_0, none_type_0, none_type_0)
    int_0 = var_0.__hash__()

@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = -1432.223
    module_1.RRangeSizeUniqueSequenceOfMatcher(float_0, float_0)

def test_case_2():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    int_0 = 4295
    r_range_size_unique_sequence_of_matcher_0 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_0).__module__}.{type(r_range_size_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    bool_0 = r_range_size_unique_sequence_of_matcher_0.matches(r_unique_sequence_matcher_0)
    assert bool_0 is False

def test_case_3():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    int_0 = 4289
    r_range_size_unique_sequence_of_matcher_0 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_0).__module__}.{type(r_range_size_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    bool_0 = False
    r_range_size_unique_sequence_of_matcher_1 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_range_size_unique_sequence_of_matcher_0, max_size=bool_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_1).__module__}.{type(r_range_size_unique_sequence_of_matcher_1).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    var_0 = r_range_size_unique_sequence_of_matcher_1.__str__()
    assert var_0 == 'unique tuple | Sequence | list | MutableSequence where size <= False of [unique tuple | Sequence | list | MutableSequence where size <= 4289 of [unique tuple | Sequence | list | MutableSequence]]'

def test_case_4():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    int_0 = 4289
    r_range_size_unique_sequence_of_matcher_0 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_0).__module__}.{type(r_range_size_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    none_type_0 = None
    bool_0 = r_range_size_unique_sequence_of_matcher_0.matches(none_type_0)
    assert bool_0 is False
    bool_1 = r_range_size_unique_sequence_of_matcher_0.__ne__(r_range_size_unique_sequence_of_matcher_0)
    assert bool_1 is False

def test_case_5():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    int_0 = 4289
    r_range_size_unique_sequence_of_matcher_0 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_0).__module__}.{type(r_range_size_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    bool_0 = r_range_size_unique_sequence_of_matcher_0.matches(r_unique_sequence_matcher_0)
    assert bool_0 is False
    bool_1 = r_range_size_unique_sequence_of_matcher_0.__ne__(int_0)
    assert bool_1 is True

def test_case_6():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    int_0 = 4289
    r_range_size_unique_sequence_of_matcher_0 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_0).__module__}.{type(r_range_size_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    bool_0 = r_range_size_unique_sequence_of_matcher_0.matches(r_unique_sequence_matcher_0)
    assert bool_0 is False
    bool_1 = r_range_size_unique_sequence_of_matcher_0.__ne__(r_unique_sequence_matcher_0)
    assert bool_1 is True
    int_1 = r_range_size_unique_sequence_of_matcher_0.__hash__()
    assert int_1 == 1795093016130178875

def test_case_7():
    r_sequence_enum_0 = module_2.RSequenceEnum.SEQUENCE
    r_unique_sequence_matcher_0 = module_3.RUniqueSequenceMatcher(r_sequence_enum_0)
    int_0 = 4289
    r_range_size_unique_sequence_of_matcher_0 = module_1.RRangeSizeUniqueSequenceOfMatcher(r_sequence_enum_0, r_unique_sequence_matcher_0, max_size=int_0)
    assert f'{type(r_range_size_unique_sequence_of_matcher_0).__module__}.{type(r_range_size_unique_sequence_of_matcher_0).__qualname__}' == 'rambutan3.check_args.seq.RRangeSizeUniqueSequenceOfMatcher.RRangeSizeUniqueSequenceOfMatcher'
    list_0 = []
    bool_0 = r_range_size_unique_sequence_of_matcher_0.matches(list_0)
    assert bool_0 is True
    bool_1 = r_range_size_unique_sequence_of_matcher_0.__ne__(r_sequence_enum_0)
    assert bool_1 is True