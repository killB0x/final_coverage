# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.set.RSetOfMatcher as module_0
import rambutan3.check_args.set.RSetEnum as module_1
import rambutan3.check_args.set.RSetMatcher as module_2
import rambutan3.RArgs as module_3

def test_case_0():
    none_type_0 = None
    var_0 = none_type_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.RSetOfMatcher(none_type_0, none_type_0)

def test_case_2():
    none_type_0 = None
    r_set_enum_0 = module_1.RSetEnum.SET
    r_set_matcher_0 = module_2.RSetMatcher(r_set_enum_0)
    r_set_of_matcher_0 = module_0.RSetOfMatcher(r_set_enum_0, r_set_matcher_0)
    assert f'{type(r_set_of_matcher_0).__module__}.{type(r_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RSetOfMatcher.RSetOfMatcher'
    int_0 = -314
    bool_0 = r_set_of_matcher_0.matches(int_0)
    assert bool_0 is False
    int_1 = r_set_of_matcher_0.__hash__()
    assert int_1 == 0
    bool_1 = r_set_of_matcher_0.__eq__(none_type_0)
    bool_2 = r_set_of_matcher_0.__ne__(r_set_of_matcher_0)
    assert bool_2 is False

def test_case_3():
    r_set_enum_0 = module_1.RSetEnum.SET
    r_set_matcher_0 = module_2.RSetMatcher(r_set_enum_0)
    r_set_of_matcher_0 = module_0.RSetOfMatcher(r_set_enum_0, r_set_matcher_0)
    assert f'{type(r_set_of_matcher_0).__module__}.{type(r_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RSetOfMatcher.RSetOfMatcher'
    int_0 = r_set_of_matcher_0.__hash__()
    assert int_0 == 0
    bool_0 = r_set_of_matcher_0.__ne__(r_set_of_matcher_0)
    assert bool_0 is False

def test_case_4():
    r_set_enum_0 = module_1.RSetEnum.BUILTIN_FROZENSET
    r_set_matcher_0 = module_2.RSetMatcher(r_set_enum_0)
    r_set_of_matcher_0 = module_0.RSetOfMatcher(r_set_enum_0, r_set_matcher_0)
    assert f'{type(r_set_of_matcher_0).__module__}.{type(r_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RSetOfMatcher.RSetOfMatcher'
    int_0 = r_set_of_matcher_0.__str__()
    assert int_0 == 'frozenset of [frozenset]'
    bool_0 = r_set_of_matcher_0.__ne__(r_set_of_matcher_0)
    assert bool_0 is False

def test_case_5():
    r_set_enum_0 = module_1.RSetEnum.SET
    r_set_matcher_0 = module_2.RSetMatcher(r_set_enum_0)
    r_set_of_matcher_0 = module_0.RSetOfMatcher(r_set_enum_0, r_set_matcher_0)
    assert f'{type(r_set_of_matcher_0).__module__}.{type(r_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RSetOfMatcher.RSetOfMatcher'
    int_0 = -314
    bool_0 = r_set_of_matcher_0.matches(int_0)
    assert bool_0 is False
    bool_1 = r_set_of_matcher_0.__ne__(r_set_of_matcher_0)
    assert bool_1 is False

def test_case_6():
    r_set_enum_0 = module_1.RSetEnum.SET
    r_set_matcher_0 = module_2.RSetMatcher(r_set_enum_0)
    r_set_of_matcher_0 = module_0.RSetOfMatcher(r_set_enum_0, r_set_matcher_0)
    assert f'{type(r_set_of_matcher_0).__module__}.{type(r_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RSetOfMatcher.RSetOfMatcher'
    bool_0 = r_set_of_matcher_0.__ne__(r_set_of_matcher_0)
    assert bool_0 is False

def test_case_7():
    none_type_0 = None
    r_set_enum_0 = module_1.RSetEnum.SET
    r_set_matcher_0 = module_2.RSetMatcher(r_set_enum_0)
    r_set_of_matcher_0 = module_0.RSetOfMatcher(r_set_enum_0, r_set_matcher_0)
    assert f'{type(r_set_of_matcher_0).__module__}.{type(r_set_of_matcher_0).__qualname__}' == 'rambutan3.check_args.set.RSetOfMatcher.RSetOfMatcher'
    int_0 = -314
    set_0 = {int_0, r_set_matcher_0}
    bool_0 = r_set_of_matcher_0.matches(set_0)
    assert bool_0 is False
    int_1 = r_set_of_matcher_0.__hash__()
    assert int_1 == 0
    bool_1 = r_set_of_matcher_0.__eq__(none_type_0)
    tuple_0 = (bool_0,)
    int_2 = r_set_of_matcher_0.__hash__()
    assert int_2 == 0
    bool_2 = r_set_of_matcher_0.__ne__(r_set_of_matcher_0)
    assert bool_2 is False
    var_0 = r_set_of_matcher_0.__str__()
    assert var_0 == 'set | hashableset | frozenset | Set | MutableSet of [set | hashableset | frozenset | Set | MutableSet]'
    with pytest.raises(TypeError):
        module_3.check_is_subclass(none_type_0, tuple_0, var_0)