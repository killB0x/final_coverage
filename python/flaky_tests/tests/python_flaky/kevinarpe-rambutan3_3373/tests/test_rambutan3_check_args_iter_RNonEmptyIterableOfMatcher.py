# Automatically generated by Pynguin.
import pytest
import rambutan3.RArgs as module_0
import rambutan3.check_args.iter.RNonEmptyIterableMatcher as module_1
import rambutan3.check_args.iter.RNonEmptyIterableOfMatcher as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.check_iterable_not_empty(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    a_b_c_0 = module_1.RNonEmptyIterableMatcher()
    str_0 = '{lsj\tt'
    r_non_empty_iterable_of_matcher_0 = module_2.RNonEmptyIterableOfMatcher(a_b_c_0)
    assert f'{type(r_non_empty_iterable_of_matcher_0).__module__}.{type(r_non_empty_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RNonEmptyIterableOfMatcher.RNonEmptyIterableOfMatcher'
    bool_0 = r_non_empty_iterable_of_matcher_0.__eq__(str_0)
    assert bool_0 is False
    r_non_empty_iterable_of_matcher_0.__or__(bool_0)

def test_case_2():
    r_non_empty_iterable_matcher_0 = module_1.RNonEmptyIterableMatcher()
    str_0 = '{lsj\tt'
    r_non_empty_iterable_of_matcher_0 = module_2.RNonEmptyIterableOfMatcher(r_non_empty_iterable_matcher_0)
    assert f'{type(r_non_empty_iterable_of_matcher_0).__module__}.{type(r_non_empty_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RNonEmptyIterableOfMatcher.RNonEmptyIterableOfMatcher'
    bool_0 = r_non_empty_iterable_of_matcher_0.__eq__(str_0)
    assert bool_0 is False
    r_non_empty_iterable_of_matcher_1 = module_2.RNonEmptyIterableOfMatcher(r_non_empty_iterable_of_matcher_0)
    int_0 = r_non_empty_iterable_of_matcher_1.__hash__()
    assert int_0 == 1

def test_case_3():
    r_non_empty_iterable_matcher_0 = module_1.RNonEmptyIterableMatcher()
    str_0 = '{lj\tt'
    r_non_empty_iterable_of_matcher_0 = module_2.RNonEmptyIterableOfMatcher(r_non_empty_iterable_matcher_0)
    assert f'{type(r_non_empty_iterable_of_matcher_0).__module__}.{type(r_non_empty_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RNonEmptyIterableOfMatcher.RNonEmptyIterableOfMatcher'
    bool_0 = r_non_empty_iterable_of_matcher_0.__eq__(r_non_empty_iterable_matcher_0)
    assert bool_0 is False
    int_0 = r_non_empty_iterable_matcher_0.__or__(r_non_empty_iterable_of_matcher_0)
    assert f'{type(int_0).__module__}.{type(int_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'
    bool_1 = r_non_empty_iterable_of_matcher_0.__eq__(str_0)
    bool_2 = r_non_empty_iterable_of_matcher_0.matches(int_0)
    assert bool_2 is False

@pytest.mark.xfail(strict=True)
def test_case_4():
    r_non_empty_iterable_matcher_0 = module_1.RNonEmptyIterableMatcher()
    str_0 = '{lsj\tt'
    r_non_empty_iterable_of_matcher_0 = module_2.RNonEmptyIterableOfMatcher(r_non_empty_iterable_matcher_0)
    assert f'{type(r_non_empty_iterable_of_matcher_0).__module__}.{type(r_non_empty_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RNonEmptyIterableOfMatcher.RNonEmptyIterableOfMatcher'
    bool_0 = r_non_empty_iterable_of_matcher_0.__eq__(str_0)
    assert bool_0 is False
    none_type_0 = None
    bool_1 = r_non_empty_iterable_of_matcher_0.matches(r_non_empty_iterable_of_matcher_0, none_type_0)
    assert bool_1 is False
    r_non_empty_iterable_of_matcher_0.__or__(bool_0)

def test_case_5():
    r_non_empty_iterable_matcher_0 = module_1.RNonEmptyIterableMatcher()
    r_non_empty_iterable_of_matcher_0 = module_2.RNonEmptyIterableOfMatcher(r_non_empty_iterable_matcher_0)
    assert f'{type(r_non_empty_iterable_of_matcher_0).__module__}.{type(r_non_empty_iterable_of_matcher_0).__qualname__}' == 'rambutan3.check_args.iter.RNonEmptyIterableOfMatcher.RNonEmptyIterableOfMatcher'
    bool_0 = r_non_empty_iterable_of_matcher_0.__eq__(r_non_empty_iterable_of_matcher_0)
    assert bool_0 is True
    none_type_0 = None
    bool_1 = r_non_empty_iterable_of_matcher_0.matches(none_type_0, none_type_0)
    assert bool_1 is False
    var_0 = r_non_empty_iterable_matcher_0.__or__(r_non_empty_iterable_of_matcher_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'rambutan3.check_args.base.RAbstractTypeMatcher.RLogicalOrTypeMatcher'