# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.other.RRangeSizeStr as module_0
import rambutan3.check_args.collection.RRangeSizeMatcher as module_1
import rambutan3.check_args.RCheckArgsError as module_2
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_3

def test_case_0():
    bool_0 = True
    r_range_size_str_0 = module_0.RRangeSizeStr(max_size=bool_0)
    assert f'{type(r_range_size_str_0).__module__}.{type(r_range_size_str_0).__qualname__}' == 'rambutan3.check_args.other.RRangeSizeStr.RRangeSizeStr'
    none_type_0 = None
    bool_1 = r_range_size_str_0.__eq__(none_type_0)
    assert bool_1 is False
    r_range_size_matcher_0 = module_1.RRangeSizeMatcher(max_size=bool_0)
    var_0 = r_range_size_matcher_0.__str__()
    str_0 = 'Lv*cNrC\\n @B-EQx'
    with pytest.raises(module_2.RCheckArgsError):
        r_range_size_str_0.check_arg(var_0, str_0)

def test_case_1():
    bool_0 = True
    none_type_0 = None
    str_0 = '~M9'
    r_range_size_str_0 = module_0.RRangeSizeStr(min_size=bool_0, max_size=bool_0)
    assert f'{type(r_range_size_str_0).__module__}.{type(r_range_size_str_0).__qualname__}' == 'rambutan3.check_args.other.RRangeSizeStr.RRangeSizeStr'
    with pytest.raises(module_2.RCheckArgsError):
        r_range_size_str_0.check_arg(none_type_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    r_range_size_str_0 = module_0.RRangeSizeStr(max_size=bool_0)
    assert f'{type(r_range_size_str_0).__module__}.{type(r_range_size_str_0).__qualname__}' == 'rambutan3.check_args.other.RRangeSizeStr.RRangeSizeStr'
    int_0 = r_range_size_str_0.__hash__()
    assert int_0 == 2575514064802888272
    bool_1 = r_range_size_str_0.__eq__(r_range_size_str_0)
    assert bool_1 is True
    bool_2 = r_range_size_str_0.matches(r_range_size_str_0)
    assert bool_2 is False
    int_1 = r_range_size_str_0.__hash__()
    bool_3 = r_range_size_str_0.__eq__(r_range_size_str_0)
    assert bool_3 is True
    none_type_0 = None
    bool_4 = r_range_size_str_0.matches(none_type_0, none_type_0)
    r_range_size_str_1 = module_0.RRangeSizeStr(min_size=bool_0)
    assert f'{type(r_range_size_str_1).__module__}.{type(r_range_size_str_1).__qualname__}' == 'rambutan3.check_args.other.RRangeSizeStr.RRangeSizeStr'
    r_range_size_str_2 = module_0.RRangeSizeStr(min_size=bool_0, max_size=bool_0)
    int_2 = r_range_size_str_0.__hash__()
    r_range_size_str_0.__or__(int_2)

def test_case_3():
    bool_0 = False
    bool_1 = False
    r_range_size_str_0 = module_0.RRangeSizeStr(min_size=bool_1)
    assert f'{type(r_range_size_str_0).__module__}.{type(r_range_size_str_0).__qualname__}' == 'rambutan3.check_args.other.RRangeSizeStr.RRangeSizeStr'
    bool_2 = r_range_size_str_0.__eq__(bool_0)
    assert bool_2 is False

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    r_range_size_str_0 = module_0.RRangeSizeStr(min_size=bool_0, max_size=bool_0)
    assert f'{type(r_range_size_str_0).__module__}.{type(r_range_size_str_0).__qualname__}' == 'rambutan3.check_args.other.RRangeSizeStr.RRangeSizeStr'
    r_type_matcher_error_0 = module_3.RTypeMatcherError()
    r_type_matcher_error_0.add_traverse_path_step(r_range_size_str_0, r_range_size_str_0)