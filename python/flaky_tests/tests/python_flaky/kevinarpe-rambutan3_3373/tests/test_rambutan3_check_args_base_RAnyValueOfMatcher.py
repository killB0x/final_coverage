# Automatically generated by Pynguin.
import pytest
import rambutan3.check_args.base.RAnyValueOfMatcher as module_0
import rambutan3.check_args.base.traverse.RTypeMatcherError as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    bool_0 = True
    list_0 = [dict_0, dict_0, dict_0, bool_0]
    module_0.RAnyValueOfMatcher(*list_0)

def test_case_1():
    with pytest.raises(ValueError):
        module_0.RAnyValueOfMatcher()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'p\xb63\xee\xe6\t\x1f\xc8Q\x7f\x93C\xc2\x8f\x8b%z'
    str_0 = 'G(d\t'
    int_0 = -1248
    str_1 = 't"RQ7(,\n?Qb(:ub}H'
    bool_0 = True
    list_0 = [bytes_0, str_0, bytes_0, str_1]
    r_any_value_of_matcher_0 = module_0.RAnyValueOfMatcher(*list_0)
    assert f'{type(r_any_value_of_matcher_0).__module__}.{type(r_any_value_of_matcher_0).__qualname__}' == 'rambutan3.check_args.base.RAnyValueOfMatcher.RAnyValueOfMatcher'
    bool_1 = r_any_value_of_matcher_0.matches(int_0)
    assert bool_1 is False
    r_any_value_of_matcher_0.matches(bool_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 0.0005
    list_0 = [float_0]
    r_any_value_of_matcher_0 = module_0.RAnyValueOfMatcher(*list_0)
    assert f'{type(r_any_value_of_matcher_0).__module__}.{type(r_any_value_of_matcher_0).__qualname__}' == 'rambutan3.check_args.base.RAnyValueOfMatcher.RAnyValueOfMatcher'
    var_0 = r_any_value_of_matcher_0.__str__()
    assert var_0 == 'any value of frozenset({0.0005})'
    var_0.__or__(float_0)

def test_case_4():
    bytes_0 = b'p\xb63\xee\xe6\t\x1f\xc8Q\x7f\x93C\xc2\x8f\x8b%z'
    str_0 = 'G(d\t'
    int_0 = -1251
    str_1 = 't"RQ7(,\n?Qb(:ub}H'
    list_0 = [bytes_0, str_0, bytes_0, str_1]
    r_any_value_of_matcher_0 = module_0.RAnyValueOfMatcher(*list_0)
    assert f'{type(r_any_value_of_matcher_0).__module__}.{type(r_any_value_of_matcher_0).__qualname__}' == 'rambutan3.check_args.base.RAnyValueOfMatcher.RAnyValueOfMatcher'
    bool_0 = r_any_value_of_matcher_0.matches(str_1)
    assert bool_0 is True
    bool_1 = r_any_value_of_matcher_0.matches(int_0)
    assert bool_1 is False
    r_type_matcher_error_0 = module_1.RTypeMatcherError()
    with pytest.raises(ValueError):
        module_0.RAnyValueOfMatcher()

def test_case_5():
    bytes_0 = b'p\xb63\xee\xe6\t\x1f\xc8Q\x7f\x93C\xc2\x8f\x8b%z'
    str_0 = 'Bzts3t>,\x0cilx9,f}j'
    str_1 = 't"RQ7(,\n?Qb(:ub}H'
    bool_0 = True
    list_0 = [bytes_0, str_0, bytes_0, str_1]
    r_any_value_of_matcher_0 = module_0.RAnyValueOfMatcher(*list_0)
    assert f'{type(r_any_value_of_matcher_0).__module__}.{type(r_any_value_of_matcher_0).__qualname__}' == 'rambutan3.check_args.base.RAnyValueOfMatcher.RAnyValueOfMatcher'
    bool_1 = r_any_value_of_matcher_0.__eq__(bytes_0)
    assert bool_1 is False
    int_0 = r_any_value_of_matcher_0.__hash__()
    assert int_0 == 5757306896286845989
    bool_2 = r_any_value_of_matcher_0.matches(bool_0)
    assert bool_2 is False
    r_type_matcher_error_0 = module_1.RTypeMatcherError()
    with pytest.raises(ValueError):
        module_0.RAnyValueOfMatcher()

def test_case_6():
    bytes_0 = b'p\xb63\xee\xe6\t\x1f\xc8Q\x7f\x93C\xc2\x8f\x8b%z'
    str_0 = 'Bzts3t>,\x0cilx9,f}j'
    int_0 = -1251
    str_1 = 't"RQ7(,\n?Qb(:ub}H'
    list_0 = [bytes_0, str_0, bytes_0, str_1]
    r_any_value_of_matcher_0 = module_0.RAnyValueOfMatcher(*list_0)
    assert f'{type(r_any_value_of_matcher_0).__module__}.{type(r_any_value_of_matcher_0).__qualname__}' == 'rambutan3.check_args.base.RAnyValueOfMatcher.RAnyValueOfMatcher'
    bool_0 = r_any_value_of_matcher_0.__eq__(bytes_0)
    assert bool_0 is False
    int_1 = r_any_value_of_matcher_0.__hash__()
    assert int_1 == 5757306896286845989
    bool_1 = r_any_value_of_matcher_0.matches(int_0)
    assert bool_1 is False
    r_type_matcher_error_0 = module_1.RTypeMatcherError()
    bool_2 = r_any_value_of_matcher_0.matches(int_1, r_type_matcher_error_0)
    assert bool_2 is False
    bool_3 = r_any_value_of_matcher_0.__eq__(r_any_value_of_matcher_0)
    assert bool_3 is True
    r_type_matcher_error_1 = module_1.RTypeMatcherError()
    with pytest.raises(ValueError):
        module_0.RAnyValueOfMatcher()