# Automatically generated by Pynguin.
import pytest
import pycallnumber.units.dates.parts as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -4193
    module_0.Month(int_0)

def test_case_1():
    str_0 = 'march'
    month_0 = module_0.Month(str_0)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'pycallnumber.units.dates.parts.Month'
    assert f'{type(month_0.options).__module__}.{type(month_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(month_0.options) == 7
    assert month_0.definition is None
    assert month_0.is_separator is False
    assert month_0.display_case == ''
    assert month_0.search_case == 'lower'
    assert month_0.sort_case == 'lower'
    assert month_0.use_formatting_in_search is False
    assert month_0.use_formatting_in_sort is False
    assert month_0.name == 'default'
    assert month_0.part_names == ['fullmonth']
    assert month_0.has_part_names is True
    assert f'{type(month_0.fullmonth).__module__}.{type(month_0.fullmonth).__qualname__}' == 'pycallnumber.units.dates.parts.AlphaMonthLong'
    assert module_0.Month.short_description == 'a numeric or alphabetic month'
    assert module_0.Month.category == 'month'
    assert module_0.Month.template.separator_type is None
    assert f'{type(module_0.Month.value).__module__}.{type(module_0.Month.value).__qualname__}' == 'builtins.property'
    var_0 = month_0.__repr__()
    var_1 = month_0.cmp_key(var_0, var_0)
    assert var_1 == '0000000003'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'cu?,X.N}'
    alpha_month_0 = module_0.AlphaMonth(str_0)
    assert f'{type(alpha_month_0).__module__}.{type(alpha_month_0).__qualname__}' == 'pycallnumber.units.dates.parts.AlphaMonth'
    assert f'{type(alpha_month_0.options).__module__}.{type(alpha_month_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(alpha_month_0.options) == 5
    assert alpha_month_0.definition == 'an alphabetic representation of a month of the year'
    assert alpha_month_0.is_separator is False
    assert alpha_month_0.display_case == ''
    assert alpha_month_0.search_case == 'lower'
    assert alpha_month_0.sort_case == 'lower'
    assert alpha_month_0.name == ''
    assert module_0.AlphaMonth.definition == 'an alphabetic representation of a month of the year'
    assert module_0.AlphaMonth.numeric_zfill == 2
    assert module_0.AlphaMonth.months == {'january': 1}
    assert module_0.AlphaMonth.category == 'month'
    assert module_0.AlphaMonth.template.max_length == 1
    assert module_0.AlphaMonth.template.base_pattern == '.*'
    assert module_0.AlphaMonth.template.base_description is None
    assert module_0.AlphaMonth.template.post_pattern == '(?![A-Za-z])'
    assert module_0.AlphaMonth.template.post_description == 'anything but a letter'
    assert f'{type(module_0.AlphaMonth.value).__module__}.{type(module_0.AlphaMonth.value).__qualname__}' == 'builtins.property'
    str_1 = 'mar'
    month_0 = module_0.Month(str_1)
    assert f'{type(month_0).__module__}.{type(month_0).__qualname__}' == 'pycallnumber.units.dates.parts.Month'
    assert f'{type(month_0.options).__module__}.{type(month_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(month_0.options) == 7
    assert month_0.definition is None
    assert month_0.is_separator is False
    assert month_0.display_case == ''
    assert month_0.search_case == 'lower'
    assert month_0.sort_case == 'lower'
    assert month_0.use_formatting_in_search is False
    assert month_0.use_formatting_in_sort is False
    assert month_0.name == 'default'
    assert month_0.part_names == ['fullmonth']
    assert month_0.has_part_names is True
    assert f'{type(month_0.fullmonth).__module__}.{type(month_0.fullmonth).__qualname__}' == 'pycallnumber.units.dates.parts.AbbreviatedMonth'
    assert module_0.Month.short_description == 'a numeric or alphabetic month'
    assert module_0.Month.category == 'month'
    assert module_0.Month.template.separator_type is None
    assert f'{type(module_0.Month.value).__module__}.{type(module_0.Month.value).__qualname__}' == 'builtins.property'
    none_type_0 = None
    str_2 = '\tLxf6V_-dFF'
    var_0 = month_0.__ne__(str_0)
    str_3 = 'short_description'
    str_4 = '4WYo|egCnP]'
    dict_0 = {str_2: var_0, str_3: str_0, str_4: none_type_0, str_2: str_2}
    module_0.AlphaMonth(month_0, none_type_0, **dict_0)

def test_case_3():
    str_0 = '3'
    day_0 = module_0.Day(str_0, str_0)
    assert f'{type(day_0).__module__}.{type(day_0).__qualname__}' == 'pycallnumber.units.dates.parts.Day'
    assert f'{type(day_0.options).__module__}.{type(day_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(day_0.options) == 7
    assert day_0.definition is None
    assert day_0.is_separator is False
    assert day_0.display_case == ''
    assert day_0.search_case == 'lower'
    assert day_0.sort_case == 'lower'
    assert day_0.use_formatting_in_search is False
    assert day_0.use_formatting_in_sort is False
    assert day_0.name == '3'
    assert day_0.part_names == ['wholenumber', 'suffix']
    assert day_0.has_part_names is True
    assert f'{type(day_0.wholenumber).__module__}.{type(day_0.wholenumber).__qualname__}' == 'pycallnumber.units.simple.NumericDay'
    assert day_0.suffix is None
    assert module_0.Day.short_description == 'cardinal or ordinal number, from 1 to 31, representing the day of the month'
    assert module_0.Day.category == 'day'
    assert module_0.Day.template.separator_type is None
    assert len(module_0.Day.template.groups) == 2
    assert len(module_0.Day.template.groupings) == 2
    assert f'{type(module_0.Day.value).__module__}.{type(module_0.Day.value).__qualname__}' == 'builtins.property'
    var_0 = day_0.__contains__(day_0)
    assert var_0 is True