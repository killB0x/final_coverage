# Automatically generated by Pynguin.
import pytest
import pycallnumber.utils as module_0
import tokenize as module_1
import inspect as module_2
import token as module_3
import ast as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.memoize(none_type_0)

def test_case_1():
    bool_0 = True
    var_0 = module_0.min_max_to_pattern(bool_0, bool_0)
    assert var_0 == ''
    var_1 = bool_0.__pos__()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.min_max_to_text(none_type_0, none_type_0, none_type_0)
    assert var_0 == 'any number'
    var_1 = module_0.add_label_to_pattern(none_type_0, var_0)
    assert var_1 == '(?P<None>any number)'
    var_2 = module_0.get_terminal_size(default_height=none_type_0)
    var_0.cmp_key(none_type_0, var_2)

def test_case_3():
    bool_0 = False
    var_0 = module_0.min_max_to_text(bool_0, bool_0, bool_0)
    assert var_0 == 'False'
    var_1 = module_0.min_max_to_text(var_0, bool_0)
    assert var_1 == 'False to False'

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.any()
    module_0.create_unit(var_0, var_0, var_0, is_separator=var_0)

def test_case_5():
    var_0 = module_0.get_terminal_size()

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.pretty(none_type_0)
    assert var_0 == 'None'
    list_0 = [var_0, none_type_0, var_0]
    var_1 = module_2.isbuiltin(list_0)
    module_0.create_unit(list_0, list_0, var_1)

def test_case_7():
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0 = comparable_object_mixin_0.__ge__(comparable_object_mixin_0)
    assert var_0 is True
    var_1 = comparable_object_mixin_0.__gt__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_0 == '<pos infinity>'
    var_1 = module_0.pretty(infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = module_0.min_max_to_pattern(infinity_0, infinity_0)
    assert var_2 == '{<pos infinity>}'
    var_3 = infinity_0.__neg__()
    assert var_3.sign == 'neg'
    var_0.__setitem__(var_2, var_2)

@pytest.mark.xfail(strict=True)
def test_case_9():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__hash__()
    var_1 = module_0.min_max_to_text(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = module_0.min_max_to_pattern(var_0, var_1)
    var_1.__sub__(infinity_0)

def test_case_10():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_0.convert_re_groups_to_noncapturing(none_type_0)

def test_case_12():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = module_0.add_label_to_pattern(infinity_0, infinity_0)
    assert var_0 == '(?P<<pos infinity>><pos infinity>)'

def test_case_13():
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0 = comparable_object_mixin_0.__ge__(comparable_object_mixin_0)
    assert var_0 is True

def test_case_14():
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    none_type_0 = None
    var_0 = comparable_object_mixin_0.__gt__(comparable_object_mixin_0)
    assert var_0 is False
    var_1 = comparable_object_mixin_0.__le__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0 = comparable_object_mixin_0.__hash__()
    var_1 = comparable_object_mixin_0.__le__(comparable_object_mixin_0)
    assert var_1 is True
    none_type_0 = None
    var_2 = comparable_object_mixin_0.__lt__(none_type_0)
    var_2.keys()

@pytest.mark.xfail(strict=True)
def test_case_16():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = module_3.ISEOF(infinity_0)
    assert var_0 is False
    var_1 = module_0.min_max_to_text(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_2 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_2 == '<pos infinity>'
    var_3 = comparable_object_mixin_0.__lt__(comparable_object_mixin_0)
    assert var_3 is False
    var_4 = comparable_object_mixin_0.cmp_key(var_3, var_2)
    var_5 = module_0.min_max_to_text(var_1, var_1, comparable_object_mixin_0)
    assert var_5 == '<pos infinity>'
    var_6 = module_0.pretty(var_0)
    assert var_6 == 'False'
    var_7 = module_0.min_max_to_pattern(infinity_0, var_5)
    assert var_7 == '{<pos infinity>,<pos infinity>}'
    var_8 = comparable_object_mixin_0.__gt__(var_5)
    module_0.memoize(var_5)

def test_case_17():
    bool_0 = False
    var_0 = module_0.min_max_to_pattern(bool_0, bool_0)
    assert var_0 == '{False}'
    var_1 = module_0.get_terminal_size()
    var_2 = var_1.__contains__(var_0)
    var_3 = var_1.__ge__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_18():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_0 == '<pos infinity>'
    var_1 = module_0.pretty(infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = module_0.min_max_to_pattern(infinity_0, infinity_0)
    assert var_2 == '{<pos infinity>}'
    var_3 = infinity_0.__neg__()
    assert var_3.sign == 'neg'
    var_4 = var_2.__rmod__(infinity_0)
    none_type_0 = None
    module_0.load_class(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_0 == '<pos infinity>'
    module_0.pretty(comparable_object_mixin_0, infinity_0, infinity_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_1 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = module_0.pretty(infinity_0)
    assert var_2 == '<pos infinity>'
    var_3 = module_0.min_max_to_pattern(infinity_0, infinity_0)
    assert var_3 == '{<pos infinity>}'
    var_4 = infinity_0.__neg__()
    assert var_4.sign == 'neg'
    var_5 = var_3.__add__(var_1)
    assert var_5 == '{<pos infinity>}<pos infinity>'
    var_6 = module_4.iter_child_nodes(var_3)
    var_7 = var_4.__le__(var_6)
    assert var_7 is True
    module_0.memoize(var_5)

@pytest.mark.xfail(strict=True)
def test_case_21():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_0 == '<pos infinity>'
    var_1 = infinity_0.__repr__()
    assert var_1 == '<pos infinity>'
    var_2 = infinity_0.__ge__(infinity_0)
    assert var_2 is True
    var_3 = module_0.min_max_to_pattern(var_2, var_0)
    assert var_3 == '{True,<pos infinity>}'
    module_0.memoize(var_3)

@pytest.mark.xfail(strict=True)
def test_case_22():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    none_type_0 = None
    var_0 = module_0.min_max_to_text(none_type_0, infinity_0)
    assert var_0 == '<pos infinity> or fewer'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_0.cmp_key(infinity_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    var_1 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = module_0.min_max_to_text(var_0, var_0)
    assert var_2 == 'True'
    var_3 = module_0.pretty(infinity_0)
    assert var_3 == '<pos infinity>'
    var_4 = module_0.min_max_to_pattern(infinity_0, infinity_0)
    assert var_4 == '{<pos infinity>}'
    var_5 = infinity_0.__neg__()
    assert var_5.sign == 'neg'
    var_6 = var_4.__add__(var_1)
    assert var_6 == '{<pos infinity>}<pos infinity>'
    var_7 = var_5.__neg__()
    assert var_7.sign == 'pos'
    module_0.create_unit(var_3, var_1, var_6)

@pytest.mark.xfail(strict=True)
def test_case_24():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    none_type_0 = None
    var_0 = module_0.min_max_to_pattern(infinity_0, none_type_0)
    assert var_0 == '{<pos infinity>,}'
    var_1 = module_0.pretty(infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = var_0.__eq__(none_type_0)
    var_0.visit_Compare(var_0)

def test_case_25():
    dict_0 = {}
    var_0 = module_0.create_unit(dict_0, dict_0, dict_0, is_separator=dict_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    precedence_0 = module_4._Precedence.CMP
    var_0 = module_0.min_max_to_text(precedence_0, precedence_0, precedence_0)
    assert var_0 == '7'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_1 = comparable_object_mixin_0.__lt__(precedence_0)
    var_2 = module_0.add_label_to_pattern(comparable_object_mixin_0, precedence_0)
    none_type_0 = None
    var_3 = module_0.min_max_to_text(var_1, none_type_0, comparable_object_mixin_0)
    assert var_3 == 'NotImplemented or more'
    var_4 = var_3.__hash__()
    assert var_4 == 1507227871592808431
    var_5 = module_0.pretty(var_0)
    assert var_5 == '7'
    module_0.create_unit(comparable_object_mixin_0, var_3, var_1, var_3, var_5)

def test_case_27():
    none_type_0 = None
    var_0 = module_0.get_terminal_size(default_height=none_type_0)
    var_1 = module_0.list_to_text(var_0)
    assert var_1 == '100 or None'

@pytest.mark.xfail(strict=True)
def test_case_28():
    set_0 = set()
    module_0.list_to_text(set_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_1 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = module_2.isroutine(var_1)
    var_3 = module_0.min_max_to_text(var_2, var_2)
    assert var_3 == 'False'
    var_4 = module_0.pretty(infinity_0, var_0)
    assert var_4 == '<\np\no\ns\ni\nn\nf\ni\nn\ni\nt\ny\n>'
    module_0.min_max_to_pattern(var_3, var_2)

@pytest.mark.xfail(strict=True)
def test_case_30():
    var_0 = module_2.currentframe()
    var_1 = var_0.__eq__(var_0)
    var_2 = module_0.min_max_to_pattern(var_1, var_1)
    assert var_2 == ''
    precedence_0 = module_4._Precedence.YIELD
    var_3 = module_0.add_label_to_pattern(var_2, var_0)
    var_4 = module_0.create_unit(var_2, var_2, var_2)
    var_5 = var_0.__ge__(var_0)
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_6 = module_0.add_label_to_pattern(var_5, var_0)
    var_7 = module_0.create_unit(var_4, var_2, var_6)
    var_8 = module_0.min_max_to_text(var_2, var_3)
    var_9 = comparable_object_mixin_0.__lt__(var_6)
    var_10 = var_6.__hash__()
    var_11 = module_0.pretty(var_3, indent_level=var_1, tab_width=precedence_0)
    module_0.memoize(precedence_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    var_1 = module_0.min_max_to_text(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_2 = comparable_object_mixin_0.cmp_key(comparable_object_mixin_0, comparable_object_mixin_0)
    var_3 = module_2.ismethod(var_2)
    var_4 = module_0.min_max_to_text(var_1, infinity_0, var_3)
    assert var_4 == '<pos infinity> to <pos infinity>'
    var_5 = module_0.pretty(var_3, var_3)
    assert var_5 == 'False'
    module_0.min_max_to_pattern(var_1, comparable_object_mixin_0)

@pytest.mark.xfail(strict=True)
def test_case_32():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    var_1 = module_0.min_max_to_text(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_2 = comparable_object_mixin_0.cmp_key(var_1, comparable_object_mixin_0)
    var_3 = module_2.isroutine(var_2)
    var_4 = module_0.min_max_to_text(var_0, comparable_object_mixin_0, var_1)
    var_5 = module_0.pretty(comparable_object_mixin_0, var_3, var_3)
    var_6 = module_0.min_max_to_pattern(var_3, var_4)
    var_3.visit_Compare(var_3)

@pytest.mark.xfail(strict=True)
def test_case_33():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    var_1 = module_0.min_max_to_text(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    var_2 = infinity_0.cmp_key(infinity_0, infinity_0)
    assert var_2 == '<pos infinity>'
    var_3 = module_2.isroutine(var_2)
    var_4 = module_0.pretty(var_0, indent_level=var_3, tab_width=var_0)
    assert var_4 == 'True'
    none_type_0 = None
    var_5 = module_0.min_max_to_pattern(var_3, none_type_0)
    assert var_5 == '*'
    var_6 = var_5.__gt__(var_3)
    module_0.min_max_to_pattern(var_2, var_1)

@pytest.mark.xfail(strict=True)
def test_case_34():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    var_1 = module_0.min_max_to_text(infinity_0, infinity_0)
    assert var_1 == '<pos infinity>'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_2 = comparable_object_mixin_0.cmp_key(var_1, var_0)
    var_3 = module_2.isroutine(var_0)
    none_type_0 = None
    var_4 = module_0.min_max_to_text(none_type_0, var_0)
    assert var_4 == 'True or fewer'
    var_5 = module_0.pretty(var_0)
    assert var_5 == 'True'
    var_6 = module_0.min_max_to_pattern(var_0, none_type_0)
    assert var_6 == '+'
    var_7 = var_6.__ge__(var_2)
    assert var_7 is False
    var_5.partition(var_7)

@pytest.mark.xfail(strict=True)
def test_case_35():
    infinity_0 = module_0.Infinity()
    assert infinity_0.sign == 'pos'
    var_0 = infinity_0.__ge__(infinity_0)
    assert var_0 is True
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_1 = comparable_object_mixin_0.__ne__(infinity_0)
    assert var_1 is True
    var_2 = module_2.isroutine(var_1)
    var_3 = module_0.min_max_to_text(var_2, var_2, comparable_object_mixin_0)
    assert var_3 == 'False'
    var_4 = module_0.pretty(var_0)
    assert var_4 == 'True'
    var_5 = module_0.min_max_to_pattern(infinity_0, var_3)
    assert var_5 == '{<pos infinity>,False}'
    var_6 = comparable_object_mixin_0.__gt__(var_3)
    var_7 = module_0.min_max_to_pattern(var_2, var_1)
    assert var_7 == '?'
    var_8 = var_2.__gt__(var_1)
    none_type_0 = None
    module_0.memoize(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_36():
    var_0 = module_2.currentframe()
    precedence_0 = module_4._Precedence.EXPR
    var_1 = module_0.min_max_to_text(precedence_0, precedence_0, precedence_0)
    assert var_1 == '8'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    var_2 = module_2.isroutine(var_1)
    var_3 = module_0.min_max_to_text(comparable_object_mixin_0, var_2)
    var_4 = module_0.pretty(var_3, indent_level=precedence_0)
    module_0.min_max_to_pattern(var_1, precedence_0)

def test_case_37():
    precedence_0 = module_4._Precedence.AND
    var_0 = module_0.min_max_to_text(precedence_0, precedence_0, precedence_0)
    assert var_0 == '5'
    var_1 = module_0.pretty(var_0)
    assert var_1 == '5'
    var_2 = module_0.list_to_text(var_0)
    assert var_2 == '5'

@pytest.mark.xfail(strict=True)
def test_case_38():
    var_0 = module_2.currentframe()
    var_1 = var_0.__eq__(var_0)
    precedence_0 = module_4._Precedence.YIELD
    var_2 = var_0.__ge__(var_0)
    var_3 = module_0.min_max_to_text(precedence_0, precedence_0, precedence_0)
    assert var_3 == '2'
    comparable_object_mixin_0 = module_0.ComparableObjectMixin()
    module_0 = module_4.Module(*var_3)
    assert f'{type(module_0).__module__}.{type(module_0).__qualname__}' == 'ast.Module'
    assert module_0.body == '2'
    var_4 = module_0.add_label_to_pattern(comparable_object_mixin_0, precedence_0)
    var_5 = module_0.add_label_to_pattern(var_4, var_1)
    var_6 = module_0.min_max_to_text(var_4, var_4, precedence_0)
    var_7 = var_2.__hash__()
    var_8 = module_2.getdoc(var_6)
    var_9 = module_0.pretty(var_8, tab_width=var_1)
    assert var_9 == "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
    var_10 = module_0.min_max_to_pattern(var_1, var_5)
    none_type_0 = None
    module_0.create_unit(module_0, none_type_0, var_2)

def test_case_39():
    var_0 = module_4._Precedence.CMP
    var_1 = var_0.__eq__(var_0)
    var_2 = module_0.min_max_to_pattern(var_1, var_1)
    assert var_2 == ''
    var_3 = module_0.create_unit(var_2, var_2, var_2)
    var_4 = module_0.add_label_to_pattern(var_2, var_0)
    assert var_4 == '(?P<>7)'
    var_5 = var_3.__lt__(var_2)
    var_6 = var_2.__hash__()
    var_7 = module_2.formatannotationrelativeto(var_3)
    var_8 = module_0.memoize(var_7)