# Automatically generated by Pynguin.
import pytest
import pycallnumber.units.dates.datestring as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    module_0.DateString(dict_0)

def test_case_1():
    str_0 = 'november'
    date_string_0 = module_0.DateString(str_0)
    assert f'{type(date_string_0).__module__}.{type(date_string_0).__qualname__}' == 'pycallnumber.units.dates.datestring.DateString'
    assert f'{type(date_string_0.options).__module__}.{type(date_string_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(date_string_0.options) == 7
    assert date_string_0.definition == 'any string that represents a date, in a non-specific format'
    assert date_string_0.is_separator is False
    assert date_string_0.display_case == ''
    assert date_string_0.search_case == 'lower'
    assert date_string_0.sort_case == 'lower'
    assert date_string_0.use_formatting_in_search is False
    assert date_string_0.use_formatting_in_sort is False
    assert date_string_0.name == 'default'
    assert date_string_0.part_names == ['date']
    assert date_string_0.has_part_names is True
    assert f'{type(date_string_0.date).__module__}.{type(date_string_0.date).__qualname__}' == 'pycallnumber.units.dates.parts.AlphaMonthLong'
    assert module_0.DateString.definition == 'any string that represents a date, in a non-specific format'
    assert len(module_0.DateString.template.groups) == 1
    assert len(module_0.DateString.template.groupings) == 1
    var_0 = date_string_0.for_sort()
    assert var_0 == '0000001100'