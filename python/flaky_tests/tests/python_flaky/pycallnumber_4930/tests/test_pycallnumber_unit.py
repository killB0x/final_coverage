# Automatically generated by Pynguin.
import pytest
import pycallnumber.unit as module_0
import tokenize as module_1
import pycallnumber.utils as module_2
import inspect as module_3

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.CompoundUnit(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.any()
    var_0.for_print()

def test_case_2():
    str_0 = 'JYLZD+A6(0'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = 'w:b6U_|)L&O\x0c'
    module_0.MultiUnitWrapper(str_0)

def test_case_4():
    str_0 = ''
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert compound_unit_0.default is None
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'

def test_case_5():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'

def test_case_6():
    str_0 = 'Ujcme$$GVO&&BL<T71mS'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = compound_unit_0.__contains__(str_0)
    assert var_0 is True

def test_case_7():
    dict_0 = {}
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(dict_0)
    assert f'{type(multi_unit_wrapper_0).__module__}.{type(multi_unit_wrapper_0).__qualname__}' == 'pycallnumber.unit.MultiUnitWrapper'
    assert len(multi_unit_wrapper_0) == 0
    var_0 = multi_unit_wrapper_0.__contains__(dict_0)
    assert var_0 is False

def test_case_8():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = compound_unit_0.__gt__(compound_unit_0)
    assert var_0 is False

def test_case_9():
    dict_0 = {}
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(dict_0)
    assert f'{type(multi_unit_wrapper_0).__module__}.{type(multi_unit_wrapper_0).__qualname__}' == 'pycallnumber.unit.MultiUnitWrapper'
    assert len(multi_unit_wrapper_0) == 0
    var_0 = multi_unit_wrapper_0.__contains__(multi_unit_wrapper_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = compound_unit_0.__repr__()
    assert var_0 == "<CompoundUnit '\t'>"
    str_1 = 'JYLZD+A6(0'
    var_1 = var_0.__ne__(str_1)
    module_0.CompoundUnit(compound_unit_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = compound_unit_0.__ne__(str_0)
    var_1 = compound_unit_0.for_search()
    assert var_1 == '\t'
    var_2 = compound_unit_0.__repr__()
    assert var_2 == "<CompoundUnit '\t'>"
    var_3 = compound_unit_0.__contains__(var_0)
    assert var_3 is False
    var_4 = compound_unit_0.__contains__(compound_unit_0)
    assert var_4 is True
    module_2.load_class(var_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = ',Szo?j=o5_\nkQkiZa'
    module_0.CompoundUnit(str_0)

def test_case_13():
    str_0 = ''
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert compound_unit_0.default is None
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = compound_unit_0.__contains__(str_0)
    assert var_0 is True

def test_case_14():
    dict_0 = {}
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(dict_0)
    assert f'{type(multi_unit_wrapper_0).__module__}.{type(multi_unit_wrapper_0).__qualname__}' == 'pycallnumber.unit.MultiUnitWrapper'
    assert len(multi_unit_wrapper_0) == 0

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '\x0b'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = module_3.cleandoc(str_0)
    var_1 = compound_unit_0.cmp_key(compound_unit_0, var_0)
    assert var_1 == '\x0b'
    simple_unit_0 = module_0.SimpleUnit(str_0)
    assert simple_unit_0.definition is None
    assert simple_unit_0.name == ''
    assert module_0.SimpleUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.SimpleUnit.is_simple is True
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(var_0)
    assert len(multi_unit_wrapper_0) == 0
    var_2 = compound_unit_0.__contains__(simple_unit_0)
    assert var_2 is True
    var_3 = compound_unit_0.__contains__(str_0)
    assert var_3 is True
    var_4 = multi_unit_wrapper_0.__len__()
    assert var_4 == 0
    compound_unit_0.__contains__(multi_unit_wrapper_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = module_3.cleandoc(str_0)
    simple_unit_0 = module_0.SimpleUnit(str_0)
    assert simple_unit_0.definition is None
    assert simple_unit_0.name == ''
    assert module_0.SimpleUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.SimpleUnit.is_simple is True
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(var_0)
    assert len(multi_unit_wrapper_0) == 0
    var_1 = compound_unit_0.__contains__(simple_unit_0)
    assert var_1 is True
    compound_unit_0.__contains__(multi_unit_wrapper_0)

def test_case_17():
    dict_0 = {}
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(dict_0)
    assert f'{type(multi_unit_wrapper_0).__module__}.{type(multi_unit_wrapper_0).__qualname__}' == 'pycallnumber.unit.MultiUnitWrapper'
    assert len(multi_unit_wrapper_0) == 0
    multi_unit_wrapper_1 = module_0.MultiUnitWrapper(multi_unit_wrapper_0)
    var_0 = multi_unit_wrapper_1.__contains__(multi_unit_wrapper_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = module_3.cleandoc(str_0)
    dict_0 = {}
    var_1 = compound_unit_0.__repr__()
    assert var_1 == "<CompoundUnit '\t'>"
    var_2 = var_1.isalpha()
    assert var_2 is False
    compound_unit_1 = module_0.CompoundUnit(var_1, dict_0)
    assert compound_unit_1.definition is None
    assert compound_unit_1.part_names == ['default']
    assert f'{type(compound_unit_1.default).__module__}.{type(compound_unit_1.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    compound_unit_0.__contains__(compound_unit_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'E4GhmQKANm<WpwzGY\nu'
    module_0.SimpleUnit(str_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '\t'
    compound_unit_0 = module_0.CompoundUnit(str_0)
    assert f'{type(compound_unit_0).__module__}.{type(compound_unit_0).__qualname__}' == 'pycallnumber.unit.CompoundUnit'
    assert f'{type(compound_unit_0.options).__module__}.{type(compound_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(compound_unit_0.options) == 2
    assert compound_unit_0.definition is None
    assert compound_unit_0.is_separator is False
    assert compound_unit_0.name == 'default'
    assert compound_unit_0.part_names == ['default']
    assert compound_unit_0.has_part_names is True
    assert f'{type(compound_unit_0.default).__module__}.{type(compound_unit_0.default).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(module_0.CompoundUnit.template).__module__}.{type(module_0.CompoundUnit.template).__qualname__}' == 'pycallnumber.template.CompoundTemplate'
    assert len(module_0.CompoundUnit.template.options) == 4
    assert module_0.CompoundUnit.template.separator_type is None
    assert f'{type(module_0.CompoundUnit.template.groups).__module__}.{type(module_0.CompoundUnit.template.groups).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groups) == 1
    assert f'{type(module_0.CompoundUnit.template.groupings).__module__}.{type(module_0.CompoundUnit.template.groupings).__qualname__}' == 'builtins.list'
    assert len(module_0.CompoundUnit.template.groupings) == 1
    assert module_0.CompoundUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.CompoundUnit.sort_break == '!'
    var_0 = module_3.cleandoc(str_0)
    simple_unit_0 = module_0.SimpleUnit(var_0)
    assert simple_unit_0.definition is None
    assert simple_unit_0.name == ''
    assert module_0.SimpleUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.SimpleUnit.is_simple is True
    var_1 = compound_unit_0.__repr__()
    assert var_1 == "<CompoundUnit '\t'>"
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(var_0)
    assert len(multi_unit_wrapper_0) == 0
    compound_unit_0.__contains__(simple_unit_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '\t'
    simple_unit_0 = module_0.SimpleUnit(str_0)
    assert f'{type(simple_unit_0).__module__}.{type(simple_unit_0).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert f'{type(simple_unit_0.options).__module__}.{type(simple_unit_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_unit_0.options) == 2
    assert simple_unit_0.definition is None
    assert simple_unit_0.is_separator is False
    assert simple_unit_0.name == ''
    assert f'{type(module_0.SimpleUnit.template).__module__}.{type(module_0.SimpleUnit.template).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert len(module_0.SimpleUnit.template.options) == 11
    assert module_0.SimpleUnit.template.min_length == 1
    assert module_0.SimpleUnit.template.max_length == 1
    assert module_0.SimpleUnit.template.base_pattern == '.*'
    assert module_0.SimpleUnit.template.base_description is None
    assert module_0.SimpleUnit.template.base_description_plural is None
    assert module_0.SimpleUnit.template.pre_pattern == ''
    assert module_0.SimpleUnit.template.pre_description is None
    assert module_0.SimpleUnit.template.post_pattern == ''
    assert module_0.SimpleUnit.template.post_description is None
    assert module_0.SimpleUnit.options_defaults == {'definition': None, 'is_separator': False}
    assert module_0.SimpleUnit.is_simple is True
    list_0 = [simple_unit_0]
    multi_unit_wrapper_0 = module_0.MultiUnitWrapper(list_0)
    assert f'{type(multi_unit_wrapper_0).__module__}.{type(multi_unit_wrapper_0).__qualname__}' == 'pycallnumber.unit.MultiUnitWrapper'
    assert len(multi_unit_wrapper_0) == 1
    var_0 = multi_unit_wrapper_0.__repr__()
    assert var_0 == "<MultiUnitWrapper '\t'>"
    var_1 = str_0.isalpha()
    multi_unit_wrapper_0.visit_Ellipsis(var_1)