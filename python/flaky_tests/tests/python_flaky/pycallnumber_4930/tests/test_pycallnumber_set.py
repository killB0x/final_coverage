# Automatically generated by Pynguin.
import pytest
import pycallnumber.set as module_0
import inspect as module_1
import pycallnumber.utils as module_2
import pycallnumber.exceptions as module_3
import token as module_4
import re as module_5
import tokenize as module_6

def test_case_0():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = module_1.formatannotation(range_set_0)
    assert var_0 == '<RangeSet >'

@pytest.mark.xfail(strict=True)
def test_case_1():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    module_1.stack(range_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    module_2.pretty(range_0, range_0)

def test_case_3():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__sub__(range_0)

def test_case_4():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.issuperset(range_0)
    assert var_0 is True

def test_case_5():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__lt__(range_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_6():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.extendshigher(range_set_0)

def test_case_7():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__or__(range_0)

def test_case_8():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'

def test_case_9():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(module_3.BadRange):
        module_0.Range(range_0, range_0)

def test_case_10():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__and__(range_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'

def test_case_11():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__xor__(range_0)

def test_case_12():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.difference()

def test_case_13():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'

def test_case_14():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__gt__(range_set_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_15():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.__and__(range_0)

def test_case_16():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__sub__(range_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_0.start is None
    assert var_0.end is None
    assert var_0.unittype is None

def test_case_17():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.overlaps(range_0)
    assert var_0 is False

def test_case_18():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.sort(none_type_0, none_type_0)

def test_case_19():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.join(none_type_0)

def test_case_20():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        module_0.subtract(range_0)

def test_case_21():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = module_2.min_max_to_text(range_0, range_0)
    assert var_0 == "<Infinity Range '<neg infinity>' to '<pos infinity>'>"

def test_case_22():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__gt__(range_0)
    assert var_0 is False
    var_1 = range_0.copy()

@pytest.mark.xfail(strict=True)
def test_case_23():
    dict_0 = {}
    module_0.subtract(dict_0)

def test_case_24():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__gt__(range_0)
    assert var_0 is False

def test_case_25():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__and__(range_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_0.start is None
    assert var_0.end is None
    assert var_0.unittype is None

def test_case_26():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        module_1.Parameter(range_0, range_0, default=range_0, annotation=range_0)

@pytest.mark.xfail(strict=True)
def test_case_27():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    none_type_0 = None
    range_0.__and__(none_type_0)

def test_case_28():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.intersection()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'

def test_case_29():
    str_0 = '?Cm0>X'
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.__sub__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    module_4.ISNONTERMINAL(range_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.issuperset(none_type_0)

def test_case_32():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.issequential(range_0)
    assert var_0 is False
    var_1 = range_0.__eq__(range_0)
    assert var_1 is True

@pytest.mark.xfail(strict=True)
def test_case_33():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    non_discrete_set_0.extendshigher(non_discrete_set_0)

@pytest.mark.xfail(strict=True)
def test_case_34():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.isbefore(range_set_0)

def test_case_35():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_36():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__contains__(range_set_0)
    assert var_0 is True
    range_set_0.__sub__(var_0)

def test_case_37():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.intersect(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_38():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__gt__(range_set_0)
    assert var_0 is False
    var_1 = range_set_0.union()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_1.start is None
    assert var_1.end is None
    assert var_1.unittype is None
    range_set_0.extendslower(var_1)

def test_case_39():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = range_0.__contains__(none_type_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_40():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    none_type_0 = None
    range_0.__or__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_41():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    module_4.ISTERMINAL(range_0)

@pytest.mark.xfail(strict=True)
def test_case_42():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.intersection()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    var_1 = range_0.difference()
    list_0 = []
    var_2 = list_0.__contains__(var_1)
    var_3 = var_0.issequential(range_0)
    assert var_3 is False
    list_1 = [var_3]
    range_0.union(*list_1)

def test_case_43():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_44():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__or__(range_0)
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_1 = range_set_0.intersection()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_1.start is None
    assert var_1.end is None
    assert var_1.unittype is None
    var_2 = var_1.issequential(range_set_0)
    assert var_2 is True
    var_1.__sub__(range_0)

def test_case_45():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.intersection()

@pytest.mark.xfail(strict=True)
def test_case_46():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_0.overlaps(list_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    var_0 = range_0.__or__(range_0)
    range_set_0 = module_0.RangeSet(*var_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.overlaps(non_discrete_set_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.intersection()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    non_discrete_set_0.issuperset(var_0)

@pytest.mark.xfail(strict=True)
def test_case_49():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    non_discrete_set_0.issequential(non_discrete_set_0)

def test_case_50():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = range_0.isafter(none_type_0)
    assert var_0 is False
    with pytest.raises(module_3.BadRange):
        module_0.Range(end=range_0)

@pytest.mark.xfail(strict=True)
def test_case_51():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    list_0 = [non_discrete_set_0, non_discrete_set_0, non_discrete_set_0]
    module_0.intersect(list_0)

def test_case_52():
    range_0 = module_5.purge()
    list_0 = [range_0]
    with pytest.raises(module_3.RangeSetError):
        module_0.RangeSet(*list_0)

def test_case_53():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    var_0 = range_0.difference(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_54():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__contains__(range_0)
    assert var_0 is True
    range_0.__xor__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_55():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    var_0 = range_0.difference(*list_0)
    range_0.isdisjoint(list_0)

def test_case_56():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__xor__(range_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_0.start is None
    assert var_0.end is None
    assert var_0.unittype is None

def test_case_57():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.__xor__(non_discrete_set_0)

def test_case_58():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.__or__(range_0)
    list_0 = [var_0, range_0, range_0, range_0]
    with pytest.raises(TypeError):
        range_0.difference(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__gt__(range_set_0)
    assert var_0 is False
    range_set_0.isafter(range_set_0)

@pytest.mark.xfail(strict=True)
def test_case_60():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0, range_0, range_0]
    var_0 = range_0.__lt__(range_0)
    assert var_0 is False
    range_0.extendslower(list_0)

def test_case_61():
    none_type_0 = None
    var_0 = module_1.trace()
    var_1 = module_0.intersect(var_0)
    var_2 = var_1.__repr__()
    var_3 = module_1.indentsize(var_2)
    var_4 = var_3.__and__(none_type_0)
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_5 = range_0.__contains__(range_0)
    assert var_5 is True

def test_case_62():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0, range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.isbefore(list_0)
    assert var_0 is False
    var_1 = range_set_0.__and__(range_set_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(var_1.start).__module__}.{type(var_1.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_1.end).__module__}.{type(var_1.end).__qualname__}' == 'pycallnumber.utils.Infinity'

def test_case_63():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.overlaps(range_set_0)
    assert var_0 is True

def test_case_64():
    dict_0 = {}
    non_discrete_set_0 = module_0.NonDiscreteSet(**dict_0)
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    non_discrete_set_1 = module_0.NonDiscreteSet()
    with pytest.raises(NotImplementedError):
        non_discrete_set_1.__eq__(non_discrete_set_1)

def test_case_65():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.overlaps(range_set_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_66():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.intersection()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    non_discrete_set_0.isdisjoint(range_0)

def test_case_67():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = module_1.getmembers(range_0)
    var_1 = var_0.__contains__(range_0)
    assert var_1 is False
    var_2 = var_0.__len__()
    assert var_2 == 54

@pytest.mark.xfail(strict=True)
def test_case_68():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.__or__(range_0)

def test_case_69():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0]
    var_0 = range_0.intersection(*list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'

def test_case_70():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        range_set_0.union(*list_0)

def test_case_71():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__sub__(range_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_0.start is None
    assert var_0.end is None
    assert var_0.unittype is None

def test_case_72():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(module_3.BadRange):
        module_0.Range(end=range_0)

@pytest.mark.xfail(strict=True)
def test_case_73():
    range_0 = module_5.purge()
    list_0 = module_6.group()
    module_0.RangeSet(*list_0)

def test_case_74():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__and__(range_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(var_0.start).__module__}.{type(var_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_0.end).__module__}.{type(var_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'

def test_case_75():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = module_4.ISEOF(range_0)
    assert var_0 is False
    list_0 = [range_0, range_0, var_0]
    with pytest.raises(TypeError):
        range_0.intersection(*list_0)

def test_case_76():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(module_3.BadRange):
        module_0.Range(range_set_0)

@pytest.mark.xfail(strict=True)
def test_case_77():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.difference()
    range_set_0 = module_0.RangeSet(*var_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_1 = range_set_0.__and__(range_set_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(var_1.start).__module__}.{type(var_1.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_1.end).__module__}.{type(var_1.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    non_discrete_set_0.__le__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_78():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_0.__xor__(range_set_0)

def test_case_79():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.union(*list_0)
    var_1 = range_set_0.copy()
    assert f'{type(var_1.start).__module__}.{type(var_1.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_1.end).__module__}.{type(var_1.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    var_2 = var_1.__xor__(var_1)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_2.start is None
    assert var_2.end is None
    assert var_2.unittype is None
    var_3 = var_1.__sub__(var_2)
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(var_3.start).__module__}.{type(var_3.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_3.end).__module__}.{type(var_3.end).__qualname__}' == 'pycallnumber.utils.Infinity'

@pytest.mark.xfail(strict=True)
def test_case_80():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.__xor__(range_0)

def test_case_81():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.overlaps(range_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_82():
    range_set_0 = module_0.RangeSet()
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_0.start is None
    assert range_set_0.end is None
    assert range_set_0.unittype is None
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    module_2.min_max_to_pattern(range_set_0, range_set_0)

@pytest.mark.xfail(strict=True)
def test_case_83():
    str_0 = '3uwLC%P6'
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    module_0.join(str_0)

@pytest.mark.xfail(strict=True)
def test_case_84():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.overlaps(list_0)

def test_case_85():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.__or__(none_type_0)

def test_case_86():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__eq__(range_set_0)
    assert var_0 is True

def test_case_87():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.difference()
    range_set_0 = module_0.RangeSet(*var_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    with pytest.raises(TypeError):
        range_set_0.intersection(*var_0)

def test_case_88():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0]
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.__and__(list_0)

def test_case_89():
    none_type_0 = None
    var_0 = module_2.min_max_to_text(none_type_0, none_type_0)
    with pytest.raises(TypeError):
        module_0.sort(var_0)

def test_case_90():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    non_discrete_set_1 = module_0.NonDiscreteSet()
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    none_type_0 = None
    list_0 = [none_type_0]
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.difference(*list_0)

def test_case_91():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0, range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = module_1.getmembers(range_set_0)
    var_1 = range_set_0.difference()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(var_1.start).__module__}.{type(var_1.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(var_1.end).__module__}.{type(var_1.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    range_1 = module_0.Range()

@pytest.mark.xfail(strict=True)
def test_case_92():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_0.difference()
    range_set_0 = module_0.RangeSet(*var_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_0.difference(*var_0)

def test_case_93():
    non_discrete_set_0 = module_0.NonDiscreteSet()
    assert f'{type(module_0.NonDiscreteSet.iscontiguous).__module__}.{type(module_0.NonDiscreteSet.iscontiguous).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.NonDiscreteSet.full_typename).__module__}.{type(module_0.NonDiscreteSet.full_typename).__qualname__}' == 'builtins.property'
    with pytest.raises(NotImplementedError):
        non_discrete_set_0.union()

@pytest.mark.xfail(strict=True)
def test_case_94():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0, range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    range_set_1 = module_0.RangeSet()
    assert f'{type(range_set_1).__module__}.{type(range_set_1).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert range_set_1.start is None
    assert range_set_1.end is None
    assert range_set_1.unittype is None
    none_type_0 = None
    var_0 = range_set_0.isdisjoint(range_set_1)
    assert var_0 is True
    var_1 = var_0.__ror__(range_set_0)
    var_1.__and__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_95():
    list_0 = []
    var_0 = module_0.subtract(list_0)
    var_0.difference(*list_0)

def test_case_96():
    range_0 = module_0.Range()
    assert f'{type(range_0).__module__}.{type(range_0).__qualname__}' == 'pycallnumber.set.Range'
    assert f'{type(range_0.start).__module__}.{type(range_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_0.end).__module__}.{type(range_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.Range.iscontiguous).__module__}.{type(module_0.Range.iscontiguous).__qualname__}' == 'builtins.property'
    list_0 = [range_0]
    range_set_0 = module_0.RangeSet(*list_0)
    assert f'{type(range_set_0).__module__}.{type(range_set_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert f'{type(range_set_0.start).__module__}.{type(range_set_0.start).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(range_set_0.end).__module__}.{type(range_set_0.end).__qualname__}' == 'pycallnumber.utils.Infinity'
    assert f'{type(module_0.RangeSet.ranges).__module__}.{type(module_0.RangeSet.ranges).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RangeSet.iscontiguous).__module__}.{type(module_0.RangeSet.iscontiguous).__qualname__}' == 'builtins.property'
    var_0 = range_set_0.__sub__(range_set_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'pycallnumber.set.RangeSet'
    assert var_0.start is None
    assert var_0.end is None
    assert var_0.unittype is None
    var_1 = var_0.__lt__(range_set_0)
    assert var_1 is True
    var_2 = range_set_0.__ge__(range_0)
    assert var_2 is True