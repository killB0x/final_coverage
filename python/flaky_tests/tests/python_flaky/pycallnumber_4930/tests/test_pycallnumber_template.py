# Automatically generated by Pynguin.
import pytest
import pycallnumber.template as module_0
import tokenize as module_1
import pycallnumber.exceptions as module_2
import inspect as module_3
import pycallnumber.utils as module_4

def test_case_0():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = simple_template_0.describe_long()
    assert var_0 == 'A SimpleTemplate matching a string with 1 of /.*/.'

def test_case_1():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}

@pytest.mark.xfail(strict=True)
def test_case_2():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = simple_template_0.get_regex(simple_template_0, simple_template_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 're.Pattern'
    simple_template_1 = module_0.SimpleTemplate()
    assert len(simple_template_1.options) == 11
    assert simple_template_1.short_description is None
    assert simple_template_1.long_description is None
    assert simple_template_1.base_pattern == '.*'
    assert simple_template_1.base_description is None
    assert simple_template_1.base_description_plural is None
    assert simple_template_1.pre_pattern == ''
    assert simple_template_1.pre_description is None
    assert simple_template_1.post_pattern == ''
    assert simple_template_1.post_description is None
    module_1.detect_encoding(simple_template_0)

def test_case_3():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = simple_template_0.describe_long(simple_template_0)
    assert var_0 == 'A SimpleTemplate matching a string with 1 of /.*/.\n\nThe full pattern for this template is:\n\n/(.*)/'

def test_case_4():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = simple_template_0.describe_long()
    assert var_0 == 'A SimpleTemplate matching a string with 1 of /.*/.'
    var_1 = simple_template_0.validate(var_0)
    assert var_1 is True
    with pytest.raises(module_2.SettingsError):
        module_0.CompoundTemplate()

def test_case_5():
    with pytest.raises(module_2.SettingsError):
        module_0.Grouping()

def test_case_6():
    with pytest.raises(module_2.SettingsError):
        module_0.CompoundTemplate()

@pytest.mark.xfail(strict=True)
def test_case_7():
    template_0 = module_0.Template()
    assert len(template_0.options) == 2
    assert template_0.short_description is None
    assert template_0.long_description is None
    assert module_0.Template.options_defaults == {'short_description': None, 'long_description': None}
    assert f'{type(module_0.Template.is_optional).__module__}.{type(module_0.Template.is_optional).__qualname__}' == 'builtins.property'
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    template_0.describe_short()

@pytest.mark.xfail(strict=True)
def test_case_8():
    template_0 = module_0.Template()
    assert len(template_0.options) == 2
    assert template_0.short_description is None
    assert template_0.long_description is None
    assert module_0.Template.options_defaults == {'short_description': None, 'long_description': None}
    assert f'{type(module_0.Template.is_optional).__module__}.{type(module_0.Template.is_optional).__qualname__}' == 'builtins.property'
    template_0.describe_long(template_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    template_0 = module_0.Template()
    assert len(template_0.options) == 2
    assert template_0.short_description is None
    assert template_0.long_description is None
    assert module_0.Template.options_defaults == {'short_description': None, 'long_description': None}
    assert f'{type(module_0.Template.is_optional).__module__}.{type(module_0.Template.is_optional).__qualname__}' == 'builtins.property'
    template_0.validate(template_0)

def test_case_10():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = simple_template_0.describe_short(simple_template_0)
    assert var_0 == 'a string with 1 of /.*/ -- pattern is /(.*)/'

@pytest.mark.xfail(strict=True)
def test_case_11():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = module_3.getmembers(simple_template_0)
    var_1 = module_4.add_label_to_pattern(simple_template_0, simple_template_0)
    var_1.visit_NamedExpr(simple_template_0)

def test_case_12():
    simple_template_0 = module_0.SimpleTemplate()
    assert f'{type(simple_template_0).__module__}.{type(simple_template_0).__qualname__}' == 'pycallnumber.template.SimpleTemplate'
    assert f'{type(simple_template_0.options).__module__}.{type(simple_template_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(simple_template_0.options) == 11
    assert simple_template_0.short_description is None
    assert simple_template_0.long_description is None
    assert simple_template_0.min_length == 1
    assert simple_template_0.max_length == 1
    assert simple_template_0.base_pattern == '.*'
    assert simple_template_0.base_description is None
    assert simple_template_0.base_description_plural is None
    assert simple_template_0.pre_pattern == ''
    assert simple_template_0.pre_description is None
    assert simple_template_0.post_pattern == ''
    assert simple_template_0.post_description is None
    assert module_0.SimpleTemplate.options_defaults == {'short_description': None, 'long_description': None, 'min_length': 1, 'max_length': 1, 'base_pattern': '.*', 'base_description': None, 'base_description_plural': None, 'pre_pattern': '', 'pre_description': None, 'post_pattern': '', 'post_description': None}
    var_0 = simple_template_0.describe_long(simple_template_0)
    assert var_0 == 'A SimpleTemplate matching a string with 1 of /.*/.\n\nThe full pattern for this template is:\n\n/(.*)/'
    with pytest.raises(module_2.InvalidCallNumberStringError):
        simple_template_0.validate(var_0)