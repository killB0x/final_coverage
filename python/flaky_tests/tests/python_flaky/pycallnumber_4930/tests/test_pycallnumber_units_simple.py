# Automatically generated by Pynguin.
import pytest
import pycallnumber.units.simple as module_0
import tokenize as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.Formatting(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.maybe()
    module_0.Numeric(var_0)

def test_case_2():
    var_0 = module_1.maybe()
    formatting_0 = module_0.Formatting(var_0, var_0)
    assert f'{type(formatting_0).__module__}.{type(formatting_0).__qualname__}' == 'pycallnumber.units.simple.Formatting'
    assert f'{type(formatting_0.options).__module__}.{type(formatting_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(formatting_0.options) == 4
    assert formatting_0.definition is None
    assert formatting_0.is_separator is False
    assert formatting_0.use_formatting_in_search is False
    assert formatting_0.use_formatting_in_sort is False
    assert formatting_0.name == '()?'
    assert module_0.Formatting.options_defaults == {'definition': None, 'is_separator': False, 'use_formatting_in_search': False, 'use_formatting_in_sort': False}
    assert module_0.Formatting.is_formatting is True
    assert module_0.Formatting.template.min_length == 1
    assert module_0.Formatting.template.max_length is None
    assert module_0.Formatting.template.base_pattern == '[^A-Za-z0-9]'
    assert module_0.Formatting.template.base_description == 'non-alphanumeric symbol'
    var_1 = formatting_0.cmp_key(var_0, var_0)
    assert var_1 == ''

def test_case_3():
    var_0 = module_1.maybe()
    formatting_0 = module_0.Formatting(var_0)
    assert f'{type(formatting_0).__module__}.{type(formatting_0).__qualname__}' == 'pycallnumber.units.simple.Formatting'
    assert f'{type(formatting_0.options).__module__}.{type(formatting_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(formatting_0.options) == 4
    assert formatting_0.definition is None
    assert formatting_0.is_separator is False
    assert formatting_0.use_formatting_in_search is False
    assert formatting_0.use_formatting_in_sort is False
    assert formatting_0.name == ''
    assert module_0.Formatting.options_defaults == {'definition': None, 'is_separator': False, 'use_formatting_in_search': False, 'use_formatting_in_sort': False}
    assert module_0.Formatting.is_formatting is True
    assert module_0.Formatting.template.min_length == 1
    assert module_0.Formatting.template.max_length is None
    assert module_0.Formatting.template.base_pattern == '[^A-Za-z0-9]'
    assert module_0.Formatting.template.base_description == 'non-alphanumeric symbol'
    var_1 = formatting_0.for_search()
    assert var_1 == ''