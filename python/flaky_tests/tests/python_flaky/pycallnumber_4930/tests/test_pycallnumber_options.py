# Automatically generated by Pynguin.
import pytest
import pycallnumber.options as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "'sj/0AFW:>o./k?5 `"
    module_0.Options(str_0, str_0)

def test_case_1():
    object_with_options_0 = module_0.ObjectWithOptions()
    assert f'{type(object_with_options_0).__module__}.{type(object_with_options_0).__qualname__}' == 'pycallnumber.options.ObjectWithOptions'
    assert f'{type(object_with_options_0.options).__module__}.{type(object_with_options_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(object_with_options_0.options) == 0
    assert f'{type(module_0.ObjectWithOptions.get_classopts).__module__}.{type(module_0.ObjectWithOptions.get_classopts).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ObjectWithOptions.filter_valid_useropts).__module__}.{type(module_0.ObjectWithOptions.filter_valid_useropts).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    object_with_options_0 = module_0.ObjectWithOptions()
    assert f'{type(object_with_options_0).__module__}.{type(object_with_options_0).__qualname__}' == 'pycallnumber.options.ObjectWithOptions'
    assert f'{type(object_with_options_0.options).__module__}.{type(object_with_options_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(object_with_options_0.options) == 0
    assert f'{type(module_0.ObjectWithOptions.get_classopts).__module__}.{type(module_0.ObjectWithOptions.get_classopts).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ObjectWithOptions.filter_valid_useropts).__module__}.{type(module_0.ObjectWithOptions.filter_valid_useropts).__qualname__}' == 'builtins.method'
    object_with_options_0.set_option(object_with_options_0, object_with_options_0, object_with_options_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ''
    str_1 = 'Ey9Md'
    str_2 = 'ksj/0AF:>o./k?5&`'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_0.ObjectWithOptions(**dict_0)

def test_case_4():
    object_with_options_0 = module_0.ObjectWithOptions()
    assert f'{type(object_with_options_0).__module__}.{type(object_with_options_0).__qualname__}' == 'pycallnumber.options.ObjectWithOptions'
    assert f'{type(object_with_options_0.options).__module__}.{type(object_with_options_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(object_with_options_0.options) == 0
    assert f'{type(module_0.ObjectWithOptions.get_classopts).__module__}.{type(module_0.ObjectWithOptions.get_classopts).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ObjectWithOptions.filter_valid_useropts).__module__}.{type(module_0.ObjectWithOptions.filter_valid_useropts).__qualname__}' == 'builtins.method'
    var_0 = object_with_options_0.copy_option_values_to_other(object_with_options_0, object_with_options_0)

def test_case_5():
    object_with_options_0 = module_0.ObjectWithOptions()
    assert f'{type(object_with_options_0).__module__}.{type(object_with_options_0).__qualname__}' == 'pycallnumber.options.ObjectWithOptions'
    assert f'{type(object_with_options_0.options).__module__}.{type(object_with_options_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(object_with_options_0.options) == 0
    assert f'{type(module_0.ObjectWithOptions.get_classopts).__module__}.{type(module_0.ObjectWithOptions.get_classopts).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ObjectWithOptions.filter_valid_useropts).__module__}.{type(module_0.ObjectWithOptions.filter_valid_useropts).__qualname__}' == 'builtins.method'
    var_0 = object_with_options_0.copy_option_values_to_other(object_with_options_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    object_with_options_0 = module_0.ObjectWithOptions()
    assert f'{type(object_with_options_0).__module__}.{type(object_with_options_0).__qualname__}' == 'pycallnumber.options.ObjectWithOptions'
    assert f'{type(object_with_options_0.options).__module__}.{type(object_with_options_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(object_with_options_0.options) == 0
    assert f'{type(module_0.ObjectWithOptions.get_classopts).__module__}.{type(module_0.ObjectWithOptions.get_classopts).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.ObjectWithOptions.filter_valid_useropts).__module__}.{type(module_0.ObjectWithOptions.filter_valid_useropts).__qualname__}' == 'builtins.method'
    object_with_options_0.get_option_source(object_with_options_0)