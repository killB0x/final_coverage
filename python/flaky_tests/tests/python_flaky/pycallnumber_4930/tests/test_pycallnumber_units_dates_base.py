# Automatically generated by Pynguin.
import pytest
import pycallnumber.template as module_0
import pycallnumber.exceptions as module_1
import pycallnumber.units.dates.base as module_2

def test_case_0():
    with pytest.raises(module_1.SettingsError):
        module_0.CompoundTemplate()

@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'YSebmnh{E5__6Bv'
    compound_date_part_0 = module_2.CompoundDatePart(str_0)
    compound_date_part_0.cmp_key(str_0, compound_date_part_0)

def test_case_2():
    str_0 = '$VxJ#\rzR[z7UIe'
    base_date_0 = module_2.BaseDate(str_0)
    assert f'{type(base_date_0).__module__}.{type(base_date_0).__qualname__}' == 'pycallnumber.units.dates.base.BaseDate'
    assert f'{type(base_date_0.options).__module__}.{type(base_date_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(base_date_0.options) == 7
    assert base_date_0.definition is None
    assert base_date_0.is_separator is False
    assert base_date_0.display_case == ''
    assert base_date_0.search_case == 'lower'
    assert base_date_0.sort_case == 'lower'
    assert base_date_0.use_formatting_in_search is False
    assert base_date_0.use_formatting_in_sort is False
    assert base_date_0.name == 'default'
    assert base_date_0.part_names == ['prop_month', 'prop_day', 'prop_year']
    assert base_date_0.has_part_names is True
    assert f'{type(base_date_0.prop_month).__module__}.{type(base_date_0.prop_month).__qualname__}' == 'pycallnumber.unit.SimpleUnit'
    assert base_date_0.prop_day is None
    assert base_date_0.prop_year is None
    assert module_2.BaseDate.template.separator_type is None
    assert len(module_2.BaseDate.template.groups) == 3
    assert len(module_2.BaseDate.template.groupings) == 3
    assert f'{type(module_2.BaseDate.year).__module__}.{type(module_2.BaseDate.year).__qualname__}' == 'builtins.property'
    assert f'{type(module_2.BaseDate.month).__module__}.{type(module_2.BaseDate.month).__qualname__}' == 'builtins.property'
    assert f'{type(module_2.BaseDate.day).__module__}.{type(module_2.BaseDate.day).__qualname__}' == 'builtins.property'
    assert f'{type(module_2.BaseDate.normalized_datestring).__module__}.{type(module_2.BaseDate.normalized_datestring).__qualname__}' == 'builtins.property'
    var_0 = base_date_0.__ge__(base_date_0)

def test_case_3():
    str_0 = ''
    base_date_0 = module_2.BaseDate(str_0)
    assert f'{type(base_date_0).__module__}.{type(base_date_0).__qualname__}' == 'pycallnumber.units.dates.base.BaseDate'
    assert f'{type(base_date_0.options).__module__}.{type(base_date_0.options).__qualname__}' == 'pycallnumber.options.Options'
    assert len(base_date_0.options) == 7
    assert base_date_0.definition is None
    assert base_date_0.is_separator is False
    assert base_date_0.display_case == ''
    assert base_date_0.search_case == 'lower'
    assert base_date_0.sort_case == 'lower'
    assert base_date_0.use_formatting_in_search is False
    assert base_date_0.use_formatting_in_sort is False
    assert base_date_0.name == 'default'
    assert base_date_0.part_names == ['prop_month', 'prop_day', 'prop_year']
    assert base_date_0.has_part_names is True
    assert base_date_0.prop_month is None
    assert base_date_0.prop_day is None
    assert base_date_0.prop_year is None
    assert module_2.BaseDate.template.separator_type is None
    assert len(module_2.BaseDate.template.groups) == 3
    assert len(module_2.BaseDate.template.groupings) == 3
    assert f'{type(module_2.BaseDate.year).__module__}.{type(module_2.BaseDate.year).__qualname__}' == 'builtins.property'
    assert f'{type(module_2.BaseDate.month).__module__}.{type(module_2.BaseDate.month).__qualname__}' == 'builtins.property'
    assert f'{type(module_2.BaseDate.day).__module__}.{type(module_2.BaseDate.day).__qualname__}' == 'builtins.property'
    assert f'{type(module_2.BaseDate.normalized_datestring).__module__}.{type(module_2.BaseDate.normalized_datestring).__qualname__}' == 'builtins.property'
    var_0 = base_date_0.__eq__(base_date_0)
    assert var_0 is True