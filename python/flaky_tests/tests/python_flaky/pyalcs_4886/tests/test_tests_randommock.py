# Automatically generated by Pynguin.
import pytest
import tests.randommock as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    list_0 = [bool_0]
    module_0.SampleMock(*list_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.SampleMock()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '6'
    list_0 = [str_0, str_0]
    sample_mock_0 = module_0.SampleMock(*list_0)
    sample_mock_0.__call__(*list_0)

def test_case_3():
    str_0 = '6'
    sample_mock_0 = module_0.SampleMock(*str_0)
    assert f'{type(sample_mock_0).__module__}.{type(sample_mock_0).__qualname__}' == 'tests.randommock.SampleMock'
    with pytest.raises(AssertionError):
        sample_mock_0.__call__()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '='
    list_0 = [str_0, str_0]
    sample_mock_0 = module_0.SampleMock(*list_0)
    sample_mock_0.__call__(*list_0)

def test_case_5():
    str_0 = '@(N^pX!m:F=I^\t'
    random_mock_0 = module_0.RandomMock(str_0)
    list_0 = [random_mock_0]
    sample_mock_0 = module_0.SampleMock(*list_0)
    assert f'{type(sample_mock_0).__module__}.{type(sample_mock_0).__qualname__}' == 'tests.randommock.SampleMock'
    with pytest.raises(AssertionError):
        sample_mock_0.__call__()

def test_case_6():
    list_0 = []
    bool_0 = False
    list_1 = [list_0, bool_0]
    sample_mock_0 = module_0.SampleMock(*list_1)
    assert f'{type(sample_mock_0).__module__}.{type(sample_mock_0).__qualname__}' == 'tests.randommock.SampleMock'
    var_0 = sample_mock_0.__call__(*list_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '\tExecuting action: [%d]'
    list_0 = [str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0]
    bool_0 = True
    list_1 = [list_0, bool_0]
    sample_mock_0 = module_0.SampleMock(*list_1)
    assert f'{type(sample_mock_0).__module__}.{type(sample_mock_0).__qualname__}' == 'tests.randommock.SampleMock'
    sample_mock_0.__call__(*list_1)