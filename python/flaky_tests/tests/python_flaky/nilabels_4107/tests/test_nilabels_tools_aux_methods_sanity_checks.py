# Automatically generated by Pynguin.
import pytest
import nilabels.tools.aux_methods.sanity_checks as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '.'
    module_0.check_pfi_io(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'\xa3\xa5\x1f\x14\x17\x11\xff\xc2\xdaFH'
    module_0.check_pfi_io(bytes_0, bytes_0)

def test_case_2():
    str_0 = '.'
    var_0 = module_0.check_path_validity(str_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 5761
    module_0.check_path_validity(int_0, int_0, int_0)

def test_case_4():
    bytes_0 = b'\xa3\xa5\x1f\x14\x17\x11\xff\xc2\xdaFH'
    var_0 = module_0.is_valid_permutation(bytes_0, bytes_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    module_0.check_path_validity(set_0, timeout=set_0)

def test_case_6():
    bytes_0 = b'\xa3\xa5\x1f\x14\x17\x11\xff\xc2\xdaFH'
    none_type_0 = None
    var_0 = module_0.is_valid_permutation(bytes_0, none_type_0)
    assert var_0 is False
    none_type_1 = None
    var_1 = module_0.check_pfi_io(var_0, none_type_1)
    assert var_1 is True

def test_case_7():
    str_0 = "S'"
    var_0 = module_0.is_valid_permutation(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '\t(\novv%CR/<P$Jwl'
    float_0 = 0.3
    set_0 = {str_0, float_0, float_0, float_0}
    bytes_0 = b'\x99\xe2\x16\x13\xbb\xa9'
    tuple_0 = (bytes_0,)
    tuple_1 = (set_0, tuple_0)
    var_0 = module_0.is_valid_permutation(tuple_1)
    assert var_0 is False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '.'
    list_0 = [str_0, str_0]
    var_0 = module_0.is_valid_permutation(list_0)
    assert var_0 is False
    var_1 = module_0.is_valid_permutation(list_0, str_0)
    assert var_1 is False
    var_2 = module_0.check_path_validity(str_0, str_0, str_0)
    assert var_2 is True
    var_3 = module_0.is_valid_permutation(str_0)
    assert var_3 is False
    module_0.check_pfi_io(str_0, str_0)

def test_case_10():
    int_0 = 840
    int_1 = 157
    tuple_0 = (int_1,)
    tuple_1 = (tuple_0, tuple_0)
    var_0 = module_0.is_valid_permutation(tuple_1, int_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 840
    int_1 = 157
    tuple_0 = (int_1,)
    bool_0 = True
    str_0 = 'the label {} you want to keep is not present in the segmentation'
    tuple_1 = (int_1, tuple_0, bool_0, str_0)
    tuple_2 = (int_0, int_0, tuple_1)
    tuple_3 = (tuple_2, tuple_2)
    var_0 = module_0.is_valid_permutation(tuple_3, int_0)
    assert var_0 is False
    module_0.check_pfi_io(var_0, tuple_3)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    str_0 = '**'
    var_0 = module_0.is_valid_permutation(str_0, none_type_0)
    assert var_0 is True
    module_0.check_pfi_io(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '/'
    list_0 = [str_0]
    var_0 = module_0.is_valid_permutation(list_0, str_0)
    assert var_0 is False
    var_1 = module_0.check_path_validity(str_0, str_0, str_0)
    assert var_1 is True
    var_2 = module_0.is_valid_permutation(str_0)
    var_3 = module_0.check_pfi_io(str_0, str_0)
    assert var_3 is True
    module_0.is_valid_permutation(var_3)