# Automatically generated by Pynguin.
import pytest
import nilabels.agents.agents_controller as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'JTkp`O3/'
    module_0.AgentsController(str_0)

def test_case_1():
    str_0 = 'type'
    agents_controller_0 = module_0.AgentsController()
    assert f'{type(agents_controller_0).__module__}.{type(agents_controller_0).__qualname__}' == 'nilabels.agents.agents_controller.AgentsController'
    assert f'{type(agents_controller_0.manipulate_labels).__module__}.{type(agents_controller_0.manipulate_labels).__qualname__}' == 'nilabels.agents.labels_manipulator.LabelsManipulator'
    assert f'{type(agents_controller_0.manipulate_intensities).__module__}.{type(agents_controller_0.manipulate_intensities).__qualname__}' == 'nilabels.agents.intensities_manipulator.IntensitiesManipulator'
    assert f'{type(agents_controller_0.manipulate_shape).__module__}.{type(agents_controller_0.manipulate_shape).__qualname__}' == 'nilabels.agents.shape_manipulator.ShapeManipulator'
    assert f'{type(agents_controller_0.measure).__module__}.{type(agents_controller_0.measure).__qualname__}' == 'nilabels.agents.measurer.LabelsMeasure'
    assert f'{type(agents_controller_0.fuse).__module__}.{type(agents_controller_0.fuse).__qualname__}' == 'nilabels.agents.fuser.LabelsFuser'
    assert f'{type(agents_controller_0.symmetrize).__module__}.{type(agents_controller_0.symmetrize).__qualname__}' == 'nilabels.agents.symmetrizer.SegmentationSymmetrizer'
    assert f'{type(agents_controller_0.check).__module__}.{type(agents_controller_0.check).__qualname__}' == 'nilabels.agents.checker.LabelsChecker'
    assert f'{type(agents_controller_0.header).__module__}.{type(agents_controller_0.header).__qualname__}' == 'nilabels.agents.header_controller.HeaderController'
    assert f'{type(agents_controller_0.segment).__module__}.{type(agents_controller_0.segment).__qualname__}' == 'nilabels.agents.segmenter.LabelsSegmenter'
    assert f'{type(agents_controller_0.math).__module__}.{type(agents_controller_0.math).__qualname__}' == 'nilabels.agents.math.Math'
    var_0 = agents_controller_0.set_output_data_folder(str_0)

def test_case_2():
    agents_controller_0 = module_0.AgentsController()
    assert f'{type(agents_controller_0).__module__}.{type(agents_controller_0).__qualname__}' == 'nilabels.agents.agents_controller.AgentsController'
    assert f'{type(agents_controller_0.manipulate_labels).__module__}.{type(agents_controller_0.manipulate_labels).__qualname__}' == 'nilabels.agents.labels_manipulator.LabelsManipulator'
    assert f'{type(agents_controller_0.manipulate_intensities).__module__}.{type(agents_controller_0.manipulate_intensities).__qualname__}' == 'nilabels.agents.intensities_manipulator.IntensitiesManipulator'
    assert f'{type(agents_controller_0.manipulate_shape).__module__}.{type(agents_controller_0.manipulate_shape).__qualname__}' == 'nilabels.agents.shape_manipulator.ShapeManipulator'
    assert f'{type(agents_controller_0.measure).__module__}.{type(agents_controller_0.measure).__qualname__}' == 'nilabels.agents.measurer.LabelsMeasure'
    assert f'{type(agents_controller_0.fuse).__module__}.{type(agents_controller_0.fuse).__qualname__}' == 'nilabels.agents.fuser.LabelsFuser'
    assert f'{type(agents_controller_0.symmetrize).__module__}.{type(agents_controller_0.symmetrize).__qualname__}' == 'nilabels.agents.symmetrizer.SegmentationSymmetrizer'
    assert f'{type(agents_controller_0.check).__module__}.{type(agents_controller_0.check).__qualname__}' == 'nilabels.agents.checker.LabelsChecker'
    assert f'{type(agents_controller_0.header).__module__}.{type(agents_controller_0.header).__qualname__}' == 'nilabels.agents.header_controller.HeaderController'
    assert f'{type(agents_controller_0.segment).__module__}.{type(agents_controller_0.segment).__qualname__}' == 'nilabels.agents.segmenter.LabelsSegmenter'
    assert f'{type(agents_controller_0.math).__module__}.{type(agents_controller_0.math).__qualname__}' == 'nilabels.agents.math.Math'
    agents_controller_1 = module_0.AgentsController()
    agents_controller_2 = module_0.AgentsController()
    var_0 = agents_controller_2.set_input_data_folder(agents_controller_2)
    agents_controller_3 = module_0.AgentsController()
    var_1 = agents_controller_2.set_input_data_folder(agents_controller_2)

def test_case_3():
    str_0 = '.'
    agents_controller_0 = module_0.AgentsController(str_0)
    assert f'{type(agents_controller_0).__module__}.{type(agents_controller_0).__qualname__}' == 'nilabels.agents.agents_controller.AgentsController'
    assert f'{type(agents_controller_0.manipulate_labels).__module__}.{type(agents_controller_0.manipulate_labels).__qualname__}' == 'nilabels.agents.labels_manipulator.LabelsManipulator'
    assert f'{type(agents_controller_0.manipulate_intensities).__module__}.{type(agents_controller_0.manipulate_intensities).__qualname__}' == 'nilabels.agents.intensities_manipulator.IntensitiesManipulator'
    assert f'{type(agents_controller_0.manipulate_shape).__module__}.{type(agents_controller_0.manipulate_shape).__qualname__}' == 'nilabels.agents.shape_manipulator.ShapeManipulator'
    assert f'{type(agents_controller_0.measure).__module__}.{type(agents_controller_0.measure).__qualname__}' == 'nilabels.agents.measurer.LabelsMeasure'
    assert f'{type(agents_controller_0.fuse).__module__}.{type(agents_controller_0.fuse).__qualname__}' == 'nilabels.agents.fuser.LabelsFuser'
    assert f'{type(agents_controller_0.symmetrize).__module__}.{type(agents_controller_0.symmetrize).__qualname__}' == 'nilabels.agents.symmetrizer.SegmentationSymmetrizer'
    assert f'{type(agents_controller_0.check).__module__}.{type(agents_controller_0.check).__qualname__}' == 'nilabels.agents.checker.LabelsChecker'
    assert f'{type(agents_controller_0.header).__module__}.{type(agents_controller_0.header).__qualname__}' == 'nilabels.agents.header_controller.HeaderController'
    assert f'{type(agents_controller_0.segment).__module__}.{type(agents_controller_0.segment).__qualname__}' == 'nilabels.agents.segmenter.LabelsSegmenter'
    assert f'{type(agents_controller_0.math).__module__}.{type(agents_controller_0.math).__qualname__}' == 'nilabels.agents.math.Math'

def test_case_4():
    agents_controller_0 = module_0.AgentsController()
    assert f'{type(agents_controller_0).__module__}.{type(agents_controller_0).__qualname__}' == 'nilabels.agents.agents_controller.AgentsController'
    assert f'{type(agents_controller_0.manipulate_labels).__module__}.{type(agents_controller_0.manipulate_labels).__qualname__}' == 'nilabels.agents.labels_manipulator.LabelsManipulator'
    assert f'{type(agents_controller_0.manipulate_intensities).__module__}.{type(agents_controller_0.manipulate_intensities).__qualname__}' == 'nilabels.agents.intensities_manipulator.IntensitiesManipulator'
    assert f'{type(agents_controller_0.manipulate_shape).__module__}.{type(agents_controller_0.manipulate_shape).__qualname__}' == 'nilabels.agents.shape_manipulator.ShapeManipulator'
    assert f'{type(agents_controller_0.measure).__module__}.{type(agents_controller_0.measure).__qualname__}' == 'nilabels.agents.measurer.LabelsMeasure'
    assert f'{type(agents_controller_0.fuse).__module__}.{type(agents_controller_0.fuse).__qualname__}' == 'nilabels.agents.fuser.LabelsFuser'
    assert f'{type(agents_controller_0.symmetrize).__module__}.{type(agents_controller_0.symmetrize).__qualname__}' == 'nilabels.agents.symmetrizer.SegmentationSymmetrizer'
    assert f'{type(agents_controller_0.check).__module__}.{type(agents_controller_0.check).__qualname__}' == 'nilabels.agents.checker.LabelsChecker'
    assert f'{type(agents_controller_0.header).__module__}.{type(agents_controller_0.header).__qualname__}' == 'nilabels.agents.header_controller.HeaderController'
    assert f'{type(agents_controller_0.segment).__module__}.{type(agents_controller_0.segment).__qualname__}' == 'nilabels.agents.segmenter.LabelsSegmenter'
    assert f'{type(agents_controller_0.math).__module__}.{type(agents_controller_0.math).__qualname__}' == 'nilabels.agents.math.Math'
    agents_controller_1 = module_0.AgentsController()
    var_0 = agents_controller_0.set_output_data_folder(agents_controller_1)
    agents_controller_2 = module_0.AgentsController(output_data_folder=agents_controller_0)