# Automatically generated by Pynguin.
import pytest
import nilabels.tools.aux_methods.utils_path as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.get_pfi_in_pfi_out(none_type_0, none_type_0, none_type_0, none_type_0)
    module_0.connect_path_tail_head(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    module_0.get_pfi_in_pfi_out(bool_0, bool_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b'\xe0\x89'
    none_type_0 = None
    var_0 = module_0.connect_path_tail_head(none_type_0, none_type_0)
    int_0 = -836
    var_1 = module_0.get_pfi_in_pfi_out(bytes_0, bytes_0, bytes_0, bytes_0)
    module_0.get_pfi_in_pfi_out(bytes_0, bytes_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ''
    complex_0 = (-3596.17047-2514j)
    tuple_0 = (str_0, complex_0)
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    bool_0 = True
    module_0.get_pfi_in_pfi_out(set_0, bool_0, str_0, set_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b':\x01\x028\x1f\xc8\x84)c\xc9\x0f\xbe?+\x83\xffi'
    none_type_0 = None
    var_0 = module_0.get_pfi_in_pfi_out(bytes_0, bytes_0, none_type_0, none_type_0)
    var_1 = module_0.get_pfi_in_pfi_out(bytes_0, bytes_0, bytes_0, bytes_0)
    var_2 = module_0.get_pfi_in_pfi_out(bytes_0, bytes_0, var_1, var_1)
    module_0.connect_path_tail_head(bytes_0, var_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'yo{!(=h'
    var_0 = module_0.connect_path_tail_head(str_0, str_0)
    assert var_0 == 'yo{!(=h'
    none_type_0 = None
    str_1 = '&M&C\t'
    var_1 = module_0.get_pfi_in_pfi_out(str_1, str_0, none_type_0, str_1)
    module_0.connect_path_tail_head(str_0, var_1)