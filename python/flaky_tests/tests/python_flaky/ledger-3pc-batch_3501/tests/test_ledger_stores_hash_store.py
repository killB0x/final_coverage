# Automatically generated by Pynguin.
import pytest
import ledger.stores.hash_store as module_0
import ledger.util as module_1

def test_case_0():
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    str_0 = '__version__'
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = hash_store_0.readLeaf(none_type_0)
    var_1 = hash_store_0.readNodes(var_0, str_0)
    var_2 = hash_store_0.writeNode(str_0)
    module_1.count_bits_set(str_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -3892
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = hash_store_0.readLeaf(bool_0)
    var_0.readNodeByTree(list_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    int_0 = -768
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = hash_store_0.readNode(int_0)
    var_0.readLeaf(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    str_0 = 'Proof has extra nodes'
    var_0 = hash_store_0.readLeafs(str_0, hash_store_0)
    hash_store_0.readNodeByTree(hash_store_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    dict_0 = {}
    hash_store_0 = module_0.HashStore(**dict_0)
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    hash_store_0.readNodeByTree(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = hash_store_0.close()
    var_0.close()

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -3892
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = hash_store_0.readNode(int_0)
    var_1 = hash_store_0.writeLeaf(list_0)
    var_2 = module_1.count_bits_set(bool_0)
    var_0.readNode(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -3892
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    hash_store_0 = module_0.HashStore()
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    bool_1 = hash_store_0.reset()
    var_0 = hash_store_0.readLeaf(bool_0)
    var_0.readNodeByTree(list_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    dict_0 = {}
    hash_store_0 = module_0.HashStore(**dict_0)
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    int_0 = -1591
    tuple_0 = (hash_store_0, int_0)
    hash_store_0.readNodeByTree(none_type_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    str_0 = '\ngB\x0b]]rRoua5'
    list_0 = []
    hash_store_0 = module_0.HashStore(*list_0)
    assert f'{type(module_0.HashStore.leafCount).__module__}.{type(module_0.HashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.nodeCount).__module__}.{type(module_0.HashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.HashStore.getNodePosition).__module__}.{type(module_0.HashStore.getNodePosition).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.getPath).__module__}.{type(module_0.HashStore.getPath).__qualname__}' == 'builtins.method'
    assert f'{type(module_0.HashStore.closed).__module__}.{type(module_0.HashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = hash_store_0.readNodeByTree(bool_0)
    var_0.readNodeByTree(str_0)