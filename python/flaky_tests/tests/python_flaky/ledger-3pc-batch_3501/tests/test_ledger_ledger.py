# Automatically generated by Pynguin.
import pytest
import ledger.ledger as module_0
import ledger.compact_merkle_tree as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'V{2!gX$sLF#'
    module_0.Ledger(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    bool_0.reset()

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    str_0 = 'l|:I?-![Ks?mZ\r:'
    bool_0 = False
    module_0.Ledger(none_type_0, str_0, fileName=none_type_0, ensureDurability=bool_0, transactionLogStore=str_0, defaultFile=bool_0)

def test_case_3():
    int_0 = 32
    str_0 = '[<3'
    with pytest.raises(AssertionError):
        module_0.Ledger(str_0, str_0, transactionLogStore=int_0, defaultFile=str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'V{~!gX$sLF#'
    module_0.Ledger(str_0, str_0, fileName=str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    str_0 = 'V{2!gX$sLF#'
    module_0.Ledger(none_type_0, str_0, str_0, none_type_0)

def test_case_6():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'

def test_case_7():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = ledger_0.__getitem__(compact_merkle_tree_0)

def test_case_8():
    str_0 = 'V{2!gXsF#'
    none_type_0 = None
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, none_type_0, compact_merkle_tree_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 0
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = ledger_0.lastCount()
    assert var_0 == 0

@pytest.mark.xfail(strict=True)
def test_case_9():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = ledger_0.getBySeqNo(none_type_0)
    ledger_1 = module_0.Ledger(compact_merkle_tree_0, str_0, defaultFile=none_type_0)
    ledger_0.append(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    str_0 = 'V{2!gXsF#'
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_1 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_1)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = ledger_0.append(none_type_0)
    var_0.__repr__(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'V{2!gXsF#'
    none_type_0 = None
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, transactionLogStore=compact_merkle_tree_0, defaultFile=none_type_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 0
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = ledger_0.recoverTreeFromHashStore()
    var_0.__repr__(str_0)

def test_case_12():
    str_0 = 'O]NJV`S;l#7A9Rn'
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 0
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = ledger_0.getBySeqNo(none_type_0)
    var_1 = ledger_0.__len__()
    assert var_1 == 0
    with pytest.raises(AssertionError):
        ledger_0.merkleInfo(var_1)

def test_case_13():
    str_0 = 'O]NJV`S;l#7A9Rn'
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 0
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = ledger_0.getBySeqNo(none_type_0)
    var_1 = ledger_0.reset()
    var_2 = ledger_0.lastCount()
    assert var_2 == 0

def test_case_14():
    none_type_0 = None
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    var_0 = compact_merkle_tree_0.save(compact_merkle_tree_0)
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, none_type_0, ensureDurability=none_type_0)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_1 = ledger_0.lastCount()
    assert var_1 == 4

@pytest.mark.xfail(strict=True)
def test_case_15():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    compact_merkle_tree_1 = module_1.CompactMerkleTree(str_0)
    module_0.Ledger(compact_merkle_tree_1, str_0)
    var_0 = ledger_0.stop()
    var_1 = var_0.lastCount()

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    none_type_1 = None
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    bool_0 = True
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, none_type_0, ensureDurability=bool_0)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    ledger_0.strToHash(none_type_1)

def test_case_17():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = compact_merkle_tree_0.__len__()
    assert var_0 == 4
    var_1 = ledger_0.start(var_0)
    str_1 = '5Ci'
    ledger_1 = module_0.Ledger(compact_merkle_tree_0, str_1)
    assert len(compact_merkle_tree_0) == 5
    assert len(ledger_0) == 5
    assert len(ledger_1) == 5

@pytest.mark.xfail(strict=True)
def test_case_18():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = compact_merkle_tree_0.__len__()
    assert var_0 == 4
    ledger_0.get()

def test_case_19():
    str_0 = 'O]NJV`S;l#A9Rn'
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_1 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_1, str_1)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    none_type_0 = None
    var_0 = ledger_0.stop()
    var_1 = module_0.Ledger(compact_merkle_tree_0, str_0, var_0, none_type_0, transactionLogStore=none_type_0)
    assert len(var_1) == 4
    var_2 = ledger_0.start(var_1)
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.Ledger(var_2, str_1, fileName=var_1, transactionLogStore=bool_0, defaultFile=ledger_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, str_0)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = ledger_0.recoverTree()
    assert len(compact_merkle_tree_0) == 8
    assert len(ledger_0) == 8
    var_1 = compact_merkle_tree_0.__len__()
    assert var_1 == 8
    ledger_0.get()

@pytest.mark.xfail(strict=True)
def test_case_21():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    none_type_0 = None
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, none_type_0, str_0)
    assert len(compact_merkle_tree_0) == 53
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 53
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    var_0 = ledger_0.recoverTree()
    assert len(compact_merkle_tree_0) == 106
    assert len(ledger_0) == 106
    var_1 = compact_merkle_tree_0.__len__()
    assert var_1 == 106
    ledger_0.get()

@pytest.mark.xfail(strict=True)
def test_case_22():
    compact_merkle_tree_0 = module_1.CompactMerkleTree()
    str_0 = '4H[F7<|Vb?'
    none_type_0 = None
    ledger_0 = module_0.Ledger(compact_merkle_tree_0, str_0, none_type_0)
    assert len(compact_merkle_tree_0) == 4
    assert f'{type(ledger_0).__module__}.{type(ledger_0).__qualname__}' == 'ledger.ledger.Ledger'
    assert len(ledger_0) == 4
    assert f'{type(module_0.Ledger.size).__module__}.{type(module_0.Ledger.size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Ledger.root_hash).__module__}.{type(module_0.Ledger.root_hash).__qualname__}' == 'builtins.property'
    compact_merkle_tree_0.get_tree_head()
    var_0 = ledger_0.start(ledger_0)
    var_2 = ledger_0.get(**var_1)