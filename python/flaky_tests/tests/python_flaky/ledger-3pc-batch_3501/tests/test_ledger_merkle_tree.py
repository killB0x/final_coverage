# Automatically generated by Pynguin.
import pytest
import ledger.merkle_tree as module_0

def test_case_0():
    merkle_tree_0 = module_0.MerkleTree()
    assert f'{type(module_0.MerkleTree.hashes).__module__}.{type(module_0.MerkleTree.hashes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash).__module__}.{type(module_0.MerkleTree.root_hash).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash_hex).__module__}.{type(module_0.MerkleTree.root_hash_hex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.tree_size).__module__}.{type(module_0.MerkleTree.tree_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.leafCount).__module__}.{type(module_0.MerkleTree.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.nodeCount).__module__}.{type(module_0.MerkleTree.nodeCount).__qualname__}' == 'builtins.property'

def test_case_1():
    merkle_tree_0 = module_0.MerkleTree()
    assert f'{type(module_0.MerkleTree.hashes).__module__}.{type(module_0.MerkleTree.hashes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash).__module__}.{type(module_0.MerkleTree.root_hash).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash_hex).__module__}.{type(module_0.MerkleTree.root_hash_hex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.tree_size).__module__}.{type(module_0.MerkleTree.tree_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.leafCount).__module__}.{type(module_0.MerkleTree.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.nodeCount).__module__}.{type(module_0.MerkleTree.nodeCount).__qualname__}' == 'builtins.property'
    var_0 = merkle_tree_0.merkle_tree_hash(merkle_tree_0, merkle_tree_0)
    var_1 = merkle_tree_0.append(var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    merkle_tree_0 = module_0.MerkleTree()
    assert f'{type(module_0.MerkleTree.hashes).__module__}.{type(module_0.MerkleTree.hashes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash).__module__}.{type(module_0.MerkleTree.root_hash).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash_hex).__module__}.{type(module_0.MerkleTree.root_hash_hex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.tree_size).__module__}.{type(module_0.MerkleTree.tree_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.leafCount).__module__}.{type(module_0.MerkleTree.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.nodeCount).__module__}.{type(module_0.MerkleTree.nodeCount).__qualname__}' == 'builtins.property'
    var_0 = merkle_tree_0.merkle_tree_hash(merkle_tree_0, merkle_tree_0)
    var_0.inclusion_proof(merkle_tree_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    merkle_tree_0 = module_0.MerkleTree()
    assert f'{type(module_0.MerkleTree.hashes).__module__}.{type(module_0.MerkleTree.hashes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash).__module__}.{type(module_0.MerkleTree.root_hash).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash_hex).__module__}.{type(module_0.MerkleTree.root_hash_hex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.tree_size).__module__}.{type(module_0.MerkleTree.tree_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.leafCount).__module__}.{type(module_0.MerkleTree.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.nodeCount).__module__}.{type(module_0.MerkleTree.nodeCount).__qualname__}' == 'builtins.property'
    complex_0 = (3409-1279.6j)
    list_0 = [complex_0]
    list_1 = []
    dict_0 = {}
    var_0 = merkle_tree_0.merkle_tree_hash(complex_0, dict_0)
    bool_0 = merkle_tree_0.verifyConsistency(merkle_tree_0)
    merkle_tree_1 = module_0.MerkleTree(**dict_0)
    var_1 = merkle_tree_1.consistency_proof(list_0, none_type_0)
    var_2 = merkle_tree_1.consistency_proof(list_1, list_1)
    var_2.append(list_0)

def test_case_4():
    merkle_tree_0 = module_0.MerkleTree()
    assert f'{type(module_0.MerkleTree.hashes).__module__}.{type(module_0.MerkleTree.hashes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash).__module__}.{type(module_0.MerkleTree.root_hash).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash_hex).__module__}.{type(module_0.MerkleTree.root_hash_hex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.tree_size).__module__}.{type(module_0.MerkleTree.tree_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.leafCount).__module__}.{type(module_0.MerkleTree.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.nodeCount).__module__}.{type(module_0.MerkleTree.nodeCount).__qualname__}' == 'builtins.property'
    merkle_tree_1 = module_0.MerkleTree()
    var_0 = merkle_tree_1.inclusion_proof(merkle_tree_1, merkle_tree_1)
    var_1 = merkle_tree_1.inclusion_proof(var_0, var_0)
    var_2 = merkle_tree_0.append(merkle_tree_1)
    bool_0 = merkle_tree_1.verifyConsistency(merkle_tree_1)
    merkle_tree_2 = module_0.MerkleTree()

@pytest.mark.xfail(strict=True)
def test_case_5():
    merkle_tree_0 = module_0.MerkleTree()
    assert f'{type(module_0.MerkleTree.hashes).__module__}.{type(module_0.MerkleTree.hashes).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash).__module__}.{type(module_0.MerkleTree.root_hash).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.root_hash_hex).__module__}.{type(module_0.MerkleTree.root_hash_hex).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.tree_size).__module__}.{type(module_0.MerkleTree.tree_size).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.leafCount).__module__}.{type(module_0.MerkleTree.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MerkleTree.nodeCount).__module__}.{type(module_0.MerkleTree.nodeCount).__qualname__}' == 'builtins.property'
    var_0 = merkle_tree_0.get_tree_head(merkle_tree_0)
    var_0.inclusion_proof(merkle_tree_0, var_0)