# Automatically generated by Pynguin.
import pytest
import ledger.merkle_verifier as module_0
import ledger.error as module_1
import ledger.util as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 2267
    bool_0 = True
    bytes_0 = b'\xbe\xeb\xaf\x1a)c\x95n\xbc.S\xc5\xf4tD\x0c\xe0\x11\xc4'
    merkle_verifier_0.verify_tree_consistency(bool_0, int_0, bytes_0, bytes_0, bool_0)

def test_case_1():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'

@pytest.mark.xfail(strict=True)
def test_case_2():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 2226
    var_0 = merkle_verifier_0.__repr__()
    assert var_0 == "'MerkleVerifier'(hasher: TreeHasher(<built-in function openssl_sha256>))"
    int_1 = 248
    merkle_verifier_0.verify_tree_consistency(int_1, int_0, int_1, merkle_verifier_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 4
    int_1 = 5
    var_0 = merkle_verifier_0.__str__()
    assert var_0 == 'MerkleVerifier(hasher: TreeHasher(<built-in function openssl_sha256>))'
    merkle_verifier_0.verify_tree_consistency(int_0, int_1, var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    bool_0 = True
    bool_1 = True
    bytes_0 = b'\xe6~\x89D\xd9\xc6\x14\xb8'
    list_0 = [bytes_0]
    var_0 = merkle_verifier_0.__repr__()
    assert var_0 == "'MerkleVerifier'(hasher: TreeHasher(<built-in function openssl_sha256>))"
    merkle_verifier_0.verify_leaf_inclusion(bool_0, bool_1, list_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'r\x85\xad\xad\xf7\xb3\xbe\xbe,\xc0\xcd'
    bool_0 = True
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    var_0 = merkle_verifier_0.verify_tree_consistency(bool_0, bool_0, bytes_0, bytes_0, bool_0)
    assert var_0 is True
    merkle_verifier_1 = module_0.MerkleVerifier()
    var_1 = merkle_verifier_1.__str__()
    assert var_1 == 'MerkleVerifier(hasher: TreeHasher(<built-in function openssl_sha256>))'
    int_0 = 2217
    bool_1 = True
    var_2 = merkle_verifier_1.__repr__()
    assert var_2 == "'MerkleVerifier'(hasher: TreeHasher(<built-in function openssl_sha256>))"
    merkle_verifier_1.verify_tree_consistency(bool_1, int_0, var_2, var_2, var_2)

def test_case_6():
    int_0 = 2160
    bool_0 = False
    bool_1 = True
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    var_0 = merkle_verifier_0.__repr__()
    assert var_0 == "'MerkleVerifier'(hasher: TreeHasher(<built-in function openssl_sha256>))"
    var_1 = merkle_verifier_0.__str__()
    assert var_1 == 'MerkleVerifier(hasher: TreeHasher(<built-in function openssl_sha256>))'
    var_2 = merkle_verifier_0.verify_tree_consistency(bool_0, bool_1, bool_1, var_0, int_0)
    assert var_2 is True
    merkle_verifier_1 = module_0.MerkleVerifier()
    with pytest.raises(module_1.ConsistencyError):
        merkle_verifier_0.verify_tree_consistency(bool_0, bool_0, var_0, var_2, var_2)

def test_case_7():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    var_0 = module_1.returns_true_or_raises(merkle_verifier_0)
    int_0 = 2290
    bool_0 = False
    var_1 = merkle_verifier_0.__repr__()
    assert var_1 == "'MerkleVerifier'(hasher: TreeHasher(<built-in function openssl_sha256>))"
    var_2 = merkle_verifier_0.verify_tree_consistency(bool_0, int_0, var_0, var_0, var_1)
    assert var_2 is True

def test_case_8():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    merkle_verifier_1 = module_0.MerkleVerifier()
    merkle_verifier_2 = module_0.MerkleVerifier()
    int_0 = 1189
    bytes_0 = b'\x0c\xeeF\xdaJ0"K8\x7f\x87lP'
    bool_0 = False
    bytes_1 = b'\n\x07\n\x01'
    with pytest.raises(ValueError):
        merkle_verifier_2.verify_tree_consistency(int_0, bool_0, merkle_verifier_1, bytes_1, bytes_0)

def test_case_9():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    bool_0 = True
    int_0 = 1097
    int_1 = -1807
    bytes_0 = b'8\xb0\x85\xab\x10vk.\xcc\xd2'
    int_2 = 9
    with pytest.raises(ValueError):
        merkle_verifier_0.verify_tree_consistency(int_0, int_1, bytes_0, bool_0, int_2)

def test_case_10():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 8
    bytes_0 = b'\x98\x85\x13\xa1\xf9W\xff\x96\x87\xa9Q\x83\xb7\x00\xad\x88\xda'
    str_0 = ''
    var_0 = merkle_verifier_0.verify_tree_consistency(int_0, int_0, bytes_0, bytes_0, str_0)
    assert var_0 is True
    int_1 = 15
    bytes_1 = b'\r{@\x06\xef-\xfao\x11'
    dict_0 = {bytes_1: int_1, int_1: int_1, merkle_verifier_0: bytes_1, int_0: merkle_verifier_0, int_1: merkle_verifier_0}
    with pytest.raises(module_1.ProofError):
        merkle_verifier_0.verify_tree_consistency(int_0, int_1, bytes_1, bytes_1, dict_0)

def test_case_11():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = -401
    bytes_0 = b'\x00'
    with pytest.raises(ValueError):
        merkle_verifier_0.verify_tree_consistency(int_0, int_0, bytes_0, bytes_0, merkle_verifier_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 932
    bytes_0 = b"@'\xd2\x80\xba\x1a$"
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_1 = 24
    bytes_1 = b'"\xf0]3\xb5\xf2\x1a\x96B!\\\xf35'
    dict_0 = {bytes_1: merkle_verifier_0, bytes_0: bytes_0, int_0: int_0, int_1: int_1}
    merkle_verifier_0.verify_tree_consistency(int_1, int_0, int_1, bytes_1, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    bool_1 = True
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    var_0 = merkle_verifier_0.verify_tree_consistency(bool_0, bool_1, bool_1, bool_1, bool_0)
    assert var_0 is True
    int_0 = 15
    merkle_verifier_0.verify_tree_consistency(var_0, int_0, var_0, var_0, merkle_verifier_0)

def test_case_14():
    bool_0 = False
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    bool_1 = True
    var_0 = merkle_verifier_0.verify_tree_consistency(bool_0, bool_1, bool_1, merkle_verifier_0, bool_0)
    assert var_0 is True
    merkle_verifier_1 = module_0.MerkleVerifier()
    int_0 = 4
    int_1 = 5
    bytes_0 = b''
    with pytest.raises(module_1.ProofError):
        merkle_verifier_1.verify_tree_consistency(int_0, int_1, merkle_verifier_0, bytes_0, bytes_0)

def test_case_15():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    bytes_0 = b"T'\x91o\x16!\xb1\xfd\xe9g\x1a\xc4J\xbf\xc0"
    int_0 = 3156
    list_0 = [int_0, int_0]
    s_t_h_0 = module_2.STH(*list_0)
    with pytest.raises(ValueError):
        merkle_verifier_0.verify_leaf_hash_inclusion(bytes_0, int_0, int_0, s_t_h_0)

@pytest.mark.xfail(strict=True)
def test_case_16():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    merkle_verifier_1 = module_0.MerkleVerifier()
    int_0 = 1
    int_1 = 1000
    bytes_0 = b'|\x95}\x9b8\xd4\xa4\xf6\xa6\x03'
    dict_0 = {bytes_0: merkle_verifier_0, merkle_verifier_0: merkle_verifier_0, int_0: merkle_verifier_1, merkle_verifier_0: int_1}
    merkle_verifier_1.verify_tree_consistency(int_0, int_1, bytes_0, bytes_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 3156
    list_0 = [int_0, int_0]
    s_t_h_0 = module_2.STH(*list_0)
    bytes_0 = b'@\xfc'
    int_1 = 1701
    merkle_verifier_0.verify_leaf_hash_inclusion(bytes_0, int_1, list_0, s_t_h_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 3156
    list_0 = [int_0, int_0]
    s_t_h_0 = module_2.STH(*list_0)
    int_1 = 2148
    bytes_0 = b'@\xfc'
    merkle_verifier_0.verify_leaf_hash_inclusion(bytes_0, int_1, list_0, s_t_h_0)

def test_case_19():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 8
    int_1 = 15
    bytes_0 = b'\r{@\x06\xef-\xfao\x11'
    dict_0 = {bytes_0: int_1, int_1: int_1, bytes_0: bytes_0, merkle_verifier_0: bytes_0, int_0: int_0, int_0: int_0, int_0: merkle_verifier_0, int_1: merkle_verifier_0, merkle_verifier_0: bytes_0, int_1: merkle_verifier_0}
    with pytest.raises(module_1.ProofError):
        merkle_verifier_0.verify_tree_consistency(int_0, int_1, bytes_0, bytes_0, dict_0)

def test_case_20():
    merkle_verifier_0 = module_0.MerkleVerifier()
    assert f'{type(module_0.MerkleVerifier.audit_path_length).__module__}.{type(module_0.MerkleVerifier.audit_path_length).__qualname__}' == 'builtins.method'
    int_0 = 3156
    list_0 = [int_0, int_0]
    s_t_h_0 = module_2.STH(*list_0)
    int_1 = -1545
    bytes_0 = b'\xb5\xb91\xbe\xca2'
    with pytest.raises(ValueError):
        merkle_verifier_0.verify_leaf_hash_inclusion(bytes_0, int_1, list_0, s_t_h_0)