# Automatically generated by Pynguin.
import pytest
import ledger.util as module_0
import collections as module_1
import builtins as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    int_0 = -1051
    var_0 = module_0.count_bits_set(bool_0)
    assert var_0 == 1
    tuple_0 = (int_0, var_0, var_0, var_0)
    module_0.isPowerOf2(tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.count_bits_set(none_type_0)
    assert var_0 == 0
    dict_0 = {var_0: var_0, var_0: none_type_0, var_0: var_0, none_type_0: none_type_0}
    module_0.count_bits_set(dict_0)

def test_case_2():
    bool_0 = True
    var_0 = module_0.highest_bit_set(bool_0)
    assert var_0 == 1

def test_case_3():
    f_0 = module_0.F.nodeHash
    none_type_0 = None
    var_0 = module_0.highest_bit_set(none_type_0)
    assert var_0 == 0
    with pytest.raises(TypeError):
        module_1.namedtuple(f_0, var_0, rename=f_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    consistency_verification_failed_0 = module_0.ConsistencyVerificationFailed()
    module_0.lowest_bit_set(consistency_verification_failed_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    exception_0 = module_2.Exception()
    module_0.highestPowerOf2LessThan(exception_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    var_0 = module_0.highestPowerOf2LessThan(bool_0)
    assert var_0 == 0
    int_0 = 345
    var_1 = module_0.count_bits_set(int_0)
    assert var_1 == 5
    var_2 = module_0.isPowerOf2(var_0)
    assert var_2 is False
    module_0.STH(*var_0, **var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -592
    var_0 = module_0.lowest_bit_set(int_0)
    assert var_0 == 5
    var_1 = module_0.isPowerOf2(var_0)
    assert var_1 is False
    var_2 = module_0.highest_bit_set(var_1)
    assert var_2 == 0
    str_0 = 'tK8'
    module_0.count_bits_set(str_0)