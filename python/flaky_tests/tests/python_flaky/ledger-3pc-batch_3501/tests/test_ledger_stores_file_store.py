# Automatically generated by Pynguin.
import pytest
import ledger.stores.file_store as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.put(file_store_0, file_store_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.get(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    file_store_0 = module_0.FileStore(bool_0, bool_0, bool_0, defaultFile=bool_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = file_store_0.is_valid_range()
    file_store_0.put(bool_0)

def test_case_3():
    bytes_0 = b'\xef9I/\xdf\x16\x81'
    file_store_0 = module_0.FileStore(bytes_0, bytes_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = file_store_0.__enter__()
    assert var_0.delimiter == '\t'
    assert var_0.lineSep == '\r\n'
    with pytest.raises(AssertionError):
        file_store_0.is_valid_range(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = (1061.01-1551.8349745822472j)
    file_store_0 = module_0.FileStore(complex_0, complex_0, storeContentHash=complex_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.appendNewLineIfReq()

def test_case_5():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '?m0ycbzI}3Zo)`5r\nD<]'
    int_0 = 99
    file_store_0 = module_0.FileStore(str_0, int_0, lineSep=int_0)
    assert file_store_0.delimiter == '\t'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.close()

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '~\x0c\x0cBUztJw~TV\ny <'
    bool_0 = True
    file_store_0 = module_0.FileStore(str_0, bool_0, bool_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = file_store_0.is_valid_range(bool_0, bool_0)
    file_store_0.reset()

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = file_store_0.__enter__()
    assert var_0.delimiter == '\t'
    assert var_0.lineSep == '\r\n'
    file_store_0.get(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    file_store_0 = module_0.FileStore(bool_1, bool_1, delimiter=bool_1)
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.__exit__(bool_0, bool_0, none_type_0)

def test_case_10():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        file_store_0.put(file_store_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    dict_0 = {}
    bool_0 = True
    file_store_0 = module_0.FileStore(dict_0, dict_0, bool_0, ensureDurability=dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = file_store_0.is_valid_range(file_store_0)
    file_store_0.put(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '~\x0c\x0cBUztJw~TV\ny <'
    bool_0 = True
    file_store_0 = module_0.FileStore(str_0, bool_0, bool_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = file_store_0.is_valid_range(bool_0, bool_0)
    file_store_0.put(var_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    file_store_0 = module_0.FileStore(bool_0, bool_0, bool_0, defaultFile=bool_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.put(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0, defaultFile=dict_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    file_store_0.iterator(dict_0, file_store_0)

def test_case_15():
    dict_0 = {}
    file_store_0 = module_0.FileStore(dict_0, dict_0, delimiter=dict_0)
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    with pytest.raises(ValueError):
        file_store_0.iterator(dict_0, dict_0, dict_0)

def test_case_16():
    str_0 = '~\x0c\x0cBUztJw~TV\ny <'
    bool_0 = True
    file_store_0 = module_0.FileStore(str_0, bool_0, bool_0)
    assert file_store_0.delimiter == '\t'
    assert file_store_0.lineSep == '\r\n'
    assert f'{type(module_0.FileStore.lastKey).__module__}.{type(module_0.FileStore.lastKey).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.numKeys).__module__}.{type(module_0.FileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.FileStore.closed).__module__}.{type(module_0.FileStore.closed).__qualname__}' == 'builtins.property'
    str_1 = 'G}6='
    with pytest.raises(AssertionError):
        file_store_0.is_valid_range(str_0, str_1)