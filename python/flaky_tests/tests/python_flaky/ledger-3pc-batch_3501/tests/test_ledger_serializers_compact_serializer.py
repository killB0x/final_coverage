# Automatically generated by Pynguin.
import pytest
import ledger.serializers.compact_serializer as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\n\x07\n\x01'
    compact_serializer_0 = module_0.CompactSerializer(bytes_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == b'\n\x07\n\x01'
    assert compact_serializer_0.delimiter == '|'
    dict_0 = {compact_serializer_0: bytes_0, compact_serializer_0: bytes_0, compact_serializer_0: bytes_0, compact_serializer_0: compact_serializer_0}
    compact_serializer_0.serialize(dict_0)

def test_case_1():
    bytes_0 = b'\x00'
    compact_serializer_0 = module_0.CompactSerializer(bytes_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == b'\x00'
    assert compact_serializer_0.delimiter == '|'
    str_0 = 'dd>'
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    var_0 = compact_serializer_0.serialize(dict_0, dict_0)
    assert var_0 == b"b'\\x00'"

@pytest.mark.xfail(strict=True)
def test_case_2():
    compact_serializer_0 = module_0.CompactSerializer()
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields is None
    assert compact_serializer_0.delimiter == '|'
    compact_serializer_0.serialize(compact_serializer_0, compact_serializer_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b''
    compact_serializer_0 = module_0.CompactSerializer()
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields is None
    assert compact_serializer_0.delimiter == '|'
    str_0 = 'Inconsistency: first root hash does not match. Expected hash: %s, computed hash: %s'
    compact_serializer_0.deserialize(bytes_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '~'
    compact_serializer_0 = module_0.CompactSerializer(str_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == '~'
    assert compact_serializer_0.delimiter == '|'
    compact_serializer_0.deserialize(str_0)

def test_case_5():
    compact_serializer_0 = module_0.CompactSerializer()
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields is None
    assert compact_serializer_0.delimiter == '|'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b''
    compact_serializer_0 = module_0.CompactSerializer(bytes_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == b''
    assert compact_serializer_0.delimiter == '|'
    var_0 = compact_serializer_0.deserialize(bytes_0)
    compact_serializer_1 = module_0.CompactSerializer()
    assert compact_serializer_1.delimiter == '|'
    var_1 = compact_serializer_0.serialize(compact_serializer_0, bytes_0, var_0)
    assert var_1 == ''
    compact_serializer_1.serialize(var_1, toBytes=var_0)

def test_case_7():
    bytes_0 = b''
    compact_serializer_0 = module_0.CompactSerializer()
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields is None
    assert compact_serializer_0.delimiter == '|'
    none_type_0 = None
    compact_serializer_1 = module_0.CompactSerializer(none_type_0)
    assert f'{type(compact_serializer_1).__module__}.{type(compact_serializer_1).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_1.fields is None
    assert compact_serializer_1.delimiter == '|'
    str_0 = 'R3rq|ANB7'
    var_0 = compact_serializer_0.deserialize(bytes_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\x02'
    compact_serializer_0 = module_0.CompactSerializer(bytes_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == b'\x02'
    assert compact_serializer_0.delimiter == '|'
    str_0 = 'dd>'
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    compact_serializer_0.serialize(dict_0, dict_0)

def test_case_9():
    str_0 = '3U'
    compact_serializer_0 = module_0.CompactSerializer()
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields is None
    assert compact_serializer_0.delimiter == '|'
    dict_0 = {}
    var_0 = compact_serializer_0.serialize(dict_0, str_0)
    assert var_0 == b'|'

def test_case_10():
    bytes_0 = b''
    compact_serializer_0 = module_0.CompactSerializer(bytes_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == b''
    assert compact_serializer_0.delimiter == '|'
    str_0 = 'n8E0>`V-IW\rbT!.up'
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    var_0 = compact_serializer_0.serialize(dict_0, dict_0)
    assert var_0 == b''

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '3U'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    compact_serializer_0 = module_0.CompactSerializer()
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields is None
    assert compact_serializer_0.delimiter == '|'
    compact_serializer_0.deserialize(str_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b''
    compact_serializer_0 = module_0.CompactSerializer(bytes_0)
    assert f'{type(compact_serializer_0).__module__}.{type(compact_serializer_0).__qualname__}' == 'ledger.serializers.compact_serializer.CompactSerializer'
    assert compact_serializer_0.fields == b''
    assert compact_serializer_0.delimiter == '|'
    str_0 = '..'
    var_0 = compact_serializer_0.serialize(compact_serializer_0, toBytes=bytes_0)
    assert var_0 == ''
    compact_serializer_0.deserialize(bytes_0, str_0)