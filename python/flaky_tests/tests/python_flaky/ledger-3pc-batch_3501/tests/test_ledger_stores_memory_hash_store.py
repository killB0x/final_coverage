# Automatically generated by Pynguin.
import pytest
import ledger.stores.memory_hash_store as module_0

def test_case_0():
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = memory_hash_store_0.writeLeaf(none_type_0)
    memory_hash_store_1 = module_0.MemoryHashStore()
    var_1 = memory_hash_store_1.close()
    var_1.readNode(none_type_0)

def test_case_2():
    complex_0 = (3318.547+1389.6j)
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = memory_hash_store_0.writeNode(complex_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = memory_hash_store_0.writeLeaf(memory_hash_store_0)
    memory_hash_store_0.readLeaf(memory_hash_store_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    memory_hash_store_1 = module_0.MemoryHashStore()
    memory_hash_store_0.readNode(memory_hash_store_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    complex_0 = (2319.1-2120j)
    memory_hash_store_0.readLeafs(complex_0, memory_hash_store_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = memory_hash_store_0.readNodes(bool_0, bool_0)
    var_0.reset()

@pytest.mark.xfail(strict=True)
def test_case_7():
    memory_hash_store_0 = module_0.MemoryHashStore()
    assert f'{type(module_0.MemoryHashStore.leafCount).__module__}.{type(module_0.MemoryHashStore.leafCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.nodeCount).__module__}.{type(module_0.MemoryHashStore.nodeCount).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.MemoryHashStore.closed).__module__}.{type(module_0.MemoryHashStore.closed).__qualname__}' == 'builtins.property'
    var_0 = memory_hash_store_0.writeNode(memory_hash_store_0)
    var_1 = memory_hash_store_0.close()
    var_1.readLeafs(var_1, var_1)