# Automatically generated by Pynguin.
import pytest
import ledger.stores.chunked_file_store as module_0
import ledger.stores.file_store as module_1
import builtins as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.ChunkedFileStore(none_type_0, none_type_0, defaultFile=none_type_0)

def test_case_1():
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.ChunkedFileStore(none_type_0, none_type_0, chunkStoreConstructor=none_type_0, defaultFile=none_type_0)

def test_case_2():
    str_0 = '%s,%s not a valid range over [0,%s]'
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, defaultFile=str_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == '%s,%s not a valid range over [0,%s]/%s,%s not a valid range over [0,%s]'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == '%s,%s not a valid range over [0,%s]'
    assert chunked_file_store_0.dbName == '%s,%s not a valid range over [0,%s]'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'

def test_case_3():
    str_0 = ',SmB$'
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash == ',SmB$'
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == ',SmB$/,SmB$'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == ',SmB$'
    assert chunked_file_store_0.dbName == ',SmB$'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '3\r&Z5r<6'
    module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    str_0 = 'm|+yqVQ\tN:?8`)-'
    str_1 = '<GX'
    bool_0 = True
    bool_1 = True
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_1, bool_0, bool_1, bool_0, defaultFile=none_type_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is True
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize is True
    assert chunked_file_store_0.itemNum == 2
    assert chunked_file_store_0.dataDir == 'm|+yqVQ\tN:?8`)-/<GX'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.dbDir == 'm|+yqVQ\tN:?8`)-'
    assert chunked_file_store_0.dbName == '<GX'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    none_type_1 = chunked_file_store_0.put(str_0)
    none_type_2 = None
    bool_2 = False
    file_store_0 = module_1.FileStore(str_1, none_type_2, storeContentHash=none_type_2, ensureDurability=bool_2)
    file_store_0.close()

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '8.\x0cJX6UHLCi&b{I;{[6;'
    bool_0 = False
    module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0, ensureDurability=bool_0)
    var_0 = chunked_file_store_0.iterator(includeValue=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    str_0 = '8.\x0cJX6UHLCi&b{I;{[6;'
    bool_1 = False
    module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0, ensureDurability=bool_1)
    var_0 = chunked_file_store_0.iterator(includeValue=bool_0)

def test_case_8():
    none_type_0 = None
    str_0 = 'm|+yqVQ\tN:?8`)-'
    bool_0 = True
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, bool_0, bool_0, bool_0, defaultFile=none_type_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is True
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize is True
    assert chunked_file_store_0.itemNum == 2
    assert chunked_file_store_0.dataDir == 'm|+yqVQ\tN:?8`)-/m|+yqVQ\tN:?8`)-'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.dbDir == 'm|+yqVQ\tN:?8`)-'
    assert chunked_file_store_0.dbName == 'm|+yqVQ\tN:?8`)-'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    none_type_1 = chunked_file_store_0.put(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '3\r&Z5r<6'
    module_0.ChunkedFileStore(str_0, str_0)
    var_0 = chunked_file_store_0.appendNewLineIfReq()

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '8.\x0cJX6UHLCi&b{I;{[6;'
    bool_0 = False
    module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0, ensureDurability=bool_0)
    var_0 = chunked_file_store_0.reset()
    var_1 = var_0.__enter__()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    str_0 = '8.\x0cJX6UHLCi&b{I;{[6;'
    bool_1 = False
    module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0, ensureDurability=bool_1)
    var_0 = chunked_file_store_0.close()
    var_1 = chunked_file_store_0.iterator(includeValue=bool_0)

def test_case_12():
    str_0 = 'O]].)85hgh+['
    bool_0 = False
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, ensureDurability=bool_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is False
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == 'O]].)85hgh+[/O]].)85hgh+['
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == 'O]].)85hgh+['
    assert chunked_file_store_0.dbName == 'O]].)85hgh+['
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = chunked_file_store_0.iterator(bool_0)
    object_0 = module_2.object(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = '3\r&Z5r<6'
    module_0.ChunkedFileStore(str_0, str_0)
    none_type_0 = chunked_file_store_0.open()

def test_case_14():
    str_0 = '%s,%s not a valid range over [0,%s]'
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, defaultFile=str_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == '%s,%s not a valid range over [0,%s]/%s,%s not a valid range over [0,%s]'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == '%s,%s not a valid range over [0,%s]'
    assert chunked_file_store_0.dbName == '%s,%s not a valid range over [0,%s]'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    str_0 = 'v`u2'
    bool_1 = True
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, ensureDurability=bool_1)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == 'v`u2/v`u2'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == 'v`u2'
    assert chunked_file_store_0.dbName == 'v`u2'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = chunked_file_store_0.get_range(end=bool_0)
    var_1 = chunked_file_store_0.get_range(var_0, bool_1)
    var_2 = chunked_file_store_0.close()
    assert chunked_file_store_0.itemNum is None
    assert chunked_file_store_0.currentChunk is None
    assert chunked_file_store_0.currentChunkIndex is None
    var_3 = chunked_file_store_0.close()
    var_3.iterator()

def test_case_16():
    bool_0 = True
    str_0 = '8.\x0cJXUHL`Ci&b{I;{[6;'
    bool_1 = False
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, storeContentHash=str_0, ensureDurability=bool_1)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash == '8.\x0cJXUHL`Ci&b{I;{[6;'
    assert chunked_file_store_0.ensureDurability is False
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == '8.\x0cJXUHL`Ci&b{I;{[6;/8.\x0cJXUHL`Ci&b{I;{[6;'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == '8.\x0cJXUHL`Ci&b{I;{[6;'
    assert chunked_file_store_0.dbName == '8.\x0cJXUHL`Ci&b{I;{[6;'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = chunked_file_store_0.get(bool_0)

def test_case_17():
    str_0 = 'Starting lederw...'
    bool_0 = False
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, chunkSize=bool_0, ensureDurability=bool_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is False
    assert chunked_file_store_0.chunkSize is False
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == 'Starting lederw.../Starting lederw...'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == 'Starting lederw...'
    assert chunked_file_store_0.dbName == 'Starting lederw...'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    none_type_0 = chunked_file_store_0.reset()
    str_1 = chunked_file_store_0.get(bool_0)
    with pytest.raises(ValueError):
        chunked_file_store_0.put(str_1)

def test_case_18():
    none_type_0 = None
    str_0 = 'v`u2'
    bool_0 = False
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, ensureDurability=bool_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is False
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == 'v`u2/v`u2'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == 'v`u2'
    assert chunked_file_store_0.dbName == 'v`u2'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = chunked_file_store_0.iterator()
    var_1 = chunked_file_store_0.reset()
    var_2 = chunked_file_store_0.get_range()
    with pytest.raises(ValueError):
        chunked_file_store_0.iterator(none_type_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    str_0 = 'vuu2'
    bool_1 = True
    none_type_0 = None
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, chunkSize=bool_1, ensureDurability=none_type_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is None
    assert chunked_file_store_0.chunkSize is True
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == 'vuu2/vuu2'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == 'vuu2'
    assert chunked_file_store_0.dbName == 'vuu2'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    none_type_1 = chunked_file_store_0.reset()
    str_1 = chunked_file_store_0.get(bool_0)
    var_0 = chunked_file_store_0.get_range(str_0)
    var_1 = chunked_file_store_0.iterator()
    var_2 = chunked_file_store_0.appendNewLineIfReq()
    var_1.get(none_type_1)

def test_case_20():
    str_0 = '\n        Removes all data from hash store\n\n        :return: True if completed successfully\n        '
    bool_0 = True
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, ensureDurability=bool_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is False
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize == 1000
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == '\n        Removes all data from hash store\n\n        :return: True if completed successfully\n        /\n        Removes all data from hash store\n\n        :return: True if completed successfully\n        '
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == '\n        Removes all data from hash store\n\n        :return: True if completed successfully\n        '
    assert chunked_file_store_0.dbName == '\n        Removes all data from hash store\n\n        :return: True if completed successfully\n        '
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'
    var_0 = chunked_file_store_0.iterator()
    object_0 = module_2.object(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'Save this tree into a dumb data object for serialisation.\n\n        The object must have attributes tree_size:int and hashes:list.\n        '
    str_1 = '5uW'
    module_0.ChunkedFileStore(str_0, str_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'Save this tWee into a dumb data object for serialisation9\n\n        The object must have attributes tree_size:int and hashes:list.\n        '
    str_1 = 'ko{[:3rlfe{>#w'
    bool_0 = True
    module_0.ChunkedFileStore(str_1, str_1, ensureDurability=bool_0)
    var_0 = chunked_file_store_0.appendNewLineIfReq()
    none_type_0 = chunked_file_store_0.put(str_0, str_0)
    str_2 = chunked_file_store_0.get(bool_0)

def test_case_23():
    str_0 = 'xkQp,"\'Ry\x0b2X,H'
    bool_0 = True
    int_0 = -531
    chunked_file_store_0 = module_0.ChunkedFileStore(str_0, str_0, bool_0, chunkSize=int_0, defaultFile=str_0)
    assert f'{type(chunked_file_store_0).__module__}.{type(chunked_file_store_0).__qualname__}' == 'ledger.stores.chunked_file_store.ChunkedFileStore'
    assert chunked_file_store_0.delimiter == '\t'
    assert chunked_file_store_0.lineSep == '\r\n'
    assert chunked_file_store_0.isLineNoKey is True
    assert chunked_file_store_0.storeContentHash is True
    assert chunked_file_store_0.ensureDurability is True
    assert chunked_file_store_0.chunkSize == -531
    assert chunked_file_store_0.itemNum == 1
    assert chunked_file_store_0.dataDir == 'xkQp,"\'Ry\x0b2X,H/xkQp,"\'Ry\x0b2X,H'
    assert f'{type(chunked_file_store_0.currentChunk).__module__}.{type(chunked_file_store_0.currentChunk).__qualname__}' == 'ledger.stores.text_file_store.TextFileStore'
    assert chunked_file_store_0.currentChunkIndex == 1
    assert chunked_file_store_0.dbDir == 'xkQp,"\'Ry\x0b2X,H'
    assert chunked_file_store_0.dbName == 'xkQp,"\'Ry\x0b2X,H'
    assert module_0.ChunkedFileStore.firstChunkIndex == 1
    assert f'{type(module_0.ChunkedFileStore.numKeys).__module__}.{type(module_0.ChunkedFileStore.numKeys).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.ChunkedFileStore.closed).__module__}.{type(module_0.ChunkedFileStore.closed).__qualname__}' == 'builtins.property'