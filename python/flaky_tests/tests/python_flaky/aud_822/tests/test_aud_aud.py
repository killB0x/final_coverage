# Automatically generated by Pynguin.
import pytest
import aud.aud as module_0
import posixpath as module_1
import builtins as module_2

def test_case_0():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0

def test_case_1():
    int_0 = 28
    var_0 = module_0.bit_depth(int_0)
    assert var_0 == 28

def test_case_2():
    str_0 = 'Ret&e$ve extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.copy(str_0)
    assert var_0 is False
    var_1 = dir_0.afx_gain()
    var_2 = dir_0.convert_to_flac(var_0, tags=var_0)
    assert var_2 is False

@pytest.mark.xfail(strict=True)
def test_case_3():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_invert_stereo_phase()
    assert var_0 is True
    dir_0.get_single(dir_0)

def test_case_4():
    str_0 = 'Retreive extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.move(str_0)
    assert var_0 is True
    assert len(dir_0) == 4

def test_case_5():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.name_iterate()

def test_case_6():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_pad()
    assert var_0 is True

def test_case_7():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_normalize()
    assert var_0 is True
    var_1 = dir_0.afx_gain()

def test_case_8():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_wav()
    assert var_0 is True

def test_case_9():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.zip(dir_0)
    assert var_0 is False

def test_case_10():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_normalize()
    assert var_0 is True

def test_case_11():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_stereo()
    assert var_0 is True
    var_1 = dir_0.convert_to_wav()
    assert var_1 is True

def test_case_12():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_flac()
    assert var_0 is True

def test_case_13():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_fade(dir_0)
    assert var_0 is True

def test_case_14():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.get_all()

@pytest.mark.xfail(strict=True)
def test_case_15():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    dir_1 = dir_0.config_get_denylist()
    dir_1.name_iterate()

def test_case_16():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    dir_1 = module_0.Dir(_extensions=dir_0)
    assert f'{type(dir_1).__module__}.{type(dir_1).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_1) == 0

def test_case_17():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_invert_stereo_phase()
    assert var_0 is True

def test_case_18():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_lpf(dir_0)
    assert var_0 is True

def test_case_19():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_raw(bit_depth=dir_0)
    assert var_0 is True

def test_case_20():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.name_lower()

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '[LH~GG2gi,'
    none_type_0 = None
    dir_0 = module_0.Dir(_denylist=none_type_0, _allowlist=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 2
    var_0 = dir_0.afx_pad()
    assert var_0 is False
    var_1 = dir_0.convert_to_stereo()
    assert var_1 is False
    var_0.afx_normalize(passes=var_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.export_for(str_0, str_0)
    assert var_0 is False
    var_1 = dir_0.afx_watermark(dir_0, str_0, var_0)
    assert var_1 is False
    var_2 = dir_0.config_get_extensions()
    var_3 = module_0.bit_depth(var_0)
    assert var_3 is False
    dir_0.convert_to_mp3(bit_depth=dir_0)

def test_case_23():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to(sample_rate=dir_0, bit_depth=dir_0)
    assert var_0 is True

def test_case_24():
    str_0 = 'B'
    var_0 = module_0.bit_depth(str_0)
    assert var_0 == 'B'
    dir_0 = module_0.Dir(_denylist=var_0, _allowlist=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_1 = dir_0.afx_gain()
    assert var_1 is True
    var_2 = dir_0.convert_to()
    assert var_2 is False

def test_case_25():
    str_0 = 'FB\x0b5BCZxAs\x0bQ8c">,"'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 4

def test_case_26():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.name_upper()

def test_case_27():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.is_denylisted(dir_0)
    assert var_0 is False

def test_case_28():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_hpf()
    var_1 = module_0.bit_depth(var_0)
    assert var_1 is True

def test_case_29():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.config_get_allowlist()
    var_1 = dir_0.convert_to_flac(dir_0)
    assert var_1 is True
    var_2 = dir_0.afx_lpf(var_1)
    var_3 = dir_0.afx_pad(var_1)
    assert var_3 is True

def test_case_30():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_strip_silence(dir_0, padding=dir_0)
    assert var_0 is True

def test_case_31():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_wav()
    assert var_0 is True
    var_1 = dir_0.afx_lpf(var_0)

def test_case_32():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.name_replace_spaces()
    assert var_0 is True

def test_case_33():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.config_get_extensions()
    var_1 = dir_0.afx_fade(dir_0)
    assert var_1 is True

def test_case_34():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_mono()
    assert var_0 is True

def test_case_35():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_gain(dir_0)
    assert var_0 is True

def test_case_36():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_mp3(dir_0, cover=dir_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_37():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    dir_0.afx_join(dir_0)

def test_case_38():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_invert_stereo_phase()
    assert var_0 is True
    var_1 = dir_0.afx_hpf(var_0)

@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "I'jR"
    var_0 = module_0.bit_depth(str_0)
    assert var_0 == "I'jR"
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_1 = dir_0.name_append(var_0)
    assert var_1 is True
    var_2 = dir_0.afx_invert_stereo_phase(str_0)
    assert var_2 is True
    var_2.afx_strip_silence(str_0, padding=var_2)

@pytest.mark.xfail(strict=True)
def test_case_40():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.name_lower()
    dir_0.config_set_allowlist(regex=var_0)

def test_case_41():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    str_0 = 'olHC1vHt<Y7IG|c'
    var_0 = dir_0.name_append(str_0)
    assert var_0 is True

@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "I'9j:R"
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.config_set_allowlist(regex=str_0)
    var_0.__del__()

def test_case_43():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_raw()
    assert var_0 is True
    int_0 = 16
    var_1 = module_0.bit_depth(int_0)
    assert var_1 == 2

@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = "I'9j:R"
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.config_set_allowlist(regex=str_0)
    var_1 = dir_0.name_replace_spaces(str_0)
    assert var_1 is True
    var_2 = dir_0.is_denylisted(str_0)
    assert var_2 is False
    var_2.afx_hpf()

@pytest.mark.xfail(strict=True)
def test_case_45():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    str_0 = 'Retreive extensions'
    dir_1 = module_0.Dir(_logfile=str_0, _allowlist=str_0)
    assert len(dir_1) == 1
    var_0 = dir_1.convert_to_mono()
    assert var_0 is False
    var_1 = dir_1.convert_to_flac(cover=var_0)
    assert var_1 is False
    var_2 = module_0.bit_depth(str_0)
    assert var_2 == 'Retreive extensions'
    var_3 = dir_1.config_set_log_file()
    var_3.__enter__()

def test_case_46():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0

def test_case_47():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_raw()
    assert var_0 is True
    var_1 = dir_0.afx_pad(out_pad=var_0)
    assert var_1 is True
    int_0 = 24
    var_2 = dir_0.convert_to_flac(var_0, tags=var_1)
    assert var_2 is True
    var_3 = module_0.bit_depth(int_0)
    assert var_3 == 4
    var_4 = dir_0.convert_to_mp3()
    assert var_4 is True

def test_case_48():
    str_0 = 'Ret&e$ve extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.copy(str_0)
    assert var_0 is False
    var_1 = dir_0.afx_gain()
    var_2 = dir_0.convert_to_flac(var_0, tags=var_0)
    assert var_2 is False

@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = 'Ret&e$ve extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.copy(str_0)
    assert var_0 is False
    var_0.afx_invert_stereo_phase(var_0)

@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.zip(str_0)
    assert var_0 is True
    str_0.name_upper()

@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.__iter__()
    assert len(var_0) == 0
    var_1 = var_0.name_upper()
    assert var_1 is True
    var_1.write(dir_0, compresslevel=var_0)

@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.__iter__()
    assert len(var_0) == 0
    var_1 = var_0.name_upper()
    assert var_1 is True
    var_2 = dir_0.afx_strip_silence(silence_threshold=var_1)
    assert var_2 is True
    var_3 = var_0.afx_gain()
    var_1.copy(var_2)

@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    bool_0 = True
    dir_0.afx_join(bool_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.__iter__()
    assert len(var_0) == 0
    var_1 = var_0.name_upper()
    assert var_1 is True
    var_2 = dir_0.name_append(str_0)
    assert var_2 is True
    var_2.afx_invert_stereo_phase()

@pytest.mark.xfail(strict=True)
def test_case_55():
    str_0 = 'B'
    var_0 = module_1.abspath(str_0)
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_1 = dir_0.backup(var_0)
    assert var_1 is True
    var_0.extract(var_0)

@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = 'B'
    dir_0 = module_0.Dir(_denylist=str_0, _allowlist=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.name_lower()
    assert var_0 is False
    dir_0.move(dir_0)

def test_case_57():
    str_0 = 'Retreive extensions'
    var_0 = module_0.bit_depth(str_0)
    assert var_0 == 'Retreive extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_1 = dir_0.name_lower()
    var_2 = dir_0.move(str_0)
    assert var_2 is True
    assert len(dir_0) == 4
    var_3 = dir_0.is_denylisted(var_2)
    assert var_3 is True

@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    dir_1 = module_0.Dir(_extensions=dir_0, _denylist=dir_0)
    assert f'{type(dir_1).__module__}.{type(dir_1).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_1) == 0
    dir_1.copy(str_0)

@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = 'F\x0b@mh=%$zmYj?B'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.export_for(str_0, str_0)
    assert var_0 is False
    var_1 = dir_0.convert_to_raw(bit_depth=str_0, cover=str_0)
    assert var_1 is False
    var_1.read(var_1, var_0)

def test_case_60():
    str_0 = 'Ret&e$ve extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.copy(str_0)
    assert var_0 is False

def test_case_61():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.export_for(str_0, str_0)
    assert var_0 is False
    var_1 = dir_0.config_get_extensions()
    var_2 = module_0.bit_depth(var_0)
    assert var_2 is False

@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = '>'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 3
    var_0 = dir_0.export_for(str_0, str_0)
    assert var_0 is False
    var_1 = module_0.bit_depth(var_0)
    assert var_1 is False
    var_2 = dir_0.convert_to_wav()
    assert var_2 is False
    var_2.afx_lpf(str_0)

def test_case_63():
    str_0 = 'Ret&e$ve extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.afx_normalize(str_0)
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_64():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.afx_invert_stereo_phase()
    assert var_0 is True
    var_1 = dir_0.convert_to_mp3(var_0)
    assert var_1 is True
    var_2 = dir_0.afx_normalize()
    assert var_2 is True
    var_3 = dir_0.convert_to_raw(cover=dir_0)
    assert var_3 is True
    var_4 = dir_0.name_upper()
    int_0 = 8
    var_5 = module_0.bit_depth(int_0)
    assert var_5 == 1
    var_3.config_get_extensions()

@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.backup(str_0)
    assert var_0 is True
    var_1 = dir_0.export_for(str_0, str_0)
    assert var_1 is False
    var_1.__exit__(dir_0, var_1, str_0)

@pytest.mark.xfail(strict=True)
def test_case_66():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_allowlist=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 2
    dir_1 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_1).__module__}.{type(dir_1).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_1) == 0
    var_0 = dir_1.export_for(str_0, str_0)
    assert var_0 is False
    var_1 = dir_0.name_iterate(dir_1)
    assert var_1 is False
    var_0.name_upper()

@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = '>'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 3
    none_type_0 = None
    var_0 = dir_0.afx_fade()
    assert var_0 is False
    var_1 = dir_0.convert_to_raw(none_type_0)
    assert var_1 is False
    var_2 = dir_0.convert_to_wav()
    assert var_2 is False
    var_3 = dir_0.afx_normalize()
    assert var_3 is False
    var_4 = dir_0.export_for(str_0, str_0)
    assert var_4 is False
    none_type_0.convert_to_wav(cover=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = 'i.{G|g&%k"-<W\tF'
    dir_0 = module_0.Dir(_allowlist=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 2
    var_0 = dir_0.afx_invert_stereo_phase()
    assert var_0 is False
    dir_1 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_1).__module__}.{type(dir_1).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_1) == 0
    var_1 = dir_1.export_for(str_0, str_0)
    assert var_1 is False
    var_2 = dir_1.afx_strip_silence(silence_threshold=dir_1)
    assert var_2 is True
    var_1.afx_gain()

@pytest.mark.xfail(strict=True)
def test_case_69():
    dir_0 = module_0.Dir()
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.convert_to_flac(bit_depth=dir_0)
    assert var_0 is True
    var_1 = dir_0.afx_gain()
    var_2 = dir_0.config_set_denylist(var_0, var_1)
    assert var_2 is True
    var_3 = dir_0.__iter__()
    assert len(var_3) == 0
    var_4 = dir_0.afx_fade(dir_0)
    assert var_4 is True
    var_5 = var_3.name_iterate(var_1)
    dir_0.is_denylisted(var_3)

def test_case_70():
    str_0 = 'Retreive extensions'
    var_0 = module_0.bit_depth(str_0)
    assert var_0 == 'Retreive extensions'
    dir_0 = module_0.Dir(_extensions=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_1 = dir_0.name_lower()
    var_2 = dir_0.move(str_0)
    assert var_2 is True
    assert len(dir_0) == 4
    var_3 = module_2.object()

@pytest.mark.xfail(strict=True)
def test_case_71():
    str_0 = '{G|g&w%kF-W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    var_0 = dir_0.name_prepend(str_0)
    assert var_0 is True
    int_0 = 33
    var_1 = var_0.__hash__()
    var_2 = module_0.bit_depth(int_0)
    assert var_2 == 33
    list_0 = [int_0]
    var_2.apply_gain(list_0)

@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = '{G|&w%kF-W\tF'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 0
    int_0 = 32
    var_0 = dir_0.afx_normalize()
    assert var_0 is True
    var_1 = module_0.bit_depth(int_0)
    assert var_1 == 4
    var_1.is_denylisted(dir_0)

@pytest.mark.xfail(strict=True)
def test_case_73():
    int_0 = -2756
    str_0 = 'joined.wav'
    dir_0 = module_0.Dir(_allowlist=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    assert len(dir_0) == 1
    var_0 = dir_0.afx_gain(int_0)
    assert var_0 is False
    var_0.get_all()

@pytest.mark.xfail(strict=True)
def test_case_74():
    str_0 = '0GGAa\n!K%a'
    dir_0 = module_0.Dir(_extensions=str_0, _logfile=str_0)
    assert f'{type(dir_0).__module__}.{type(dir_0).__qualname__}' == 'aud.aud.Dir'
    var_0 = dir_0.name_prepend(str_0)
    assert var_0 is True
    assert len(dir_0) == 2
    int_0 = 33
    dir_0.log(int_0)