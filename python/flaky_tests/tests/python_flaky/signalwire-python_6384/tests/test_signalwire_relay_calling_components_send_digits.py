# Automatically generated by Pynguin.
import pytest
import signalwire.relay.calling.constants as module_0
import signalwire.relay.calling.components.send_digits as module_1

def test_case_0():
    method_0 = module_0.Method()
    send_digits_0 = module_1.SendDigits(method_0, method_0)
    assert f'{type(send_digits_0).__module__}.{type(send_digits_0).__qualname__}' == 'signalwire.relay.calling.components.send_digits.SendDigits'
    assert f'{type(send_digits_0.call).__module__}.{type(send_digits_0.call).__qualname__}' == 'signalwire.relay.calling.constants.Method'
    assert send_digits_0.state == ''
    assert send_digits_0.completed is False
    assert send_digits_0.successful is False
    assert send_digits_0.event is None
    assert f'{type(send_digits_0.digits).__module__}.{type(send_digits_0.digits).__qualname__}' == 'signalwire.relay.calling.constants.Method'
    assert f'{type(module_1.SendDigits.event_type).__module__}.{type(module_1.SendDigits.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.method).__module__}.{type(module_1.SendDigits.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.payload).__module__}.{type(module_1.SendDigits.payload).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    send_digits_0 = module_1.SendDigits(dict_0, dict_0)
    assert f'{type(send_digits_0).__module__}.{type(send_digits_0).__qualname__}' == 'signalwire.relay.calling.components.send_digits.SendDigits'
    assert send_digits_0.call == {}
    assert send_digits_0.state == ''
    assert send_digits_0.completed is False
    assert send_digits_0.successful is False
    assert send_digits_0.event is None
    assert send_digits_0.digits == {}
    assert f'{type(module_1.SendDigits.event_type).__module__}.{type(module_1.SendDigits.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.method).__module__}.{type(module_1.SendDigits.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.payload).__module__}.{type(module_1.SendDigits.payload).__qualname__}' == 'builtins.property'
    var_0 = send_digits_0.notification_handler(dict_0)
    send_digits_0.terminate()

def test_case_2():
    dict_0 = {}
    send_digits_0 = module_1.SendDigits(dict_0, dict_0)
    assert f'{type(send_digits_0).__module__}.{type(send_digits_0).__qualname__}' == 'signalwire.relay.calling.components.send_digits.SendDigits'
    assert send_digits_0.call == {}
    assert send_digits_0.state == ''
    assert send_digits_0.completed is False
    assert send_digits_0.successful is False
    assert send_digits_0.event is None
    assert send_digits_0.digits == {}
    assert f'{type(module_1.SendDigits.event_type).__module__}.{type(module_1.SendDigits.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.method).__module__}.{type(module_1.SendDigits.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.payload).__module__}.{type(module_1.SendDigits.payload).__qualname__}' == 'builtins.property'
    var_0 = send_digits_0.notification_handler(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    send_digits_0 = module_1.SendDigits(dict_0, dict_0)
    assert f'{type(send_digits_0).__module__}.{type(send_digits_0).__qualname__}' == 'signalwire.relay.calling.components.send_digits.SendDigits'
    assert send_digits_0.call == {}
    assert send_digits_0.state == ''
    assert send_digits_0.completed is False
    assert send_digits_0.successful is False
    assert send_digits_0.event is None
    assert send_digits_0.digits == {}
    assert f'{type(module_1.SendDigits.event_type).__module__}.{type(module_1.SendDigits.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.method).__module__}.{type(module_1.SendDigits.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_1.SendDigits.payload).__module__}.{type(module_1.SendDigits.payload).__qualname__}' == 'builtins.property'
    str_0 = 'state'
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    send_digits_0.notification_handler(dict_1)