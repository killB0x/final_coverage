# Automatically generated by Pynguin.
import pytest
import signalwire.relay.calling.components.play as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    tuple_0 = ()
    module_0.Play(tuple_0, tuple_0, tuple_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    dict_0 = {}
    play_0 = module_0.Play(dict_0, dict_0)
    assert f'{type(play_0).__module__}.{type(play_0).__qualname__}' == 'signalwire.relay.calling.components.play.Play'
    assert play_0.call == {}
    assert play_0.state == ''
    assert play_0.completed is False
    assert play_0.successful is False
    assert play_0.event is None
    assert play_0.play == []
    assert play_0.volume_value == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Play.event_type).__module__}.{type(module_0.Play.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Play.method).__module__}.{type(module_0.Play.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Play.payload).__module__}.{type(module_0.Play.payload).__qualname__}' == 'builtins.property'
    var_0 = play_0.notification_handler(dict_0)
    play_0.terminate()

def test_case_2():
    dict_0 = {}
    play_0 = module_0.Play(dict_0, dict_0)
    assert f'{type(play_0).__module__}.{type(play_0).__qualname__}' == 'signalwire.relay.calling.components.play.Play'
    assert play_0.call == {}
    assert play_0.state == ''
    assert play_0.completed is False
    assert play_0.successful is False
    assert play_0.event is None
    assert play_0.play == []
    assert play_0.volume_value == pytest.approx(0.0, abs=0.01, rel=0.01)
    assert f'{type(module_0.Play.event_type).__module__}.{type(module_0.Play.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Play.method).__module__}.{type(module_0.Play.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Play.payload).__module__}.{type(module_0.Play.payload).__qualname__}' == 'builtins.property'
    var_0 = play_0.notification_handler(dict_0)