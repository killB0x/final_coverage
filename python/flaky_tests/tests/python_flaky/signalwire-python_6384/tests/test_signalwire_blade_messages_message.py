# Automatically generated by Pynguin.
import pytest
import signalwire.blade.messages.message as module_0
import codecs as module_1

def test_case_0():
    message_0 = module_0.Message()
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_0.jsonrpc == '2.0'
    assert f'{type(module_0.Message.from_json).__module__}.{type(module_0.Message.from_json).__qualname__}' == 'builtins.method'

def test_case_1():
    message_0 = module_0.Message()
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_0.jsonrpc == '2.0'
    assert f'{type(module_0.Message.from_json).__module__}.{type(module_0.Message.from_json).__qualname__}' == 'builtins.method'
    var_0 = message_0.to_json()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '8}@}XIFQ>_q#:'
    bytes_0 = b'I\x96\xc4\x87\xcb\x08WZ\x10m`h'
    str_1 = 'result'
    message_0 = module_0.Message()
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_0.jsonrpc == '2.0'
    assert f'{type(module_0.Message.from_json).__module__}.{type(module_0.Message.from_json).__qualname__}' == 'builtins.method'
    dict_0 = {str_0: bytes_0, str_1: str_1}
    message_1 = module_0.Message(**dict_0)
    assert f'{type(message_1).__module__}.{type(message_1).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_1.jsonrpc == '2.0'
    assert message_1.result == 'result'
    var_0 = message_1.to_json()
    var_0.__bool__()

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '8}@}XIFQ>_q#:'
    str_1 = 'mtjo_'
    message_0 = module_0.Message()
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_0.jsonrpc == '2.0'
    assert f'{type(module_0.Message.from_json).__module__}.{type(module_0.Message.from_json).__qualname__}' == 'builtins.method'
    str_2 = 'error'
    str_3 = '=YG,AC^wH='
    str_4 = 'BMR'
    dict_0 = {str_2: message_0, str_3: str_3, str_2: str_2, str_4: str_1}
    message_1 = module_0.Message(**dict_0)
    assert f'{type(message_1).__module__}.{type(message_1).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_1.jsonrpc == '2.0'
    assert message_1.error == 'error'
    message_2 = module_1.make_identity_dict(str_0)
    message_2.to_json()

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'paas'
    bytes_0 = b'\xdaHc7L'
    str_1 = 'params'
    dict_0 = {str_0: str_0, str_0: bytes_0, str_1: str_1}
    message_0 = module_0.Message(**dict_0)
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_0.jsonrpc == '2.0'
    assert message_0.params == 'params'
    assert f'{type(module_0.Message.from_json).__module__}.{type(module_0.Message.from_json).__qualname__}' == 'builtins.method'
    message_0.to_json(**dict_0)

def test_case_5():
    str_0 = 'B6nR+JTo'
    message_0 = module_0.Message()
    assert f'{type(message_0).__module__}.{type(message_0).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_0.jsonrpc == '2.0'
    assert f'{type(module_0.Message.from_json).__module__}.{type(module_0.Message.from_json).__qualname__}' == 'builtins.method'
    str_1 = '.resume'
    str_2 = 'method'
    message_1 = module_0.Message()
    assert message_1.jsonrpc == '2.0'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_0: str_2}
    message_2 = module_0.Message(**dict_0)
    assert f'{type(message_2).__module__}.{type(message_2).__qualname__}' == 'signalwire.blade.messages.message.Message'
    assert message_2.jsonrpc == '2.0'
    assert message_2.method == 'B6nR+JTo'
    message_3 = module_0.Message()
    assert message_3.jsonrpc == '2.0'
    var_0 = message_2.to_json()
    var_1 = message_2.to_json()
    var_2 = message_2.to_json()