# Automatically generated by Pynguin.
import pytest
import signalwire.relay.calling.components.detect as module_0
import signalwire.relay.calling.components.decorators as module_1

def test_case_0():
    int_0 = -768
    detect_0 = module_0.Detect(int_0, int_0, int_0, end_silence_timeout=int_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call == -768
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type == -768
    assert detect_0.detect == {'type': -768, 'params': {'end_silence_timeout': -768}}
    assert detect_0.timeout is None
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'

def test_case_1():
    none_type_0 = None
    detect_0 = module_0.Detect(none_type_0, none_type_0, digits=none_type_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call is None
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type is None
    assert detect_0.detect == {'type': None, 'params': {}}
    assert detect_0.timeout is None
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'

def test_case_2():
    float_0 = -4499.4
    detect_0 = module_0.Detect(float_0, float_0, machine_voice_threshold=float_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call == pytest.approx(-4499.4, abs=0.01, rel=0.01)
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type == pytest.approx(-4499.4, abs=0.01, rel=0.01)
    assert f'{type(detect_0.detect).__module__}.{type(detect_0.detect).__qualname__}' == 'builtins.dict'
    assert len(detect_0.detect) == 2
    assert detect_0.timeout is None
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'

def test_case_3():
    bool_0 = True
    detect_0 = module_0.Detect(bool_0, bool_0, bool_0, machine_words_threshold=bool_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call is True
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type is True
    assert detect_0.detect == {'type': True, 'params': {'machine_words_threshold': True}}
    assert detect_0.timeout is None
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'

def test_case_4():
    bytes_0 = b'\xab+'
    detect_0 = module_0.Detect(bytes_0, bytes_0, bytes_0, machine_voice_threshold=bytes_0, tone=bytes_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call == b'\xab+'
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type == b'\xab+'
    assert detect_0.detect == {'type': b'\xab+', 'params': {'machine_voice_threshold': b'\xab+', 'tone': b'\xab+'}}
    assert detect_0.timeout is None
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'

def test_case_5():
    set_0 = set()
    detect_0 = module_0.Detect(set_0, set_0, timeout=set_0, initial_timeout=set_0, digits=set_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call == {*()}
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type == {*()}
    assert detect_0.detect == {'type': {*()}, 'params': {'initial_timeout': {*()}, 'digits': {*()}}}
    assert detect_0.timeout == {*()}
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    detect_0 = module_0.Detect(none_type_0, none_type_0, digits=none_type_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call is None
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type is None
    assert detect_0.detect == {'type': None, 'params': {}}
    assert detect_0.timeout is None
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'
    detect_0.notification_handler(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    none_type_0 = None
    detect_0 = module_0.Detect(none_type_0, bool_0, none_type_0, bool_0, bool_0, machine_words_threshold=none_type_0)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call is None
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type is False
    assert detect_0.detect == {'type': False, 'params': {'initial_timeout': False}}
    assert detect_0.timeout is False
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'
    detect_0.unregister()

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    none_type_0 = None
    dict_1 = {}
    detect_0 = module_0.Detect(dict_0, dict_1, dict_1, dict_1, dict_1)
    assert f'{type(detect_0).__module__}.{type(detect_0).__qualname__}' == 'signalwire.relay.calling.components.detect.Detect'
    assert detect_0.call == {}
    assert detect_0.state == ''
    assert detect_0.completed is False
    assert detect_0.successful is False
    assert detect_0.event is None
    assert detect_0.detect_type == {}
    assert detect_0.detect == {'type': {}, 'params': {'initial_timeout': {}}}
    assert detect_0.timeout == {}
    assert detect_0.result is None
    assert f'{type(module_0.Detect.event_type).__module__}.{type(module_0.Detect.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.method).__module__}.{type(module_0.Detect.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Detect.payload).__module__}.{type(module_0.Detect.payload).__qualname__}' == 'builtins.property'
    set_0 = detect_0.notification_handler(dict_0)
    module_1.stoppable(none_type_0)