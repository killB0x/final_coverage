# Automatically generated by Pynguin.
import pytest
import signalwire.relay.calling.components.tap as module_0

def test_case_0():
    bool_0 = True
    tap_0 = module_0.Tap(bool_0, bool_0, bool_0, target_port=bool_0, rate=bool_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call is True
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': True}}
    assert tap_0.device == {'type': True, 'params': {'port': 1, 'rate': 1}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'

def test_case_1():
    bool_0 = False
    tap_0 = module_0.Tap(bool_0, bool_0, bool_0, rate=bool_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call is False
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': False}}
    assert tap_0.device == {'type': False, 'params': {'rate': 0}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = 'Cc<g{]r'
    module_0.Tap(str_0, str_0, str_0, target_ptime=str_0, codec=str_0)

def test_case_3():
    int_0 = -711
    tap_0 = module_0.Tap(int_0, int_0, int_0, target_uri=int_0, rate=int_0, codec=int_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call == -711
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': -711}}
    assert tap_0.device == {'type': -711, 'params': {'uri': -711, 'rate': -711, 'codec': -711}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'

def test_case_4():
    none_type_0 = None
    tap_0 = module_0.Tap(none_type_0, none_type_0, none_type_0, target_port=none_type_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call is None
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': None}}
    assert tap_0.device == {'type': None, 'params': {}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'

def test_case_5():
    str_0 = 'jFv)ycq@#aPdxQ5p'
    tap_0 = module_0.Tap(str_0, str_0, str_0, str_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call == 'jFv)ycq@#aPdxQ5p'
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': 'jFv)ycq@#aPdxQ5p'}}
    assert tap_0.device == {'type': 'jFv)ycq@#aPdxQ5p', 'params': {'addr': 'jFv)ycq@#aPdxQ5p'}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    tap_0 = module_0.Tap(dict_0, dict_0, dict_0, dict_0, codec=dict_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call == {}
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': {}}}
    assert tap_0.device == {'type': {}, 'params': {'addr': {}, 'codec': {}}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'
    var_0 = tap_0.notification_handler(dict_0)
    tap_0.register()

def test_case_7():
    dict_0 = {}
    tap_0 = module_0.Tap(dict_0, dict_0, dict_0)
    assert f'{type(tap_0).__module__}.{type(tap_0).__qualname__}' == 'signalwire.relay.calling.components.tap.Tap'
    assert tap_0.call == {}
    assert tap_0.state == ''
    assert tap_0.completed is False
    assert tap_0.successful is False
    assert tap_0.event is None
    assert tap_0.tap == {'type': 'audio', 'params': {'direction': {}}}
    assert tap_0.device == {'type': {}, 'params': {}}
    assert f'{type(module_0.Tap.event_type).__module__}.{type(module_0.Tap.event_type).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.method).__module__}.{type(module_0.Tap.method).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.payload).__module__}.{type(module_0.Tap.payload).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.Tap.source_device).__module__}.{type(module_0.Tap.source_device).__qualname__}' == 'builtins.property'
    var_0 = tap_0.notification_handler(dict_0)