# Automatically generated by Pynguin.
import pytest
import ubersmith.utils as module_0
import urllib.parse as module_1
import builtins as module_2

def test_case_0():
    str_0 = 'uber.client_welcome_stats'
    with pytest.raises(TypeError):
        module_0.to_nested_php_args(str_0)

def test_case_1():
    str_0 = '=WlKbZU'
    var_0 = module_0.append_qs(str_0, str_0)
    assert var_0 == '=WlKbZU?=WlKbZU'

def test_case_2():
    dict_0 = {}
    var_0 = module_0.append_qs(dict_0, dict_0)
    assert var_0 == b''

def test_case_3():
    dict_0 = {}
    var_0 = module_0.urlencode_unicode(dict_0)
    assert var_0 == ''

def test_case_4():
    list_0 = []
    var_0 = module_0.urlencode_unicode(list_0)
    assert var_0 == ''

def test_case_5():
    str_0 = 'Z;k`uY|gB'
    with pytest.raises(TypeError):
        module_0.to_nested_php_args(str_0, str_0)

def test_case_6():
    str_0 = 'connection_class_id'
    var_0 = module_0.get_filename(str_0)

def test_case_7():
    none_type_0 = None
    var_0 = module_0.get_filename(none_type_0)

def test_case_8():
    str_0 = 'uber.client_welcome_stats'
    var_0 = module_0.prepend_base(str_0)

def test_case_9():
    none_type_0 = None
    var_0 = module_0.isstr(none_type_0)
    assert var_0 is False

def test_case_10():
    bool_0 = False
    with pytest.raises(TypeError):
        module_0.append_qs(bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    module_0.urlencode_unicode(bool_0)

def test_case_12():
    complex_0 = (1832.5+867j)
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    var_0 = module_0.urlencode_unicode(dict_0)
    assert var_0 == '%281832.5%2B867j%29=%281832.5%2B867j%29'

def test_case_13():
    list_0 = []
    var_0 = module_0.append_qs(list_0, list_0)
    assert var_0 == b''

def test_case_14():
    str_0 = 'a?c'
    var_0 = module_1.urlsplit(str_0)
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = module_0.to_nested_php_args(dict_0)
    var_2 = module_0.urlencode_unicode(var_1)
    assert var_2 == 'SplitResult%28scheme%3D%27%27%2C+netloc%3D%27%27%2C+path%3D%27a%27%2C+query%3D%27c%27%2C+fragment%3D%27%27%29=SplitResult%28scheme%3D%27%27%2C+netloc%3D%27%27%2C+path%3D%27a%27%2C+query%3D%27c%27%2C+fragment%3D%27%27%29'

def test_case_15():
    dict_0 = {}
    var_0 = module_0.to_nested_php_args(dict_0)

def test_case_16():
    list_0 = []
    var_0 = module_0.to_nested_php_args(list_0)

def test_case_17():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.urlencode_unicode(dict_0)
    assert var_0 == 'False=False'
    var_1 = module_0.isdict(var_0)
    str_0 = 'NZu7lLxHvn~z'
    var_2 = module_0.get_filename(str_0)
    var_3 = module_1.parse_qsl(var_0, var_0)
    var_4 = module_0.isdict(var_3)
    var_5 = module_0.append_qs(str_0, str_0)
    assert var_5 == 'NZu7lLxHvn~z'
    var_6 = module_0.isstr(var_3)
    var_7 = module_0.append_qs(str_0, var_3)
    assert var_7 == 'NZu7lLxHvn~z?False=False'
    object_0 = module_2.object()
    dict_1 = {var_0: var_3}
    var_8 = module_0.prepend_base(dict_1)
    var_9 = module_0.to_nested_php_args(dict_1)

def test_case_18():
    list_0 = []
    var_0 = module_0.to_nested_php_args(list_0, list_0)

def test_case_19():
    str_0 = '<D*UBe'
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_1 = 'NZu7lLxHvn~z'
    var_0 = module_0.append_qs(str_0, dict_0)
    assert var_0 == '<D*UBe?False=False'
    var_1 = module_0.prepend_base(dict_0)
    var_2 = module_0.append_qs(str_1, str_1)
    assert var_2 == 'NZu7lLxHvn~z'
    var_3 = module_0.prepend_base(str_0)
    object_0 = module_2.object()

def test_case_20():
    str_0 = '?c'
    var_0 = module_1.urlsplit(str_0)
    dict_0 = {var_0: var_0, var_0: var_0, str_0: str_0, var_0: var_0, var_0: var_0}
    var_1 = module_0.urlencode_unicode(dict_0)
    assert var_1 == 'SplitResult%28scheme%3D%27%27%2C+netloc%3D%27%27%2C+path%3D%27%27%2C+query%3D%27c%27%2C+fragment%3D%27%27%29=SplitResult%28scheme%3D%27%27%2C+netloc%3D%27%27%2C+path%3D%27%27%2C+query%3D%27c%27%2C+fragment%3D%27%27%29&%3Fc=%3Fc'

def test_case_21():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.urlencode_unicode(dict_0)
    assert var_0 == 'False=False'
    str_0 = 'NZu7lLxHvn~z'
    var_1 = module_0.append_qs(var_0, dict_0)
    assert var_1 == 'False=False?False=False'
    var_2 = module_0.get_filename(str_0)
    var_3 = module_0.get_filename(str_0)
    var_4 = module_1.urlsplit(str_0, var_0, str_0)
    var_5 = module_1.parse_qsl(var_0, var_4)
    var_6 = module_0.isdict(var_5)
    var_7 = module_0.prepend_base(dict_0)
    var_8 = module_0.append_qs(str_0, str_0)
    assert var_8 == 'NZu7lLxHvn~z'
    var_9 = module_0.isstr(var_5)
    var_10 = module_0.append_qs(str_0, var_5)
    assert var_10 == 'NZu7lLxHvn~z?False=False'
    var_11 = module_0.prepend_base(var_3)
    var_12 = module_0.prepend_base(var_9)
    var_13 = module_0.isdict(var_10)
    object_0 = module_2.object()
    var_14 = module_0.islist(var_2)
    var_15 = module_0.to_nested_php_args(var_5)

def test_case_22():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.urlencode_unicode(dict_0)
    assert var_0 == 'False=False'
    var_1 = module_0.to_nested_php_args(dict_0)
    str_0 = 'NZu7lLxHvn~z'
    var_2 = module_0.get_filename(str_0)
    var_3 = module_0.islist(str_0)
    var_4 = module_0.prepend_base(str_0)
    bool_1 = True
    var_5 = module_1.parse_qsl(var_0, var_4)
    var_6 = module_0.isdict(bool_1)
    var_7 = module_0.prepend_base(dict_0)
    var_8 = module_0.append_qs(str_0, str_0)
    assert var_8 == 'NZu7lLxHvn~z'
    var_9 = module_0.isstr(var_5)
    var_10 = module_0.append_qs(str_0, var_5)
    assert var_10 == 'NZu7lLxHvn~z?False=False'
    var_11 = module_0.prepend_base(var_9)
    var_12 = module_0.isdict(var_10)
    object_0 = module_2.object()
    var_13 = module_0.isstr(object_0)
    dict_1 = {var_4: var_0, var_9: var_1, var_4: var_8}
    var_14 = module_0.prepend_base(dict_1)
    var_15 = module_0.islist(var_2)
    var_16 = module_0.to_nested_php_args(dict_1)

def test_case_23():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.urlencode_unicode(dict_0)
    assert var_0 == 'False=False'
    var_1 = module_0.isdict(var_0)
    str_0 = 'NZu7lLxHvn~z'
    var_2 = module_0.isstr(bool_0)
    var_3 = module_0.append_qs(var_0, dict_0)
    assert var_3 == 'False=False?False=False'
    var_4 = module_0.get_filename(str_0)
    var_5 = module_0.get_filename(str_0)
    var_6 = module_0.prepend_base(var_3)
    var_7 = module_1.parse_qsl(var_0, var_6)
    var_8 = module_0.isdict(bool_0)
    var_9 = module_0.append_qs(str_0, str_0)
    assert var_9 == 'NZu7lLxHvn~z'
    none_type_0 = None
    var_10 = module_0.islist(none_type_0)
    var_11 = module_0.isstr(var_7)
    var_12 = module_0.append_qs(str_0, var_7)
    assert var_12 == 'NZu7lLxHvn~z?False=False'
    var_13 = module_0.prepend_base(var_5)
    var_14 = module_0.prepend_base(var_11)
    var_15 = module_0.prepend_base(var_6)
    object_0 = module_2.object()
    dict_1 = {var_6: var_7}
    var_16 = module_0.isstr(var_1)
    var_17 = module_0.append_qs(var_12, dict_1)
    with pytest.raises(TypeError):
        module_0.to_nested_php_args(var_17)

def test_case_24():
    str_0 = 'Z;k`uY|gB'
    var_0 = module_0.get_filename(str_0)

def test_case_25():
    str_0 = 'Z;hk`a=VuYPgB'
    var_0 = module_0.get_filename(str_0)