# Automatically generated by Pynguin.
import pytest
import zenoh.logger as module_0
import builtins as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b'\xec\x00\xaf\xf7\xa9\x9d\x87\x81\xef\xe9\x8b\xa1]\x93\xb8'
    bool_0 = False
    bool_1 = False
    a_p_i_logger_0 = module_0.APILogger(bool_0, bytes_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.warning(bool_1, bool_1)
    var_0.enable()

def test_case_1():
    tuple_0 = ()
    a_p_i_logger_0 = module_0.APILogger(tuple_0, tuple_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    a_p_i_logger_1 = module_0.APILogger(a_p_i_logger_0, tuple_0)
    var_0 = a_p_i_logger_0.disable()

def test_case_2():
    bytes_0 = b''
    a_p_i_logger_0 = module_0.APILogger(bytes_0, bytes_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'

@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    bytes_0 = b'\xfe\xc4\x8e\x13si\x10\xaa\xbb'
    complex_0 = (-2626.855118+861.3j)
    tuple_0 = (bytes_0, complex_0)
    none_type_0 = None
    a_p_i_logger_0 = module_0.APILogger(tuple_0, none_type_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.info(list_0, list_0)
    complex_1 = (266.7+2631.9j)
    int_0 = -2070
    a_p_i_logger_1 = module_0.APILogger(complex_1, complex_1)
    var_1 = a_p_i_logger_1.disable()
    var_2 = a_p_i_logger_1.warning(a_p_i_logger_1, complex_1)
    var_1.debug(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    a_p_i_logger_0 = module_0.APILogger(none_type_0, none_type_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.disable()
    object_0 = module_1.object()
    none_type_1 = None
    var_1 = a_p_i_logger_0.info(none_type_1, none_type_0)
    float_0 = 0.01
    var_2 = a_p_i_logger_0.error(none_type_1, float_0)
    str_0 = '-?MK=Cjp{ZI'
    a_p_i_logger_1 = module_0.APILogger(str_0, str_0)
    a_p_i_logger_2 = module_0.APILogger(a_p_i_logger_1, str_0)
    var_2.debug(var_2, str_0)

def test_case_5():
    tuple_0 = ()
    a_p_i_logger_0 = module_0.APILogger(tuple_0, tuple_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.warning(a_p_i_logger_0, tuple_0)
    a_p_i_logger_1 = module_0.APILogger(a_p_i_logger_0, tuple_0)
    var_1 = a_p_i_logger_0.disable()

@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\xb85'
    a_p_i_logger_0 = module_0.APILogger(bytes_0, bytes_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.error(bytes_0, bytes_0)
    var_0.disable()

def test_case_7():
    tuple_0 = ()
    a_p_i_logger_0 = module_0.APILogger(tuple_0, tuple_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.debug(tuple_0, a_p_i_logger_0)

def test_case_8():
    list_0 = []
    str_0 = 'MJbT|mypY"X?p4I'
    a_p_i_logger_0 = module_0.APILogger(list_0, str_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.enable()

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -2074
    a_p_i_logger_0 = module_0.APILogger(int_0, int_0)
    assert f'{type(a_p_i_logger_0).__module__}.{type(a_p_i_logger_0).__qualname__}' == 'zenoh.logger.APILogger'
    assert f'{type(module_0.APILogger.instance).__module__}.{type(module_0.APILogger.instance).__qualname__}' == 'zenoh.logger.APILogger.__SingletonLogger'
    assert f'{type(module_0.APILogger.instance.logger).__module__}.{type(module_0.APILogger.instance.logger).__qualname__}' == 'logging.Logger'
    var_0 = a_p_i_logger_0.disable()
    var_1 = a_p_i_logger_0.debug(var_0, var_0)
    none_type_0 = None
    a_p_i_logger_1 = module_0.APILogger(var_1, none_type_0)
    int_0.disable()