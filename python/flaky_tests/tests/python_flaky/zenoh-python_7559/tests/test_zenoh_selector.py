# Automatically generated by Pynguin.
import pytest
import zenoh.selector as module_0
import re as module_1

def test_case_0():
    str_0 = 'GDR<:'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 5

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.purge()
    var_0.get_optional_part()

@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.get_fragment()
    assert var_0 == 'ix'
    module_1.sub(var_0, str_0, selector_0, var_0, var_0)

def test_case_3():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20

@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.get_optional_part()
    assert var_0 == '#ix'
    var_1 = selector_0.get_fragment()
    assert var_1 == 'ix'
    module_1.sub(var_1, str_0, selector_0, var_1, var_1)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    module_1.sub(selector_0, str_0, selector_0, selector_0, selector_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 20
    bool_0.remove_prefix(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.__eq__(bool_0)
    assert var_0 is False
    var_0.to_selector(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.get_prefix()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.path.Path'
    assert len(var_0) == 17
    module_1.sub(var_0, str_0, selector_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'n$'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 2
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 2
    var_1 = var_0.get_predicate()
    var_1.is_valid(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.get_fragment()
    assert var_0 == 'ix'
    var_1 = selector_0.get_properties()
    module_1.sub(selector_0, var_0, str_0)

def test_case_11():
    str_0 = ''
    with pytest.raises(ValueError):
        module_0.Selector(str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 20
    var_1 = var_0.is_absolute()
    assert var_1 is False
    var_2 = var_0.is_prefixed_by_path(selector_0)
    var_2.is_prefixed_by_path(var_2)

@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.is_prefixed_by_path(bool_0)
    assert var_0 is False
    var_1 = selector_0.get_fragment()
    assert var_1 == 'ix'
    var_2 = selector_0.get_path()
    module_1.sub(selector_0, var_1, str_0)

def test_case_14():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.__str__()

@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.is_absolute()
    assert var_0 is False
    str_0.is_prefixed_by_path(selector_0)

def test_case_16():
    str_0 = '%{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 19
    var_0 = selector_0.dict_from_properties()
    var_1 = selector_0.__len__()

def test_case_17():
    str_0 = '%{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 19
    var_0 = selector_0.dict_from_properties()

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 20
    none_type_0 = None
    var_1 = selector_0.__repr__()
    var_0.is_valid(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = 'n$'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 2
    var_0 = selector_0.to_selector(selector_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 2
    var_1 = selector_0.get_path()
    assert var_1 == 'n$'
    var_2 = var_1.__eq__(var_1)
    none_type_0 = None
    var_1.is_valid(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 20
    var_1 = var_0.get_path()
    assert var_1 == '%y{p>E)qc-gcz&0Tk'
    var_2 = var_0.__eq__(var_0)
    assert var_2 is True
    selector_0.is_valid(var_2)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 20
    var_1 = var_0.is_absolute()
    assert var_1 is False
    var_2 = var_0.to_string()
    var_3 = var_0.is_prefixed_by_path(selector_0)
    var_3.is_prefixed_by_path(var_3)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '%y{p>E)qc-gcz&0Tk#ix'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 20
    var_0 = selector_0.is_path_unique()
    assert var_0 is True
    var_1 = selector_0.to_selector(str_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_1) == 20
    var_2 = var_1.dict_from_properties()
    var_3 = var_1.is_absolute()
    assert var_3 is False
    var_4 = selector_0.__repr__()
    var_5 = var_1.get_predicate()
    var_6 = var_1.get_predicate()
    module_0.Selector(var_5)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '/dev/log'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 8
    var_0 = selector_0.to_selector(str_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(var_0) == 8
    var_1 = var_0.is_prefixed_by_path(var_0)
    assert var_1 is True
    var_2 = selector_0.__str__()
    var_3 = var_0.dict_from_properties()
    var_4 = var_0.is_absolute()
    assert var_4 is True
    var_5 = selector_0.get_predicate()
    module_1.template(var_3)

def test_case_24():
    str_0 = 'I\t&"R0?a'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 8

def test_case_25():
    str_0 = 'jB.QM(AKaAQ,F3;ux?'
    selector_0 = module_0.Selector(str_0)
    assert f'{type(selector_0).__module__}.{type(selector_0).__qualname__}' == 'zenoh.selector.Selector'
    assert len(selector_0) == 18