# Automatically generated by Pynguin.
import pytest
import zenoh.workspace as module_0
import zenoh.net.binding as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.Workspace(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    workspace_0.get(var_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    workspace_0.register_eval(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    workspace_0.unsubscribe(workspace_0)

def test_case_4():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    with pytest.raises(NotImplementedError):
        workspace_0.update(workspace_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    workspace_0.remove(var_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    workspace_0.subscribe(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    workspace_0.put(var_0, workspace_0)

def test_case_8():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    var_1 = workspace_0.unregister_eval(var_0)
    assert var_1 is True

def test_case_9():
    var_0 = module_1.get_user_lib_path()
    workspace_0 = module_0.Workspace(var_0, var_0)
    var_1 = workspace_0.unregister_eval(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_1.get_lib_ext()
    workspace_0 = module_0.Workspace(var_0, var_0)
    var_1 = workspace_0.unregister_eval(var_0)
    assert var_1 is True
    var_2 = var_0.__add__(var_0)
    var_3 = var_2.islower()
    none_type_0 = None
    workspace_0.subscribe(var_2, none_type_0)