# Automatically generated by Pynguin.
import pytest
import platform as module_0
import zenoh.value as module_1
import zenoh.encoding as module_2
import zenoh.core.zexception as module_3

def test_case_0():
    var_0 = module_0.win32_is_iot()
    value_0 = module_1.Value(var_0, var_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding is False
    assert value_0.value is False
    assert value_0.raw_format == ''

@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.win32_edition()
    value_0 = module_1.Value(var_0, var_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value is None
    assert value_0.raw_format == ''
    value_0.from_zn_resource(var_0, value_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    value_0 = module_1.Value(none_type_0, none_type_0, none_type_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value is None
    assert value_0.raw_format is None
    var_0 = value_0.get_value()
    value_0.as_zn_payload()

def test_case_3():
    bool_0 = False
    value_0 = module_1.Value(bool_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value is False
    assert value_0.raw_format == ''
    var_0 = value_0.get_value()
    assert var_0 is False

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    value_0 = module_1.Value(none_type_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value is None
    assert value_0.raw_format == ''
    var_0 = value_0.__eq__(none_type_0)
    assert var_0 is False
    var_1 = value_0.__repr__()
    var_1.__or__(var_0)

def test_case_5():
    var_0 = module_0.python_implementation()
    value_0 = module_1.Value(var_0)
    assert value_0.value == b'CPython'
    assert value_0.raw_format == ''

def test_case_6():
    bool_0 = False
    value_0 = module_1.Value(bool_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value is False
    assert value_0.raw_format == ''

def test_case_7():
    var_0 = module_0.win32_is_iot()
    value_0 = module_1.Value(var_0, var_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding is False
    assert value_0.value is False
    assert value_0.raw_format == ''
    var_1 = var_0.__eq__(var_0)
    var_2 = var_0.__xor__(var_1)
    var_3 = value_0.get_encoding()
    assert var_3 is False

@pytest.mark.xfail(strict=True)
def test_case_8():
    encoding_0 = module_2.Encoding.PROPERTIES
    value_0 = module_1.Value(encoding_0, encoding_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.PROPERTIES
    assert value_0.value == module_2.Encoding.PROPERTIES
    assert value_0.raw_format == ''
    var_0 = value_0.__repr__()
    value_1 = module_1.Value(var_0)
    assert value_1.value == b'Encoding.PROPERTIES'
    assert value_1.raw_format == ''
    value_0.from_zn_resource(var_0, value_0)

def test_case_9():
    var_0 = module_0.python_implementation()
    value_0 = module_1.Value(var_0, var_0)
    assert value_0.encoding == 'CPython'
    assert value_0.value == 'CPython'
    assert value_0.raw_format == ''
    var_1 = value_0.as_zn_payload()
    assert var_1 == b'CPython'

def test_case_10():
    var_0 = module_0.win32_is_iot()
    value_0 = module_1.Value(var_0, var_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding is False
    assert value_0.value is False
    assert value_0.raw_format == ''
    var_1 = value_0.from_zn_resource(var_0, value_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'zenoh.value.Value'
    assert var_1.encoding == module_2.Encoding.RAW
    assert f'{type(var_1.value).__module__}.{type(var_1.value).__qualname__}' == 'builtins.bytearray'
    assert len(var_1.value) == 0
    assert var_1.raw_format == ''

@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    value_0 = module_1.Value(none_type_0, raw_format=none_type_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value is None
    assert value_0.raw_format is None
    var_0 = value_0.get_value()
    var_1 = value_0.__eq__(value_0)
    assert var_1 is True
    value_1 = module_1.Value(none_type_0)
    assert value_1.raw_format == ''
    value_1.from_zn_resource(value_1, value_1)

@pytest.mark.xfail(strict=True)
def test_case_12():
    encoding_0 = module_2.Encoding.PROPERTIES
    value_0 = module_1.Value(encoding_0, encoding_0, encoding_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.PROPERTIES
    assert value_0.value == module_2.Encoding.PROPERTIES
    assert value_0.raw_format == module_2.Encoding.PROPERTIES
    var_0 = value_0.get_value()
    assert var_0 == module_2.Encoding.PROPERTIES
    value_0.as_zn_payload()

def test_case_13():
    encoding_0 = module_2.Encoding.JSON
    with pytest.raises(module_3.ZException):
        module_1.Value(encoding_0, encoding_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    encoding_0 = module_2.Encoding.JSON
    value_0 = module_0.win32_edition()
    var_0 = value_0.__repr__()
    var_1 = value_0.__repr__()
    value_1 = module_1.Value(var_1, encoding_0)
    assert f'{type(value_1).__module__}.{type(value_1).__qualname__}' == 'zenoh.value.Value'
    assert value_1.encoding == module_2.Encoding.JSON
    assert value_1.value == '"None"'
    assert value_1.raw_format == ''
    var_2 = value_1.__str__()
    assert var_2 == '"None"'
    var_3 = value_1.get_value()
    assert var_3 == 'None'
    var_4 = value_0.__bool__()
    value_2 = module_1.Value(value_0, raw_format=var_4)
    assert f'{type(value_2).__module__}.{type(value_2).__qualname__}' == 'zenoh.value.Value'
    assert value_2.encoding == module_2.Encoding.RAW
    assert value_2.value is None
    assert value_2.raw_format is False
    var_4.isprintable()

@pytest.mark.xfail(strict=True)
def test_case_15():
    encoding_0 = module_2.Encoding.JSON
    var_0 = module_0.freedesktop_os_release()
    value_0 = module_1.Value(var_0)
    assert f'{type(value_0).__module__}.{type(value_0).__qualname__}' == 'zenoh.value.Value'
    assert value_0.encoding == module_2.Encoding.RAW
    assert value_0.value == {'NAME': 'Debian GNU/Linux', 'ID': 'debian', 'PRETTY_NAME': 'Debian GNU/Linux 11 (bullseye)', 'VERSION_ID': '11', 'VERSION': '11 (bullseye)', 'VERSION_CODENAME': 'bullseye', 'HOME_URL': 'https://www.debian.org/', 'SUPPORT_URL': 'https://www.debian.org/support', 'BUG_REPORT_URL': 'https://bugs.debian.org/'}
    assert value_0.raw_format == ''
    value_1 = module_1.Value(var_0, encoding_0)
    assert f'{type(value_1).__module__}.{type(value_1).__qualname__}' == 'zenoh.value.Value'
    assert value_1.encoding == module_2.Encoding.JSON
    assert value_1.value == '{"NAME": "Debian GNU/Linux", "ID": "debian", "PRETTY_NAME": "Debian GNU/Linux 11 (bullseye)", "VERSION_ID": "11", "VERSION": "11 (bullseye)", "VERSION_CODENAME": "bullseye", "HOME_URL": "https://www.debian.org/", "SUPPORT_URL": "https://www.debian.org/support", "BUG_REPORT_URL": "https://bugs.debian.org/"}'
    assert value_1.raw_format == ''
    var_1 = var_0.__str__()
    var_0.get_encoding()