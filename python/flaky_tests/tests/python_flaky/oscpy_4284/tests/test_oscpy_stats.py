# Automatically generated by Pynguin.
import pytest
import oscpy.stats as module_0
import collections as module_1

def test_case_0():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    stats_1 = module_0.Stats(bytes=stats_0, types=stats_0)
    assert stats_1.calls == 0
    assert stats_1.params == 0
    assert f'{type(stats_1.types).__module__}.{type(stats_1.types).__qualname__}' == 'oscpy.stats.Stats'
    var_0 = stats_0.__eq__(stats_1)
    assert var_0 is False

def test_case_1():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    var_0 = stats_0.to_tuple()

def test_case_2():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    var_0 = stats_0.__add__(stats_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 0
    assert var_0.bytes == 0
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    none_type_0 = None
    var_1 = stats_0.__add__(stats_0)
    assert var_1.calls == 0
    assert var_1.bytes == 0
    assert var_1.params == 0
    var_2 = stats_0.to_tuple()
    var_3 = var_1.__iadd__(stats_0)
    assert var_3.calls == 0
    assert var_3.bytes == 0
    assert var_3.params == 0
    var_4 = stats_0.__eq__(none_type_0)
    assert var_4 is False
    counter_0 = module_1.Counter(none_type_0)
    var_5 = counter_0.__ge__(var_1)
    var_6 = var_1.__repr__()
    assert var_6 == 'Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types: '
    var_7 = var_1.__eq__(var_1)

def test_case_3():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    var_0 = stats_0.__eq__(stats_0)
    var_1 = stats_0.__repr__()
    assert var_1 == 'Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types: '
    var_2 = var_1.__add__(var_1)
    assert var_2 == 'Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types: Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types: '
    with pytest.raises(AssertionError):
        stats_0.__iadd__(var_1)

def test_case_4():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    var_0 = stats_0.__add__(stats_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 0
    assert var_0.bytes == 0
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    var_1 = stats_0.__eq__(var_0)
    assert var_1 is True

def test_case_5():
    str_0 = ''
    stats_0 = module_0.Stats(params=str_0)
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    none_type_0 = None
    with pytest.raises(AssertionError):
        stats_0.__add__(none_type_0)

def test_case_6():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    var_0 = stats_0.__add__(stats_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 0
    assert var_0.bytes == 0
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    var_1 = stats_0.__eq__(var_0)
    assert var_1 is True
    var_2 = var_0.__ne__(var_0)

def test_case_7():
    stats_0 = module_0.Stats()
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    var_0 = stats_0.__repr__()
    assert var_0 == 'Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types: '

@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    int_0 = 65535
    list_0 = [int_0]
    stats_0 = module_0.Stats(params=list_0, types=list_0)
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.types == [65535]
    var_0 = stats_0.__eq__(set_0)
    assert var_0 is False
    int_1 = -288
    set_1 = {int_1, int_1, int_1}
    stats_1 = module_0.Stats(types=set_1)
    assert stats_1.calls == 0
    assert stats_1.bytes == 0
    assert stats_1.params == 0
    assert stats_1.types == {-288}
    stats_1.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    stats_0 = module_0.Stats(bool_0, bool_0)
    assert stats_0.params == 0
    assert f'{type(stats_0.types).__module__}.{type(stats_0.types).__qualname__}' == 'collections.Counter'
    assert len(stats_0.types) == 0
    bool_1 = False
    list_0 = [bool_1, bool_1, bool_1]
    stats_1 = module_0.Stats(types=list_0)
    assert stats_1.calls == 0
    assert stats_1.bytes == 0
    assert stats_1.params == 0
    assert stats_1.types == [False, False, False]
    var_0 = stats_1.__repr__()
    assert var_0 == 'Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types:\n        False: False\n        False: False\n        False: False'
    stats_2 = module_0.Stats(stats_1)
    assert stats_2.bytes == 0
    assert stats_2.params == 0
    assert f'{type(stats_2.types).__module__}.{type(stats_2.types).__qualname__}' == 'collections.Counter'
    assert len(stats_2.types) == 0
    var_1 = stats_2.__iadd__(stats_2)
    assert stats_1.types == [False, False, False, False, False, False]
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'oscpy.stats.Stats'
    assert f'{type(var_1.calls).__module__}.{type(var_1.calls).__qualname__}' == 'oscpy.stats.Stats'
    assert var_1.bytes == 0
    assert var_1.params == 0
    assert f'{type(var_1.types).__module__}.{type(var_1.types).__qualname__}' == 'collections.Counter'
    assert len(var_1.types) == 0
    var_2 = var_1.to_tuple()
    var_0.__iadd__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'Dku#3b4K"LJ\\y'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    stats_0 = module_0.Stats(types=dict_0)
    assert stats_0.calls == 0
    assert stats_0.bytes == 0
    assert stats_0.params == 0
    assert stats_0.types == {'Dku#3b4K"LJ\\y': 'Dku#3b4K"LJ\\y'}
    none_type_0 = None
    var_0 = stats_0.to_tuple()
    var_1 = stats_0.__eq__(none_type_0)
    assert var_1 is False
    var_2 = var_1.__eq__(none_type_0)
    var_3 = stats_0.__repr__()
    assert var_3 == 'Stats:\n    calls: 0\n    bytes: 0\n    params: 0\n    types:\n        Dku#3b4K"LJ\\y: Dku#3b4K"LJ\\y'
    var_3.__iadd__(var_1)