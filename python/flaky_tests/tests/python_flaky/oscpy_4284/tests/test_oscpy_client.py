# Automatically generated by Pynguin.
import pytest
import oscpy.client as module_0
import oscpy.stats as module_1

@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.send_message(none_type_0, none_type_0, none_type_0, none_type_0, encoding=none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.send_bundle(bool_0, bool_0, bool_0, sock=bool_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.send_bundle(none_type_0, none_type_0, none_type_0, none_type_0, encoding=none_type_0)

def test_case_3():
    bool_0 = True
    o_s_c_client_0 = module_0.OSCClient(bool_0, bool_0, bool_0)
    assert o_s_c_client_0.sock is True
    assert o_s_c_client_0.encoding == ''
    assert o_s_c_client_0.encoding_errors == 'strict'

def test_case_4():
    bool_0 = False
    o_s_c_client_0 = module_0.OSCClient(bool_0, bool_0, encoding_errors=bool_0)
    assert f'{type(o_s_c_client_0.sock).__module__}.{type(o_s_c_client_0.sock).__qualname__}' == 'socket.socket'
    assert o_s_c_client_0.encoding == ''

@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b'/'
    o_s_c_client_0 = module_0.OSCClient(bytes_0, bytes_0)
    assert f'{type(o_s_c_client_0.sock).__module__}.{type(o_s_c_client_0.sock).__qualname__}' == 'socket.socket'
    assert o_s_c_client_0.encoding == ''
    assert o_s_c_client_0.encoding_errors == 'strict'
    o_s_c_client_0.send_message(bytes_0, bytes_0, bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    set_0 = set()
    int_0 = 6
    o_s_c_client_0 = module_0.OSCClient(int_0, int_0, int_0, int_0)
    assert o_s_c_client_0.sock == 6
    assert o_s_c_client_0.encoding_errors == 'strict'
    none_type_0 = None
    o_s_c_client_1 = module_0.OSCClient(o_s_c_client_0, o_s_c_client_0, encoding=none_type_0, encoding_errors=int_0)
    assert f'{type(o_s_c_client_1.sock).__module__}.{type(o_s_c_client_1.sock).__qualname__}' == 'socket.socket'
    o_s_c_client_1.send_bundle(set_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b''
    bool_0 = True
    var_0 = module_0.send_message(bytes_0, bytes_0, bytes_0, bool_0, safer=bytes_0, encoding_errors=bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 1
    assert var_0.bytes == 8
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    module_0.send_message(bool_0, var_0, var_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b''
    bool_0 = True
    var_0 = module_0.send_message(bytes_0, bytes_0, bytes_0, bool_0, safer=bool_0, encoding_errors=bool_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 1
    assert var_0.bytes == 8
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    module_0.send_bundle(var_0, var_0, var_0, bool_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b''
    int_0 = 3947
    var_0 = module_0.send_bundle(bytes_0, bytes_0, int_0, encoding=int_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 0
    assert var_0.bytes == 0
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    stats_0 = module_1.Stats(bytes_0, params=var_0)
    module_0.send_message(int_0, int_0, stats_0, bytes_0, safer=stats_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b''
    int_0 = 3947
    var_0 = module_0.send_bundle(bytes_0, bytes_0, int_0, sock=bytes_0, safer=int_0, encoding=bytes_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'oscpy.stats.Stats'
    assert var_0.calls == 0
    assert var_0.bytes == 0
    assert var_0.params == 0
    assert f'{type(var_0.types).__module__}.{type(var_0.types).__qualname__}' == 'collections.Counter'
    assert len(var_0.types) == 0
    none_type_0 = None
    o_s_c_client_0 = module_0.OSCClient(none_type_0, bytes_0)
    assert f'{type(o_s_c_client_0.sock).__module__}.{type(o_s_c_client_0.sock).__qualname__}' == 'socket.socket'
    assert o_s_c_client_0.encoding == ''
    assert o_s_c_client_0.encoding_errors == 'strict'
    module_0.send_message(o_s_c_client_0, bytes_0, o_s_c_client_0, o_s_c_client_0, encoding_errors=o_s_c_client_0)