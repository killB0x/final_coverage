# Automatically generated by Pynguin.
import pytest
import oscpy.server as module_0
import inspect as module_1
import ast as module_2
import enum as module_3
import tokenize as module_4

def test_case_0():
    none_type_0 = None
    o_s_c_thread_server_0 = module_0.OSCThreadServer(encoding=none_type_0, intercept_errors=none_type_0)
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.getaddress()

def test_case_1():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.ServerClass(none_type_0)

def test_case_3():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.address(o_s_c_thread_server_0, o_s_c_thread_server_0)
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.close()

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    o_s_c_thread_server_0 = module_0.OSCThreadServer(timeout=none_type_0, advanced_matching=none_type_0)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_0.answer(bundle=none_type_0, timetag=o_s_c_thread_server_0, port=o_s_c_thread_server_0)

def test_case_5():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.close()

@pytest.mark.xfail(strict=True)
def test_case_6():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.stop_all()
    var_1 = module_1.isasyncgen(o_s_c_thread_server_0)
    var_1.__isub__(o_s_c_thread_server_0)

def test_case_7():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.unbind(o_s_c_thread_server_1, o_s_c_thread_server_0)

def test_case_8():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen()
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.send_message(var_0, o_s_c_thread_server_0, var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_0.close(o_s_c_thread_server_0)

def test_case_10():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.send_bundle(o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    list_0 = [var_0, var_0]
    module_2.Suite(*list_0, **var_0)

def test_case_12():
    dict_0 = {}
    o_s_c_thread_server_0 = module_0.OSCThreadServer(dict_0, advanced_matching=dict_0)
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.bind(dict_0, dict_0)

def test_case_13():
    dict_0 = {}
    o_s_c_thread_server_0 = module_0.OSCThreadServer(dict_0, advanced_matching=dict_0)
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen()
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.bind(dict_0, dict_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_0.send_message(o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_0)

def test_case_15():
    dict_0 = {}
    o_s_c_thread_server_0 = module_0.OSCThreadServer(dict_0, advanced_matching=dict_0)
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.terminate_server()
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.bind(dict_0, dict_0)

def test_case_16():
    dict_0 = {}
    o_s_c_thread_server_0 = module_0.OSCThreadServer(dict_0, advanced_matching=dict_0)
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.stop()

@pytest.mark.xfail(strict=True)
def test_case_17():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.unbind(o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 1
    var_1 = var_0.__repr__()
    module_2.operator(*var_1, **var_0)

def test_case_18():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen()
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    o_s_c_thread_server_0.stop(var_0)
    assert o_s_c_thread_server_0.sockets == []
    var_1 = o_s_c_thread_server_0.close(var_0)
    with pytest.raises(RuntimeError):
        var_2 = o_s_c_thread_server_0.close(var_1)

@pytest.mark.xfail(strict=True)
def test_case_19():
    dict_0 = {}
    o_s_c_thread_server_0 = module_0.OSCThreadServer(dict_0, advanced_matching=dict_0)
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = module_1.iscode(dict_0)
    o_s_c_thread_server_0.join_server(o_s_c_thread_server_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = module_0.ServerClass(o_s_c_thread_server_0)
    assert var_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert var_0.encoding == ''
    assert var_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_1 = o_s_c_thread_server_1.unbind(o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 1
    o_s_c_thread_server_1.getaddress(o_s_c_thread_server_1)

def test_case_21():
    dict_0 = module_3._EnumDict()
    o_s_c_thread_server_0 = module_0.OSCThreadServer(timeout=dict_0, default_handler=dict_0)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    with pytest.raises(ValueError):
        o_s_c_thread_server_0.listen(dict_0, default=dict_0, family=o_s_c_thread_server_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen()
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_0.close(var_0)
    var_1.__isub__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.address_method(o_s_c_thread_server_0, get_address=o_s_c_thread_server_0)
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_1 = o_s_c_thread_server_1.unbind(o_s_c_thread_server_0, o_s_c_thread_server_0, o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 1
    var_1.__iand__(var_1)

@pytest.mark.xfail(strict=True)
def test_case_24():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_0.answer(values=o_s_c_thread_server_0, port=o_s_c_thread_server_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    o_s_c_thread_server_1.stop_all()
    assert o_s_c_thread_server_1.sockets == []
    var_2 = o_s_c_thread_server_0.answer(o_s_c_thread_server_0, var_1, timetag=var_1)

@pytest.mark.xfail(strict=True)
def test_case_26():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 8
    var_0.bind_meta_routes()

def test_case_27():
    o_s_c_thread_server_0 = module_1.currentframe()
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    var_1 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    var_2 = module_4.group()
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_1.stop()

@pytest.mark.xfail(strict=True)
def test_case_28():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen(default=o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(o_s_c_thread_server_0.default_socket).__module__}.{type(o_s_c_thread_server_0.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_0.bind_meta_routes(var_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen(default=o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(o_s_c_thread_server_0.default_socket).__module__}.{type(o_s_c_thread_server_0.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_0.bind_meta_routes(o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 8
    var_2 = o_s_c_thread_server_0.unbind(o_s_c_thread_server_0, o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 9
    o_s_c_thread_server_0.answer(o_s_c_thread_server_0, var_1, timetag=var_1)

def test_case_30():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_1.close(var_0)
    assert o_s_c_thread_server_1.default_socket is None
    var_2 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 8
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.unbind(o_s_c_thread_server_0, o_s_c_thread_server_0)

@pytest.mark.xfail(strict=True)
def test_case_31():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = module_0.ServerClass(o_s_c_thread_server_1)
    assert len(var_1.addresses) == 4
    assert var_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert var_1.encoding == ''
    assert var_1.encoding_errors == 'strict'
    var_2 = o_s_c_thread_server_1.bind_meta_routes()
    var_3 = o_s_c_thread_server_1.unbind(o_s_c_thread_server_1, o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 5
    assert len(var_1.addresses) == 5
    var_1.stop_all()
    assert o_s_c_thread_server_1.sockets == []
    assert var_1.sockets == []
    var_4 = var_3.__reversed__()

def test_case_32():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_1.bind_meta_routes()
    var_2 = o_s_c_thread_server_1.unbind(o_s_c_thread_server_1, o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 5
    var_3 = o_s_c_thread_server_1.getaddress()
    with pytest.raises(RuntimeError):
        o_s_c_thread_server_0.send_message(o_s_c_thread_server_0, o_s_c_thread_server_0, var_2, o_s_c_thread_server_1, var_2)

@pytest.mark.xfail(strict=True)
def test_case_33():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    o_s_c_thread_server_1.stop(var_0)
    assert o_s_c_thread_server_1.sockets == []
    var_1 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 8
    var_2 = o_s_c_thread_server_1.send_message(var_1, var_0, var_1, var_1, safer=var_1)

@pytest.mark.xfail(strict=True)
def test_case_34():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    o_s_c_thread_server_1 = module_0.OSCThreadServer(advanced_matching=o_s_c_thread_server_0)
    assert o_s_c_thread_server_1.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_1.listen(default=o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 4
    assert len(o_s_c_thread_server_1.sockets) == 1
    assert f'{type(o_s_c_thread_server_1.default_socket).__module__}.{type(o_s_c_thread_server_1.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_1.bind_meta_routes(o_s_c_thread_server_1)
    assert len(o_s_c_thread_server_1.addresses) == 8
    o_s_c_thread_server_1.send_bundle(var_0, var_0, o_s_c_thread_server_1, safer=o_s_c_thread_server_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    o_s_c_thread_server_0 = module_0.OSCThreadServer()
    assert o_s_c_thread_server_0.timeout == pytest.approx(0.01, abs=0.01, rel=0.01)
    assert o_s_c_thread_server_0.encoding == ''
    assert o_s_c_thread_server_0.encoding_errors == 'strict'
    var_0 = o_s_c_thread_server_0.listen(default=o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 4
    assert len(o_s_c_thread_server_0.sockets) == 1
    assert f'{type(o_s_c_thread_server_0.default_socket).__module__}.{type(o_s_c_thread_server_0.default_socket).__qualname__}' == 'socket.socket'
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'socket.socket'
    var_1 = o_s_c_thread_server_0.bind_meta_routes(o_s_c_thread_server_0)
    assert len(o_s_c_thread_server_0.addresses) == 8
    var_2 = o_s_c_thread_server_0.close()
    assert o_s_c_thread_server_0.default_socket is None
    o_s_c_thread_server_1 = module_0.OSCThreadServer(timeout=o_s_c_thread_server_0, advanced_matching=var_1)
    assert o_s_c_thread_server_1.encoding == ''
    assert o_s_c_thread_server_1.encoding_errors == 'strict'
    suite_0 = module_2.Suite()
    var_0.stop_all()