# Automatically generated by Pynguin.
import pytest
import tunacell.io.metadata as module_0
import re as module_1
import enum as module_2
import codecs as module_3
import yaml as module_4

def test_case_0():
    metadata_not_found_0 = module_0.MetadataNotFound()

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.load_metadata(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    module_0.Metadata(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.load_counts(none_type_0)
    module_0.load_metadata(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_1.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_0.Metadata(list_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_2._EnumDict()
    list_0 = [var_0, var_0]
    module_0.Metadata(list_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    missing_entry_0 = module_0.MissingEntry()
    bool_0 = True
    module_0.load_from_yaml(bool_0)

def test_case_7():
    dict_0 = {}
    local_metadata_0 = module_0.LocalMetadata(dict_0, dict_0)
    assert f'{type(module_0.LocalMetadata.loc).__module__}.{type(module_0.LocalMetadata.loc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.LocalMetadata.period).__module__}.{type(module_0.LocalMetadata.period).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    local_metadata_0 = module_0.LocalMetadata(dict_0, dict_0)
    assert f'{type(module_0.LocalMetadata.loc).__module__}.{type(module_0.LocalMetadata.loc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.LocalMetadata.period).__module__}.{type(module_0.LocalMetadata.period).__qualname__}' == 'builtins.property'
    local_metadata_0.__getitem__(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    local_metadata_0 = module_0.LocalMetadata(dict_0, dict_0)
    assert f'{type(module_0.LocalMetadata.loc).__module__}.{type(module_0.LocalMetadata.loc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.LocalMetadata.period).__module__}.{type(module_0.LocalMetadata.period).__qualname__}' == 'builtins.property'
    var_0 = local_metadata_0.__repr__()
    module_0.load_metadata(var_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    local_metadata_0 = module_0.LocalMetadata(dict_0, dict_0)
    assert f'{type(module_0.LocalMetadata.loc).__module__}.{type(module_0.LocalMetadata.loc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.LocalMetadata.period).__module__}.{type(module_0.LocalMetadata.period).__qualname__}' == 'builtins.property'
    module_0.Metadata(local_metadata_0)

def test_case_11():
    str_0 = 'JXP*jdXpd%K'
    dict_0 = {str_0: str_0, str_0: str_0}
    local_metadata_0 = module_0.LocalMetadata(dict_0, dict_0)
    assert f'{type(module_0.LocalMetadata.loc).__module__}.{type(module_0.LocalMetadata.loc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.LocalMetadata.period).__module__}.{type(module_0.LocalMetadata.period).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'e_m@n'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.Metadata(list_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'sBj\x0bCr\\Iq$^A4a'
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_3.make_identity_dict(str_0)
    local_metadata_0 = module_0.LocalMetadata(var_0, dict_0)
    assert f'{type(module_0.LocalMetadata.loc).__module__}.{type(module_0.LocalMetadata.loc).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.LocalMetadata.period).__module__}.{type(module_0.LocalMetadata.period).__qualname__}' == 'builtins.property'
    var_1 = module_0.load_counts(dict_0)
    list_0 = [var_1]
    module_0.Metadata(list_0)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ''
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    local_metadata_0 = module_4.parse(dict_0, str_0)
    metadata_error_0 = module_0.MetadataError(*dict_0)
    var_0 = module_0.load_counts(dict_0)
    list_0 = [var_0, dict_0, dict_0, var_0]
    module_0.Metadata(list_0)