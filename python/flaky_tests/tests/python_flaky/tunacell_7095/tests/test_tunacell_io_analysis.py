# Automatically generated by Pynguin.
import pytest
import tunacell.io.analysis as module_0
import tunacell.io.text as module_1
import yaml.tokens as module_2
import tunacell.filters.cells as module_3
import base64 as module_4

@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = 'mastert'
    var_0 = module_0.get_analysis_path(str_0, str_0, str_0)
    assert var_0 == 'mastert/analysis'
    module_0.get_observable_path(var_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.print_conditions(set_0, set_0, set_0)

def test_case_2():
    str_0 = 'mastert'
    var_0 = module_0.get_filters(str_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '*h/hVM/'
    module_0.get_condition_path(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.get_condition_path(none_type_0, none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = 'matert'
    module_0.get_condition_path(str_0, str_0)

def test_case_6():
    str_0 = 'mtert'
    var_0 = module_0.get_filters(str_0)
    var_1 = module_0.get_biobservable_path(str_0, var_0)
    assert var_1 == 'mtert/'

def test_case_7():
    impossible_to_load_0 = module_0.ImpossibleToLoad()

@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.get_conditions(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '90\\*,m\nd?M!'
    module_0.get_filter_path(str_0, str_0)

def test_case_10():
    str_0 = 'mastert'
    with pytest.raises(module_1.MissingFileError):
        module_0.load_item_from_path(str_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = 'mastert'
    var_0 = module_0.get_filters(str_0)
    module_0.get_biobservable_path(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'master'
    impossible_to_load_0 = module_0.ImpossibleToLoad()
    var_0 = module_0.get_condition_path(str_0, str_0)
    module_0.get_observable_path(str_0, impossible_to_load_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = 'mer'
    var_0 = module_0.get_filters(str_0)
    var_1 = module_0.get_biobservable_path(str_0, var_0)
    assert var_1 == 'mer/'
    none_type_0 = None
    var_2 = module_0.get_condition_path(str_0, none_type_0)
    directive_token_0 = module_2.DirectiveToken(str_0, var_0, str_0, str_0)
    var_3 = module_0.get_analysis_path(var_1, var_1)
    assert var_3 == 'mer/analysis'
    var_4 = module_0.get_observable_path(str_0, directive_token_0, var_0)
    assert var_4 == 'mer/mer'
    var_5 = var_3.__repr__()
    assert var_5 == "'mer/analysis'"
    var_6 = module_0.get_observable_path(var_3, directive_token_0)
    assert var_6 == 'mer/analysis/mer'
    module_0.get_filter_path(var_6, var_5)

@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'mastert'
    module_0.get_observable_path(str_0, str_0)

def test_case_15():
    str_0 = '*h/hVM/'
    with pytest.raises(module_1.MissingFolderError):
        module_0.get_biobservable_path(str_0, str_0)

def test_case_16():
    str_0 = 'root/\n'
    with pytest.raises(module_1.MissingFileError):
        module_0.read_count_file(str_0)

def test_case_17():
    str_0 = '1\t8:5i}O$(#'
    with pytest.raises(module_1.MissingFolderError):
        module_0.get_observable_path(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = ']astert'
    var_0 = module_0.get_analysis_path(str_0, str_0, str_0)
    assert var_0 == ']astert/analysis'
    module_0.print_filtersets(var_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = ''
    var_0 = module_0.get_analysis_path(str_0, str_0, str_0)
    assert var_0 == 'analysis'
    module_0.print_filtersets(var_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = 'mastert'
    module_0.read_count_file(str_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = '90\\*nmRd?M!'
    module_0.write_count_file(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '/#?sKDMIR^C\r"7'
    var_0 = module_3.FilterCellIDparity()
    var_1 = module_0.get_filter_path(str_0, var_0)
    module_4.standard_b64decode(var_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = 'master'
    none_type_0 = None
    var_0 = module_0.get_condition_path(str_0, str_0, none_type_0)
    var_0.peek_token()

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = 'mtert'
    module_0.get_condition_path(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = 'master'
    var_0 = module_0.get_filters(str_0)
    var_1 = module_0.get_biobservable_path(str_0, var_0, var_0)
    assert var_1 == 'master/'
    module_0.get_observable_path(str_0, var_1)

def test_case_26():
    str_0 = 'matert'
    directive_token_0 = module_2.DirectiveToken(str_0, str_0, str_0, str_0)
    var_0 = module_0.get_observable_path(str_0, directive_token_0, directive_token_0)
    assert var_0 == 'matert/matert'

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = 'matet'
    directive_token_0 = module_2.DirectiveToken(str_0, str_0, str_0, str_0)
    var_0 = module_0.get_observable_path(str_0, directive_token_0)
    assert var_0 == 'matet/matet'
    module_0.load_item_from_path(var_0)

def test_case_28():
    str_0 = 'matert'
    var_0 = module_0.get_filters(str_0)
    directive_token_0 = module_2.DirectiveToken(str_0, str_0, str_0, str_0)
    var_1 = module_0.get_observable_path(str_0, directive_token_0, var_0)
    assert var_1 == 'matert/matert'

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = 'astert'
    directive_token_0 = module_2.DirectiveToken(str_0, str_0, str_0, str_0)
    none_type_0 = None
    var_0 = module_0.get_observable_path(str_0, directive_token_0, none_type_0)
    assert var_0 == 'astert/astert'
    impossible_to_load_0 = module_0.ImpossibleToLoad(*var_0)
    var_0.__contains__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = 'matert'
    directive_token_0 = module_2.DirectiveToken(str_0, str_0, str_0, str_0)
    var_0 = module_0.get_observable_path(str_0, directive_token_0)
    assert var_0 == 'matert/matert'
    module_0.load_item_from_path(var_0)