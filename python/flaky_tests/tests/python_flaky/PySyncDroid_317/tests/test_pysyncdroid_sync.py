# Automatically generated by Pynguin.
import pytest
import pysyncdroid.sync as module_0
import pysyncdroid.exceptions as module_1
import pysyncdroid.gvfs as module_2

@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 172
    module_0.readlink(int_0)

def test_case_1():
    none_type_0 = None
    var_0 = module_0.readlink(none_type_0)
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'

def test_case_2():
    str_0 = ")/\rU(oEg@nG!N!'&5"
    var_0 = module_0.readlink(str_0)
    assert var_0 == ")/\rU(oEg@nG!N!'&5"
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'

def test_case_3():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.readlink(str_0)
    assert sync_0 == '/pynguin/`2lv7v~#'
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'

def test_case_4():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, verbose=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose == '`2lv7v~#'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'

@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, verbose=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose == '`2lv7v~#'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    sync_0.copy_file(str_0, sync_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    sync_0.copy_file(sync_0, sync_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, str_0, verbose=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose == '`2lv7v~#'
    assert sync_0.unmatched == '`2lv7v~#'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    sync_0.get_source_subdir_data(str_0, sync_0)

def test_case_8():
    str_0 = ':`&NT(~S8VB^'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == ':'
    assert sync_0.mtp_gvfs_path == '`'
    assert sync_0.source == ':`&NT(~S8VB^'
    assert sync_0.destination == ':`&NT(~S8VB^'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == ':`&NT(~S8VB^'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync_data_template(str_0, str_0)
    var_1 = sync_0.handle_destination_dir_data(var_0)

def test_case_9():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, ignore_file_types=str_0)
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.ignore_file_types == ['`', '2', 'l', 'v', '7', 'v', '~', '#']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    with pytest.raises(OSError):
        sync_0.set_source_abs()

def test_case_10():
    str_0 = '`2lv7v~#'
    var_0 = module_0.Sync(str_0, str_0, str_0, ignore_file_types=str_0)
    assert var_0.mtp_url == '`'
    assert var_0.mtp_gvfs_path == '2'
    assert var_0.unmatched == 'ignore'
    assert var_0.ignore_file_types == ['`', '2', 'l', 'v', '7', 'v', '~', '#']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'

def test_case_11():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, str_0, verbose=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose == '`2lv7v~#'
    assert sync_0.unmatched == '`2lv7v~#'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.set_destination_abs()
    assert sync_0.destination == '/pynguin/`2lv7v~#'

def test_case_12():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, ignore_file_types=str_0)
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.ignore_file_types == ['`', '2', 'l', 'v', '7', 'v', '~', '#']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.handle_ignored_file_type(str_0)

def test_case_13():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, verbose=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose == '`2lv7v~#'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.get_sync_data()

def test_case_14():
    str_0 = '`2lv7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, verbose=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.source == '`2lv7v~#'
    assert sync_0.destination == '`2lv7v~#'
    assert sync_0.verbose == '`2lv7v~#'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is False
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync()

def test_case_15():
    str_0 = 'pU/@|EdTlq: %LW9'
    sync_0 = module_0.Sync(str_0, str_0, str_0, ignore_file_types=str_0)
    assert sync_0.mtp_url == 'p'
    assert sync_0.mtp_gvfs_path == 'U'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.ignore_file_types == ['p', 'u', '/', '@', '|', 'e', 'd', 't', 'l', 'q', ':', ' ', '%', 'l', 'w', '9']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    with pytest.raises(OSError):
        sync_0.set_source_abs()

def test_case_16():
    str_0 = '`2lv7v~#'
    none_type_0 = None
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0, ignore_file_types=str_0, verbose=none_type_0)
    assert sync_0.mtp_url == '`'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.ignore_file_types == ['`', '2', 'l', 'v', '7', 'v', '~', '#']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.set_destination_subdir_abs(str_0)
    assert var_0 == '`2lv7v~#/'
    var_1 = sync_0.get_sync_data()

@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'po-5b8T<b{QKOEfw'
    none_type_0 = None
    var_0 = module_0.readlink(none_type_0)
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == 'p'
    assert sync_0.mtp_gvfs_path == 'o'
    assert sync_0.source == 'po-5b8T<b{QKOEfw'
    assert sync_0.destination == 'po-5b8T<b{QKOEfw'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == 'po-5b8T<b{QKOEfw'
    assert sync_0.ignore_file_types is None
    none_type_1 = None
    sync_1 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0, ignore_file_types=str_0, verbose=none_type_1)
    assert sync_1.mtp_url == 'p'
    assert sync_1.mtp_gvfs_path == 'o'
    assert sync_1.unmatched == 'ignore'
    var_1 = sync_1.set_destination_subdir_abs(str_0)
    assert var_1 == 'po-5b8T<b{QKOEfw/'
    var_2 = sync_1.set_destination_subdir_abs(var_1)
    assert var_2 == 'po-5b8T<b{QKOEfw/'
    var_2.copy_file(var_1, sync_0)

def test_case_18():
    str_0 = '~2:v7v~#'
    sync_0 = module_0.Sync(str_0, str_0, str_0, ignore_file_types=str_0)
    assert sync_0.mtp_url == '~'
    assert sync_0.mtp_gvfs_path == '2'
    assert sync_0.unmatched == 'ignore'
    assert sync_0.ignore_file_types == ['~', '2', ':', 'v', '7', 'v', '~', '#']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    with pytest.raises(OSError):
        sync_0.set_source_abs()

def test_case_19():
    str_0 = '\x0b\x0c'
    none_type_0 = None
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=none_type_0, ignore_file_types=str_0, verbose=none_type_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is None
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is None
    assert sync_0.ignore_file_types == ['\x0b', '\x0c']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.set_destination_abs()
    assert sync_0.destination == '/pynguin/'
    var_1 = sync_0.set_source_abs()
    assert sync_0.source == '/pynguin/'
    var_2 = sync_0.get_sync_data()
    var_3 = sync_0.set_destination_abs()

def test_case_20():
    str_0 = '#/#L:}.fi'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '#'
    assert sync_0.mtp_gvfs_path == '/'
    assert sync_0.source == '#/#L:}.fi'
    assert sync_0.destination == '#/#L:}.fi'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '#/#L:}.fi'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync_data_template(str_0, str_0)
    var_1 = sync_0.handle_destination_dir_data(var_0)
    var_2 = sync_0.do_sync(var_0)

def test_case_21():
    str_0 = '#&/#:}.f'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '#'
    assert sync_0.mtp_gvfs_path == '&'
    assert sync_0.source == '#&/#:}.f'
    assert sync_0.destination == '#&/#:}.f'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '#&/#:}.f'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync_data_template(str_0, str_0)
    var_1 = sync_0.handle_destination_dir_data(var_0)
    none_type_0 = None
    var_2 = sync_0.set_destination_abs()
    assert sync_0.destination == '&/#&/#:}.f'
    var_3 = module_0.readlink(none_type_0)
    var_4 = sync_0.do_sync(var_0)
    sync_1 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0, ignore_file_types=str_0, verbose=none_type_0)
    assert sync_1.mtp_url == '#'
    assert sync_1.mtp_gvfs_path == '&'
    assert sync_1.unmatched == 'ignore'
    with pytest.raises(module_1.IgnoredTypeException):
        sync_1.handle_ignored_file_type(str_0)

@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = '\x0b\x0c'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '\x0b\x0c'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    sync_1 = module_0.Sync(str_0, str_0, str_0, str_0, sync_0, str_0, sync_0)
    assert sync_1.mtp_url == '\x0b'
    var_0 = sync_1.set_destination_abs()
    assert sync_1.destination == '/pynguin/'
    var_1 = sync_1.set_source_abs()
    assert sync_1.source == '/pynguin/'
    sync_1.sync()

@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '#/#L:}.fi'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '#'
    assert sync_0.mtp_gvfs_path == '/'
    assert sync_0.source == '#/#L:}.fi'
    assert sync_0.destination == '#/#L:}.fi'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '#/#L:}.fi'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync_data_template(str_0, str_0)
    var_1 = sync_0.get_source_subdir_data(var_0, var_0)
    none_type_0 = None
    var_2 = module_0.readlink(none_type_0)
    sync_0.do_sync(var_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = '\x0b\x0c'
    none_type_0 = None
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=none_type_0, ignore_file_types=str_0, verbose=none_type_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is None
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is None
    assert sync_0.ignore_file_types == ['\x0b', '\x0c']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.set_source_abs()
    assert sync_0.source == '/pynguin/'
    sync_0.get_sync_data()

@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = '\x0b\x0c'
    none_type_0 = None
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=none_type_0, ignore_file_types=str_0, verbose=none_type_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is None
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is None
    assert sync_0.ignore_file_types == ['\x0b', '\x0c']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    dict_0 = {none_type_0: sync_0, sync_0: sync_0, none_type_0: sync_0, sync_0: sync_0}
    sync_0.get_source_subdir_data(dict_0, dict_0)

def test_case_26():
    str_0 = '\x0b\x0c'
    none_type_0 = None
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0, ignore_file_types=str_0, verbose=none_type_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is None
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '\x0b\x0c'
    assert sync_0.ignore_file_types == ['\x0b', '\x0c']
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.set_source_abs()
    assert sync_0.source == '/pynguin/'

@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = '\x0b\x0c'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '\x0b\x0c'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.set_destination_abs()
    assert sync_0.destination == '/pynguin/'
    sync_1 = module_0.Sync(str_0, str_0, str_0, str_0, var_0, str_0, sync_0)
    assert sync_1.mtp_url == '\x0b'
    var_1 = sync_1.set_destination_abs()
    assert sync_1.destination == '/pynguin/'
    var_2 = sync_1.set_source_abs()
    assert sync_1.source == '/pynguin/'
    var_3 = sync_1.sync()
    var_2.handle_ignored_file_type(str_0)

@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = '\x0b\x0c'
    none_type_0 = None
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=none_type_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '\x0b'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '\x0b\x0c'
    assert sync_0.destination == '\x0b\x0c'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing is None
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync()
    var_1 = sync_0.set_source_abs()
    assert sync_0.source == '/pynguin/'
    var_2 = sync_0.sync_data_template(str_0, str_0)
    var_3 = sync_0.set_destination_subdir_abs(str_0)
    var_4 = sync_0.handle_destination_dir_data(var_2)
    var_5 = sync_0.set_destination_abs()
    assert sync_0.destination == '/pynguin/'
    var_6 = module_0.readlink(var_4)
    ignored_type_exception_0 = module_1.IgnoredTypeException()
    sync_1 = module_0.Sync(str_0, str_0, str_0, var_2, var_0, str_0, var_6)
    assert sync_1.mtp_url == '\x0b'
    assert sync_1.unmatched == {'src_dir_abs': '\x0b\x0c', 'dst_dir_abs': '\x0b\x0c', 'src_dir_fls': [], 'dst_dir_fls': []}
    var_7 = sync_1.set_destination_abs()
    var_8 = sync_1.set_source_abs()
    var_9 = sync_1.handle_ignored_file_type(str_0)
    var_10 = sync_1.sync()
    var_11 = sync_0.sync()
    module_2.rm(var_11)

@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = '/\x0c'
    sync_0 = module_0.Sync(str_0, str_0, str_0, overwrite_existing=str_0)
    assert f'{type(sync_0).__module__}.{type(sync_0).__qualname__}' == 'pysyncdroid.sync.Sync'
    assert sync_0.mtp_url == '/'
    assert sync_0.mtp_gvfs_path == '\x0c'
    assert sync_0.source == '/\x0c'
    assert sync_0.destination == '/\x0c'
    assert sync_0.verbose is False
    assert sync_0.unmatched == 'ignore'
    assert sync_0.overwrite_existing == '/\x0c'
    assert sync_0.ignore_file_types is None
    assert module_0.IGNORE == 'ignore'
    assert module_0.REMOVE == 'remove'
    assert module_0.SYNCHRONIZE == 'synchronize'
    var_0 = sync_0.sync()
    var_1 = sync_0.set_source_abs()
    assert sync_0.source == '/'
    var_2 = sync_0.sync_data_template(str_0, str_0)
    var_3 = sync_0.handle_ignored_file_type(var_2)
    var_4 = sync_0.handle_destination_dir_data(var_2)
    var_5 = sync_0.set_destination_abs()
    assert sync_0.destination == '/'
    var_6 = module_0.readlink(var_4)
    ignored_type_exception_0 = module_1.IgnoredTypeException()
    none_type_0 = None
    sync_1 = module_0.Sync(str_0, str_0, str_0, var_2, none_type_0, str_0, var_6)
    assert sync_1.mtp_url == '/'
    assert sync_1.unmatched == {'src_dir_abs': '/\x0c', 'dst_dir_abs': '/\x0c', 'src_dir_fls': [], 'dst_dir_fls': []}
    var_7 = sync_1.set_destination_abs()
    var_8 = sync_1.set_source_abs()
    var_9 = sync_1.handle_ignored_file_type(str_0)
    sync_1.sync()